
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_610658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_610658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_610658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_611268 = ref object of OpenApiRestCall_610658
proc url_PostAddClientIDToOpenIDConnectProvider_611270(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_611269(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611271 = query.getOrDefault("Action")
  valid_611271 = validateParameter(valid_611271, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_611271 != nil:
    section.add "Action", valid_611271
  var valid_611272 = query.getOrDefault("Version")
  valid_611272 = validateParameter(valid_611272, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611272 != nil:
    section.add "Version", valid_611272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611273 = header.getOrDefault("X-Amz-Signature")
  valid_611273 = validateParameter(valid_611273, JString, required = false,
                                 default = nil)
  if valid_611273 != nil:
    section.add "X-Amz-Signature", valid_611273
  var valid_611274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611274 = validateParameter(valid_611274, JString, required = false,
                                 default = nil)
  if valid_611274 != nil:
    section.add "X-Amz-Content-Sha256", valid_611274
  var valid_611275 = header.getOrDefault("X-Amz-Date")
  valid_611275 = validateParameter(valid_611275, JString, required = false,
                                 default = nil)
  if valid_611275 != nil:
    section.add "X-Amz-Date", valid_611275
  var valid_611276 = header.getOrDefault("X-Amz-Credential")
  valid_611276 = validateParameter(valid_611276, JString, required = false,
                                 default = nil)
  if valid_611276 != nil:
    section.add "X-Amz-Credential", valid_611276
  var valid_611277 = header.getOrDefault("X-Amz-Security-Token")
  valid_611277 = validateParameter(valid_611277, JString, required = false,
                                 default = nil)
  if valid_611277 != nil:
    section.add "X-Amz-Security-Token", valid_611277
  var valid_611278 = header.getOrDefault("X-Amz-Algorithm")
  valid_611278 = validateParameter(valid_611278, JString, required = false,
                                 default = nil)
  if valid_611278 != nil:
    section.add "X-Amz-Algorithm", valid_611278
  var valid_611279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611279 = validateParameter(valid_611279, JString, required = false,
                                 default = nil)
  if valid_611279 != nil:
    section.add "X-Amz-SignedHeaders", valid_611279
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_611280 = formData.getOrDefault("ClientID")
  valid_611280 = validateParameter(valid_611280, JString, required = true,
                                 default = nil)
  if valid_611280 != nil:
    section.add "ClientID", valid_611280
  var valid_611281 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_611281 = validateParameter(valid_611281, JString, required = true,
                                 default = nil)
  if valid_611281 != nil:
    section.add "OpenIDConnectProviderArn", valid_611281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611282: Call_PostAddClientIDToOpenIDConnectProvider_611268;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_611282.validator(path, query, header, formData, body)
  let scheme = call_611282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611282.url(scheme.get, call_611282.host, call_611282.base,
                         call_611282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611282, url, valid)

proc call*(call_611283: Call_PostAddClientIDToOpenIDConnectProvider_611268;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_611284 = newJObject()
  var formData_611285 = newJObject()
  add(formData_611285, "ClientID", newJString(ClientID))
  add(query_611284, "Action", newJString(Action))
  add(query_611284, "Version", newJString(Version))
  add(formData_611285, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_611283.call(nil, query_611284, nil, formData_611285, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_611268(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_611269, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_611270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_610996 = ref object of OpenApiRestCall_610658
proc url_GetAddClientIDToOpenIDConnectProvider_610998(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_610997(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_611110 = query.getOrDefault("ClientID")
  valid_611110 = validateParameter(valid_611110, JString, required = true,
                                 default = nil)
  if valid_611110 != nil:
    section.add "ClientID", valid_611110
  var valid_611111 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_611111 = validateParameter(valid_611111, JString, required = true,
                                 default = nil)
  if valid_611111 != nil:
    section.add "OpenIDConnectProviderArn", valid_611111
  var valid_611125 = query.getOrDefault("Action")
  valid_611125 = validateParameter(valid_611125, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_611125 != nil:
    section.add "Action", valid_611125
  var valid_611126 = query.getOrDefault("Version")
  valid_611126 = validateParameter(valid_611126, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611126 != nil:
    section.add "Version", valid_611126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611127 = header.getOrDefault("X-Amz-Signature")
  valid_611127 = validateParameter(valid_611127, JString, required = false,
                                 default = nil)
  if valid_611127 != nil:
    section.add "X-Amz-Signature", valid_611127
  var valid_611128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611128 = validateParameter(valid_611128, JString, required = false,
                                 default = nil)
  if valid_611128 != nil:
    section.add "X-Amz-Content-Sha256", valid_611128
  var valid_611129 = header.getOrDefault("X-Amz-Date")
  valid_611129 = validateParameter(valid_611129, JString, required = false,
                                 default = nil)
  if valid_611129 != nil:
    section.add "X-Amz-Date", valid_611129
  var valid_611130 = header.getOrDefault("X-Amz-Credential")
  valid_611130 = validateParameter(valid_611130, JString, required = false,
                                 default = nil)
  if valid_611130 != nil:
    section.add "X-Amz-Credential", valid_611130
  var valid_611131 = header.getOrDefault("X-Amz-Security-Token")
  valid_611131 = validateParameter(valid_611131, JString, required = false,
                                 default = nil)
  if valid_611131 != nil:
    section.add "X-Amz-Security-Token", valid_611131
  var valid_611132 = header.getOrDefault("X-Amz-Algorithm")
  valid_611132 = validateParameter(valid_611132, JString, required = false,
                                 default = nil)
  if valid_611132 != nil:
    section.add "X-Amz-Algorithm", valid_611132
  var valid_611133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611133 = validateParameter(valid_611133, JString, required = false,
                                 default = nil)
  if valid_611133 != nil:
    section.add "X-Amz-SignedHeaders", valid_611133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611156: Call_GetAddClientIDToOpenIDConnectProvider_610996;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_611156.validator(path, query, header, formData, body)
  let scheme = call_611156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611156.url(scheme.get, call_611156.host, call_611156.base,
                         call_611156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611156, url, valid)

proc call*(call_611227: Call_GetAddClientIDToOpenIDConnectProvider_610996;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611228 = newJObject()
  add(query_611228, "ClientID", newJString(ClientID))
  add(query_611228, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_611228, "Action", newJString(Action))
  add(query_611228, "Version", newJString(Version))
  result = call_611227.call(nil, query_611228, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_610996(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_610997, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_610998,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_611303 = ref object of OpenApiRestCall_610658
proc url_PostAddRoleToInstanceProfile_611305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToInstanceProfile_611304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611306 = query.getOrDefault("Action")
  valid_611306 = validateParameter(valid_611306, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_611306 != nil:
    section.add "Action", valid_611306
  var valid_611307 = query.getOrDefault("Version")
  valid_611307 = validateParameter(valid_611307, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611307 != nil:
    section.add "Version", valid_611307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611308 = header.getOrDefault("X-Amz-Signature")
  valid_611308 = validateParameter(valid_611308, JString, required = false,
                                 default = nil)
  if valid_611308 != nil:
    section.add "X-Amz-Signature", valid_611308
  var valid_611309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611309 = validateParameter(valid_611309, JString, required = false,
                                 default = nil)
  if valid_611309 != nil:
    section.add "X-Amz-Content-Sha256", valid_611309
  var valid_611310 = header.getOrDefault("X-Amz-Date")
  valid_611310 = validateParameter(valid_611310, JString, required = false,
                                 default = nil)
  if valid_611310 != nil:
    section.add "X-Amz-Date", valid_611310
  var valid_611311 = header.getOrDefault("X-Amz-Credential")
  valid_611311 = validateParameter(valid_611311, JString, required = false,
                                 default = nil)
  if valid_611311 != nil:
    section.add "X-Amz-Credential", valid_611311
  var valid_611312 = header.getOrDefault("X-Amz-Security-Token")
  valid_611312 = validateParameter(valid_611312, JString, required = false,
                                 default = nil)
  if valid_611312 != nil:
    section.add "X-Amz-Security-Token", valid_611312
  var valid_611313 = header.getOrDefault("X-Amz-Algorithm")
  valid_611313 = validateParameter(valid_611313, JString, required = false,
                                 default = nil)
  if valid_611313 != nil:
    section.add "X-Amz-Algorithm", valid_611313
  var valid_611314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611314 = validateParameter(valid_611314, JString, required = false,
                                 default = nil)
  if valid_611314 != nil:
    section.add "X-Amz-SignedHeaders", valid_611314
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611315 = formData.getOrDefault("RoleName")
  valid_611315 = validateParameter(valid_611315, JString, required = true,
                                 default = nil)
  if valid_611315 != nil:
    section.add "RoleName", valid_611315
  var valid_611316 = formData.getOrDefault("InstanceProfileName")
  valid_611316 = validateParameter(valid_611316, JString, required = true,
                                 default = nil)
  if valid_611316 != nil:
    section.add "InstanceProfileName", valid_611316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611317: Call_PostAddRoleToInstanceProfile_611303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_611317.validator(path, query, header, formData, body)
  let scheme = call_611317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611317.url(scheme.get, call_611317.host, call_611317.base,
                         call_611317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611317, url, valid)

proc call*(call_611318: Call_PostAddRoleToInstanceProfile_611303; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611319 = newJObject()
  var formData_611320 = newJObject()
  add(formData_611320, "RoleName", newJString(RoleName))
  add(query_611319, "Action", newJString(Action))
  add(formData_611320, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611319, "Version", newJString(Version))
  result = call_611318.call(nil, query_611319, nil, formData_611320, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_611303(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_611304, base: "/",
    url: url_PostAddRoleToInstanceProfile_611305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_611286 = ref object of OpenApiRestCall_610658
proc url_GetAddRoleToInstanceProfile_611288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToInstanceProfile_611287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_611289 = query.getOrDefault("RoleName")
  valid_611289 = validateParameter(valid_611289, JString, required = true,
                                 default = nil)
  if valid_611289 != nil:
    section.add "RoleName", valid_611289
  var valid_611290 = query.getOrDefault("Action")
  valid_611290 = validateParameter(valid_611290, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_611290 != nil:
    section.add "Action", valid_611290
  var valid_611291 = query.getOrDefault("InstanceProfileName")
  valid_611291 = validateParameter(valid_611291, JString, required = true,
                                 default = nil)
  if valid_611291 != nil:
    section.add "InstanceProfileName", valid_611291
  var valid_611292 = query.getOrDefault("Version")
  valid_611292 = validateParameter(valid_611292, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611292 != nil:
    section.add "Version", valid_611292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611293 = header.getOrDefault("X-Amz-Signature")
  valid_611293 = validateParameter(valid_611293, JString, required = false,
                                 default = nil)
  if valid_611293 != nil:
    section.add "X-Amz-Signature", valid_611293
  var valid_611294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611294 = validateParameter(valid_611294, JString, required = false,
                                 default = nil)
  if valid_611294 != nil:
    section.add "X-Amz-Content-Sha256", valid_611294
  var valid_611295 = header.getOrDefault("X-Amz-Date")
  valid_611295 = validateParameter(valid_611295, JString, required = false,
                                 default = nil)
  if valid_611295 != nil:
    section.add "X-Amz-Date", valid_611295
  var valid_611296 = header.getOrDefault("X-Amz-Credential")
  valid_611296 = validateParameter(valid_611296, JString, required = false,
                                 default = nil)
  if valid_611296 != nil:
    section.add "X-Amz-Credential", valid_611296
  var valid_611297 = header.getOrDefault("X-Amz-Security-Token")
  valid_611297 = validateParameter(valid_611297, JString, required = false,
                                 default = nil)
  if valid_611297 != nil:
    section.add "X-Amz-Security-Token", valid_611297
  var valid_611298 = header.getOrDefault("X-Amz-Algorithm")
  valid_611298 = validateParameter(valid_611298, JString, required = false,
                                 default = nil)
  if valid_611298 != nil:
    section.add "X-Amz-Algorithm", valid_611298
  var valid_611299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611299 = validateParameter(valid_611299, JString, required = false,
                                 default = nil)
  if valid_611299 != nil:
    section.add "X-Amz-SignedHeaders", valid_611299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611300: Call_GetAddRoleToInstanceProfile_611286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_611300.validator(path, query, header, formData, body)
  let scheme = call_611300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611300.url(scheme.get, call_611300.host, call_611300.base,
                         call_611300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611300, url, valid)

proc call*(call_611301: Call_GetAddRoleToInstanceProfile_611286; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611302 = newJObject()
  add(query_611302, "RoleName", newJString(RoleName))
  add(query_611302, "Action", newJString(Action))
  add(query_611302, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611302, "Version", newJString(Version))
  result = call_611301.call(nil, query_611302, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_611286(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_611287, base: "/",
    url: url_GetAddRoleToInstanceProfile_611288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_611338 = ref object of OpenApiRestCall_610658
proc url_PostAddUserToGroup_611340(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddUserToGroup_611339(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611341 = query.getOrDefault("Action")
  valid_611341 = validateParameter(valid_611341, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_611341 != nil:
    section.add "Action", valid_611341
  var valid_611342 = query.getOrDefault("Version")
  valid_611342 = validateParameter(valid_611342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611342 != nil:
    section.add "Version", valid_611342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611343 = header.getOrDefault("X-Amz-Signature")
  valid_611343 = validateParameter(valid_611343, JString, required = false,
                                 default = nil)
  if valid_611343 != nil:
    section.add "X-Amz-Signature", valid_611343
  var valid_611344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611344 = validateParameter(valid_611344, JString, required = false,
                                 default = nil)
  if valid_611344 != nil:
    section.add "X-Amz-Content-Sha256", valid_611344
  var valid_611345 = header.getOrDefault("X-Amz-Date")
  valid_611345 = validateParameter(valid_611345, JString, required = false,
                                 default = nil)
  if valid_611345 != nil:
    section.add "X-Amz-Date", valid_611345
  var valid_611346 = header.getOrDefault("X-Amz-Credential")
  valid_611346 = validateParameter(valid_611346, JString, required = false,
                                 default = nil)
  if valid_611346 != nil:
    section.add "X-Amz-Credential", valid_611346
  var valid_611347 = header.getOrDefault("X-Amz-Security-Token")
  valid_611347 = validateParameter(valid_611347, JString, required = false,
                                 default = nil)
  if valid_611347 != nil:
    section.add "X-Amz-Security-Token", valid_611347
  var valid_611348 = header.getOrDefault("X-Amz-Algorithm")
  valid_611348 = validateParameter(valid_611348, JString, required = false,
                                 default = nil)
  if valid_611348 != nil:
    section.add "X-Amz-Algorithm", valid_611348
  var valid_611349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611349 = validateParameter(valid_611349, JString, required = false,
                                 default = nil)
  if valid_611349 != nil:
    section.add "X-Amz-SignedHeaders", valid_611349
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611350 = formData.getOrDefault("GroupName")
  valid_611350 = validateParameter(valid_611350, JString, required = true,
                                 default = nil)
  if valid_611350 != nil:
    section.add "GroupName", valid_611350
  var valid_611351 = formData.getOrDefault("UserName")
  valid_611351 = validateParameter(valid_611351, JString, required = true,
                                 default = nil)
  if valid_611351 != nil:
    section.add "UserName", valid_611351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611352: Call_PostAddUserToGroup_611338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_611352.validator(path, query, header, formData, body)
  let scheme = call_611352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611352.url(scheme.get, call_611352.host, call_611352.base,
                         call_611352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611352, url, valid)

proc call*(call_611353: Call_PostAddUserToGroup_611338; GroupName: string;
          UserName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611354 = newJObject()
  var formData_611355 = newJObject()
  add(formData_611355, "GroupName", newJString(GroupName))
  add(formData_611355, "UserName", newJString(UserName))
  add(query_611354, "Action", newJString(Action))
  add(query_611354, "Version", newJString(Version))
  result = call_611353.call(nil, query_611354, nil, formData_611355, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_611338(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_611339, base: "/",
    url: url_PostAddUserToGroup_611340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_611321 = ref object of OpenApiRestCall_610658
proc url_GetAddUserToGroup_611323(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddUserToGroup_611322(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611324 = query.getOrDefault("UserName")
  valid_611324 = validateParameter(valid_611324, JString, required = true,
                                 default = nil)
  if valid_611324 != nil:
    section.add "UserName", valid_611324
  var valid_611325 = query.getOrDefault("GroupName")
  valid_611325 = validateParameter(valid_611325, JString, required = true,
                                 default = nil)
  if valid_611325 != nil:
    section.add "GroupName", valid_611325
  var valid_611326 = query.getOrDefault("Action")
  valid_611326 = validateParameter(valid_611326, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_611326 != nil:
    section.add "Action", valid_611326
  var valid_611327 = query.getOrDefault("Version")
  valid_611327 = validateParameter(valid_611327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611327 != nil:
    section.add "Version", valid_611327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611328 = header.getOrDefault("X-Amz-Signature")
  valid_611328 = validateParameter(valid_611328, JString, required = false,
                                 default = nil)
  if valid_611328 != nil:
    section.add "X-Amz-Signature", valid_611328
  var valid_611329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611329 = validateParameter(valid_611329, JString, required = false,
                                 default = nil)
  if valid_611329 != nil:
    section.add "X-Amz-Content-Sha256", valid_611329
  var valid_611330 = header.getOrDefault("X-Amz-Date")
  valid_611330 = validateParameter(valid_611330, JString, required = false,
                                 default = nil)
  if valid_611330 != nil:
    section.add "X-Amz-Date", valid_611330
  var valid_611331 = header.getOrDefault("X-Amz-Credential")
  valid_611331 = validateParameter(valid_611331, JString, required = false,
                                 default = nil)
  if valid_611331 != nil:
    section.add "X-Amz-Credential", valid_611331
  var valid_611332 = header.getOrDefault("X-Amz-Security-Token")
  valid_611332 = validateParameter(valid_611332, JString, required = false,
                                 default = nil)
  if valid_611332 != nil:
    section.add "X-Amz-Security-Token", valid_611332
  var valid_611333 = header.getOrDefault("X-Amz-Algorithm")
  valid_611333 = validateParameter(valid_611333, JString, required = false,
                                 default = nil)
  if valid_611333 != nil:
    section.add "X-Amz-Algorithm", valid_611333
  var valid_611334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611334 = validateParameter(valid_611334, JString, required = false,
                                 default = nil)
  if valid_611334 != nil:
    section.add "X-Amz-SignedHeaders", valid_611334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611335: Call_GetAddUserToGroup_611321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_611335.validator(path, query, header, formData, body)
  let scheme = call_611335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611335.url(scheme.get, call_611335.host, call_611335.base,
                         call_611335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611335, url, valid)

proc call*(call_611336: Call_GetAddUserToGroup_611321; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611337 = newJObject()
  add(query_611337, "UserName", newJString(UserName))
  add(query_611337, "GroupName", newJString(GroupName))
  add(query_611337, "Action", newJString(Action))
  add(query_611337, "Version", newJString(Version))
  result = call_611336.call(nil, query_611337, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_611321(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_611322,
    base: "/", url: url_GetAddUserToGroup_611323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_611373 = ref object of OpenApiRestCall_610658
proc url_PostAttachGroupPolicy_611375(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachGroupPolicy_611374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611376 = query.getOrDefault("Action")
  valid_611376 = validateParameter(valid_611376, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_611376 != nil:
    section.add "Action", valid_611376
  var valid_611377 = query.getOrDefault("Version")
  valid_611377 = validateParameter(valid_611377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611377 != nil:
    section.add "Version", valid_611377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611378 = header.getOrDefault("X-Amz-Signature")
  valid_611378 = validateParameter(valid_611378, JString, required = false,
                                 default = nil)
  if valid_611378 != nil:
    section.add "X-Amz-Signature", valid_611378
  var valid_611379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611379 = validateParameter(valid_611379, JString, required = false,
                                 default = nil)
  if valid_611379 != nil:
    section.add "X-Amz-Content-Sha256", valid_611379
  var valid_611380 = header.getOrDefault("X-Amz-Date")
  valid_611380 = validateParameter(valid_611380, JString, required = false,
                                 default = nil)
  if valid_611380 != nil:
    section.add "X-Amz-Date", valid_611380
  var valid_611381 = header.getOrDefault("X-Amz-Credential")
  valid_611381 = validateParameter(valid_611381, JString, required = false,
                                 default = nil)
  if valid_611381 != nil:
    section.add "X-Amz-Credential", valid_611381
  var valid_611382 = header.getOrDefault("X-Amz-Security-Token")
  valid_611382 = validateParameter(valid_611382, JString, required = false,
                                 default = nil)
  if valid_611382 != nil:
    section.add "X-Amz-Security-Token", valid_611382
  var valid_611383 = header.getOrDefault("X-Amz-Algorithm")
  valid_611383 = validateParameter(valid_611383, JString, required = false,
                                 default = nil)
  if valid_611383 != nil:
    section.add "X-Amz-Algorithm", valid_611383
  var valid_611384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611384 = validateParameter(valid_611384, JString, required = false,
                                 default = nil)
  if valid_611384 != nil:
    section.add "X-Amz-SignedHeaders", valid_611384
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611385 = formData.getOrDefault("GroupName")
  valid_611385 = validateParameter(valid_611385, JString, required = true,
                                 default = nil)
  if valid_611385 != nil:
    section.add "GroupName", valid_611385
  var valid_611386 = formData.getOrDefault("PolicyArn")
  valid_611386 = validateParameter(valid_611386, JString, required = true,
                                 default = nil)
  if valid_611386 != nil:
    section.add "PolicyArn", valid_611386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611387: Call_PostAttachGroupPolicy_611373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611387.validator(path, query, header, formData, body)
  let scheme = call_611387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611387.url(scheme.get, call_611387.host, call_611387.base,
                         call_611387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611387, url, valid)

proc call*(call_611388: Call_PostAttachGroupPolicy_611373; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611389 = newJObject()
  var formData_611390 = newJObject()
  add(formData_611390, "GroupName", newJString(GroupName))
  add(formData_611390, "PolicyArn", newJString(PolicyArn))
  add(query_611389, "Action", newJString(Action))
  add(query_611389, "Version", newJString(Version))
  result = call_611388.call(nil, query_611389, nil, formData_611390, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_611373(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_611374, base: "/",
    url: url_PostAttachGroupPolicy_611375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_611356 = ref object of OpenApiRestCall_610658
proc url_GetAttachGroupPolicy_611358(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachGroupPolicy_611357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_611359 = query.getOrDefault("GroupName")
  valid_611359 = validateParameter(valid_611359, JString, required = true,
                                 default = nil)
  if valid_611359 != nil:
    section.add "GroupName", valid_611359
  var valid_611360 = query.getOrDefault("PolicyArn")
  valid_611360 = validateParameter(valid_611360, JString, required = true,
                                 default = nil)
  if valid_611360 != nil:
    section.add "PolicyArn", valid_611360
  var valid_611361 = query.getOrDefault("Action")
  valid_611361 = validateParameter(valid_611361, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_611361 != nil:
    section.add "Action", valid_611361
  var valid_611362 = query.getOrDefault("Version")
  valid_611362 = validateParameter(valid_611362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611362 != nil:
    section.add "Version", valid_611362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611363 = header.getOrDefault("X-Amz-Signature")
  valid_611363 = validateParameter(valid_611363, JString, required = false,
                                 default = nil)
  if valid_611363 != nil:
    section.add "X-Amz-Signature", valid_611363
  var valid_611364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611364 = validateParameter(valid_611364, JString, required = false,
                                 default = nil)
  if valid_611364 != nil:
    section.add "X-Amz-Content-Sha256", valid_611364
  var valid_611365 = header.getOrDefault("X-Amz-Date")
  valid_611365 = validateParameter(valid_611365, JString, required = false,
                                 default = nil)
  if valid_611365 != nil:
    section.add "X-Amz-Date", valid_611365
  var valid_611366 = header.getOrDefault("X-Amz-Credential")
  valid_611366 = validateParameter(valid_611366, JString, required = false,
                                 default = nil)
  if valid_611366 != nil:
    section.add "X-Amz-Credential", valid_611366
  var valid_611367 = header.getOrDefault("X-Amz-Security-Token")
  valid_611367 = validateParameter(valid_611367, JString, required = false,
                                 default = nil)
  if valid_611367 != nil:
    section.add "X-Amz-Security-Token", valid_611367
  var valid_611368 = header.getOrDefault("X-Amz-Algorithm")
  valid_611368 = validateParameter(valid_611368, JString, required = false,
                                 default = nil)
  if valid_611368 != nil:
    section.add "X-Amz-Algorithm", valid_611368
  var valid_611369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611369 = validateParameter(valid_611369, JString, required = false,
                                 default = nil)
  if valid_611369 != nil:
    section.add "X-Amz-SignedHeaders", valid_611369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611370: Call_GetAttachGroupPolicy_611356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611370.validator(path, query, header, formData, body)
  let scheme = call_611370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611370.url(scheme.get, call_611370.host, call_611370.base,
                         call_611370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611370, url, valid)

proc call*(call_611371: Call_GetAttachGroupPolicy_611356; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611372 = newJObject()
  add(query_611372, "GroupName", newJString(GroupName))
  add(query_611372, "PolicyArn", newJString(PolicyArn))
  add(query_611372, "Action", newJString(Action))
  add(query_611372, "Version", newJString(Version))
  result = call_611371.call(nil, query_611372, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_611356(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_611357, base: "/",
    url: url_GetAttachGroupPolicy_611358, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_611408 = ref object of OpenApiRestCall_610658
proc url_PostAttachRolePolicy_611410(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachRolePolicy_611409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611411 = query.getOrDefault("Action")
  valid_611411 = validateParameter(valid_611411, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_611411 != nil:
    section.add "Action", valid_611411
  var valid_611412 = query.getOrDefault("Version")
  valid_611412 = validateParameter(valid_611412, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611412 != nil:
    section.add "Version", valid_611412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611413 = header.getOrDefault("X-Amz-Signature")
  valid_611413 = validateParameter(valid_611413, JString, required = false,
                                 default = nil)
  if valid_611413 != nil:
    section.add "X-Amz-Signature", valid_611413
  var valid_611414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611414 = validateParameter(valid_611414, JString, required = false,
                                 default = nil)
  if valid_611414 != nil:
    section.add "X-Amz-Content-Sha256", valid_611414
  var valid_611415 = header.getOrDefault("X-Amz-Date")
  valid_611415 = validateParameter(valid_611415, JString, required = false,
                                 default = nil)
  if valid_611415 != nil:
    section.add "X-Amz-Date", valid_611415
  var valid_611416 = header.getOrDefault("X-Amz-Credential")
  valid_611416 = validateParameter(valid_611416, JString, required = false,
                                 default = nil)
  if valid_611416 != nil:
    section.add "X-Amz-Credential", valid_611416
  var valid_611417 = header.getOrDefault("X-Amz-Security-Token")
  valid_611417 = validateParameter(valid_611417, JString, required = false,
                                 default = nil)
  if valid_611417 != nil:
    section.add "X-Amz-Security-Token", valid_611417
  var valid_611418 = header.getOrDefault("X-Amz-Algorithm")
  valid_611418 = validateParameter(valid_611418, JString, required = false,
                                 default = nil)
  if valid_611418 != nil:
    section.add "X-Amz-Algorithm", valid_611418
  var valid_611419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611419 = validateParameter(valid_611419, JString, required = false,
                                 default = nil)
  if valid_611419 != nil:
    section.add "X-Amz-SignedHeaders", valid_611419
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611420 = formData.getOrDefault("RoleName")
  valid_611420 = validateParameter(valid_611420, JString, required = true,
                                 default = nil)
  if valid_611420 != nil:
    section.add "RoleName", valid_611420
  var valid_611421 = formData.getOrDefault("PolicyArn")
  valid_611421 = validateParameter(valid_611421, JString, required = true,
                                 default = nil)
  if valid_611421 != nil:
    section.add "PolicyArn", valid_611421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611422: Call_PostAttachRolePolicy_611408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611422.validator(path, query, header, formData, body)
  let scheme = call_611422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611422.url(scheme.get, call_611422.host, call_611422.base,
                         call_611422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611422, url, valid)

proc call*(call_611423: Call_PostAttachRolePolicy_611408; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611424 = newJObject()
  var formData_611425 = newJObject()
  add(formData_611425, "RoleName", newJString(RoleName))
  add(formData_611425, "PolicyArn", newJString(PolicyArn))
  add(query_611424, "Action", newJString(Action))
  add(query_611424, "Version", newJString(Version))
  result = call_611423.call(nil, query_611424, nil, formData_611425, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_611408(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_611409, base: "/",
    url: url_PostAttachRolePolicy_611410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_611391 = ref object of OpenApiRestCall_610658
proc url_GetAttachRolePolicy_611393(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachRolePolicy_611392(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_611394 = query.getOrDefault("PolicyArn")
  valid_611394 = validateParameter(valid_611394, JString, required = true,
                                 default = nil)
  if valid_611394 != nil:
    section.add "PolicyArn", valid_611394
  var valid_611395 = query.getOrDefault("RoleName")
  valid_611395 = validateParameter(valid_611395, JString, required = true,
                                 default = nil)
  if valid_611395 != nil:
    section.add "RoleName", valid_611395
  var valid_611396 = query.getOrDefault("Action")
  valid_611396 = validateParameter(valid_611396, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_611396 != nil:
    section.add "Action", valid_611396
  var valid_611397 = query.getOrDefault("Version")
  valid_611397 = validateParameter(valid_611397, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611397 != nil:
    section.add "Version", valid_611397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611398 = header.getOrDefault("X-Amz-Signature")
  valid_611398 = validateParameter(valid_611398, JString, required = false,
                                 default = nil)
  if valid_611398 != nil:
    section.add "X-Amz-Signature", valid_611398
  var valid_611399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611399 = validateParameter(valid_611399, JString, required = false,
                                 default = nil)
  if valid_611399 != nil:
    section.add "X-Amz-Content-Sha256", valid_611399
  var valid_611400 = header.getOrDefault("X-Amz-Date")
  valid_611400 = validateParameter(valid_611400, JString, required = false,
                                 default = nil)
  if valid_611400 != nil:
    section.add "X-Amz-Date", valid_611400
  var valid_611401 = header.getOrDefault("X-Amz-Credential")
  valid_611401 = validateParameter(valid_611401, JString, required = false,
                                 default = nil)
  if valid_611401 != nil:
    section.add "X-Amz-Credential", valid_611401
  var valid_611402 = header.getOrDefault("X-Amz-Security-Token")
  valid_611402 = validateParameter(valid_611402, JString, required = false,
                                 default = nil)
  if valid_611402 != nil:
    section.add "X-Amz-Security-Token", valid_611402
  var valid_611403 = header.getOrDefault("X-Amz-Algorithm")
  valid_611403 = validateParameter(valid_611403, JString, required = false,
                                 default = nil)
  if valid_611403 != nil:
    section.add "X-Amz-Algorithm", valid_611403
  var valid_611404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611404 = validateParameter(valid_611404, JString, required = false,
                                 default = nil)
  if valid_611404 != nil:
    section.add "X-Amz-SignedHeaders", valid_611404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611405: Call_GetAttachRolePolicy_611391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611405.validator(path, query, header, formData, body)
  let scheme = call_611405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611405.url(scheme.get, call_611405.host, call_611405.base,
                         call_611405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611405, url, valid)

proc call*(call_611406: Call_GetAttachRolePolicy_611391; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611407 = newJObject()
  add(query_611407, "PolicyArn", newJString(PolicyArn))
  add(query_611407, "RoleName", newJString(RoleName))
  add(query_611407, "Action", newJString(Action))
  add(query_611407, "Version", newJString(Version))
  result = call_611406.call(nil, query_611407, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_611391(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_611392, base: "/",
    url: url_GetAttachRolePolicy_611393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_611443 = ref object of OpenApiRestCall_610658
proc url_PostAttachUserPolicy_611445(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachUserPolicy_611444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611446 = query.getOrDefault("Action")
  valid_611446 = validateParameter(valid_611446, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_611446 != nil:
    section.add "Action", valid_611446
  var valid_611447 = query.getOrDefault("Version")
  valid_611447 = validateParameter(valid_611447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611447 != nil:
    section.add "Version", valid_611447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611448 = header.getOrDefault("X-Amz-Signature")
  valid_611448 = validateParameter(valid_611448, JString, required = false,
                                 default = nil)
  if valid_611448 != nil:
    section.add "X-Amz-Signature", valid_611448
  var valid_611449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611449 = validateParameter(valid_611449, JString, required = false,
                                 default = nil)
  if valid_611449 != nil:
    section.add "X-Amz-Content-Sha256", valid_611449
  var valid_611450 = header.getOrDefault("X-Amz-Date")
  valid_611450 = validateParameter(valid_611450, JString, required = false,
                                 default = nil)
  if valid_611450 != nil:
    section.add "X-Amz-Date", valid_611450
  var valid_611451 = header.getOrDefault("X-Amz-Credential")
  valid_611451 = validateParameter(valid_611451, JString, required = false,
                                 default = nil)
  if valid_611451 != nil:
    section.add "X-Amz-Credential", valid_611451
  var valid_611452 = header.getOrDefault("X-Amz-Security-Token")
  valid_611452 = validateParameter(valid_611452, JString, required = false,
                                 default = nil)
  if valid_611452 != nil:
    section.add "X-Amz-Security-Token", valid_611452
  var valid_611453 = header.getOrDefault("X-Amz-Algorithm")
  valid_611453 = validateParameter(valid_611453, JString, required = false,
                                 default = nil)
  if valid_611453 != nil:
    section.add "X-Amz-Algorithm", valid_611453
  var valid_611454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611454 = validateParameter(valid_611454, JString, required = false,
                                 default = nil)
  if valid_611454 != nil:
    section.add "X-Amz-SignedHeaders", valid_611454
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_611455 = formData.getOrDefault("PolicyArn")
  valid_611455 = validateParameter(valid_611455, JString, required = true,
                                 default = nil)
  if valid_611455 != nil:
    section.add "PolicyArn", valid_611455
  var valid_611456 = formData.getOrDefault("UserName")
  valid_611456 = validateParameter(valid_611456, JString, required = true,
                                 default = nil)
  if valid_611456 != nil:
    section.add "UserName", valid_611456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611457: Call_PostAttachUserPolicy_611443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611457.validator(path, query, header, formData, body)
  let scheme = call_611457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611457.url(scheme.get, call_611457.host, call_611457.base,
                         call_611457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611457, url, valid)

proc call*(call_611458: Call_PostAttachUserPolicy_611443; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611459 = newJObject()
  var formData_611460 = newJObject()
  add(formData_611460, "PolicyArn", newJString(PolicyArn))
  add(formData_611460, "UserName", newJString(UserName))
  add(query_611459, "Action", newJString(Action))
  add(query_611459, "Version", newJString(Version))
  result = call_611458.call(nil, query_611459, nil, formData_611460, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_611443(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_611444, base: "/",
    url: url_PostAttachUserPolicy_611445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_611426 = ref object of OpenApiRestCall_610658
proc url_GetAttachUserPolicy_611428(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachUserPolicy_611427(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611429 = query.getOrDefault("UserName")
  valid_611429 = validateParameter(valid_611429, JString, required = true,
                                 default = nil)
  if valid_611429 != nil:
    section.add "UserName", valid_611429
  var valid_611430 = query.getOrDefault("PolicyArn")
  valid_611430 = validateParameter(valid_611430, JString, required = true,
                                 default = nil)
  if valid_611430 != nil:
    section.add "PolicyArn", valid_611430
  var valid_611431 = query.getOrDefault("Action")
  valid_611431 = validateParameter(valid_611431, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_611431 != nil:
    section.add "Action", valid_611431
  var valid_611432 = query.getOrDefault("Version")
  valid_611432 = validateParameter(valid_611432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611432 != nil:
    section.add "Version", valid_611432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611433 = header.getOrDefault("X-Amz-Signature")
  valid_611433 = validateParameter(valid_611433, JString, required = false,
                                 default = nil)
  if valid_611433 != nil:
    section.add "X-Amz-Signature", valid_611433
  var valid_611434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611434 = validateParameter(valid_611434, JString, required = false,
                                 default = nil)
  if valid_611434 != nil:
    section.add "X-Amz-Content-Sha256", valid_611434
  var valid_611435 = header.getOrDefault("X-Amz-Date")
  valid_611435 = validateParameter(valid_611435, JString, required = false,
                                 default = nil)
  if valid_611435 != nil:
    section.add "X-Amz-Date", valid_611435
  var valid_611436 = header.getOrDefault("X-Amz-Credential")
  valid_611436 = validateParameter(valid_611436, JString, required = false,
                                 default = nil)
  if valid_611436 != nil:
    section.add "X-Amz-Credential", valid_611436
  var valid_611437 = header.getOrDefault("X-Amz-Security-Token")
  valid_611437 = validateParameter(valid_611437, JString, required = false,
                                 default = nil)
  if valid_611437 != nil:
    section.add "X-Amz-Security-Token", valid_611437
  var valid_611438 = header.getOrDefault("X-Amz-Algorithm")
  valid_611438 = validateParameter(valid_611438, JString, required = false,
                                 default = nil)
  if valid_611438 != nil:
    section.add "X-Amz-Algorithm", valid_611438
  var valid_611439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611439 = validateParameter(valid_611439, JString, required = false,
                                 default = nil)
  if valid_611439 != nil:
    section.add "X-Amz-SignedHeaders", valid_611439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611440: Call_GetAttachUserPolicy_611426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611440.validator(path, query, header, formData, body)
  let scheme = call_611440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611440.url(scheme.get, call_611440.host, call_611440.base,
                         call_611440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611440, url, valid)

proc call*(call_611441: Call_GetAttachUserPolicy_611426; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611442 = newJObject()
  add(query_611442, "UserName", newJString(UserName))
  add(query_611442, "PolicyArn", newJString(PolicyArn))
  add(query_611442, "Action", newJString(Action))
  add(query_611442, "Version", newJString(Version))
  result = call_611441.call(nil, query_611442, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_611426(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_611427, base: "/",
    url: url_GetAttachUserPolicy_611428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_611478 = ref object of OpenApiRestCall_610658
proc url_PostChangePassword_611480(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostChangePassword_611479(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611481 = query.getOrDefault("Action")
  valid_611481 = validateParameter(valid_611481, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_611481 != nil:
    section.add "Action", valid_611481
  var valid_611482 = query.getOrDefault("Version")
  valid_611482 = validateParameter(valid_611482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611482 != nil:
    section.add "Version", valid_611482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611483 = header.getOrDefault("X-Amz-Signature")
  valid_611483 = validateParameter(valid_611483, JString, required = false,
                                 default = nil)
  if valid_611483 != nil:
    section.add "X-Amz-Signature", valid_611483
  var valid_611484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611484 = validateParameter(valid_611484, JString, required = false,
                                 default = nil)
  if valid_611484 != nil:
    section.add "X-Amz-Content-Sha256", valid_611484
  var valid_611485 = header.getOrDefault("X-Amz-Date")
  valid_611485 = validateParameter(valid_611485, JString, required = false,
                                 default = nil)
  if valid_611485 != nil:
    section.add "X-Amz-Date", valid_611485
  var valid_611486 = header.getOrDefault("X-Amz-Credential")
  valid_611486 = validateParameter(valid_611486, JString, required = false,
                                 default = nil)
  if valid_611486 != nil:
    section.add "X-Amz-Credential", valid_611486
  var valid_611487 = header.getOrDefault("X-Amz-Security-Token")
  valid_611487 = validateParameter(valid_611487, JString, required = false,
                                 default = nil)
  if valid_611487 != nil:
    section.add "X-Amz-Security-Token", valid_611487
  var valid_611488 = header.getOrDefault("X-Amz-Algorithm")
  valid_611488 = validateParameter(valid_611488, JString, required = false,
                                 default = nil)
  if valid_611488 != nil:
    section.add "X-Amz-Algorithm", valid_611488
  var valid_611489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611489 = validateParameter(valid_611489, JString, required = false,
                                 default = nil)
  if valid_611489 != nil:
    section.add "X-Amz-SignedHeaders", valid_611489
  result.add "header", section
  ## parameters in `formData` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `OldPassword` field"
  var valid_611490 = formData.getOrDefault("OldPassword")
  valid_611490 = validateParameter(valid_611490, JString, required = true,
                                 default = nil)
  if valid_611490 != nil:
    section.add "OldPassword", valid_611490
  var valid_611491 = formData.getOrDefault("NewPassword")
  valid_611491 = validateParameter(valid_611491, JString, required = true,
                                 default = nil)
  if valid_611491 != nil:
    section.add "NewPassword", valid_611491
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611492: Call_PostChangePassword_611478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611492.validator(path, query, header, formData, body)
  let scheme = call_611492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611492.url(scheme.get, call_611492.host, call_611492.base,
                         call_611492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611492, url, valid)

proc call*(call_611493: Call_PostChangePassword_611478; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_611494 = newJObject()
  var formData_611495 = newJObject()
  add(formData_611495, "OldPassword", newJString(OldPassword))
  add(query_611494, "Action", newJString(Action))
  add(query_611494, "Version", newJString(Version))
  add(formData_611495, "NewPassword", newJString(NewPassword))
  result = call_611493.call(nil, query_611494, nil, formData_611495, nil)

var postChangePassword* = Call_PostChangePassword_611478(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_611479, base: "/",
    url: url_PostChangePassword_611480, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_611461 = ref object of OpenApiRestCall_610658
proc url_GetChangePassword_611463(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetChangePassword_611462(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Version: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  var valid_611464 = query.getOrDefault("Action")
  valid_611464 = validateParameter(valid_611464, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_611464 != nil:
    section.add "Action", valid_611464
  var valid_611465 = query.getOrDefault("OldPassword")
  valid_611465 = validateParameter(valid_611465, JString, required = true,
                                 default = nil)
  if valid_611465 != nil:
    section.add "OldPassword", valid_611465
  var valid_611466 = query.getOrDefault("Version")
  valid_611466 = validateParameter(valid_611466, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611466 != nil:
    section.add "Version", valid_611466
  var valid_611467 = query.getOrDefault("NewPassword")
  valid_611467 = validateParameter(valid_611467, JString, required = true,
                                 default = nil)
  if valid_611467 != nil:
    section.add "NewPassword", valid_611467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611468 = header.getOrDefault("X-Amz-Signature")
  valid_611468 = validateParameter(valid_611468, JString, required = false,
                                 default = nil)
  if valid_611468 != nil:
    section.add "X-Amz-Signature", valid_611468
  var valid_611469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611469 = validateParameter(valid_611469, JString, required = false,
                                 default = nil)
  if valid_611469 != nil:
    section.add "X-Amz-Content-Sha256", valid_611469
  var valid_611470 = header.getOrDefault("X-Amz-Date")
  valid_611470 = validateParameter(valid_611470, JString, required = false,
                                 default = nil)
  if valid_611470 != nil:
    section.add "X-Amz-Date", valid_611470
  var valid_611471 = header.getOrDefault("X-Amz-Credential")
  valid_611471 = validateParameter(valid_611471, JString, required = false,
                                 default = nil)
  if valid_611471 != nil:
    section.add "X-Amz-Credential", valid_611471
  var valid_611472 = header.getOrDefault("X-Amz-Security-Token")
  valid_611472 = validateParameter(valid_611472, JString, required = false,
                                 default = nil)
  if valid_611472 != nil:
    section.add "X-Amz-Security-Token", valid_611472
  var valid_611473 = header.getOrDefault("X-Amz-Algorithm")
  valid_611473 = validateParameter(valid_611473, JString, required = false,
                                 default = nil)
  if valid_611473 != nil:
    section.add "X-Amz-Algorithm", valid_611473
  var valid_611474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611474 = validateParameter(valid_611474, JString, required = false,
                                 default = nil)
  if valid_611474 != nil:
    section.add "X-Amz-SignedHeaders", valid_611474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611475: Call_GetChangePassword_611461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611475.validator(path, query, header, formData, body)
  let scheme = call_611475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611475.url(scheme.get, call_611475.host, call_611475.base,
                         call_611475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611475, url, valid)

proc call*(call_611476: Call_GetChangePassword_611461; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_611477 = newJObject()
  add(query_611477, "Action", newJString(Action))
  add(query_611477, "OldPassword", newJString(OldPassword))
  add(query_611477, "Version", newJString(Version))
  add(query_611477, "NewPassword", newJString(NewPassword))
  result = call_611476.call(nil, query_611477, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_611461(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_611462,
    base: "/", url: url_GetChangePassword_611463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_611512 = ref object of OpenApiRestCall_610658
proc url_PostCreateAccessKey_611514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccessKey_611513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611515 = query.getOrDefault("Action")
  valid_611515 = validateParameter(valid_611515, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_611515 != nil:
    section.add "Action", valid_611515
  var valid_611516 = query.getOrDefault("Version")
  valid_611516 = validateParameter(valid_611516, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611516 != nil:
    section.add "Version", valid_611516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611517 = header.getOrDefault("X-Amz-Signature")
  valid_611517 = validateParameter(valid_611517, JString, required = false,
                                 default = nil)
  if valid_611517 != nil:
    section.add "X-Amz-Signature", valid_611517
  var valid_611518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611518 = validateParameter(valid_611518, JString, required = false,
                                 default = nil)
  if valid_611518 != nil:
    section.add "X-Amz-Content-Sha256", valid_611518
  var valid_611519 = header.getOrDefault("X-Amz-Date")
  valid_611519 = validateParameter(valid_611519, JString, required = false,
                                 default = nil)
  if valid_611519 != nil:
    section.add "X-Amz-Date", valid_611519
  var valid_611520 = header.getOrDefault("X-Amz-Credential")
  valid_611520 = validateParameter(valid_611520, JString, required = false,
                                 default = nil)
  if valid_611520 != nil:
    section.add "X-Amz-Credential", valid_611520
  var valid_611521 = header.getOrDefault("X-Amz-Security-Token")
  valid_611521 = validateParameter(valid_611521, JString, required = false,
                                 default = nil)
  if valid_611521 != nil:
    section.add "X-Amz-Security-Token", valid_611521
  var valid_611522 = header.getOrDefault("X-Amz-Algorithm")
  valid_611522 = validateParameter(valid_611522, JString, required = false,
                                 default = nil)
  if valid_611522 != nil:
    section.add "X-Amz-Algorithm", valid_611522
  var valid_611523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611523 = validateParameter(valid_611523, JString, required = false,
                                 default = nil)
  if valid_611523 != nil:
    section.add "X-Amz-SignedHeaders", valid_611523
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_611524 = formData.getOrDefault("UserName")
  valid_611524 = validateParameter(valid_611524, JString, required = false,
                                 default = nil)
  if valid_611524 != nil:
    section.add "UserName", valid_611524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611525: Call_PostCreateAccessKey_611512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_611525.validator(path, query, header, formData, body)
  let scheme = call_611525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611525.url(scheme.get, call_611525.host, call_611525.base,
                         call_611525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611525, url, valid)

proc call*(call_611526: Call_PostCreateAccessKey_611512; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611527 = newJObject()
  var formData_611528 = newJObject()
  add(formData_611528, "UserName", newJString(UserName))
  add(query_611527, "Action", newJString(Action))
  add(query_611527, "Version", newJString(Version))
  result = call_611526.call(nil, query_611527, nil, formData_611528, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_611512(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_611513, base: "/",
    url: url_PostCreateAccessKey_611514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_611496 = ref object of OpenApiRestCall_610658
proc url_GetCreateAccessKey_611498(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccessKey_611497(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611499 = query.getOrDefault("UserName")
  valid_611499 = validateParameter(valid_611499, JString, required = false,
                                 default = nil)
  if valid_611499 != nil:
    section.add "UserName", valid_611499
  var valid_611500 = query.getOrDefault("Action")
  valid_611500 = validateParameter(valid_611500, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_611500 != nil:
    section.add "Action", valid_611500
  var valid_611501 = query.getOrDefault("Version")
  valid_611501 = validateParameter(valid_611501, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611501 != nil:
    section.add "Version", valid_611501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611502 = header.getOrDefault("X-Amz-Signature")
  valid_611502 = validateParameter(valid_611502, JString, required = false,
                                 default = nil)
  if valid_611502 != nil:
    section.add "X-Amz-Signature", valid_611502
  var valid_611503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611503 = validateParameter(valid_611503, JString, required = false,
                                 default = nil)
  if valid_611503 != nil:
    section.add "X-Amz-Content-Sha256", valid_611503
  var valid_611504 = header.getOrDefault("X-Amz-Date")
  valid_611504 = validateParameter(valid_611504, JString, required = false,
                                 default = nil)
  if valid_611504 != nil:
    section.add "X-Amz-Date", valid_611504
  var valid_611505 = header.getOrDefault("X-Amz-Credential")
  valid_611505 = validateParameter(valid_611505, JString, required = false,
                                 default = nil)
  if valid_611505 != nil:
    section.add "X-Amz-Credential", valid_611505
  var valid_611506 = header.getOrDefault("X-Amz-Security-Token")
  valid_611506 = validateParameter(valid_611506, JString, required = false,
                                 default = nil)
  if valid_611506 != nil:
    section.add "X-Amz-Security-Token", valid_611506
  var valid_611507 = header.getOrDefault("X-Amz-Algorithm")
  valid_611507 = validateParameter(valid_611507, JString, required = false,
                                 default = nil)
  if valid_611507 != nil:
    section.add "X-Amz-Algorithm", valid_611507
  var valid_611508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611508 = validateParameter(valid_611508, JString, required = false,
                                 default = nil)
  if valid_611508 != nil:
    section.add "X-Amz-SignedHeaders", valid_611508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611509: Call_GetCreateAccessKey_611496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_611509.validator(path, query, header, formData, body)
  let scheme = call_611509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611509.url(scheme.get, call_611509.host, call_611509.base,
                         call_611509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611509, url, valid)

proc call*(call_611510: Call_GetCreateAccessKey_611496; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611511 = newJObject()
  add(query_611511, "UserName", newJString(UserName))
  add(query_611511, "Action", newJString(Action))
  add(query_611511, "Version", newJString(Version))
  result = call_611510.call(nil, query_611511, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_611496(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_611497,
    base: "/", url: url_GetCreateAccessKey_611498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_611545 = ref object of OpenApiRestCall_610658
proc url_PostCreateAccountAlias_611547(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccountAlias_611546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611548 = query.getOrDefault("Action")
  valid_611548 = validateParameter(valid_611548, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_611548 != nil:
    section.add "Action", valid_611548
  var valid_611549 = query.getOrDefault("Version")
  valid_611549 = validateParameter(valid_611549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611549 != nil:
    section.add "Version", valid_611549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611550 = header.getOrDefault("X-Amz-Signature")
  valid_611550 = validateParameter(valid_611550, JString, required = false,
                                 default = nil)
  if valid_611550 != nil:
    section.add "X-Amz-Signature", valid_611550
  var valid_611551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611551 = validateParameter(valid_611551, JString, required = false,
                                 default = nil)
  if valid_611551 != nil:
    section.add "X-Amz-Content-Sha256", valid_611551
  var valid_611552 = header.getOrDefault("X-Amz-Date")
  valid_611552 = validateParameter(valid_611552, JString, required = false,
                                 default = nil)
  if valid_611552 != nil:
    section.add "X-Amz-Date", valid_611552
  var valid_611553 = header.getOrDefault("X-Amz-Credential")
  valid_611553 = validateParameter(valid_611553, JString, required = false,
                                 default = nil)
  if valid_611553 != nil:
    section.add "X-Amz-Credential", valid_611553
  var valid_611554 = header.getOrDefault("X-Amz-Security-Token")
  valid_611554 = validateParameter(valid_611554, JString, required = false,
                                 default = nil)
  if valid_611554 != nil:
    section.add "X-Amz-Security-Token", valid_611554
  var valid_611555 = header.getOrDefault("X-Amz-Algorithm")
  valid_611555 = validateParameter(valid_611555, JString, required = false,
                                 default = nil)
  if valid_611555 != nil:
    section.add "X-Amz-Algorithm", valid_611555
  var valid_611556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611556 = validateParameter(valid_611556, JString, required = false,
                                 default = nil)
  if valid_611556 != nil:
    section.add "X-Amz-SignedHeaders", valid_611556
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_611557 = formData.getOrDefault("AccountAlias")
  valid_611557 = validateParameter(valid_611557, JString, required = true,
                                 default = nil)
  if valid_611557 != nil:
    section.add "AccountAlias", valid_611557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611558: Call_PostCreateAccountAlias_611545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611558.validator(path, query, header, formData, body)
  let scheme = call_611558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611558.url(scheme.get, call_611558.host, call_611558.base,
                         call_611558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611558, url, valid)

proc call*(call_611559: Call_PostCreateAccountAlias_611545; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_611560 = newJObject()
  var formData_611561 = newJObject()
  add(query_611560, "Action", newJString(Action))
  add(formData_611561, "AccountAlias", newJString(AccountAlias))
  add(query_611560, "Version", newJString(Version))
  result = call_611559.call(nil, query_611560, nil, formData_611561, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_611545(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_611546, base: "/",
    url: url_PostCreateAccountAlias_611547, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_611529 = ref object of OpenApiRestCall_610658
proc url_GetCreateAccountAlias_611531(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccountAlias_611530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_611532 = query.getOrDefault("AccountAlias")
  valid_611532 = validateParameter(valid_611532, JString, required = true,
                                 default = nil)
  if valid_611532 != nil:
    section.add "AccountAlias", valid_611532
  var valid_611533 = query.getOrDefault("Action")
  valid_611533 = validateParameter(valid_611533, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_611533 != nil:
    section.add "Action", valid_611533
  var valid_611534 = query.getOrDefault("Version")
  valid_611534 = validateParameter(valid_611534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611534 != nil:
    section.add "Version", valid_611534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611535 = header.getOrDefault("X-Amz-Signature")
  valid_611535 = validateParameter(valid_611535, JString, required = false,
                                 default = nil)
  if valid_611535 != nil:
    section.add "X-Amz-Signature", valid_611535
  var valid_611536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611536 = validateParameter(valid_611536, JString, required = false,
                                 default = nil)
  if valid_611536 != nil:
    section.add "X-Amz-Content-Sha256", valid_611536
  var valid_611537 = header.getOrDefault("X-Amz-Date")
  valid_611537 = validateParameter(valid_611537, JString, required = false,
                                 default = nil)
  if valid_611537 != nil:
    section.add "X-Amz-Date", valid_611537
  var valid_611538 = header.getOrDefault("X-Amz-Credential")
  valid_611538 = validateParameter(valid_611538, JString, required = false,
                                 default = nil)
  if valid_611538 != nil:
    section.add "X-Amz-Credential", valid_611538
  var valid_611539 = header.getOrDefault("X-Amz-Security-Token")
  valid_611539 = validateParameter(valid_611539, JString, required = false,
                                 default = nil)
  if valid_611539 != nil:
    section.add "X-Amz-Security-Token", valid_611539
  var valid_611540 = header.getOrDefault("X-Amz-Algorithm")
  valid_611540 = validateParameter(valid_611540, JString, required = false,
                                 default = nil)
  if valid_611540 != nil:
    section.add "X-Amz-Algorithm", valid_611540
  var valid_611541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611541 = validateParameter(valid_611541, JString, required = false,
                                 default = nil)
  if valid_611541 != nil:
    section.add "X-Amz-SignedHeaders", valid_611541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611542: Call_GetCreateAccountAlias_611529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611542.validator(path, query, header, formData, body)
  let scheme = call_611542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611542.url(scheme.get, call_611542.host, call_611542.base,
                         call_611542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611542, url, valid)

proc call*(call_611543: Call_GetCreateAccountAlias_611529; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611544 = newJObject()
  add(query_611544, "AccountAlias", newJString(AccountAlias))
  add(query_611544, "Action", newJString(Action))
  add(query_611544, "Version", newJString(Version))
  result = call_611543.call(nil, query_611544, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_611529(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_611530, base: "/",
    url: url_GetCreateAccountAlias_611531, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_611579 = ref object of OpenApiRestCall_610658
proc url_PostCreateGroup_611581(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGroup_611580(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611582 = query.getOrDefault("Action")
  valid_611582 = validateParameter(valid_611582, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_611582 != nil:
    section.add "Action", valid_611582
  var valid_611583 = query.getOrDefault("Version")
  valid_611583 = validateParameter(valid_611583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611583 != nil:
    section.add "Version", valid_611583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611584 = header.getOrDefault("X-Amz-Signature")
  valid_611584 = validateParameter(valid_611584, JString, required = false,
                                 default = nil)
  if valid_611584 != nil:
    section.add "X-Amz-Signature", valid_611584
  var valid_611585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611585 = validateParameter(valid_611585, JString, required = false,
                                 default = nil)
  if valid_611585 != nil:
    section.add "X-Amz-Content-Sha256", valid_611585
  var valid_611586 = header.getOrDefault("X-Amz-Date")
  valid_611586 = validateParameter(valid_611586, JString, required = false,
                                 default = nil)
  if valid_611586 != nil:
    section.add "X-Amz-Date", valid_611586
  var valid_611587 = header.getOrDefault("X-Amz-Credential")
  valid_611587 = validateParameter(valid_611587, JString, required = false,
                                 default = nil)
  if valid_611587 != nil:
    section.add "X-Amz-Credential", valid_611587
  var valid_611588 = header.getOrDefault("X-Amz-Security-Token")
  valid_611588 = validateParameter(valid_611588, JString, required = false,
                                 default = nil)
  if valid_611588 != nil:
    section.add "X-Amz-Security-Token", valid_611588
  var valid_611589 = header.getOrDefault("X-Amz-Algorithm")
  valid_611589 = validateParameter(valid_611589, JString, required = false,
                                 default = nil)
  if valid_611589 != nil:
    section.add "X-Amz-Algorithm", valid_611589
  var valid_611590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611590 = validateParameter(valid_611590, JString, required = false,
                                 default = nil)
  if valid_611590 != nil:
    section.add "X-Amz-SignedHeaders", valid_611590
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_611591 = formData.getOrDefault("GroupName")
  valid_611591 = validateParameter(valid_611591, JString, required = true,
                                 default = nil)
  if valid_611591 != nil:
    section.add "GroupName", valid_611591
  var valid_611592 = formData.getOrDefault("Path")
  valid_611592 = validateParameter(valid_611592, JString, required = false,
                                 default = nil)
  if valid_611592 != nil:
    section.add "Path", valid_611592
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611593: Call_PostCreateGroup_611579; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611593.validator(path, query, header, formData, body)
  let scheme = call_611593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611593.url(scheme.get, call_611593.host, call_611593.base,
                         call_611593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611593, url, valid)

proc call*(call_611594: Call_PostCreateGroup_611579; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611595 = newJObject()
  var formData_611596 = newJObject()
  add(formData_611596, "GroupName", newJString(GroupName))
  add(formData_611596, "Path", newJString(Path))
  add(query_611595, "Action", newJString(Action))
  add(query_611595, "Version", newJString(Version))
  result = call_611594.call(nil, query_611595, nil, formData_611596, nil)

var postCreateGroup* = Call_PostCreateGroup_611579(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_611580,
    base: "/", url: url_PostCreateGroup_611581, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_611562 = ref object of OpenApiRestCall_610658
proc url_GetCreateGroup_611564(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGroup_611563(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_611565 = query.getOrDefault("GroupName")
  valid_611565 = validateParameter(valid_611565, JString, required = true,
                                 default = nil)
  if valid_611565 != nil:
    section.add "GroupName", valid_611565
  var valid_611566 = query.getOrDefault("Path")
  valid_611566 = validateParameter(valid_611566, JString, required = false,
                                 default = nil)
  if valid_611566 != nil:
    section.add "Path", valid_611566
  var valid_611567 = query.getOrDefault("Action")
  valid_611567 = validateParameter(valid_611567, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_611567 != nil:
    section.add "Action", valid_611567
  var valid_611568 = query.getOrDefault("Version")
  valid_611568 = validateParameter(valid_611568, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611568 != nil:
    section.add "Version", valid_611568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611569 = header.getOrDefault("X-Amz-Signature")
  valid_611569 = validateParameter(valid_611569, JString, required = false,
                                 default = nil)
  if valid_611569 != nil:
    section.add "X-Amz-Signature", valid_611569
  var valid_611570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611570 = validateParameter(valid_611570, JString, required = false,
                                 default = nil)
  if valid_611570 != nil:
    section.add "X-Amz-Content-Sha256", valid_611570
  var valid_611571 = header.getOrDefault("X-Amz-Date")
  valid_611571 = validateParameter(valid_611571, JString, required = false,
                                 default = nil)
  if valid_611571 != nil:
    section.add "X-Amz-Date", valid_611571
  var valid_611572 = header.getOrDefault("X-Amz-Credential")
  valid_611572 = validateParameter(valid_611572, JString, required = false,
                                 default = nil)
  if valid_611572 != nil:
    section.add "X-Amz-Credential", valid_611572
  var valid_611573 = header.getOrDefault("X-Amz-Security-Token")
  valid_611573 = validateParameter(valid_611573, JString, required = false,
                                 default = nil)
  if valid_611573 != nil:
    section.add "X-Amz-Security-Token", valid_611573
  var valid_611574 = header.getOrDefault("X-Amz-Algorithm")
  valid_611574 = validateParameter(valid_611574, JString, required = false,
                                 default = nil)
  if valid_611574 != nil:
    section.add "X-Amz-Algorithm", valid_611574
  var valid_611575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611575 = validateParameter(valid_611575, JString, required = false,
                                 default = nil)
  if valid_611575 != nil:
    section.add "X-Amz-SignedHeaders", valid_611575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611576: Call_GetCreateGroup_611562; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611576.validator(path, query, header, formData, body)
  let scheme = call_611576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611576.url(scheme.get, call_611576.host, call_611576.base,
                         call_611576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611576, url, valid)

proc call*(call_611577: Call_GetCreateGroup_611562; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611578 = newJObject()
  add(query_611578, "GroupName", newJString(GroupName))
  add(query_611578, "Path", newJString(Path))
  add(query_611578, "Action", newJString(Action))
  add(query_611578, "Version", newJString(Version))
  result = call_611577.call(nil, query_611578, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_611562(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_611563,
    base: "/", url: url_GetCreateGroup_611564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_611614 = ref object of OpenApiRestCall_610658
proc url_PostCreateInstanceProfile_611616(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateInstanceProfile_611615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611617 = query.getOrDefault("Action")
  valid_611617 = validateParameter(valid_611617, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_611617 != nil:
    section.add "Action", valid_611617
  var valid_611618 = query.getOrDefault("Version")
  valid_611618 = validateParameter(valid_611618, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611618 != nil:
    section.add "Version", valid_611618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611619 = header.getOrDefault("X-Amz-Signature")
  valid_611619 = validateParameter(valid_611619, JString, required = false,
                                 default = nil)
  if valid_611619 != nil:
    section.add "X-Amz-Signature", valid_611619
  var valid_611620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611620 = validateParameter(valid_611620, JString, required = false,
                                 default = nil)
  if valid_611620 != nil:
    section.add "X-Amz-Content-Sha256", valid_611620
  var valid_611621 = header.getOrDefault("X-Amz-Date")
  valid_611621 = validateParameter(valid_611621, JString, required = false,
                                 default = nil)
  if valid_611621 != nil:
    section.add "X-Amz-Date", valid_611621
  var valid_611622 = header.getOrDefault("X-Amz-Credential")
  valid_611622 = validateParameter(valid_611622, JString, required = false,
                                 default = nil)
  if valid_611622 != nil:
    section.add "X-Amz-Credential", valid_611622
  var valid_611623 = header.getOrDefault("X-Amz-Security-Token")
  valid_611623 = validateParameter(valid_611623, JString, required = false,
                                 default = nil)
  if valid_611623 != nil:
    section.add "X-Amz-Security-Token", valid_611623
  var valid_611624 = header.getOrDefault("X-Amz-Algorithm")
  valid_611624 = validateParameter(valid_611624, JString, required = false,
                                 default = nil)
  if valid_611624 != nil:
    section.add "X-Amz-Algorithm", valid_611624
  var valid_611625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611625 = validateParameter(valid_611625, JString, required = false,
                                 default = nil)
  if valid_611625 != nil:
    section.add "X-Amz-SignedHeaders", valid_611625
  result.add "header", section
  ## parameters in `formData` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_611626 = formData.getOrDefault("Path")
  valid_611626 = validateParameter(valid_611626, JString, required = false,
                                 default = nil)
  if valid_611626 != nil:
    section.add "Path", valid_611626
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_611627 = formData.getOrDefault("InstanceProfileName")
  valid_611627 = validateParameter(valid_611627, JString, required = true,
                                 default = nil)
  if valid_611627 != nil:
    section.add "InstanceProfileName", valid_611627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611628: Call_PostCreateInstanceProfile_611614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611628.validator(path, query, header, formData, body)
  let scheme = call_611628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611628.url(scheme.get, call_611628.host, call_611628.base,
                         call_611628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611628, url, valid)

proc call*(call_611629: Call_PostCreateInstanceProfile_611614;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611630 = newJObject()
  var formData_611631 = newJObject()
  add(formData_611631, "Path", newJString(Path))
  add(query_611630, "Action", newJString(Action))
  add(formData_611631, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611630, "Version", newJString(Version))
  result = call_611629.call(nil, query_611630, nil, formData_611631, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_611614(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_611615, base: "/",
    url: url_PostCreateInstanceProfile_611616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_611597 = ref object of OpenApiRestCall_610658
proc url_GetCreateInstanceProfile_611599(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateInstanceProfile_611598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611600 = query.getOrDefault("Path")
  valid_611600 = validateParameter(valid_611600, JString, required = false,
                                 default = nil)
  if valid_611600 != nil:
    section.add "Path", valid_611600
  var valid_611601 = query.getOrDefault("Action")
  valid_611601 = validateParameter(valid_611601, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_611601 != nil:
    section.add "Action", valid_611601
  var valid_611602 = query.getOrDefault("InstanceProfileName")
  valid_611602 = validateParameter(valid_611602, JString, required = true,
                                 default = nil)
  if valid_611602 != nil:
    section.add "InstanceProfileName", valid_611602
  var valid_611603 = query.getOrDefault("Version")
  valid_611603 = validateParameter(valid_611603, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611603 != nil:
    section.add "Version", valid_611603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611604 = header.getOrDefault("X-Amz-Signature")
  valid_611604 = validateParameter(valid_611604, JString, required = false,
                                 default = nil)
  if valid_611604 != nil:
    section.add "X-Amz-Signature", valid_611604
  var valid_611605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611605 = validateParameter(valid_611605, JString, required = false,
                                 default = nil)
  if valid_611605 != nil:
    section.add "X-Amz-Content-Sha256", valid_611605
  var valid_611606 = header.getOrDefault("X-Amz-Date")
  valid_611606 = validateParameter(valid_611606, JString, required = false,
                                 default = nil)
  if valid_611606 != nil:
    section.add "X-Amz-Date", valid_611606
  var valid_611607 = header.getOrDefault("X-Amz-Credential")
  valid_611607 = validateParameter(valid_611607, JString, required = false,
                                 default = nil)
  if valid_611607 != nil:
    section.add "X-Amz-Credential", valid_611607
  var valid_611608 = header.getOrDefault("X-Amz-Security-Token")
  valid_611608 = validateParameter(valid_611608, JString, required = false,
                                 default = nil)
  if valid_611608 != nil:
    section.add "X-Amz-Security-Token", valid_611608
  var valid_611609 = header.getOrDefault("X-Amz-Algorithm")
  valid_611609 = validateParameter(valid_611609, JString, required = false,
                                 default = nil)
  if valid_611609 != nil:
    section.add "X-Amz-Algorithm", valid_611609
  var valid_611610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611610 = validateParameter(valid_611610, JString, required = false,
                                 default = nil)
  if valid_611610 != nil:
    section.add "X-Amz-SignedHeaders", valid_611610
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611611: Call_GetCreateInstanceProfile_611597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611611.validator(path, query, header, formData, body)
  let scheme = call_611611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611611.url(scheme.get, call_611611.host, call_611611.base,
                         call_611611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611611, url, valid)

proc call*(call_611612: Call_GetCreateInstanceProfile_611597;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611613 = newJObject()
  add(query_611613, "Path", newJString(Path))
  add(query_611613, "Action", newJString(Action))
  add(query_611613, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_611613, "Version", newJString(Version))
  result = call_611612.call(nil, query_611613, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_611597(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_611598, base: "/",
    url: url_GetCreateInstanceProfile_611599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_611650 = ref object of OpenApiRestCall_610658
proc url_PostCreateLoginProfile_611652(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLoginProfile_611651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611653 = query.getOrDefault("Action")
  valid_611653 = validateParameter(valid_611653, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_611653 != nil:
    section.add "Action", valid_611653
  var valid_611654 = query.getOrDefault("Version")
  valid_611654 = validateParameter(valid_611654, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611654 != nil:
    section.add "Version", valid_611654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611655 = header.getOrDefault("X-Amz-Signature")
  valid_611655 = validateParameter(valid_611655, JString, required = false,
                                 default = nil)
  if valid_611655 != nil:
    section.add "X-Amz-Signature", valid_611655
  var valid_611656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611656 = validateParameter(valid_611656, JString, required = false,
                                 default = nil)
  if valid_611656 != nil:
    section.add "X-Amz-Content-Sha256", valid_611656
  var valid_611657 = header.getOrDefault("X-Amz-Date")
  valid_611657 = validateParameter(valid_611657, JString, required = false,
                                 default = nil)
  if valid_611657 != nil:
    section.add "X-Amz-Date", valid_611657
  var valid_611658 = header.getOrDefault("X-Amz-Credential")
  valid_611658 = validateParameter(valid_611658, JString, required = false,
                                 default = nil)
  if valid_611658 != nil:
    section.add "X-Amz-Credential", valid_611658
  var valid_611659 = header.getOrDefault("X-Amz-Security-Token")
  valid_611659 = validateParameter(valid_611659, JString, required = false,
                                 default = nil)
  if valid_611659 != nil:
    section.add "X-Amz-Security-Token", valid_611659
  var valid_611660 = header.getOrDefault("X-Amz-Algorithm")
  valid_611660 = validateParameter(valid_611660, JString, required = false,
                                 default = nil)
  if valid_611660 != nil:
    section.add "X-Amz-Algorithm", valid_611660
  var valid_611661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611661 = validateParameter(valid_611661, JString, required = false,
                                 default = nil)
  if valid_611661 != nil:
    section.add "X-Amz-SignedHeaders", valid_611661
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Password` field"
  var valid_611662 = formData.getOrDefault("Password")
  valid_611662 = validateParameter(valid_611662, JString, required = true,
                                 default = nil)
  if valid_611662 != nil:
    section.add "Password", valid_611662
  var valid_611663 = formData.getOrDefault("UserName")
  valid_611663 = validateParameter(valid_611663, JString, required = true,
                                 default = nil)
  if valid_611663 != nil:
    section.add "UserName", valid_611663
  var valid_611664 = formData.getOrDefault("PasswordResetRequired")
  valid_611664 = validateParameter(valid_611664, JBool, required = false, default = nil)
  if valid_611664 != nil:
    section.add "PasswordResetRequired", valid_611664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611665: Call_PostCreateLoginProfile_611650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611665.validator(path, query, header, formData, body)
  let scheme = call_611665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611665.url(scheme.get, call_611665.host, call_611665.base,
                         call_611665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611665, url, valid)

proc call*(call_611666: Call_PostCreateLoginProfile_611650; Password: string;
          UserName: string; Action: string = "CreateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Version: string (required)
  var query_611667 = newJObject()
  var formData_611668 = newJObject()
  add(formData_611668, "Password", newJString(Password))
  add(formData_611668, "UserName", newJString(UserName))
  add(query_611667, "Action", newJString(Action))
  add(formData_611668, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_611667, "Version", newJString(Version))
  result = call_611666.call(nil, query_611667, nil, formData_611668, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_611650(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_611651, base: "/",
    url: url_PostCreateLoginProfile_611652, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_611632 = ref object of OpenApiRestCall_610658
proc url_GetCreateLoginProfile_611634(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLoginProfile_611633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Password` field"
  var valid_611635 = query.getOrDefault("Password")
  valid_611635 = validateParameter(valid_611635, JString, required = true,
                                 default = nil)
  if valid_611635 != nil:
    section.add "Password", valid_611635
  var valid_611636 = query.getOrDefault("UserName")
  valid_611636 = validateParameter(valid_611636, JString, required = true,
                                 default = nil)
  if valid_611636 != nil:
    section.add "UserName", valid_611636
  var valid_611637 = query.getOrDefault("PasswordResetRequired")
  valid_611637 = validateParameter(valid_611637, JBool, required = false, default = nil)
  if valid_611637 != nil:
    section.add "PasswordResetRequired", valid_611637
  var valid_611638 = query.getOrDefault("Action")
  valid_611638 = validateParameter(valid_611638, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_611638 != nil:
    section.add "Action", valid_611638
  var valid_611639 = query.getOrDefault("Version")
  valid_611639 = validateParameter(valid_611639, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611639 != nil:
    section.add "Version", valid_611639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611640 = header.getOrDefault("X-Amz-Signature")
  valid_611640 = validateParameter(valid_611640, JString, required = false,
                                 default = nil)
  if valid_611640 != nil:
    section.add "X-Amz-Signature", valid_611640
  var valid_611641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611641 = validateParameter(valid_611641, JString, required = false,
                                 default = nil)
  if valid_611641 != nil:
    section.add "X-Amz-Content-Sha256", valid_611641
  var valid_611642 = header.getOrDefault("X-Amz-Date")
  valid_611642 = validateParameter(valid_611642, JString, required = false,
                                 default = nil)
  if valid_611642 != nil:
    section.add "X-Amz-Date", valid_611642
  var valid_611643 = header.getOrDefault("X-Amz-Credential")
  valid_611643 = validateParameter(valid_611643, JString, required = false,
                                 default = nil)
  if valid_611643 != nil:
    section.add "X-Amz-Credential", valid_611643
  var valid_611644 = header.getOrDefault("X-Amz-Security-Token")
  valid_611644 = validateParameter(valid_611644, JString, required = false,
                                 default = nil)
  if valid_611644 != nil:
    section.add "X-Amz-Security-Token", valid_611644
  var valid_611645 = header.getOrDefault("X-Amz-Algorithm")
  valid_611645 = validateParameter(valid_611645, JString, required = false,
                                 default = nil)
  if valid_611645 != nil:
    section.add "X-Amz-Algorithm", valid_611645
  var valid_611646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611646 = validateParameter(valid_611646, JString, required = false,
                                 default = nil)
  if valid_611646 != nil:
    section.add "X-Amz-SignedHeaders", valid_611646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611647: Call_GetCreateLoginProfile_611632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611647.validator(path, query, header, formData, body)
  let scheme = call_611647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611647.url(scheme.get, call_611647.host, call_611647.base,
                         call_611647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611647, url, valid)

proc call*(call_611648: Call_GetCreateLoginProfile_611632; Password: string;
          UserName: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611649 = newJObject()
  add(query_611649, "Password", newJString(Password))
  add(query_611649, "UserName", newJString(UserName))
  add(query_611649, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_611649, "Action", newJString(Action))
  add(query_611649, "Version", newJString(Version))
  result = call_611648.call(nil, query_611649, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_611632(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_611633, base: "/",
    url: url_GetCreateLoginProfile_611634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_611687 = ref object of OpenApiRestCall_610658
proc url_PostCreateOpenIDConnectProvider_611689(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_611688(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611690 = query.getOrDefault("Action")
  valid_611690 = validateParameter(valid_611690, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_611690 != nil:
    section.add "Action", valid_611690
  var valid_611691 = query.getOrDefault("Version")
  valid_611691 = validateParameter(valid_611691, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611691 != nil:
    section.add "Version", valid_611691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611692 = header.getOrDefault("X-Amz-Signature")
  valid_611692 = validateParameter(valid_611692, JString, required = false,
                                 default = nil)
  if valid_611692 != nil:
    section.add "X-Amz-Signature", valid_611692
  var valid_611693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611693 = validateParameter(valid_611693, JString, required = false,
                                 default = nil)
  if valid_611693 != nil:
    section.add "X-Amz-Content-Sha256", valid_611693
  var valid_611694 = header.getOrDefault("X-Amz-Date")
  valid_611694 = validateParameter(valid_611694, JString, required = false,
                                 default = nil)
  if valid_611694 != nil:
    section.add "X-Amz-Date", valid_611694
  var valid_611695 = header.getOrDefault("X-Amz-Credential")
  valid_611695 = validateParameter(valid_611695, JString, required = false,
                                 default = nil)
  if valid_611695 != nil:
    section.add "X-Amz-Credential", valid_611695
  var valid_611696 = header.getOrDefault("X-Amz-Security-Token")
  valid_611696 = validateParameter(valid_611696, JString, required = false,
                                 default = nil)
  if valid_611696 != nil:
    section.add "X-Amz-Security-Token", valid_611696
  var valid_611697 = header.getOrDefault("X-Amz-Algorithm")
  valid_611697 = validateParameter(valid_611697, JString, required = false,
                                 default = nil)
  if valid_611697 != nil:
    section.add "X-Amz-Algorithm", valid_611697
  var valid_611698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611698 = validateParameter(valid_611698, JString, required = false,
                                 default = nil)
  if valid_611698 != nil:
    section.add "X-Amz-SignedHeaders", valid_611698
  result.add "header", section
  ## parameters in `formData` object:
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Url` field"
  var valid_611699 = formData.getOrDefault("Url")
  valid_611699 = validateParameter(valid_611699, JString, required = true,
                                 default = nil)
  if valid_611699 != nil:
    section.add "Url", valid_611699
  var valid_611700 = formData.getOrDefault("ClientIDList")
  valid_611700 = validateParameter(valid_611700, JArray, required = false,
                                 default = nil)
  if valid_611700 != nil:
    section.add "ClientIDList", valid_611700
  var valid_611701 = formData.getOrDefault("ThumbprintList")
  valid_611701 = validateParameter(valid_611701, JArray, required = true, default = nil)
  if valid_611701 != nil:
    section.add "ThumbprintList", valid_611701
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611702: Call_PostCreateOpenIDConnectProvider_611687;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_611702.validator(path, query, header, formData, body)
  let scheme = call_611702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611702.url(scheme.get, call_611702.host, call_611702.base,
                         call_611702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611702, url, valid)

proc call*(call_611703: Call_PostCreateOpenIDConnectProvider_611687; Url: string;
          ThumbprintList: JsonNode; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611704 = newJObject()
  var formData_611705 = newJObject()
  add(formData_611705, "Url", newJString(Url))
  if ClientIDList != nil:
    formData_611705.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_611705.add "ThumbprintList", ThumbprintList
  add(query_611704, "Action", newJString(Action))
  add(query_611704, "Version", newJString(Version))
  result = call_611703.call(nil, query_611704, nil, formData_611705, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_611687(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_611688, base: "/",
    url: url_PostCreateOpenIDConnectProvider_611689,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_611669 = ref object of OpenApiRestCall_610658
proc url_GetCreateOpenIDConnectProvider_611671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_611670(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_611672 = query.getOrDefault("ThumbprintList")
  valid_611672 = validateParameter(valid_611672, JArray, required = true, default = nil)
  if valid_611672 != nil:
    section.add "ThumbprintList", valid_611672
  var valid_611673 = query.getOrDefault("Action")
  valid_611673 = validateParameter(valid_611673, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_611673 != nil:
    section.add "Action", valid_611673
  var valid_611674 = query.getOrDefault("Url")
  valid_611674 = validateParameter(valid_611674, JString, required = true,
                                 default = nil)
  if valid_611674 != nil:
    section.add "Url", valid_611674
  var valid_611675 = query.getOrDefault("Version")
  valid_611675 = validateParameter(valid_611675, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611675 != nil:
    section.add "Version", valid_611675
  var valid_611676 = query.getOrDefault("ClientIDList")
  valid_611676 = validateParameter(valid_611676, JArray, required = false,
                                 default = nil)
  if valid_611676 != nil:
    section.add "ClientIDList", valid_611676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611677 = header.getOrDefault("X-Amz-Signature")
  valid_611677 = validateParameter(valid_611677, JString, required = false,
                                 default = nil)
  if valid_611677 != nil:
    section.add "X-Amz-Signature", valid_611677
  var valid_611678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611678 = validateParameter(valid_611678, JString, required = false,
                                 default = nil)
  if valid_611678 != nil:
    section.add "X-Amz-Content-Sha256", valid_611678
  var valid_611679 = header.getOrDefault("X-Amz-Date")
  valid_611679 = validateParameter(valid_611679, JString, required = false,
                                 default = nil)
  if valid_611679 != nil:
    section.add "X-Amz-Date", valid_611679
  var valid_611680 = header.getOrDefault("X-Amz-Credential")
  valid_611680 = validateParameter(valid_611680, JString, required = false,
                                 default = nil)
  if valid_611680 != nil:
    section.add "X-Amz-Credential", valid_611680
  var valid_611681 = header.getOrDefault("X-Amz-Security-Token")
  valid_611681 = validateParameter(valid_611681, JString, required = false,
                                 default = nil)
  if valid_611681 != nil:
    section.add "X-Amz-Security-Token", valid_611681
  var valid_611682 = header.getOrDefault("X-Amz-Algorithm")
  valid_611682 = validateParameter(valid_611682, JString, required = false,
                                 default = nil)
  if valid_611682 != nil:
    section.add "X-Amz-Algorithm", valid_611682
  var valid_611683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611683 = validateParameter(valid_611683, JString, required = false,
                                 default = nil)
  if valid_611683 != nil:
    section.add "X-Amz-SignedHeaders", valid_611683
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611684: Call_GetCreateOpenIDConnectProvider_611669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_611684.validator(path, query, header, formData, body)
  let scheme = call_611684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611684.url(scheme.get, call_611684.host, call_611684.base,
                         call_611684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611684, url, valid)

proc call*(call_611685: Call_GetCreateOpenIDConnectProvider_611669;
          ThumbprintList: JsonNode; Url: string;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"; ClientIDList: JsonNode = nil): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  var query_611686 = newJObject()
  if ThumbprintList != nil:
    query_611686.add "ThumbprintList", ThumbprintList
  add(query_611686, "Action", newJString(Action))
  add(query_611686, "Url", newJString(Url))
  add(query_611686, "Version", newJString(Version))
  if ClientIDList != nil:
    query_611686.add "ClientIDList", ClientIDList
  result = call_611685.call(nil, query_611686, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_611669(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_611670, base: "/",
    url: url_GetCreateOpenIDConnectProvider_611671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_611725 = ref object of OpenApiRestCall_610658
proc url_PostCreatePolicy_611727(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicy_611726(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611728 = query.getOrDefault("Action")
  valid_611728 = validateParameter(valid_611728, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_611728 != nil:
    section.add "Action", valid_611728
  var valid_611729 = query.getOrDefault("Version")
  valid_611729 = validateParameter(valid_611729, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611729 != nil:
    section.add "Version", valid_611729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611730 = header.getOrDefault("X-Amz-Signature")
  valid_611730 = validateParameter(valid_611730, JString, required = false,
                                 default = nil)
  if valid_611730 != nil:
    section.add "X-Amz-Signature", valid_611730
  var valid_611731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611731 = validateParameter(valid_611731, JString, required = false,
                                 default = nil)
  if valid_611731 != nil:
    section.add "X-Amz-Content-Sha256", valid_611731
  var valid_611732 = header.getOrDefault("X-Amz-Date")
  valid_611732 = validateParameter(valid_611732, JString, required = false,
                                 default = nil)
  if valid_611732 != nil:
    section.add "X-Amz-Date", valid_611732
  var valid_611733 = header.getOrDefault("X-Amz-Credential")
  valid_611733 = validateParameter(valid_611733, JString, required = false,
                                 default = nil)
  if valid_611733 != nil:
    section.add "X-Amz-Credential", valid_611733
  var valid_611734 = header.getOrDefault("X-Amz-Security-Token")
  valid_611734 = validateParameter(valid_611734, JString, required = false,
                                 default = nil)
  if valid_611734 != nil:
    section.add "X-Amz-Security-Token", valid_611734
  var valid_611735 = header.getOrDefault("X-Amz-Algorithm")
  valid_611735 = validateParameter(valid_611735, JString, required = false,
                                 default = nil)
  if valid_611735 != nil:
    section.add "X-Amz-Algorithm", valid_611735
  var valid_611736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611736 = validateParameter(valid_611736, JString, required = false,
                                 default = nil)
  if valid_611736 != nil:
    section.add "X-Amz-SignedHeaders", valid_611736
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_611737 = formData.getOrDefault("PolicyDocument")
  valid_611737 = validateParameter(valid_611737, JString, required = true,
                                 default = nil)
  if valid_611737 != nil:
    section.add "PolicyDocument", valid_611737
  var valid_611738 = formData.getOrDefault("Description")
  valid_611738 = validateParameter(valid_611738, JString, required = false,
                                 default = nil)
  if valid_611738 != nil:
    section.add "Description", valid_611738
  var valid_611739 = formData.getOrDefault("Path")
  valid_611739 = validateParameter(valid_611739, JString, required = false,
                                 default = nil)
  if valid_611739 != nil:
    section.add "Path", valid_611739
  var valid_611740 = formData.getOrDefault("PolicyName")
  valid_611740 = validateParameter(valid_611740, JString, required = true,
                                 default = nil)
  if valid_611740 != nil:
    section.add "PolicyName", valid_611740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611741: Call_PostCreatePolicy_611725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611741.validator(path, query, header, formData, body)
  let scheme = call_611741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611741.url(scheme.get, call_611741.host, call_611741.base,
                         call_611741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611741, url, valid)

proc call*(call_611742: Call_PostCreatePolicy_611725; PolicyDocument: string;
          PolicyName: string; Description: string = ""; Path: string = "";
          Action: string = "CreatePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_611743 = newJObject()
  var formData_611744 = newJObject()
  add(formData_611744, "PolicyDocument", newJString(PolicyDocument))
  add(formData_611744, "Description", newJString(Description))
  add(formData_611744, "Path", newJString(Path))
  add(query_611743, "Action", newJString(Action))
  add(query_611743, "Version", newJString(Version))
  add(formData_611744, "PolicyName", newJString(PolicyName))
  result = call_611742.call(nil, query_611743, nil, formData_611744, nil)

var postCreatePolicy* = Call_PostCreatePolicy_611725(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_611726,
    base: "/", url: url_PostCreatePolicy_611727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_611706 = ref object of OpenApiRestCall_610658
proc url_GetCreatePolicy_611708(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicy_611707(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_611709 = query.getOrDefault("PolicyName")
  valid_611709 = validateParameter(valid_611709, JString, required = true,
                                 default = nil)
  if valid_611709 != nil:
    section.add "PolicyName", valid_611709
  var valid_611710 = query.getOrDefault("Path")
  valid_611710 = validateParameter(valid_611710, JString, required = false,
                                 default = nil)
  if valid_611710 != nil:
    section.add "Path", valid_611710
  var valid_611711 = query.getOrDefault("PolicyDocument")
  valid_611711 = validateParameter(valid_611711, JString, required = true,
                                 default = nil)
  if valid_611711 != nil:
    section.add "PolicyDocument", valid_611711
  var valid_611712 = query.getOrDefault("Action")
  valid_611712 = validateParameter(valid_611712, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_611712 != nil:
    section.add "Action", valid_611712
  var valid_611713 = query.getOrDefault("Description")
  valid_611713 = validateParameter(valid_611713, JString, required = false,
                                 default = nil)
  if valid_611713 != nil:
    section.add "Description", valid_611713
  var valid_611714 = query.getOrDefault("Version")
  valid_611714 = validateParameter(valid_611714, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611714 != nil:
    section.add "Version", valid_611714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611715 = header.getOrDefault("X-Amz-Signature")
  valid_611715 = validateParameter(valid_611715, JString, required = false,
                                 default = nil)
  if valid_611715 != nil:
    section.add "X-Amz-Signature", valid_611715
  var valid_611716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611716 = validateParameter(valid_611716, JString, required = false,
                                 default = nil)
  if valid_611716 != nil:
    section.add "X-Amz-Content-Sha256", valid_611716
  var valid_611717 = header.getOrDefault("X-Amz-Date")
  valid_611717 = validateParameter(valid_611717, JString, required = false,
                                 default = nil)
  if valid_611717 != nil:
    section.add "X-Amz-Date", valid_611717
  var valid_611718 = header.getOrDefault("X-Amz-Credential")
  valid_611718 = validateParameter(valid_611718, JString, required = false,
                                 default = nil)
  if valid_611718 != nil:
    section.add "X-Amz-Credential", valid_611718
  var valid_611719 = header.getOrDefault("X-Amz-Security-Token")
  valid_611719 = validateParameter(valid_611719, JString, required = false,
                                 default = nil)
  if valid_611719 != nil:
    section.add "X-Amz-Security-Token", valid_611719
  var valid_611720 = header.getOrDefault("X-Amz-Algorithm")
  valid_611720 = validateParameter(valid_611720, JString, required = false,
                                 default = nil)
  if valid_611720 != nil:
    section.add "X-Amz-Algorithm", valid_611720
  var valid_611721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611721 = validateParameter(valid_611721, JString, required = false,
                                 default = nil)
  if valid_611721 != nil:
    section.add "X-Amz-SignedHeaders", valid_611721
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611722: Call_GetCreatePolicy_611706; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611722.validator(path, query, header, formData, body)
  let scheme = call_611722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611722.url(scheme.get, call_611722.host, call_611722.base,
                         call_611722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611722, url, valid)

proc call*(call_611723: Call_GetCreatePolicy_611706; PolicyName: string;
          PolicyDocument: string; Path: string = ""; Action: string = "CreatePolicy";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: string (required)
  var query_611724 = newJObject()
  add(query_611724, "PolicyName", newJString(PolicyName))
  add(query_611724, "Path", newJString(Path))
  add(query_611724, "PolicyDocument", newJString(PolicyDocument))
  add(query_611724, "Action", newJString(Action))
  add(query_611724, "Description", newJString(Description))
  add(query_611724, "Version", newJString(Version))
  result = call_611723.call(nil, query_611724, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_611706(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_611707,
    base: "/", url: url_GetCreatePolicy_611708, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_611763 = ref object of OpenApiRestCall_610658
proc url_PostCreatePolicyVersion_611765(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicyVersion_611764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611766 = query.getOrDefault("Action")
  valid_611766 = validateParameter(valid_611766, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_611766 != nil:
    section.add "Action", valid_611766
  var valid_611767 = query.getOrDefault("Version")
  valid_611767 = validateParameter(valid_611767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611767 != nil:
    section.add "Version", valid_611767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611768 = header.getOrDefault("X-Amz-Signature")
  valid_611768 = validateParameter(valid_611768, JString, required = false,
                                 default = nil)
  if valid_611768 != nil:
    section.add "X-Amz-Signature", valid_611768
  var valid_611769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611769 = validateParameter(valid_611769, JString, required = false,
                                 default = nil)
  if valid_611769 != nil:
    section.add "X-Amz-Content-Sha256", valid_611769
  var valid_611770 = header.getOrDefault("X-Amz-Date")
  valid_611770 = validateParameter(valid_611770, JString, required = false,
                                 default = nil)
  if valid_611770 != nil:
    section.add "X-Amz-Date", valid_611770
  var valid_611771 = header.getOrDefault("X-Amz-Credential")
  valid_611771 = validateParameter(valid_611771, JString, required = false,
                                 default = nil)
  if valid_611771 != nil:
    section.add "X-Amz-Credential", valid_611771
  var valid_611772 = header.getOrDefault("X-Amz-Security-Token")
  valid_611772 = validateParameter(valid_611772, JString, required = false,
                                 default = nil)
  if valid_611772 != nil:
    section.add "X-Amz-Security-Token", valid_611772
  var valid_611773 = header.getOrDefault("X-Amz-Algorithm")
  valid_611773 = validateParameter(valid_611773, JString, required = false,
                                 default = nil)
  if valid_611773 != nil:
    section.add "X-Amz-Algorithm", valid_611773
  var valid_611774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611774 = validateParameter(valid_611774, JString, required = false,
                                 default = nil)
  if valid_611774 != nil:
    section.add "X-Amz-SignedHeaders", valid_611774
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_611775 = formData.getOrDefault("PolicyDocument")
  valid_611775 = validateParameter(valid_611775, JString, required = true,
                                 default = nil)
  if valid_611775 != nil:
    section.add "PolicyDocument", valid_611775
  var valid_611776 = formData.getOrDefault("SetAsDefault")
  valid_611776 = validateParameter(valid_611776, JBool, required = false, default = nil)
  if valid_611776 != nil:
    section.add "SetAsDefault", valid_611776
  var valid_611777 = formData.getOrDefault("PolicyArn")
  valid_611777 = validateParameter(valid_611777, JString, required = true,
                                 default = nil)
  if valid_611777 != nil:
    section.add "PolicyArn", valid_611777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611778: Call_PostCreatePolicyVersion_611763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611778.validator(path, query, header, formData, body)
  let scheme = call_611778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611778.url(scheme.get, call_611778.host, call_611778.base,
                         call_611778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611778, url, valid)

proc call*(call_611779: Call_PostCreatePolicyVersion_611763;
          PolicyDocument: string; PolicyArn: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611780 = newJObject()
  var formData_611781 = newJObject()
  add(formData_611781, "PolicyDocument", newJString(PolicyDocument))
  add(formData_611781, "SetAsDefault", newJBool(SetAsDefault))
  add(formData_611781, "PolicyArn", newJString(PolicyArn))
  add(query_611780, "Action", newJString(Action))
  add(query_611780, "Version", newJString(Version))
  result = call_611779.call(nil, query_611780, nil, formData_611781, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_611763(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_611764, base: "/",
    url: url_PostCreatePolicyVersion_611765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_611745 = ref object of OpenApiRestCall_610658
proc url_GetCreatePolicyVersion_611747(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicyVersion_611746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_611748 = query.getOrDefault("PolicyArn")
  valid_611748 = validateParameter(valid_611748, JString, required = true,
                                 default = nil)
  if valid_611748 != nil:
    section.add "PolicyArn", valid_611748
  var valid_611749 = query.getOrDefault("SetAsDefault")
  valid_611749 = validateParameter(valid_611749, JBool, required = false, default = nil)
  if valid_611749 != nil:
    section.add "SetAsDefault", valid_611749
  var valid_611750 = query.getOrDefault("PolicyDocument")
  valid_611750 = validateParameter(valid_611750, JString, required = true,
                                 default = nil)
  if valid_611750 != nil:
    section.add "PolicyDocument", valid_611750
  var valid_611751 = query.getOrDefault("Action")
  valid_611751 = validateParameter(valid_611751, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_611751 != nil:
    section.add "Action", valid_611751
  var valid_611752 = query.getOrDefault("Version")
  valid_611752 = validateParameter(valid_611752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611752 != nil:
    section.add "Version", valid_611752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611753 = header.getOrDefault("X-Amz-Signature")
  valid_611753 = validateParameter(valid_611753, JString, required = false,
                                 default = nil)
  if valid_611753 != nil:
    section.add "X-Amz-Signature", valid_611753
  var valid_611754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611754 = validateParameter(valid_611754, JString, required = false,
                                 default = nil)
  if valid_611754 != nil:
    section.add "X-Amz-Content-Sha256", valid_611754
  var valid_611755 = header.getOrDefault("X-Amz-Date")
  valid_611755 = validateParameter(valid_611755, JString, required = false,
                                 default = nil)
  if valid_611755 != nil:
    section.add "X-Amz-Date", valid_611755
  var valid_611756 = header.getOrDefault("X-Amz-Credential")
  valid_611756 = validateParameter(valid_611756, JString, required = false,
                                 default = nil)
  if valid_611756 != nil:
    section.add "X-Amz-Credential", valid_611756
  var valid_611757 = header.getOrDefault("X-Amz-Security-Token")
  valid_611757 = validateParameter(valid_611757, JString, required = false,
                                 default = nil)
  if valid_611757 != nil:
    section.add "X-Amz-Security-Token", valid_611757
  var valid_611758 = header.getOrDefault("X-Amz-Algorithm")
  valid_611758 = validateParameter(valid_611758, JString, required = false,
                                 default = nil)
  if valid_611758 != nil:
    section.add "X-Amz-Algorithm", valid_611758
  var valid_611759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611759 = validateParameter(valid_611759, JString, required = false,
                                 default = nil)
  if valid_611759 != nil:
    section.add "X-Amz-SignedHeaders", valid_611759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611760: Call_GetCreatePolicyVersion_611745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611760.validator(path, query, header, formData, body)
  let scheme = call_611760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611760.url(scheme.get, call_611760.host, call_611760.base,
                         call_611760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611760, url, valid)

proc call*(call_611761: Call_GetCreatePolicyVersion_611745; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611762 = newJObject()
  add(query_611762, "PolicyArn", newJString(PolicyArn))
  add(query_611762, "SetAsDefault", newJBool(SetAsDefault))
  add(query_611762, "PolicyDocument", newJString(PolicyDocument))
  add(query_611762, "Action", newJString(Action))
  add(query_611762, "Version", newJString(Version))
  result = call_611761.call(nil, query_611762, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_611745(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_611746, base: "/",
    url: url_GetCreatePolicyVersion_611747, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_611804 = ref object of OpenApiRestCall_610658
proc url_PostCreateRole_611806(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateRole_611805(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611807 = query.getOrDefault("Action")
  valid_611807 = validateParameter(valid_611807, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_611807 != nil:
    section.add "Action", valid_611807
  var valid_611808 = query.getOrDefault("Version")
  valid_611808 = validateParameter(valid_611808, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611808 != nil:
    section.add "Version", valid_611808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611809 = header.getOrDefault("X-Amz-Signature")
  valid_611809 = validateParameter(valid_611809, JString, required = false,
                                 default = nil)
  if valid_611809 != nil:
    section.add "X-Amz-Signature", valid_611809
  var valid_611810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611810 = validateParameter(valid_611810, JString, required = false,
                                 default = nil)
  if valid_611810 != nil:
    section.add "X-Amz-Content-Sha256", valid_611810
  var valid_611811 = header.getOrDefault("X-Amz-Date")
  valid_611811 = validateParameter(valid_611811, JString, required = false,
                                 default = nil)
  if valid_611811 != nil:
    section.add "X-Amz-Date", valid_611811
  var valid_611812 = header.getOrDefault("X-Amz-Credential")
  valid_611812 = validateParameter(valid_611812, JString, required = false,
                                 default = nil)
  if valid_611812 != nil:
    section.add "X-Amz-Credential", valid_611812
  var valid_611813 = header.getOrDefault("X-Amz-Security-Token")
  valid_611813 = validateParameter(valid_611813, JString, required = false,
                                 default = nil)
  if valid_611813 != nil:
    section.add "X-Amz-Security-Token", valid_611813
  var valid_611814 = header.getOrDefault("X-Amz-Algorithm")
  valid_611814 = validateParameter(valid_611814, JString, required = false,
                                 default = nil)
  if valid_611814 != nil:
    section.add "X-Amz-Algorithm", valid_611814
  var valid_611815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611815 = validateParameter(valid_611815, JString, required = false,
                                 default = nil)
  if valid_611815 != nil:
    section.add "X-Amz-SignedHeaders", valid_611815
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : A description of the role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  section = newJObject()
  var valid_611816 = formData.getOrDefault("Description")
  valid_611816 = validateParameter(valid_611816, JString, required = false,
                                 default = nil)
  if valid_611816 != nil:
    section.add "Description", valid_611816
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_611817 = formData.getOrDefault("RoleName")
  valid_611817 = validateParameter(valid_611817, JString, required = true,
                                 default = nil)
  if valid_611817 != nil:
    section.add "RoleName", valid_611817
  var valid_611818 = formData.getOrDefault("Path")
  valid_611818 = validateParameter(valid_611818, JString, required = false,
                                 default = nil)
  if valid_611818 != nil:
    section.add "Path", valid_611818
  var valid_611819 = formData.getOrDefault("Tags")
  valid_611819 = validateParameter(valid_611819, JArray, required = false,
                                 default = nil)
  if valid_611819 != nil:
    section.add "Tags", valid_611819
  var valid_611820 = formData.getOrDefault("PermissionsBoundary")
  valid_611820 = validateParameter(valid_611820, JString, required = false,
                                 default = nil)
  if valid_611820 != nil:
    section.add "PermissionsBoundary", valid_611820
  var valid_611821 = formData.getOrDefault("MaxSessionDuration")
  valid_611821 = validateParameter(valid_611821, JInt, required = false, default = nil)
  if valid_611821 != nil:
    section.add "MaxSessionDuration", valid_611821
  var valid_611822 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_611822 = validateParameter(valid_611822, JString, required = true,
                                 default = nil)
  if valid_611822 != nil:
    section.add "AssumeRolePolicyDocument", valid_611822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611823: Call_PostCreateRole_611804; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611823.validator(path, query, header, formData, body)
  let scheme = call_611823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611823.url(scheme.get, call_611823.host, call_611823.base,
                         call_611823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611823, url, valid)

proc call*(call_611824: Call_PostCreateRole_611804; RoleName: string;
          AssumeRolePolicyDocument: string; Description: string = "";
          Path: string = ""; Action: string = "CreateRole"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Description: string
  ##              : A description of the role.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  var query_611825 = newJObject()
  var formData_611826 = newJObject()
  add(formData_611826, "Description", newJString(Description))
  add(formData_611826, "RoleName", newJString(RoleName))
  add(formData_611826, "Path", newJString(Path))
  add(query_611825, "Action", newJString(Action))
  if Tags != nil:
    formData_611826.add "Tags", Tags
  add(formData_611826, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(formData_611826, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_611825, "Version", newJString(Version))
  add(formData_611826, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  result = call_611824.call(nil, query_611825, nil, formData_611826, nil)

var postCreateRole* = Call_PostCreateRole_611804(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_611805,
    base: "/", url: url_PostCreateRole_611806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_611782 = ref object of OpenApiRestCall_610658
proc url_GetCreateRole_611784(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateRole_611783(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : A description of the role.
  ##   Version: JString (required)
  section = newJObject()
  var valid_611785 = query.getOrDefault("Tags")
  valid_611785 = validateParameter(valid_611785, JArray, required = false,
                                 default = nil)
  if valid_611785 != nil:
    section.add "Tags", valid_611785
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_611786 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_611786 = validateParameter(valid_611786, JString, required = true,
                                 default = nil)
  if valid_611786 != nil:
    section.add "AssumeRolePolicyDocument", valid_611786
  var valid_611787 = query.getOrDefault("PermissionsBoundary")
  valid_611787 = validateParameter(valid_611787, JString, required = false,
                                 default = nil)
  if valid_611787 != nil:
    section.add "PermissionsBoundary", valid_611787
  var valid_611788 = query.getOrDefault("Path")
  valid_611788 = validateParameter(valid_611788, JString, required = false,
                                 default = nil)
  if valid_611788 != nil:
    section.add "Path", valid_611788
  var valid_611789 = query.getOrDefault("RoleName")
  valid_611789 = validateParameter(valid_611789, JString, required = true,
                                 default = nil)
  if valid_611789 != nil:
    section.add "RoleName", valid_611789
  var valid_611790 = query.getOrDefault("MaxSessionDuration")
  valid_611790 = validateParameter(valid_611790, JInt, required = false, default = nil)
  if valid_611790 != nil:
    section.add "MaxSessionDuration", valid_611790
  var valid_611791 = query.getOrDefault("Action")
  valid_611791 = validateParameter(valid_611791, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_611791 != nil:
    section.add "Action", valid_611791
  var valid_611792 = query.getOrDefault("Description")
  valid_611792 = validateParameter(valid_611792, JString, required = false,
                                 default = nil)
  if valid_611792 != nil:
    section.add "Description", valid_611792
  var valid_611793 = query.getOrDefault("Version")
  valid_611793 = validateParameter(valid_611793, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611793 != nil:
    section.add "Version", valid_611793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611794 = header.getOrDefault("X-Amz-Signature")
  valid_611794 = validateParameter(valid_611794, JString, required = false,
                                 default = nil)
  if valid_611794 != nil:
    section.add "X-Amz-Signature", valid_611794
  var valid_611795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611795 = validateParameter(valid_611795, JString, required = false,
                                 default = nil)
  if valid_611795 != nil:
    section.add "X-Amz-Content-Sha256", valid_611795
  var valid_611796 = header.getOrDefault("X-Amz-Date")
  valid_611796 = validateParameter(valid_611796, JString, required = false,
                                 default = nil)
  if valid_611796 != nil:
    section.add "X-Amz-Date", valid_611796
  var valid_611797 = header.getOrDefault("X-Amz-Credential")
  valid_611797 = validateParameter(valid_611797, JString, required = false,
                                 default = nil)
  if valid_611797 != nil:
    section.add "X-Amz-Credential", valid_611797
  var valid_611798 = header.getOrDefault("X-Amz-Security-Token")
  valid_611798 = validateParameter(valid_611798, JString, required = false,
                                 default = nil)
  if valid_611798 != nil:
    section.add "X-Amz-Security-Token", valid_611798
  var valid_611799 = header.getOrDefault("X-Amz-Algorithm")
  valid_611799 = validateParameter(valid_611799, JString, required = false,
                                 default = nil)
  if valid_611799 != nil:
    section.add "X-Amz-Algorithm", valid_611799
  var valid_611800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611800 = validateParameter(valid_611800, JString, required = false,
                                 default = nil)
  if valid_611800 != nil:
    section.add "X-Amz-SignedHeaders", valid_611800
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611801: Call_GetCreateRole_611782; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_611801.validator(path, query, header, formData, body)
  let scheme = call_611801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611801.url(scheme.get, call_611801.host, call_611801.base,
                         call_611801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611801, url, valid)

proc call*(call_611802: Call_GetCreateRole_611782;
          AssumeRolePolicyDocument: string; RoleName: string; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Path: string = "";
          MaxSessionDuration: int = 0; Action: string = "CreateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Version: string (required)
  var query_611803 = newJObject()
  if Tags != nil:
    query_611803.add "Tags", Tags
  add(query_611803, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_611803, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_611803, "Path", newJString(Path))
  add(query_611803, "RoleName", newJString(RoleName))
  add(query_611803, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_611803, "Action", newJString(Action))
  add(query_611803, "Description", newJString(Description))
  add(query_611803, "Version", newJString(Version))
  result = call_611802.call(nil, query_611803, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_611782(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_611783,
    base: "/", url: url_GetCreateRole_611784, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_611844 = ref object of OpenApiRestCall_610658
proc url_PostCreateSAMLProvider_611846(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSAMLProvider_611845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611847 = query.getOrDefault("Action")
  valid_611847 = validateParameter(valid_611847, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_611847 != nil:
    section.add "Action", valid_611847
  var valid_611848 = query.getOrDefault("Version")
  valid_611848 = validateParameter(valid_611848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611848 != nil:
    section.add "Version", valid_611848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611849 = header.getOrDefault("X-Amz-Signature")
  valid_611849 = validateParameter(valid_611849, JString, required = false,
                                 default = nil)
  if valid_611849 != nil:
    section.add "X-Amz-Signature", valid_611849
  var valid_611850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611850 = validateParameter(valid_611850, JString, required = false,
                                 default = nil)
  if valid_611850 != nil:
    section.add "X-Amz-Content-Sha256", valid_611850
  var valid_611851 = header.getOrDefault("X-Amz-Date")
  valid_611851 = validateParameter(valid_611851, JString, required = false,
                                 default = nil)
  if valid_611851 != nil:
    section.add "X-Amz-Date", valid_611851
  var valid_611852 = header.getOrDefault("X-Amz-Credential")
  valid_611852 = validateParameter(valid_611852, JString, required = false,
                                 default = nil)
  if valid_611852 != nil:
    section.add "X-Amz-Credential", valid_611852
  var valid_611853 = header.getOrDefault("X-Amz-Security-Token")
  valid_611853 = validateParameter(valid_611853, JString, required = false,
                                 default = nil)
  if valid_611853 != nil:
    section.add "X-Amz-Security-Token", valid_611853
  var valid_611854 = header.getOrDefault("X-Amz-Algorithm")
  valid_611854 = validateParameter(valid_611854, JString, required = false,
                                 default = nil)
  if valid_611854 != nil:
    section.add "X-Amz-Algorithm", valid_611854
  var valid_611855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611855 = validateParameter(valid_611855, JString, required = false,
                                 default = nil)
  if valid_611855 != nil:
    section.add "X-Amz-SignedHeaders", valid_611855
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_611856 = formData.getOrDefault("SAMLMetadataDocument")
  valid_611856 = validateParameter(valid_611856, JString, required = true,
                                 default = nil)
  if valid_611856 != nil:
    section.add "SAMLMetadataDocument", valid_611856
  var valid_611857 = formData.getOrDefault("Name")
  valid_611857 = validateParameter(valid_611857, JString, required = true,
                                 default = nil)
  if valid_611857 != nil:
    section.add "Name", valid_611857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611858: Call_PostCreateSAMLProvider_611844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611858.validator(path, query, header, formData, body)
  let scheme = call_611858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611858.url(scheme.get, call_611858.host, call_611858.base,
                         call_611858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611858, url, valid)

proc call*(call_611859: Call_PostCreateSAMLProvider_611844;
          SAMLMetadataDocument: string; Name: string;
          Action: string = "CreateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_611860 = newJObject()
  var formData_611861 = newJObject()
  add(formData_611861, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_611860, "Action", newJString(Action))
  add(formData_611861, "Name", newJString(Name))
  add(query_611860, "Version", newJString(Version))
  result = call_611859.call(nil, query_611860, nil, formData_611861, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_611844(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_611845, base: "/",
    url: url_PostCreateSAMLProvider_611846, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_611827 = ref object of OpenApiRestCall_610658
proc url_GetCreateSAMLProvider_611829(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSAMLProvider_611828(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_611830 = query.getOrDefault("Name")
  valid_611830 = validateParameter(valid_611830, JString, required = true,
                                 default = nil)
  if valid_611830 != nil:
    section.add "Name", valid_611830
  var valid_611831 = query.getOrDefault("Action")
  valid_611831 = validateParameter(valid_611831, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_611831 != nil:
    section.add "Action", valid_611831
  var valid_611832 = query.getOrDefault("SAMLMetadataDocument")
  valid_611832 = validateParameter(valid_611832, JString, required = true,
                                 default = nil)
  if valid_611832 != nil:
    section.add "SAMLMetadataDocument", valid_611832
  var valid_611833 = query.getOrDefault("Version")
  valid_611833 = validateParameter(valid_611833, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611833 != nil:
    section.add "Version", valid_611833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611834 = header.getOrDefault("X-Amz-Signature")
  valid_611834 = validateParameter(valid_611834, JString, required = false,
                                 default = nil)
  if valid_611834 != nil:
    section.add "X-Amz-Signature", valid_611834
  var valid_611835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611835 = validateParameter(valid_611835, JString, required = false,
                                 default = nil)
  if valid_611835 != nil:
    section.add "X-Amz-Content-Sha256", valid_611835
  var valid_611836 = header.getOrDefault("X-Amz-Date")
  valid_611836 = validateParameter(valid_611836, JString, required = false,
                                 default = nil)
  if valid_611836 != nil:
    section.add "X-Amz-Date", valid_611836
  var valid_611837 = header.getOrDefault("X-Amz-Credential")
  valid_611837 = validateParameter(valid_611837, JString, required = false,
                                 default = nil)
  if valid_611837 != nil:
    section.add "X-Amz-Credential", valid_611837
  var valid_611838 = header.getOrDefault("X-Amz-Security-Token")
  valid_611838 = validateParameter(valid_611838, JString, required = false,
                                 default = nil)
  if valid_611838 != nil:
    section.add "X-Amz-Security-Token", valid_611838
  var valid_611839 = header.getOrDefault("X-Amz-Algorithm")
  valid_611839 = validateParameter(valid_611839, JString, required = false,
                                 default = nil)
  if valid_611839 != nil:
    section.add "X-Amz-Algorithm", valid_611839
  var valid_611840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611840 = validateParameter(valid_611840, JString, required = false,
                                 default = nil)
  if valid_611840 != nil:
    section.add "X-Amz-SignedHeaders", valid_611840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611841: Call_GetCreateSAMLProvider_611827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611841.validator(path, query, header, formData, body)
  let scheme = call_611841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611841.url(scheme.get, call_611841.host, call_611841.base,
                         call_611841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611841, url, valid)

proc call*(call_611842: Call_GetCreateSAMLProvider_611827; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_611843 = newJObject()
  add(query_611843, "Name", newJString(Name))
  add(query_611843, "Action", newJString(Action))
  add(query_611843, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_611843, "Version", newJString(Version))
  result = call_611842.call(nil, query_611843, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_611827(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_611828, base: "/",
    url: url_GetCreateSAMLProvider_611829, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_611880 = ref object of OpenApiRestCall_610658
proc url_PostCreateServiceLinkedRole_611882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceLinkedRole_611881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611883 = query.getOrDefault("Action")
  valid_611883 = validateParameter(valid_611883, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_611883 != nil:
    section.add "Action", valid_611883
  var valid_611884 = query.getOrDefault("Version")
  valid_611884 = validateParameter(valid_611884, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611884 != nil:
    section.add "Version", valid_611884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611885 = header.getOrDefault("X-Amz-Signature")
  valid_611885 = validateParameter(valid_611885, JString, required = false,
                                 default = nil)
  if valid_611885 != nil:
    section.add "X-Amz-Signature", valid_611885
  var valid_611886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611886 = validateParameter(valid_611886, JString, required = false,
                                 default = nil)
  if valid_611886 != nil:
    section.add "X-Amz-Content-Sha256", valid_611886
  var valid_611887 = header.getOrDefault("X-Amz-Date")
  valid_611887 = validateParameter(valid_611887, JString, required = false,
                                 default = nil)
  if valid_611887 != nil:
    section.add "X-Amz-Date", valid_611887
  var valid_611888 = header.getOrDefault("X-Amz-Credential")
  valid_611888 = validateParameter(valid_611888, JString, required = false,
                                 default = nil)
  if valid_611888 != nil:
    section.add "X-Amz-Credential", valid_611888
  var valid_611889 = header.getOrDefault("X-Amz-Security-Token")
  valid_611889 = validateParameter(valid_611889, JString, required = false,
                                 default = nil)
  if valid_611889 != nil:
    section.add "X-Amz-Security-Token", valid_611889
  var valid_611890 = header.getOrDefault("X-Amz-Algorithm")
  valid_611890 = validateParameter(valid_611890, JString, required = false,
                                 default = nil)
  if valid_611890 != nil:
    section.add "X-Amz-Algorithm", valid_611890
  var valid_611891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611891 = validateParameter(valid_611891, JString, required = false,
                                 default = nil)
  if valid_611891 != nil:
    section.add "X-Amz-SignedHeaders", valid_611891
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  section = newJObject()
  var valid_611892 = formData.getOrDefault("CustomSuffix")
  valid_611892 = validateParameter(valid_611892, JString, required = false,
                                 default = nil)
  if valid_611892 != nil:
    section.add "CustomSuffix", valid_611892
  var valid_611893 = formData.getOrDefault("Description")
  valid_611893 = validateParameter(valid_611893, JString, required = false,
                                 default = nil)
  if valid_611893 != nil:
    section.add "Description", valid_611893
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_611894 = formData.getOrDefault("AWSServiceName")
  valid_611894 = validateParameter(valid_611894, JString, required = true,
                                 default = nil)
  if valid_611894 != nil:
    section.add "AWSServiceName", valid_611894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611895: Call_PostCreateServiceLinkedRole_611880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_611895.validator(path, query, header, formData, body)
  let scheme = call_611895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611895.url(scheme.get, call_611895.host, call_611895.base,
                         call_611895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611895, url, valid)

proc call*(call_611896: Call_PostCreateServiceLinkedRole_611880;
          AWSServiceName: string; CustomSuffix: string = ""; Description: string = "";
          Action: string = "CreateServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   Action: string (required)
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_611897 = newJObject()
  var formData_611898 = newJObject()
  add(formData_611898, "CustomSuffix", newJString(CustomSuffix))
  add(formData_611898, "Description", newJString(Description))
  add(query_611897, "Action", newJString(Action))
  add(formData_611898, "AWSServiceName", newJString(AWSServiceName))
  add(query_611897, "Version", newJString(Version))
  result = call_611896.call(nil, query_611897, nil, formData_611898, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_611880(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_611881, base: "/",
    url: url_PostCreateServiceLinkedRole_611882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_611862 = ref object of OpenApiRestCall_610658
proc url_GetCreateServiceLinkedRole_611864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceLinkedRole_611863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_611865 = query.getOrDefault("CustomSuffix")
  valid_611865 = validateParameter(valid_611865, JString, required = false,
                                 default = nil)
  if valid_611865 != nil:
    section.add "CustomSuffix", valid_611865
  var valid_611866 = query.getOrDefault("Action")
  valid_611866 = validateParameter(valid_611866, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_611866 != nil:
    section.add "Action", valid_611866
  var valid_611867 = query.getOrDefault("Description")
  valid_611867 = validateParameter(valid_611867, JString, required = false,
                                 default = nil)
  if valid_611867 != nil:
    section.add "Description", valid_611867
  var valid_611868 = query.getOrDefault("AWSServiceName")
  valid_611868 = validateParameter(valid_611868, JString, required = true,
                                 default = nil)
  if valid_611868 != nil:
    section.add "AWSServiceName", valid_611868
  var valid_611869 = query.getOrDefault("Version")
  valid_611869 = validateParameter(valid_611869, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611869 != nil:
    section.add "Version", valid_611869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611870 = header.getOrDefault("X-Amz-Signature")
  valid_611870 = validateParameter(valid_611870, JString, required = false,
                                 default = nil)
  if valid_611870 != nil:
    section.add "X-Amz-Signature", valid_611870
  var valid_611871 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611871 = validateParameter(valid_611871, JString, required = false,
                                 default = nil)
  if valid_611871 != nil:
    section.add "X-Amz-Content-Sha256", valid_611871
  var valid_611872 = header.getOrDefault("X-Amz-Date")
  valid_611872 = validateParameter(valid_611872, JString, required = false,
                                 default = nil)
  if valid_611872 != nil:
    section.add "X-Amz-Date", valid_611872
  var valid_611873 = header.getOrDefault("X-Amz-Credential")
  valid_611873 = validateParameter(valid_611873, JString, required = false,
                                 default = nil)
  if valid_611873 != nil:
    section.add "X-Amz-Credential", valid_611873
  var valid_611874 = header.getOrDefault("X-Amz-Security-Token")
  valid_611874 = validateParameter(valid_611874, JString, required = false,
                                 default = nil)
  if valid_611874 != nil:
    section.add "X-Amz-Security-Token", valid_611874
  var valid_611875 = header.getOrDefault("X-Amz-Algorithm")
  valid_611875 = validateParameter(valid_611875, JString, required = false,
                                 default = nil)
  if valid_611875 != nil:
    section.add "X-Amz-Algorithm", valid_611875
  var valid_611876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611876 = validateParameter(valid_611876, JString, required = false,
                                 default = nil)
  if valid_611876 != nil:
    section.add "X-Amz-SignedHeaders", valid_611876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611877: Call_GetCreateServiceLinkedRole_611862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_611877.validator(path, query, header, formData, body)
  let scheme = call_611877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611877.url(scheme.get, call_611877.host, call_611877.base,
                         call_611877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611877, url, valid)

proc call*(call_611878: Call_GetCreateServiceLinkedRole_611862;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole"; Description: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_611879 = newJObject()
  add(query_611879, "CustomSuffix", newJString(CustomSuffix))
  add(query_611879, "Action", newJString(Action))
  add(query_611879, "Description", newJString(Description))
  add(query_611879, "AWSServiceName", newJString(AWSServiceName))
  add(query_611879, "Version", newJString(Version))
  result = call_611878.call(nil, query_611879, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_611862(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_611863, base: "/",
    url: url_GetCreateServiceLinkedRole_611864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_611916 = ref object of OpenApiRestCall_610658
proc url_PostCreateServiceSpecificCredential_611918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceSpecificCredential_611917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611919 = query.getOrDefault("Action")
  valid_611919 = validateParameter(valid_611919, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_611919 != nil:
    section.add "Action", valid_611919
  var valid_611920 = query.getOrDefault("Version")
  valid_611920 = validateParameter(valid_611920, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611920 != nil:
    section.add "Version", valid_611920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611921 = header.getOrDefault("X-Amz-Signature")
  valid_611921 = validateParameter(valid_611921, JString, required = false,
                                 default = nil)
  if valid_611921 != nil:
    section.add "X-Amz-Signature", valid_611921
  var valid_611922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611922 = validateParameter(valid_611922, JString, required = false,
                                 default = nil)
  if valid_611922 != nil:
    section.add "X-Amz-Content-Sha256", valid_611922
  var valid_611923 = header.getOrDefault("X-Amz-Date")
  valid_611923 = validateParameter(valid_611923, JString, required = false,
                                 default = nil)
  if valid_611923 != nil:
    section.add "X-Amz-Date", valid_611923
  var valid_611924 = header.getOrDefault("X-Amz-Credential")
  valid_611924 = validateParameter(valid_611924, JString, required = false,
                                 default = nil)
  if valid_611924 != nil:
    section.add "X-Amz-Credential", valid_611924
  var valid_611925 = header.getOrDefault("X-Amz-Security-Token")
  valid_611925 = validateParameter(valid_611925, JString, required = false,
                                 default = nil)
  if valid_611925 != nil:
    section.add "X-Amz-Security-Token", valid_611925
  var valid_611926 = header.getOrDefault("X-Amz-Algorithm")
  valid_611926 = validateParameter(valid_611926, JString, required = false,
                                 default = nil)
  if valid_611926 != nil:
    section.add "X-Amz-Algorithm", valid_611926
  var valid_611927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611927 = validateParameter(valid_611927, JString, required = false,
                                 default = nil)
  if valid_611927 != nil:
    section.add "X-Amz-SignedHeaders", valid_611927
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ServiceName` field"
  var valid_611928 = formData.getOrDefault("ServiceName")
  valid_611928 = validateParameter(valid_611928, JString, required = true,
                                 default = nil)
  if valid_611928 != nil:
    section.add "ServiceName", valid_611928
  var valid_611929 = formData.getOrDefault("UserName")
  valid_611929 = validateParameter(valid_611929, JString, required = true,
                                 default = nil)
  if valid_611929 != nil:
    section.add "UserName", valid_611929
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611930: Call_PostCreateServiceSpecificCredential_611916;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611930.validator(path, query, header, formData, body)
  let scheme = call_611930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611930.url(scheme.get, call_611930.host, call_611930.base,
                         call_611930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611930, url, valid)

proc call*(call_611931: Call_PostCreateServiceSpecificCredential_611916;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611932 = newJObject()
  var formData_611933 = newJObject()
  add(formData_611933, "ServiceName", newJString(ServiceName))
  add(formData_611933, "UserName", newJString(UserName))
  add(query_611932, "Action", newJString(Action))
  add(query_611932, "Version", newJString(Version))
  result = call_611931.call(nil, query_611932, nil, formData_611933, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_611916(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_611917, base: "/",
    url: url_PostCreateServiceSpecificCredential_611918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_611899 = ref object of OpenApiRestCall_610658
proc url_GetCreateServiceSpecificCredential_611901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceSpecificCredential_611900(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611902 = query.getOrDefault("UserName")
  valid_611902 = validateParameter(valid_611902, JString, required = true,
                                 default = nil)
  if valid_611902 != nil:
    section.add "UserName", valid_611902
  var valid_611903 = query.getOrDefault("ServiceName")
  valid_611903 = validateParameter(valid_611903, JString, required = true,
                                 default = nil)
  if valid_611903 != nil:
    section.add "ServiceName", valid_611903
  var valid_611904 = query.getOrDefault("Action")
  valid_611904 = validateParameter(valid_611904, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_611904 != nil:
    section.add "Action", valid_611904
  var valid_611905 = query.getOrDefault("Version")
  valid_611905 = validateParameter(valid_611905, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611905 != nil:
    section.add "Version", valid_611905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611906 = header.getOrDefault("X-Amz-Signature")
  valid_611906 = validateParameter(valid_611906, JString, required = false,
                                 default = nil)
  if valid_611906 != nil:
    section.add "X-Amz-Signature", valid_611906
  var valid_611907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611907 = validateParameter(valid_611907, JString, required = false,
                                 default = nil)
  if valid_611907 != nil:
    section.add "X-Amz-Content-Sha256", valid_611907
  var valid_611908 = header.getOrDefault("X-Amz-Date")
  valid_611908 = validateParameter(valid_611908, JString, required = false,
                                 default = nil)
  if valid_611908 != nil:
    section.add "X-Amz-Date", valid_611908
  var valid_611909 = header.getOrDefault("X-Amz-Credential")
  valid_611909 = validateParameter(valid_611909, JString, required = false,
                                 default = nil)
  if valid_611909 != nil:
    section.add "X-Amz-Credential", valid_611909
  var valid_611910 = header.getOrDefault("X-Amz-Security-Token")
  valid_611910 = validateParameter(valid_611910, JString, required = false,
                                 default = nil)
  if valid_611910 != nil:
    section.add "X-Amz-Security-Token", valid_611910
  var valid_611911 = header.getOrDefault("X-Amz-Algorithm")
  valid_611911 = validateParameter(valid_611911, JString, required = false,
                                 default = nil)
  if valid_611911 != nil:
    section.add "X-Amz-Algorithm", valid_611911
  var valid_611912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611912 = validateParameter(valid_611912, JString, required = false,
                                 default = nil)
  if valid_611912 != nil:
    section.add "X-Amz-SignedHeaders", valid_611912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611913: Call_GetCreateServiceSpecificCredential_611899;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611913.validator(path, query, header, formData, body)
  let scheme = call_611913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611913.url(scheme.get, call_611913.host, call_611913.base,
                         call_611913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611913, url, valid)

proc call*(call_611914: Call_GetCreateServiceSpecificCredential_611899;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611915 = newJObject()
  add(query_611915, "UserName", newJString(UserName))
  add(query_611915, "ServiceName", newJString(ServiceName))
  add(query_611915, "Action", newJString(Action))
  add(query_611915, "Version", newJString(Version))
  result = call_611914.call(nil, query_611915, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_611899(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_611900, base: "/",
    url: url_GetCreateServiceSpecificCredential_611901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_611953 = ref object of OpenApiRestCall_610658
proc url_PostCreateUser_611955(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateUser_611954(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611956 = query.getOrDefault("Action")
  valid_611956 = validateParameter(valid_611956, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_611956 != nil:
    section.add "Action", valid_611956
  var valid_611957 = query.getOrDefault("Version")
  valid_611957 = validateParameter(valid_611957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611957 != nil:
    section.add "Version", valid_611957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611958 = header.getOrDefault("X-Amz-Signature")
  valid_611958 = validateParameter(valid_611958, JString, required = false,
                                 default = nil)
  if valid_611958 != nil:
    section.add "X-Amz-Signature", valid_611958
  var valid_611959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611959 = validateParameter(valid_611959, JString, required = false,
                                 default = nil)
  if valid_611959 != nil:
    section.add "X-Amz-Content-Sha256", valid_611959
  var valid_611960 = header.getOrDefault("X-Amz-Date")
  valid_611960 = validateParameter(valid_611960, JString, required = false,
                                 default = nil)
  if valid_611960 != nil:
    section.add "X-Amz-Date", valid_611960
  var valid_611961 = header.getOrDefault("X-Amz-Credential")
  valid_611961 = validateParameter(valid_611961, JString, required = false,
                                 default = nil)
  if valid_611961 != nil:
    section.add "X-Amz-Credential", valid_611961
  var valid_611962 = header.getOrDefault("X-Amz-Security-Token")
  valid_611962 = validateParameter(valid_611962, JString, required = false,
                                 default = nil)
  if valid_611962 != nil:
    section.add "X-Amz-Security-Token", valid_611962
  var valid_611963 = header.getOrDefault("X-Amz-Algorithm")
  valid_611963 = validateParameter(valid_611963, JString, required = false,
                                 default = nil)
  if valid_611963 != nil:
    section.add "X-Amz-Algorithm", valid_611963
  var valid_611964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611964 = validateParameter(valid_611964, JString, required = false,
                                 default = nil)
  if valid_611964 != nil:
    section.add "X-Amz-SignedHeaders", valid_611964
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_611965 = formData.getOrDefault("UserName")
  valid_611965 = validateParameter(valid_611965, JString, required = true,
                                 default = nil)
  if valid_611965 != nil:
    section.add "UserName", valid_611965
  var valid_611966 = formData.getOrDefault("Path")
  valid_611966 = validateParameter(valid_611966, JString, required = false,
                                 default = nil)
  if valid_611966 != nil:
    section.add "Path", valid_611966
  var valid_611967 = formData.getOrDefault("Tags")
  valid_611967 = validateParameter(valid_611967, JArray, required = false,
                                 default = nil)
  if valid_611967 != nil:
    section.add "Tags", valid_611967
  var valid_611968 = formData.getOrDefault("PermissionsBoundary")
  valid_611968 = validateParameter(valid_611968, JString, required = false,
                                 default = nil)
  if valid_611968 != nil:
    section.add "PermissionsBoundary", valid_611968
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611969: Call_PostCreateUser_611953; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611969.validator(path, query, header, formData, body)
  let scheme = call_611969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611969.url(scheme.get, call_611969.host, call_611969.base,
                         call_611969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611969, url, valid)

proc call*(call_611970: Call_PostCreateUser_611953; UserName: string;
          Path: string = ""; Action: string = "CreateUser"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_611971 = newJObject()
  var formData_611972 = newJObject()
  add(formData_611972, "UserName", newJString(UserName))
  add(formData_611972, "Path", newJString(Path))
  add(query_611971, "Action", newJString(Action))
  if Tags != nil:
    formData_611972.add "Tags", Tags
  add(formData_611972, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_611971, "Version", newJString(Version))
  result = call_611970.call(nil, query_611971, nil, formData_611972, nil)

var postCreateUser* = Call_PostCreateUser_611953(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_611954,
    base: "/", url: url_PostCreateUser_611955, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_611934 = ref object of OpenApiRestCall_610658
proc url_GetCreateUser_611936(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateUser_611935(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_611937 = query.getOrDefault("UserName")
  valid_611937 = validateParameter(valid_611937, JString, required = true,
                                 default = nil)
  if valid_611937 != nil:
    section.add "UserName", valid_611937
  var valid_611938 = query.getOrDefault("Tags")
  valid_611938 = validateParameter(valid_611938, JArray, required = false,
                                 default = nil)
  if valid_611938 != nil:
    section.add "Tags", valid_611938
  var valid_611939 = query.getOrDefault("PermissionsBoundary")
  valid_611939 = validateParameter(valid_611939, JString, required = false,
                                 default = nil)
  if valid_611939 != nil:
    section.add "PermissionsBoundary", valid_611939
  var valid_611940 = query.getOrDefault("Path")
  valid_611940 = validateParameter(valid_611940, JString, required = false,
                                 default = nil)
  if valid_611940 != nil:
    section.add "Path", valid_611940
  var valid_611941 = query.getOrDefault("Action")
  valid_611941 = validateParameter(valid_611941, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_611941 != nil:
    section.add "Action", valid_611941
  var valid_611942 = query.getOrDefault("Version")
  valid_611942 = validateParameter(valid_611942, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611942 != nil:
    section.add "Version", valid_611942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611943 = header.getOrDefault("X-Amz-Signature")
  valid_611943 = validateParameter(valid_611943, JString, required = false,
                                 default = nil)
  if valid_611943 != nil:
    section.add "X-Amz-Signature", valid_611943
  var valid_611944 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611944 = validateParameter(valid_611944, JString, required = false,
                                 default = nil)
  if valid_611944 != nil:
    section.add "X-Amz-Content-Sha256", valid_611944
  var valid_611945 = header.getOrDefault("X-Amz-Date")
  valid_611945 = validateParameter(valid_611945, JString, required = false,
                                 default = nil)
  if valid_611945 != nil:
    section.add "X-Amz-Date", valid_611945
  var valid_611946 = header.getOrDefault("X-Amz-Credential")
  valid_611946 = validateParameter(valid_611946, JString, required = false,
                                 default = nil)
  if valid_611946 != nil:
    section.add "X-Amz-Credential", valid_611946
  var valid_611947 = header.getOrDefault("X-Amz-Security-Token")
  valid_611947 = validateParameter(valid_611947, JString, required = false,
                                 default = nil)
  if valid_611947 != nil:
    section.add "X-Amz-Security-Token", valid_611947
  var valid_611948 = header.getOrDefault("X-Amz-Algorithm")
  valid_611948 = validateParameter(valid_611948, JString, required = false,
                                 default = nil)
  if valid_611948 != nil:
    section.add "X-Amz-Algorithm", valid_611948
  var valid_611949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611949 = validateParameter(valid_611949, JString, required = false,
                                 default = nil)
  if valid_611949 != nil:
    section.add "X-Amz-SignedHeaders", valid_611949
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611950: Call_GetCreateUser_611934; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_611950.validator(path, query, header, formData, body)
  let scheme = call_611950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611950.url(scheme.get, call_611950.host, call_611950.base,
                         call_611950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611950, url, valid)

proc call*(call_611951: Call_GetCreateUser_611934; UserName: string;
          Tags: JsonNode = nil; PermissionsBoundary: string = ""; Path: string = "";
          Action: string = "CreateUser"; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_611952 = newJObject()
  add(query_611952, "UserName", newJString(UserName))
  if Tags != nil:
    query_611952.add "Tags", Tags
  add(query_611952, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_611952, "Path", newJString(Path))
  add(query_611952, "Action", newJString(Action))
  add(query_611952, "Version", newJString(Version))
  result = call_611951.call(nil, query_611952, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_611934(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_611935,
    base: "/", url: url_GetCreateUser_611936, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_611990 = ref object of OpenApiRestCall_610658
proc url_PostCreateVirtualMFADevice_611992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateVirtualMFADevice_611991(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_611993 = query.getOrDefault("Action")
  valid_611993 = validateParameter(valid_611993, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_611993 != nil:
    section.add "Action", valid_611993
  var valid_611994 = query.getOrDefault("Version")
  valid_611994 = validateParameter(valid_611994, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611994 != nil:
    section.add "Version", valid_611994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611995 = header.getOrDefault("X-Amz-Signature")
  valid_611995 = validateParameter(valid_611995, JString, required = false,
                                 default = nil)
  if valid_611995 != nil:
    section.add "X-Amz-Signature", valid_611995
  var valid_611996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611996 = validateParameter(valid_611996, JString, required = false,
                                 default = nil)
  if valid_611996 != nil:
    section.add "X-Amz-Content-Sha256", valid_611996
  var valid_611997 = header.getOrDefault("X-Amz-Date")
  valid_611997 = validateParameter(valid_611997, JString, required = false,
                                 default = nil)
  if valid_611997 != nil:
    section.add "X-Amz-Date", valid_611997
  var valid_611998 = header.getOrDefault("X-Amz-Credential")
  valid_611998 = validateParameter(valid_611998, JString, required = false,
                                 default = nil)
  if valid_611998 != nil:
    section.add "X-Amz-Credential", valid_611998
  var valid_611999 = header.getOrDefault("X-Amz-Security-Token")
  valid_611999 = validateParameter(valid_611999, JString, required = false,
                                 default = nil)
  if valid_611999 != nil:
    section.add "X-Amz-Security-Token", valid_611999
  var valid_612000 = header.getOrDefault("X-Amz-Algorithm")
  valid_612000 = validateParameter(valid_612000, JString, required = false,
                                 default = nil)
  if valid_612000 != nil:
    section.add "X-Amz-Algorithm", valid_612000
  var valid_612001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612001 = validateParameter(valid_612001, JString, required = false,
                                 default = nil)
  if valid_612001 != nil:
    section.add "X-Amz-SignedHeaders", valid_612001
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_612002 = formData.getOrDefault("VirtualMFADeviceName")
  valid_612002 = validateParameter(valid_612002, JString, required = true,
                                 default = nil)
  if valid_612002 != nil:
    section.add "VirtualMFADeviceName", valid_612002
  var valid_612003 = formData.getOrDefault("Path")
  valid_612003 = validateParameter(valid_612003, JString, required = false,
                                 default = nil)
  if valid_612003 != nil:
    section.add "Path", valid_612003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612004: Call_PostCreateVirtualMFADevice_611990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_612004.validator(path, query, header, formData, body)
  let scheme = call_612004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612004.url(scheme.get, call_612004.host, call_612004.base,
                         call_612004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612004, url, valid)

proc call*(call_612005: Call_PostCreateVirtualMFADevice_611990;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612006 = newJObject()
  var formData_612007 = newJObject()
  add(formData_612007, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(formData_612007, "Path", newJString(Path))
  add(query_612006, "Action", newJString(Action))
  add(query_612006, "Version", newJString(Version))
  result = call_612005.call(nil, query_612006, nil, formData_612007, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_611990(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_611991, base: "/",
    url: url_PostCreateVirtualMFADevice_611992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_611973 = ref object of OpenApiRestCall_610658
proc url_GetCreateVirtualMFADevice_611975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateVirtualMFADevice_611974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_611976 = query.getOrDefault("Path")
  valid_611976 = validateParameter(valid_611976, JString, required = false,
                                 default = nil)
  if valid_611976 != nil:
    section.add "Path", valid_611976
  var valid_611977 = query.getOrDefault("Action")
  valid_611977 = validateParameter(valid_611977, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_611977 != nil:
    section.add "Action", valid_611977
  var valid_611978 = query.getOrDefault("Version")
  valid_611978 = validateParameter(valid_611978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_611978 != nil:
    section.add "Version", valid_611978
  var valid_611979 = query.getOrDefault("VirtualMFADeviceName")
  valid_611979 = validateParameter(valid_611979, JString, required = true,
                                 default = nil)
  if valid_611979 != nil:
    section.add "VirtualMFADeviceName", valid_611979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_611980 = header.getOrDefault("X-Amz-Signature")
  valid_611980 = validateParameter(valid_611980, JString, required = false,
                                 default = nil)
  if valid_611980 != nil:
    section.add "X-Amz-Signature", valid_611980
  var valid_611981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_611981 = validateParameter(valid_611981, JString, required = false,
                                 default = nil)
  if valid_611981 != nil:
    section.add "X-Amz-Content-Sha256", valid_611981
  var valid_611982 = header.getOrDefault("X-Amz-Date")
  valid_611982 = validateParameter(valid_611982, JString, required = false,
                                 default = nil)
  if valid_611982 != nil:
    section.add "X-Amz-Date", valid_611982
  var valid_611983 = header.getOrDefault("X-Amz-Credential")
  valid_611983 = validateParameter(valid_611983, JString, required = false,
                                 default = nil)
  if valid_611983 != nil:
    section.add "X-Amz-Credential", valid_611983
  var valid_611984 = header.getOrDefault("X-Amz-Security-Token")
  valid_611984 = validateParameter(valid_611984, JString, required = false,
                                 default = nil)
  if valid_611984 != nil:
    section.add "X-Amz-Security-Token", valid_611984
  var valid_611985 = header.getOrDefault("X-Amz-Algorithm")
  valid_611985 = validateParameter(valid_611985, JString, required = false,
                                 default = nil)
  if valid_611985 != nil:
    section.add "X-Amz-Algorithm", valid_611985
  var valid_611986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_611986 = validateParameter(valid_611986, JString, required = false,
                                 default = nil)
  if valid_611986 != nil:
    section.add "X-Amz-SignedHeaders", valid_611986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_611987: Call_GetCreateVirtualMFADevice_611973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_611987.validator(path, query, header, formData, body)
  let scheme = call_611987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_611987.url(scheme.get, call_611987.host, call_611987.base,
                         call_611987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_611987, url, valid)

proc call*(call_611988: Call_GetCreateVirtualMFADevice_611973;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_611989 = newJObject()
  add(query_611989, "Path", newJString(Path))
  add(query_611989, "Action", newJString(Action))
  add(query_611989, "Version", newJString(Version))
  add(query_611989, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  result = call_611988.call(nil, query_611989, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_611973(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_611974, base: "/",
    url: url_GetCreateVirtualMFADevice_611975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_612025 = ref object of OpenApiRestCall_610658
proc url_PostDeactivateMFADevice_612027(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeactivateMFADevice_612026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612028 = query.getOrDefault("Action")
  valid_612028 = validateParameter(valid_612028, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_612028 != nil:
    section.add "Action", valid_612028
  var valid_612029 = query.getOrDefault("Version")
  valid_612029 = validateParameter(valid_612029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612029 != nil:
    section.add "Version", valid_612029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612030 = header.getOrDefault("X-Amz-Signature")
  valid_612030 = validateParameter(valid_612030, JString, required = false,
                                 default = nil)
  if valid_612030 != nil:
    section.add "X-Amz-Signature", valid_612030
  var valid_612031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612031 = validateParameter(valid_612031, JString, required = false,
                                 default = nil)
  if valid_612031 != nil:
    section.add "X-Amz-Content-Sha256", valid_612031
  var valid_612032 = header.getOrDefault("X-Amz-Date")
  valid_612032 = validateParameter(valid_612032, JString, required = false,
                                 default = nil)
  if valid_612032 != nil:
    section.add "X-Amz-Date", valid_612032
  var valid_612033 = header.getOrDefault("X-Amz-Credential")
  valid_612033 = validateParameter(valid_612033, JString, required = false,
                                 default = nil)
  if valid_612033 != nil:
    section.add "X-Amz-Credential", valid_612033
  var valid_612034 = header.getOrDefault("X-Amz-Security-Token")
  valid_612034 = validateParameter(valid_612034, JString, required = false,
                                 default = nil)
  if valid_612034 != nil:
    section.add "X-Amz-Security-Token", valid_612034
  var valid_612035 = header.getOrDefault("X-Amz-Algorithm")
  valid_612035 = validateParameter(valid_612035, JString, required = false,
                                 default = nil)
  if valid_612035 != nil:
    section.add "X-Amz-Algorithm", valid_612035
  var valid_612036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612036 = validateParameter(valid_612036, JString, required = false,
                                 default = nil)
  if valid_612036 != nil:
    section.add "X-Amz-SignedHeaders", valid_612036
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_612037 = formData.getOrDefault("SerialNumber")
  valid_612037 = validateParameter(valid_612037, JString, required = true,
                                 default = nil)
  if valid_612037 != nil:
    section.add "SerialNumber", valid_612037
  var valid_612038 = formData.getOrDefault("UserName")
  valid_612038 = validateParameter(valid_612038, JString, required = true,
                                 default = nil)
  if valid_612038 != nil:
    section.add "UserName", valid_612038
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612039: Call_PostDeactivateMFADevice_612025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612039.validator(path, query, header, formData, body)
  let scheme = call_612039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612039.url(scheme.get, call_612039.host, call_612039.base,
                         call_612039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612039, url, valid)

proc call*(call_612040: Call_PostDeactivateMFADevice_612025; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612041 = newJObject()
  var formData_612042 = newJObject()
  add(formData_612042, "SerialNumber", newJString(SerialNumber))
  add(formData_612042, "UserName", newJString(UserName))
  add(query_612041, "Action", newJString(Action))
  add(query_612041, "Version", newJString(Version))
  result = call_612040.call(nil, query_612041, nil, formData_612042, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_612025(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_612026, base: "/",
    url: url_PostDeactivateMFADevice_612027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_612008 = ref object of OpenApiRestCall_610658
proc url_GetDeactivateMFADevice_612010(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeactivateMFADevice_612009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612011 = query.getOrDefault("UserName")
  valid_612011 = validateParameter(valid_612011, JString, required = true,
                                 default = nil)
  if valid_612011 != nil:
    section.add "UserName", valid_612011
  var valid_612012 = query.getOrDefault("SerialNumber")
  valid_612012 = validateParameter(valid_612012, JString, required = true,
                                 default = nil)
  if valid_612012 != nil:
    section.add "SerialNumber", valid_612012
  var valid_612013 = query.getOrDefault("Action")
  valid_612013 = validateParameter(valid_612013, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_612013 != nil:
    section.add "Action", valid_612013
  var valid_612014 = query.getOrDefault("Version")
  valid_612014 = validateParameter(valid_612014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612014 != nil:
    section.add "Version", valid_612014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612015 = header.getOrDefault("X-Amz-Signature")
  valid_612015 = validateParameter(valid_612015, JString, required = false,
                                 default = nil)
  if valid_612015 != nil:
    section.add "X-Amz-Signature", valid_612015
  var valid_612016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612016 = validateParameter(valid_612016, JString, required = false,
                                 default = nil)
  if valid_612016 != nil:
    section.add "X-Amz-Content-Sha256", valid_612016
  var valid_612017 = header.getOrDefault("X-Amz-Date")
  valid_612017 = validateParameter(valid_612017, JString, required = false,
                                 default = nil)
  if valid_612017 != nil:
    section.add "X-Amz-Date", valid_612017
  var valid_612018 = header.getOrDefault("X-Amz-Credential")
  valid_612018 = validateParameter(valid_612018, JString, required = false,
                                 default = nil)
  if valid_612018 != nil:
    section.add "X-Amz-Credential", valid_612018
  var valid_612019 = header.getOrDefault("X-Amz-Security-Token")
  valid_612019 = validateParameter(valid_612019, JString, required = false,
                                 default = nil)
  if valid_612019 != nil:
    section.add "X-Amz-Security-Token", valid_612019
  var valid_612020 = header.getOrDefault("X-Amz-Algorithm")
  valid_612020 = validateParameter(valid_612020, JString, required = false,
                                 default = nil)
  if valid_612020 != nil:
    section.add "X-Amz-Algorithm", valid_612020
  var valid_612021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612021 = validateParameter(valid_612021, JString, required = false,
                                 default = nil)
  if valid_612021 != nil:
    section.add "X-Amz-SignedHeaders", valid_612021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612022: Call_GetDeactivateMFADevice_612008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612022.validator(path, query, header, formData, body)
  let scheme = call_612022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612022.url(scheme.get, call_612022.host, call_612022.base,
                         call_612022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612022, url, valid)

proc call*(call_612023: Call_GetDeactivateMFADevice_612008; UserName: string;
          SerialNumber: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612024 = newJObject()
  add(query_612024, "UserName", newJString(UserName))
  add(query_612024, "SerialNumber", newJString(SerialNumber))
  add(query_612024, "Action", newJString(Action))
  add(query_612024, "Version", newJString(Version))
  result = call_612023.call(nil, query_612024, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_612008(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_612009, base: "/",
    url: url_GetDeactivateMFADevice_612010, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_612060 = ref object of OpenApiRestCall_610658
proc url_PostDeleteAccessKey_612062(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccessKey_612061(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612063 = query.getOrDefault("Action")
  valid_612063 = validateParameter(valid_612063, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_612063 != nil:
    section.add "Action", valid_612063
  var valid_612064 = query.getOrDefault("Version")
  valid_612064 = validateParameter(valid_612064, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612064 != nil:
    section.add "Version", valid_612064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612065 = header.getOrDefault("X-Amz-Signature")
  valid_612065 = validateParameter(valid_612065, JString, required = false,
                                 default = nil)
  if valid_612065 != nil:
    section.add "X-Amz-Signature", valid_612065
  var valid_612066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612066 = validateParameter(valid_612066, JString, required = false,
                                 default = nil)
  if valid_612066 != nil:
    section.add "X-Amz-Content-Sha256", valid_612066
  var valid_612067 = header.getOrDefault("X-Amz-Date")
  valid_612067 = validateParameter(valid_612067, JString, required = false,
                                 default = nil)
  if valid_612067 != nil:
    section.add "X-Amz-Date", valid_612067
  var valid_612068 = header.getOrDefault("X-Amz-Credential")
  valid_612068 = validateParameter(valid_612068, JString, required = false,
                                 default = nil)
  if valid_612068 != nil:
    section.add "X-Amz-Credential", valid_612068
  var valid_612069 = header.getOrDefault("X-Amz-Security-Token")
  valid_612069 = validateParameter(valid_612069, JString, required = false,
                                 default = nil)
  if valid_612069 != nil:
    section.add "X-Amz-Security-Token", valid_612069
  var valid_612070 = header.getOrDefault("X-Amz-Algorithm")
  valid_612070 = validateParameter(valid_612070, JString, required = false,
                                 default = nil)
  if valid_612070 != nil:
    section.add "X-Amz-Algorithm", valid_612070
  var valid_612071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612071 = validateParameter(valid_612071, JString, required = false,
                                 default = nil)
  if valid_612071 != nil:
    section.add "X-Amz-SignedHeaders", valid_612071
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_612072 = formData.getOrDefault("AccessKeyId")
  valid_612072 = validateParameter(valid_612072, JString, required = true,
                                 default = nil)
  if valid_612072 != nil:
    section.add "AccessKeyId", valid_612072
  var valid_612073 = formData.getOrDefault("UserName")
  valid_612073 = validateParameter(valid_612073, JString, required = false,
                                 default = nil)
  if valid_612073 != nil:
    section.add "UserName", valid_612073
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612074: Call_PostDeleteAccessKey_612060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_612074.validator(path, query, header, formData, body)
  let scheme = call_612074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612074.url(scheme.get, call_612074.host, call_612074.base,
                         call_612074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612074, url, valid)

proc call*(call_612075: Call_PostDeleteAccessKey_612060; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612076 = newJObject()
  var formData_612077 = newJObject()
  add(formData_612077, "AccessKeyId", newJString(AccessKeyId))
  add(formData_612077, "UserName", newJString(UserName))
  add(query_612076, "Action", newJString(Action))
  add(query_612076, "Version", newJString(Version))
  result = call_612075.call(nil, query_612076, nil, formData_612077, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_612060(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_612061, base: "/",
    url: url_PostDeleteAccessKey_612062, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_612043 = ref object of OpenApiRestCall_610658
proc url_GetDeleteAccessKey_612045(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccessKey_612044(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612046 = query.getOrDefault("UserName")
  valid_612046 = validateParameter(valid_612046, JString, required = false,
                                 default = nil)
  if valid_612046 != nil:
    section.add "UserName", valid_612046
  var valid_612047 = query.getOrDefault("Action")
  valid_612047 = validateParameter(valid_612047, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_612047 != nil:
    section.add "Action", valid_612047
  var valid_612048 = query.getOrDefault("AccessKeyId")
  valid_612048 = validateParameter(valid_612048, JString, required = true,
                                 default = nil)
  if valid_612048 != nil:
    section.add "AccessKeyId", valid_612048
  var valid_612049 = query.getOrDefault("Version")
  valid_612049 = validateParameter(valid_612049, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612049 != nil:
    section.add "Version", valid_612049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612050 = header.getOrDefault("X-Amz-Signature")
  valid_612050 = validateParameter(valid_612050, JString, required = false,
                                 default = nil)
  if valid_612050 != nil:
    section.add "X-Amz-Signature", valid_612050
  var valid_612051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612051 = validateParameter(valid_612051, JString, required = false,
                                 default = nil)
  if valid_612051 != nil:
    section.add "X-Amz-Content-Sha256", valid_612051
  var valid_612052 = header.getOrDefault("X-Amz-Date")
  valid_612052 = validateParameter(valid_612052, JString, required = false,
                                 default = nil)
  if valid_612052 != nil:
    section.add "X-Amz-Date", valid_612052
  var valid_612053 = header.getOrDefault("X-Amz-Credential")
  valid_612053 = validateParameter(valid_612053, JString, required = false,
                                 default = nil)
  if valid_612053 != nil:
    section.add "X-Amz-Credential", valid_612053
  var valid_612054 = header.getOrDefault("X-Amz-Security-Token")
  valid_612054 = validateParameter(valid_612054, JString, required = false,
                                 default = nil)
  if valid_612054 != nil:
    section.add "X-Amz-Security-Token", valid_612054
  var valid_612055 = header.getOrDefault("X-Amz-Algorithm")
  valid_612055 = validateParameter(valid_612055, JString, required = false,
                                 default = nil)
  if valid_612055 != nil:
    section.add "X-Amz-Algorithm", valid_612055
  var valid_612056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612056 = validateParameter(valid_612056, JString, required = false,
                                 default = nil)
  if valid_612056 != nil:
    section.add "X-Amz-SignedHeaders", valid_612056
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612057: Call_GetDeleteAccessKey_612043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_612057.validator(path, query, header, formData, body)
  let scheme = call_612057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612057.url(scheme.get, call_612057.host, call_612057.base,
                         call_612057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612057, url, valid)

proc call*(call_612058: Call_GetDeleteAccessKey_612043; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_612059 = newJObject()
  add(query_612059, "UserName", newJString(UserName))
  add(query_612059, "Action", newJString(Action))
  add(query_612059, "AccessKeyId", newJString(AccessKeyId))
  add(query_612059, "Version", newJString(Version))
  result = call_612058.call(nil, query_612059, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_612043(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_612044,
    base: "/", url: url_GetDeleteAccessKey_612045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_612094 = ref object of OpenApiRestCall_610658
proc url_PostDeleteAccountAlias_612096(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountAlias_612095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612097 = query.getOrDefault("Action")
  valid_612097 = validateParameter(valid_612097, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_612097 != nil:
    section.add "Action", valid_612097
  var valid_612098 = query.getOrDefault("Version")
  valid_612098 = validateParameter(valid_612098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612098 != nil:
    section.add "Version", valid_612098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612099 = header.getOrDefault("X-Amz-Signature")
  valid_612099 = validateParameter(valid_612099, JString, required = false,
                                 default = nil)
  if valid_612099 != nil:
    section.add "X-Amz-Signature", valid_612099
  var valid_612100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612100 = validateParameter(valid_612100, JString, required = false,
                                 default = nil)
  if valid_612100 != nil:
    section.add "X-Amz-Content-Sha256", valid_612100
  var valid_612101 = header.getOrDefault("X-Amz-Date")
  valid_612101 = validateParameter(valid_612101, JString, required = false,
                                 default = nil)
  if valid_612101 != nil:
    section.add "X-Amz-Date", valid_612101
  var valid_612102 = header.getOrDefault("X-Amz-Credential")
  valid_612102 = validateParameter(valid_612102, JString, required = false,
                                 default = nil)
  if valid_612102 != nil:
    section.add "X-Amz-Credential", valid_612102
  var valid_612103 = header.getOrDefault("X-Amz-Security-Token")
  valid_612103 = validateParameter(valid_612103, JString, required = false,
                                 default = nil)
  if valid_612103 != nil:
    section.add "X-Amz-Security-Token", valid_612103
  var valid_612104 = header.getOrDefault("X-Amz-Algorithm")
  valid_612104 = validateParameter(valid_612104, JString, required = false,
                                 default = nil)
  if valid_612104 != nil:
    section.add "X-Amz-Algorithm", valid_612104
  var valid_612105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612105 = validateParameter(valid_612105, JString, required = false,
                                 default = nil)
  if valid_612105 != nil:
    section.add "X-Amz-SignedHeaders", valid_612105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_612106 = formData.getOrDefault("AccountAlias")
  valid_612106 = validateParameter(valid_612106, JString, required = true,
                                 default = nil)
  if valid_612106 != nil:
    section.add "AccountAlias", valid_612106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612107: Call_PostDeleteAccountAlias_612094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612107.validator(path, query, header, formData, body)
  let scheme = call_612107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612107.url(scheme.get, call_612107.host, call_612107.base,
                         call_612107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612107, url, valid)

proc call*(call_612108: Call_PostDeleteAccountAlias_612094; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_612109 = newJObject()
  var formData_612110 = newJObject()
  add(query_612109, "Action", newJString(Action))
  add(formData_612110, "AccountAlias", newJString(AccountAlias))
  add(query_612109, "Version", newJString(Version))
  result = call_612108.call(nil, query_612109, nil, formData_612110, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_612094(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_612095, base: "/",
    url: url_PostDeleteAccountAlias_612096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_612078 = ref object of OpenApiRestCall_610658
proc url_GetDeleteAccountAlias_612080(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountAlias_612079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_612081 = query.getOrDefault("AccountAlias")
  valid_612081 = validateParameter(valid_612081, JString, required = true,
                                 default = nil)
  if valid_612081 != nil:
    section.add "AccountAlias", valid_612081
  var valid_612082 = query.getOrDefault("Action")
  valid_612082 = validateParameter(valid_612082, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_612082 != nil:
    section.add "Action", valid_612082
  var valid_612083 = query.getOrDefault("Version")
  valid_612083 = validateParameter(valid_612083, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612083 != nil:
    section.add "Version", valid_612083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612084 = header.getOrDefault("X-Amz-Signature")
  valid_612084 = validateParameter(valid_612084, JString, required = false,
                                 default = nil)
  if valid_612084 != nil:
    section.add "X-Amz-Signature", valid_612084
  var valid_612085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612085 = validateParameter(valid_612085, JString, required = false,
                                 default = nil)
  if valid_612085 != nil:
    section.add "X-Amz-Content-Sha256", valid_612085
  var valid_612086 = header.getOrDefault("X-Amz-Date")
  valid_612086 = validateParameter(valid_612086, JString, required = false,
                                 default = nil)
  if valid_612086 != nil:
    section.add "X-Amz-Date", valid_612086
  var valid_612087 = header.getOrDefault("X-Amz-Credential")
  valid_612087 = validateParameter(valid_612087, JString, required = false,
                                 default = nil)
  if valid_612087 != nil:
    section.add "X-Amz-Credential", valid_612087
  var valid_612088 = header.getOrDefault("X-Amz-Security-Token")
  valid_612088 = validateParameter(valid_612088, JString, required = false,
                                 default = nil)
  if valid_612088 != nil:
    section.add "X-Amz-Security-Token", valid_612088
  var valid_612089 = header.getOrDefault("X-Amz-Algorithm")
  valid_612089 = validateParameter(valid_612089, JString, required = false,
                                 default = nil)
  if valid_612089 != nil:
    section.add "X-Amz-Algorithm", valid_612089
  var valid_612090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612090 = validateParameter(valid_612090, JString, required = false,
                                 default = nil)
  if valid_612090 != nil:
    section.add "X-Amz-SignedHeaders", valid_612090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612091: Call_GetDeleteAccountAlias_612078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612091.validator(path, query, header, formData, body)
  let scheme = call_612091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612091.url(scheme.get, call_612091.host, call_612091.base,
                         call_612091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612091, url, valid)

proc call*(call_612092: Call_GetDeleteAccountAlias_612078; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612093 = newJObject()
  add(query_612093, "AccountAlias", newJString(AccountAlias))
  add(query_612093, "Action", newJString(Action))
  add(query_612093, "Version", newJString(Version))
  result = call_612092.call(nil, query_612093, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_612078(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_612079, base: "/",
    url: url_GetDeleteAccountAlias_612080, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_612126 = ref object of OpenApiRestCall_610658
proc url_PostDeleteAccountPasswordPolicy_612128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_612127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612129 = query.getOrDefault("Action")
  valid_612129 = validateParameter(valid_612129, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_612129 != nil:
    section.add "Action", valid_612129
  var valid_612130 = query.getOrDefault("Version")
  valid_612130 = validateParameter(valid_612130, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612130 != nil:
    section.add "Version", valid_612130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612131 = header.getOrDefault("X-Amz-Signature")
  valid_612131 = validateParameter(valid_612131, JString, required = false,
                                 default = nil)
  if valid_612131 != nil:
    section.add "X-Amz-Signature", valid_612131
  var valid_612132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612132 = validateParameter(valid_612132, JString, required = false,
                                 default = nil)
  if valid_612132 != nil:
    section.add "X-Amz-Content-Sha256", valid_612132
  var valid_612133 = header.getOrDefault("X-Amz-Date")
  valid_612133 = validateParameter(valid_612133, JString, required = false,
                                 default = nil)
  if valid_612133 != nil:
    section.add "X-Amz-Date", valid_612133
  var valid_612134 = header.getOrDefault("X-Amz-Credential")
  valid_612134 = validateParameter(valid_612134, JString, required = false,
                                 default = nil)
  if valid_612134 != nil:
    section.add "X-Amz-Credential", valid_612134
  var valid_612135 = header.getOrDefault("X-Amz-Security-Token")
  valid_612135 = validateParameter(valid_612135, JString, required = false,
                                 default = nil)
  if valid_612135 != nil:
    section.add "X-Amz-Security-Token", valid_612135
  var valid_612136 = header.getOrDefault("X-Amz-Algorithm")
  valid_612136 = validateParameter(valid_612136, JString, required = false,
                                 default = nil)
  if valid_612136 != nil:
    section.add "X-Amz-Algorithm", valid_612136
  var valid_612137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612137 = validateParameter(valid_612137, JString, required = false,
                                 default = nil)
  if valid_612137 != nil:
    section.add "X-Amz-SignedHeaders", valid_612137
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612138: Call_PostDeleteAccountPasswordPolicy_612126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_612138.validator(path, query, header, formData, body)
  let scheme = call_612138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612138.url(scheme.get, call_612138.host, call_612138.base,
                         call_612138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612138, url, valid)

proc call*(call_612139: Call_PostDeleteAccountPasswordPolicy_612126;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612140 = newJObject()
  add(query_612140, "Action", newJString(Action))
  add(query_612140, "Version", newJString(Version))
  result = call_612139.call(nil, query_612140, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_612126(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_612127, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_612128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_612111 = ref object of OpenApiRestCall_610658
proc url_GetDeleteAccountPasswordPolicy_612113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_612112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612114 = query.getOrDefault("Action")
  valid_612114 = validateParameter(valid_612114, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_612114 != nil:
    section.add "Action", valid_612114
  var valid_612115 = query.getOrDefault("Version")
  valid_612115 = validateParameter(valid_612115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612115 != nil:
    section.add "Version", valid_612115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612116 = header.getOrDefault("X-Amz-Signature")
  valid_612116 = validateParameter(valid_612116, JString, required = false,
                                 default = nil)
  if valid_612116 != nil:
    section.add "X-Amz-Signature", valid_612116
  var valid_612117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612117 = validateParameter(valid_612117, JString, required = false,
                                 default = nil)
  if valid_612117 != nil:
    section.add "X-Amz-Content-Sha256", valid_612117
  var valid_612118 = header.getOrDefault("X-Amz-Date")
  valid_612118 = validateParameter(valid_612118, JString, required = false,
                                 default = nil)
  if valid_612118 != nil:
    section.add "X-Amz-Date", valid_612118
  var valid_612119 = header.getOrDefault("X-Amz-Credential")
  valid_612119 = validateParameter(valid_612119, JString, required = false,
                                 default = nil)
  if valid_612119 != nil:
    section.add "X-Amz-Credential", valid_612119
  var valid_612120 = header.getOrDefault("X-Amz-Security-Token")
  valid_612120 = validateParameter(valid_612120, JString, required = false,
                                 default = nil)
  if valid_612120 != nil:
    section.add "X-Amz-Security-Token", valid_612120
  var valid_612121 = header.getOrDefault("X-Amz-Algorithm")
  valid_612121 = validateParameter(valid_612121, JString, required = false,
                                 default = nil)
  if valid_612121 != nil:
    section.add "X-Amz-Algorithm", valid_612121
  var valid_612122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612122 = validateParameter(valid_612122, JString, required = false,
                                 default = nil)
  if valid_612122 != nil:
    section.add "X-Amz-SignedHeaders", valid_612122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612123: Call_GetDeleteAccountPasswordPolicy_612111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_612123.validator(path, query, header, formData, body)
  let scheme = call_612123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612123.url(scheme.get, call_612123.host, call_612123.base,
                         call_612123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612123, url, valid)

proc call*(call_612124: Call_GetDeleteAccountPasswordPolicy_612111;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612125 = newJObject()
  add(query_612125, "Action", newJString(Action))
  add(query_612125, "Version", newJString(Version))
  result = call_612124.call(nil, query_612125, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_612111(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_612112, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_612113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_612157 = ref object of OpenApiRestCall_610658
proc url_PostDeleteGroup_612159(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroup_612158(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612160 = query.getOrDefault("Action")
  valid_612160 = validateParameter(valid_612160, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_612160 != nil:
    section.add "Action", valid_612160
  var valid_612161 = query.getOrDefault("Version")
  valid_612161 = validateParameter(valid_612161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612161 != nil:
    section.add "Version", valid_612161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612162 = header.getOrDefault("X-Amz-Signature")
  valid_612162 = validateParameter(valid_612162, JString, required = false,
                                 default = nil)
  if valid_612162 != nil:
    section.add "X-Amz-Signature", valid_612162
  var valid_612163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612163 = validateParameter(valid_612163, JString, required = false,
                                 default = nil)
  if valid_612163 != nil:
    section.add "X-Amz-Content-Sha256", valid_612163
  var valid_612164 = header.getOrDefault("X-Amz-Date")
  valid_612164 = validateParameter(valid_612164, JString, required = false,
                                 default = nil)
  if valid_612164 != nil:
    section.add "X-Amz-Date", valid_612164
  var valid_612165 = header.getOrDefault("X-Amz-Credential")
  valid_612165 = validateParameter(valid_612165, JString, required = false,
                                 default = nil)
  if valid_612165 != nil:
    section.add "X-Amz-Credential", valid_612165
  var valid_612166 = header.getOrDefault("X-Amz-Security-Token")
  valid_612166 = validateParameter(valid_612166, JString, required = false,
                                 default = nil)
  if valid_612166 != nil:
    section.add "X-Amz-Security-Token", valid_612166
  var valid_612167 = header.getOrDefault("X-Amz-Algorithm")
  valid_612167 = validateParameter(valid_612167, JString, required = false,
                                 default = nil)
  if valid_612167 != nil:
    section.add "X-Amz-Algorithm", valid_612167
  var valid_612168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612168 = validateParameter(valid_612168, JString, required = false,
                                 default = nil)
  if valid_612168 != nil:
    section.add "X-Amz-SignedHeaders", valid_612168
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612169 = formData.getOrDefault("GroupName")
  valid_612169 = validateParameter(valid_612169, JString, required = true,
                                 default = nil)
  if valid_612169 != nil:
    section.add "GroupName", valid_612169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612170: Call_PostDeleteGroup_612157; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_612170.validator(path, query, header, formData, body)
  let scheme = call_612170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612170.url(scheme.get, call_612170.host, call_612170.base,
                         call_612170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612170, url, valid)

proc call*(call_612171: Call_PostDeleteGroup_612157; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612172 = newJObject()
  var formData_612173 = newJObject()
  add(formData_612173, "GroupName", newJString(GroupName))
  add(query_612172, "Action", newJString(Action))
  add(query_612172, "Version", newJString(Version))
  result = call_612171.call(nil, query_612172, nil, formData_612173, nil)

var postDeleteGroup* = Call_PostDeleteGroup_612157(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_612158,
    base: "/", url: url_PostDeleteGroup_612159, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_612141 = ref object of OpenApiRestCall_610658
proc url_GetDeleteGroup_612143(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroup_612142(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612144 = query.getOrDefault("GroupName")
  valid_612144 = validateParameter(valid_612144, JString, required = true,
                                 default = nil)
  if valid_612144 != nil:
    section.add "GroupName", valid_612144
  var valid_612145 = query.getOrDefault("Action")
  valid_612145 = validateParameter(valid_612145, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_612145 != nil:
    section.add "Action", valid_612145
  var valid_612146 = query.getOrDefault("Version")
  valid_612146 = validateParameter(valid_612146, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612146 != nil:
    section.add "Version", valid_612146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612147 = header.getOrDefault("X-Amz-Signature")
  valid_612147 = validateParameter(valid_612147, JString, required = false,
                                 default = nil)
  if valid_612147 != nil:
    section.add "X-Amz-Signature", valid_612147
  var valid_612148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612148 = validateParameter(valid_612148, JString, required = false,
                                 default = nil)
  if valid_612148 != nil:
    section.add "X-Amz-Content-Sha256", valid_612148
  var valid_612149 = header.getOrDefault("X-Amz-Date")
  valid_612149 = validateParameter(valid_612149, JString, required = false,
                                 default = nil)
  if valid_612149 != nil:
    section.add "X-Amz-Date", valid_612149
  var valid_612150 = header.getOrDefault("X-Amz-Credential")
  valid_612150 = validateParameter(valid_612150, JString, required = false,
                                 default = nil)
  if valid_612150 != nil:
    section.add "X-Amz-Credential", valid_612150
  var valid_612151 = header.getOrDefault("X-Amz-Security-Token")
  valid_612151 = validateParameter(valid_612151, JString, required = false,
                                 default = nil)
  if valid_612151 != nil:
    section.add "X-Amz-Security-Token", valid_612151
  var valid_612152 = header.getOrDefault("X-Amz-Algorithm")
  valid_612152 = validateParameter(valid_612152, JString, required = false,
                                 default = nil)
  if valid_612152 != nil:
    section.add "X-Amz-Algorithm", valid_612152
  var valid_612153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612153 = validateParameter(valid_612153, JString, required = false,
                                 default = nil)
  if valid_612153 != nil:
    section.add "X-Amz-SignedHeaders", valid_612153
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612154: Call_GetDeleteGroup_612141; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_612154.validator(path, query, header, formData, body)
  let scheme = call_612154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612154.url(scheme.get, call_612154.host, call_612154.base,
                         call_612154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612154, url, valid)

proc call*(call_612155: Call_GetDeleteGroup_612141; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612156 = newJObject()
  add(query_612156, "GroupName", newJString(GroupName))
  add(query_612156, "Action", newJString(Action))
  add(query_612156, "Version", newJString(Version))
  result = call_612155.call(nil, query_612156, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_612141(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_612142,
    base: "/", url: url_GetDeleteGroup_612143, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_612191 = ref object of OpenApiRestCall_610658
proc url_PostDeleteGroupPolicy_612193(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroupPolicy_612192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612194 = query.getOrDefault("Action")
  valid_612194 = validateParameter(valid_612194, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_612194 != nil:
    section.add "Action", valid_612194
  var valid_612195 = query.getOrDefault("Version")
  valid_612195 = validateParameter(valid_612195, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612195 != nil:
    section.add "Version", valid_612195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612196 = header.getOrDefault("X-Amz-Signature")
  valid_612196 = validateParameter(valid_612196, JString, required = false,
                                 default = nil)
  if valid_612196 != nil:
    section.add "X-Amz-Signature", valid_612196
  var valid_612197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612197 = validateParameter(valid_612197, JString, required = false,
                                 default = nil)
  if valid_612197 != nil:
    section.add "X-Amz-Content-Sha256", valid_612197
  var valid_612198 = header.getOrDefault("X-Amz-Date")
  valid_612198 = validateParameter(valid_612198, JString, required = false,
                                 default = nil)
  if valid_612198 != nil:
    section.add "X-Amz-Date", valid_612198
  var valid_612199 = header.getOrDefault("X-Amz-Credential")
  valid_612199 = validateParameter(valid_612199, JString, required = false,
                                 default = nil)
  if valid_612199 != nil:
    section.add "X-Amz-Credential", valid_612199
  var valid_612200 = header.getOrDefault("X-Amz-Security-Token")
  valid_612200 = validateParameter(valid_612200, JString, required = false,
                                 default = nil)
  if valid_612200 != nil:
    section.add "X-Amz-Security-Token", valid_612200
  var valid_612201 = header.getOrDefault("X-Amz-Algorithm")
  valid_612201 = validateParameter(valid_612201, JString, required = false,
                                 default = nil)
  if valid_612201 != nil:
    section.add "X-Amz-Algorithm", valid_612201
  var valid_612202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612202 = validateParameter(valid_612202, JString, required = false,
                                 default = nil)
  if valid_612202 != nil:
    section.add "X-Amz-SignedHeaders", valid_612202
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612203 = formData.getOrDefault("GroupName")
  valid_612203 = validateParameter(valid_612203, JString, required = true,
                                 default = nil)
  if valid_612203 != nil:
    section.add "GroupName", valid_612203
  var valid_612204 = formData.getOrDefault("PolicyName")
  valid_612204 = validateParameter(valid_612204, JString, required = true,
                                 default = nil)
  if valid_612204 != nil:
    section.add "PolicyName", valid_612204
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612205: Call_PostDeleteGroupPolicy_612191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612205.validator(path, query, header, formData, body)
  let scheme = call_612205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612205.url(scheme.get, call_612205.host, call_612205.base,
                         call_612205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612205, url, valid)

proc call*(call_612206: Call_PostDeleteGroupPolicy_612191; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612207 = newJObject()
  var formData_612208 = newJObject()
  add(formData_612208, "GroupName", newJString(GroupName))
  add(query_612207, "Action", newJString(Action))
  add(query_612207, "Version", newJString(Version))
  add(formData_612208, "PolicyName", newJString(PolicyName))
  result = call_612206.call(nil, query_612207, nil, formData_612208, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_612191(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_612192, base: "/",
    url: url_PostDeleteGroupPolicy_612193, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_612174 = ref object of OpenApiRestCall_610658
proc url_GetDeleteGroupPolicy_612176(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroupPolicy_612175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612177 = query.getOrDefault("GroupName")
  valid_612177 = validateParameter(valid_612177, JString, required = true,
                                 default = nil)
  if valid_612177 != nil:
    section.add "GroupName", valid_612177
  var valid_612178 = query.getOrDefault("PolicyName")
  valid_612178 = validateParameter(valid_612178, JString, required = true,
                                 default = nil)
  if valid_612178 != nil:
    section.add "PolicyName", valid_612178
  var valid_612179 = query.getOrDefault("Action")
  valid_612179 = validateParameter(valid_612179, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_612179 != nil:
    section.add "Action", valid_612179
  var valid_612180 = query.getOrDefault("Version")
  valid_612180 = validateParameter(valid_612180, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612180 != nil:
    section.add "Version", valid_612180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612181 = header.getOrDefault("X-Amz-Signature")
  valid_612181 = validateParameter(valid_612181, JString, required = false,
                                 default = nil)
  if valid_612181 != nil:
    section.add "X-Amz-Signature", valid_612181
  var valid_612182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612182 = validateParameter(valid_612182, JString, required = false,
                                 default = nil)
  if valid_612182 != nil:
    section.add "X-Amz-Content-Sha256", valid_612182
  var valid_612183 = header.getOrDefault("X-Amz-Date")
  valid_612183 = validateParameter(valid_612183, JString, required = false,
                                 default = nil)
  if valid_612183 != nil:
    section.add "X-Amz-Date", valid_612183
  var valid_612184 = header.getOrDefault("X-Amz-Credential")
  valid_612184 = validateParameter(valid_612184, JString, required = false,
                                 default = nil)
  if valid_612184 != nil:
    section.add "X-Amz-Credential", valid_612184
  var valid_612185 = header.getOrDefault("X-Amz-Security-Token")
  valid_612185 = validateParameter(valid_612185, JString, required = false,
                                 default = nil)
  if valid_612185 != nil:
    section.add "X-Amz-Security-Token", valid_612185
  var valid_612186 = header.getOrDefault("X-Amz-Algorithm")
  valid_612186 = validateParameter(valid_612186, JString, required = false,
                                 default = nil)
  if valid_612186 != nil:
    section.add "X-Amz-Algorithm", valid_612186
  var valid_612187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612187 = validateParameter(valid_612187, JString, required = false,
                                 default = nil)
  if valid_612187 != nil:
    section.add "X-Amz-SignedHeaders", valid_612187
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612188: Call_GetDeleteGroupPolicy_612174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612188.validator(path, query, header, formData, body)
  let scheme = call_612188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612188.url(scheme.get, call_612188.host, call_612188.base,
                         call_612188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612188, url, valid)

proc call*(call_612189: Call_GetDeleteGroupPolicy_612174; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612190 = newJObject()
  add(query_612190, "GroupName", newJString(GroupName))
  add(query_612190, "PolicyName", newJString(PolicyName))
  add(query_612190, "Action", newJString(Action))
  add(query_612190, "Version", newJString(Version))
  result = call_612189.call(nil, query_612190, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_612174(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_612175, base: "/",
    url: url_GetDeleteGroupPolicy_612176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_612225 = ref object of OpenApiRestCall_610658
proc url_PostDeleteInstanceProfile_612227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstanceProfile_612226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612228 = query.getOrDefault("Action")
  valid_612228 = validateParameter(valid_612228, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_612228 != nil:
    section.add "Action", valid_612228
  var valid_612229 = query.getOrDefault("Version")
  valid_612229 = validateParameter(valid_612229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612229 != nil:
    section.add "Version", valid_612229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612230 = header.getOrDefault("X-Amz-Signature")
  valid_612230 = validateParameter(valid_612230, JString, required = false,
                                 default = nil)
  if valid_612230 != nil:
    section.add "X-Amz-Signature", valid_612230
  var valid_612231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612231 = validateParameter(valid_612231, JString, required = false,
                                 default = nil)
  if valid_612231 != nil:
    section.add "X-Amz-Content-Sha256", valid_612231
  var valid_612232 = header.getOrDefault("X-Amz-Date")
  valid_612232 = validateParameter(valid_612232, JString, required = false,
                                 default = nil)
  if valid_612232 != nil:
    section.add "X-Amz-Date", valid_612232
  var valid_612233 = header.getOrDefault("X-Amz-Credential")
  valid_612233 = validateParameter(valid_612233, JString, required = false,
                                 default = nil)
  if valid_612233 != nil:
    section.add "X-Amz-Credential", valid_612233
  var valid_612234 = header.getOrDefault("X-Amz-Security-Token")
  valid_612234 = validateParameter(valid_612234, JString, required = false,
                                 default = nil)
  if valid_612234 != nil:
    section.add "X-Amz-Security-Token", valid_612234
  var valid_612235 = header.getOrDefault("X-Amz-Algorithm")
  valid_612235 = validateParameter(valid_612235, JString, required = false,
                                 default = nil)
  if valid_612235 != nil:
    section.add "X-Amz-Algorithm", valid_612235
  var valid_612236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612236 = validateParameter(valid_612236, JString, required = false,
                                 default = nil)
  if valid_612236 != nil:
    section.add "X-Amz-SignedHeaders", valid_612236
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_612237 = formData.getOrDefault("InstanceProfileName")
  valid_612237 = validateParameter(valid_612237, JString, required = true,
                                 default = nil)
  if valid_612237 != nil:
    section.add "InstanceProfileName", valid_612237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612238: Call_PostDeleteInstanceProfile_612225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_612238.validator(path, query, header, formData, body)
  let scheme = call_612238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612238.url(scheme.get, call_612238.host, call_612238.base,
                         call_612238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612238, url, valid)

proc call*(call_612239: Call_PostDeleteInstanceProfile_612225;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_612240 = newJObject()
  var formData_612241 = newJObject()
  add(query_612240, "Action", newJString(Action))
  add(formData_612241, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_612240, "Version", newJString(Version))
  result = call_612239.call(nil, query_612240, nil, formData_612241, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_612225(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_612226, base: "/",
    url: url_PostDeleteInstanceProfile_612227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_612209 = ref object of OpenApiRestCall_610658
proc url_GetDeleteInstanceProfile_612211(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstanceProfile_612210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612212 = query.getOrDefault("Action")
  valid_612212 = validateParameter(valid_612212, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_612212 != nil:
    section.add "Action", valid_612212
  var valid_612213 = query.getOrDefault("InstanceProfileName")
  valid_612213 = validateParameter(valid_612213, JString, required = true,
                                 default = nil)
  if valid_612213 != nil:
    section.add "InstanceProfileName", valid_612213
  var valid_612214 = query.getOrDefault("Version")
  valid_612214 = validateParameter(valid_612214, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612214 != nil:
    section.add "Version", valid_612214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612215 = header.getOrDefault("X-Amz-Signature")
  valid_612215 = validateParameter(valid_612215, JString, required = false,
                                 default = nil)
  if valid_612215 != nil:
    section.add "X-Amz-Signature", valid_612215
  var valid_612216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612216 = validateParameter(valid_612216, JString, required = false,
                                 default = nil)
  if valid_612216 != nil:
    section.add "X-Amz-Content-Sha256", valid_612216
  var valid_612217 = header.getOrDefault("X-Amz-Date")
  valid_612217 = validateParameter(valid_612217, JString, required = false,
                                 default = nil)
  if valid_612217 != nil:
    section.add "X-Amz-Date", valid_612217
  var valid_612218 = header.getOrDefault("X-Amz-Credential")
  valid_612218 = validateParameter(valid_612218, JString, required = false,
                                 default = nil)
  if valid_612218 != nil:
    section.add "X-Amz-Credential", valid_612218
  var valid_612219 = header.getOrDefault("X-Amz-Security-Token")
  valid_612219 = validateParameter(valid_612219, JString, required = false,
                                 default = nil)
  if valid_612219 != nil:
    section.add "X-Amz-Security-Token", valid_612219
  var valid_612220 = header.getOrDefault("X-Amz-Algorithm")
  valid_612220 = validateParameter(valid_612220, JString, required = false,
                                 default = nil)
  if valid_612220 != nil:
    section.add "X-Amz-Algorithm", valid_612220
  var valid_612221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612221 = validateParameter(valid_612221, JString, required = false,
                                 default = nil)
  if valid_612221 != nil:
    section.add "X-Amz-SignedHeaders", valid_612221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612222: Call_GetDeleteInstanceProfile_612209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_612222.validator(path, query, header, formData, body)
  let scheme = call_612222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612222.url(scheme.get, call_612222.host, call_612222.base,
                         call_612222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612222, url, valid)

proc call*(call_612223: Call_GetDeleteInstanceProfile_612209;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_612224 = newJObject()
  add(query_612224, "Action", newJString(Action))
  add(query_612224, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_612224, "Version", newJString(Version))
  result = call_612223.call(nil, query_612224, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_612209(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_612210, base: "/",
    url: url_GetDeleteInstanceProfile_612211, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_612258 = ref object of OpenApiRestCall_610658
proc url_PostDeleteLoginProfile_612260(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLoginProfile_612259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612261 = query.getOrDefault("Action")
  valid_612261 = validateParameter(valid_612261, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_612261 != nil:
    section.add "Action", valid_612261
  var valid_612262 = query.getOrDefault("Version")
  valid_612262 = validateParameter(valid_612262, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612262 != nil:
    section.add "Version", valid_612262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612263 = header.getOrDefault("X-Amz-Signature")
  valid_612263 = validateParameter(valid_612263, JString, required = false,
                                 default = nil)
  if valid_612263 != nil:
    section.add "X-Amz-Signature", valid_612263
  var valid_612264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612264 = validateParameter(valid_612264, JString, required = false,
                                 default = nil)
  if valid_612264 != nil:
    section.add "X-Amz-Content-Sha256", valid_612264
  var valid_612265 = header.getOrDefault("X-Amz-Date")
  valid_612265 = validateParameter(valid_612265, JString, required = false,
                                 default = nil)
  if valid_612265 != nil:
    section.add "X-Amz-Date", valid_612265
  var valid_612266 = header.getOrDefault("X-Amz-Credential")
  valid_612266 = validateParameter(valid_612266, JString, required = false,
                                 default = nil)
  if valid_612266 != nil:
    section.add "X-Amz-Credential", valid_612266
  var valid_612267 = header.getOrDefault("X-Amz-Security-Token")
  valid_612267 = validateParameter(valid_612267, JString, required = false,
                                 default = nil)
  if valid_612267 != nil:
    section.add "X-Amz-Security-Token", valid_612267
  var valid_612268 = header.getOrDefault("X-Amz-Algorithm")
  valid_612268 = validateParameter(valid_612268, JString, required = false,
                                 default = nil)
  if valid_612268 != nil:
    section.add "X-Amz-Algorithm", valid_612268
  var valid_612269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612269 = validateParameter(valid_612269, JString, required = false,
                                 default = nil)
  if valid_612269 != nil:
    section.add "X-Amz-SignedHeaders", valid_612269
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612270 = formData.getOrDefault("UserName")
  valid_612270 = validateParameter(valid_612270, JString, required = true,
                                 default = nil)
  if valid_612270 != nil:
    section.add "UserName", valid_612270
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612271: Call_PostDeleteLoginProfile_612258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_612271.validator(path, query, header, formData, body)
  let scheme = call_612271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612271.url(scheme.get, call_612271.host, call_612271.base,
                         call_612271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612271, url, valid)

proc call*(call_612272: Call_PostDeleteLoginProfile_612258; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612273 = newJObject()
  var formData_612274 = newJObject()
  add(formData_612274, "UserName", newJString(UserName))
  add(query_612273, "Action", newJString(Action))
  add(query_612273, "Version", newJString(Version))
  result = call_612272.call(nil, query_612273, nil, formData_612274, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_612258(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_612259, base: "/",
    url: url_PostDeleteLoginProfile_612260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_612242 = ref object of OpenApiRestCall_610658
proc url_GetDeleteLoginProfile_612244(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLoginProfile_612243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612245 = query.getOrDefault("UserName")
  valid_612245 = validateParameter(valid_612245, JString, required = true,
                                 default = nil)
  if valid_612245 != nil:
    section.add "UserName", valid_612245
  var valid_612246 = query.getOrDefault("Action")
  valid_612246 = validateParameter(valid_612246, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_612246 != nil:
    section.add "Action", valid_612246
  var valid_612247 = query.getOrDefault("Version")
  valid_612247 = validateParameter(valid_612247, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612247 != nil:
    section.add "Version", valid_612247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612248 = header.getOrDefault("X-Amz-Signature")
  valid_612248 = validateParameter(valid_612248, JString, required = false,
                                 default = nil)
  if valid_612248 != nil:
    section.add "X-Amz-Signature", valid_612248
  var valid_612249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612249 = validateParameter(valid_612249, JString, required = false,
                                 default = nil)
  if valid_612249 != nil:
    section.add "X-Amz-Content-Sha256", valid_612249
  var valid_612250 = header.getOrDefault("X-Amz-Date")
  valid_612250 = validateParameter(valid_612250, JString, required = false,
                                 default = nil)
  if valid_612250 != nil:
    section.add "X-Amz-Date", valid_612250
  var valid_612251 = header.getOrDefault("X-Amz-Credential")
  valid_612251 = validateParameter(valid_612251, JString, required = false,
                                 default = nil)
  if valid_612251 != nil:
    section.add "X-Amz-Credential", valid_612251
  var valid_612252 = header.getOrDefault("X-Amz-Security-Token")
  valid_612252 = validateParameter(valid_612252, JString, required = false,
                                 default = nil)
  if valid_612252 != nil:
    section.add "X-Amz-Security-Token", valid_612252
  var valid_612253 = header.getOrDefault("X-Amz-Algorithm")
  valid_612253 = validateParameter(valid_612253, JString, required = false,
                                 default = nil)
  if valid_612253 != nil:
    section.add "X-Amz-Algorithm", valid_612253
  var valid_612254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612254 = validateParameter(valid_612254, JString, required = false,
                                 default = nil)
  if valid_612254 != nil:
    section.add "X-Amz-SignedHeaders", valid_612254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612255: Call_GetDeleteLoginProfile_612242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_612255.validator(path, query, header, formData, body)
  let scheme = call_612255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612255.url(scheme.get, call_612255.host, call_612255.base,
                         call_612255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612255, url, valid)

proc call*(call_612256: Call_GetDeleteLoginProfile_612242; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612257 = newJObject()
  add(query_612257, "UserName", newJString(UserName))
  add(query_612257, "Action", newJString(Action))
  add(query_612257, "Version", newJString(Version))
  result = call_612256.call(nil, query_612257, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_612242(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_612243, base: "/",
    url: url_GetDeleteLoginProfile_612244, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_612291 = ref object of OpenApiRestCall_610658
proc url_PostDeleteOpenIDConnectProvider_612293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_612292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612294 = query.getOrDefault("Action")
  valid_612294 = validateParameter(valid_612294, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_612294 != nil:
    section.add "Action", valid_612294
  var valid_612295 = query.getOrDefault("Version")
  valid_612295 = validateParameter(valid_612295, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612295 != nil:
    section.add "Version", valid_612295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612296 = header.getOrDefault("X-Amz-Signature")
  valid_612296 = validateParameter(valid_612296, JString, required = false,
                                 default = nil)
  if valid_612296 != nil:
    section.add "X-Amz-Signature", valid_612296
  var valid_612297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612297 = validateParameter(valid_612297, JString, required = false,
                                 default = nil)
  if valid_612297 != nil:
    section.add "X-Amz-Content-Sha256", valid_612297
  var valid_612298 = header.getOrDefault("X-Amz-Date")
  valid_612298 = validateParameter(valid_612298, JString, required = false,
                                 default = nil)
  if valid_612298 != nil:
    section.add "X-Amz-Date", valid_612298
  var valid_612299 = header.getOrDefault("X-Amz-Credential")
  valid_612299 = validateParameter(valid_612299, JString, required = false,
                                 default = nil)
  if valid_612299 != nil:
    section.add "X-Amz-Credential", valid_612299
  var valid_612300 = header.getOrDefault("X-Amz-Security-Token")
  valid_612300 = validateParameter(valid_612300, JString, required = false,
                                 default = nil)
  if valid_612300 != nil:
    section.add "X-Amz-Security-Token", valid_612300
  var valid_612301 = header.getOrDefault("X-Amz-Algorithm")
  valid_612301 = validateParameter(valid_612301, JString, required = false,
                                 default = nil)
  if valid_612301 != nil:
    section.add "X-Amz-Algorithm", valid_612301
  var valid_612302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612302 = validateParameter(valid_612302, JString, required = false,
                                 default = nil)
  if valid_612302 != nil:
    section.add "X-Amz-SignedHeaders", valid_612302
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_612303 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_612303 = validateParameter(valid_612303, JString, required = true,
                                 default = nil)
  if valid_612303 != nil:
    section.add "OpenIDConnectProviderArn", valid_612303
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612304: Call_PostDeleteOpenIDConnectProvider_612291;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_612304.validator(path, query, header, formData, body)
  let scheme = call_612304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612304.url(scheme.get, call_612304.host, call_612304.base,
                         call_612304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612304, url, valid)

proc call*(call_612305: Call_PostDeleteOpenIDConnectProvider_612291;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_612306 = newJObject()
  var formData_612307 = newJObject()
  add(query_612306, "Action", newJString(Action))
  add(query_612306, "Version", newJString(Version))
  add(formData_612307, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_612305.call(nil, query_612306, nil, formData_612307, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_612291(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_612292, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_612293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_612275 = ref object of OpenApiRestCall_610658
proc url_GetDeleteOpenIDConnectProvider_612277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_612276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_612278 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_612278 = validateParameter(valid_612278, JString, required = true,
                                 default = nil)
  if valid_612278 != nil:
    section.add "OpenIDConnectProviderArn", valid_612278
  var valid_612279 = query.getOrDefault("Action")
  valid_612279 = validateParameter(valid_612279, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_612279 != nil:
    section.add "Action", valid_612279
  var valid_612280 = query.getOrDefault("Version")
  valid_612280 = validateParameter(valid_612280, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612280 != nil:
    section.add "Version", valid_612280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612281 = header.getOrDefault("X-Amz-Signature")
  valid_612281 = validateParameter(valid_612281, JString, required = false,
                                 default = nil)
  if valid_612281 != nil:
    section.add "X-Amz-Signature", valid_612281
  var valid_612282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612282 = validateParameter(valid_612282, JString, required = false,
                                 default = nil)
  if valid_612282 != nil:
    section.add "X-Amz-Content-Sha256", valid_612282
  var valid_612283 = header.getOrDefault("X-Amz-Date")
  valid_612283 = validateParameter(valid_612283, JString, required = false,
                                 default = nil)
  if valid_612283 != nil:
    section.add "X-Amz-Date", valid_612283
  var valid_612284 = header.getOrDefault("X-Amz-Credential")
  valid_612284 = validateParameter(valid_612284, JString, required = false,
                                 default = nil)
  if valid_612284 != nil:
    section.add "X-Amz-Credential", valid_612284
  var valid_612285 = header.getOrDefault("X-Amz-Security-Token")
  valid_612285 = validateParameter(valid_612285, JString, required = false,
                                 default = nil)
  if valid_612285 != nil:
    section.add "X-Amz-Security-Token", valid_612285
  var valid_612286 = header.getOrDefault("X-Amz-Algorithm")
  valid_612286 = validateParameter(valid_612286, JString, required = false,
                                 default = nil)
  if valid_612286 != nil:
    section.add "X-Amz-Algorithm", valid_612286
  var valid_612287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612287 = validateParameter(valid_612287, JString, required = false,
                                 default = nil)
  if valid_612287 != nil:
    section.add "X-Amz-SignedHeaders", valid_612287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612288: Call_GetDeleteOpenIDConnectProvider_612275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_612288.validator(path, query, header, formData, body)
  let scheme = call_612288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612288.url(scheme.get, call_612288.host, call_612288.base,
                         call_612288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612288, url, valid)

proc call*(call_612289: Call_GetDeleteOpenIDConnectProvider_612275;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612290 = newJObject()
  add(query_612290, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_612290, "Action", newJString(Action))
  add(query_612290, "Version", newJString(Version))
  result = call_612289.call(nil, query_612290, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_612275(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_612276, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_612277,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_612324 = ref object of OpenApiRestCall_610658
proc url_PostDeletePolicy_612326(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_612325(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612327 = query.getOrDefault("Action")
  valid_612327 = validateParameter(valid_612327, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_612327 != nil:
    section.add "Action", valid_612327
  var valid_612328 = query.getOrDefault("Version")
  valid_612328 = validateParameter(valid_612328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612328 != nil:
    section.add "Version", valid_612328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612329 = header.getOrDefault("X-Amz-Signature")
  valid_612329 = validateParameter(valid_612329, JString, required = false,
                                 default = nil)
  if valid_612329 != nil:
    section.add "X-Amz-Signature", valid_612329
  var valid_612330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612330 = validateParameter(valid_612330, JString, required = false,
                                 default = nil)
  if valid_612330 != nil:
    section.add "X-Amz-Content-Sha256", valid_612330
  var valid_612331 = header.getOrDefault("X-Amz-Date")
  valid_612331 = validateParameter(valid_612331, JString, required = false,
                                 default = nil)
  if valid_612331 != nil:
    section.add "X-Amz-Date", valid_612331
  var valid_612332 = header.getOrDefault("X-Amz-Credential")
  valid_612332 = validateParameter(valid_612332, JString, required = false,
                                 default = nil)
  if valid_612332 != nil:
    section.add "X-Amz-Credential", valid_612332
  var valid_612333 = header.getOrDefault("X-Amz-Security-Token")
  valid_612333 = validateParameter(valid_612333, JString, required = false,
                                 default = nil)
  if valid_612333 != nil:
    section.add "X-Amz-Security-Token", valid_612333
  var valid_612334 = header.getOrDefault("X-Amz-Algorithm")
  valid_612334 = validateParameter(valid_612334, JString, required = false,
                                 default = nil)
  if valid_612334 != nil:
    section.add "X-Amz-Algorithm", valid_612334
  var valid_612335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612335 = validateParameter(valid_612335, JString, required = false,
                                 default = nil)
  if valid_612335 != nil:
    section.add "X-Amz-SignedHeaders", valid_612335
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_612336 = formData.getOrDefault("PolicyArn")
  valid_612336 = validateParameter(valid_612336, JString, required = true,
                                 default = nil)
  if valid_612336 != nil:
    section.add "PolicyArn", valid_612336
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612337: Call_PostDeletePolicy_612324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612337.validator(path, query, header, formData, body)
  let scheme = call_612337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612337.url(scheme.get, call_612337.host, call_612337.base,
                         call_612337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612337, url, valid)

proc call*(call_612338: Call_PostDeletePolicy_612324; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612339 = newJObject()
  var formData_612340 = newJObject()
  add(formData_612340, "PolicyArn", newJString(PolicyArn))
  add(query_612339, "Action", newJString(Action))
  add(query_612339, "Version", newJString(Version))
  result = call_612338.call(nil, query_612339, nil, formData_612340, nil)

var postDeletePolicy* = Call_PostDeletePolicy_612324(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_612325,
    base: "/", url: url_PostDeletePolicy_612326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_612308 = ref object of OpenApiRestCall_610658
proc url_GetDeletePolicy_612310(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_612309(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_612311 = query.getOrDefault("PolicyArn")
  valid_612311 = validateParameter(valid_612311, JString, required = true,
                                 default = nil)
  if valid_612311 != nil:
    section.add "PolicyArn", valid_612311
  var valid_612312 = query.getOrDefault("Action")
  valid_612312 = validateParameter(valid_612312, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_612312 != nil:
    section.add "Action", valid_612312
  var valid_612313 = query.getOrDefault("Version")
  valid_612313 = validateParameter(valid_612313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612313 != nil:
    section.add "Version", valid_612313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612314 = header.getOrDefault("X-Amz-Signature")
  valid_612314 = validateParameter(valid_612314, JString, required = false,
                                 default = nil)
  if valid_612314 != nil:
    section.add "X-Amz-Signature", valid_612314
  var valid_612315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612315 = validateParameter(valid_612315, JString, required = false,
                                 default = nil)
  if valid_612315 != nil:
    section.add "X-Amz-Content-Sha256", valid_612315
  var valid_612316 = header.getOrDefault("X-Amz-Date")
  valid_612316 = validateParameter(valid_612316, JString, required = false,
                                 default = nil)
  if valid_612316 != nil:
    section.add "X-Amz-Date", valid_612316
  var valid_612317 = header.getOrDefault("X-Amz-Credential")
  valid_612317 = validateParameter(valid_612317, JString, required = false,
                                 default = nil)
  if valid_612317 != nil:
    section.add "X-Amz-Credential", valid_612317
  var valid_612318 = header.getOrDefault("X-Amz-Security-Token")
  valid_612318 = validateParameter(valid_612318, JString, required = false,
                                 default = nil)
  if valid_612318 != nil:
    section.add "X-Amz-Security-Token", valid_612318
  var valid_612319 = header.getOrDefault("X-Amz-Algorithm")
  valid_612319 = validateParameter(valid_612319, JString, required = false,
                                 default = nil)
  if valid_612319 != nil:
    section.add "X-Amz-Algorithm", valid_612319
  var valid_612320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612320 = validateParameter(valid_612320, JString, required = false,
                                 default = nil)
  if valid_612320 != nil:
    section.add "X-Amz-SignedHeaders", valid_612320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612321: Call_GetDeletePolicy_612308; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612321.validator(path, query, header, formData, body)
  let scheme = call_612321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612321.url(scheme.get, call_612321.host, call_612321.base,
                         call_612321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612321, url, valid)

proc call*(call_612322: Call_GetDeletePolicy_612308; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612323 = newJObject()
  add(query_612323, "PolicyArn", newJString(PolicyArn))
  add(query_612323, "Action", newJString(Action))
  add(query_612323, "Version", newJString(Version))
  result = call_612322.call(nil, query_612323, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_612308(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_612309,
    base: "/", url: url_GetDeletePolicy_612310, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_612358 = ref object of OpenApiRestCall_610658
proc url_PostDeletePolicyVersion_612360(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicyVersion_612359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612361 = query.getOrDefault("Action")
  valid_612361 = validateParameter(valid_612361, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_612361 != nil:
    section.add "Action", valid_612361
  var valid_612362 = query.getOrDefault("Version")
  valid_612362 = validateParameter(valid_612362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612362 != nil:
    section.add "Version", valid_612362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612363 = header.getOrDefault("X-Amz-Signature")
  valid_612363 = validateParameter(valid_612363, JString, required = false,
                                 default = nil)
  if valid_612363 != nil:
    section.add "X-Amz-Signature", valid_612363
  var valid_612364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612364 = validateParameter(valid_612364, JString, required = false,
                                 default = nil)
  if valid_612364 != nil:
    section.add "X-Amz-Content-Sha256", valid_612364
  var valid_612365 = header.getOrDefault("X-Amz-Date")
  valid_612365 = validateParameter(valid_612365, JString, required = false,
                                 default = nil)
  if valid_612365 != nil:
    section.add "X-Amz-Date", valid_612365
  var valid_612366 = header.getOrDefault("X-Amz-Credential")
  valid_612366 = validateParameter(valid_612366, JString, required = false,
                                 default = nil)
  if valid_612366 != nil:
    section.add "X-Amz-Credential", valid_612366
  var valid_612367 = header.getOrDefault("X-Amz-Security-Token")
  valid_612367 = validateParameter(valid_612367, JString, required = false,
                                 default = nil)
  if valid_612367 != nil:
    section.add "X-Amz-Security-Token", valid_612367
  var valid_612368 = header.getOrDefault("X-Amz-Algorithm")
  valid_612368 = validateParameter(valid_612368, JString, required = false,
                                 default = nil)
  if valid_612368 != nil:
    section.add "X-Amz-Algorithm", valid_612368
  var valid_612369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612369 = validateParameter(valid_612369, JString, required = false,
                                 default = nil)
  if valid_612369 != nil:
    section.add "X-Amz-SignedHeaders", valid_612369
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_612370 = formData.getOrDefault("VersionId")
  valid_612370 = validateParameter(valid_612370, JString, required = true,
                                 default = nil)
  if valid_612370 != nil:
    section.add "VersionId", valid_612370
  var valid_612371 = formData.getOrDefault("PolicyArn")
  valid_612371 = validateParameter(valid_612371, JString, required = true,
                                 default = nil)
  if valid_612371 != nil:
    section.add "PolicyArn", valid_612371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612372: Call_PostDeletePolicyVersion_612358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612372.validator(path, query, header, formData, body)
  let scheme = call_612372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612372.url(scheme.get, call_612372.host, call_612372.base,
                         call_612372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612372, url, valid)

proc call*(call_612373: Call_PostDeletePolicyVersion_612358; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612374 = newJObject()
  var formData_612375 = newJObject()
  add(formData_612375, "VersionId", newJString(VersionId))
  add(formData_612375, "PolicyArn", newJString(PolicyArn))
  add(query_612374, "Action", newJString(Action))
  add(query_612374, "Version", newJString(Version))
  result = call_612373.call(nil, query_612374, nil, formData_612375, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_612358(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_612359, base: "/",
    url: url_PostDeletePolicyVersion_612360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_612341 = ref object of OpenApiRestCall_610658
proc url_GetDeletePolicyVersion_612343(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicyVersion_612342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_612344 = query.getOrDefault("VersionId")
  valid_612344 = validateParameter(valid_612344, JString, required = true,
                                 default = nil)
  if valid_612344 != nil:
    section.add "VersionId", valid_612344
  var valid_612345 = query.getOrDefault("PolicyArn")
  valid_612345 = validateParameter(valid_612345, JString, required = true,
                                 default = nil)
  if valid_612345 != nil:
    section.add "PolicyArn", valid_612345
  var valid_612346 = query.getOrDefault("Action")
  valid_612346 = validateParameter(valid_612346, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_612346 != nil:
    section.add "Action", valid_612346
  var valid_612347 = query.getOrDefault("Version")
  valid_612347 = validateParameter(valid_612347, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612347 != nil:
    section.add "Version", valid_612347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612348 = header.getOrDefault("X-Amz-Signature")
  valid_612348 = validateParameter(valid_612348, JString, required = false,
                                 default = nil)
  if valid_612348 != nil:
    section.add "X-Amz-Signature", valid_612348
  var valid_612349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612349 = validateParameter(valid_612349, JString, required = false,
                                 default = nil)
  if valid_612349 != nil:
    section.add "X-Amz-Content-Sha256", valid_612349
  var valid_612350 = header.getOrDefault("X-Amz-Date")
  valid_612350 = validateParameter(valid_612350, JString, required = false,
                                 default = nil)
  if valid_612350 != nil:
    section.add "X-Amz-Date", valid_612350
  var valid_612351 = header.getOrDefault("X-Amz-Credential")
  valid_612351 = validateParameter(valid_612351, JString, required = false,
                                 default = nil)
  if valid_612351 != nil:
    section.add "X-Amz-Credential", valid_612351
  var valid_612352 = header.getOrDefault("X-Amz-Security-Token")
  valid_612352 = validateParameter(valid_612352, JString, required = false,
                                 default = nil)
  if valid_612352 != nil:
    section.add "X-Amz-Security-Token", valid_612352
  var valid_612353 = header.getOrDefault("X-Amz-Algorithm")
  valid_612353 = validateParameter(valid_612353, JString, required = false,
                                 default = nil)
  if valid_612353 != nil:
    section.add "X-Amz-Algorithm", valid_612353
  var valid_612354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612354 = validateParameter(valid_612354, JString, required = false,
                                 default = nil)
  if valid_612354 != nil:
    section.add "X-Amz-SignedHeaders", valid_612354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612355: Call_GetDeletePolicyVersion_612341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612355.validator(path, query, header, formData, body)
  let scheme = call_612355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612355.url(scheme.get, call_612355.host, call_612355.base,
                         call_612355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612355, url, valid)

proc call*(call_612356: Call_GetDeletePolicyVersion_612341; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612357 = newJObject()
  add(query_612357, "VersionId", newJString(VersionId))
  add(query_612357, "PolicyArn", newJString(PolicyArn))
  add(query_612357, "Action", newJString(Action))
  add(query_612357, "Version", newJString(Version))
  result = call_612356.call(nil, query_612357, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_612341(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_612342, base: "/",
    url: url_GetDeletePolicyVersion_612343, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_612392 = ref object of OpenApiRestCall_610658
proc url_PostDeleteRole_612394(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRole_612393(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612395 = query.getOrDefault("Action")
  valid_612395 = validateParameter(valid_612395, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_612395 != nil:
    section.add "Action", valid_612395
  var valid_612396 = query.getOrDefault("Version")
  valid_612396 = validateParameter(valid_612396, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612396 != nil:
    section.add "Version", valid_612396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612397 = header.getOrDefault("X-Amz-Signature")
  valid_612397 = validateParameter(valid_612397, JString, required = false,
                                 default = nil)
  if valid_612397 != nil:
    section.add "X-Amz-Signature", valid_612397
  var valid_612398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612398 = validateParameter(valid_612398, JString, required = false,
                                 default = nil)
  if valid_612398 != nil:
    section.add "X-Amz-Content-Sha256", valid_612398
  var valid_612399 = header.getOrDefault("X-Amz-Date")
  valid_612399 = validateParameter(valid_612399, JString, required = false,
                                 default = nil)
  if valid_612399 != nil:
    section.add "X-Amz-Date", valid_612399
  var valid_612400 = header.getOrDefault("X-Amz-Credential")
  valid_612400 = validateParameter(valid_612400, JString, required = false,
                                 default = nil)
  if valid_612400 != nil:
    section.add "X-Amz-Credential", valid_612400
  var valid_612401 = header.getOrDefault("X-Amz-Security-Token")
  valid_612401 = validateParameter(valid_612401, JString, required = false,
                                 default = nil)
  if valid_612401 != nil:
    section.add "X-Amz-Security-Token", valid_612401
  var valid_612402 = header.getOrDefault("X-Amz-Algorithm")
  valid_612402 = validateParameter(valid_612402, JString, required = false,
                                 default = nil)
  if valid_612402 != nil:
    section.add "X-Amz-Algorithm", valid_612402
  var valid_612403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612403 = validateParameter(valid_612403, JString, required = false,
                                 default = nil)
  if valid_612403 != nil:
    section.add "X-Amz-SignedHeaders", valid_612403
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612404 = formData.getOrDefault("RoleName")
  valid_612404 = validateParameter(valid_612404, JString, required = true,
                                 default = nil)
  if valid_612404 != nil:
    section.add "RoleName", valid_612404
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612405: Call_PostDeleteRole_612392; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_612405.validator(path, query, header, formData, body)
  let scheme = call_612405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612405.url(scheme.get, call_612405.host, call_612405.base,
                         call_612405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612405, url, valid)

proc call*(call_612406: Call_PostDeleteRole_612392; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612407 = newJObject()
  var formData_612408 = newJObject()
  add(formData_612408, "RoleName", newJString(RoleName))
  add(query_612407, "Action", newJString(Action))
  add(query_612407, "Version", newJString(Version))
  result = call_612406.call(nil, query_612407, nil, formData_612408, nil)

var postDeleteRole* = Call_PostDeleteRole_612392(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_612393,
    base: "/", url: url_PostDeleteRole_612394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_612376 = ref object of OpenApiRestCall_610658
proc url_GetDeleteRole_612378(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRole_612377(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_612379 = query.getOrDefault("RoleName")
  valid_612379 = validateParameter(valid_612379, JString, required = true,
                                 default = nil)
  if valid_612379 != nil:
    section.add "RoleName", valid_612379
  var valid_612380 = query.getOrDefault("Action")
  valid_612380 = validateParameter(valid_612380, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_612380 != nil:
    section.add "Action", valid_612380
  var valid_612381 = query.getOrDefault("Version")
  valid_612381 = validateParameter(valid_612381, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612381 != nil:
    section.add "Version", valid_612381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612382 = header.getOrDefault("X-Amz-Signature")
  valid_612382 = validateParameter(valid_612382, JString, required = false,
                                 default = nil)
  if valid_612382 != nil:
    section.add "X-Amz-Signature", valid_612382
  var valid_612383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612383 = validateParameter(valid_612383, JString, required = false,
                                 default = nil)
  if valid_612383 != nil:
    section.add "X-Amz-Content-Sha256", valid_612383
  var valid_612384 = header.getOrDefault("X-Amz-Date")
  valid_612384 = validateParameter(valid_612384, JString, required = false,
                                 default = nil)
  if valid_612384 != nil:
    section.add "X-Amz-Date", valid_612384
  var valid_612385 = header.getOrDefault("X-Amz-Credential")
  valid_612385 = validateParameter(valid_612385, JString, required = false,
                                 default = nil)
  if valid_612385 != nil:
    section.add "X-Amz-Credential", valid_612385
  var valid_612386 = header.getOrDefault("X-Amz-Security-Token")
  valid_612386 = validateParameter(valid_612386, JString, required = false,
                                 default = nil)
  if valid_612386 != nil:
    section.add "X-Amz-Security-Token", valid_612386
  var valid_612387 = header.getOrDefault("X-Amz-Algorithm")
  valid_612387 = validateParameter(valid_612387, JString, required = false,
                                 default = nil)
  if valid_612387 != nil:
    section.add "X-Amz-Algorithm", valid_612387
  var valid_612388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612388 = validateParameter(valid_612388, JString, required = false,
                                 default = nil)
  if valid_612388 != nil:
    section.add "X-Amz-SignedHeaders", valid_612388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612389: Call_GetDeleteRole_612376; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_612389.validator(path, query, header, formData, body)
  let scheme = call_612389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612389.url(scheme.get, call_612389.host, call_612389.base,
                         call_612389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612389, url, valid)

proc call*(call_612390: Call_GetDeleteRole_612376; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612391 = newJObject()
  add(query_612391, "RoleName", newJString(RoleName))
  add(query_612391, "Action", newJString(Action))
  add(query_612391, "Version", newJString(Version))
  result = call_612390.call(nil, query_612391, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_612376(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_612377,
    base: "/", url: url_GetDeleteRole_612378, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_612425 = ref object of OpenApiRestCall_610658
proc url_PostDeleteRolePermissionsBoundary_612427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_612426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612428 = query.getOrDefault("Action")
  valid_612428 = validateParameter(valid_612428, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_612428 != nil:
    section.add "Action", valid_612428
  var valid_612429 = query.getOrDefault("Version")
  valid_612429 = validateParameter(valid_612429, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612429 != nil:
    section.add "Version", valid_612429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612430 = header.getOrDefault("X-Amz-Signature")
  valid_612430 = validateParameter(valid_612430, JString, required = false,
                                 default = nil)
  if valid_612430 != nil:
    section.add "X-Amz-Signature", valid_612430
  var valid_612431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612431 = validateParameter(valid_612431, JString, required = false,
                                 default = nil)
  if valid_612431 != nil:
    section.add "X-Amz-Content-Sha256", valid_612431
  var valid_612432 = header.getOrDefault("X-Amz-Date")
  valid_612432 = validateParameter(valid_612432, JString, required = false,
                                 default = nil)
  if valid_612432 != nil:
    section.add "X-Amz-Date", valid_612432
  var valid_612433 = header.getOrDefault("X-Amz-Credential")
  valid_612433 = validateParameter(valid_612433, JString, required = false,
                                 default = nil)
  if valid_612433 != nil:
    section.add "X-Amz-Credential", valid_612433
  var valid_612434 = header.getOrDefault("X-Amz-Security-Token")
  valid_612434 = validateParameter(valid_612434, JString, required = false,
                                 default = nil)
  if valid_612434 != nil:
    section.add "X-Amz-Security-Token", valid_612434
  var valid_612435 = header.getOrDefault("X-Amz-Algorithm")
  valid_612435 = validateParameter(valid_612435, JString, required = false,
                                 default = nil)
  if valid_612435 != nil:
    section.add "X-Amz-Algorithm", valid_612435
  var valid_612436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612436 = validateParameter(valid_612436, JString, required = false,
                                 default = nil)
  if valid_612436 != nil:
    section.add "X-Amz-SignedHeaders", valid_612436
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612437 = formData.getOrDefault("RoleName")
  valid_612437 = validateParameter(valid_612437, JString, required = true,
                                 default = nil)
  if valid_612437 != nil:
    section.add "RoleName", valid_612437
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612438: Call_PostDeleteRolePermissionsBoundary_612425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_612438.validator(path, query, header, formData, body)
  let scheme = call_612438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612438.url(scheme.get, call_612438.host, call_612438.base,
                         call_612438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612438, url, valid)

proc call*(call_612439: Call_PostDeleteRolePermissionsBoundary_612425;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612440 = newJObject()
  var formData_612441 = newJObject()
  add(formData_612441, "RoleName", newJString(RoleName))
  add(query_612440, "Action", newJString(Action))
  add(query_612440, "Version", newJString(Version))
  result = call_612439.call(nil, query_612440, nil, formData_612441, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_612425(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_612426, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_612427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_612409 = ref object of OpenApiRestCall_610658
proc url_GetDeleteRolePermissionsBoundary_612411(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_612410(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_612412 = query.getOrDefault("RoleName")
  valid_612412 = validateParameter(valid_612412, JString, required = true,
                                 default = nil)
  if valid_612412 != nil:
    section.add "RoleName", valid_612412
  var valid_612413 = query.getOrDefault("Action")
  valid_612413 = validateParameter(valid_612413, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_612413 != nil:
    section.add "Action", valid_612413
  var valid_612414 = query.getOrDefault("Version")
  valid_612414 = validateParameter(valid_612414, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612414 != nil:
    section.add "Version", valid_612414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612415 = header.getOrDefault("X-Amz-Signature")
  valid_612415 = validateParameter(valid_612415, JString, required = false,
                                 default = nil)
  if valid_612415 != nil:
    section.add "X-Amz-Signature", valid_612415
  var valid_612416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612416 = validateParameter(valid_612416, JString, required = false,
                                 default = nil)
  if valid_612416 != nil:
    section.add "X-Amz-Content-Sha256", valid_612416
  var valid_612417 = header.getOrDefault("X-Amz-Date")
  valid_612417 = validateParameter(valid_612417, JString, required = false,
                                 default = nil)
  if valid_612417 != nil:
    section.add "X-Amz-Date", valid_612417
  var valid_612418 = header.getOrDefault("X-Amz-Credential")
  valid_612418 = validateParameter(valid_612418, JString, required = false,
                                 default = nil)
  if valid_612418 != nil:
    section.add "X-Amz-Credential", valid_612418
  var valid_612419 = header.getOrDefault("X-Amz-Security-Token")
  valid_612419 = validateParameter(valid_612419, JString, required = false,
                                 default = nil)
  if valid_612419 != nil:
    section.add "X-Amz-Security-Token", valid_612419
  var valid_612420 = header.getOrDefault("X-Amz-Algorithm")
  valid_612420 = validateParameter(valid_612420, JString, required = false,
                                 default = nil)
  if valid_612420 != nil:
    section.add "X-Amz-Algorithm", valid_612420
  var valid_612421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612421 = validateParameter(valid_612421, JString, required = false,
                                 default = nil)
  if valid_612421 != nil:
    section.add "X-Amz-SignedHeaders", valid_612421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612422: Call_GetDeleteRolePermissionsBoundary_612409;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_612422.validator(path, query, header, formData, body)
  let scheme = call_612422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612422.url(scheme.get, call_612422.host, call_612422.base,
                         call_612422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612422, url, valid)

proc call*(call_612423: Call_GetDeleteRolePermissionsBoundary_612409;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612424 = newJObject()
  add(query_612424, "RoleName", newJString(RoleName))
  add(query_612424, "Action", newJString(Action))
  add(query_612424, "Version", newJString(Version))
  result = call_612423.call(nil, query_612424, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_612409(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_612410, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_612411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_612459 = ref object of OpenApiRestCall_610658
proc url_PostDeleteRolePolicy_612461(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePolicy_612460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612462 = query.getOrDefault("Action")
  valid_612462 = validateParameter(valid_612462, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_612462 != nil:
    section.add "Action", valid_612462
  var valid_612463 = query.getOrDefault("Version")
  valid_612463 = validateParameter(valid_612463, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612463 != nil:
    section.add "Version", valid_612463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612464 = header.getOrDefault("X-Amz-Signature")
  valid_612464 = validateParameter(valid_612464, JString, required = false,
                                 default = nil)
  if valid_612464 != nil:
    section.add "X-Amz-Signature", valid_612464
  var valid_612465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612465 = validateParameter(valid_612465, JString, required = false,
                                 default = nil)
  if valid_612465 != nil:
    section.add "X-Amz-Content-Sha256", valid_612465
  var valid_612466 = header.getOrDefault("X-Amz-Date")
  valid_612466 = validateParameter(valid_612466, JString, required = false,
                                 default = nil)
  if valid_612466 != nil:
    section.add "X-Amz-Date", valid_612466
  var valid_612467 = header.getOrDefault("X-Amz-Credential")
  valid_612467 = validateParameter(valid_612467, JString, required = false,
                                 default = nil)
  if valid_612467 != nil:
    section.add "X-Amz-Credential", valid_612467
  var valid_612468 = header.getOrDefault("X-Amz-Security-Token")
  valid_612468 = validateParameter(valid_612468, JString, required = false,
                                 default = nil)
  if valid_612468 != nil:
    section.add "X-Amz-Security-Token", valid_612468
  var valid_612469 = header.getOrDefault("X-Amz-Algorithm")
  valid_612469 = validateParameter(valid_612469, JString, required = false,
                                 default = nil)
  if valid_612469 != nil:
    section.add "X-Amz-Algorithm", valid_612469
  var valid_612470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612470 = validateParameter(valid_612470, JString, required = false,
                                 default = nil)
  if valid_612470 != nil:
    section.add "X-Amz-SignedHeaders", valid_612470
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612471 = formData.getOrDefault("RoleName")
  valid_612471 = validateParameter(valid_612471, JString, required = true,
                                 default = nil)
  if valid_612471 != nil:
    section.add "RoleName", valid_612471
  var valid_612472 = formData.getOrDefault("PolicyName")
  valid_612472 = validateParameter(valid_612472, JString, required = true,
                                 default = nil)
  if valid_612472 != nil:
    section.add "PolicyName", valid_612472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612473: Call_PostDeleteRolePolicy_612459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612473.validator(path, query, header, formData, body)
  let scheme = call_612473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612473.url(scheme.get, call_612473.host, call_612473.base,
                         call_612473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612473, url, valid)

proc call*(call_612474: Call_PostDeleteRolePolicy_612459; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612475 = newJObject()
  var formData_612476 = newJObject()
  add(formData_612476, "RoleName", newJString(RoleName))
  add(query_612475, "Action", newJString(Action))
  add(query_612475, "Version", newJString(Version))
  add(formData_612476, "PolicyName", newJString(PolicyName))
  result = call_612474.call(nil, query_612475, nil, formData_612476, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_612459(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_612460, base: "/",
    url: url_PostDeleteRolePolicy_612461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_612442 = ref object of OpenApiRestCall_610658
proc url_GetDeleteRolePolicy_612444(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePolicy_612443(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_612445 = query.getOrDefault("PolicyName")
  valid_612445 = validateParameter(valid_612445, JString, required = true,
                                 default = nil)
  if valid_612445 != nil:
    section.add "PolicyName", valid_612445
  var valid_612446 = query.getOrDefault("RoleName")
  valid_612446 = validateParameter(valid_612446, JString, required = true,
                                 default = nil)
  if valid_612446 != nil:
    section.add "RoleName", valid_612446
  var valid_612447 = query.getOrDefault("Action")
  valid_612447 = validateParameter(valid_612447, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_612447 != nil:
    section.add "Action", valid_612447
  var valid_612448 = query.getOrDefault("Version")
  valid_612448 = validateParameter(valid_612448, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612448 != nil:
    section.add "Version", valid_612448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612449 = header.getOrDefault("X-Amz-Signature")
  valid_612449 = validateParameter(valid_612449, JString, required = false,
                                 default = nil)
  if valid_612449 != nil:
    section.add "X-Amz-Signature", valid_612449
  var valid_612450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612450 = validateParameter(valid_612450, JString, required = false,
                                 default = nil)
  if valid_612450 != nil:
    section.add "X-Amz-Content-Sha256", valid_612450
  var valid_612451 = header.getOrDefault("X-Amz-Date")
  valid_612451 = validateParameter(valid_612451, JString, required = false,
                                 default = nil)
  if valid_612451 != nil:
    section.add "X-Amz-Date", valid_612451
  var valid_612452 = header.getOrDefault("X-Amz-Credential")
  valid_612452 = validateParameter(valid_612452, JString, required = false,
                                 default = nil)
  if valid_612452 != nil:
    section.add "X-Amz-Credential", valid_612452
  var valid_612453 = header.getOrDefault("X-Amz-Security-Token")
  valid_612453 = validateParameter(valid_612453, JString, required = false,
                                 default = nil)
  if valid_612453 != nil:
    section.add "X-Amz-Security-Token", valid_612453
  var valid_612454 = header.getOrDefault("X-Amz-Algorithm")
  valid_612454 = validateParameter(valid_612454, JString, required = false,
                                 default = nil)
  if valid_612454 != nil:
    section.add "X-Amz-Algorithm", valid_612454
  var valid_612455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612455 = validateParameter(valid_612455, JString, required = false,
                                 default = nil)
  if valid_612455 != nil:
    section.add "X-Amz-SignedHeaders", valid_612455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612456: Call_GetDeleteRolePolicy_612442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612456.validator(path, query, header, formData, body)
  let scheme = call_612456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612456.url(scheme.get, call_612456.host, call_612456.base,
                         call_612456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612456, url, valid)

proc call*(call_612457: Call_GetDeleteRolePolicy_612442; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612458 = newJObject()
  add(query_612458, "PolicyName", newJString(PolicyName))
  add(query_612458, "RoleName", newJString(RoleName))
  add(query_612458, "Action", newJString(Action))
  add(query_612458, "Version", newJString(Version))
  result = call_612457.call(nil, query_612458, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_612442(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_612443, base: "/",
    url: url_GetDeleteRolePolicy_612444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_612493 = ref object of OpenApiRestCall_610658
proc url_PostDeleteSAMLProvider_612495(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSAMLProvider_612494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612496 = query.getOrDefault("Action")
  valid_612496 = validateParameter(valid_612496, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_612496 != nil:
    section.add "Action", valid_612496
  var valid_612497 = query.getOrDefault("Version")
  valid_612497 = validateParameter(valid_612497, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612497 != nil:
    section.add "Version", valid_612497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612498 = header.getOrDefault("X-Amz-Signature")
  valid_612498 = validateParameter(valid_612498, JString, required = false,
                                 default = nil)
  if valid_612498 != nil:
    section.add "X-Amz-Signature", valid_612498
  var valid_612499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612499 = validateParameter(valid_612499, JString, required = false,
                                 default = nil)
  if valid_612499 != nil:
    section.add "X-Amz-Content-Sha256", valid_612499
  var valid_612500 = header.getOrDefault("X-Amz-Date")
  valid_612500 = validateParameter(valid_612500, JString, required = false,
                                 default = nil)
  if valid_612500 != nil:
    section.add "X-Amz-Date", valid_612500
  var valid_612501 = header.getOrDefault("X-Amz-Credential")
  valid_612501 = validateParameter(valid_612501, JString, required = false,
                                 default = nil)
  if valid_612501 != nil:
    section.add "X-Amz-Credential", valid_612501
  var valid_612502 = header.getOrDefault("X-Amz-Security-Token")
  valid_612502 = validateParameter(valid_612502, JString, required = false,
                                 default = nil)
  if valid_612502 != nil:
    section.add "X-Amz-Security-Token", valid_612502
  var valid_612503 = header.getOrDefault("X-Amz-Algorithm")
  valid_612503 = validateParameter(valid_612503, JString, required = false,
                                 default = nil)
  if valid_612503 != nil:
    section.add "X-Amz-Algorithm", valid_612503
  var valid_612504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612504 = validateParameter(valid_612504, JString, required = false,
                                 default = nil)
  if valid_612504 != nil:
    section.add "X-Amz-SignedHeaders", valid_612504
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_612505 = formData.getOrDefault("SAMLProviderArn")
  valid_612505 = validateParameter(valid_612505, JString, required = true,
                                 default = nil)
  if valid_612505 != nil:
    section.add "SAMLProviderArn", valid_612505
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612506: Call_PostDeleteSAMLProvider_612493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_612506.validator(path, query, header, formData, body)
  let scheme = call_612506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612506.url(scheme.get, call_612506.host, call_612506.base,
                         call_612506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612506, url, valid)

proc call*(call_612507: Call_PostDeleteSAMLProvider_612493;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612508 = newJObject()
  var formData_612509 = newJObject()
  add(formData_612509, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_612508, "Action", newJString(Action))
  add(query_612508, "Version", newJString(Version))
  result = call_612507.call(nil, query_612508, nil, formData_612509, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_612493(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_612494, base: "/",
    url: url_PostDeleteSAMLProvider_612495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_612477 = ref object of OpenApiRestCall_610658
proc url_GetDeleteSAMLProvider_612479(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSAMLProvider_612478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_612480 = query.getOrDefault("Action")
  valid_612480 = validateParameter(valid_612480, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_612480 != nil:
    section.add "Action", valid_612480
  var valid_612481 = query.getOrDefault("SAMLProviderArn")
  valid_612481 = validateParameter(valid_612481, JString, required = true,
                                 default = nil)
  if valid_612481 != nil:
    section.add "SAMLProviderArn", valid_612481
  var valid_612482 = query.getOrDefault("Version")
  valid_612482 = validateParameter(valid_612482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612482 != nil:
    section.add "Version", valid_612482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612483 = header.getOrDefault("X-Amz-Signature")
  valid_612483 = validateParameter(valid_612483, JString, required = false,
                                 default = nil)
  if valid_612483 != nil:
    section.add "X-Amz-Signature", valid_612483
  var valid_612484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612484 = validateParameter(valid_612484, JString, required = false,
                                 default = nil)
  if valid_612484 != nil:
    section.add "X-Amz-Content-Sha256", valid_612484
  var valid_612485 = header.getOrDefault("X-Amz-Date")
  valid_612485 = validateParameter(valid_612485, JString, required = false,
                                 default = nil)
  if valid_612485 != nil:
    section.add "X-Amz-Date", valid_612485
  var valid_612486 = header.getOrDefault("X-Amz-Credential")
  valid_612486 = validateParameter(valid_612486, JString, required = false,
                                 default = nil)
  if valid_612486 != nil:
    section.add "X-Amz-Credential", valid_612486
  var valid_612487 = header.getOrDefault("X-Amz-Security-Token")
  valid_612487 = validateParameter(valid_612487, JString, required = false,
                                 default = nil)
  if valid_612487 != nil:
    section.add "X-Amz-Security-Token", valid_612487
  var valid_612488 = header.getOrDefault("X-Amz-Algorithm")
  valid_612488 = validateParameter(valid_612488, JString, required = false,
                                 default = nil)
  if valid_612488 != nil:
    section.add "X-Amz-Algorithm", valid_612488
  var valid_612489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612489 = validateParameter(valid_612489, JString, required = false,
                                 default = nil)
  if valid_612489 != nil:
    section.add "X-Amz-SignedHeaders", valid_612489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612490: Call_GetDeleteSAMLProvider_612477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_612490.validator(path, query, header, formData, body)
  let scheme = call_612490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612490.url(scheme.get, call_612490.host, call_612490.base,
                         call_612490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612490, url, valid)

proc call*(call_612491: Call_GetDeleteSAMLProvider_612477; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_612492 = newJObject()
  add(query_612492, "Action", newJString(Action))
  add(query_612492, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_612492, "Version", newJString(Version))
  result = call_612491.call(nil, query_612492, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_612477(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_612478, base: "/",
    url: url_GetDeleteSAMLProvider_612479, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_612527 = ref object of OpenApiRestCall_610658
proc url_PostDeleteSSHPublicKey_612529(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSSHPublicKey_612528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612530 = query.getOrDefault("Action")
  valid_612530 = validateParameter(valid_612530, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_612530 != nil:
    section.add "Action", valid_612530
  var valid_612531 = query.getOrDefault("Version")
  valid_612531 = validateParameter(valid_612531, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612531 != nil:
    section.add "Version", valid_612531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612532 = header.getOrDefault("X-Amz-Signature")
  valid_612532 = validateParameter(valid_612532, JString, required = false,
                                 default = nil)
  if valid_612532 != nil:
    section.add "X-Amz-Signature", valid_612532
  var valid_612533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612533 = validateParameter(valid_612533, JString, required = false,
                                 default = nil)
  if valid_612533 != nil:
    section.add "X-Amz-Content-Sha256", valid_612533
  var valid_612534 = header.getOrDefault("X-Amz-Date")
  valid_612534 = validateParameter(valid_612534, JString, required = false,
                                 default = nil)
  if valid_612534 != nil:
    section.add "X-Amz-Date", valid_612534
  var valid_612535 = header.getOrDefault("X-Amz-Credential")
  valid_612535 = validateParameter(valid_612535, JString, required = false,
                                 default = nil)
  if valid_612535 != nil:
    section.add "X-Amz-Credential", valid_612535
  var valid_612536 = header.getOrDefault("X-Amz-Security-Token")
  valid_612536 = validateParameter(valid_612536, JString, required = false,
                                 default = nil)
  if valid_612536 != nil:
    section.add "X-Amz-Security-Token", valid_612536
  var valid_612537 = header.getOrDefault("X-Amz-Algorithm")
  valid_612537 = validateParameter(valid_612537, JString, required = false,
                                 default = nil)
  if valid_612537 != nil:
    section.add "X-Amz-Algorithm", valid_612537
  var valid_612538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612538 = validateParameter(valid_612538, JString, required = false,
                                 default = nil)
  if valid_612538 != nil:
    section.add "X-Amz-SignedHeaders", valid_612538
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_612539 = formData.getOrDefault("SSHPublicKeyId")
  valid_612539 = validateParameter(valid_612539, JString, required = true,
                                 default = nil)
  if valid_612539 != nil:
    section.add "SSHPublicKeyId", valid_612539
  var valid_612540 = formData.getOrDefault("UserName")
  valid_612540 = validateParameter(valid_612540, JString, required = true,
                                 default = nil)
  if valid_612540 != nil:
    section.add "UserName", valid_612540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612541: Call_PostDeleteSSHPublicKey_612527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_612541.validator(path, query, header, formData, body)
  let scheme = call_612541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612541.url(scheme.get, call_612541.host, call_612541.base,
                         call_612541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612541, url, valid)

proc call*(call_612542: Call_PostDeleteSSHPublicKey_612527; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612543 = newJObject()
  var formData_612544 = newJObject()
  add(formData_612544, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_612544, "UserName", newJString(UserName))
  add(query_612543, "Action", newJString(Action))
  add(query_612543, "Version", newJString(Version))
  result = call_612542.call(nil, query_612543, nil, formData_612544, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_612527(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_612528, base: "/",
    url: url_PostDeleteSSHPublicKey_612529, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_612510 = ref object of OpenApiRestCall_610658
proc url_GetDeleteSSHPublicKey_612512(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSSHPublicKey_612511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_612513 = query.getOrDefault("SSHPublicKeyId")
  valid_612513 = validateParameter(valid_612513, JString, required = true,
                                 default = nil)
  if valid_612513 != nil:
    section.add "SSHPublicKeyId", valid_612513
  var valid_612514 = query.getOrDefault("UserName")
  valid_612514 = validateParameter(valid_612514, JString, required = true,
                                 default = nil)
  if valid_612514 != nil:
    section.add "UserName", valid_612514
  var valid_612515 = query.getOrDefault("Action")
  valid_612515 = validateParameter(valid_612515, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_612515 != nil:
    section.add "Action", valid_612515
  var valid_612516 = query.getOrDefault("Version")
  valid_612516 = validateParameter(valid_612516, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612516 != nil:
    section.add "Version", valid_612516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612517 = header.getOrDefault("X-Amz-Signature")
  valid_612517 = validateParameter(valid_612517, JString, required = false,
                                 default = nil)
  if valid_612517 != nil:
    section.add "X-Amz-Signature", valid_612517
  var valid_612518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612518 = validateParameter(valid_612518, JString, required = false,
                                 default = nil)
  if valid_612518 != nil:
    section.add "X-Amz-Content-Sha256", valid_612518
  var valid_612519 = header.getOrDefault("X-Amz-Date")
  valid_612519 = validateParameter(valid_612519, JString, required = false,
                                 default = nil)
  if valid_612519 != nil:
    section.add "X-Amz-Date", valid_612519
  var valid_612520 = header.getOrDefault("X-Amz-Credential")
  valid_612520 = validateParameter(valid_612520, JString, required = false,
                                 default = nil)
  if valid_612520 != nil:
    section.add "X-Amz-Credential", valid_612520
  var valid_612521 = header.getOrDefault("X-Amz-Security-Token")
  valid_612521 = validateParameter(valid_612521, JString, required = false,
                                 default = nil)
  if valid_612521 != nil:
    section.add "X-Amz-Security-Token", valid_612521
  var valid_612522 = header.getOrDefault("X-Amz-Algorithm")
  valid_612522 = validateParameter(valid_612522, JString, required = false,
                                 default = nil)
  if valid_612522 != nil:
    section.add "X-Amz-Algorithm", valid_612522
  var valid_612523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612523 = validateParameter(valid_612523, JString, required = false,
                                 default = nil)
  if valid_612523 != nil:
    section.add "X-Amz-SignedHeaders", valid_612523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612524: Call_GetDeleteSSHPublicKey_612510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_612524.validator(path, query, header, formData, body)
  let scheme = call_612524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612524.url(scheme.get, call_612524.host, call_612524.base,
                         call_612524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612524, url, valid)

proc call*(call_612525: Call_GetDeleteSSHPublicKey_612510; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612526 = newJObject()
  add(query_612526, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_612526, "UserName", newJString(UserName))
  add(query_612526, "Action", newJString(Action))
  add(query_612526, "Version", newJString(Version))
  result = call_612525.call(nil, query_612526, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_612510(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_612511, base: "/",
    url: url_GetDeleteSSHPublicKey_612512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_612561 = ref object of OpenApiRestCall_610658
proc url_PostDeleteServerCertificate_612563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServerCertificate_612562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612564 = query.getOrDefault("Action")
  valid_612564 = validateParameter(valid_612564, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_612564 != nil:
    section.add "Action", valid_612564
  var valid_612565 = query.getOrDefault("Version")
  valid_612565 = validateParameter(valid_612565, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612565 != nil:
    section.add "Version", valid_612565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612566 = header.getOrDefault("X-Amz-Signature")
  valid_612566 = validateParameter(valid_612566, JString, required = false,
                                 default = nil)
  if valid_612566 != nil:
    section.add "X-Amz-Signature", valid_612566
  var valid_612567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612567 = validateParameter(valid_612567, JString, required = false,
                                 default = nil)
  if valid_612567 != nil:
    section.add "X-Amz-Content-Sha256", valid_612567
  var valid_612568 = header.getOrDefault("X-Amz-Date")
  valid_612568 = validateParameter(valid_612568, JString, required = false,
                                 default = nil)
  if valid_612568 != nil:
    section.add "X-Amz-Date", valid_612568
  var valid_612569 = header.getOrDefault("X-Amz-Credential")
  valid_612569 = validateParameter(valid_612569, JString, required = false,
                                 default = nil)
  if valid_612569 != nil:
    section.add "X-Amz-Credential", valid_612569
  var valid_612570 = header.getOrDefault("X-Amz-Security-Token")
  valid_612570 = validateParameter(valid_612570, JString, required = false,
                                 default = nil)
  if valid_612570 != nil:
    section.add "X-Amz-Security-Token", valid_612570
  var valid_612571 = header.getOrDefault("X-Amz-Algorithm")
  valid_612571 = validateParameter(valid_612571, JString, required = false,
                                 default = nil)
  if valid_612571 != nil:
    section.add "X-Amz-Algorithm", valid_612571
  var valid_612572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612572 = validateParameter(valid_612572, JString, required = false,
                                 default = nil)
  if valid_612572 != nil:
    section.add "X-Amz-SignedHeaders", valid_612572
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_612573 = formData.getOrDefault("ServerCertificateName")
  valid_612573 = validateParameter(valid_612573, JString, required = true,
                                 default = nil)
  if valid_612573 != nil:
    section.add "ServerCertificateName", valid_612573
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612574: Call_PostDeleteServerCertificate_612561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_612574.validator(path, query, header, formData, body)
  let scheme = call_612574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612574.url(scheme.get, call_612574.host, call_612574.base,
                         call_612574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612574, url, valid)

proc call*(call_612575: Call_PostDeleteServerCertificate_612561;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612576 = newJObject()
  var formData_612577 = newJObject()
  add(formData_612577, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_612576, "Action", newJString(Action))
  add(query_612576, "Version", newJString(Version))
  result = call_612575.call(nil, query_612576, nil, formData_612577, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_612561(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_612562, base: "/",
    url: url_PostDeleteServerCertificate_612563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_612545 = ref object of OpenApiRestCall_610658
proc url_GetDeleteServerCertificate_612547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServerCertificate_612546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_612548 = query.getOrDefault("ServerCertificateName")
  valid_612548 = validateParameter(valid_612548, JString, required = true,
                                 default = nil)
  if valid_612548 != nil:
    section.add "ServerCertificateName", valid_612548
  var valid_612549 = query.getOrDefault("Action")
  valid_612549 = validateParameter(valid_612549, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_612549 != nil:
    section.add "Action", valid_612549
  var valid_612550 = query.getOrDefault("Version")
  valid_612550 = validateParameter(valid_612550, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612550 != nil:
    section.add "Version", valid_612550
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612551 = header.getOrDefault("X-Amz-Signature")
  valid_612551 = validateParameter(valid_612551, JString, required = false,
                                 default = nil)
  if valid_612551 != nil:
    section.add "X-Amz-Signature", valid_612551
  var valid_612552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612552 = validateParameter(valid_612552, JString, required = false,
                                 default = nil)
  if valid_612552 != nil:
    section.add "X-Amz-Content-Sha256", valid_612552
  var valid_612553 = header.getOrDefault("X-Amz-Date")
  valid_612553 = validateParameter(valid_612553, JString, required = false,
                                 default = nil)
  if valid_612553 != nil:
    section.add "X-Amz-Date", valid_612553
  var valid_612554 = header.getOrDefault("X-Amz-Credential")
  valid_612554 = validateParameter(valid_612554, JString, required = false,
                                 default = nil)
  if valid_612554 != nil:
    section.add "X-Amz-Credential", valid_612554
  var valid_612555 = header.getOrDefault("X-Amz-Security-Token")
  valid_612555 = validateParameter(valid_612555, JString, required = false,
                                 default = nil)
  if valid_612555 != nil:
    section.add "X-Amz-Security-Token", valid_612555
  var valid_612556 = header.getOrDefault("X-Amz-Algorithm")
  valid_612556 = validateParameter(valid_612556, JString, required = false,
                                 default = nil)
  if valid_612556 != nil:
    section.add "X-Amz-Algorithm", valid_612556
  var valid_612557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612557 = validateParameter(valid_612557, JString, required = false,
                                 default = nil)
  if valid_612557 != nil:
    section.add "X-Amz-SignedHeaders", valid_612557
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612558: Call_GetDeleteServerCertificate_612545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_612558.validator(path, query, header, formData, body)
  let scheme = call_612558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612558.url(scheme.get, call_612558.host, call_612558.base,
                         call_612558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612558, url, valid)

proc call*(call_612559: Call_GetDeleteServerCertificate_612545;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612560 = newJObject()
  add(query_612560, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_612560, "Action", newJString(Action))
  add(query_612560, "Version", newJString(Version))
  result = call_612559.call(nil, query_612560, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_612545(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_612546, base: "/",
    url: url_GetDeleteServerCertificate_612547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_612594 = ref object of OpenApiRestCall_610658
proc url_PostDeleteServiceLinkedRole_612596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceLinkedRole_612595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612597 = query.getOrDefault("Action")
  valid_612597 = validateParameter(valid_612597, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_612597 != nil:
    section.add "Action", valid_612597
  var valid_612598 = query.getOrDefault("Version")
  valid_612598 = validateParameter(valid_612598, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612598 != nil:
    section.add "Version", valid_612598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612599 = header.getOrDefault("X-Amz-Signature")
  valid_612599 = validateParameter(valid_612599, JString, required = false,
                                 default = nil)
  if valid_612599 != nil:
    section.add "X-Amz-Signature", valid_612599
  var valid_612600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612600 = validateParameter(valid_612600, JString, required = false,
                                 default = nil)
  if valid_612600 != nil:
    section.add "X-Amz-Content-Sha256", valid_612600
  var valid_612601 = header.getOrDefault("X-Amz-Date")
  valid_612601 = validateParameter(valid_612601, JString, required = false,
                                 default = nil)
  if valid_612601 != nil:
    section.add "X-Amz-Date", valid_612601
  var valid_612602 = header.getOrDefault("X-Amz-Credential")
  valid_612602 = validateParameter(valid_612602, JString, required = false,
                                 default = nil)
  if valid_612602 != nil:
    section.add "X-Amz-Credential", valid_612602
  var valid_612603 = header.getOrDefault("X-Amz-Security-Token")
  valid_612603 = validateParameter(valid_612603, JString, required = false,
                                 default = nil)
  if valid_612603 != nil:
    section.add "X-Amz-Security-Token", valid_612603
  var valid_612604 = header.getOrDefault("X-Amz-Algorithm")
  valid_612604 = validateParameter(valid_612604, JString, required = false,
                                 default = nil)
  if valid_612604 != nil:
    section.add "X-Amz-Algorithm", valid_612604
  var valid_612605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612605 = validateParameter(valid_612605, JString, required = false,
                                 default = nil)
  if valid_612605 != nil:
    section.add "X-Amz-SignedHeaders", valid_612605
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612606 = formData.getOrDefault("RoleName")
  valid_612606 = validateParameter(valid_612606, JString, required = true,
                                 default = nil)
  if valid_612606 != nil:
    section.add "RoleName", valid_612606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612607: Call_PostDeleteServiceLinkedRole_612594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612607.validator(path, query, header, formData, body)
  let scheme = call_612607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612607.url(scheme.get, call_612607.host, call_612607.base,
                         call_612607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612607, url, valid)

proc call*(call_612608: Call_PostDeleteServiceLinkedRole_612594; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612609 = newJObject()
  var formData_612610 = newJObject()
  add(formData_612610, "RoleName", newJString(RoleName))
  add(query_612609, "Action", newJString(Action))
  add(query_612609, "Version", newJString(Version))
  result = call_612608.call(nil, query_612609, nil, formData_612610, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_612594(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_612595, base: "/",
    url: url_PostDeleteServiceLinkedRole_612596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_612578 = ref object of OpenApiRestCall_610658
proc url_GetDeleteServiceLinkedRole_612580(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceLinkedRole_612579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_612581 = query.getOrDefault("RoleName")
  valid_612581 = validateParameter(valid_612581, JString, required = true,
                                 default = nil)
  if valid_612581 != nil:
    section.add "RoleName", valid_612581
  var valid_612582 = query.getOrDefault("Action")
  valid_612582 = validateParameter(valid_612582, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_612582 != nil:
    section.add "Action", valid_612582
  var valid_612583 = query.getOrDefault("Version")
  valid_612583 = validateParameter(valid_612583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612583 != nil:
    section.add "Version", valid_612583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612584 = header.getOrDefault("X-Amz-Signature")
  valid_612584 = validateParameter(valid_612584, JString, required = false,
                                 default = nil)
  if valid_612584 != nil:
    section.add "X-Amz-Signature", valid_612584
  var valid_612585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612585 = validateParameter(valid_612585, JString, required = false,
                                 default = nil)
  if valid_612585 != nil:
    section.add "X-Amz-Content-Sha256", valid_612585
  var valid_612586 = header.getOrDefault("X-Amz-Date")
  valid_612586 = validateParameter(valid_612586, JString, required = false,
                                 default = nil)
  if valid_612586 != nil:
    section.add "X-Amz-Date", valid_612586
  var valid_612587 = header.getOrDefault("X-Amz-Credential")
  valid_612587 = validateParameter(valid_612587, JString, required = false,
                                 default = nil)
  if valid_612587 != nil:
    section.add "X-Amz-Credential", valid_612587
  var valid_612588 = header.getOrDefault("X-Amz-Security-Token")
  valid_612588 = validateParameter(valid_612588, JString, required = false,
                                 default = nil)
  if valid_612588 != nil:
    section.add "X-Amz-Security-Token", valid_612588
  var valid_612589 = header.getOrDefault("X-Amz-Algorithm")
  valid_612589 = validateParameter(valid_612589, JString, required = false,
                                 default = nil)
  if valid_612589 != nil:
    section.add "X-Amz-Algorithm", valid_612589
  var valid_612590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612590 = validateParameter(valid_612590, JString, required = false,
                                 default = nil)
  if valid_612590 != nil:
    section.add "X-Amz-SignedHeaders", valid_612590
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612591: Call_GetDeleteServiceLinkedRole_612578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612591.validator(path, query, header, formData, body)
  let scheme = call_612591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612591.url(scheme.get, call_612591.host, call_612591.base,
                         call_612591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612591, url, valid)

proc call*(call_612592: Call_GetDeleteServiceLinkedRole_612578; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612593 = newJObject()
  add(query_612593, "RoleName", newJString(RoleName))
  add(query_612593, "Action", newJString(Action))
  add(query_612593, "Version", newJString(Version))
  result = call_612592.call(nil, query_612593, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_612578(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_612579, base: "/",
    url: url_GetDeleteServiceLinkedRole_612580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_612628 = ref object of OpenApiRestCall_610658
proc url_PostDeleteServiceSpecificCredential_612630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_612629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612631 = query.getOrDefault("Action")
  valid_612631 = validateParameter(valid_612631, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_612631 != nil:
    section.add "Action", valid_612631
  var valid_612632 = query.getOrDefault("Version")
  valid_612632 = validateParameter(valid_612632, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612632 != nil:
    section.add "Version", valid_612632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612633 = header.getOrDefault("X-Amz-Signature")
  valid_612633 = validateParameter(valid_612633, JString, required = false,
                                 default = nil)
  if valid_612633 != nil:
    section.add "X-Amz-Signature", valid_612633
  var valid_612634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612634 = validateParameter(valid_612634, JString, required = false,
                                 default = nil)
  if valid_612634 != nil:
    section.add "X-Amz-Content-Sha256", valid_612634
  var valid_612635 = header.getOrDefault("X-Amz-Date")
  valid_612635 = validateParameter(valid_612635, JString, required = false,
                                 default = nil)
  if valid_612635 != nil:
    section.add "X-Amz-Date", valid_612635
  var valid_612636 = header.getOrDefault("X-Amz-Credential")
  valid_612636 = validateParameter(valid_612636, JString, required = false,
                                 default = nil)
  if valid_612636 != nil:
    section.add "X-Amz-Credential", valid_612636
  var valid_612637 = header.getOrDefault("X-Amz-Security-Token")
  valid_612637 = validateParameter(valid_612637, JString, required = false,
                                 default = nil)
  if valid_612637 != nil:
    section.add "X-Amz-Security-Token", valid_612637
  var valid_612638 = header.getOrDefault("X-Amz-Algorithm")
  valid_612638 = validateParameter(valid_612638, JString, required = false,
                                 default = nil)
  if valid_612638 != nil:
    section.add "X-Amz-Algorithm", valid_612638
  var valid_612639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612639 = validateParameter(valid_612639, JString, required = false,
                                 default = nil)
  if valid_612639 != nil:
    section.add "X-Amz-SignedHeaders", valid_612639
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_612640 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_612640 = validateParameter(valid_612640, JString, required = true,
                                 default = nil)
  if valid_612640 != nil:
    section.add "ServiceSpecificCredentialId", valid_612640
  var valid_612641 = formData.getOrDefault("UserName")
  valid_612641 = validateParameter(valid_612641, JString, required = false,
                                 default = nil)
  if valid_612641 != nil:
    section.add "UserName", valid_612641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612642: Call_PostDeleteServiceSpecificCredential_612628;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_612642.validator(path, query, header, formData, body)
  let scheme = call_612642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612642.url(scheme.get, call_612642.host, call_612642.base,
                         call_612642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612642, url, valid)

proc call*(call_612643: Call_PostDeleteServiceSpecificCredential_612628;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612644 = newJObject()
  var formData_612645 = newJObject()
  add(formData_612645, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_612645, "UserName", newJString(UserName))
  add(query_612644, "Action", newJString(Action))
  add(query_612644, "Version", newJString(Version))
  result = call_612643.call(nil, query_612644, nil, formData_612645, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_612628(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_612629, base: "/",
    url: url_PostDeleteServiceSpecificCredential_612630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_612611 = ref object of OpenApiRestCall_610658
proc url_GetDeleteServiceSpecificCredential_612613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_612612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612614 = query.getOrDefault("UserName")
  valid_612614 = validateParameter(valid_612614, JString, required = false,
                                 default = nil)
  if valid_612614 != nil:
    section.add "UserName", valid_612614
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_612615 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_612615 = validateParameter(valid_612615, JString, required = true,
                                 default = nil)
  if valid_612615 != nil:
    section.add "ServiceSpecificCredentialId", valid_612615
  var valid_612616 = query.getOrDefault("Action")
  valid_612616 = validateParameter(valid_612616, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_612616 != nil:
    section.add "Action", valid_612616
  var valid_612617 = query.getOrDefault("Version")
  valid_612617 = validateParameter(valid_612617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612617 != nil:
    section.add "Version", valid_612617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612618 = header.getOrDefault("X-Amz-Signature")
  valid_612618 = validateParameter(valid_612618, JString, required = false,
                                 default = nil)
  if valid_612618 != nil:
    section.add "X-Amz-Signature", valid_612618
  var valid_612619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612619 = validateParameter(valid_612619, JString, required = false,
                                 default = nil)
  if valid_612619 != nil:
    section.add "X-Amz-Content-Sha256", valid_612619
  var valid_612620 = header.getOrDefault("X-Amz-Date")
  valid_612620 = validateParameter(valid_612620, JString, required = false,
                                 default = nil)
  if valid_612620 != nil:
    section.add "X-Amz-Date", valid_612620
  var valid_612621 = header.getOrDefault("X-Amz-Credential")
  valid_612621 = validateParameter(valid_612621, JString, required = false,
                                 default = nil)
  if valid_612621 != nil:
    section.add "X-Amz-Credential", valid_612621
  var valid_612622 = header.getOrDefault("X-Amz-Security-Token")
  valid_612622 = validateParameter(valid_612622, JString, required = false,
                                 default = nil)
  if valid_612622 != nil:
    section.add "X-Amz-Security-Token", valid_612622
  var valid_612623 = header.getOrDefault("X-Amz-Algorithm")
  valid_612623 = validateParameter(valid_612623, JString, required = false,
                                 default = nil)
  if valid_612623 != nil:
    section.add "X-Amz-Algorithm", valid_612623
  var valid_612624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612624 = validateParameter(valid_612624, JString, required = false,
                                 default = nil)
  if valid_612624 != nil:
    section.add "X-Amz-SignedHeaders", valid_612624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612625: Call_GetDeleteServiceSpecificCredential_612611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_612625.validator(path, query, header, formData, body)
  let scheme = call_612625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612625.url(scheme.get, call_612625.host, call_612625.base,
                         call_612625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612625, url, valid)

proc call*(call_612626: Call_GetDeleteServiceSpecificCredential_612611;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612627 = newJObject()
  add(query_612627, "UserName", newJString(UserName))
  add(query_612627, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_612627, "Action", newJString(Action))
  add(query_612627, "Version", newJString(Version))
  result = call_612626.call(nil, query_612627, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_612611(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_612612, base: "/",
    url: url_GetDeleteServiceSpecificCredential_612613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_612663 = ref object of OpenApiRestCall_610658
proc url_PostDeleteSigningCertificate_612665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSigningCertificate_612664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612666 = query.getOrDefault("Action")
  valid_612666 = validateParameter(valid_612666, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_612666 != nil:
    section.add "Action", valid_612666
  var valid_612667 = query.getOrDefault("Version")
  valid_612667 = validateParameter(valid_612667, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612667 != nil:
    section.add "Version", valid_612667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612668 = header.getOrDefault("X-Amz-Signature")
  valid_612668 = validateParameter(valid_612668, JString, required = false,
                                 default = nil)
  if valid_612668 != nil:
    section.add "X-Amz-Signature", valid_612668
  var valid_612669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612669 = validateParameter(valid_612669, JString, required = false,
                                 default = nil)
  if valid_612669 != nil:
    section.add "X-Amz-Content-Sha256", valid_612669
  var valid_612670 = header.getOrDefault("X-Amz-Date")
  valid_612670 = validateParameter(valid_612670, JString, required = false,
                                 default = nil)
  if valid_612670 != nil:
    section.add "X-Amz-Date", valid_612670
  var valid_612671 = header.getOrDefault("X-Amz-Credential")
  valid_612671 = validateParameter(valid_612671, JString, required = false,
                                 default = nil)
  if valid_612671 != nil:
    section.add "X-Amz-Credential", valid_612671
  var valid_612672 = header.getOrDefault("X-Amz-Security-Token")
  valid_612672 = validateParameter(valid_612672, JString, required = false,
                                 default = nil)
  if valid_612672 != nil:
    section.add "X-Amz-Security-Token", valid_612672
  var valid_612673 = header.getOrDefault("X-Amz-Algorithm")
  valid_612673 = validateParameter(valid_612673, JString, required = false,
                                 default = nil)
  if valid_612673 != nil:
    section.add "X-Amz-Algorithm", valid_612673
  var valid_612674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612674 = validateParameter(valid_612674, JString, required = false,
                                 default = nil)
  if valid_612674 != nil:
    section.add "X-Amz-SignedHeaders", valid_612674
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_612675 = formData.getOrDefault("CertificateId")
  valid_612675 = validateParameter(valid_612675, JString, required = true,
                                 default = nil)
  if valid_612675 != nil:
    section.add "CertificateId", valid_612675
  var valid_612676 = formData.getOrDefault("UserName")
  valid_612676 = validateParameter(valid_612676, JString, required = false,
                                 default = nil)
  if valid_612676 != nil:
    section.add "UserName", valid_612676
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612677: Call_PostDeleteSigningCertificate_612663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_612677.validator(path, query, header, formData, body)
  let scheme = call_612677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612677.url(scheme.get, call_612677.host, call_612677.base,
                         call_612677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612677, url, valid)

proc call*(call_612678: Call_PostDeleteSigningCertificate_612663;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612679 = newJObject()
  var formData_612680 = newJObject()
  add(formData_612680, "CertificateId", newJString(CertificateId))
  add(formData_612680, "UserName", newJString(UserName))
  add(query_612679, "Action", newJString(Action))
  add(query_612679, "Version", newJString(Version))
  result = call_612678.call(nil, query_612679, nil, formData_612680, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_612663(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_612664, base: "/",
    url: url_PostDeleteSigningCertificate_612665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_612646 = ref object of OpenApiRestCall_610658
proc url_GetDeleteSigningCertificate_612648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSigningCertificate_612647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_612649 = query.getOrDefault("UserName")
  valid_612649 = validateParameter(valid_612649, JString, required = false,
                                 default = nil)
  if valid_612649 != nil:
    section.add "UserName", valid_612649
  var valid_612650 = query.getOrDefault("Action")
  valid_612650 = validateParameter(valid_612650, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_612650 != nil:
    section.add "Action", valid_612650
  var valid_612651 = query.getOrDefault("Version")
  valid_612651 = validateParameter(valid_612651, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612651 != nil:
    section.add "Version", valid_612651
  var valid_612652 = query.getOrDefault("CertificateId")
  valid_612652 = validateParameter(valid_612652, JString, required = true,
                                 default = nil)
  if valid_612652 != nil:
    section.add "CertificateId", valid_612652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612653 = header.getOrDefault("X-Amz-Signature")
  valid_612653 = validateParameter(valid_612653, JString, required = false,
                                 default = nil)
  if valid_612653 != nil:
    section.add "X-Amz-Signature", valid_612653
  var valid_612654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612654 = validateParameter(valid_612654, JString, required = false,
                                 default = nil)
  if valid_612654 != nil:
    section.add "X-Amz-Content-Sha256", valid_612654
  var valid_612655 = header.getOrDefault("X-Amz-Date")
  valid_612655 = validateParameter(valid_612655, JString, required = false,
                                 default = nil)
  if valid_612655 != nil:
    section.add "X-Amz-Date", valid_612655
  var valid_612656 = header.getOrDefault("X-Amz-Credential")
  valid_612656 = validateParameter(valid_612656, JString, required = false,
                                 default = nil)
  if valid_612656 != nil:
    section.add "X-Amz-Credential", valid_612656
  var valid_612657 = header.getOrDefault("X-Amz-Security-Token")
  valid_612657 = validateParameter(valid_612657, JString, required = false,
                                 default = nil)
  if valid_612657 != nil:
    section.add "X-Amz-Security-Token", valid_612657
  var valid_612658 = header.getOrDefault("X-Amz-Algorithm")
  valid_612658 = validateParameter(valid_612658, JString, required = false,
                                 default = nil)
  if valid_612658 != nil:
    section.add "X-Amz-Algorithm", valid_612658
  var valid_612659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612659 = validateParameter(valid_612659, JString, required = false,
                                 default = nil)
  if valid_612659 != nil:
    section.add "X-Amz-SignedHeaders", valid_612659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612660: Call_GetDeleteSigningCertificate_612646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_612660.validator(path, query, header, formData, body)
  let scheme = call_612660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612660.url(scheme.get, call_612660.host, call_612660.base,
                         call_612660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612660, url, valid)

proc call*(call_612661: Call_GetDeleteSigningCertificate_612646;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  var query_612662 = newJObject()
  add(query_612662, "UserName", newJString(UserName))
  add(query_612662, "Action", newJString(Action))
  add(query_612662, "Version", newJString(Version))
  add(query_612662, "CertificateId", newJString(CertificateId))
  result = call_612661.call(nil, query_612662, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_612646(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_612647, base: "/",
    url: url_GetDeleteSigningCertificate_612648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_612697 = ref object of OpenApiRestCall_610658
proc url_PostDeleteUser_612699(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUser_612698(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612700 = query.getOrDefault("Action")
  valid_612700 = validateParameter(valid_612700, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_612700 != nil:
    section.add "Action", valid_612700
  var valid_612701 = query.getOrDefault("Version")
  valid_612701 = validateParameter(valid_612701, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612701 != nil:
    section.add "Version", valid_612701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612702 = header.getOrDefault("X-Amz-Signature")
  valid_612702 = validateParameter(valid_612702, JString, required = false,
                                 default = nil)
  if valid_612702 != nil:
    section.add "X-Amz-Signature", valid_612702
  var valid_612703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612703 = validateParameter(valid_612703, JString, required = false,
                                 default = nil)
  if valid_612703 != nil:
    section.add "X-Amz-Content-Sha256", valid_612703
  var valid_612704 = header.getOrDefault("X-Amz-Date")
  valid_612704 = validateParameter(valid_612704, JString, required = false,
                                 default = nil)
  if valid_612704 != nil:
    section.add "X-Amz-Date", valid_612704
  var valid_612705 = header.getOrDefault("X-Amz-Credential")
  valid_612705 = validateParameter(valid_612705, JString, required = false,
                                 default = nil)
  if valid_612705 != nil:
    section.add "X-Amz-Credential", valid_612705
  var valid_612706 = header.getOrDefault("X-Amz-Security-Token")
  valid_612706 = validateParameter(valid_612706, JString, required = false,
                                 default = nil)
  if valid_612706 != nil:
    section.add "X-Amz-Security-Token", valid_612706
  var valid_612707 = header.getOrDefault("X-Amz-Algorithm")
  valid_612707 = validateParameter(valid_612707, JString, required = false,
                                 default = nil)
  if valid_612707 != nil:
    section.add "X-Amz-Algorithm", valid_612707
  var valid_612708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612708 = validateParameter(valid_612708, JString, required = false,
                                 default = nil)
  if valid_612708 != nil:
    section.add "X-Amz-SignedHeaders", valid_612708
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612709 = formData.getOrDefault("UserName")
  valid_612709 = validateParameter(valid_612709, JString, required = true,
                                 default = nil)
  if valid_612709 != nil:
    section.add "UserName", valid_612709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612710: Call_PostDeleteUser_612697; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_612710.validator(path, query, header, formData, body)
  let scheme = call_612710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612710.url(scheme.get, call_612710.host, call_612710.base,
                         call_612710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612710, url, valid)

proc call*(call_612711: Call_PostDeleteUser_612697; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612712 = newJObject()
  var formData_612713 = newJObject()
  add(formData_612713, "UserName", newJString(UserName))
  add(query_612712, "Action", newJString(Action))
  add(query_612712, "Version", newJString(Version))
  result = call_612711.call(nil, query_612712, nil, formData_612713, nil)

var postDeleteUser* = Call_PostDeleteUser_612697(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_612698,
    base: "/", url: url_PostDeleteUser_612699, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_612681 = ref object of OpenApiRestCall_610658
proc url_GetDeleteUser_612683(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUser_612682(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612684 = query.getOrDefault("UserName")
  valid_612684 = validateParameter(valid_612684, JString, required = true,
                                 default = nil)
  if valid_612684 != nil:
    section.add "UserName", valid_612684
  var valid_612685 = query.getOrDefault("Action")
  valid_612685 = validateParameter(valid_612685, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_612685 != nil:
    section.add "Action", valid_612685
  var valid_612686 = query.getOrDefault("Version")
  valid_612686 = validateParameter(valid_612686, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612686 != nil:
    section.add "Version", valid_612686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612687 = header.getOrDefault("X-Amz-Signature")
  valid_612687 = validateParameter(valid_612687, JString, required = false,
                                 default = nil)
  if valid_612687 != nil:
    section.add "X-Amz-Signature", valid_612687
  var valid_612688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612688 = validateParameter(valid_612688, JString, required = false,
                                 default = nil)
  if valid_612688 != nil:
    section.add "X-Amz-Content-Sha256", valid_612688
  var valid_612689 = header.getOrDefault("X-Amz-Date")
  valid_612689 = validateParameter(valid_612689, JString, required = false,
                                 default = nil)
  if valid_612689 != nil:
    section.add "X-Amz-Date", valid_612689
  var valid_612690 = header.getOrDefault("X-Amz-Credential")
  valid_612690 = validateParameter(valid_612690, JString, required = false,
                                 default = nil)
  if valid_612690 != nil:
    section.add "X-Amz-Credential", valid_612690
  var valid_612691 = header.getOrDefault("X-Amz-Security-Token")
  valid_612691 = validateParameter(valid_612691, JString, required = false,
                                 default = nil)
  if valid_612691 != nil:
    section.add "X-Amz-Security-Token", valid_612691
  var valid_612692 = header.getOrDefault("X-Amz-Algorithm")
  valid_612692 = validateParameter(valid_612692, JString, required = false,
                                 default = nil)
  if valid_612692 != nil:
    section.add "X-Amz-Algorithm", valid_612692
  var valid_612693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612693 = validateParameter(valid_612693, JString, required = false,
                                 default = nil)
  if valid_612693 != nil:
    section.add "X-Amz-SignedHeaders", valid_612693
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612694: Call_GetDeleteUser_612681; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_612694.validator(path, query, header, formData, body)
  let scheme = call_612694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612694.url(scheme.get, call_612694.host, call_612694.base,
                         call_612694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612694, url, valid)

proc call*(call_612695: Call_GetDeleteUser_612681; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612696 = newJObject()
  add(query_612696, "UserName", newJString(UserName))
  add(query_612696, "Action", newJString(Action))
  add(query_612696, "Version", newJString(Version))
  result = call_612695.call(nil, query_612696, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_612681(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_612682,
    base: "/", url: url_GetDeleteUser_612683, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_612730 = ref object of OpenApiRestCall_610658
proc url_PostDeleteUserPermissionsBoundary_612732(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_612731(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612733 = query.getOrDefault("Action")
  valid_612733 = validateParameter(valid_612733, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_612733 != nil:
    section.add "Action", valid_612733
  var valid_612734 = query.getOrDefault("Version")
  valid_612734 = validateParameter(valid_612734, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612734 != nil:
    section.add "Version", valid_612734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612735 = header.getOrDefault("X-Amz-Signature")
  valid_612735 = validateParameter(valid_612735, JString, required = false,
                                 default = nil)
  if valid_612735 != nil:
    section.add "X-Amz-Signature", valid_612735
  var valid_612736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612736 = validateParameter(valid_612736, JString, required = false,
                                 default = nil)
  if valid_612736 != nil:
    section.add "X-Amz-Content-Sha256", valid_612736
  var valid_612737 = header.getOrDefault("X-Amz-Date")
  valid_612737 = validateParameter(valid_612737, JString, required = false,
                                 default = nil)
  if valid_612737 != nil:
    section.add "X-Amz-Date", valid_612737
  var valid_612738 = header.getOrDefault("X-Amz-Credential")
  valid_612738 = validateParameter(valid_612738, JString, required = false,
                                 default = nil)
  if valid_612738 != nil:
    section.add "X-Amz-Credential", valid_612738
  var valid_612739 = header.getOrDefault("X-Amz-Security-Token")
  valid_612739 = validateParameter(valid_612739, JString, required = false,
                                 default = nil)
  if valid_612739 != nil:
    section.add "X-Amz-Security-Token", valid_612739
  var valid_612740 = header.getOrDefault("X-Amz-Algorithm")
  valid_612740 = validateParameter(valid_612740, JString, required = false,
                                 default = nil)
  if valid_612740 != nil:
    section.add "X-Amz-Algorithm", valid_612740
  var valid_612741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612741 = validateParameter(valid_612741, JString, required = false,
                                 default = nil)
  if valid_612741 != nil:
    section.add "X-Amz-SignedHeaders", valid_612741
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612742 = formData.getOrDefault("UserName")
  valid_612742 = validateParameter(valid_612742, JString, required = true,
                                 default = nil)
  if valid_612742 != nil:
    section.add "UserName", valid_612742
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612743: Call_PostDeleteUserPermissionsBoundary_612730;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_612743.validator(path, query, header, formData, body)
  let scheme = call_612743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612743.url(scheme.get, call_612743.host, call_612743.base,
                         call_612743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612743, url, valid)

proc call*(call_612744: Call_PostDeleteUserPermissionsBoundary_612730;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612745 = newJObject()
  var formData_612746 = newJObject()
  add(formData_612746, "UserName", newJString(UserName))
  add(query_612745, "Action", newJString(Action))
  add(query_612745, "Version", newJString(Version))
  result = call_612744.call(nil, query_612745, nil, formData_612746, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_612730(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_612731, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_612732,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_612714 = ref object of OpenApiRestCall_610658
proc url_GetDeleteUserPermissionsBoundary_612716(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_612715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612717 = query.getOrDefault("UserName")
  valid_612717 = validateParameter(valid_612717, JString, required = true,
                                 default = nil)
  if valid_612717 != nil:
    section.add "UserName", valid_612717
  var valid_612718 = query.getOrDefault("Action")
  valid_612718 = validateParameter(valid_612718, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_612718 != nil:
    section.add "Action", valid_612718
  var valid_612719 = query.getOrDefault("Version")
  valid_612719 = validateParameter(valid_612719, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612719 != nil:
    section.add "Version", valid_612719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612720 = header.getOrDefault("X-Amz-Signature")
  valid_612720 = validateParameter(valid_612720, JString, required = false,
                                 default = nil)
  if valid_612720 != nil:
    section.add "X-Amz-Signature", valid_612720
  var valid_612721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612721 = validateParameter(valid_612721, JString, required = false,
                                 default = nil)
  if valid_612721 != nil:
    section.add "X-Amz-Content-Sha256", valid_612721
  var valid_612722 = header.getOrDefault("X-Amz-Date")
  valid_612722 = validateParameter(valid_612722, JString, required = false,
                                 default = nil)
  if valid_612722 != nil:
    section.add "X-Amz-Date", valid_612722
  var valid_612723 = header.getOrDefault("X-Amz-Credential")
  valid_612723 = validateParameter(valid_612723, JString, required = false,
                                 default = nil)
  if valid_612723 != nil:
    section.add "X-Amz-Credential", valid_612723
  var valid_612724 = header.getOrDefault("X-Amz-Security-Token")
  valid_612724 = validateParameter(valid_612724, JString, required = false,
                                 default = nil)
  if valid_612724 != nil:
    section.add "X-Amz-Security-Token", valid_612724
  var valid_612725 = header.getOrDefault("X-Amz-Algorithm")
  valid_612725 = validateParameter(valid_612725, JString, required = false,
                                 default = nil)
  if valid_612725 != nil:
    section.add "X-Amz-Algorithm", valid_612725
  var valid_612726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612726 = validateParameter(valid_612726, JString, required = false,
                                 default = nil)
  if valid_612726 != nil:
    section.add "X-Amz-SignedHeaders", valid_612726
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612727: Call_GetDeleteUserPermissionsBoundary_612714;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_612727.validator(path, query, header, formData, body)
  let scheme = call_612727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612727.url(scheme.get, call_612727.host, call_612727.base,
                         call_612727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612727, url, valid)

proc call*(call_612728: Call_GetDeleteUserPermissionsBoundary_612714;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612729 = newJObject()
  add(query_612729, "UserName", newJString(UserName))
  add(query_612729, "Action", newJString(Action))
  add(query_612729, "Version", newJString(Version))
  result = call_612728.call(nil, query_612729, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_612714(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_612715, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_612716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_612764 = ref object of OpenApiRestCall_610658
proc url_PostDeleteUserPolicy_612766(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPolicy_612765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612767 = query.getOrDefault("Action")
  valid_612767 = validateParameter(valid_612767, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_612767 != nil:
    section.add "Action", valid_612767
  var valid_612768 = query.getOrDefault("Version")
  valid_612768 = validateParameter(valid_612768, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612768 != nil:
    section.add "Version", valid_612768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612769 = header.getOrDefault("X-Amz-Signature")
  valid_612769 = validateParameter(valid_612769, JString, required = false,
                                 default = nil)
  if valid_612769 != nil:
    section.add "X-Amz-Signature", valid_612769
  var valid_612770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612770 = validateParameter(valid_612770, JString, required = false,
                                 default = nil)
  if valid_612770 != nil:
    section.add "X-Amz-Content-Sha256", valid_612770
  var valid_612771 = header.getOrDefault("X-Amz-Date")
  valid_612771 = validateParameter(valid_612771, JString, required = false,
                                 default = nil)
  if valid_612771 != nil:
    section.add "X-Amz-Date", valid_612771
  var valid_612772 = header.getOrDefault("X-Amz-Credential")
  valid_612772 = validateParameter(valid_612772, JString, required = false,
                                 default = nil)
  if valid_612772 != nil:
    section.add "X-Amz-Credential", valid_612772
  var valid_612773 = header.getOrDefault("X-Amz-Security-Token")
  valid_612773 = validateParameter(valid_612773, JString, required = false,
                                 default = nil)
  if valid_612773 != nil:
    section.add "X-Amz-Security-Token", valid_612773
  var valid_612774 = header.getOrDefault("X-Amz-Algorithm")
  valid_612774 = validateParameter(valid_612774, JString, required = false,
                                 default = nil)
  if valid_612774 != nil:
    section.add "X-Amz-Algorithm", valid_612774
  var valid_612775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612775 = validateParameter(valid_612775, JString, required = false,
                                 default = nil)
  if valid_612775 != nil:
    section.add "X-Amz-SignedHeaders", valid_612775
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_612776 = formData.getOrDefault("UserName")
  valid_612776 = validateParameter(valid_612776, JString, required = true,
                                 default = nil)
  if valid_612776 != nil:
    section.add "UserName", valid_612776
  var valid_612777 = formData.getOrDefault("PolicyName")
  valid_612777 = validateParameter(valid_612777, JString, required = true,
                                 default = nil)
  if valid_612777 != nil:
    section.add "PolicyName", valid_612777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612778: Call_PostDeleteUserPolicy_612764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612778.validator(path, query, header, formData, body)
  let scheme = call_612778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612778.url(scheme.get, call_612778.host, call_612778.base,
                         call_612778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612778, url, valid)

proc call*(call_612779: Call_PostDeleteUserPolicy_612764; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_612780 = newJObject()
  var formData_612781 = newJObject()
  add(formData_612781, "UserName", newJString(UserName))
  add(query_612780, "Action", newJString(Action))
  add(query_612780, "Version", newJString(Version))
  add(formData_612781, "PolicyName", newJString(PolicyName))
  result = call_612779.call(nil, query_612780, nil, formData_612781, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_612764(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_612765, base: "/",
    url: url_PostDeleteUserPolicy_612766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_612747 = ref object of OpenApiRestCall_610658
proc url_GetDeleteUserPolicy_612749(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPolicy_612748(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612750 = query.getOrDefault("UserName")
  valid_612750 = validateParameter(valid_612750, JString, required = true,
                                 default = nil)
  if valid_612750 != nil:
    section.add "UserName", valid_612750
  var valid_612751 = query.getOrDefault("PolicyName")
  valid_612751 = validateParameter(valid_612751, JString, required = true,
                                 default = nil)
  if valid_612751 != nil:
    section.add "PolicyName", valid_612751
  var valid_612752 = query.getOrDefault("Action")
  valid_612752 = validateParameter(valid_612752, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_612752 != nil:
    section.add "Action", valid_612752
  var valid_612753 = query.getOrDefault("Version")
  valid_612753 = validateParameter(valid_612753, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612753 != nil:
    section.add "Version", valid_612753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612754 = header.getOrDefault("X-Amz-Signature")
  valid_612754 = validateParameter(valid_612754, JString, required = false,
                                 default = nil)
  if valid_612754 != nil:
    section.add "X-Amz-Signature", valid_612754
  var valid_612755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612755 = validateParameter(valid_612755, JString, required = false,
                                 default = nil)
  if valid_612755 != nil:
    section.add "X-Amz-Content-Sha256", valid_612755
  var valid_612756 = header.getOrDefault("X-Amz-Date")
  valid_612756 = validateParameter(valid_612756, JString, required = false,
                                 default = nil)
  if valid_612756 != nil:
    section.add "X-Amz-Date", valid_612756
  var valid_612757 = header.getOrDefault("X-Amz-Credential")
  valid_612757 = validateParameter(valid_612757, JString, required = false,
                                 default = nil)
  if valid_612757 != nil:
    section.add "X-Amz-Credential", valid_612757
  var valid_612758 = header.getOrDefault("X-Amz-Security-Token")
  valid_612758 = validateParameter(valid_612758, JString, required = false,
                                 default = nil)
  if valid_612758 != nil:
    section.add "X-Amz-Security-Token", valid_612758
  var valid_612759 = header.getOrDefault("X-Amz-Algorithm")
  valid_612759 = validateParameter(valid_612759, JString, required = false,
                                 default = nil)
  if valid_612759 != nil:
    section.add "X-Amz-Algorithm", valid_612759
  var valid_612760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612760 = validateParameter(valid_612760, JString, required = false,
                                 default = nil)
  if valid_612760 != nil:
    section.add "X-Amz-SignedHeaders", valid_612760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612761: Call_GetDeleteUserPolicy_612747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612761.validator(path, query, header, formData, body)
  let scheme = call_612761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612761.url(scheme.get, call_612761.host, call_612761.base,
                         call_612761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612761, url, valid)

proc call*(call_612762: Call_GetDeleteUserPolicy_612747; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612763 = newJObject()
  add(query_612763, "UserName", newJString(UserName))
  add(query_612763, "PolicyName", newJString(PolicyName))
  add(query_612763, "Action", newJString(Action))
  add(query_612763, "Version", newJString(Version))
  result = call_612762.call(nil, query_612763, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_612747(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_612748, base: "/",
    url: url_GetDeleteUserPolicy_612749, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_612798 = ref object of OpenApiRestCall_610658
proc url_PostDeleteVirtualMFADevice_612800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVirtualMFADevice_612799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612801 = query.getOrDefault("Action")
  valid_612801 = validateParameter(valid_612801, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_612801 != nil:
    section.add "Action", valid_612801
  var valid_612802 = query.getOrDefault("Version")
  valid_612802 = validateParameter(valid_612802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612802 != nil:
    section.add "Version", valid_612802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612803 = header.getOrDefault("X-Amz-Signature")
  valid_612803 = validateParameter(valid_612803, JString, required = false,
                                 default = nil)
  if valid_612803 != nil:
    section.add "X-Amz-Signature", valid_612803
  var valid_612804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612804 = validateParameter(valid_612804, JString, required = false,
                                 default = nil)
  if valid_612804 != nil:
    section.add "X-Amz-Content-Sha256", valid_612804
  var valid_612805 = header.getOrDefault("X-Amz-Date")
  valid_612805 = validateParameter(valid_612805, JString, required = false,
                                 default = nil)
  if valid_612805 != nil:
    section.add "X-Amz-Date", valid_612805
  var valid_612806 = header.getOrDefault("X-Amz-Credential")
  valid_612806 = validateParameter(valid_612806, JString, required = false,
                                 default = nil)
  if valid_612806 != nil:
    section.add "X-Amz-Credential", valid_612806
  var valid_612807 = header.getOrDefault("X-Amz-Security-Token")
  valid_612807 = validateParameter(valid_612807, JString, required = false,
                                 default = nil)
  if valid_612807 != nil:
    section.add "X-Amz-Security-Token", valid_612807
  var valid_612808 = header.getOrDefault("X-Amz-Algorithm")
  valid_612808 = validateParameter(valid_612808, JString, required = false,
                                 default = nil)
  if valid_612808 != nil:
    section.add "X-Amz-Algorithm", valid_612808
  var valid_612809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612809 = validateParameter(valid_612809, JString, required = false,
                                 default = nil)
  if valid_612809 != nil:
    section.add "X-Amz-SignedHeaders", valid_612809
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_612810 = formData.getOrDefault("SerialNumber")
  valid_612810 = validateParameter(valid_612810, JString, required = true,
                                 default = nil)
  if valid_612810 != nil:
    section.add "SerialNumber", valid_612810
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612811: Call_PostDeleteVirtualMFADevice_612798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_612811.validator(path, query, header, formData, body)
  let scheme = call_612811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612811.url(scheme.get, call_612811.host, call_612811.base,
                         call_612811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612811, url, valid)

proc call*(call_612812: Call_PostDeleteVirtualMFADevice_612798;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612813 = newJObject()
  var formData_612814 = newJObject()
  add(formData_612814, "SerialNumber", newJString(SerialNumber))
  add(query_612813, "Action", newJString(Action))
  add(query_612813, "Version", newJString(Version))
  result = call_612812.call(nil, query_612813, nil, formData_612814, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_612798(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_612799, base: "/",
    url: url_PostDeleteVirtualMFADevice_612800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_612782 = ref object of OpenApiRestCall_610658
proc url_GetDeleteVirtualMFADevice_612784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVirtualMFADevice_612783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_612785 = query.getOrDefault("SerialNumber")
  valid_612785 = validateParameter(valid_612785, JString, required = true,
                                 default = nil)
  if valid_612785 != nil:
    section.add "SerialNumber", valid_612785
  var valid_612786 = query.getOrDefault("Action")
  valid_612786 = validateParameter(valid_612786, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_612786 != nil:
    section.add "Action", valid_612786
  var valid_612787 = query.getOrDefault("Version")
  valid_612787 = validateParameter(valid_612787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612787 != nil:
    section.add "Version", valid_612787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612788 = header.getOrDefault("X-Amz-Signature")
  valid_612788 = validateParameter(valid_612788, JString, required = false,
                                 default = nil)
  if valid_612788 != nil:
    section.add "X-Amz-Signature", valid_612788
  var valid_612789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612789 = validateParameter(valid_612789, JString, required = false,
                                 default = nil)
  if valid_612789 != nil:
    section.add "X-Amz-Content-Sha256", valid_612789
  var valid_612790 = header.getOrDefault("X-Amz-Date")
  valid_612790 = validateParameter(valid_612790, JString, required = false,
                                 default = nil)
  if valid_612790 != nil:
    section.add "X-Amz-Date", valid_612790
  var valid_612791 = header.getOrDefault("X-Amz-Credential")
  valid_612791 = validateParameter(valid_612791, JString, required = false,
                                 default = nil)
  if valid_612791 != nil:
    section.add "X-Amz-Credential", valid_612791
  var valid_612792 = header.getOrDefault("X-Amz-Security-Token")
  valid_612792 = validateParameter(valid_612792, JString, required = false,
                                 default = nil)
  if valid_612792 != nil:
    section.add "X-Amz-Security-Token", valid_612792
  var valid_612793 = header.getOrDefault("X-Amz-Algorithm")
  valid_612793 = validateParameter(valid_612793, JString, required = false,
                                 default = nil)
  if valid_612793 != nil:
    section.add "X-Amz-Algorithm", valid_612793
  var valid_612794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612794 = validateParameter(valid_612794, JString, required = false,
                                 default = nil)
  if valid_612794 != nil:
    section.add "X-Amz-SignedHeaders", valid_612794
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612795: Call_GetDeleteVirtualMFADevice_612782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_612795.validator(path, query, header, formData, body)
  let scheme = call_612795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612795.url(scheme.get, call_612795.host, call_612795.base,
                         call_612795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612795, url, valid)

proc call*(call_612796: Call_GetDeleteVirtualMFADevice_612782;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612797 = newJObject()
  add(query_612797, "SerialNumber", newJString(SerialNumber))
  add(query_612797, "Action", newJString(Action))
  add(query_612797, "Version", newJString(Version))
  result = call_612796.call(nil, query_612797, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_612782(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_612783, base: "/",
    url: url_GetDeleteVirtualMFADevice_612784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_612832 = ref object of OpenApiRestCall_610658
proc url_PostDetachGroupPolicy_612834(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachGroupPolicy_612833(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612835 = query.getOrDefault("Action")
  valid_612835 = validateParameter(valid_612835, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_612835 != nil:
    section.add "Action", valid_612835
  var valid_612836 = query.getOrDefault("Version")
  valid_612836 = validateParameter(valid_612836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612836 != nil:
    section.add "Version", valid_612836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612837 = header.getOrDefault("X-Amz-Signature")
  valid_612837 = validateParameter(valid_612837, JString, required = false,
                                 default = nil)
  if valid_612837 != nil:
    section.add "X-Amz-Signature", valid_612837
  var valid_612838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612838 = validateParameter(valid_612838, JString, required = false,
                                 default = nil)
  if valid_612838 != nil:
    section.add "X-Amz-Content-Sha256", valid_612838
  var valid_612839 = header.getOrDefault("X-Amz-Date")
  valid_612839 = validateParameter(valid_612839, JString, required = false,
                                 default = nil)
  if valid_612839 != nil:
    section.add "X-Amz-Date", valid_612839
  var valid_612840 = header.getOrDefault("X-Amz-Credential")
  valid_612840 = validateParameter(valid_612840, JString, required = false,
                                 default = nil)
  if valid_612840 != nil:
    section.add "X-Amz-Credential", valid_612840
  var valid_612841 = header.getOrDefault("X-Amz-Security-Token")
  valid_612841 = validateParameter(valid_612841, JString, required = false,
                                 default = nil)
  if valid_612841 != nil:
    section.add "X-Amz-Security-Token", valid_612841
  var valid_612842 = header.getOrDefault("X-Amz-Algorithm")
  valid_612842 = validateParameter(valid_612842, JString, required = false,
                                 default = nil)
  if valid_612842 != nil:
    section.add "X-Amz-Algorithm", valid_612842
  var valid_612843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612843 = validateParameter(valid_612843, JString, required = false,
                                 default = nil)
  if valid_612843 != nil:
    section.add "X-Amz-SignedHeaders", valid_612843
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_612844 = formData.getOrDefault("GroupName")
  valid_612844 = validateParameter(valid_612844, JString, required = true,
                                 default = nil)
  if valid_612844 != nil:
    section.add "GroupName", valid_612844
  var valid_612845 = formData.getOrDefault("PolicyArn")
  valid_612845 = validateParameter(valid_612845, JString, required = true,
                                 default = nil)
  if valid_612845 != nil:
    section.add "PolicyArn", valid_612845
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612846: Call_PostDetachGroupPolicy_612832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612846.validator(path, query, header, formData, body)
  let scheme = call_612846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612846.url(scheme.get, call_612846.host, call_612846.base,
                         call_612846.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612846, url, valid)

proc call*(call_612847: Call_PostDetachGroupPolicy_612832; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612848 = newJObject()
  var formData_612849 = newJObject()
  add(formData_612849, "GroupName", newJString(GroupName))
  add(formData_612849, "PolicyArn", newJString(PolicyArn))
  add(query_612848, "Action", newJString(Action))
  add(query_612848, "Version", newJString(Version))
  result = call_612847.call(nil, query_612848, nil, formData_612849, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_612832(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_612833, base: "/",
    url: url_PostDetachGroupPolicy_612834, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_612815 = ref object of OpenApiRestCall_610658
proc url_GetDetachGroupPolicy_612817(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachGroupPolicy_612816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_612818 = query.getOrDefault("GroupName")
  valid_612818 = validateParameter(valid_612818, JString, required = true,
                                 default = nil)
  if valid_612818 != nil:
    section.add "GroupName", valid_612818
  var valid_612819 = query.getOrDefault("PolicyArn")
  valid_612819 = validateParameter(valid_612819, JString, required = true,
                                 default = nil)
  if valid_612819 != nil:
    section.add "PolicyArn", valid_612819
  var valid_612820 = query.getOrDefault("Action")
  valid_612820 = validateParameter(valid_612820, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_612820 != nil:
    section.add "Action", valid_612820
  var valid_612821 = query.getOrDefault("Version")
  valid_612821 = validateParameter(valid_612821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612821 != nil:
    section.add "Version", valid_612821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612822 = header.getOrDefault("X-Amz-Signature")
  valid_612822 = validateParameter(valid_612822, JString, required = false,
                                 default = nil)
  if valid_612822 != nil:
    section.add "X-Amz-Signature", valid_612822
  var valid_612823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612823 = validateParameter(valid_612823, JString, required = false,
                                 default = nil)
  if valid_612823 != nil:
    section.add "X-Amz-Content-Sha256", valid_612823
  var valid_612824 = header.getOrDefault("X-Amz-Date")
  valid_612824 = validateParameter(valid_612824, JString, required = false,
                                 default = nil)
  if valid_612824 != nil:
    section.add "X-Amz-Date", valid_612824
  var valid_612825 = header.getOrDefault("X-Amz-Credential")
  valid_612825 = validateParameter(valid_612825, JString, required = false,
                                 default = nil)
  if valid_612825 != nil:
    section.add "X-Amz-Credential", valid_612825
  var valid_612826 = header.getOrDefault("X-Amz-Security-Token")
  valid_612826 = validateParameter(valid_612826, JString, required = false,
                                 default = nil)
  if valid_612826 != nil:
    section.add "X-Amz-Security-Token", valid_612826
  var valid_612827 = header.getOrDefault("X-Amz-Algorithm")
  valid_612827 = validateParameter(valid_612827, JString, required = false,
                                 default = nil)
  if valid_612827 != nil:
    section.add "X-Amz-Algorithm", valid_612827
  var valid_612828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612828 = validateParameter(valid_612828, JString, required = false,
                                 default = nil)
  if valid_612828 != nil:
    section.add "X-Amz-SignedHeaders", valid_612828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612829: Call_GetDetachGroupPolicy_612815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612829.validator(path, query, header, formData, body)
  let scheme = call_612829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612829.url(scheme.get, call_612829.host, call_612829.base,
                         call_612829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612829, url, valid)

proc call*(call_612830: Call_GetDetachGroupPolicy_612815; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612831 = newJObject()
  add(query_612831, "GroupName", newJString(GroupName))
  add(query_612831, "PolicyArn", newJString(PolicyArn))
  add(query_612831, "Action", newJString(Action))
  add(query_612831, "Version", newJString(Version))
  result = call_612830.call(nil, query_612831, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_612815(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_612816, base: "/",
    url: url_GetDetachGroupPolicy_612817, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_612867 = ref object of OpenApiRestCall_610658
proc url_PostDetachRolePolicy_612869(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachRolePolicy_612868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612870 = query.getOrDefault("Action")
  valid_612870 = validateParameter(valid_612870, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_612870 != nil:
    section.add "Action", valid_612870
  var valid_612871 = query.getOrDefault("Version")
  valid_612871 = validateParameter(valid_612871, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612871 != nil:
    section.add "Version", valid_612871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612872 = header.getOrDefault("X-Amz-Signature")
  valid_612872 = validateParameter(valid_612872, JString, required = false,
                                 default = nil)
  if valid_612872 != nil:
    section.add "X-Amz-Signature", valid_612872
  var valid_612873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612873 = validateParameter(valid_612873, JString, required = false,
                                 default = nil)
  if valid_612873 != nil:
    section.add "X-Amz-Content-Sha256", valid_612873
  var valid_612874 = header.getOrDefault("X-Amz-Date")
  valid_612874 = validateParameter(valid_612874, JString, required = false,
                                 default = nil)
  if valid_612874 != nil:
    section.add "X-Amz-Date", valid_612874
  var valid_612875 = header.getOrDefault("X-Amz-Credential")
  valid_612875 = validateParameter(valid_612875, JString, required = false,
                                 default = nil)
  if valid_612875 != nil:
    section.add "X-Amz-Credential", valid_612875
  var valid_612876 = header.getOrDefault("X-Amz-Security-Token")
  valid_612876 = validateParameter(valid_612876, JString, required = false,
                                 default = nil)
  if valid_612876 != nil:
    section.add "X-Amz-Security-Token", valid_612876
  var valid_612877 = header.getOrDefault("X-Amz-Algorithm")
  valid_612877 = validateParameter(valid_612877, JString, required = false,
                                 default = nil)
  if valid_612877 != nil:
    section.add "X-Amz-Algorithm", valid_612877
  var valid_612878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612878 = validateParameter(valid_612878, JString, required = false,
                                 default = nil)
  if valid_612878 != nil:
    section.add "X-Amz-SignedHeaders", valid_612878
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_612879 = formData.getOrDefault("RoleName")
  valid_612879 = validateParameter(valid_612879, JString, required = true,
                                 default = nil)
  if valid_612879 != nil:
    section.add "RoleName", valid_612879
  var valid_612880 = formData.getOrDefault("PolicyArn")
  valid_612880 = validateParameter(valid_612880, JString, required = true,
                                 default = nil)
  if valid_612880 != nil:
    section.add "PolicyArn", valid_612880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612881: Call_PostDetachRolePolicy_612867; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612881.validator(path, query, header, formData, body)
  let scheme = call_612881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612881.url(scheme.get, call_612881.host, call_612881.base,
                         call_612881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612881, url, valid)

proc call*(call_612882: Call_PostDetachRolePolicy_612867; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612883 = newJObject()
  var formData_612884 = newJObject()
  add(formData_612884, "RoleName", newJString(RoleName))
  add(formData_612884, "PolicyArn", newJString(PolicyArn))
  add(query_612883, "Action", newJString(Action))
  add(query_612883, "Version", newJString(Version))
  result = call_612882.call(nil, query_612883, nil, formData_612884, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_612867(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_612868, base: "/",
    url: url_PostDetachRolePolicy_612869, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_612850 = ref object of OpenApiRestCall_610658
proc url_GetDetachRolePolicy_612852(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachRolePolicy_612851(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_612853 = query.getOrDefault("PolicyArn")
  valid_612853 = validateParameter(valid_612853, JString, required = true,
                                 default = nil)
  if valid_612853 != nil:
    section.add "PolicyArn", valid_612853
  var valid_612854 = query.getOrDefault("RoleName")
  valid_612854 = validateParameter(valid_612854, JString, required = true,
                                 default = nil)
  if valid_612854 != nil:
    section.add "RoleName", valid_612854
  var valid_612855 = query.getOrDefault("Action")
  valid_612855 = validateParameter(valid_612855, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_612855 != nil:
    section.add "Action", valid_612855
  var valid_612856 = query.getOrDefault("Version")
  valid_612856 = validateParameter(valid_612856, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612856 != nil:
    section.add "Version", valid_612856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612857 = header.getOrDefault("X-Amz-Signature")
  valid_612857 = validateParameter(valid_612857, JString, required = false,
                                 default = nil)
  if valid_612857 != nil:
    section.add "X-Amz-Signature", valid_612857
  var valid_612858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612858 = validateParameter(valid_612858, JString, required = false,
                                 default = nil)
  if valid_612858 != nil:
    section.add "X-Amz-Content-Sha256", valid_612858
  var valid_612859 = header.getOrDefault("X-Amz-Date")
  valid_612859 = validateParameter(valid_612859, JString, required = false,
                                 default = nil)
  if valid_612859 != nil:
    section.add "X-Amz-Date", valid_612859
  var valid_612860 = header.getOrDefault("X-Amz-Credential")
  valid_612860 = validateParameter(valid_612860, JString, required = false,
                                 default = nil)
  if valid_612860 != nil:
    section.add "X-Amz-Credential", valid_612860
  var valid_612861 = header.getOrDefault("X-Amz-Security-Token")
  valid_612861 = validateParameter(valid_612861, JString, required = false,
                                 default = nil)
  if valid_612861 != nil:
    section.add "X-Amz-Security-Token", valid_612861
  var valid_612862 = header.getOrDefault("X-Amz-Algorithm")
  valid_612862 = validateParameter(valid_612862, JString, required = false,
                                 default = nil)
  if valid_612862 != nil:
    section.add "X-Amz-Algorithm", valid_612862
  var valid_612863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612863 = validateParameter(valid_612863, JString, required = false,
                                 default = nil)
  if valid_612863 != nil:
    section.add "X-Amz-SignedHeaders", valid_612863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612864: Call_GetDetachRolePolicy_612850; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612864.validator(path, query, header, formData, body)
  let scheme = call_612864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612864.url(scheme.get, call_612864.host, call_612864.base,
                         call_612864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612864, url, valid)

proc call*(call_612865: Call_GetDetachRolePolicy_612850; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612866 = newJObject()
  add(query_612866, "PolicyArn", newJString(PolicyArn))
  add(query_612866, "RoleName", newJString(RoleName))
  add(query_612866, "Action", newJString(Action))
  add(query_612866, "Version", newJString(Version))
  result = call_612865.call(nil, query_612866, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_612850(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_612851, base: "/",
    url: url_GetDetachRolePolicy_612852, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_612902 = ref object of OpenApiRestCall_610658
proc url_PostDetachUserPolicy_612904(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachUserPolicy_612903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612905 = query.getOrDefault("Action")
  valid_612905 = validateParameter(valid_612905, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_612905 != nil:
    section.add "Action", valid_612905
  var valid_612906 = query.getOrDefault("Version")
  valid_612906 = validateParameter(valid_612906, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612906 != nil:
    section.add "Version", valid_612906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612907 = header.getOrDefault("X-Amz-Signature")
  valid_612907 = validateParameter(valid_612907, JString, required = false,
                                 default = nil)
  if valid_612907 != nil:
    section.add "X-Amz-Signature", valid_612907
  var valid_612908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612908 = validateParameter(valid_612908, JString, required = false,
                                 default = nil)
  if valid_612908 != nil:
    section.add "X-Amz-Content-Sha256", valid_612908
  var valid_612909 = header.getOrDefault("X-Amz-Date")
  valid_612909 = validateParameter(valid_612909, JString, required = false,
                                 default = nil)
  if valid_612909 != nil:
    section.add "X-Amz-Date", valid_612909
  var valid_612910 = header.getOrDefault("X-Amz-Credential")
  valid_612910 = validateParameter(valid_612910, JString, required = false,
                                 default = nil)
  if valid_612910 != nil:
    section.add "X-Amz-Credential", valid_612910
  var valid_612911 = header.getOrDefault("X-Amz-Security-Token")
  valid_612911 = validateParameter(valid_612911, JString, required = false,
                                 default = nil)
  if valid_612911 != nil:
    section.add "X-Amz-Security-Token", valid_612911
  var valid_612912 = header.getOrDefault("X-Amz-Algorithm")
  valid_612912 = validateParameter(valid_612912, JString, required = false,
                                 default = nil)
  if valid_612912 != nil:
    section.add "X-Amz-Algorithm", valid_612912
  var valid_612913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612913 = validateParameter(valid_612913, JString, required = false,
                                 default = nil)
  if valid_612913 != nil:
    section.add "X-Amz-SignedHeaders", valid_612913
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_612914 = formData.getOrDefault("PolicyArn")
  valid_612914 = validateParameter(valid_612914, JString, required = true,
                                 default = nil)
  if valid_612914 != nil:
    section.add "PolicyArn", valid_612914
  var valid_612915 = formData.getOrDefault("UserName")
  valid_612915 = validateParameter(valid_612915, JString, required = true,
                                 default = nil)
  if valid_612915 != nil:
    section.add "UserName", valid_612915
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612916: Call_PostDetachUserPolicy_612902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612916.validator(path, query, header, formData, body)
  let scheme = call_612916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612916.url(scheme.get, call_612916.host, call_612916.base,
                         call_612916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612916, url, valid)

proc call*(call_612917: Call_PostDetachUserPolicy_612902; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612918 = newJObject()
  var formData_612919 = newJObject()
  add(formData_612919, "PolicyArn", newJString(PolicyArn))
  add(formData_612919, "UserName", newJString(UserName))
  add(query_612918, "Action", newJString(Action))
  add(query_612918, "Version", newJString(Version))
  result = call_612917.call(nil, query_612918, nil, formData_612919, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_612902(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_612903, base: "/",
    url: url_PostDetachUserPolicy_612904, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_612885 = ref object of OpenApiRestCall_610658
proc url_GetDetachUserPolicy_612887(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachUserPolicy_612886(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612888 = query.getOrDefault("UserName")
  valid_612888 = validateParameter(valid_612888, JString, required = true,
                                 default = nil)
  if valid_612888 != nil:
    section.add "UserName", valid_612888
  var valid_612889 = query.getOrDefault("PolicyArn")
  valid_612889 = validateParameter(valid_612889, JString, required = true,
                                 default = nil)
  if valid_612889 != nil:
    section.add "PolicyArn", valid_612889
  var valid_612890 = query.getOrDefault("Action")
  valid_612890 = validateParameter(valid_612890, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_612890 != nil:
    section.add "Action", valid_612890
  var valid_612891 = query.getOrDefault("Version")
  valid_612891 = validateParameter(valid_612891, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612891 != nil:
    section.add "Version", valid_612891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612892 = header.getOrDefault("X-Amz-Signature")
  valid_612892 = validateParameter(valid_612892, JString, required = false,
                                 default = nil)
  if valid_612892 != nil:
    section.add "X-Amz-Signature", valid_612892
  var valid_612893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612893 = validateParameter(valid_612893, JString, required = false,
                                 default = nil)
  if valid_612893 != nil:
    section.add "X-Amz-Content-Sha256", valid_612893
  var valid_612894 = header.getOrDefault("X-Amz-Date")
  valid_612894 = validateParameter(valid_612894, JString, required = false,
                                 default = nil)
  if valid_612894 != nil:
    section.add "X-Amz-Date", valid_612894
  var valid_612895 = header.getOrDefault("X-Amz-Credential")
  valid_612895 = validateParameter(valid_612895, JString, required = false,
                                 default = nil)
  if valid_612895 != nil:
    section.add "X-Amz-Credential", valid_612895
  var valid_612896 = header.getOrDefault("X-Amz-Security-Token")
  valid_612896 = validateParameter(valid_612896, JString, required = false,
                                 default = nil)
  if valid_612896 != nil:
    section.add "X-Amz-Security-Token", valid_612896
  var valid_612897 = header.getOrDefault("X-Amz-Algorithm")
  valid_612897 = validateParameter(valid_612897, JString, required = false,
                                 default = nil)
  if valid_612897 != nil:
    section.add "X-Amz-Algorithm", valid_612897
  var valid_612898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612898 = validateParameter(valid_612898, JString, required = false,
                                 default = nil)
  if valid_612898 != nil:
    section.add "X-Amz-SignedHeaders", valid_612898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612899: Call_GetDetachUserPolicy_612885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_612899.validator(path, query, header, formData, body)
  let scheme = call_612899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612899.url(scheme.get, call_612899.host, call_612899.base,
                         call_612899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612899, url, valid)

proc call*(call_612900: Call_GetDetachUserPolicy_612885; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612901 = newJObject()
  add(query_612901, "UserName", newJString(UserName))
  add(query_612901, "PolicyArn", newJString(PolicyArn))
  add(query_612901, "Action", newJString(Action))
  add(query_612901, "Version", newJString(Version))
  result = call_612900.call(nil, query_612901, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_612885(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_612886, base: "/",
    url: url_GetDetachUserPolicy_612887, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_612939 = ref object of OpenApiRestCall_610658
proc url_PostEnableMFADevice_612941(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMFADevice_612940(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612942 = query.getOrDefault("Action")
  valid_612942 = validateParameter(valid_612942, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_612942 != nil:
    section.add "Action", valid_612942
  var valid_612943 = query.getOrDefault("Version")
  valid_612943 = validateParameter(valid_612943, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612943 != nil:
    section.add "Version", valid_612943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612944 = header.getOrDefault("X-Amz-Signature")
  valid_612944 = validateParameter(valid_612944, JString, required = false,
                                 default = nil)
  if valid_612944 != nil:
    section.add "X-Amz-Signature", valid_612944
  var valid_612945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612945 = validateParameter(valid_612945, JString, required = false,
                                 default = nil)
  if valid_612945 != nil:
    section.add "X-Amz-Content-Sha256", valid_612945
  var valid_612946 = header.getOrDefault("X-Amz-Date")
  valid_612946 = validateParameter(valid_612946, JString, required = false,
                                 default = nil)
  if valid_612946 != nil:
    section.add "X-Amz-Date", valid_612946
  var valid_612947 = header.getOrDefault("X-Amz-Credential")
  valid_612947 = validateParameter(valid_612947, JString, required = false,
                                 default = nil)
  if valid_612947 != nil:
    section.add "X-Amz-Credential", valid_612947
  var valid_612948 = header.getOrDefault("X-Amz-Security-Token")
  valid_612948 = validateParameter(valid_612948, JString, required = false,
                                 default = nil)
  if valid_612948 != nil:
    section.add "X-Amz-Security-Token", valid_612948
  var valid_612949 = header.getOrDefault("X-Amz-Algorithm")
  valid_612949 = validateParameter(valid_612949, JString, required = false,
                                 default = nil)
  if valid_612949 != nil:
    section.add "X-Amz-Algorithm", valid_612949
  var valid_612950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612950 = validateParameter(valid_612950, JString, required = false,
                                 default = nil)
  if valid_612950 != nil:
    section.add "X-Amz-SignedHeaders", valid_612950
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_612951 = formData.getOrDefault("AuthenticationCode2")
  valid_612951 = validateParameter(valid_612951, JString, required = true,
                                 default = nil)
  if valid_612951 != nil:
    section.add "AuthenticationCode2", valid_612951
  var valid_612952 = formData.getOrDefault("SerialNumber")
  valid_612952 = validateParameter(valid_612952, JString, required = true,
                                 default = nil)
  if valid_612952 != nil:
    section.add "SerialNumber", valid_612952
  var valid_612953 = formData.getOrDefault("UserName")
  valid_612953 = validateParameter(valid_612953, JString, required = true,
                                 default = nil)
  if valid_612953 != nil:
    section.add "UserName", valid_612953
  var valid_612954 = formData.getOrDefault("AuthenticationCode1")
  valid_612954 = validateParameter(valid_612954, JString, required = true,
                                 default = nil)
  if valid_612954 != nil:
    section.add "AuthenticationCode1", valid_612954
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612955: Call_PostEnableMFADevice_612939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_612955.validator(path, query, header, formData, body)
  let scheme = call_612955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612955.url(scheme.get, call_612955.host, call_612955.base,
                         call_612955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612955, url, valid)

proc call*(call_612956: Call_PostEnableMFADevice_612939;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_612957 = newJObject()
  var formData_612958 = newJObject()
  add(formData_612958, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_612958, "SerialNumber", newJString(SerialNumber))
  add(formData_612958, "UserName", newJString(UserName))
  add(query_612957, "Action", newJString(Action))
  add(formData_612958, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_612957, "Version", newJString(Version))
  result = call_612956.call(nil, query_612957, nil, formData_612958, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_612939(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_612940, base: "/",
    url: url_PostEnableMFADevice_612941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_612920 = ref object of OpenApiRestCall_610658
proc url_GetEnableMFADevice_612922(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMFADevice_612921(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_612923 = query.getOrDefault("UserName")
  valid_612923 = validateParameter(valid_612923, JString, required = true,
                                 default = nil)
  if valid_612923 != nil:
    section.add "UserName", valid_612923
  var valid_612924 = query.getOrDefault("AuthenticationCode1")
  valid_612924 = validateParameter(valid_612924, JString, required = true,
                                 default = nil)
  if valid_612924 != nil:
    section.add "AuthenticationCode1", valid_612924
  var valid_612925 = query.getOrDefault("AuthenticationCode2")
  valid_612925 = validateParameter(valid_612925, JString, required = true,
                                 default = nil)
  if valid_612925 != nil:
    section.add "AuthenticationCode2", valid_612925
  var valid_612926 = query.getOrDefault("SerialNumber")
  valid_612926 = validateParameter(valid_612926, JString, required = true,
                                 default = nil)
  if valid_612926 != nil:
    section.add "SerialNumber", valid_612926
  var valid_612927 = query.getOrDefault("Action")
  valid_612927 = validateParameter(valid_612927, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_612927 != nil:
    section.add "Action", valid_612927
  var valid_612928 = query.getOrDefault("Version")
  valid_612928 = validateParameter(valid_612928, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612928 != nil:
    section.add "Version", valid_612928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612929 = header.getOrDefault("X-Amz-Signature")
  valid_612929 = validateParameter(valid_612929, JString, required = false,
                                 default = nil)
  if valid_612929 != nil:
    section.add "X-Amz-Signature", valid_612929
  var valid_612930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612930 = validateParameter(valid_612930, JString, required = false,
                                 default = nil)
  if valid_612930 != nil:
    section.add "X-Amz-Content-Sha256", valid_612930
  var valid_612931 = header.getOrDefault("X-Amz-Date")
  valid_612931 = validateParameter(valid_612931, JString, required = false,
                                 default = nil)
  if valid_612931 != nil:
    section.add "X-Amz-Date", valid_612931
  var valid_612932 = header.getOrDefault("X-Amz-Credential")
  valid_612932 = validateParameter(valid_612932, JString, required = false,
                                 default = nil)
  if valid_612932 != nil:
    section.add "X-Amz-Credential", valid_612932
  var valid_612933 = header.getOrDefault("X-Amz-Security-Token")
  valid_612933 = validateParameter(valid_612933, JString, required = false,
                                 default = nil)
  if valid_612933 != nil:
    section.add "X-Amz-Security-Token", valid_612933
  var valid_612934 = header.getOrDefault("X-Amz-Algorithm")
  valid_612934 = validateParameter(valid_612934, JString, required = false,
                                 default = nil)
  if valid_612934 != nil:
    section.add "X-Amz-Algorithm", valid_612934
  var valid_612935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612935 = validateParameter(valid_612935, JString, required = false,
                                 default = nil)
  if valid_612935 != nil:
    section.add "X-Amz-SignedHeaders", valid_612935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612936: Call_GetEnableMFADevice_612920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_612936.validator(path, query, header, formData, body)
  let scheme = call_612936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612936.url(scheme.get, call_612936.host, call_612936.base,
                         call_612936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612936, url, valid)

proc call*(call_612937: Call_GetEnableMFADevice_612920; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612938 = newJObject()
  add(query_612938, "UserName", newJString(UserName))
  add(query_612938, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_612938, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_612938, "SerialNumber", newJString(SerialNumber))
  add(query_612938, "Action", newJString(Action))
  add(query_612938, "Version", newJString(Version))
  result = call_612937.call(nil, query_612938, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_612920(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_612921,
    base: "/", url: url_GetEnableMFADevice_612922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_612974 = ref object of OpenApiRestCall_610658
proc url_PostGenerateCredentialReport_612976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateCredentialReport_612975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612977 = query.getOrDefault("Action")
  valid_612977 = validateParameter(valid_612977, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_612977 != nil:
    section.add "Action", valid_612977
  var valid_612978 = query.getOrDefault("Version")
  valid_612978 = validateParameter(valid_612978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612978 != nil:
    section.add "Version", valid_612978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612979 = header.getOrDefault("X-Amz-Signature")
  valid_612979 = validateParameter(valid_612979, JString, required = false,
                                 default = nil)
  if valid_612979 != nil:
    section.add "X-Amz-Signature", valid_612979
  var valid_612980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612980 = validateParameter(valid_612980, JString, required = false,
                                 default = nil)
  if valid_612980 != nil:
    section.add "X-Amz-Content-Sha256", valid_612980
  var valid_612981 = header.getOrDefault("X-Amz-Date")
  valid_612981 = validateParameter(valid_612981, JString, required = false,
                                 default = nil)
  if valid_612981 != nil:
    section.add "X-Amz-Date", valid_612981
  var valid_612982 = header.getOrDefault("X-Amz-Credential")
  valid_612982 = validateParameter(valid_612982, JString, required = false,
                                 default = nil)
  if valid_612982 != nil:
    section.add "X-Amz-Credential", valid_612982
  var valid_612983 = header.getOrDefault("X-Amz-Security-Token")
  valid_612983 = validateParameter(valid_612983, JString, required = false,
                                 default = nil)
  if valid_612983 != nil:
    section.add "X-Amz-Security-Token", valid_612983
  var valid_612984 = header.getOrDefault("X-Amz-Algorithm")
  valid_612984 = validateParameter(valid_612984, JString, required = false,
                                 default = nil)
  if valid_612984 != nil:
    section.add "X-Amz-Algorithm", valid_612984
  var valid_612985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612985 = validateParameter(valid_612985, JString, required = false,
                                 default = nil)
  if valid_612985 != nil:
    section.add "X-Amz-SignedHeaders", valid_612985
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612986: Call_PostGenerateCredentialReport_612974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612986.validator(path, query, header, formData, body)
  let scheme = call_612986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612986.url(scheme.get, call_612986.host, call_612986.base,
                         call_612986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612986, url, valid)

proc call*(call_612987: Call_PostGenerateCredentialReport_612974;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612988 = newJObject()
  add(query_612988, "Action", newJString(Action))
  add(query_612988, "Version", newJString(Version))
  result = call_612987.call(nil, query_612988, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_612974(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_612975, base: "/",
    url: url_PostGenerateCredentialReport_612976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_612959 = ref object of OpenApiRestCall_610658
proc url_GetGenerateCredentialReport_612961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateCredentialReport_612960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_612962 = query.getOrDefault("Action")
  valid_612962 = validateParameter(valid_612962, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_612962 != nil:
    section.add "Action", valid_612962
  var valid_612963 = query.getOrDefault("Version")
  valid_612963 = validateParameter(valid_612963, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612963 != nil:
    section.add "Version", valid_612963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612964 = header.getOrDefault("X-Amz-Signature")
  valid_612964 = validateParameter(valid_612964, JString, required = false,
                                 default = nil)
  if valid_612964 != nil:
    section.add "X-Amz-Signature", valid_612964
  var valid_612965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612965 = validateParameter(valid_612965, JString, required = false,
                                 default = nil)
  if valid_612965 != nil:
    section.add "X-Amz-Content-Sha256", valid_612965
  var valid_612966 = header.getOrDefault("X-Amz-Date")
  valid_612966 = validateParameter(valid_612966, JString, required = false,
                                 default = nil)
  if valid_612966 != nil:
    section.add "X-Amz-Date", valid_612966
  var valid_612967 = header.getOrDefault("X-Amz-Credential")
  valid_612967 = validateParameter(valid_612967, JString, required = false,
                                 default = nil)
  if valid_612967 != nil:
    section.add "X-Amz-Credential", valid_612967
  var valid_612968 = header.getOrDefault("X-Amz-Security-Token")
  valid_612968 = validateParameter(valid_612968, JString, required = false,
                                 default = nil)
  if valid_612968 != nil:
    section.add "X-Amz-Security-Token", valid_612968
  var valid_612969 = header.getOrDefault("X-Amz-Algorithm")
  valid_612969 = validateParameter(valid_612969, JString, required = false,
                                 default = nil)
  if valid_612969 != nil:
    section.add "X-Amz-Algorithm", valid_612969
  var valid_612970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_612970 = validateParameter(valid_612970, JString, required = false,
                                 default = nil)
  if valid_612970 != nil:
    section.add "X-Amz-SignedHeaders", valid_612970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_612971: Call_GetGenerateCredentialReport_612959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_612971.validator(path, query, header, formData, body)
  let scheme = call_612971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_612971.url(scheme.get, call_612971.host, call_612971.base,
                         call_612971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_612971, url, valid)

proc call*(call_612972: Call_GetGenerateCredentialReport_612959;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_612973 = newJObject()
  add(query_612973, "Action", newJString(Action))
  add(query_612973, "Version", newJString(Version))
  result = call_612972.call(nil, query_612973, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_612959(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_612960, base: "/",
    url: url_GetGenerateCredentialReport_612961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_613006 = ref object of OpenApiRestCall_610658
proc url_PostGenerateOrganizationsAccessReport_613008(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_613007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613009 = query.getOrDefault("Action")
  valid_613009 = validateParameter(valid_613009, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_613009 != nil:
    section.add "Action", valid_613009
  var valid_613010 = query.getOrDefault("Version")
  valid_613010 = validateParameter(valid_613010, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613010 != nil:
    section.add "Version", valid_613010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613011 = header.getOrDefault("X-Amz-Signature")
  valid_613011 = validateParameter(valid_613011, JString, required = false,
                                 default = nil)
  if valid_613011 != nil:
    section.add "X-Amz-Signature", valid_613011
  var valid_613012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613012 = validateParameter(valid_613012, JString, required = false,
                                 default = nil)
  if valid_613012 != nil:
    section.add "X-Amz-Content-Sha256", valid_613012
  var valid_613013 = header.getOrDefault("X-Amz-Date")
  valid_613013 = validateParameter(valid_613013, JString, required = false,
                                 default = nil)
  if valid_613013 != nil:
    section.add "X-Amz-Date", valid_613013
  var valid_613014 = header.getOrDefault("X-Amz-Credential")
  valid_613014 = validateParameter(valid_613014, JString, required = false,
                                 default = nil)
  if valid_613014 != nil:
    section.add "X-Amz-Credential", valid_613014
  var valid_613015 = header.getOrDefault("X-Amz-Security-Token")
  valid_613015 = validateParameter(valid_613015, JString, required = false,
                                 default = nil)
  if valid_613015 != nil:
    section.add "X-Amz-Security-Token", valid_613015
  var valid_613016 = header.getOrDefault("X-Amz-Algorithm")
  valid_613016 = validateParameter(valid_613016, JString, required = false,
                                 default = nil)
  if valid_613016 != nil:
    section.add "X-Amz-Algorithm", valid_613016
  var valid_613017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613017 = validateParameter(valid_613017, JString, required = false,
                                 default = nil)
  if valid_613017 != nil:
    section.add "X-Amz-SignedHeaders", valid_613017
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_613018 = formData.getOrDefault("OrganizationsPolicyId")
  valid_613018 = validateParameter(valid_613018, JString, required = false,
                                 default = nil)
  if valid_613018 != nil:
    section.add "OrganizationsPolicyId", valid_613018
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_613019 = formData.getOrDefault("EntityPath")
  valid_613019 = validateParameter(valid_613019, JString, required = true,
                                 default = nil)
  if valid_613019 != nil:
    section.add "EntityPath", valid_613019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613020: Call_PostGenerateOrganizationsAccessReport_613006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613020.validator(path, query, header, formData, body)
  let scheme = call_613020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613020.url(scheme.get, call_613020.host, call_613020.base,
                         call_613020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613020, url, valid)

proc call*(call_613021: Call_PostGenerateOrganizationsAccessReport_613006;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  var query_613022 = newJObject()
  var formData_613023 = newJObject()
  add(formData_613023, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_613022, "Action", newJString(Action))
  add(query_613022, "Version", newJString(Version))
  add(formData_613023, "EntityPath", newJString(EntityPath))
  result = call_613021.call(nil, query_613022, nil, formData_613023, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_613006(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_613007, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_613008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_612989 = ref object of OpenApiRestCall_610658
proc url_GetGenerateOrganizationsAccessReport_612991(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_612990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_612992 = query.getOrDefault("EntityPath")
  valid_612992 = validateParameter(valid_612992, JString, required = true,
                                 default = nil)
  if valid_612992 != nil:
    section.add "EntityPath", valid_612992
  var valid_612993 = query.getOrDefault("OrganizationsPolicyId")
  valid_612993 = validateParameter(valid_612993, JString, required = false,
                                 default = nil)
  if valid_612993 != nil:
    section.add "OrganizationsPolicyId", valid_612993
  var valid_612994 = query.getOrDefault("Action")
  valid_612994 = validateParameter(valid_612994, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_612994 != nil:
    section.add "Action", valid_612994
  var valid_612995 = query.getOrDefault("Version")
  valid_612995 = validateParameter(valid_612995, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_612995 != nil:
    section.add "Version", valid_612995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_612996 = header.getOrDefault("X-Amz-Signature")
  valid_612996 = validateParameter(valid_612996, JString, required = false,
                                 default = nil)
  if valid_612996 != nil:
    section.add "X-Amz-Signature", valid_612996
  var valid_612997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_612997 = validateParameter(valid_612997, JString, required = false,
                                 default = nil)
  if valid_612997 != nil:
    section.add "X-Amz-Content-Sha256", valid_612997
  var valid_612998 = header.getOrDefault("X-Amz-Date")
  valid_612998 = validateParameter(valid_612998, JString, required = false,
                                 default = nil)
  if valid_612998 != nil:
    section.add "X-Amz-Date", valid_612998
  var valid_612999 = header.getOrDefault("X-Amz-Credential")
  valid_612999 = validateParameter(valid_612999, JString, required = false,
                                 default = nil)
  if valid_612999 != nil:
    section.add "X-Amz-Credential", valid_612999
  var valid_613000 = header.getOrDefault("X-Amz-Security-Token")
  valid_613000 = validateParameter(valid_613000, JString, required = false,
                                 default = nil)
  if valid_613000 != nil:
    section.add "X-Amz-Security-Token", valid_613000
  var valid_613001 = header.getOrDefault("X-Amz-Algorithm")
  valid_613001 = validateParameter(valid_613001, JString, required = false,
                                 default = nil)
  if valid_613001 != nil:
    section.add "X-Amz-Algorithm", valid_613001
  var valid_613002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613002 = validateParameter(valid_613002, JString, required = false,
                                 default = nil)
  if valid_613002 != nil:
    section.add "X-Amz-SignedHeaders", valid_613002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613003: Call_GetGenerateOrganizationsAccessReport_612989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613003.validator(path, query, header, formData, body)
  let scheme = call_613003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613003.url(scheme.get, call_613003.host, call_613003.base,
                         call_613003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613003, url, valid)

proc call*(call_613004: Call_GetGenerateOrganizationsAccessReport_612989;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613005 = newJObject()
  add(query_613005, "EntityPath", newJString(EntityPath))
  add(query_613005, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_613005, "Action", newJString(Action))
  add(query_613005, "Version", newJString(Version))
  result = call_613004.call(nil, query_613005, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_612989(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_612990, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_612991,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_613040 = ref object of OpenApiRestCall_610658
proc url_PostGenerateServiceLastAccessedDetails_613042(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_613041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613043 = query.getOrDefault("Action")
  valid_613043 = validateParameter(valid_613043, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_613043 != nil:
    section.add "Action", valid_613043
  var valid_613044 = query.getOrDefault("Version")
  valid_613044 = validateParameter(valid_613044, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613044 != nil:
    section.add "Version", valid_613044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613045 = header.getOrDefault("X-Amz-Signature")
  valid_613045 = validateParameter(valid_613045, JString, required = false,
                                 default = nil)
  if valid_613045 != nil:
    section.add "X-Amz-Signature", valid_613045
  var valid_613046 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613046 = validateParameter(valid_613046, JString, required = false,
                                 default = nil)
  if valid_613046 != nil:
    section.add "X-Amz-Content-Sha256", valid_613046
  var valid_613047 = header.getOrDefault("X-Amz-Date")
  valid_613047 = validateParameter(valid_613047, JString, required = false,
                                 default = nil)
  if valid_613047 != nil:
    section.add "X-Amz-Date", valid_613047
  var valid_613048 = header.getOrDefault("X-Amz-Credential")
  valid_613048 = validateParameter(valid_613048, JString, required = false,
                                 default = nil)
  if valid_613048 != nil:
    section.add "X-Amz-Credential", valid_613048
  var valid_613049 = header.getOrDefault("X-Amz-Security-Token")
  valid_613049 = validateParameter(valid_613049, JString, required = false,
                                 default = nil)
  if valid_613049 != nil:
    section.add "X-Amz-Security-Token", valid_613049
  var valid_613050 = header.getOrDefault("X-Amz-Algorithm")
  valid_613050 = validateParameter(valid_613050, JString, required = false,
                                 default = nil)
  if valid_613050 != nil:
    section.add "X-Amz-Algorithm", valid_613050
  var valid_613051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613051 = validateParameter(valid_613051, JString, required = false,
                                 default = nil)
  if valid_613051 != nil:
    section.add "X-Amz-SignedHeaders", valid_613051
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_613052 = formData.getOrDefault("Arn")
  valid_613052 = validateParameter(valid_613052, JString, required = true,
                                 default = nil)
  if valid_613052 != nil:
    section.add "Arn", valid_613052
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613053: Call_PostGenerateServiceLastAccessedDetails_613040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613053.validator(path, query, header, formData, body)
  let scheme = call_613053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613053.url(scheme.get, call_613053.host, call_613053.base,
                         call_613053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613053, url, valid)

proc call*(call_613054: Call_PostGenerateServiceLastAccessedDetails_613040;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613055 = newJObject()
  var formData_613056 = newJObject()
  add(formData_613056, "Arn", newJString(Arn))
  add(query_613055, "Action", newJString(Action))
  add(query_613055, "Version", newJString(Version))
  result = call_613054.call(nil, query_613055, nil, formData_613056, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_613040(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_613041, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_613042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_613024 = ref object of OpenApiRestCall_610658
proc url_GetGenerateServiceLastAccessedDetails_613026(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_613025(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_613027 = query.getOrDefault("Action")
  valid_613027 = validateParameter(valid_613027, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_613027 != nil:
    section.add "Action", valid_613027
  var valid_613028 = query.getOrDefault("Version")
  valid_613028 = validateParameter(valid_613028, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613028 != nil:
    section.add "Version", valid_613028
  var valid_613029 = query.getOrDefault("Arn")
  valid_613029 = validateParameter(valid_613029, JString, required = true,
                                 default = nil)
  if valid_613029 != nil:
    section.add "Arn", valid_613029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613030 = header.getOrDefault("X-Amz-Signature")
  valid_613030 = validateParameter(valid_613030, JString, required = false,
                                 default = nil)
  if valid_613030 != nil:
    section.add "X-Amz-Signature", valid_613030
  var valid_613031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613031 = validateParameter(valid_613031, JString, required = false,
                                 default = nil)
  if valid_613031 != nil:
    section.add "X-Amz-Content-Sha256", valid_613031
  var valid_613032 = header.getOrDefault("X-Amz-Date")
  valid_613032 = validateParameter(valid_613032, JString, required = false,
                                 default = nil)
  if valid_613032 != nil:
    section.add "X-Amz-Date", valid_613032
  var valid_613033 = header.getOrDefault("X-Amz-Credential")
  valid_613033 = validateParameter(valid_613033, JString, required = false,
                                 default = nil)
  if valid_613033 != nil:
    section.add "X-Amz-Credential", valid_613033
  var valid_613034 = header.getOrDefault("X-Amz-Security-Token")
  valid_613034 = validateParameter(valid_613034, JString, required = false,
                                 default = nil)
  if valid_613034 != nil:
    section.add "X-Amz-Security-Token", valid_613034
  var valid_613035 = header.getOrDefault("X-Amz-Algorithm")
  valid_613035 = validateParameter(valid_613035, JString, required = false,
                                 default = nil)
  if valid_613035 != nil:
    section.add "X-Amz-Algorithm", valid_613035
  var valid_613036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613036 = validateParameter(valid_613036, JString, required = false,
                                 default = nil)
  if valid_613036 != nil:
    section.add "X-Amz-SignedHeaders", valid_613036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613037: Call_GetGenerateServiceLastAccessedDetails_613024;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613037.validator(path, query, header, formData, body)
  let scheme = call_613037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613037.url(scheme.get, call_613037.host, call_613037.base,
                         call_613037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613037, url, valid)

proc call*(call_613038: Call_GetGenerateServiceLastAccessedDetails_613024;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_613039 = newJObject()
  add(query_613039, "Action", newJString(Action))
  add(query_613039, "Version", newJString(Version))
  add(query_613039, "Arn", newJString(Arn))
  result = call_613038.call(nil, query_613039, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_613024(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_613025, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_613026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_613073 = ref object of OpenApiRestCall_610658
proc url_PostGetAccessKeyLastUsed_613075(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccessKeyLastUsed_613074(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613076 = query.getOrDefault("Action")
  valid_613076 = validateParameter(valid_613076, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_613076 != nil:
    section.add "Action", valid_613076
  var valid_613077 = query.getOrDefault("Version")
  valid_613077 = validateParameter(valid_613077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613077 != nil:
    section.add "Version", valid_613077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613078 = header.getOrDefault("X-Amz-Signature")
  valid_613078 = validateParameter(valid_613078, JString, required = false,
                                 default = nil)
  if valid_613078 != nil:
    section.add "X-Amz-Signature", valid_613078
  var valid_613079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613079 = validateParameter(valid_613079, JString, required = false,
                                 default = nil)
  if valid_613079 != nil:
    section.add "X-Amz-Content-Sha256", valid_613079
  var valid_613080 = header.getOrDefault("X-Amz-Date")
  valid_613080 = validateParameter(valid_613080, JString, required = false,
                                 default = nil)
  if valid_613080 != nil:
    section.add "X-Amz-Date", valid_613080
  var valid_613081 = header.getOrDefault("X-Amz-Credential")
  valid_613081 = validateParameter(valid_613081, JString, required = false,
                                 default = nil)
  if valid_613081 != nil:
    section.add "X-Amz-Credential", valid_613081
  var valid_613082 = header.getOrDefault("X-Amz-Security-Token")
  valid_613082 = validateParameter(valid_613082, JString, required = false,
                                 default = nil)
  if valid_613082 != nil:
    section.add "X-Amz-Security-Token", valid_613082
  var valid_613083 = header.getOrDefault("X-Amz-Algorithm")
  valid_613083 = validateParameter(valid_613083, JString, required = false,
                                 default = nil)
  if valid_613083 != nil:
    section.add "X-Amz-Algorithm", valid_613083
  var valid_613084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613084 = validateParameter(valid_613084, JString, required = false,
                                 default = nil)
  if valid_613084 != nil:
    section.add "X-Amz-SignedHeaders", valid_613084
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_613085 = formData.getOrDefault("AccessKeyId")
  valid_613085 = validateParameter(valid_613085, JString, required = true,
                                 default = nil)
  if valid_613085 != nil:
    section.add "AccessKeyId", valid_613085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613086: Call_PostGetAccessKeyLastUsed_613073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_613086.validator(path, query, header, formData, body)
  let scheme = call_613086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613086.url(scheme.get, call_613086.host, call_613086.base,
                         call_613086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613086, url, valid)

proc call*(call_613087: Call_PostGetAccessKeyLastUsed_613073; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613088 = newJObject()
  var formData_613089 = newJObject()
  add(formData_613089, "AccessKeyId", newJString(AccessKeyId))
  add(query_613088, "Action", newJString(Action))
  add(query_613088, "Version", newJString(Version))
  result = call_613087.call(nil, query_613088, nil, formData_613089, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_613073(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_613074, base: "/",
    url: url_PostGetAccessKeyLastUsed_613075, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_613057 = ref object of OpenApiRestCall_610658
proc url_GetGetAccessKeyLastUsed_613059(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccessKeyLastUsed_613058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613060 = query.getOrDefault("Action")
  valid_613060 = validateParameter(valid_613060, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_613060 != nil:
    section.add "Action", valid_613060
  var valid_613061 = query.getOrDefault("AccessKeyId")
  valid_613061 = validateParameter(valid_613061, JString, required = true,
                                 default = nil)
  if valid_613061 != nil:
    section.add "AccessKeyId", valid_613061
  var valid_613062 = query.getOrDefault("Version")
  valid_613062 = validateParameter(valid_613062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613062 != nil:
    section.add "Version", valid_613062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613063 = header.getOrDefault("X-Amz-Signature")
  valid_613063 = validateParameter(valid_613063, JString, required = false,
                                 default = nil)
  if valid_613063 != nil:
    section.add "X-Amz-Signature", valid_613063
  var valid_613064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613064 = validateParameter(valid_613064, JString, required = false,
                                 default = nil)
  if valid_613064 != nil:
    section.add "X-Amz-Content-Sha256", valid_613064
  var valid_613065 = header.getOrDefault("X-Amz-Date")
  valid_613065 = validateParameter(valid_613065, JString, required = false,
                                 default = nil)
  if valid_613065 != nil:
    section.add "X-Amz-Date", valid_613065
  var valid_613066 = header.getOrDefault("X-Amz-Credential")
  valid_613066 = validateParameter(valid_613066, JString, required = false,
                                 default = nil)
  if valid_613066 != nil:
    section.add "X-Amz-Credential", valid_613066
  var valid_613067 = header.getOrDefault("X-Amz-Security-Token")
  valid_613067 = validateParameter(valid_613067, JString, required = false,
                                 default = nil)
  if valid_613067 != nil:
    section.add "X-Amz-Security-Token", valid_613067
  var valid_613068 = header.getOrDefault("X-Amz-Algorithm")
  valid_613068 = validateParameter(valid_613068, JString, required = false,
                                 default = nil)
  if valid_613068 != nil:
    section.add "X-Amz-Algorithm", valid_613068
  var valid_613069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613069 = validateParameter(valid_613069, JString, required = false,
                                 default = nil)
  if valid_613069 != nil:
    section.add "X-Amz-SignedHeaders", valid_613069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613070: Call_GetGetAccessKeyLastUsed_613057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_613070.validator(path, query, header, formData, body)
  let scheme = call_613070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613070.url(scheme.get, call_613070.host, call_613070.base,
                         call_613070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613070, url, valid)

proc call*(call_613071: Call_GetGetAccessKeyLastUsed_613057; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_613072 = newJObject()
  add(query_613072, "Action", newJString(Action))
  add(query_613072, "AccessKeyId", newJString(AccessKeyId))
  add(query_613072, "Version", newJString(Version))
  result = call_613071.call(nil, query_613072, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_613057(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_613058, base: "/",
    url: url_GetGetAccessKeyLastUsed_613059, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_613108 = ref object of OpenApiRestCall_610658
proc url_PostGetAccountAuthorizationDetails_613110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_613109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613111 = query.getOrDefault("Action")
  valid_613111 = validateParameter(valid_613111, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_613111 != nil:
    section.add "Action", valid_613111
  var valid_613112 = query.getOrDefault("Version")
  valid_613112 = validateParameter(valid_613112, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613112 != nil:
    section.add "Version", valid_613112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613113 = header.getOrDefault("X-Amz-Signature")
  valid_613113 = validateParameter(valid_613113, JString, required = false,
                                 default = nil)
  if valid_613113 != nil:
    section.add "X-Amz-Signature", valid_613113
  var valid_613114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613114 = validateParameter(valid_613114, JString, required = false,
                                 default = nil)
  if valid_613114 != nil:
    section.add "X-Amz-Content-Sha256", valid_613114
  var valid_613115 = header.getOrDefault("X-Amz-Date")
  valid_613115 = validateParameter(valid_613115, JString, required = false,
                                 default = nil)
  if valid_613115 != nil:
    section.add "X-Amz-Date", valid_613115
  var valid_613116 = header.getOrDefault("X-Amz-Credential")
  valid_613116 = validateParameter(valid_613116, JString, required = false,
                                 default = nil)
  if valid_613116 != nil:
    section.add "X-Amz-Credential", valid_613116
  var valid_613117 = header.getOrDefault("X-Amz-Security-Token")
  valid_613117 = validateParameter(valid_613117, JString, required = false,
                                 default = nil)
  if valid_613117 != nil:
    section.add "X-Amz-Security-Token", valid_613117
  var valid_613118 = header.getOrDefault("X-Amz-Algorithm")
  valid_613118 = validateParameter(valid_613118, JString, required = false,
                                 default = nil)
  if valid_613118 != nil:
    section.add "X-Amz-Algorithm", valid_613118
  var valid_613119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613119 = validateParameter(valid_613119, JString, required = false,
                                 default = nil)
  if valid_613119 != nil:
    section.add "X-Amz-SignedHeaders", valid_613119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  section = newJObject()
  var valid_613120 = formData.getOrDefault("Marker")
  valid_613120 = validateParameter(valid_613120, JString, required = false,
                                 default = nil)
  if valid_613120 != nil:
    section.add "Marker", valid_613120
  var valid_613121 = formData.getOrDefault("MaxItems")
  valid_613121 = validateParameter(valid_613121, JInt, required = false, default = nil)
  if valid_613121 != nil:
    section.add "MaxItems", valid_613121
  var valid_613122 = formData.getOrDefault("Filter")
  valid_613122 = validateParameter(valid_613122, JArray, required = false,
                                 default = nil)
  if valid_613122 != nil:
    section.add "Filter", valid_613122
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613123: Call_PostGetAccountAuthorizationDetails_613108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613123.validator(path, query, header, formData, body)
  let scheme = call_613123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613123.url(scheme.get, call_613123.host, call_613123.base,
                         call_613123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613123, url, valid)

proc call*(call_613124: Call_PostGetAccountAuthorizationDetails_613108;
          Marker: string = ""; Action: string = "GetAccountAuthorizationDetails";
          MaxItems: int = 0; Version: string = "2010-05-08"; Filter: JsonNode = nil): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  var query_613125 = newJObject()
  var formData_613126 = newJObject()
  add(formData_613126, "Marker", newJString(Marker))
  add(query_613125, "Action", newJString(Action))
  add(formData_613126, "MaxItems", newJInt(MaxItems))
  add(query_613125, "Version", newJString(Version))
  if Filter != nil:
    formData_613126.add "Filter", Filter
  result = call_613124.call(nil, query_613125, nil, formData_613126, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_613108(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_613109, base: "/",
    url: url_PostGetAccountAuthorizationDetails_613110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_613090 = ref object of OpenApiRestCall_610658
proc url_GetGetAccountAuthorizationDetails_613092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_613091(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613093 = query.getOrDefault("Marker")
  valid_613093 = validateParameter(valid_613093, JString, required = false,
                                 default = nil)
  if valid_613093 != nil:
    section.add "Marker", valid_613093
  var valid_613094 = query.getOrDefault("MaxItems")
  valid_613094 = validateParameter(valid_613094, JInt, required = false, default = nil)
  if valid_613094 != nil:
    section.add "MaxItems", valid_613094
  var valid_613095 = query.getOrDefault("Filter")
  valid_613095 = validateParameter(valid_613095, JArray, required = false,
                                 default = nil)
  if valid_613095 != nil:
    section.add "Filter", valid_613095
  var valid_613096 = query.getOrDefault("Action")
  valid_613096 = validateParameter(valid_613096, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_613096 != nil:
    section.add "Action", valid_613096
  var valid_613097 = query.getOrDefault("Version")
  valid_613097 = validateParameter(valid_613097, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613097 != nil:
    section.add "Version", valid_613097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613098 = header.getOrDefault("X-Amz-Signature")
  valid_613098 = validateParameter(valid_613098, JString, required = false,
                                 default = nil)
  if valid_613098 != nil:
    section.add "X-Amz-Signature", valid_613098
  var valid_613099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613099 = validateParameter(valid_613099, JString, required = false,
                                 default = nil)
  if valid_613099 != nil:
    section.add "X-Amz-Content-Sha256", valid_613099
  var valid_613100 = header.getOrDefault("X-Amz-Date")
  valid_613100 = validateParameter(valid_613100, JString, required = false,
                                 default = nil)
  if valid_613100 != nil:
    section.add "X-Amz-Date", valid_613100
  var valid_613101 = header.getOrDefault("X-Amz-Credential")
  valid_613101 = validateParameter(valid_613101, JString, required = false,
                                 default = nil)
  if valid_613101 != nil:
    section.add "X-Amz-Credential", valid_613101
  var valid_613102 = header.getOrDefault("X-Amz-Security-Token")
  valid_613102 = validateParameter(valid_613102, JString, required = false,
                                 default = nil)
  if valid_613102 != nil:
    section.add "X-Amz-Security-Token", valid_613102
  var valid_613103 = header.getOrDefault("X-Amz-Algorithm")
  valid_613103 = validateParameter(valid_613103, JString, required = false,
                                 default = nil)
  if valid_613103 != nil:
    section.add "X-Amz-Algorithm", valid_613103
  var valid_613104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613104 = validateParameter(valid_613104, JString, required = false,
                                 default = nil)
  if valid_613104 != nil:
    section.add "X-Amz-SignedHeaders", valid_613104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613105: Call_GetGetAccountAuthorizationDetails_613090;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_613105.validator(path, query, header, formData, body)
  let scheme = call_613105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613105.url(scheme.get, call_613105.host, call_613105.base,
                         call_613105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613105, url, valid)

proc call*(call_613106: Call_GetGetAccountAuthorizationDetails_613090;
          Marker: string = ""; MaxItems: int = 0; Filter: JsonNode = nil;
          Action: string = "GetAccountAuthorizationDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613107 = newJObject()
  add(query_613107, "Marker", newJString(Marker))
  add(query_613107, "MaxItems", newJInt(MaxItems))
  if Filter != nil:
    query_613107.add "Filter", Filter
  add(query_613107, "Action", newJString(Action))
  add(query_613107, "Version", newJString(Version))
  result = call_613106.call(nil, query_613107, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_613090(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_613091, base: "/",
    url: url_GetGetAccountAuthorizationDetails_613092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_613142 = ref object of OpenApiRestCall_610658
proc url_PostGetAccountPasswordPolicy_613144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountPasswordPolicy_613143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613145 = query.getOrDefault("Action")
  valid_613145 = validateParameter(valid_613145, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_613145 != nil:
    section.add "Action", valid_613145
  var valid_613146 = query.getOrDefault("Version")
  valid_613146 = validateParameter(valid_613146, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613146 != nil:
    section.add "Version", valid_613146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613147 = header.getOrDefault("X-Amz-Signature")
  valid_613147 = validateParameter(valid_613147, JString, required = false,
                                 default = nil)
  if valid_613147 != nil:
    section.add "X-Amz-Signature", valid_613147
  var valid_613148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613148 = validateParameter(valid_613148, JString, required = false,
                                 default = nil)
  if valid_613148 != nil:
    section.add "X-Amz-Content-Sha256", valid_613148
  var valid_613149 = header.getOrDefault("X-Amz-Date")
  valid_613149 = validateParameter(valid_613149, JString, required = false,
                                 default = nil)
  if valid_613149 != nil:
    section.add "X-Amz-Date", valid_613149
  var valid_613150 = header.getOrDefault("X-Amz-Credential")
  valid_613150 = validateParameter(valid_613150, JString, required = false,
                                 default = nil)
  if valid_613150 != nil:
    section.add "X-Amz-Credential", valid_613150
  var valid_613151 = header.getOrDefault("X-Amz-Security-Token")
  valid_613151 = validateParameter(valid_613151, JString, required = false,
                                 default = nil)
  if valid_613151 != nil:
    section.add "X-Amz-Security-Token", valid_613151
  var valid_613152 = header.getOrDefault("X-Amz-Algorithm")
  valid_613152 = validateParameter(valid_613152, JString, required = false,
                                 default = nil)
  if valid_613152 != nil:
    section.add "X-Amz-Algorithm", valid_613152
  var valid_613153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613153 = validateParameter(valid_613153, JString, required = false,
                                 default = nil)
  if valid_613153 != nil:
    section.add "X-Amz-SignedHeaders", valid_613153
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613154: Call_PostGetAccountPasswordPolicy_613142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_613154.validator(path, query, header, formData, body)
  let scheme = call_613154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613154.url(scheme.get, call_613154.host, call_613154.base,
                         call_613154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613154, url, valid)

proc call*(call_613155: Call_PostGetAccountPasswordPolicy_613142;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613156 = newJObject()
  add(query_613156, "Action", newJString(Action))
  add(query_613156, "Version", newJString(Version))
  result = call_613155.call(nil, query_613156, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_613142(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_613143, base: "/",
    url: url_PostGetAccountPasswordPolicy_613144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_613127 = ref object of OpenApiRestCall_610658
proc url_GetGetAccountPasswordPolicy_613129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountPasswordPolicy_613128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613130 = query.getOrDefault("Action")
  valid_613130 = validateParameter(valid_613130, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_613130 != nil:
    section.add "Action", valid_613130
  var valid_613131 = query.getOrDefault("Version")
  valid_613131 = validateParameter(valid_613131, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613131 != nil:
    section.add "Version", valid_613131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613132 = header.getOrDefault("X-Amz-Signature")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Signature", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-Content-Sha256", valid_613133
  var valid_613134 = header.getOrDefault("X-Amz-Date")
  valid_613134 = validateParameter(valid_613134, JString, required = false,
                                 default = nil)
  if valid_613134 != nil:
    section.add "X-Amz-Date", valid_613134
  var valid_613135 = header.getOrDefault("X-Amz-Credential")
  valid_613135 = validateParameter(valid_613135, JString, required = false,
                                 default = nil)
  if valid_613135 != nil:
    section.add "X-Amz-Credential", valid_613135
  var valid_613136 = header.getOrDefault("X-Amz-Security-Token")
  valid_613136 = validateParameter(valid_613136, JString, required = false,
                                 default = nil)
  if valid_613136 != nil:
    section.add "X-Amz-Security-Token", valid_613136
  var valid_613137 = header.getOrDefault("X-Amz-Algorithm")
  valid_613137 = validateParameter(valid_613137, JString, required = false,
                                 default = nil)
  if valid_613137 != nil:
    section.add "X-Amz-Algorithm", valid_613137
  var valid_613138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613138 = validateParameter(valid_613138, JString, required = false,
                                 default = nil)
  if valid_613138 != nil:
    section.add "X-Amz-SignedHeaders", valid_613138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613139: Call_GetGetAccountPasswordPolicy_613127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_613139.validator(path, query, header, formData, body)
  let scheme = call_613139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613139.url(scheme.get, call_613139.host, call_613139.base,
                         call_613139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613139, url, valid)

proc call*(call_613140: Call_GetGetAccountPasswordPolicy_613127;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613141 = newJObject()
  add(query_613141, "Action", newJString(Action))
  add(query_613141, "Version", newJString(Version))
  result = call_613140.call(nil, query_613141, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_613127(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_613128, base: "/",
    url: url_GetGetAccountPasswordPolicy_613129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_613172 = ref object of OpenApiRestCall_610658
proc url_PostGetAccountSummary_613174(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSummary_613173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613175 = query.getOrDefault("Action")
  valid_613175 = validateParameter(valid_613175, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_613175 != nil:
    section.add "Action", valid_613175
  var valid_613176 = query.getOrDefault("Version")
  valid_613176 = validateParameter(valid_613176, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613176 != nil:
    section.add "Version", valid_613176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613177 = header.getOrDefault("X-Amz-Signature")
  valid_613177 = validateParameter(valid_613177, JString, required = false,
                                 default = nil)
  if valid_613177 != nil:
    section.add "X-Amz-Signature", valid_613177
  var valid_613178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613178 = validateParameter(valid_613178, JString, required = false,
                                 default = nil)
  if valid_613178 != nil:
    section.add "X-Amz-Content-Sha256", valid_613178
  var valid_613179 = header.getOrDefault("X-Amz-Date")
  valid_613179 = validateParameter(valid_613179, JString, required = false,
                                 default = nil)
  if valid_613179 != nil:
    section.add "X-Amz-Date", valid_613179
  var valid_613180 = header.getOrDefault("X-Amz-Credential")
  valid_613180 = validateParameter(valid_613180, JString, required = false,
                                 default = nil)
  if valid_613180 != nil:
    section.add "X-Amz-Credential", valid_613180
  var valid_613181 = header.getOrDefault("X-Amz-Security-Token")
  valid_613181 = validateParameter(valid_613181, JString, required = false,
                                 default = nil)
  if valid_613181 != nil:
    section.add "X-Amz-Security-Token", valid_613181
  var valid_613182 = header.getOrDefault("X-Amz-Algorithm")
  valid_613182 = validateParameter(valid_613182, JString, required = false,
                                 default = nil)
  if valid_613182 != nil:
    section.add "X-Amz-Algorithm", valid_613182
  var valid_613183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613183 = validateParameter(valid_613183, JString, required = false,
                                 default = nil)
  if valid_613183 != nil:
    section.add "X-Amz-SignedHeaders", valid_613183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613184: Call_PostGetAccountSummary_613172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613184.validator(path, query, header, formData, body)
  let scheme = call_613184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613184.url(scheme.get, call_613184.host, call_613184.base,
                         call_613184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613184, url, valid)

proc call*(call_613185: Call_PostGetAccountSummary_613172;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613186 = newJObject()
  add(query_613186, "Action", newJString(Action))
  add(query_613186, "Version", newJString(Version))
  result = call_613185.call(nil, query_613186, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_613172(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_613173, base: "/",
    url: url_PostGetAccountSummary_613174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_613157 = ref object of OpenApiRestCall_610658
proc url_GetGetAccountSummary_613159(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSummary_613158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613160 = query.getOrDefault("Action")
  valid_613160 = validateParameter(valid_613160, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_613160 != nil:
    section.add "Action", valid_613160
  var valid_613161 = query.getOrDefault("Version")
  valid_613161 = validateParameter(valid_613161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613161 != nil:
    section.add "Version", valid_613161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613162 = header.getOrDefault("X-Amz-Signature")
  valid_613162 = validateParameter(valid_613162, JString, required = false,
                                 default = nil)
  if valid_613162 != nil:
    section.add "X-Amz-Signature", valid_613162
  var valid_613163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613163 = validateParameter(valid_613163, JString, required = false,
                                 default = nil)
  if valid_613163 != nil:
    section.add "X-Amz-Content-Sha256", valid_613163
  var valid_613164 = header.getOrDefault("X-Amz-Date")
  valid_613164 = validateParameter(valid_613164, JString, required = false,
                                 default = nil)
  if valid_613164 != nil:
    section.add "X-Amz-Date", valid_613164
  var valid_613165 = header.getOrDefault("X-Amz-Credential")
  valid_613165 = validateParameter(valid_613165, JString, required = false,
                                 default = nil)
  if valid_613165 != nil:
    section.add "X-Amz-Credential", valid_613165
  var valid_613166 = header.getOrDefault("X-Amz-Security-Token")
  valid_613166 = validateParameter(valid_613166, JString, required = false,
                                 default = nil)
  if valid_613166 != nil:
    section.add "X-Amz-Security-Token", valid_613166
  var valid_613167 = header.getOrDefault("X-Amz-Algorithm")
  valid_613167 = validateParameter(valid_613167, JString, required = false,
                                 default = nil)
  if valid_613167 != nil:
    section.add "X-Amz-Algorithm", valid_613167
  var valid_613168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613168 = validateParameter(valid_613168, JString, required = false,
                                 default = nil)
  if valid_613168 != nil:
    section.add "X-Amz-SignedHeaders", valid_613168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613169: Call_GetGetAccountSummary_613157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613169.validator(path, query, header, formData, body)
  let scheme = call_613169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613169.url(scheme.get, call_613169.host, call_613169.base,
                         call_613169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613169, url, valid)

proc call*(call_613170: Call_GetGetAccountSummary_613157;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613171 = newJObject()
  add(query_613171, "Action", newJString(Action))
  add(query_613171, "Version", newJString(Version))
  result = call_613170.call(nil, query_613171, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_613157(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_613158, base: "/",
    url: url_GetGetAccountSummary_613159, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_613203 = ref object of OpenApiRestCall_610658
proc url_PostGetContextKeysForCustomPolicy_613205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_613204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613206 = query.getOrDefault("Action")
  valid_613206 = validateParameter(valid_613206, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_613206 != nil:
    section.add "Action", valid_613206
  var valid_613207 = query.getOrDefault("Version")
  valid_613207 = validateParameter(valid_613207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613207 != nil:
    section.add "Version", valid_613207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613208 = header.getOrDefault("X-Amz-Signature")
  valid_613208 = validateParameter(valid_613208, JString, required = false,
                                 default = nil)
  if valid_613208 != nil:
    section.add "X-Amz-Signature", valid_613208
  var valid_613209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613209 = validateParameter(valid_613209, JString, required = false,
                                 default = nil)
  if valid_613209 != nil:
    section.add "X-Amz-Content-Sha256", valid_613209
  var valid_613210 = header.getOrDefault("X-Amz-Date")
  valid_613210 = validateParameter(valid_613210, JString, required = false,
                                 default = nil)
  if valid_613210 != nil:
    section.add "X-Amz-Date", valid_613210
  var valid_613211 = header.getOrDefault("X-Amz-Credential")
  valid_613211 = validateParameter(valid_613211, JString, required = false,
                                 default = nil)
  if valid_613211 != nil:
    section.add "X-Amz-Credential", valid_613211
  var valid_613212 = header.getOrDefault("X-Amz-Security-Token")
  valid_613212 = validateParameter(valid_613212, JString, required = false,
                                 default = nil)
  if valid_613212 != nil:
    section.add "X-Amz-Security-Token", valid_613212
  var valid_613213 = header.getOrDefault("X-Amz-Algorithm")
  valid_613213 = validateParameter(valid_613213, JString, required = false,
                                 default = nil)
  if valid_613213 != nil:
    section.add "X-Amz-Algorithm", valid_613213
  var valid_613214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613214 = validateParameter(valid_613214, JString, required = false,
                                 default = nil)
  if valid_613214 != nil:
    section.add "X-Amz-SignedHeaders", valid_613214
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_613215 = formData.getOrDefault("PolicyInputList")
  valid_613215 = validateParameter(valid_613215, JArray, required = true, default = nil)
  if valid_613215 != nil:
    section.add "PolicyInputList", valid_613215
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613216: Call_PostGetContextKeysForCustomPolicy_613203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_613216.validator(path, query, header, formData, body)
  let scheme = call_613216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613216.url(scheme.get, call_613216.host, call_613216.base,
                         call_613216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613216, url, valid)

proc call*(call_613217: Call_PostGetContextKeysForCustomPolicy_613203;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_613218 = newJObject()
  var formData_613219 = newJObject()
  add(query_613218, "Action", newJString(Action))
  add(query_613218, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_613219.add "PolicyInputList", PolicyInputList
  result = call_613217.call(nil, query_613218, nil, formData_613219, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_613203(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_613204, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_613205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_613187 = ref object of OpenApiRestCall_610658
proc url_GetGetContextKeysForCustomPolicy_613189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_613188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_613190 = query.getOrDefault("PolicyInputList")
  valid_613190 = validateParameter(valid_613190, JArray, required = true, default = nil)
  if valid_613190 != nil:
    section.add "PolicyInputList", valid_613190
  var valid_613191 = query.getOrDefault("Action")
  valid_613191 = validateParameter(valid_613191, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_613191 != nil:
    section.add "Action", valid_613191
  var valid_613192 = query.getOrDefault("Version")
  valid_613192 = validateParameter(valid_613192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613192 != nil:
    section.add "Version", valid_613192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613193 = header.getOrDefault("X-Amz-Signature")
  valid_613193 = validateParameter(valid_613193, JString, required = false,
                                 default = nil)
  if valid_613193 != nil:
    section.add "X-Amz-Signature", valid_613193
  var valid_613194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613194 = validateParameter(valid_613194, JString, required = false,
                                 default = nil)
  if valid_613194 != nil:
    section.add "X-Amz-Content-Sha256", valid_613194
  var valid_613195 = header.getOrDefault("X-Amz-Date")
  valid_613195 = validateParameter(valid_613195, JString, required = false,
                                 default = nil)
  if valid_613195 != nil:
    section.add "X-Amz-Date", valid_613195
  var valid_613196 = header.getOrDefault("X-Amz-Credential")
  valid_613196 = validateParameter(valid_613196, JString, required = false,
                                 default = nil)
  if valid_613196 != nil:
    section.add "X-Amz-Credential", valid_613196
  var valid_613197 = header.getOrDefault("X-Amz-Security-Token")
  valid_613197 = validateParameter(valid_613197, JString, required = false,
                                 default = nil)
  if valid_613197 != nil:
    section.add "X-Amz-Security-Token", valid_613197
  var valid_613198 = header.getOrDefault("X-Amz-Algorithm")
  valid_613198 = validateParameter(valid_613198, JString, required = false,
                                 default = nil)
  if valid_613198 != nil:
    section.add "X-Amz-Algorithm", valid_613198
  var valid_613199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613199 = validateParameter(valid_613199, JString, required = false,
                                 default = nil)
  if valid_613199 != nil:
    section.add "X-Amz-SignedHeaders", valid_613199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613200: Call_GetGetContextKeysForCustomPolicy_613187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_613200.validator(path, query, header, formData, body)
  let scheme = call_613200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613200.url(scheme.get, call_613200.host, call_613200.base,
                         call_613200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613200, url, valid)

proc call*(call_613201: Call_GetGetContextKeysForCustomPolicy_613187;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613202 = newJObject()
  if PolicyInputList != nil:
    query_613202.add "PolicyInputList", PolicyInputList
  add(query_613202, "Action", newJString(Action))
  add(query_613202, "Version", newJString(Version))
  result = call_613201.call(nil, query_613202, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_613187(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_613188, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_613189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_613237 = ref object of OpenApiRestCall_610658
proc url_PostGetContextKeysForPrincipalPolicy_613239(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_613238(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613240 = query.getOrDefault("Action")
  valid_613240 = validateParameter(valid_613240, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_613240 != nil:
    section.add "Action", valid_613240
  var valid_613241 = query.getOrDefault("Version")
  valid_613241 = validateParameter(valid_613241, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613241 != nil:
    section.add "Version", valid_613241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613242 = header.getOrDefault("X-Amz-Signature")
  valid_613242 = validateParameter(valid_613242, JString, required = false,
                                 default = nil)
  if valid_613242 != nil:
    section.add "X-Amz-Signature", valid_613242
  var valid_613243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613243 = validateParameter(valid_613243, JString, required = false,
                                 default = nil)
  if valid_613243 != nil:
    section.add "X-Amz-Content-Sha256", valid_613243
  var valid_613244 = header.getOrDefault("X-Amz-Date")
  valid_613244 = validateParameter(valid_613244, JString, required = false,
                                 default = nil)
  if valid_613244 != nil:
    section.add "X-Amz-Date", valid_613244
  var valid_613245 = header.getOrDefault("X-Amz-Credential")
  valid_613245 = validateParameter(valid_613245, JString, required = false,
                                 default = nil)
  if valid_613245 != nil:
    section.add "X-Amz-Credential", valid_613245
  var valid_613246 = header.getOrDefault("X-Amz-Security-Token")
  valid_613246 = validateParameter(valid_613246, JString, required = false,
                                 default = nil)
  if valid_613246 != nil:
    section.add "X-Amz-Security-Token", valid_613246
  var valid_613247 = header.getOrDefault("X-Amz-Algorithm")
  valid_613247 = validateParameter(valid_613247, JString, required = false,
                                 default = nil)
  if valid_613247 != nil:
    section.add "X-Amz-Algorithm", valid_613247
  var valid_613248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613248 = validateParameter(valid_613248, JString, required = false,
                                 default = nil)
  if valid_613248 != nil:
    section.add "X-Amz-SignedHeaders", valid_613248
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_613249 = formData.getOrDefault("PolicySourceArn")
  valid_613249 = validateParameter(valid_613249, JString, required = true,
                                 default = nil)
  if valid_613249 != nil:
    section.add "PolicySourceArn", valid_613249
  var valid_613250 = formData.getOrDefault("PolicyInputList")
  valid_613250 = validateParameter(valid_613250, JArray, required = false,
                                 default = nil)
  if valid_613250 != nil:
    section.add "PolicyInputList", valid_613250
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613251: Call_PostGetContextKeysForPrincipalPolicy_613237;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_613251.validator(path, query, header, formData, body)
  let scheme = call_613251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613251.url(scheme.get, call_613251.host, call_613251.base,
                         call_613251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613251, url, valid)

proc call*(call_613252: Call_PostGetContextKeysForPrincipalPolicy_613237;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"; PolicyInputList: JsonNode = nil): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_613253 = newJObject()
  var formData_613254 = newJObject()
  add(formData_613254, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_613253, "Action", newJString(Action))
  add(query_613253, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_613254.add "PolicyInputList", PolicyInputList
  result = call_613252.call(nil, query_613253, nil, formData_613254, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_613237(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_613238, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_613239,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_613220 = ref object of OpenApiRestCall_610658
proc url_GetGetContextKeysForPrincipalPolicy_613222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_613221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_613223 = query.getOrDefault("PolicySourceArn")
  valid_613223 = validateParameter(valid_613223, JString, required = true,
                                 default = nil)
  if valid_613223 != nil:
    section.add "PolicySourceArn", valid_613223
  var valid_613224 = query.getOrDefault("PolicyInputList")
  valid_613224 = validateParameter(valid_613224, JArray, required = false,
                                 default = nil)
  if valid_613224 != nil:
    section.add "PolicyInputList", valid_613224
  var valid_613225 = query.getOrDefault("Action")
  valid_613225 = validateParameter(valid_613225, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_613225 != nil:
    section.add "Action", valid_613225
  var valid_613226 = query.getOrDefault("Version")
  valid_613226 = validateParameter(valid_613226, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613226 != nil:
    section.add "Version", valid_613226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613227 = header.getOrDefault("X-Amz-Signature")
  valid_613227 = validateParameter(valid_613227, JString, required = false,
                                 default = nil)
  if valid_613227 != nil:
    section.add "X-Amz-Signature", valid_613227
  var valid_613228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613228 = validateParameter(valid_613228, JString, required = false,
                                 default = nil)
  if valid_613228 != nil:
    section.add "X-Amz-Content-Sha256", valid_613228
  var valid_613229 = header.getOrDefault("X-Amz-Date")
  valid_613229 = validateParameter(valid_613229, JString, required = false,
                                 default = nil)
  if valid_613229 != nil:
    section.add "X-Amz-Date", valid_613229
  var valid_613230 = header.getOrDefault("X-Amz-Credential")
  valid_613230 = validateParameter(valid_613230, JString, required = false,
                                 default = nil)
  if valid_613230 != nil:
    section.add "X-Amz-Credential", valid_613230
  var valid_613231 = header.getOrDefault("X-Amz-Security-Token")
  valid_613231 = validateParameter(valid_613231, JString, required = false,
                                 default = nil)
  if valid_613231 != nil:
    section.add "X-Amz-Security-Token", valid_613231
  var valid_613232 = header.getOrDefault("X-Amz-Algorithm")
  valid_613232 = validateParameter(valid_613232, JString, required = false,
                                 default = nil)
  if valid_613232 != nil:
    section.add "X-Amz-Algorithm", valid_613232
  var valid_613233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613233 = validateParameter(valid_613233, JString, required = false,
                                 default = nil)
  if valid_613233 != nil:
    section.add "X-Amz-SignedHeaders", valid_613233
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613234: Call_GetGetContextKeysForPrincipalPolicy_613220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_613234.validator(path, query, header, formData, body)
  let scheme = call_613234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613234.url(scheme.get, call_613234.host, call_613234.base,
                         call_613234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613234, url, valid)

proc call*(call_613235: Call_GetGetContextKeysForPrincipalPolicy_613220;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613236 = newJObject()
  add(query_613236, "PolicySourceArn", newJString(PolicySourceArn))
  if PolicyInputList != nil:
    query_613236.add "PolicyInputList", PolicyInputList
  add(query_613236, "Action", newJString(Action))
  add(query_613236, "Version", newJString(Version))
  result = call_613235.call(nil, query_613236, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_613220(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_613221, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_613222,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_613270 = ref object of OpenApiRestCall_610658
proc url_PostGetCredentialReport_613272(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCredentialReport_613271(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613273 = query.getOrDefault("Action")
  valid_613273 = validateParameter(valid_613273, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_613273 != nil:
    section.add "Action", valid_613273
  var valid_613274 = query.getOrDefault("Version")
  valid_613274 = validateParameter(valid_613274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613274 != nil:
    section.add "Version", valid_613274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613275 = header.getOrDefault("X-Amz-Signature")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Signature", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Content-Sha256", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Date")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Date", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Credential")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Credential", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-Security-Token")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-Security-Token", valid_613279
  var valid_613280 = header.getOrDefault("X-Amz-Algorithm")
  valid_613280 = validateParameter(valid_613280, JString, required = false,
                                 default = nil)
  if valid_613280 != nil:
    section.add "X-Amz-Algorithm", valid_613280
  var valid_613281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613281 = validateParameter(valid_613281, JString, required = false,
                                 default = nil)
  if valid_613281 != nil:
    section.add "X-Amz-SignedHeaders", valid_613281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613282: Call_PostGetCredentialReport_613270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613282.validator(path, query, header, formData, body)
  let scheme = call_613282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613282.url(scheme.get, call_613282.host, call_613282.base,
                         call_613282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613282, url, valid)

proc call*(call_613283: Call_PostGetCredentialReport_613270;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613284 = newJObject()
  add(query_613284, "Action", newJString(Action))
  add(query_613284, "Version", newJString(Version))
  result = call_613283.call(nil, query_613284, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_613270(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_613271, base: "/",
    url: url_PostGetCredentialReport_613272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_613255 = ref object of OpenApiRestCall_610658
proc url_GetGetCredentialReport_613257(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCredentialReport_613256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613258 = query.getOrDefault("Action")
  valid_613258 = validateParameter(valid_613258, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_613258 != nil:
    section.add "Action", valid_613258
  var valid_613259 = query.getOrDefault("Version")
  valid_613259 = validateParameter(valid_613259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613259 != nil:
    section.add "Version", valid_613259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613260 = header.getOrDefault("X-Amz-Signature")
  valid_613260 = validateParameter(valid_613260, JString, required = false,
                                 default = nil)
  if valid_613260 != nil:
    section.add "X-Amz-Signature", valid_613260
  var valid_613261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613261 = validateParameter(valid_613261, JString, required = false,
                                 default = nil)
  if valid_613261 != nil:
    section.add "X-Amz-Content-Sha256", valid_613261
  var valid_613262 = header.getOrDefault("X-Amz-Date")
  valid_613262 = validateParameter(valid_613262, JString, required = false,
                                 default = nil)
  if valid_613262 != nil:
    section.add "X-Amz-Date", valid_613262
  var valid_613263 = header.getOrDefault("X-Amz-Credential")
  valid_613263 = validateParameter(valid_613263, JString, required = false,
                                 default = nil)
  if valid_613263 != nil:
    section.add "X-Amz-Credential", valid_613263
  var valid_613264 = header.getOrDefault("X-Amz-Security-Token")
  valid_613264 = validateParameter(valid_613264, JString, required = false,
                                 default = nil)
  if valid_613264 != nil:
    section.add "X-Amz-Security-Token", valid_613264
  var valid_613265 = header.getOrDefault("X-Amz-Algorithm")
  valid_613265 = validateParameter(valid_613265, JString, required = false,
                                 default = nil)
  if valid_613265 != nil:
    section.add "X-Amz-Algorithm", valid_613265
  var valid_613266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613266 = validateParameter(valid_613266, JString, required = false,
                                 default = nil)
  if valid_613266 != nil:
    section.add "X-Amz-SignedHeaders", valid_613266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613267: Call_GetGetCredentialReport_613255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613267.validator(path, query, header, formData, body)
  let scheme = call_613267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613267.url(scheme.get, call_613267.host, call_613267.base,
                         call_613267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613267, url, valid)

proc call*(call_613268: Call_GetGetCredentialReport_613255;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613269 = newJObject()
  add(query_613269, "Action", newJString(Action))
  add(query_613269, "Version", newJString(Version))
  result = call_613268.call(nil, query_613269, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_613255(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_613256, base: "/",
    url: url_GetGetCredentialReport_613257, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_613303 = ref object of OpenApiRestCall_610658
proc url_PostGetGroup_613305(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroup_613304(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613306 = query.getOrDefault("Action")
  valid_613306 = validateParameter(valid_613306, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_613306 != nil:
    section.add "Action", valid_613306
  var valid_613307 = query.getOrDefault("Version")
  valid_613307 = validateParameter(valid_613307, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613307 != nil:
    section.add "Version", valid_613307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613308 = header.getOrDefault("X-Amz-Signature")
  valid_613308 = validateParameter(valid_613308, JString, required = false,
                                 default = nil)
  if valid_613308 != nil:
    section.add "X-Amz-Signature", valid_613308
  var valid_613309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613309 = validateParameter(valid_613309, JString, required = false,
                                 default = nil)
  if valid_613309 != nil:
    section.add "X-Amz-Content-Sha256", valid_613309
  var valid_613310 = header.getOrDefault("X-Amz-Date")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "X-Amz-Date", valid_613310
  var valid_613311 = header.getOrDefault("X-Amz-Credential")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Credential", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Security-Token")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Security-Token", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Algorithm")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Algorithm", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-SignedHeaders", valid_613314
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613315 = formData.getOrDefault("Marker")
  valid_613315 = validateParameter(valid_613315, JString, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "Marker", valid_613315
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613316 = formData.getOrDefault("GroupName")
  valid_613316 = validateParameter(valid_613316, JString, required = true,
                                 default = nil)
  if valid_613316 != nil:
    section.add "GroupName", valid_613316
  var valid_613317 = formData.getOrDefault("MaxItems")
  valid_613317 = validateParameter(valid_613317, JInt, required = false, default = nil)
  if valid_613317 != nil:
    section.add "MaxItems", valid_613317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613318: Call_PostGetGroup_613303; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_613318.validator(path, query, header, formData, body)
  let scheme = call_613318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613318.url(scheme.get, call_613318.host, call_613318.base,
                         call_613318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613318, url, valid)

proc call*(call_613319: Call_PostGetGroup_613303; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613320 = newJObject()
  var formData_613321 = newJObject()
  add(formData_613321, "Marker", newJString(Marker))
  add(formData_613321, "GroupName", newJString(GroupName))
  add(query_613320, "Action", newJString(Action))
  add(formData_613321, "MaxItems", newJInt(MaxItems))
  add(query_613320, "Version", newJString(Version))
  result = call_613319.call(nil, query_613320, nil, formData_613321, nil)

var postGetGroup* = Call_PostGetGroup_613303(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_613304, base: "/",
    url: url_PostGetGroup_613305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_613285 = ref object of OpenApiRestCall_610658
proc url_GetGetGroup_613287(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroup_613286(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613288 = query.getOrDefault("Marker")
  valid_613288 = validateParameter(valid_613288, JString, required = false,
                                 default = nil)
  if valid_613288 != nil:
    section.add "Marker", valid_613288
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613289 = query.getOrDefault("GroupName")
  valid_613289 = validateParameter(valid_613289, JString, required = true,
                                 default = nil)
  if valid_613289 != nil:
    section.add "GroupName", valid_613289
  var valid_613290 = query.getOrDefault("MaxItems")
  valid_613290 = validateParameter(valid_613290, JInt, required = false, default = nil)
  if valid_613290 != nil:
    section.add "MaxItems", valid_613290
  var valid_613291 = query.getOrDefault("Action")
  valid_613291 = validateParameter(valid_613291, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_613291 != nil:
    section.add "Action", valid_613291
  var valid_613292 = query.getOrDefault("Version")
  valid_613292 = validateParameter(valid_613292, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613292 != nil:
    section.add "Version", valid_613292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613293 = header.getOrDefault("X-Amz-Signature")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Signature", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Content-Sha256", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Date")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Date", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Credential")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Credential", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Security-Token")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Security-Token", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Algorithm")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Algorithm", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-SignedHeaders", valid_613299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613300: Call_GetGetGroup_613285; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_613300.validator(path, query, header, formData, body)
  let scheme = call_613300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613300.url(scheme.get, call_613300.host, call_613300.base,
                         call_613300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613300, url, valid)

proc call*(call_613301: Call_GetGetGroup_613285; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "GetGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613302 = newJObject()
  add(query_613302, "Marker", newJString(Marker))
  add(query_613302, "GroupName", newJString(GroupName))
  add(query_613302, "MaxItems", newJInt(MaxItems))
  add(query_613302, "Action", newJString(Action))
  add(query_613302, "Version", newJString(Version))
  result = call_613301.call(nil, query_613302, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_613285(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_613286,
                                        base: "/", url: url_GetGetGroup_613287,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_613339 = ref object of OpenApiRestCall_610658
proc url_PostGetGroupPolicy_613341(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroupPolicy_613340(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613342 = query.getOrDefault("Action")
  valid_613342 = validateParameter(valid_613342, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_613342 != nil:
    section.add "Action", valid_613342
  var valid_613343 = query.getOrDefault("Version")
  valid_613343 = validateParameter(valid_613343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613343 != nil:
    section.add "Version", valid_613343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613344 = header.getOrDefault("X-Amz-Signature")
  valid_613344 = validateParameter(valid_613344, JString, required = false,
                                 default = nil)
  if valid_613344 != nil:
    section.add "X-Amz-Signature", valid_613344
  var valid_613345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613345 = validateParameter(valid_613345, JString, required = false,
                                 default = nil)
  if valid_613345 != nil:
    section.add "X-Amz-Content-Sha256", valid_613345
  var valid_613346 = header.getOrDefault("X-Amz-Date")
  valid_613346 = validateParameter(valid_613346, JString, required = false,
                                 default = nil)
  if valid_613346 != nil:
    section.add "X-Amz-Date", valid_613346
  var valid_613347 = header.getOrDefault("X-Amz-Credential")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Credential", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Security-Token")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Security-Token", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-Algorithm")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-Algorithm", valid_613349
  var valid_613350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613350 = validateParameter(valid_613350, JString, required = false,
                                 default = nil)
  if valid_613350 != nil:
    section.add "X-Amz-SignedHeaders", valid_613350
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613351 = formData.getOrDefault("GroupName")
  valid_613351 = validateParameter(valid_613351, JString, required = true,
                                 default = nil)
  if valid_613351 != nil:
    section.add "GroupName", valid_613351
  var valid_613352 = formData.getOrDefault("PolicyName")
  valid_613352 = validateParameter(valid_613352, JString, required = true,
                                 default = nil)
  if valid_613352 != nil:
    section.add "PolicyName", valid_613352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613353: Call_PostGetGroupPolicy_613339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613353.validator(path, query, header, formData, body)
  let scheme = call_613353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613353.url(scheme.get, call_613353.host, call_613353.base,
                         call_613353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613353, url, valid)

proc call*(call_613354: Call_PostGetGroupPolicy_613339; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613355 = newJObject()
  var formData_613356 = newJObject()
  add(formData_613356, "GroupName", newJString(GroupName))
  add(query_613355, "Action", newJString(Action))
  add(query_613355, "Version", newJString(Version))
  add(formData_613356, "PolicyName", newJString(PolicyName))
  result = call_613354.call(nil, query_613355, nil, formData_613356, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_613339(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_613340, base: "/",
    url: url_PostGetGroupPolicy_613341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_613322 = ref object of OpenApiRestCall_610658
proc url_GetGetGroupPolicy_613324(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroupPolicy_613323(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613325 = query.getOrDefault("GroupName")
  valid_613325 = validateParameter(valid_613325, JString, required = true,
                                 default = nil)
  if valid_613325 != nil:
    section.add "GroupName", valid_613325
  var valid_613326 = query.getOrDefault("PolicyName")
  valid_613326 = validateParameter(valid_613326, JString, required = true,
                                 default = nil)
  if valid_613326 != nil:
    section.add "PolicyName", valid_613326
  var valid_613327 = query.getOrDefault("Action")
  valid_613327 = validateParameter(valid_613327, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_613327 != nil:
    section.add "Action", valid_613327
  var valid_613328 = query.getOrDefault("Version")
  valid_613328 = validateParameter(valid_613328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613328 != nil:
    section.add "Version", valid_613328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613329 = header.getOrDefault("X-Amz-Signature")
  valid_613329 = validateParameter(valid_613329, JString, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "X-Amz-Signature", valid_613329
  var valid_613330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613330 = validateParameter(valid_613330, JString, required = false,
                                 default = nil)
  if valid_613330 != nil:
    section.add "X-Amz-Content-Sha256", valid_613330
  var valid_613331 = header.getOrDefault("X-Amz-Date")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Date", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Credential")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Credential", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Security-Token")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Security-Token", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-Algorithm")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-Algorithm", valid_613334
  var valid_613335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613335 = validateParameter(valid_613335, JString, required = false,
                                 default = nil)
  if valid_613335 != nil:
    section.add "X-Amz-SignedHeaders", valid_613335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613336: Call_GetGetGroupPolicy_613322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613336.validator(path, query, header, formData, body)
  let scheme = call_613336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613336.url(scheme.get, call_613336.host, call_613336.base,
                         call_613336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613336, url, valid)

proc call*(call_613337: Call_GetGetGroupPolicy_613322; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613338 = newJObject()
  add(query_613338, "GroupName", newJString(GroupName))
  add(query_613338, "PolicyName", newJString(PolicyName))
  add(query_613338, "Action", newJString(Action))
  add(query_613338, "Version", newJString(Version))
  result = call_613337.call(nil, query_613338, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_613322(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_613323,
    base: "/", url: url_GetGetGroupPolicy_613324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_613373 = ref object of OpenApiRestCall_610658
proc url_PostGetInstanceProfile_613375(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetInstanceProfile_613374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613376 = query.getOrDefault("Action")
  valid_613376 = validateParameter(valid_613376, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_613376 != nil:
    section.add "Action", valid_613376
  var valid_613377 = query.getOrDefault("Version")
  valid_613377 = validateParameter(valid_613377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613377 != nil:
    section.add "Version", valid_613377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613378 = header.getOrDefault("X-Amz-Signature")
  valid_613378 = validateParameter(valid_613378, JString, required = false,
                                 default = nil)
  if valid_613378 != nil:
    section.add "X-Amz-Signature", valid_613378
  var valid_613379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613379 = validateParameter(valid_613379, JString, required = false,
                                 default = nil)
  if valid_613379 != nil:
    section.add "X-Amz-Content-Sha256", valid_613379
  var valid_613380 = header.getOrDefault("X-Amz-Date")
  valid_613380 = validateParameter(valid_613380, JString, required = false,
                                 default = nil)
  if valid_613380 != nil:
    section.add "X-Amz-Date", valid_613380
  var valid_613381 = header.getOrDefault("X-Amz-Credential")
  valid_613381 = validateParameter(valid_613381, JString, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "X-Amz-Credential", valid_613381
  var valid_613382 = header.getOrDefault("X-Amz-Security-Token")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "X-Amz-Security-Token", valid_613382
  var valid_613383 = header.getOrDefault("X-Amz-Algorithm")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-Algorithm", valid_613383
  var valid_613384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613384 = validateParameter(valid_613384, JString, required = false,
                                 default = nil)
  if valid_613384 != nil:
    section.add "X-Amz-SignedHeaders", valid_613384
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_613385 = formData.getOrDefault("InstanceProfileName")
  valid_613385 = validateParameter(valid_613385, JString, required = true,
                                 default = nil)
  if valid_613385 != nil:
    section.add "InstanceProfileName", valid_613385
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613386: Call_PostGetInstanceProfile_613373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613386.validator(path, query, header, formData, body)
  let scheme = call_613386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613386.url(scheme.get, call_613386.host, call_613386.base,
                         call_613386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613386, url, valid)

proc call*(call_613387: Call_PostGetInstanceProfile_613373;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613388 = newJObject()
  var formData_613389 = newJObject()
  add(query_613388, "Action", newJString(Action))
  add(formData_613389, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613388, "Version", newJString(Version))
  result = call_613387.call(nil, query_613388, nil, formData_613389, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_613373(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_613374, base: "/",
    url: url_PostGetInstanceProfile_613375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_613357 = ref object of OpenApiRestCall_610658
proc url_GetGetInstanceProfile_613359(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetInstanceProfile_613358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613360 = query.getOrDefault("Action")
  valid_613360 = validateParameter(valid_613360, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_613360 != nil:
    section.add "Action", valid_613360
  var valid_613361 = query.getOrDefault("InstanceProfileName")
  valid_613361 = validateParameter(valid_613361, JString, required = true,
                                 default = nil)
  if valid_613361 != nil:
    section.add "InstanceProfileName", valid_613361
  var valid_613362 = query.getOrDefault("Version")
  valid_613362 = validateParameter(valid_613362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613362 != nil:
    section.add "Version", valid_613362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613363 = header.getOrDefault("X-Amz-Signature")
  valid_613363 = validateParameter(valid_613363, JString, required = false,
                                 default = nil)
  if valid_613363 != nil:
    section.add "X-Amz-Signature", valid_613363
  var valid_613364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613364 = validateParameter(valid_613364, JString, required = false,
                                 default = nil)
  if valid_613364 != nil:
    section.add "X-Amz-Content-Sha256", valid_613364
  var valid_613365 = header.getOrDefault("X-Amz-Date")
  valid_613365 = validateParameter(valid_613365, JString, required = false,
                                 default = nil)
  if valid_613365 != nil:
    section.add "X-Amz-Date", valid_613365
  var valid_613366 = header.getOrDefault("X-Amz-Credential")
  valid_613366 = validateParameter(valid_613366, JString, required = false,
                                 default = nil)
  if valid_613366 != nil:
    section.add "X-Amz-Credential", valid_613366
  var valid_613367 = header.getOrDefault("X-Amz-Security-Token")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "X-Amz-Security-Token", valid_613367
  var valid_613368 = header.getOrDefault("X-Amz-Algorithm")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Algorithm", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-SignedHeaders", valid_613369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613370: Call_GetGetInstanceProfile_613357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613370.validator(path, query, header, formData, body)
  let scheme = call_613370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613370.url(scheme.get, call_613370.host, call_613370.base,
                         call_613370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613370, url, valid)

proc call*(call_613371: Call_GetGetInstanceProfile_613357;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613372 = newJObject()
  add(query_613372, "Action", newJString(Action))
  add(query_613372, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613372, "Version", newJString(Version))
  result = call_613371.call(nil, query_613372, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_613357(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_613358, base: "/",
    url: url_GetGetInstanceProfile_613359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_613406 = ref object of OpenApiRestCall_610658
proc url_PostGetLoginProfile_613408(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetLoginProfile_613407(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613409 = query.getOrDefault("Action")
  valid_613409 = validateParameter(valid_613409, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_613409 != nil:
    section.add "Action", valid_613409
  var valid_613410 = query.getOrDefault("Version")
  valid_613410 = validateParameter(valid_613410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613410 != nil:
    section.add "Version", valid_613410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613411 = header.getOrDefault("X-Amz-Signature")
  valid_613411 = validateParameter(valid_613411, JString, required = false,
                                 default = nil)
  if valid_613411 != nil:
    section.add "X-Amz-Signature", valid_613411
  var valid_613412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613412 = validateParameter(valid_613412, JString, required = false,
                                 default = nil)
  if valid_613412 != nil:
    section.add "X-Amz-Content-Sha256", valid_613412
  var valid_613413 = header.getOrDefault("X-Amz-Date")
  valid_613413 = validateParameter(valid_613413, JString, required = false,
                                 default = nil)
  if valid_613413 != nil:
    section.add "X-Amz-Date", valid_613413
  var valid_613414 = header.getOrDefault("X-Amz-Credential")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Credential", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Security-Token")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Security-Token", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-Algorithm")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-Algorithm", valid_613416
  var valid_613417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613417 = validateParameter(valid_613417, JString, required = false,
                                 default = nil)
  if valid_613417 != nil:
    section.add "X-Amz-SignedHeaders", valid_613417
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613418 = formData.getOrDefault("UserName")
  valid_613418 = validateParameter(valid_613418, JString, required = true,
                                 default = nil)
  if valid_613418 != nil:
    section.add "UserName", valid_613418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613419: Call_PostGetLoginProfile_613406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_613419.validator(path, query, header, formData, body)
  let scheme = call_613419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613419.url(scheme.get, call_613419.host, call_613419.base,
                         call_613419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613419, url, valid)

proc call*(call_613420: Call_PostGetLoginProfile_613406; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613421 = newJObject()
  var formData_613422 = newJObject()
  add(formData_613422, "UserName", newJString(UserName))
  add(query_613421, "Action", newJString(Action))
  add(query_613421, "Version", newJString(Version))
  result = call_613420.call(nil, query_613421, nil, formData_613422, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_613406(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_613407, base: "/",
    url: url_PostGetLoginProfile_613408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_613390 = ref object of OpenApiRestCall_610658
proc url_GetGetLoginProfile_613392(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetLoginProfile_613391(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613393 = query.getOrDefault("UserName")
  valid_613393 = validateParameter(valid_613393, JString, required = true,
                                 default = nil)
  if valid_613393 != nil:
    section.add "UserName", valid_613393
  var valid_613394 = query.getOrDefault("Action")
  valid_613394 = validateParameter(valid_613394, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_613394 != nil:
    section.add "Action", valid_613394
  var valid_613395 = query.getOrDefault("Version")
  valid_613395 = validateParameter(valid_613395, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613395 != nil:
    section.add "Version", valid_613395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613396 = header.getOrDefault("X-Amz-Signature")
  valid_613396 = validateParameter(valid_613396, JString, required = false,
                                 default = nil)
  if valid_613396 != nil:
    section.add "X-Amz-Signature", valid_613396
  var valid_613397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613397 = validateParameter(valid_613397, JString, required = false,
                                 default = nil)
  if valid_613397 != nil:
    section.add "X-Amz-Content-Sha256", valid_613397
  var valid_613398 = header.getOrDefault("X-Amz-Date")
  valid_613398 = validateParameter(valid_613398, JString, required = false,
                                 default = nil)
  if valid_613398 != nil:
    section.add "X-Amz-Date", valid_613398
  var valid_613399 = header.getOrDefault("X-Amz-Credential")
  valid_613399 = validateParameter(valid_613399, JString, required = false,
                                 default = nil)
  if valid_613399 != nil:
    section.add "X-Amz-Credential", valid_613399
  var valid_613400 = header.getOrDefault("X-Amz-Security-Token")
  valid_613400 = validateParameter(valid_613400, JString, required = false,
                                 default = nil)
  if valid_613400 != nil:
    section.add "X-Amz-Security-Token", valid_613400
  var valid_613401 = header.getOrDefault("X-Amz-Algorithm")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "X-Amz-Algorithm", valid_613401
  var valid_613402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613402 = validateParameter(valid_613402, JString, required = false,
                                 default = nil)
  if valid_613402 != nil:
    section.add "X-Amz-SignedHeaders", valid_613402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613403: Call_GetGetLoginProfile_613390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_613403.validator(path, query, header, formData, body)
  let scheme = call_613403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613403.url(scheme.get, call_613403.host, call_613403.base,
                         call_613403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613403, url, valid)

proc call*(call_613404: Call_GetGetLoginProfile_613390; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613405 = newJObject()
  add(query_613405, "UserName", newJString(UserName))
  add(query_613405, "Action", newJString(Action))
  add(query_613405, "Version", newJString(Version))
  result = call_613404.call(nil, query_613405, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_613390(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_613391,
    base: "/", url: url_GetGetLoginProfile_613392,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_613439 = ref object of OpenApiRestCall_610658
proc url_PostGetOpenIDConnectProvider_613441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOpenIDConnectProvider_613440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613442 = query.getOrDefault("Action")
  valid_613442 = validateParameter(valid_613442, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_613442 != nil:
    section.add "Action", valid_613442
  var valid_613443 = query.getOrDefault("Version")
  valid_613443 = validateParameter(valid_613443, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613443 != nil:
    section.add "Version", valid_613443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613444 = header.getOrDefault("X-Amz-Signature")
  valid_613444 = validateParameter(valid_613444, JString, required = false,
                                 default = nil)
  if valid_613444 != nil:
    section.add "X-Amz-Signature", valid_613444
  var valid_613445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613445 = validateParameter(valid_613445, JString, required = false,
                                 default = nil)
  if valid_613445 != nil:
    section.add "X-Amz-Content-Sha256", valid_613445
  var valid_613446 = header.getOrDefault("X-Amz-Date")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "X-Amz-Date", valid_613446
  var valid_613447 = header.getOrDefault("X-Amz-Credential")
  valid_613447 = validateParameter(valid_613447, JString, required = false,
                                 default = nil)
  if valid_613447 != nil:
    section.add "X-Amz-Credential", valid_613447
  var valid_613448 = header.getOrDefault("X-Amz-Security-Token")
  valid_613448 = validateParameter(valid_613448, JString, required = false,
                                 default = nil)
  if valid_613448 != nil:
    section.add "X-Amz-Security-Token", valid_613448
  var valid_613449 = header.getOrDefault("X-Amz-Algorithm")
  valid_613449 = validateParameter(valid_613449, JString, required = false,
                                 default = nil)
  if valid_613449 != nil:
    section.add "X-Amz-Algorithm", valid_613449
  var valid_613450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613450 = validateParameter(valid_613450, JString, required = false,
                                 default = nil)
  if valid_613450 != nil:
    section.add "X-Amz-SignedHeaders", valid_613450
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_613451 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_613451 = validateParameter(valid_613451, JString, required = true,
                                 default = nil)
  if valid_613451 != nil:
    section.add "OpenIDConnectProviderArn", valid_613451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613452: Call_PostGetOpenIDConnectProvider_613439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_613452.validator(path, query, header, formData, body)
  let scheme = call_613452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613452.url(scheme.get, call_613452.host, call_613452.base,
                         call_613452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613452, url, valid)

proc call*(call_613453: Call_PostGetOpenIDConnectProvider_613439;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_613454 = newJObject()
  var formData_613455 = newJObject()
  add(query_613454, "Action", newJString(Action))
  add(query_613454, "Version", newJString(Version))
  add(formData_613455, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_613453.call(nil, query_613454, nil, formData_613455, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_613439(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_613440, base: "/",
    url: url_PostGetOpenIDConnectProvider_613441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_613423 = ref object of OpenApiRestCall_610658
proc url_GetGetOpenIDConnectProvider_613425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOpenIDConnectProvider_613424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_613426 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_613426 = validateParameter(valid_613426, JString, required = true,
                                 default = nil)
  if valid_613426 != nil:
    section.add "OpenIDConnectProviderArn", valid_613426
  var valid_613427 = query.getOrDefault("Action")
  valid_613427 = validateParameter(valid_613427, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_613427 != nil:
    section.add "Action", valid_613427
  var valid_613428 = query.getOrDefault("Version")
  valid_613428 = validateParameter(valid_613428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613428 != nil:
    section.add "Version", valid_613428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613429 = header.getOrDefault("X-Amz-Signature")
  valid_613429 = validateParameter(valid_613429, JString, required = false,
                                 default = nil)
  if valid_613429 != nil:
    section.add "X-Amz-Signature", valid_613429
  var valid_613430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613430 = validateParameter(valid_613430, JString, required = false,
                                 default = nil)
  if valid_613430 != nil:
    section.add "X-Amz-Content-Sha256", valid_613430
  var valid_613431 = header.getOrDefault("X-Amz-Date")
  valid_613431 = validateParameter(valid_613431, JString, required = false,
                                 default = nil)
  if valid_613431 != nil:
    section.add "X-Amz-Date", valid_613431
  var valid_613432 = header.getOrDefault("X-Amz-Credential")
  valid_613432 = validateParameter(valid_613432, JString, required = false,
                                 default = nil)
  if valid_613432 != nil:
    section.add "X-Amz-Credential", valid_613432
  var valid_613433 = header.getOrDefault("X-Amz-Security-Token")
  valid_613433 = validateParameter(valid_613433, JString, required = false,
                                 default = nil)
  if valid_613433 != nil:
    section.add "X-Amz-Security-Token", valid_613433
  var valid_613434 = header.getOrDefault("X-Amz-Algorithm")
  valid_613434 = validateParameter(valid_613434, JString, required = false,
                                 default = nil)
  if valid_613434 != nil:
    section.add "X-Amz-Algorithm", valid_613434
  var valid_613435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "X-Amz-SignedHeaders", valid_613435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613436: Call_GetGetOpenIDConnectProvider_613423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_613436.validator(path, query, header, formData, body)
  let scheme = call_613436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613436.url(scheme.get, call_613436.host, call_613436.base,
                         call_613436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613436, url, valid)

proc call*(call_613437: Call_GetGetOpenIDConnectProvider_613423;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613438 = newJObject()
  add(query_613438, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_613438, "Action", newJString(Action))
  add(query_613438, "Version", newJString(Version))
  result = call_613437.call(nil, query_613438, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_613423(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_613424, base: "/",
    url: url_GetGetOpenIDConnectProvider_613425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_613475 = ref object of OpenApiRestCall_610658
proc url_PostGetOrganizationsAccessReport_613477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOrganizationsAccessReport_613476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613478 = query.getOrDefault("Action")
  valid_613478 = validateParameter(valid_613478, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_613478 != nil:
    section.add "Action", valid_613478
  var valid_613479 = query.getOrDefault("Version")
  valid_613479 = validateParameter(valid_613479, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613479 != nil:
    section.add "Version", valid_613479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613480 = header.getOrDefault("X-Amz-Signature")
  valid_613480 = validateParameter(valid_613480, JString, required = false,
                                 default = nil)
  if valid_613480 != nil:
    section.add "X-Amz-Signature", valid_613480
  var valid_613481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613481 = validateParameter(valid_613481, JString, required = false,
                                 default = nil)
  if valid_613481 != nil:
    section.add "X-Amz-Content-Sha256", valid_613481
  var valid_613482 = header.getOrDefault("X-Amz-Date")
  valid_613482 = validateParameter(valid_613482, JString, required = false,
                                 default = nil)
  if valid_613482 != nil:
    section.add "X-Amz-Date", valid_613482
  var valid_613483 = header.getOrDefault("X-Amz-Credential")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "X-Amz-Credential", valid_613483
  var valid_613484 = header.getOrDefault("X-Amz-Security-Token")
  valid_613484 = validateParameter(valid_613484, JString, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "X-Amz-Security-Token", valid_613484
  var valid_613485 = header.getOrDefault("X-Amz-Algorithm")
  valid_613485 = validateParameter(valid_613485, JString, required = false,
                                 default = nil)
  if valid_613485 != nil:
    section.add "X-Amz-Algorithm", valid_613485
  var valid_613486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613486 = validateParameter(valid_613486, JString, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "X-Amz-SignedHeaders", valid_613486
  result.add "header", section
  ## parameters in `formData` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_613487 = formData.getOrDefault("SortKey")
  valid_613487 = validateParameter(valid_613487, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_613487 != nil:
    section.add "SortKey", valid_613487
  var valid_613488 = formData.getOrDefault("Marker")
  valid_613488 = validateParameter(valid_613488, JString, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "Marker", valid_613488
  var valid_613489 = formData.getOrDefault("MaxItems")
  valid_613489 = validateParameter(valid_613489, JInt, required = false, default = nil)
  if valid_613489 != nil:
    section.add "MaxItems", valid_613489
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_613490 = formData.getOrDefault("JobId")
  valid_613490 = validateParameter(valid_613490, JString, required = true,
                                 default = nil)
  if valid_613490 != nil:
    section.add "JobId", valid_613490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613491: Call_PostGetOrganizationsAccessReport_613475;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_613491.validator(path, query, header, formData, body)
  let scheme = call_613491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613491.url(scheme.get, call_613491.host, call_613491.base,
                         call_613491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613491, url, valid)

proc call*(call_613492: Call_PostGetOrganizationsAccessReport_613475;
          JobId: string; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Marker: string = ""; Action: string = "GetOrganizationsAccessReport";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Version: string (required)
  var query_613493 = newJObject()
  var formData_613494 = newJObject()
  add(formData_613494, "SortKey", newJString(SortKey))
  add(formData_613494, "Marker", newJString(Marker))
  add(query_613493, "Action", newJString(Action))
  add(formData_613494, "MaxItems", newJInt(MaxItems))
  add(formData_613494, "JobId", newJString(JobId))
  add(query_613493, "Version", newJString(Version))
  result = call_613492.call(nil, query_613493, nil, formData_613494, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_613475(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_613476, base: "/",
    url: url_PostGetOrganizationsAccessReport_613477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_613456 = ref object of OpenApiRestCall_610658
proc url_GetGetOrganizationsAccessReport_613458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOrganizationsAccessReport_613457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_613459 = query.getOrDefault("Marker")
  valid_613459 = validateParameter(valid_613459, JString, required = false,
                                 default = nil)
  if valid_613459 != nil:
    section.add "Marker", valid_613459
  var valid_613460 = query.getOrDefault("SortKey")
  valid_613460 = validateParameter(valid_613460, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_613460 != nil:
    section.add "SortKey", valid_613460
  var valid_613461 = query.getOrDefault("MaxItems")
  valid_613461 = validateParameter(valid_613461, JInt, required = false, default = nil)
  if valid_613461 != nil:
    section.add "MaxItems", valid_613461
  var valid_613462 = query.getOrDefault("Action")
  valid_613462 = validateParameter(valid_613462, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_613462 != nil:
    section.add "Action", valid_613462
  var valid_613463 = query.getOrDefault("Version")
  valid_613463 = validateParameter(valid_613463, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613463 != nil:
    section.add "Version", valid_613463
  var valid_613464 = query.getOrDefault("JobId")
  valid_613464 = validateParameter(valid_613464, JString, required = true,
                                 default = nil)
  if valid_613464 != nil:
    section.add "JobId", valid_613464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613465 = header.getOrDefault("X-Amz-Signature")
  valid_613465 = validateParameter(valid_613465, JString, required = false,
                                 default = nil)
  if valid_613465 != nil:
    section.add "X-Amz-Signature", valid_613465
  var valid_613466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613466 = validateParameter(valid_613466, JString, required = false,
                                 default = nil)
  if valid_613466 != nil:
    section.add "X-Amz-Content-Sha256", valid_613466
  var valid_613467 = header.getOrDefault("X-Amz-Date")
  valid_613467 = validateParameter(valid_613467, JString, required = false,
                                 default = nil)
  if valid_613467 != nil:
    section.add "X-Amz-Date", valid_613467
  var valid_613468 = header.getOrDefault("X-Amz-Credential")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "X-Amz-Credential", valid_613468
  var valid_613469 = header.getOrDefault("X-Amz-Security-Token")
  valid_613469 = validateParameter(valid_613469, JString, required = false,
                                 default = nil)
  if valid_613469 != nil:
    section.add "X-Amz-Security-Token", valid_613469
  var valid_613470 = header.getOrDefault("X-Amz-Algorithm")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "X-Amz-Algorithm", valid_613470
  var valid_613471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "X-Amz-SignedHeaders", valid_613471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613472: Call_GetGetOrganizationsAccessReport_613456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_613472.validator(path, query, header, formData, body)
  let scheme = call_613472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613472.url(scheme.get, call_613472.host, call_613472.base,
                         call_613472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613472, url, valid)

proc call*(call_613473: Call_GetGetOrganizationsAccessReport_613456; JobId: string;
          Marker: string = ""; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          MaxItems: int = 0; Action: string = "GetOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  var query_613474 = newJObject()
  add(query_613474, "Marker", newJString(Marker))
  add(query_613474, "SortKey", newJString(SortKey))
  add(query_613474, "MaxItems", newJInt(MaxItems))
  add(query_613474, "Action", newJString(Action))
  add(query_613474, "Version", newJString(Version))
  add(query_613474, "JobId", newJString(JobId))
  result = call_613473.call(nil, query_613474, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_613456(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_613457, base: "/",
    url: url_GetGetOrganizationsAccessReport_613458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_613511 = ref object of OpenApiRestCall_610658
proc url_PostGetPolicy_613513(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicy_613512(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613514 = query.getOrDefault("Action")
  valid_613514 = validateParameter(valid_613514, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_613514 != nil:
    section.add "Action", valid_613514
  var valid_613515 = query.getOrDefault("Version")
  valid_613515 = validateParameter(valid_613515, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613515 != nil:
    section.add "Version", valid_613515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613516 = header.getOrDefault("X-Amz-Signature")
  valid_613516 = validateParameter(valid_613516, JString, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "X-Amz-Signature", valid_613516
  var valid_613517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613517 = validateParameter(valid_613517, JString, required = false,
                                 default = nil)
  if valid_613517 != nil:
    section.add "X-Amz-Content-Sha256", valid_613517
  var valid_613518 = header.getOrDefault("X-Amz-Date")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-Date", valid_613518
  var valid_613519 = header.getOrDefault("X-Amz-Credential")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "X-Amz-Credential", valid_613519
  var valid_613520 = header.getOrDefault("X-Amz-Security-Token")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "X-Amz-Security-Token", valid_613520
  var valid_613521 = header.getOrDefault("X-Amz-Algorithm")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "X-Amz-Algorithm", valid_613521
  var valid_613522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "X-Amz-SignedHeaders", valid_613522
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_613523 = formData.getOrDefault("PolicyArn")
  valid_613523 = validateParameter(valid_613523, JString, required = true,
                                 default = nil)
  if valid_613523 != nil:
    section.add "PolicyArn", valid_613523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613524: Call_PostGetPolicy_613511; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613524.validator(path, query, header, formData, body)
  let scheme = call_613524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613524.url(scheme.get, call_613524.host, call_613524.base,
                         call_613524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613524, url, valid)

proc call*(call_613525: Call_PostGetPolicy_613511; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613526 = newJObject()
  var formData_613527 = newJObject()
  add(formData_613527, "PolicyArn", newJString(PolicyArn))
  add(query_613526, "Action", newJString(Action))
  add(query_613526, "Version", newJString(Version))
  result = call_613525.call(nil, query_613526, nil, formData_613527, nil)

var postGetPolicy* = Call_PostGetPolicy_613511(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_613512,
    base: "/", url: url_PostGetPolicy_613513, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_613495 = ref object of OpenApiRestCall_610658
proc url_GetGetPolicy_613497(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicy_613496(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_613498 = query.getOrDefault("PolicyArn")
  valid_613498 = validateParameter(valid_613498, JString, required = true,
                                 default = nil)
  if valid_613498 != nil:
    section.add "PolicyArn", valid_613498
  var valid_613499 = query.getOrDefault("Action")
  valid_613499 = validateParameter(valid_613499, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_613499 != nil:
    section.add "Action", valid_613499
  var valid_613500 = query.getOrDefault("Version")
  valid_613500 = validateParameter(valid_613500, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613500 != nil:
    section.add "Version", valid_613500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613501 = header.getOrDefault("X-Amz-Signature")
  valid_613501 = validateParameter(valid_613501, JString, required = false,
                                 default = nil)
  if valid_613501 != nil:
    section.add "X-Amz-Signature", valid_613501
  var valid_613502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613502 = validateParameter(valid_613502, JString, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "X-Amz-Content-Sha256", valid_613502
  var valid_613503 = header.getOrDefault("X-Amz-Date")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-Date", valid_613503
  var valid_613504 = header.getOrDefault("X-Amz-Credential")
  valid_613504 = validateParameter(valid_613504, JString, required = false,
                                 default = nil)
  if valid_613504 != nil:
    section.add "X-Amz-Credential", valid_613504
  var valid_613505 = header.getOrDefault("X-Amz-Security-Token")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "X-Amz-Security-Token", valid_613505
  var valid_613506 = header.getOrDefault("X-Amz-Algorithm")
  valid_613506 = validateParameter(valid_613506, JString, required = false,
                                 default = nil)
  if valid_613506 != nil:
    section.add "X-Amz-Algorithm", valid_613506
  var valid_613507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613507 = validateParameter(valid_613507, JString, required = false,
                                 default = nil)
  if valid_613507 != nil:
    section.add "X-Amz-SignedHeaders", valid_613507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613508: Call_GetGetPolicy_613495; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613508.validator(path, query, header, formData, body)
  let scheme = call_613508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613508.url(scheme.get, call_613508.host, call_613508.base,
                         call_613508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613508, url, valid)

proc call*(call_613509: Call_GetGetPolicy_613495; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613510 = newJObject()
  add(query_613510, "PolicyArn", newJString(PolicyArn))
  add(query_613510, "Action", newJString(Action))
  add(query_613510, "Version", newJString(Version))
  result = call_613509.call(nil, query_613510, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_613495(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_613496, base: "/",
    url: url_GetGetPolicy_613497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_613545 = ref object of OpenApiRestCall_610658
proc url_PostGetPolicyVersion_613547(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicyVersion_613546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613548 = query.getOrDefault("Action")
  valid_613548 = validateParameter(valid_613548, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_613548 != nil:
    section.add "Action", valid_613548
  var valid_613549 = query.getOrDefault("Version")
  valid_613549 = validateParameter(valid_613549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613549 != nil:
    section.add "Version", valid_613549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613550 = header.getOrDefault("X-Amz-Signature")
  valid_613550 = validateParameter(valid_613550, JString, required = false,
                                 default = nil)
  if valid_613550 != nil:
    section.add "X-Amz-Signature", valid_613550
  var valid_613551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613551 = validateParameter(valid_613551, JString, required = false,
                                 default = nil)
  if valid_613551 != nil:
    section.add "X-Amz-Content-Sha256", valid_613551
  var valid_613552 = header.getOrDefault("X-Amz-Date")
  valid_613552 = validateParameter(valid_613552, JString, required = false,
                                 default = nil)
  if valid_613552 != nil:
    section.add "X-Amz-Date", valid_613552
  var valid_613553 = header.getOrDefault("X-Amz-Credential")
  valid_613553 = validateParameter(valid_613553, JString, required = false,
                                 default = nil)
  if valid_613553 != nil:
    section.add "X-Amz-Credential", valid_613553
  var valid_613554 = header.getOrDefault("X-Amz-Security-Token")
  valid_613554 = validateParameter(valid_613554, JString, required = false,
                                 default = nil)
  if valid_613554 != nil:
    section.add "X-Amz-Security-Token", valid_613554
  var valid_613555 = header.getOrDefault("X-Amz-Algorithm")
  valid_613555 = validateParameter(valid_613555, JString, required = false,
                                 default = nil)
  if valid_613555 != nil:
    section.add "X-Amz-Algorithm", valid_613555
  var valid_613556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613556 = validateParameter(valid_613556, JString, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "X-Amz-SignedHeaders", valid_613556
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_613557 = formData.getOrDefault("VersionId")
  valid_613557 = validateParameter(valid_613557, JString, required = true,
                                 default = nil)
  if valid_613557 != nil:
    section.add "VersionId", valid_613557
  var valid_613558 = formData.getOrDefault("PolicyArn")
  valid_613558 = validateParameter(valid_613558, JString, required = true,
                                 default = nil)
  if valid_613558 != nil:
    section.add "PolicyArn", valid_613558
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613559: Call_PostGetPolicyVersion_613545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613559.validator(path, query, header, formData, body)
  let scheme = call_613559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613559.url(scheme.get, call_613559.host, call_613559.base,
                         call_613559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613559, url, valid)

proc call*(call_613560: Call_PostGetPolicyVersion_613545; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613561 = newJObject()
  var formData_613562 = newJObject()
  add(formData_613562, "VersionId", newJString(VersionId))
  add(formData_613562, "PolicyArn", newJString(PolicyArn))
  add(query_613561, "Action", newJString(Action))
  add(query_613561, "Version", newJString(Version))
  result = call_613560.call(nil, query_613561, nil, formData_613562, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_613545(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_613546, base: "/",
    url: url_PostGetPolicyVersion_613547, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_613528 = ref object of OpenApiRestCall_610658
proc url_GetGetPolicyVersion_613530(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicyVersion_613529(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_613531 = query.getOrDefault("VersionId")
  valid_613531 = validateParameter(valid_613531, JString, required = true,
                                 default = nil)
  if valid_613531 != nil:
    section.add "VersionId", valid_613531
  var valid_613532 = query.getOrDefault("PolicyArn")
  valid_613532 = validateParameter(valid_613532, JString, required = true,
                                 default = nil)
  if valid_613532 != nil:
    section.add "PolicyArn", valid_613532
  var valid_613533 = query.getOrDefault("Action")
  valid_613533 = validateParameter(valid_613533, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_613533 != nil:
    section.add "Action", valid_613533
  var valid_613534 = query.getOrDefault("Version")
  valid_613534 = validateParameter(valid_613534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613534 != nil:
    section.add "Version", valid_613534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613535 = header.getOrDefault("X-Amz-Signature")
  valid_613535 = validateParameter(valid_613535, JString, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "X-Amz-Signature", valid_613535
  var valid_613536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "X-Amz-Content-Sha256", valid_613536
  var valid_613537 = header.getOrDefault("X-Amz-Date")
  valid_613537 = validateParameter(valid_613537, JString, required = false,
                                 default = nil)
  if valid_613537 != nil:
    section.add "X-Amz-Date", valid_613537
  var valid_613538 = header.getOrDefault("X-Amz-Credential")
  valid_613538 = validateParameter(valid_613538, JString, required = false,
                                 default = nil)
  if valid_613538 != nil:
    section.add "X-Amz-Credential", valid_613538
  var valid_613539 = header.getOrDefault("X-Amz-Security-Token")
  valid_613539 = validateParameter(valid_613539, JString, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "X-Amz-Security-Token", valid_613539
  var valid_613540 = header.getOrDefault("X-Amz-Algorithm")
  valid_613540 = validateParameter(valid_613540, JString, required = false,
                                 default = nil)
  if valid_613540 != nil:
    section.add "X-Amz-Algorithm", valid_613540
  var valid_613541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613541 = validateParameter(valid_613541, JString, required = false,
                                 default = nil)
  if valid_613541 != nil:
    section.add "X-Amz-SignedHeaders", valid_613541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613542: Call_GetGetPolicyVersion_613528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613542.validator(path, query, header, formData, body)
  let scheme = call_613542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613542.url(scheme.get, call_613542.host, call_613542.base,
                         call_613542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613542, url, valid)

proc call*(call_613543: Call_GetGetPolicyVersion_613528; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613544 = newJObject()
  add(query_613544, "VersionId", newJString(VersionId))
  add(query_613544, "PolicyArn", newJString(PolicyArn))
  add(query_613544, "Action", newJString(Action))
  add(query_613544, "Version", newJString(Version))
  result = call_613543.call(nil, query_613544, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_613528(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_613529, base: "/",
    url: url_GetGetPolicyVersion_613530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_613579 = ref object of OpenApiRestCall_610658
proc url_PostGetRole_613581(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRole_613580(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613582 = query.getOrDefault("Action")
  valid_613582 = validateParameter(valid_613582, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_613582 != nil:
    section.add "Action", valid_613582
  var valid_613583 = query.getOrDefault("Version")
  valid_613583 = validateParameter(valid_613583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613583 != nil:
    section.add "Version", valid_613583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613584 = header.getOrDefault("X-Amz-Signature")
  valid_613584 = validateParameter(valid_613584, JString, required = false,
                                 default = nil)
  if valid_613584 != nil:
    section.add "X-Amz-Signature", valid_613584
  var valid_613585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613585 = validateParameter(valid_613585, JString, required = false,
                                 default = nil)
  if valid_613585 != nil:
    section.add "X-Amz-Content-Sha256", valid_613585
  var valid_613586 = header.getOrDefault("X-Amz-Date")
  valid_613586 = validateParameter(valid_613586, JString, required = false,
                                 default = nil)
  if valid_613586 != nil:
    section.add "X-Amz-Date", valid_613586
  var valid_613587 = header.getOrDefault("X-Amz-Credential")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "X-Amz-Credential", valid_613587
  var valid_613588 = header.getOrDefault("X-Amz-Security-Token")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "X-Amz-Security-Token", valid_613588
  var valid_613589 = header.getOrDefault("X-Amz-Algorithm")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "X-Amz-Algorithm", valid_613589
  var valid_613590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613590 = validateParameter(valid_613590, JString, required = false,
                                 default = nil)
  if valid_613590 != nil:
    section.add "X-Amz-SignedHeaders", valid_613590
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613591 = formData.getOrDefault("RoleName")
  valid_613591 = validateParameter(valid_613591, JString, required = true,
                                 default = nil)
  if valid_613591 != nil:
    section.add "RoleName", valid_613591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613592: Call_PostGetRole_613579; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_613592.validator(path, query, header, formData, body)
  let scheme = call_613592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613592.url(scheme.get, call_613592.host, call_613592.base,
                         call_613592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613592, url, valid)

proc call*(call_613593: Call_PostGetRole_613579; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613594 = newJObject()
  var formData_613595 = newJObject()
  add(formData_613595, "RoleName", newJString(RoleName))
  add(query_613594, "Action", newJString(Action))
  add(query_613594, "Version", newJString(Version))
  result = call_613593.call(nil, query_613594, nil, formData_613595, nil)

var postGetRole* = Call_PostGetRole_613579(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_613580,
                                        base: "/", url: url_PostGetRole_613581,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_613563 = ref object of OpenApiRestCall_610658
proc url_GetGetRole_613565(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRole_613564(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_613566 = query.getOrDefault("RoleName")
  valid_613566 = validateParameter(valid_613566, JString, required = true,
                                 default = nil)
  if valid_613566 != nil:
    section.add "RoleName", valid_613566
  var valid_613567 = query.getOrDefault("Action")
  valid_613567 = validateParameter(valid_613567, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_613567 != nil:
    section.add "Action", valid_613567
  var valid_613568 = query.getOrDefault("Version")
  valid_613568 = validateParameter(valid_613568, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613568 != nil:
    section.add "Version", valid_613568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613569 = header.getOrDefault("X-Amz-Signature")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "X-Amz-Signature", valid_613569
  var valid_613570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "X-Amz-Content-Sha256", valid_613570
  var valid_613571 = header.getOrDefault("X-Amz-Date")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Date", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-Credential")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-Credential", valid_613572
  var valid_613573 = header.getOrDefault("X-Amz-Security-Token")
  valid_613573 = validateParameter(valid_613573, JString, required = false,
                                 default = nil)
  if valid_613573 != nil:
    section.add "X-Amz-Security-Token", valid_613573
  var valid_613574 = header.getOrDefault("X-Amz-Algorithm")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Algorithm", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-SignedHeaders", valid_613575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613576: Call_GetGetRole_613563; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_613576.validator(path, query, header, formData, body)
  let scheme = call_613576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613576.url(scheme.get, call_613576.host, call_613576.base,
                         call_613576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613576, url, valid)

proc call*(call_613577: Call_GetGetRole_613563; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613578 = newJObject()
  add(query_613578, "RoleName", newJString(RoleName))
  add(query_613578, "Action", newJString(Action))
  add(query_613578, "Version", newJString(Version))
  result = call_613577.call(nil, query_613578, nil, nil, nil)

var getGetRole* = Call_GetGetRole_613563(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_613564,
                                      base: "/", url: url_GetGetRole_613565,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_613613 = ref object of OpenApiRestCall_610658
proc url_PostGetRolePolicy_613615(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRolePolicy_613614(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613616 = query.getOrDefault("Action")
  valid_613616 = validateParameter(valid_613616, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_613616 != nil:
    section.add "Action", valid_613616
  var valid_613617 = query.getOrDefault("Version")
  valid_613617 = validateParameter(valid_613617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613617 != nil:
    section.add "Version", valid_613617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613618 = header.getOrDefault("X-Amz-Signature")
  valid_613618 = validateParameter(valid_613618, JString, required = false,
                                 default = nil)
  if valid_613618 != nil:
    section.add "X-Amz-Signature", valid_613618
  var valid_613619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613619 = validateParameter(valid_613619, JString, required = false,
                                 default = nil)
  if valid_613619 != nil:
    section.add "X-Amz-Content-Sha256", valid_613619
  var valid_613620 = header.getOrDefault("X-Amz-Date")
  valid_613620 = validateParameter(valid_613620, JString, required = false,
                                 default = nil)
  if valid_613620 != nil:
    section.add "X-Amz-Date", valid_613620
  var valid_613621 = header.getOrDefault("X-Amz-Credential")
  valid_613621 = validateParameter(valid_613621, JString, required = false,
                                 default = nil)
  if valid_613621 != nil:
    section.add "X-Amz-Credential", valid_613621
  var valid_613622 = header.getOrDefault("X-Amz-Security-Token")
  valid_613622 = validateParameter(valid_613622, JString, required = false,
                                 default = nil)
  if valid_613622 != nil:
    section.add "X-Amz-Security-Token", valid_613622
  var valid_613623 = header.getOrDefault("X-Amz-Algorithm")
  valid_613623 = validateParameter(valid_613623, JString, required = false,
                                 default = nil)
  if valid_613623 != nil:
    section.add "X-Amz-Algorithm", valid_613623
  var valid_613624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613624 = validateParameter(valid_613624, JString, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "X-Amz-SignedHeaders", valid_613624
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613625 = formData.getOrDefault("RoleName")
  valid_613625 = validateParameter(valid_613625, JString, required = true,
                                 default = nil)
  if valid_613625 != nil:
    section.add "RoleName", valid_613625
  var valid_613626 = formData.getOrDefault("PolicyName")
  valid_613626 = validateParameter(valid_613626, JString, required = true,
                                 default = nil)
  if valid_613626 != nil:
    section.add "PolicyName", valid_613626
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613627: Call_PostGetRolePolicy_613613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_613627.validator(path, query, header, formData, body)
  let scheme = call_613627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613627.url(scheme.get, call_613627.host, call_613627.base,
                         call_613627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613627, url, valid)

proc call*(call_613628: Call_PostGetRolePolicy_613613; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613629 = newJObject()
  var formData_613630 = newJObject()
  add(formData_613630, "RoleName", newJString(RoleName))
  add(query_613629, "Action", newJString(Action))
  add(query_613629, "Version", newJString(Version))
  add(formData_613630, "PolicyName", newJString(PolicyName))
  result = call_613628.call(nil, query_613629, nil, formData_613630, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_613613(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_613614,
    base: "/", url: url_PostGetRolePolicy_613615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_613596 = ref object of OpenApiRestCall_610658
proc url_GetGetRolePolicy_613598(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRolePolicy_613597(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_613599 = query.getOrDefault("PolicyName")
  valid_613599 = validateParameter(valid_613599, JString, required = true,
                                 default = nil)
  if valid_613599 != nil:
    section.add "PolicyName", valid_613599
  var valid_613600 = query.getOrDefault("RoleName")
  valid_613600 = validateParameter(valid_613600, JString, required = true,
                                 default = nil)
  if valid_613600 != nil:
    section.add "RoleName", valid_613600
  var valid_613601 = query.getOrDefault("Action")
  valid_613601 = validateParameter(valid_613601, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_613601 != nil:
    section.add "Action", valid_613601
  var valid_613602 = query.getOrDefault("Version")
  valid_613602 = validateParameter(valid_613602, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613602 != nil:
    section.add "Version", valid_613602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613603 = header.getOrDefault("X-Amz-Signature")
  valid_613603 = validateParameter(valid_613603, JString, required = false,
                                 default = nil)
  if valid_613603 != nil:
    section.add "X-Amz-Signature", valid_613603
  var valid_613604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613604 = validateParameter(valid_613604, JString, required = false,
                                 default = nil)
  if valid_613604 != nil:
    section.add "X-Amz-Content-Sha256", valid_613604
  var valid_613605 = header.getOrDefault("X-Amz-Date")
  valid_613605 = validateParameter(valid_613605, JString, required = false,
                                 default = nil)
  if valid_613605 != nil:
    section.add "X-Amz-Date", valid_613605
  var valid_613606 = header.getOrDefault("X-Amz-Credential")
  valid_613606 = validateParameter(valid_613606, JString, required = false,
                                 default = nil)
  if valid_613606 != nil:
    section.add "X-Amz-Credential", valid_613606
  var valid_613607 = header.getOrDefault("X-Amz-Security-Token")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-Security-Token", valid_613607
  var valid_613608 = header.getOrDefault("X-Amz-Algorithm")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "X-Amz-Algorithm", valid_613608
  var valid_613609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613609 = validateParameter(valid_613609, JString, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "X-Amz-SignedHeaders", valid_613609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613610: Call_GetGetRolePolicy_613596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_613610.validator(path, query, header, formData, body)
  let scheme = call_613610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613610.url(scheme.get, call_613610.host, call_613610.base,
                         call_613610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613610, url, valid)

proc call*(call_613611: Call_GetGetRolePolicy_613596; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613612 = newJObject()
  add(query_613612, "PolicyName", newJString(PolicyName))
  add(query_613612, "RoleName", newJString(RoleName))
  add(query_613612, "Action", newJString(Action))
  add(query_613612, "Version", newJString(Version))
  result = call_613611.call(nil, query_613612, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_613596(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_613597,
    base: "/", url: url_GetGetRolePolicy_613598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_613647 = ref object of OpenApiRestCall_610658
proc url_PostGetSAMLProvider_613649(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSAMLProvider_613648(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613650 = query.getOrDefault("Action")
  valid_613650 = validateParameter(valid_613650, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_613650 != nil:
    section.add "Action", valid_613650
  var valid_613651 = query.getOrDefault("Version")
  valid_613651 = validateParameter(valid_613651, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613651 != nil:
    section.add "Version", valid_613651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613652 = header.getOrDefault("X-Amz-Signature")
  valid_613652 = validateParameter(valid_613652, JString, required = false,
                                 default = nil)
  if valid_613652 != nil:
    section.add "X-Amz-Signature", valid_613652
  var valid_613653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613653 = validateParameter(valid_613653, JString, required = false,
                                 default = nil)
  if valid_613653 != nil:
    section.add "X-Amz-Content-Sha256", valid_613653
  var valid_613654 = header.getOrDefault("X-Amz-Date")
  valid_613654 = validateParameter(valid_613654, JString, required = false,
                                 default = nil)
  if valid_613654 != nil:
    section.add "X-Amz-Date", valid_613654
  var valid_613655 = header.getOrDefault("X-Amz-Credential")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Credential", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-Security-Token")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-Security-Token", valid_613656
  var valid_613657 = header.getOrDefault("X-Amz-Algorithm")
  valid_613657 = validateParameter(valid_613657, JString, required = false,
                                 default = nil)
  if valid_613657 != nil:
    section.add "X-Amz-Algorithm", valid_613657
  var valid_613658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613658 = validateParameter(valid_613658, JString, required = false,
                                 default = nil)
  if valid_613658 != nil:
    section.add "X-Amz-SignedHeaders", valid_613658
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_613659 = formData.getOrDefault("SAMLProviderArn")
  valid_613659 = validateParameter(valid_613659, JString, required = true,
                                 default = nil)
  if valid_613659 != nil:
    section.add "SAMLProviderArn", valid_613659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613660: Call_PostGetSAMLProvider_613647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_613660.validator(path, query, header, formData, body)
  let scheme = call_613660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613660.url(scheme.get, call_613660.host, call_613660.base,
                         call_613660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613660, url, valid)

proc call*(call_613661: Call_PostGetSAMLProvider_613647; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613662 = newJObject()
  var formData_613663 = newJObject()
  add(formData_613663, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_613662, "Action", newJString(Action))
  add(query_613662, "Version", newJString(Version))
  result = call_613661.call(nil, query_613662, nil, formData_613663, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_613647(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_613648, base: "/",
    url: url_PostGetSAMLProvider_613649, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_613631 = ref object of OpenApiRestCall_610658
proc url_GetGetSAMLProvider_613633(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSAMLProvider_613632(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613634 = query.getOrDefault("Action")
  valid_613634 = validateParameter(valid_613634, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_613634 != nil:
    section.add "Action", valid_613634
  var valid_613635 = query.getOrDefault("SAMLProviderArn")
  valid_613635 = validateParameter(valid_613635, JString, required = true,
                                 default = nil)
  if valid_613635 != nil:
    section.add "SAMLProviderArn", valid_613635
  var valid_613636 = query.getOrDefault("Version")
  valid_613636 = validateParameter(valid_613636, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613636 != nil:
    section.add "Version", valid_613636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613637 = header.getOrDefault("X-Amz-Signature")
  valid_613637 = validateParameter(valid_613637, JString, required = false,
                                 default = nil)
  if valid_613637 != nil:
    section.add "X-Amz-Signature", valid_613637
  var valid_613638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613638 = validateParameter(valid_613638, JString, required = false,
                                 default = nil)
  if valid_613638 != nil:
    section.add "X-Amz-Content-Sha256", valid_613638
  var valid_613639 = header.getOrDefault("X-Amz-Date")
  valid_613639 = validateParameter(valid_613639, JString, required = false,
                                 default = nil)
  if valid_613639 != nil:
    section.add "X-Amz-Date", valid_613639
  var valid_613640 = header.getOrDefault("X-Amz-Credential")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Credential", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Security-Token")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Security-Token", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-Algorithm")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-Algorithm", valid_613642
  var valid_613643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613643 = validateParameter(valid_613643, JString, required = false,
                                 default = nil)
  if valid_613643 != nil:
    section.add "X-Amz-SignedHeaders", valid_613643
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613644: Call_GetGetSAMLProvider_613631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_613644.validator(path, query, header, formData, body)
  let scheme = call_613644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613644.url(scheme.get, call_613644.host, call_613644.base,
                         call_613644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613644, url, valid)

proc call*(call_613645: Call_GetGetSAMLProvider_613631; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_613646 = newJObject()
  add(query_613646, "Action", newJString(Action))
  add(query_613646, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_613646, "Version", newJString(Version))
  result = call_613645.call(nil, query_613646, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_613631(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_613632,
    base: "/", url: url_GetGetSAMLProvider_613633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_613682 = ref object of OpenApiRestCall_610658
proc url_PostGetSSHPublicKey_613684(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSSHPublicKey_613683(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613685 = query.getOrDefault("Action")
  valid_613685 = validateParameter(valid_613685, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_613685 != nil:
    section.add "Action", valid_613685
  var valid_613686 = query.getOrDefault("Version")
  valid_613686 = validateParameter(valid_613686, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613686 != nil:
    section.add "Version", valid_613686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613687 = header.getOrDefault("X-Amz-Signature")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "X-Amz-Signature", valid_613687
  var valid_613688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613688 = validateParameter(valid_613688, JString, required = false,
                                 default = nil)
  if valid_613688 != nil:
    section.add "X-Amz-Content-Sha256", valid_613688
  var valid_613689 = header.getOrDefault("X-Amz-Date")
  valid_613689 = validateParameter(valid_613689, JString, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "X-Amz-Date", valid_613689
  var valid_613690 = header.getOrDefault("X-Amz-Credential")
  valid_613690 = validateParameter(valid_613690, JString, required = false,
                                 default = nil)
  if valid_613690 != nil:
    section.add "X-Amz-Credential", valid_613690
  var valid_613691 = header.getOrDefault("X-Amz-Security-Token")
  valid_613691 = validateParameter(valid_613691, JString, required = false,
                                 default = nil)
  if valid_613691 != nil:
    section.add "X-Amz-Security-Token", valid_613691
  var valid_613692 = header.getOrDefault("X-Amz-Algorithm")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "X-Amz-Algorithm", valid_613692
  var valid_613693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613693 = validateParameter(valid_613693, JString, required = false,
                                 default = nil)
  if valid_613693 != nil:
    section.add "X-Amz-SignedHeaders", valid_613693
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_613694 = formData.getOrDefault("SSHPublicKeyId")
  valid_613694 = validateParameter(valid_613694, JString, required = true,
                                 default = nil)
  if valid_613694 != nil:
    section.add "SSHPublicKeyId", valid_613694
  var valid_613695 = formData.getOrDefault("Encoding")
  valid_613695 = validateParameter(valid_613695, JString, required = true,
                                 default = newJString("SSH"))
  if valid_613695 != nil:
    section.add "Encoding", valid_613695
  var valid_613696 = formData.getOrDefault("UserName")
  valid_613696 = validateParameter(valid_613696, JString, required = true,
                                 default = nil)
  if valid_613696 != nil:
    section.add "UserName", valid_613696
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613697: Call_PostGetSSHPublicKey_613682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_613697.validator(path, query, header, formData, body)
  let scheme = call_613697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613697.url(scheme.get, call_613697.host, call_613697.base,
                         call_613697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613697, url, valid)

proc call*(call_613698: Call_PostGetSSHPublicKey_613682; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613699 = newJObject()
  var formData_613700 = newJObject()
  add(formData_613700, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_613700, "Encoding", newJString(Encoding))
  add(formData_613700, "UserName", newJString(UserName))
  add(query_613699, "Action", newJString(Action))
  add(query_613699, "Version", newJString(Version))
  result = call_613698.call(nil, query_613699, nil, formData_613700, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_613682(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_613683, base: "/",
    url: url_PostGetSSHPublicKey_613684, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_613664 = ref object of OpenApiRestCall_610658
proc url_GetGetSSHPublicKey_613666(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSSHPublicKey_613665(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_613667 = query.getOrDefault("SSHPublicKeyId")
  valid_613667 = validateParameter(valid_613667, JString, required = true,
                                 default = nil)
  if valid_613667 != nil:
    section.add "SSHPublicKeyId", valid_613667
  var valid_613668 = query.getOrDefault("UserName")
  valid_613668 = validateParameter(valid_613668, JString, required = true,
                                 default = nil)
  if valid_613668 != nil:
    section.add "UserName", valid_613668
  var valid_613669 = query.getOrDefault("Encoding")
  valid_613669 = validateParameter(valid_613669, JString, required = true,
                                 default = newJString("SSH"))
  if valid_613669 != nil:
    section.add "Encoding", valid_613669
  var valid_613670 = query.getOrDefault("Action")
  valid_613670 = validateParameter(valid_613670, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_613670 != nil:
    section.add "Action", valid_613670
  var valid_613671 = query.getOrDefault("Version")
  valid_613671 = validateParameter(valid_613671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613671 != nil:
    section.add "Version", valid_613671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613672 = header.getOrDefault("X-Amz-Signature")
  valid_613672 = validateParameter(valid_613672, JString, required = false,
                                 default = nil)
  if valid_613672 != nil:
    section.add "X-Amz-Signature", valid_613672
  var valid_613673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "X-Amz-Content-Sha256", valid_613673
  var valid_613674 = header.getOrDefault("X-Amz-Date")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "X-Amz-Date", valid_613674
  var valid_613675 = header.getOrDefault("X-Amz-Credential")
  valid_613675 = validateParameter(valid_613675, JString, required = false,
                                 default = nil)
  if valid_613675 != nil:
    section.add "X-Amz-Credential", valid_613675
  var valid_613676 = header.getOrDefault("X-Amz-Security-Token")
  valid_613676 = validateParameter(valid_613676, JString, required = false,
                                 default = nil)
  if valid_613676 != nil:
    section.add "X-Amz-Security-Token", valid_613676
  var valid_613677 = header.getOrDefault("X-Amz-Algorithm")
  valid_613677 = validateParameter(valid_613677, JString, required = false,
                                 default = nil)
  if valid_613677 != nil:
    section.add "X-Amz-Algorithm", valid_613677
  var valid_613678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613678 = validateParameter(valid_613678, JString, required = false,
                                 default = nil)
  if valid_613678 != nil:
    section.add "X-Amz-SignedHeaders", valid_613678
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613679: Call_GetGetSSHPublicKey_613664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_613679.validator(path, query, header, formData, body)
  let scheme = call_613679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613679.url(scheme.get, call_613679.host, call_613679.base,
                         call_613679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613679, url, valid)

proc call*(call_613680: Call_GetGetSSHPublicKey_613664; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613681 = newJObject()
  add(query_613681, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_613681, "UserName", newJString(UserName))
  add(query_613681, "Encoding", newJString(Encoding))
  add(query_613681, "Action", newJString(Action))
  add(query_613681, "Version", newJString(Version))
  result = call_613680.call(nil, query_613681, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_613664(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_613665,
    base: "/", url: url_GetGetSSHPublicKey_613666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_613717 = ref object of OpenApiRestCall_610658
proc url_PostGetServerCertificate_613719(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServerCertificate_613718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613720 = query.getOrDefault("Action")
  valid_613720 = validateParameter(valid_613720, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_613720 != nil:
    section.add "Action", valid_613720
  var valid_613721 = query.getOrDefault("Version")
  valid_613721 = validateParameter(valid_613721, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613721 != nil:
    section.add "Version", valid_613721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613722 = header.getOrDefault("X-Amz-Signature")
  valid_613722 = validateParameter(valid_613722, JString, required = false,
                                 default = nil)
  if valid_613722 != nil:
    section.add "X-Amz-Signature", valid_613722
  var valid_613723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "X-Amz-Content-Sha256", valid_613723
  var valid_613724 = header.getOrDefault("X-Amz-Date")
  valid_613724 = validateParameter(valid_613724, JString, required = false,
                                 default = nil)
  if valid_613724 != nil:
    section.add "X-Amz-Date", valid_613724
  var valid_613725 = header.getOrDefault("X-Amz-Credential")
  valid_613725 = validateParameter(valid_613725, JString, required = false,
                                 default = nil)
  if valid_613725 != nil:
    section.add "X-Amz-Credential", valid_613725
  var valid_613726 = header.getOrDefault("X-Amz-Security-Token")
  valid_613726 = validateParameter(valid_613726, JString, required = false,
                                 default = nil)
  if valid_613726 != nil:
    section.add "X-Amz-Security-Token", valid_613726
  var valid_613727 = header.getOrDefault("X-Amz-Algorithm")
  valid_613727 = validateParameter(valid_613727, JString, required = false,
                                 default = nil)
  if valid_613727 != nil:
    section.add "X-Amz-Algorithm", valid_613727
  var valid_613728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613728 = validateParameter(valid_613728, JString, required = false,
                                 default = nil)
  if valid_613728 != nil:
    section.add "X-Amz-SignedHeaders", valid_613728
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_613729 = formData.getOrDefault("ServerCertificateName")
  valid_613729 = validateParameter(valid_613729, JString, required = true,
                                 default = nil)
  if valid_613729 != nil:
    section.add "ServerCertificateName", valid_613729
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613730: Call_PostGetServerCertificate_613717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_613730.validator(path, query, header, formData, body)
  let scheme = call_613730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613730.url(scheme.get, call_613730.host, call_613730.base,
                         call_613730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613730, url, valid)

proc call*(call_613731: Call_PostGetServerCertificate_613717;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613732 = newJObject()
  var formData_613733 = newJObject()
  add(formData_613733, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_613732, "Action", newJString(Action))
  add(query_613732, "Version", newJString(Version))
  result = call_613731.call(nil, query_613732, nil, formData_613733, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_613717(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_613718, base: "/",
    url: url_PostGetServerCertificate_613719, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_613701 = ref object of OpenApiRestCall_610658
proc url_GetGetServerCertificate_613703(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServerCertificate_613702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_613704 = query.getOrDefault("ServerCertificateName")
  valid_613704 = validateParameter(valid_613704, JString, required = true,
                                 default = nil)
  if valid_613704 != nil:
    section.add "ServerCertificateName", valid_613704
  var valid_613705 = query.getOrDefault("Action")
  valid_613705 = validateParameter(valid_613705, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_613705 != nil:
    section.add "Action", valid_613705
  var valid_613706 = query.getOrDefault("Version")
  valid_613706 = validateParameter(valid_613706, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613706 != nil:
    section.add "Version", valid_613706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613707 = header.getOrDefault("X-Amz-Signature")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-Signature", valid_613707
  var valid_613708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "X-Amz-Content-Sha256", valid_613708
  var valid_613709 = header.getOrDefault("X-Amz-Date")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "X-Amz-Date", valid_613709
  var valid_613710 = header.getOrDefault("X-Amz-Credential")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "X-Amz-Credential", valid_613710
  var valid_613711 = header.getOrDefault("X-Amz-Security-Token")
  valid_613711 = validateParameter(valid_613711, JString, required = false,
                                 default = nil)
  if valid_613711 != nil:
    section.add "X-Amz-Security-Token", valid_613711
  var valid_613712 = header.getOrDefault("X-Amz-Algorithm")
  valid_613712 = validateParameter(valid_613712, JString, required = false,
                                 default = nil)
  if valid_613712 != nil:
    section.add "X-Amz-Algorithm", valid_613712
  var valid_613713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613713 = validateParameter(valid_613713, JString, required = false,
                                 default = nil)
  if valid_613713 != nil:
    section.add "X-Amz-SignedHeaders", valid_613713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613714: Call_GetGetServerCertificate_613701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_613714.validator(path, query, header, formData, body)
  let scheme = call_613714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613714.url(scheme.get, call_613714.host, call_613714.base,
                         call_613714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613714, url, valid)

proc call*(call_613715: Call_GetGetServerCertificate_613701;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613716 = newJObject()
  add(query_613716, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_613716, "Action", newJString(Action))
  add(query_613716, "Version", newJString(Version))
  result = call_613715.call(nil, query_613716, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_613701(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_613702, base: "/",
    url: url_GetGetServerCertificate_613703, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_613752 = ref object of OpenApiRestCall_610658
proc url_PostGetServiceLastAccessedDetails_613754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_613753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613755 = query.getOrDefault("Action")
  valid_613755 = validateParameter(valid_613755, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_613755 != nil:
    section.add "Action", valid_613755
  var valid_613756 = query.getOrDefault("Version")
  valid_613756 = validateParameter(valid_613756, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613756 != nil:
    section.add "Version", valid_613756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613757 = header.getOrDefault("X-Amz-Signature")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "X-Amz-Signature", valid_613757
  var valid_613758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "X-Amz-Content-Sha256", valid_613758
  var valid_613759 = header.getOrDefault("X-Amz-Date")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "X-Amz-Date", valid_613759
  var valid_613760 = header.getOrDefault("X-Amz-Credential")
  valid_613760 = validateParameter(valid_613760, JString, required = false,
                                 default = nil)
  if valid_613760 != nil:
    section.add "X-Amz-Credential", valid_613760
  var valid_613761 = header.getOrDefault("X-Amz-Security-Token")
  valid_613761 = validateParameter(valid_613761, JString, required = false,
                                 default = nil)
  if valid_613761 != nil:
    section.add "X-Amz-Security-Token", valid_613761
  var valid_613762 = header.getOrDefault("X-Amz-Algorithm")
  valid_613762 = validateParameter(valid_613762, JString, required = false,
                                 default = nil)
  if valid_613762 != nil:
    section.add "X-Amz-Algorithm", valid_613762
  var valid_613763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613763 = validateParameter(valid_613763, JString, required = false,
                                 default = nil)
  if valid_613763 != nil:
    section.add "X-Amz-SignedHeaders", valid_613763
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_613764 = formData.getOrDefault("Marker")
  valid_613764 = validateParameter(valid_613764, JString, required = false,
                                 default = nil)
  if valid_613764 != nil:
    section.add "Marker", valid_613764
  var valid_613765 = formData.getOrDefault("MaxItems")
  valid_613765 = validateParameter(valid_613765, JInt, required = false, default = nil)
  if valid_613765 != nil:
    section.add "MaxItems", valid_613765
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_613766 = formData.getOrDefault("JobId")
  valid_613766 = validateParameter(valid_613766, JString, required = true,
                                 default = nil)
  if valid_613766 != nil:
    section.add "JobId", valid_613766
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613767: Call_PostGetServiceLastAccessedDetails_613752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_613767.validator(path, query, header, formData, body)
  let scheme = call_613767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613767.url(scheme.get, call_613767.host, call_613767.base,
                         call_613767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613767, url, valid)

proc call*(call_613768: Call_PostGetServiceLastAccessedDetails_613752;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Version: string (required)
  var query_613769 = newJObject()
  var formData_613770 = newJObject()
  add(formData_613770, "Marker", newJString(Marker))
  add(query_613769, "Action", newJString(Action))
  add(formData_613770, "MaxItems", newJInt(MaxItems))
  add(formData_613770, "JobId", newJString(JobId))
  add(query_613769, "Version", newJString(Version))
  result = call_613768.call(nil, query_613769, nil, formData_613770, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_613752(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_613753, base: "/",
    url: url_PostGetServiceLastAccessedDetails_613754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_613734 = ref object of OpenApiRestCall_610658
proc url_GetGetServiceLastAccessedDetails_613736(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_613735(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_613737 = query.getOrDefault("Marker")
  valid_613737 = validateParameter(valid_613737, JString, required = false,
                                 default = nil)
  if valid_613737 != nil:
    section.add "Marker", valid_613737
  var valid_613738 = query.getOrDefault("MaxItems")
  valid_613738 = validateParameter(valid_613738, JInt, required = false, default = nil)
  if valid_613738 != nil:
    section.add "MaxItems", valid_613738
  var valid_613739 = query.getOrDefault("Action")
  valid_613739 = validateParameter(valid_613739, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_613739 != nil:
    section.add "Action", valid_613739
  var valid_613740 = query.getOrDefault("Version")
  valid_613740 = validateParameter(valid_613740, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613740 != nil:
    section.add "Version", valid_613740
  var valid_613741 = query.getOrDefault("JobId")
  valid_613741 = validateParameter(valid_613741, JString, required = true,
                                 default = nil)
  if valid_613741 != nil:
    section.add "JobId", valid_613741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613742 = header.getOrDefault("X-Amz-Signature")
  valid_613742 = validateParameter(valid_613742, JString, required = false,
                                 default = nil)
  if valid_613742 != nil:
    section.add "X-Amz-Signature", valid_613742
  var valid_613743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613743 = validateParameter(valid_613743, JString, required = false,
                                 default = nil)
  if valid_613743 != nil:
    section.add "X-Amz-Content-Sha256", valid_613743
  var valid_613744 = header.getOrDefault("X-Amz-Date")
  valid_613744 = validateParameter(valid_613744, JString, required = false,
                                 default = nil)
  if valid_613744 != nil:
    section.add "X-Amz-Date", valid_613744
  var valid_613745 = header.getOrDefault("X-Amz-Credential")
  valid_613745 = validateParameter(valid_613745, JString, required = false,
                                 default = nil)
  if valid_613745 != nil:
    section.add "X-Amz-Credential", valid_613745
  var valid_613746 = header.getOrDefault("X-Amz-Security-Token")
  valid_613746 = validateParameter(valid_613746, JString, required = false,
                                 default = nil)
  if valid_613746 != nil:
    section.add "X-Amz-Security-Token", valid_613746
  var valid_613747 = header.getOrDefault("X-Amz-Algorithm")
  valid_613747 = validateParameter(valid_613747, JString, required = false,
                                 default = nil)
  if valid_613747 != nil:
    section.add "X-Amz-Algorithm", valid_613747
  var valid_613748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613748 = validateParameter(valid_613748, JString, required = false,
                                 default = nil)
  if valid_613748 != nil:
    section.add "X-Amz-SignedHeaders", valid_613748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613749: Call_GetGetServiceLastAccessedDetails_613734;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_613749.validator(path, query, header, formData, body)
  let scheme = call_613749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613749.url(scheme.get, call_613749.host, call_613749.base,
                         call_613749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613749, url, valid)

proc call*(call_613750: Call_GetGetServiceLastAccessedDetails_613734;
          JobId: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  var query_613751 = newJObject()
  add(query_613751, "Marker", newJString(Marker))
  add(query_613751, "MaxItems", newJInt(MaxItems))
  add(query_613751, "Action", newJString(Action))
  add(query_613751, "Version", newJString(Version))
  add(query_613751, "JobId", newJString(JobId))
  result = call_613750.call(nil, query_613751, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_613734(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_613735, base: "/",
    url: url_GetGetServiceLastAccessedDetails_613736,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_613790 = ref object of OpenApiRestCall_610658
proc url_PostGetServiceLastAccessedDetailsWithEntities_613792(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_613791(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613793 = query.getOrDefault("Action")
  valid_613793 = validateParameter(valid_613793, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_613793 != nil:
    section.add "Action", valid_613793
  var valid_613794 = query.getOrDefault("Version")
  valid_613794 = validateParameter(valid_613794, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613794 != nil:
    section.add "Version", valid_613794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613795 = header.getOrDefault("X-Amz-Signature")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-Signature", valid_613795
  var valid_613796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "X-Amz-Content-Sha256", valid_613796
  var valid_613797 = header.getOrDefault("X-Amz-Date")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "X-Amz-Date", valid_613797
  var valid_613798 = header.getOrDefault("X-Amz-Credential")
  valid_613798 = validateParameter(valid_613798, JString, required = false,
                                 default = nil)
  if valid_613798 != nil:
    section.add "X-Amz-Credential", valid_613798
  var valid_613799 = header.getOrDefault("X-Amz-Security-Token")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "X-Amz-Security-Token", valid_613799
  var valid_613800 = header.getOrDefault("X-Amz-Algorithm")
  valid_613800 = validateParameter(valid_613800, JString, required = false,
                                 default = nil)
  if valid_613800 != nil:
    section.add "X-Amz-Algorithm", valid_613800
  var valid_613801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613801 = validateParameter(valid_613801, JString, required = false,
                                 default = nil)
  if valid_613801 != nil:
    section.add "X-Amz-SignedHeaders", valid_613801
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_613802 = formData.getOrDefault("Marker")
  valid_613802 = validateParameter(valid_613802, JString, required = false,
                                 default = nil)
  if valid_613802 != nil:
    section.add "Marker", valid_613802
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_613803 = formData.getOrDefault("ServiceNamespace")
  valid_613803 = validateParameter(valid_613803, JString, required = true,
                                 default = nil)
  if valid_613803 != nil:
    section.add "ServiceNamespace", valid_613803
  var valid_613804 = formData.getOrDefault("MaxItems")
  valid_613804 = validateParameter(valid_613804, JInt, required = false, default = nil)
  if valid_613804 != nil:
    section.add "MaxItems", valid_613804
  var valid_613805 = formData.getOrDefault("JobId")
  valid_613805 = validateParameter(valid_613805, JString, required = true,
                                 default = nil)
  if valid_613805 != nil:
    section.add "JobId", valid_613805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613806: Call_PostGetServiceLastAccessedDetailsWithEntities_613790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_613806.validator(path, query, header, formData, body)
  let scheme = call_613806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613806.url(scheme.get, call_613806.host, call_613806.base,
                         call_613806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613806, url, valid)

proc call*(call_613807: Call_PostGetServiceLastAccessedDetailsWithEntities_613790;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Version: string (required)
  var query_613808 = newJObject()
  var formData_613809 = newJObject()
  add(formData_613809, "Marker", newJString(Marker))
  add(formData_613809, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_613808, "Action", newJString(Action))
  add(formData_613809, "MaxItems", newJInt(MaxItems))
  add(formData_613809, "JobId", newJString(JobId))
  add(query_613808, "Version", newJString(Version))
  result = call_613807.call(nil, query_613808, nil, formData_613809, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_613790(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_613791,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_613792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_613771 = ref object of OpenApiRestCall_610658
proc url_GetGetServiceLastAccessedDetailsWithEntities_613773(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_613772(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_613774 = query.getOrDefault("Marker")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "Marker", valid_613774
  var valid_613775 = query.getOrDefault("MaxItems")
  valid_613775 = validateParameter(valid_613775, JInt, required = false, default = nil)
  if valid_613775 != nil:
    section.add "MaxItems", valid_613775
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespace` field"
  var valid_613776 = query.getOrDefault("ServiceNamespace")
  valid_613776 = validateParameter(valid_613776, JString, required = true,
                                 default = nil)
  if valid_613776 != nil:
    section.add "ServiceNamespace", valid_613776
  var valid_613777 = query.getOrDefault("Action")
  valid_613777 = validateParameter(valid_613777, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_613777 != nil:
    section.add "Action", valid_613777
  var valid_613778 = query.getOrDefault("Version")
  valid_613778 = validateParameter(valid_613778, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613778 != nil:
    section.add "Version", valid_613778
  var valid_613779 = query.getOrDefault("JobId")
  valid_613779 = validateParameter(valid_613779, JString, required = true,
                                 default = nil)
  if valid_613779 != nil:
    section.add "JobId", valid_613779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613780 = header.getOrDefault("X-Amz-Signature")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "X-Amz-Signature", valid_613780
  var valid_613781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613781 = validateParameter(valid_613781, JString, required = false,
                                 default = nil)
  if valid_613781 != nil:
    section.add "X-Amz-Content-Sha256", valid_613781
  var valid_613782 = header.getOrDefault("X-Amz-Date")
  valid_613782 = validateParameter(valid_613782, JString, required = false,
                                 default = nil)
  if valid_613782 != nil:
    section.add "X-Amz-Date", valid_613782
  var valid_613783 = header.getOrDefault("X-Amz-Credential")
  valid_613783 = validateParameter(valid_613783, JString, required = false,
                                 default = nil)
  if valid_613783 != nil:
    section.add "X-Amz-Credential", valid_613783
  var valid_613784 = header.getOrDefault("X-Amz-Security-Token")
  valid_613784 = validateParameter(valid_613784, JString, required = false,
                                 default = nil)
  if valid_613784 != nil:
    section.add "X-Amz-Security-Token", valid_613784
  var valid_613785 = header.getOrDefault("X-Amz-Algorithm")
  valid_613785 = validateParameter(valid_613785, JString, required = false,
                                 default = nil)
  if valid_613785 != nil:
    section.add "X-Amz-Algorithm", valid_613785
  var valid_613786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613786 = validateParameter(valid_613786, JString, required = false,
                                 default = nil)
  if valid_613786 != nil:
    section.add "X-Amz-SignedHeaders", valid_613786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613787: Call_GetGetServiceLastAccessedDetailsWithEntities_613771;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_613787.validator(path, query, header, formData, body)
  let scheme = call_613787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613787.url(scheme.get, call_613787.host, call_613787.base,
                         call_613787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613787, url, valid)

proc call*(call_613788: Call_GetGetServiceLastAccessedDetailsWithEntities_613771;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  var query_613789 = newJObject()
  add(query_613789, "Marker", newJString(Marker))
  add(query_613789, "MaxItems", newJInt(MaxItems))
  add(query_613789, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_613789, "Action", newJString(Action))
  add(query_613789, "Version", newJString(Version))
  add(query_613789, "JobId", newJString(JobId))
  result = call_613788.call(nil, query_613789, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_613771(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_613772,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_613773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_613826 = ref object of OpenApiRestCall_610658
proc url_PostGetServiceLinkedRoleDeletionStatus_613828(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_613827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613829 = query.getOrDefault("Action")
  valid_613829 = validateParameter(valid_613829, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_613829 != nil:
    section.add "Action", valid_613829
  var valid_613830 = query.getOrDefault("Version")
  valid_613830 = validateParameter(valid_613830, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613830 != nil:
    section.add "Version", valid_613830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613831 = header.getOrDefault("X-Amz-Signature")
  valid_613831 = validateParameter(valid_613831, JString, required = false,
                                 default = nil)
  if valid_613831 != nil:
    section.add "X-Amz-Signature", valid_613831
  var valid_613832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613832 = validateParameter(valid_613832, JString, required = false,
                                 default = nil)
  if valid_613832 != nil:
    section.add "X-Amz-Content-Sha256", valid_613832
  var valid_613833 = header.getOrDefault("X-Amz-Date")
  valid_613833 = validateParameter(valid_613833, JString, required = false,
                                 default = nil)
  if valid_613833 != nil:
    section.add "X-Amz-Date", valid_613833
  var valid_613834 = header.getOrDefault("X-Amz-Credential")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "X-Amz-Credential", valid_613834
  var valid_613835 = header.getOrDefault("X-Amz-Security-Token")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "X-Amz-Security-Token", valid_613835
  var valid_613836 = header.getOrDefault("X-Amz-Algorithm")
  valid_613836 = validateParameter(valid_613836, JString, required = false,
                                 default = nil)
  if valid_613836 != nil:
    section.add "X-Amz-Algorithm", valid_613836
  var valid_613837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "X-Amz-SignedHeaders", valid_613837
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_613838 = formData.getOrDefault("DeletionTaskId")
  valid_613838 = validateParameter(valid_613838, JString, required = true,
                                 default = nil)
  if valid_613838 != nil:
    section.add "DeletionTaskId", valid_613838
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613839: Call_PostGetServiceLinkedRoleDeletionStatus_613826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_613839.validator(path, query, header, formData, body)
  let scheme = call_613839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613839.url(scheme.get, call_613839.host, call_613839.base,
                         call_613839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613839, url, valid)

proc call*(call_613840: Call_PostGetServiceLinkedRoleDeletionStatus_613826;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613841 = newJObject()
  var formData_613842 = newJObject()
  add(formData_613842, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_613841, "Action", newJString(Action))
  add(query_613841, "Version", newJString(Version))
  result = call_613840.call(nil, query_613841, nil, formData_613842, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_613826(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_613827, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_613828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_613810 = ref object of OpenApiRestCall_610658
proc url_GetGetServiceLinkedRoleDeletionStatus_613812(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_613811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DeletionTaskId` field"
  var valid_613813 = query.getOrDefault("DeletionTaskId")
  valid_613813 = validateParameter(valid_613813, JString, required = true,
                                 default = nil)
  if valid_613813 != nil:
    section.add "DeletionTaskId", valid_613813
  var valid_613814 = query.getOrDefault("Action")
  valid_613814 = validateParameter(valid_613814, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_613814 != nil:
    section.add "Action", valid_613814
  var valid_613815 = query.getOrDefault("Version")
  valid_613815 = validateParameter(valid_613815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613815 != nil:
    section.add "Version", valid_613815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613816 = header.getOrDefault("X-Amz-Signature")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "X-Amz-Signature", valid_613816
  var valid_613817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613817 = validateParameter(valid_613817, JString, required = false,
                                 default = nil)
  if valid_613817 != nil:
    section.add "X-Amz-Content-Sha256", valid_613817
  var valid_613818 = header.getOrDefault("X-Amz-Date")
  valid_613818 = validateParameter(valid_613818, JString, required = false,
                                 default = nil)
  if valid_613818 != nil:
    section.add "X-Amz-Date", valid_613818
  var valid_613819 = header.getOrDefault("X-Amz-Credential")
  valid_613819 = validateParameter(valid_613819, JString, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "X-Amz-Credential", valid_613819
  var valid_613820 = header.getOrDefault("X-Amz-Security-Token")
  valid_613820 = validateParameter(valid_613820, JString, required = false,
                                 default = nil)
  if valid_613820 != nil:
    section.add "X-Amz-Security-Token", valid_613820
  var valid_613821 = header.getOrDefault("X-Amz-Algorithm")
  valid_613821 = validateParameter(valid_613821, JString, required = false,
                                 default = nil)
  if valid_613821 != nil:
    section.add "X-Amz-Algorithm", valid_613821
  var valid_613822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613822 = validateParameter(valid_613822, JString, required = false,
                                 default = nil)
  if valid_613822 != nil:
    section.add "X-Amz-SignedHeaders", valid_613822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613823: Call_GetGetServiceLinkedRoleDeletionStatus_613810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_613823.validator(path, query, header, formData, body)
  let scheme = call_613823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613823.url(scheme.get, call_613823.host, call_613823.base,
                         call_613823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613823, url, valid)

proc call*(call_613824: Call_GetGetServiceLinkedRoleDeletionStatus_613810;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613825 = newJObject()
  add(query_613825, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_613825, "Action", newJString(Action))
  add(query_613825, "Version", newJString(Version))
  result = call_613824.call(nil, query_613825, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_613810(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_613811, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_613812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_613859 = ref object of OpenApiRestCall_610658
proc url_PostGetUser_613861(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUser_613860(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613862 = query.getOrDefault("Action")
  valid_613862 = validateParameter(valid_613862, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_613862 != nil:
    section.add "Action", valid_613862
  var valid_613863 = query.getOrDefault("Version")
  valid_613863 = validateParameter(valid_613863, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613863 != nil:
    section.add "Version", valid_613863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613864 = header.getOrDefault("X-Amz-Signature")
  valid_613864 = validateParameter(valid_613864, JString, required = false,
                                 default = nil)
  if valid_613864 != nil:
    section.add "X-Amz-Signature", valid_613864
  var valid_613865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613865 = validateParameter(valid_613865, JString, required = false,
                                 default = nil)
  if valid_613865 != nil:
    section.add "X-Amz-Content-Sha256", valid_613865
  var valid_613866 = header.getOrDefault("X-Amz-Date")
  valid_613866 = validateParameter(valid_613866, JString, required = false,
                                 default = nil)
  if valid_613866 != nil:
    section.add "X-Amz-Date", valid_613866
  var valid_613867 = header.getOrDefault("X-Amz-Credential")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "X-Amz-Credential", valid_613867
  var valid_613868 = header.getOrDefault("X-Amz-Security-Token")
  valid_613868 = validateParameter(valid_613868, JString, required = false,
                                 default = nil)
  if valid_613868 != nil:
    section.add "X-Amz-Security-Token", valid_613868
  var valid_613869 = header.getOrDefault("X-Amz-Algorithm")
  valid_613869 = validateParameter(valid_613869, JString, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "X-Amz-Algorithm", valid_613869
  var valid_613870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-SignedHeaders", valid_613870
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_613871 = formData.getOrDefault("UserName")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = nil)
  if valid_613871 != nil:
    section.add "UserName", valid_613871
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613872: Call_PostGetUser_613859; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_613872.validator(path, query, header, formData, body)
  let scheme = call_613872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613872.url(scheme.get, call_613872.host, call_613872.base,
                         call_613872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613872, url, valid)

proc call*(call_613873: Call_PostGetUser_613859; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613874 = newJObject()
  var formData_613875 = newJObject()
  add(formData_613875, "UserName", newJString(UserName))
  add(query_613874, "Action", newJString(Action))
  add(query_613874, "Version", newJString(Version))
  result = call_613873.call(nil, query_613874, nil, formData_613875, nil)

var postGetUser* = Call_PostGetUser_613859(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_613860,
                                        base: "/", url: url_PostGetUser_613861,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_613843 = ref object of OpenApiRestCall_610658
proc url_GetGetUser_613845(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUser_613844(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613846 = query.getOrDefault("UserName")
  valid_613846 = validateParameter(valid_613846, JString, required = false,
                                 default = nil)
  if valid_613846 != nil:
    section.add "UserName", valid_613846
  var valid_613847 = query.getOrDefault("Action")
  valid_613847 = validateParameter(valid_613847, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_613847 != nil:
    section.add "Action", valid_613847
  var valid_613848 = query.getOrDefault("Version")
  valid_613848 = validateParameter(valid_613848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613848 != nil:
    section.add "Version", valid_613848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613849 = header.getOrDefault("X-Amz-Signature")
  valid_613849 = validateParameter(valid_613849, JString, required = false,
                                 default = nil)
  if valid_613849 != nil:
    section.add "X-Amz-Signature", valid_613849
  var valid_613850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613850 = validateParameter(valid_613850, JString, required = false,
                                 default = nil)
  if valid_613850 != nil:
    section.add "X-Amz-Content-Sha256", valid_613850
  var valid_613851 = header.getOrDefault("X-Amz-Date")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Date", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-Credential")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-Credential", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Security-Token")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Security-Token", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Algorithm")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Algorithm", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-SignedHeaders", valid_613855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613856: Call_GetGetUser_613843; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_613856.validator(path, query, header, formData, body)
  let scheme = call_613856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613856.url(scheme.get, call_613856.host, call_613856.base,
                         call_613856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613856, url, valid)

proc call*(call_613857: Call_GetGetUser_613843; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613858 = newJObject()
  add(query_613858, "UserName", newJString(UserName))
  add(query_613858, "Action", newJString(Action))
  add(query_613858, "Version", newJString(Version))
  result = call_613857.call(nil, query_613858, nil, nil, nil)

var getGetUser* = Call_GetGetUser_613843(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_613844,
                                      base: "/", url: url_GetGetUser_613845,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_613893 = ref object of OpenApiRestCall_610658
proc url_PostGetUserPolicy_613895(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUserPolicy_613894(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613896 = query.getOrDefault("Action")
  valid_613896 = validateParameter(valid_613896, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_613896 != nil:
    section.add "Action", valid_613896
  var valid_613897 = query.getOrDefault("Version")
  valid_613897 = validateParameter(valid_613897, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613897 != nil:
    section.add "Version", valid_613897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613898 = header.getOrDefault("X-Amz-Signature")
  valid_613898 = validateParameter(valid_613898, JString, required = false,
                                 default = nil)
  if valid_613898 != nil:
    section.add "X-Amz-Signature", valid_613898
  var valid_613899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613899 = validateParameter(valid_613899, JString, required = false,
                                 default = nil)
  if valid_613899 != nil:
    section.add "X-Amz-Content-Sha256", valid_613899
  var valid_613900 = header.getOrDefault("X-Amz-Date")
  valid_613900 = validateParameter(valid_613900, JString, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "X-Amz-Date", valid_613900
  var valid_613901 = header.getOrDefault("X-Amz-Credential")
  valid_613901 = validateParameter(valid_613901, JString, required = false,
                                 default = nil)
  if valid_613901 != nil:
    section.add "X-Amz-Credential", valid_613901
  var valid_613902 = header.getOrDefault("X-Amz-Security-Token")
  valid_613902 = validateParameter(valid_613902, JString, required = false,
                                 default = nil)
  if valid_613902 != nil:
    section.add "X-Amz-Security-Token", valid_613902
  var valid_613903 = header.getOrDefault("X-Amz-Algorithm")
  valid_613903 = validateParameter(valid_613903, JString, required = false,
                                 default = nil)
  if valid_613903 != nil:
    section.add "X-Amz-Algorithm", valid_613903
  var valid_613904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613904 = validateParameter(valid_613904, JString, required = false,
                                 default = nil)
  if valid_613904 != nil:
    section.add "X-Amz-SignedHeaders", valid_613904
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613905 = formData.getOrDefault("UserName")
  valid_613905 = validateParameter(valid_613905, JString, required = true,
                                 default = nil)
  if valid_613905 != nil:
    section.add "UserName", valid_613905
  var valid_613906 = formData.getOrDefault("PolicyName")
  valid_613906 = validateParameter(valid_613906, JString, required = true,
                                 default = nil)
  if valid_613906 != nil:
    section.add "PolicyName", valid_613906
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613907: Call_PostGetUserPolicy_613893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613907.validator(path, query, header, formData, body)
  let scheme = call_613907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613907.url(scheme.get, call_613907.host, call_613907.base,
                         call_613907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613907, url, valid)

proc call*(call_613908: Call_PostGetUserPolicy_613893; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613909 = newJObject()
  var formData_613910 = newJObject()
  add(formData_613910, "UserName", newJString(UserName))
  add(query_613909, "Action", newJString(Action))
  add(query_613909, "Version", newJString(Version))
  add(formData_613910, "PolicyName", newJString(PolicyName))
  result = call_613908.call(nil, query_613909, nil, formData_613910, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_613893(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_613894,
    base: "/", url: url_PostGetUserPolicy_613895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_613876 = ref object of OpenApiRestCall_610658
proc url_GetGetUserPolicy_613878(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUserPolicy_613877(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613879 = query.getOrDefault("UserName")
  valid_613879 = validateParameter(valid_613879, JString, required = true,
                                 default = nil)
  if valid_613879 != nil:
    section.add "UserName", valid_613879
  var valid_613880 = query.getOrDefault("PolicyName")
  valid_613880 = validateParameter(valid_613880, JString, required = true,
                                 default = nil)
  if valid_613880 != nil:
    section.add "PolicyName", valid_613880
  var valid_613881 = query.getOrDefault("Action")
  valid_613881 = validateParameter(valid_613881, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_613881 != nil:
    section.add "Action", valid_613881
  var valid_613882 = query.getOrDefault("Version")
  valid_613882 = validateParameter(valid_613882, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613882 != nil:
    section.add "Version", valid_613882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613883 = header.getOrDefault("X-Amz-Signature")
  valid_613883 = validateParameter(valid_613883, JString, required = false,
                                 default = nil)
  if valid_613883 != nil:
    section.add "X-Amz-Signature", valid_613883
  var valid_613884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613884 = validateParameter(valid_613884, JString, required = false,
                                 default = nil)
  if valid_613884 != nil:
    section.add "X-Amz-Content-Sha256", valid_613884
  var valid_613885 = header.getOrDefault("X-Amz-Date")
  valid_613885 = validateParameter(valid_613885, JString, required = false,
                                 default = nil)
  if valid_613885 != nil:
    section.add "X-Amz-Date", valid_613885
  var valid_613886 = header.getOrDefault("X-Amz-Credential")
  valid_613886 = validateParameter(valid_613886, JString, required = false,
                                 default = nil)
  if valid_613886 != nil:
    section.add "X-Amz-Credential", valid_613886
  var valid_613887 = header.getOrDefault("X-Amz-Security-Token")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "X-Amz-Security-Token", valid_613887
  var valid_613888 = header.getOrDefault("X-Amz-Algorithm")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "X-Amz-Algorithm", valid_613888
  var valid_613889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "X-Amz-SignedHeaders", valid_613889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613890: Call_GetGetUserPolicy_613876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613890.validator(path, query, header, formData, body)
  let scheme = call_613890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613890.url(scheme.get, call_613890.host, call_613890.base,
                         call_613890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613890, url, valid)

proc call*(call_613891: Call_GetGetUserPolicy_613876; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613892 = newJObject()
  add(query_613892, "UserName", newJString(UserName))
  add(query_613892, "PolicyName", newJString(PolicyName))
  add(query_613892, "Action", newJString(Action))
  add(query_613892, "Version", newJString(Version))
  result = call_613891.call(nil, query_613892, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_613876(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_613877,
    base: "/", url: url_GetGetUserPolicy_613878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_613929 = ref object of OpenApiRestCall_610658
proc url_PostListAccessKeys_613931(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccessKeys_613930(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613932 = query.getOrDefault("Action")
  valid_613932 = validateParameter(valid_613932, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_613932 != nil:
    section.add "Action", valid_613932
  var valid_613933 = query.getOrDefault("Version")
  valid_613933 = validateParameter(valid_613933, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613933 != nil:
    section.add "Version", valid_613933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613934 = header.getOrDefault("X-Amz-Signature")
  valid_613934 = validateParameter(valid_613934, JString, required = false,
                                 default = nil)
  if valid_613934 != nil:
    section.add "X-Amz-Signature", valid_613934
  var valid_613935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613935 = validateParameter(valid_613935, JString, required = false,
                                 default = nil)
  if valid_613935 != nil:
    section.add "X-Amz-Content-Sha256", valid_613935
  var valid_613936 = header.getOrDefault("X-Amz-Date")
  valid_613936 = validateParameter(valid_613936, JString, required = false,
                                 default = nil)
  if valid_613936 != nil:
    section.add "X-Amz-Date", valid_613936
  var valid_613937 = header.getOrDefault("X-Amz-Credential")
  valid_613937 = validateParameter(valid_613937, JString, required = false,
                                 default = nil)
  if valid_613937 != nil:
    section.add "X-Amz-Credential", valid_613937
  var valid_613938 = header.getOrDefault("X-Amz-Security-Token")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Security-Token", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-Algorithm")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-Algorithm", valid_613939
  var valid_613940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "X-Amz-SignedHeaders", valid_613940
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613941 = formData.getOrDefault("Marker")
  valid_613941 = validateParameter(valid_613941, JString, required = false,
                                 default = nil)
  if valid_613941 != nil:
    section.add "Marker", valid_613941
  var valid_613942 = formData.getOrDefault("UserName")
  valid_613942 = validateParameter(valid_613942, JString, required = false,
                                 default = nil)
  if valid_613942 != nil:
    section.add "UserName", valid_613942
  var valid_613943 = formData.getOrDefault("MaxItems")
  valid_613943 = validateParameter(valid_613943, JInt, required = false, default = nil)
  if valid_613943 != nil:
    section.add "MaxItems", valid_613943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613944: Call_PostListAccessKeys_613929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_613944.validator(path, query, header, formData, body)
  let scheme = call_613944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613944.url(scheme.get, call_613944.host, call_613944.base,
                         call_613944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613944, url, valid)

proc call*(call_613945: Call_PostListAccessKeys_613929; Marker: string = "";
          UserName: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613946 = newJObject()
  var formData_613947 = newJObject()
  add(formData_613947, "Marker", newJString(Marker))
  add(formData_613947, "UserName", newJString(UserName))
  add(query_613946, "Action", newJString(Action))
  add(formData_613947, "MaxItems", newJInt(MaxItems))
  add(query_613946, "Version", newJString(Version))
  result = call_613945.call(nil, query_613946, nil, formData_613947, nil)

var postListAccessKeys* = Call_PostListAccessKeys_613929(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_613930, base: "/",
    url: url_PostListAccessKeys_613931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_613911 = ref object of OpenApiRestCall_610658
proc url_GetListAccessKeys_613913(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccessKeys_613912(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613914 = query.getOrDefault("Marker")
  valid_613914 = validateParameter(valid_613914, JString, required = false,
                                 default = nil)
  if valid_613914 != nil:
    section.add "Marker", valid_613914
  var valid_613915 = query.getOrDefault("UserName")
  valid_613915 = validateParameter(valid_613915, JString, required = false,
                                 default = nil)
  if valid_613915 != nil:
    section.add "UserName", valid_613915
  var valid_613916 = query.getOrDefault("MaxItems")
  valid_613916 = validateParameter(valid_613916, JInt, required = false, default = nil)
  if valid_613916 != nil:
    section.add "MaxItems", valid_613916
  var valid_613917 = query.getOrDefault("Action")
  valid_613917 = validateParameter(valid_613917, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_613917 != nil:
    section.add "Action", valid_613917
  var valid_613918 = query.getOrDefault("Version")
  valid_613918 = validateParameter(valid_613918, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613918 != nil:
    section.add "Version", valid_613918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613919 = header.getOrDefault("X-Amz-Signature")
  valid_613919 = validateParameter(valid_613919, JString, required = false,
                                 default = nil)
  if valid_613919 != nil:
    section.add "X-Amz-Signature", valid_613919
  var valid_613920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613920 = validateParameter(valid_613920, JString, required = false,
                                 default = nil)
  if valid_613920 != nil:
    section.add "X-Amz-Content-Sha256", valid_613920
  var valid_613921 = header.getOrDefault("X-Amz-Date")
  valid_613921 = validateParameter(valid_613921, JString, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "X-Amz-Date", valid_613921
  var valid_613922 = header.getOrDefault("X-Amz-Credential")
  valid_613922 = validateParameter(valid_613922, JString, required = false,
                                 default = nil)
  if valid_613922 != nil:
    section.add "X-Amz-Credential", valid_613922
  var valid_613923 = header.getOrDefault("X-Amz-Security-Token")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Security-Token", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Algorithm")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Algorithm", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-SignedHeaders", valid_613925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613926: Call_GetListAccessKeys_613911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_613926.validator(path, query, header, formData, body)
  let scheme = call_613926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613926.url(scheme.get, call_613926.host, call_613926.base,
                         call_613926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613926, url, valid)

proc call*(call_613927: Call_GetListAccessKeys_613911; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListAccessKeys";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613928 = newJObject()
  add(query_613928, "Marker", newJString(Marker))
  add(query_613928, "UserName", newJString(UserName))
  add(query_613928, "MaxItems", newJInt(MaxItems))
  add(query_613928, "Action", newJString(Action))
  add(query_613928, "Version", newJString(Version))
  result = call_613927.call(nil, query_613928, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_613911(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_613912,
    base: "/", url: url_GetListAccessKeys_613913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_613965 = ref object of OpenApiRestCall_610658
proc url_PostListAccountAliases_613967(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccountAliases_613966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613968 = query.getOrDefault("Action")
  valid_613968 = validateParameter(valid_613968, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_613968 != nil:
    section.add "Action", valid_613968
  var valid_613969 = query.getOrDefault("Version")
  valid_613969 = validateParameter(valid_613969, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613969 != nil:
    section.add "Version", valid_613969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613970 = header.getOrDefault("X-Amz-Signature")
  valid_613970 = validateParameter(valid_613970, JString, required = false,
                                 default = nil)
  if valid_613970 != nil:
    section.add "X-Amz-Signature", valid_613970
  var valid_613971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613971 = validateParameter(valid_613971, JString, required = false,
                                 default = nil)
  if valid_613971 != nil:
    section.add "X-Amz-Content-Sha256", valid_613971
  var valid_613972 = header.getOrDefault("X-Amz-Date")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Date", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Credential")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Credential", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-Security-Token")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-Security-Token", valid_613974
  var valid_613975 = header.getOrDefault("X-Amz-Algorithm")
  valid_613975 = validateParameter(valid_613975, JString, required = false,
                                 default = nil)
  if valid_613975 != nil:
    section.add "X-Amz-Algorithm", valid_613975
  var valid_613976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "X-Amz-SignedHeaders", valid_613976
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_613977 = formData.getOrDefault("Marker")
  valid_613977 = validateParameter(valid_613977, JString, required = false,
                                 default = nil)
  if valid_613977 != nil:
    section.add "Marker", valid_613977
  var valid_613978 = formData.getOrDefault("MaxItems")
  valid_613978 = validateParameter(valid_613978, JInt, required = false, default = nil)
  if valid_613978 != nil:
    section.add "MaxItems", valid_613978
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613979: Call_PostListAccountAliases_613965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613979.validator(path, query, header, formData, body)
  let scheme = call_613979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613979.url(scheme.get, call_613979.host, call_613979.base,
                         call_613979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613979, url, valid)

proc call*(call_613980: Call_PostListAccountAliases_613965; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_613981 = newJObject()
  var formData_613982 = newJObject()
  add(formData_613982, "Marker", newJString(Marker))
  add(query_613981, "Action", newJString(Action))
  add(formData_613982, "MaxItems", newJInt(MaxItems))
  add(query_613981, "Version", newJString(Version))
  result = call_613980.call(nil, query_613981, nil, formData_613982, nil)

var postListAccountAliases* = Call_PostListAccountAliases_613965(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_613966, base: "/",
    url: url_PostListAccountAliases_613967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_613948 = ref object of OpenApiRestCall_610658
proc url_GetListAccountAliases_613950(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccountAliases_613949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613951 = query.getOrDefault("Marker")
  valid_613951 = validateParameter(valid_613951, JString, required = false,
                                 default = nil)
  if valid_613951 != nil:
    section.add "Marker", valid_613951
  var valid_613952 = query.getOrDefault("MaxItems")
  valid_613952 = validateParameter(valid_613952, JInt, required = false, default = nil)
  if valid_613952 != nil:
    section.add "MaxItems", valid_613952
  var valid_613953 = query.getOrDefault("Action")
  valid_613953 = validateParameter(valid_613953, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_613953 != nil:
    section.add "Action", valid_613953
  var valid_613954 = query.getOrDefault("Version")
  valid_613954 = validateParameter(valid_613954, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613954 != nil:
    section.add "Version", valid_613954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613955 = header.getOrDefault("X-Amz-Signature")
  valid_613955 = validateParameter(valid_613955, JString, required = false,
                                 default = nil)
  if valid_613955 != nil:
    section.add "X-Amz-Signature", valid_613955
  var valid_613956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613956 = validateParameter(valid_613956, JString, required = false,
                                 default = nil)
  if valid_613956 != nil:
    section.add "X-Amz-Content-Sha256", valid_613956
  var valid_613957 = header.getOrDefault("X-Amz-Date")
  valid_613957 = validateParameter(valid_613957, JString, required = false,
                                 default = nil)
  if valid_613957 != nil:
    section.add "X-Amz-Date", valid_613957
  var valid_613958 = header.getOrDefault("X-Amz-Credential")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Credential", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-Security-Token")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-Security-Token", valid_613959
  var valid_613960 = header.getOrDefault("X-Amz-Algorithm")
  valid_613960 = validateParameter(valid_613960, JString, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "X-Amz-Algorithm", valid_613960
  var valid_613961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613961 = validateParameter(valid_613961, JString, required = false,
                                 default = nil)
  if valid_613961 != nil:
    section.add "X-Amz-SignedHeaders", valid_613961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613962: Call_GetListAccountAliases_613948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613962.validator(path, query, header, formData, body)
  let scheme = call_613962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613962.url(scheme.get, call_613962.host, call_613962.base,
                         call_613962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613962, url, valid)

proc call*(call_613963: Call_GetListAccountAliases_613948; Marker: string = "";
          MaxItems: int = 0; Action: string = "ListAccountAliases";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613964 = newJObject()
  add(query_613964, "Marker", newJString(Marker))
  add(query_613964, "MaxItems", newJInt(MaxItems))
  add(query_613964, "Action", newJString(Action))
  add(query_613964, "Version", newJString(Version))
  result = call_613963.call(nil, query_613964, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_613948(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_613949, base: "/",
    url: url_GetListAccountAliases_613950, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_614002 = ref object of OpenApiRestCall_610658
proc url_PostListAttachedGroupPolicies_614004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedGroupPolicies_614003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614005 = query.getOrDefault("Action")
  valid_614005 = validateParameter(valid_614005, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_614005 != nil:
    section.add "Action", valid_614005
  var valid_614006 = query.getOrDefault("Version")
  valid_614006 = validateParameter(valid_614006, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614006 != nil:
    section.add "Version", valid_614006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614007 = header.getOrDefault("X-Amz-Signature")
  valid_614007 = validateParameter(valid_614007, JString, required = false,
                                 default = nil)
  if valid_614007 != nil:
    section.add "X-Amz-Signature", valid_614007
  var valid_614008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614008 = validateParameter(valid_614008, JString, required = false,
                                 default = nil)
  if valid_614008 != nil:
    section.add "X-Amz-Content-Sha256", valid_614008
  var valid_614009 = header.getOrDefault("X-Amz-Date")
  valid_614009 = validateParameter(valid_614009, JString, required = false,
                                 default = nil)
  if valid_614009 != nil:
    section.add "X-Amz-Date", valid_614009
  var valid_614010 = header.getOrDefault("X-Amz-Credential")
  valid_614010 = validateParameter(valid_614010, JString, required = false,
                                 default = nil)
  if valid_614010 != nil:
    section.add "X-Amz-Credential", valid_614010
  var valid_614011 = header.getOrDefault("X-Amz-Security-Token")
  valid_614011 = validateParameter(valid_614011, JString, required = false,
                                 default = nil)
  if valid_614011 != nil:
    section.add "X-Amz-Security-Token", valid_614011
  var valid_614012 = header.getOrDefault("X-Amz-Algorithm")
  valid_614012 = validateParameter(valid_614012, JString, required = false,
                                 default = nil)
  if valid_614012 != nil:
    section.add "X-Amz-Algorithm", valid_614012
  var valid_614013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614013 = validateParameter(valid_614013, JString, required = false,
                                 default = nil)
  if valid_614013 != nil:
    section.add "X-Amz-SignedHeaders", valid_614013
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614014 = formData.getOrDefault("Marker")
  valid_614014 = validateParameter(valid_614014, JString, required = false,
                                 default = nil)
  if valid_614014 != nil:
    section.add "Marker", valid_614014
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614015 = formData.getOrDefault("GroupName")
  valid_614015 = validateParameter(valid_614015, JString, required = true,
                                 default = nil)
  if valid_614015 != nil:
    section.add "GroupName", valid_614015
  var valid_614016 = formData.getOrDefault("PathPrefix")
  valid_614016 = validateParameter(valid_614016, JString, required = false,
                                 default = nil)
  if valid_614016 != nil:
    section.add "PathPrefix", valid_614016
  var valid_614017 = formData.getOrDefault("MaxItems")
  valid_614017 = validateParameter(valid_614017, JInt, required = false, default = nil)
  if valid_614017 != nil:
    section.add "MaxItems", valid_614017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614018: Call_PostListAttachedGroupPolicies_614002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_614018.validator(path, query, header, formData, body)
  let scheme = call_614018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614018.url(scheme.get, call_614018.host, call_614018.base,
                         call_614018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614018, url, valid)

proc call*(call_614019: Call_PostListAttachedGroupPolicies_614002;
          GroupName: string; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614020 = newJObject()
  var formData_614021 = newJObject()
  add(formData_614021, "Marker", newJString(Marker))
  add(formData_614021, "GroupName", newJString(GroupName))
  add(formData_614021, "PathPrefix", newJString(PathPrefix))
  add(formData_614021, "MaxItems", newJInt(MaxItems))
  add(query_614020, "Action", newJString(Action))
  add(query_614020, "Version", newJString(Version))
  result = call_614019.call(nil, query_614020, nil, formData_614021, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_614002(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_614003, base: "/",
    url: url_PostListAttachedGroupPolicies_614004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_613983 = ref object of OpenApiRestCall_610658
proc url_GetListAttachedGroupPolicies_613985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedGroupPolicies_613984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613986 = query.getOrDefault("Marker")
  valid_613986 = validateParameter(valid_613986, JString, required = false,
                                 default = nil)
  if valid_613986 != nil:
    section.add "Marker", valid_613986
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613987 = query.getOrDefault("GroupName")
  valid_613987 = validateParameter(valid_613987, JString, required = true,
                                 default = nil)
  if valid_613987 != nil:
    section.add "GroupName", valid_613987
  var valid_613988 = query.getOrDefault("MaxItems")
  valid_613988 = validateParameter(valid_613988, JInt, required = false, default = nil)
  if valid_613988 != nil:
    section.add "MaxItems", valid_613988
  var valid_613989 = query.getOrDefault("PathPrefix")
  valid_613989 = validateParameter(valid_613989, JString, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "PathPrefix", valid_613989
  var valid_613990 = query.getOrDefault("Action")
  valid_613990 = validateParameter(valid_613990, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_613990 != nil:
    section.add "Action", valid_613990
  var valid_613991 = query.getOrDefault("Version")
  valid_613991 = validateParameter(valid_613991, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613991 != nil:
    section.add "Version", valid_613991
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613992 = header.getOrDefault("X-Amz-Signature")
  valid_613992 = validateParameter(valid_613992, JString, required = false,
                                 default = nil)
  if valid_613992 != nil:
    section.add "X-Amz-Signature", valid_613992
  var valid_613993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613993 = validateParameter(valid_613993, JString, required = false,
                                 default = nil)
  if valid_613993 != nil:
    section.add "X-Amz-Content-Sha256", valid_613993
  var valid_613994 = header.getOrDefault("X-Amz-Date")
  valid_613994 = validateParameter(valid_613994, JString, required = false,
                                 default = nil)
  if valid_613994 != nil:
    section.add "X-Amz-Date", valid_613994
  var valid_613995 = header.getOrDefault("X-Amz-Credential")
  valid_613995 = validateParameter(valid_613995, JString, required = false,
                                 default = nil)
  if valid_613995 != nil:
    section.add "X-Amz-Credential", valid_613995
  var valid_613996 = header.getOrDefault("X-Amz-Security-Token")
  valid_613996 = validateParameter(valid_613996, JString, required = false,
                                 default = nil)
  if valid_613996 != nil:
    section.add "X-Amz-Security-Token", valid_613996
  var valid_613997 = header.getOrDefault("X-Amz-Algorithm")
  valid_613997 = validateParameter(valid_613997, JString, required = false,
                                 default = nil)
  if valid_613997 != nil:
    section.add "X-Amz-Algorithm", valid_613997
  var valid_613998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613998 = validateParameter(valid_613998, JString, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "X-Amz-SignedHeaders", valid_613998
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613999: Call_GetListAttachedGroupPolicies_613983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_613999.validator(path, query, header, formData, body)
  let scheme = call_613999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613999.url(scheme.get, call_613999.host, call_613999.base,
                         call_613999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613999, url, valid)

proc call*(call_614000: Call_GetListAttachedGroupPolicies_613983;
          GroupName: string; Marker: string = ""; MaxItems: int = 0;
          PathPrefix: string = ""; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614001 = newJObject()
  add(query_614001, "Marker", newJString(Marker))
  add(query_614001, "GroupName", newJString(GroupName))
  add(query_614001, "MaxItems", newJInt(MaxItems))
  add(query_614001, "PathPrefix", newJString(PathPrefix))
  add(query_614001, "Action", newJString(Action))
  add(query_614001, "Version", newJString(Version))
  result = call_614000.call(nil, query_614001, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_613983(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_613984, base: "/",
    url: url_GetListAttachedGroupPolicies_613985,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_614041 = ref object of OpenApiRestCall_610658
proc url_PostListAttachedRolePolicies_614043(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedRolePolicies_614042(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614044 = query.getOrDefault("Action")
  valid_614044 = validateParameter(valid_614044, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_614044 != nil:
    section.add "Action", valid_614044
  var valid_614045 = query.getOrDefault("Version")
  valid_614045 = validateParameter(valid_614045, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614045 != nil:
    section.add "Version", valid_614045
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614046 = header.getOrDefault("X-Amz-Signature")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "X-Amz-Signature", valid_614046
  var valid_614047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614047 = validateParameter(valid_614047, JString, required = false,
                                 default = nil)
  if valid_614047 != nil:
    section.add "X-Amz-Content-Sha256", valid_614047
  var valid_614048 = header.getOrDefault("X-Amz-Date")
  valid_614048 = validateParameter(valid_614048, JString, required = false,
                                 default = nil)
  if valid_614048 != nil:
    section.add "X-Amz-Date", valid_614048
  var valid_614049 = header.getOrDefault("X-Amz-Credential")
  valid_614049 = validateParameter(valid_614049, JString, required = false,
                                 default = nil)
  if valid_614049 != nil:
    section.add "X-Amz-Credential", valid_614049
  var valid_614050 = header.getOrDefault("X-Amz-Security-Token")
  valid_614050 = validateParameter(valid_614050, JString, required = false,
                                 default = nil)
  if valid_614050 != nil:
    section.add "X-Amz-Security-Token", valid_614050
  var valid_614051 = header.getOrDefault("X-Amz-Algorithm")
  valid_614051 = validateParameter(valid_614051, JString, required = false,
                                 default = nil)
  if valid_614051 != nil:
    section.add "X-Amz-Algorithm", valid_614051
  var valid_614052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614052 = validateParameter(valid_614052, JString, required = false,
                                 default = nil)
  if valid_614052 != nil:
    section.add "X-Amz-SignedHeaders", valid_614052
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614053 = formData.getOrDefault("RoleName")
  valid_614053 = validateParameter(valid_614053, JString, required = true,
                                 default = nil)
  if valid_614053 != nil:
    section.add "RoleName", valid_614053
  var valid_614054 = formData.getOrDefault("Marker")
  valid_614054 = validateParameter(valid_614054, JString, required = false,
                                 default = nil)
  if valid_614054 != nil:
    section.add "Marker", valid_614054
  var valid_614055 = formData.getOrDefault("PathPrefix")
  valid_614055 = validateParameter(valid_614055, JString, required = false,
                                 default = nil)
  if valid_614055 != nil:
    section.add "PathPrefix", valid_614055
  var valid_614056 = formData.getOrDefault("MaxItems")
  valid_614056 = validateParameter(valid_614056, JInt, required = false, default = nil)
  if valid_614056 != nil:
    section.add "MaxItems", valid_614056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614057: Call_PostListAttachedRolePolicies_614041; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_614057.validator(path, query, header, formData, body)
  let scheme = call_614057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614057.url(scheme.get, call_614057.host, call_614057.base,
                         call_614057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614057, url, valid)

proc call*(call_614058: Call_PostListAttachedRolePolicies_614041; RoleName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614059 = newJObject()
  var formData_614060 = newJObject()
  add(formData_614060, "RoleName", newJString(RoleName))
  add(formData_614060, "Marker", newJString(Marker))
  add(formData_614060, "PathPrefix", newJString(PathPrefix))
  add(formData_614060, "MaxItems", newJInt(MaxItems))
  add(query_614059, "Action", newJString(Action))
  add(query_614059, "Version", newJString(Version))
  result = call_614058.call(nil, query_614059, nil, formData_614060, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_614041(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_614042, base: "/",
    url: url_PostListAttachedRolePolicies_614043,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_614022 = ref object of OpenApiRestCall_610658
proc url_GetListAttachedRolePolicies_614024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedRolePolicies_614023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614025 = query.getOrDefault("Marker")
  valid_614025 = validateParameter(valid_614025, JString, required = false,
                                 default = nil)
  if valid_614025 != nil:
    section.add "Marker", valid_614025
  var valid_614026 = query.getOrDefault("MaxItems")
  valid_614026 = validateParameter(valid_614026, JInt, required = false, default = nil)
  if valid_614026 != nil:
    section.add "MaxItems", valid_614026
  var valid_614027 = query.getOrDefault("PathPrefix")
  valid_614027 = validateParameter(valid_614027, JString, required = false,
                                 default = nil)
  if valid_614027 != nil:
    section.add "PathPrefix", valid_614027
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614028 = query.getOrDefault("RoleName")
  valid_614028 = validateParameter(valid_614028, JString, required = true,
                                 default = nil)
  if valid_614028 != nil:
    section.add "RoleName", valid_614028
  var valid_614029 = query.getOrDefault("Action")
  valid_614029 = validateParameter(valid_614029, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_614029 != nil:
    section.add "Action", valid_614029
  var valid_614030 = query.getOrDefault("Version")
  valid_614030 = validateParameter(valid_614030, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614030 != nil:
    section.add "Version", valid_614030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614031 = header.getOrDefault("X-Amz-Signature")
  valid_614031 = validateParameter(valid_614031, JString, required = false,
                                 default = nil)
  if valid_614031 != nil:
    section.add "X-Amz-Signature", valid_614031
  var valid_614032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614032 = validateParameter(valid_614032, JString, required = false,
                                 default = nil)
  if valid_614032 != nil:
    section.add "X-Amz-Content-Sha256", valid_614032
  var valid_614033 = header.getOrDefault("X-Amz-Date")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "X-Amz-Date", valid_614033
  var valid_614034 = header.getOrDefault("X-Amz-Credential")
  valid_614034 = validateParameter(valid_614034, JString, required = false,
                                 default = nil)
  if valid_614034 != nil:
    section.add "X-Amz-Credential", valid_614034
  var valid_614035 = header.getOrDefault("X-Amz-Security-Token")
  valid_614035 = validateParameter(valid_614035, JString, required = false,
                                 default = nil)
  if valid_614035 != nil:
    section.add "X-Amz-Security-Token", valid_614035
  var valid_614036 = header.getOrDefault("X-Amz-Algorithm")
  valid_614036 = validateParameter(valid_614036, JString, required = false,
                                 default = nil)
  if valid_614036 != nil:
    section.add "X-Amz-Algorithm", valid_614036
  var valid_614037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614037 = validateParameter(valid_614037, JString, required = false,
                                 default = nil)
  if valid_614037 != nil:
    section.add "X-Amz-SignedHeaders", valid_614037
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614038: Call_GetListAttachedRolePolicies_614022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_614038.validator(path, query, header, formData, body)
  let scheme = call_614038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614038.url(scheme.get, call_614038.host, call_614038.base,
                         call_614038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614038, url, valid)

proc call*(call_614039: Call_GetListAttachedRolePolicies_614022; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614040 = newJObject()
  add(query_614040, "Marker", newJString(Marker))
  add(query_614040, "MaxItems", newJInt(MaxItems))
  add(query_614040, "PathPrefix", newJString(PathPrefix))
  add(query_614040, "RoleName", newJString(RoleName))
  add(query_614040, "Action", newJString(Action))
  add(query_614040, "Version", newJString(Version))
  result = call_614039.call(nil, query_614040, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_614022(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_614023, base: "/",
    url: url_GetListAttachedRolePolicies_614024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_614080 = ref object of OpenApiRestCall_610658
proc url_PostListAttachedUserPolicies_614082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedUserPolicies_614081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614083 = query.getOrDefault("Action")
  valid_614083 = validateParameter(valid_614083, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_614083 != nil:
    section.add "Action", valid_614083
  var valid_614084 = query.getOrDefault("Version")
  valid_614084 = validateParameter(valid_614084, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614084 != nil:
    section.add "Version", valid_614084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614085 = header.getOrDefault("X-Amz-Signature")
  valid_614085 = validateParameter(valid_614085, JString, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "X-Amz-Signature", valid_614085
  var valid_614086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Content-Sha256", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-Date")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-Date", valid_614087
  var valid_614088 = header.getOrDefault("X-Amz-Credential")
  valid_614088 = validateParameter(valid_614088, JString, required = false,
                                 default = nil)
  if valid_614088 != nil:
    section.add "X-Amz-Credential", valid_614088
  var valid_614089 = header.getOrDefault("X-Amz-Security-Token")
  valid_614089 = validateParameter(valid_614089, JString, required = false,
                                 default = nil)
  if valid_614089 != nil:
    section.add "X-Amz-Security-Token", valid_614089
  var valid_614090 = header.getOrDefault("X-Amz-Algorithm")
  valid_614090 = validateParameter(valid_614090, JString, required = false,
                                 default = nil)
  if valid_614090 != nil:
    section.add "X-Amz-Algorithm", valid_614090
  var valid_614091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614091 = validateParameter(valid_614091, JString, required = false,
                                 default = nil)
  if valid_614091 != nil:
    section.add "X-Amz-SignedHeaders", valid_614091
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614092 = formData.getOrDefault("Marker")
  valid_614092 = validateParameter(valid_614092, JString, required = false,
                                 default = nil)
  if valid_614092 != nil:
    section.add "Marker", valid_614092
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614093 = formData.getOrDefault("UserName")
  valid_614093 = validateParameter(valid_614093, JString, required = true,
                                 default = nil)
  if valid_614093 != nil:
    section.add "UserName", valid_614093
  var valid_614094 = formData.getOrDefault("PathPrefix")
  valid_614094 = validateParameter(valid_614094, JString, required = false,
                                 default = nil)
  if valid_614094 != nil:
    section.add "PathPrefix", valid_614094
  var valid_614095 = formData.getOrDefault("MaxItems")
  valid_614095 = validateParameter(valid_614095, JInt, required = false, default = nil)
  if valid_614095 != nil:
    section.add "MaxItems", valid_614095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614096: Call_PostListAttachedUserPolicies_614080; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_614096.validator(path, query, header, formData, body)
  let scheme = call_614096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614096.url(scheme.get, call_614096.host, call_614096.base,
                         call_614096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614096, url, valid)

proc call*(call_614097: Call_PostListAttachedUserPolicies_614080; UserName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614098 = newJObject()
  var formData_614099 = newJObject()
  add(formData_614099, "Marker", newJString(Marker))
  add(formData_614099, "UserName", newJString(UserName))
  add(formData_614099, "PathPrefix", newJString(PathPrefix))
  add(formData_614099, "MaxItems", newJInt(MaxItems))
  add(query_614098, "Action", newJString(Action))
  add(query_614098, "Version", newJString(Version))
  result = call_614097.call(nil, query_614098, nil, formData_614099, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_614080(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_614081, base: "/",
    url: url_PostListAttachedUserPolicies_614082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_614061 = ref object of OpenApiRestCall_610658
proc url_GetListAttachedUserPolicies_614063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedUserPolicies_614062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614064 = query.getOrDefault("Marker")
  valid_614064 = validateParameter(valid_614064, JString, required = false,
                                 default = nil)
  if valid_614064 != nil:
    section.add "Marker", valid_614064
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614065 = query.getOrDefault("UserName")
  valid_614065 = validateParameter(valid_614065, JString, required = true,
                                 default = nil)
  if valid_614065 != nil:
    section.add "UserName", valid_614065
  var valid_614066 = query.getOrDefault("MaxItems")
  valid_614066 = validateParameter(valid_614066, JInt, required = false, default = nil)
  if valid_614066 != nil:
    section.add "MaxItems", valid_614066
  var valid_614067 = query.getOrDefault("PathPrefix")
  valid_614067 = validateParameter(valid_614067, JString, required = false,
                                 default = nil)
  if valid_614067 != nil:
    section.add "PathPrefix", valid_614067
  var valid_614068 = query.getOrDefault("Action")
  valid_614068 = validateParameter(valid_614068, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_614068 != nil:
    section.add "Action", valid_614068
  var valid_614069 = query.getOrDefault("Version")
  valid_614069 = validateParameter(valid_614069, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614069 != nil:
    section.add "Version", valid_614069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614070 = header.getOrDefault("X-Amz-Signature")
  valid_614070 = validateParameter(valid_614070, JString, required = false,
                                 default = nil)
  if valid_614070 != nil:
    section.add "X-Amz-Signature", valid_614070
  var valid_614071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "X-Amz-Content-Sha256", valid_614071
  var valid_614072 = header.getOrDefault("X-Amz-Date")
  valid_614072 = validateParameter(valid_614072, JString, required = false,
                                 default = nil)
  if valid_614072 != nil:
    section.add "X-Amz-Date", valid_614072
  var valid_614073 = header.getOrDefault("X-Amz-Credential")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "X-Amz-Credential", valid_614073
  var valid_614074 = header.getOrDefault("X-Amz-Security-Token")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "X-Amz-Security-Token", valid_614074
  var valid_614075 = header.getOrDefault("X-Amz-Algorithm")
  valid_614075 = validateParameter(valid_614075, JString, required = false,
                                 default = nil)
  if valid_614075 != nil:
    section.add "X-Amz-Algorithm", valid_614075
  var valid_614076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "X-Amz-SignedHeaders", valid_614076
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614077: Call_GetListAttachedUserPolicies_614061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_614077.validator(path, query, header, formData, body)
  let scheme = call_614077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614077.url(scheme.get, call_614077.host, call_614077.base,
                         call_614077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614077, url, valid)

proc call*(call_614078: Call_GetListAttachedUserPolicies_614061; UserName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614079 = newJObject()
  add(query_614079, "Marker", newJString(Marker))
  add(query_614079, "UserName", newJString(UserName))
  add(query_614079, "MaxItems", newJInt(MaxItems))
  add(query_614079, "PathPrefix", newJString(PathPrefix))
  add(query_614079, "Action", newJString(Action))
  add(query_614079, "Version", newJString(Version))
  result = call_614078.call(nil, query_614079, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_614061(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_614062, base: "/",
    url: url_GetListAttachedUserPolicies_614063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_614121 = ref object of OpenApiRestCall_610658
proc url_PostListEntitiesForPolicy_614123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListEntitiesForPolicy_614122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614124 = query.getOrDefault("Action")
  valid_614124 = validateParameter(valid_614124, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_614124 != nil:
    section.add "Action", valid_614124
  var valid_614125 = query.getOrDefault("Version")
  valid_614125 = validateParameter(valid_614125, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614125 != nil:
    section.add "Version", valid_614125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614126 = header.getOrDefault("X-Amz-Signature")
  valid_614126 = validateParameter(valid_614126, JString, required = false,
                                 default = nil)
  if valid_614126 != nil:
    section.add "X-Amz-Signature", valid_614126
  var valid_614127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614127 = validateParameter(valid_614127, JString, required = false,
                                 default = nil)
  if valid_614127 != nil:
    section.add "X-Amz-Content-Sha256", valid_614127
  var valid_614128 = header.getOrDefault("X-Amz-Date")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "X-Amz-Date", valid_614128
  var valid_614129 = header.getOrDefault("X-Amz-Credential")
  valid_614129 = validateParameter(valid_614129, JString, required = false,
                                 default = nil)
  if valid_614129 != nil:
    section.add "X-Amz-Credential", valid_614129
  var valid_614130 = header.getOrDefault("X-Amz-Security-Token")
  valid_614130 = validateParameter(valid_614130, JString, required = false,
                                 default = nil)
  if valid_614130 != nil:
    section.add "X-Amz-Security-Token", valid_614130
  var valid_614131 = header.getOrDefault("X-Amz-Algorithm")
  valid_614131 = validateParameter(valid_614131, JString, required = false,
                                 default = nil)
  if valid_614131 != nil:
    section.add "X-Amz-Algorithm", valid_614131
  var valid_614132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614132 = validateParameter(valid_614132, JString, required = false,
                                 default = nil)
  if valid_614132 != nil:
    section.add "X-Amz-SignedHeaders", valid_614132
  result.add "header", section
  ## parameters in `formData` object:
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_614133 = formData.getOrDefault("EntityFilter")
  valid_614133 = validateParameter(valid_614133, JString, required = false,
                                 default = newJString("User"))
  if valid_614133 != nil:
    section.add "EntityFilter", valid_614133
  var valid_614134 = formData.getOrDefault("Marker")
  valid_614134 = validateParameter(valid_614134, JString, required = false,
                                 default = nil)
  if valid_614134 != nil:
    section.add "Marker", valid_614134
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_614135 = formData.getOrDefault("PolicyArn")
  valid_614135 = validateParameter(valid_614135, JString, required = true,
                                 default = nil)
  if valid_614135 != nil:
    section.add "PolicyArn", valid_614135
  var valid_614136 = formData.getOrDefault("PathPrefix")
  valid_614136 = validateParameter(valid_614136, JString, required = false,
                                 default = nil)
  if valid_614136 != nil:
    section.add "PathPrefix", valid_614136
  var valid_614137 = formData.getOrDefault("MaxItems")
  valid_614137 = validateParameter(valid_614137, JInt, required = false, default = nil)
  if valid_614137 != nil:
    section.add "MaxItems", valid_614137
  var valid_614138 = formData.getOrDefault("PolicyUsageFilter")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_614138 != nil:
    section.add "PolicyUsageFilter", valid_614138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614139: Call_PostListEntitiesForPolicy_614121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614139.validator(path, query, header, formData, body)
  let scheme = call_614139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614139.url(scheme.get, call_614139.host, call_614139.base,
                         call_614139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614139, url, valid)

proc call*(call_614140: Call_PostListEntitiesForPolicy_614121; PolicyArn: string;
          EntityFilter: string = "User"; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListEntitiesForPolicy";
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_614141 = newJObject()
  var formData_614142 = newJObject()
  add(formData_614142, "EntityFilter", newJString(EntityFilter))
  add(formData_614142, "Marker", newJString(Marker))
  add(formData_614142, "PolicyArn", newJString(PolicyArn))
  add(formData_614142, "PathPrefix", newJString(PathPrefix))
  add(formData_614142, "MaxItems", newJInt(MaxItems))
  add(query_614141, "Action", newJString(Action))
  add(query_614141, "Version", newJString(Version))
  add(formData_614142, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_614140.call(nil, query_614141, nil, formData_614142, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_614121(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_614122, base: "/",
    url: url_PostListEntitiesForPolicy_614123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_614100 = ref object of OpenApiRestCall_610658
proc url_GetListEntitiesForPolicy_614102(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListEntitiesForPolicy_614101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614103 = query.getOrDefault("Marker")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "Marker", valid_614103
  var valid_614104 = query.getOrDefault("PolicyUsageFilter")
  valid_614104 = validateParameter(valid_614104, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_614104 != nil:
    section.add "PolicyUsageFilter", valid_614104
  var valid_614105 = query.getOrDefault("EntityFilter")
  valid_614105 = validateParameter(valid_614105, JString, required = false,
                                 default = newJString("User"))
  if valid_614105 != nil:
    section.add "EntityFilter", valid_614105
  var valid_614106 = query.getOrDefault("MaxItems")
  valid_614106 = validateParameter(valid_614106, JInt, required = false, default = nil)
  if valid_614106 != nil:
    section.add "MaxItems", valid_614106
  var valid_614107 = query.getOrDefault("PathPrefix")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "PathPrefix", valid_614107
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_614108 = query.getOrDefault("PolicyArn")
  valid_614108 = validateParameter(valid_614108, JString, required = true,
                                 default = nil)
  if valid_614108 != nil:
    section.add "PolicyArn", valid_614108
  var valid_614109 = query.getOrDefault("Action")
  valid_614109 = validateParameter(valid_614109, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_614109 != nil:
    section.add "Action", valid_614109
  var valid_614110 = query.getOrDefault("Version")
  valid_614110 = validateParameter(valid_614110, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614110 != nil:
    section.add "Version", valid_614110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614111 = header.getOrDefault("X-Amz-Signature")
  valid_614111 = validateParameter(valid_614111, JString, required = false,
                                 default = nil)
  if valid_614111 != nil:
    section.add "X-Amz-Signature", valid_614111
  var valid_614112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614112 = validateParameter(valid_614112, JString, required = false,
                                 default = nil)
  if valid_614112 != nil:
    section.add "X-Amz-Content-Sha256", valid_614112
  var valid_614113 = header.getOrDefault("X-Amz-Date")
  valid_614113 = validateParameter(valid_614113, JString, required = false,
                                 default = nil)
  if valid_614113 != nil:
    section.add "X-Amz-Date", valid_614113
  var valid_614114 = header.getOrDefault("X-Amz-Credential")
  valid_614114 = validateParameter(valid_614114, JString, required = false,
                                 default = nil)
  if valid_614114 != nil:
    section.add "X-Amz-Credential", valid_614114
  var valid_614115 = header.getOrDefault("X-Amz-Security-Token")
  valid_614115 = validateParameter(valid_614115, JString, required = false,
                                 default = nil)
  if valid_614115 != nil:
    section.add "X-Amz-Security-Token", valid_614115
  var valid_614116 = header.getOrDefault("X-Amz-Algorithm")
  valid_614116 = validateParameter(valid_614116, JString, required = false,
                                 default = nil)
  if valid_614116 != nil:
    section.add "X-Amz-Algorithm", valid_614116
  var valid_614117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614117 = validateParameter(valid_614117, JString, required = false,
                                 default = nil)
  if valid_614117 != nil:
    section.add "X-Amz-SignedHeaders", valid_614117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614118: Call_GetListEntitiesForPolicy_614100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614118.validator(path, query, header, formData, body)
  let scheme = call_614118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614118.url(scheme.get, call_614118.host, call_614118.base,
                         call_614118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614118, url, valid)

proc call*(call_614119: Call_GetListEntitiesForPolicy_614100; PolicyArn: string;
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          EntityFilter: string = "User"; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListEntitiesForPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614120 = newJObject()
  add(query_614120, "Marker", newJString(Marker))
  add(query_614120, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_614120, "EntityFilter", newJString(EntityFilter))
  add(query_614120, "MaxItems", newJInt(MaxItems))
  add(query_614120, "PathPrefix", newJString(PathPrefix))
  add(query_614120, "PolicyArn", newJString(PolicyArn))
  add(query_614120, "Action", newJString(Action))
  add(query_614120, "Version", newJString(Version))
  result = call_614119.call(nil, query_614120, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_614100(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_614101, base: "/",
    url: url_GetListEntitiesForPolicy_614102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_614161 = ref object of OpenApiRestCall_610658
proc url_PostListGroupPolicies_614163(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupPolicies_614162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614164 = query.getOrDefault("Action")
  valid_614164 = validateParameter(valid_614164, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_614164 != nil:
    section.add "Action", valid_614164
  var valid_614165 = query.getOrDefault("Version")
  valid_614165 = validateParameter(valid_614165, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614165 != nil:
    section.add "Version", valid_614165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614166 = header.getOrDefault("X-Amz-Signature")
  valid_614166 = validateParameter(valid_614166, JString, required = false,
                                 default = nil)
  if valid_614166 != nil:
    section.add "X-Amz-Signature", valid_614166
  var valid_614167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "X-Amz-Content-Sha256", valid_614167
  var valid_614168 = header.getOrDefault("X-Amz-Date")
  valid_614168 = validateParameter(valid_614168, JString, required = false,
                                 default = nil)
  if valid_614168 != nil:
    section.add "X-Amz-Date", valid_614168
  var valid_614169 = header.getOrDefault("X-Amz-Credential")
  valid_614169 = validateParameter(valid_614169, JString, required = false,
                                 default = nil)
  if valid_614169 != nil:
    section.add "X-Amz-Credential", valid_614169
  var valid_614170 = header.getOrDefault("X-Amz-Security-Token")
  valid_614170 = validateParameter(valid_614170, JString, required = false,
                                 default = nil)
  if valid_614170 != nil:
    section.add "X-Amz-Security-Token", valid_614170
  var valid_614171 = header.getOrDefault("X-Amz-Algorithm")
  valid_614171 = validateParameter(valid_614171, JString, required = false,
                                 default = nil)
  if valid_614171 != nil:
    section.add "X-Amz-Algorithm", valid_614171
  var valid_614172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614172 = validateParameter(valid_614172, JString, required = false,
                                 default = nil)
  if valid_614172 != nil:
    section.add "X-Amz-SignedHeaders", valid_614172
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614173 = formData.getOrDefault("Marker")
  valid_614173 = validateParameter(valid_614173, JString, required = false,
                                 default = nil)
  if valid_614173 != nil:
    section.add "Marker", valid_614173
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614174 = formData.getOrDefault("GroupName")
  valid_614174 = validateParameter(valid_614174, JString, required = true,
                                 default = nil)
  if valid_614174 != nil:
    section.add "GroupName", valid_614174
  var valid_614175 = formData.getOrDefault("MaxItems")
  valid_614175 = validateParameter(valid_614175, JInt, required = false, default = nil)
  if valid_614175 != nil:
    section.add "MaxItems", valid_614175
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614176: Call_PostListGroupPolicies_614161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_614176.validator(path, query, header, formData, body)
  let scheme = call_614176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614176.url(scheme.get, call_614176.host, call_614176.base,
                         call_614176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614176, url, valid)

proc call*(call_614177: Call_PostListGroupPolicies_614161; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614178 = newJObject()
  var formData_614179 = newJObject()
  add(formData_614179, "Marker", newJString(Marker))
  add(formData_614179, "GroupName", newJString(GroupName))
  add(query_614178, "Action", newJString(Action))
  add(formData_614179, "MaxItems", newJInt(MaxItems))
  add(query_614178, "Version", newJString(Version))
  result = call_614177.call(nil, query_614178, nil, formData_614179, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_614161(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_614162, base: "/",
    url: url_PostListGroupPolicies_614163, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_614143 = ref object of OpenApiRestCall_610658
proc url_GetListGroupPolicies_614145(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupPolicies_614144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614146 = query.getOrDefault("Marker")
  valid_614146 = validateParameter(valid_614146, JString, required = false,
                                 default = nil)
  if valid_614146 != nil:
    section.add "Marker", valid_614146
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614147 = query.getOrDefault("GroupName")
  valid_614147 = validateParameter(valid_614147, JString, required = true,
                                 default = nil)
  if valid_614147 != nil:
    section.add "GroupName", valid_614147
  var valid_614148 = query.getOrDefault("MaxItems")
  valid_614148 = validateParameter(valid_614148, JInt, required = false, default = nil)
  if valid_614148 != nil:
    section.add "MaxItems", valid_614148
  var valid_614149 = query.getOrDefault("Action")
  valid_614149 = validateParameter(valid_614149, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_614149 != nil:
    section.add "Action", valid_614149
  var valid_614150 = query.getOrDefault("Version")
  valid_614150 = validateParameter(valid_614150, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614150 != nil:
    section.add "Version", valid_614150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614151 = header.getOrDefault("X-Amz-Signature")
  valid_614151 = validateParameter(valid_614151, JString, required = false,
                                 default = nil)
  if valid_614151 != nil:
    section.add "X-Amz-Signature", valid_614151
  var valid_614152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614152 = validateParameter(valid_614152, JString, required = false,
                                 default = nil)
  if valid_614152 != nil:
    section.add "X-Amz-Content-Sha256", valid_614152
  var valid_614153 = header.getOrDefault("X-Amz-Date")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "X-Amz-Date", valid_614153
  var valid_614154 = header.getOrDefault("X-Amz-Credential")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "X-Amz-Credential", valid_614154
  var valid_614155 = header.getOrDefault("X-Amz-Security-Token")
  valid_614155 = validateParameter(valid_614155, JString, required = false,
                                 default = nil)
  if valid_614155 != nil:
    section.add "X-Amz-Security-Token", valid_614155
  var valid_614156 = header.getOrDefault("X-Amz-Algorithm")
  valid_614156 = validateParameter(valid_614156, JString, required = false,
                                 default = nil)
  if valid_614156 != nil:
    section.add "X-Amz-Algorithm", valid_614156
  var valid_614157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614157 = validateParameter(valid_614157, JString, required = false,
                                 default = nil)
  if valid_614157 != nil:
    section.add "X-Amz-SignedHeaders", valid_614157
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614158: Call_GetListGroupPolicies_614143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_614158.validator(path, query, header, formData, body)
  let scheme = call_614158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614158.url(scheme.get, call_614158.host, call_614158.base,
                         call_614158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614158, url, valid)

proc call*(call_614159: Call_GetListGroupPolicies_614143; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614160 = newJObject()
  add(query_614160, "Marker", newJString(Marker))
  add(query_614160, "GroupName", newJString(GroupName))
  add(query_614160, "MaxItems", newJInt(MaxItems))
  add(query_614160, "Action", newJString(Action))
  add(query_614160, "Version", newJString(Version))
  result = call_614159.call(nil, query_614160, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_614143(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_614144, base: "/",
    url: url_GetListGroupPolicies_614145, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_614198 = ref object of OpenApiRestCall_610658
proc url_PostListGroups_614200(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroups_614199(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614201 = query.getOrDefault("Action")
  valid_614201 = validateParameter(valid_614201, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_614201 != nil:
    section.add "Action", valid_614201
  var valid_614202 = query.getOrDefault("Version")
  valid_614202 = validateParameter(valid_614202, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614202 != nil:
    section.add "Version", valid_614202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614203 = header.getOrDefault("X-Amz-Signature")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "X-Amz-Signature", valid_614203
  var valid_614204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614204 = validateParameter(valid_614204, JString, required = false,
                                 default = nil)
  if valid_614204 != nil:
    section.add "X-Amz-Content-Sha256", valid_614204
  var valid_614205 = header.getOrDefault("X-Amz-Date")
  valid_614205 = validateParameter(valid_614205, JString, required = false,
                                 default = nil)
  if valid_614205 != nil:
    section.add "X-Amz-Date", valid_614205
  var valid_614206 = header.getOrDefault("X-Amz-Credential")
  valid_614206 = validateParameter(valid_614206, JString, required = false,
                                 default = nil)
  if valid_614206 != nil:
    section.add "X-Amz-Credential", valid_614206
  var valid_614207 = header.getOrDefault("X-Amz-Security-Token")
  valid_614207 = validateParameter(valid_614207, JString, required = false,
                                 default = nil)
  if valid_614207 != nil:
    section.add "X-Amz-Security-Token", valid_614207
  var valid_614208 = header.getOrDefault("X-Amz-Algorithm")
  valid_614208 = validateParameter(valid_614208, JString, required = false,
                                 default = nil)
  if valid_614208 != nil:
    section.add "X-Amz-Algorithm", valid_614208
  var valid_614209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614209 = validateParameter(valid_614209, JString, required = false,
                                 default = nil)
  if valid_614209 != nil:
    section.add "X-Amz-SignedHeaders", valid_614209
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614210 = formData.getOrDefault("Marker")
  valid_614210 = validateParameter(valid_614210, JString, required = false,
                                 default = nil)
  if valid_614210 != nil:
    section.add "Marker", valid_614210
  var valid_614211 = formData.getOrDefault("PathPrefix")
  valid_614211 = validateParameter(valid_614211, JString, required = false,
                                 default = nil)
  if valid_614211 != nil:
    section.add "PathPrefix", valid_614211
  var valid_614212 = formData.getOrDefault("MaxItems")
  valid_614212 = validateParameter(valid_614212, JInt, required = false, default = nil)
  if valid_614212 != nil:
    section.add "MaxItems", valid_614212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614213: Call_PostListGroups_614198; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614213.validator(path, query, header, formData, body)
  let scheme = call_614213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614213.url(scheme.get, call_614213.host, call_614213.base,
                         call_614213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614213, url, valid)

proc call*(call_614214: Call_PostListGroups_614198; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614215 = newJObject()
  var formData_614216 = newJObject()
  add(formData_614216, "Marker", newJString(Marker))
  add(formData_614216, "PathPrefix", newJString(PathPrefix))
  add(formData_614216, "MaxItems", newJInt(MaxItems))
  add(query_614215, "Action", newJString(Action))
  add(query_614215, "Version", newJString(Version))
  result = call_614214.call(nil, query_614215, nil, formData_614216, nil)

var postListGroups* = Call_PostListGroups_614198(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_614199,
    base: "/", url: url_PostListGroups_614200, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_614180 = ref object of OpenApiRestCall_610658
proc url_GetListGroups_614182(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroups_614181(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614183 = query.getOrDefault("Marker")
  valid_614183 = validateParameter(valid_614183, JString, required = false,
                                 default = nil)
  if valid_614183 != nil:
    section.add "Marker", valid_614183
  var valid_614184 = query.getOrDefault("MaxItems")
  valid_614184 = validateParameter(valid_614184, JInt, required = false, default = nil)
  if valid_614184 != nil:
    section.add "MaxItems", valid_614184
  var valid_614185 = query.getOrDefault("PathPrefix")
  valid_614185 = validateParameter(valid_614185, JString, required = false,
                                 default = nil)
  if valid_614185 != nil:
    section.add "PathPrefix", valid_614185
  var valid_614186 = query.getOrDefault("Action")
  valid_614186 = validateParameter(valid_614186, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_614186 != nil:
    section.add "Action", valid_614186
  var valid_614187 = query.getOrDefault("Version")
  valid_614187 = validateParameter(valid_614187, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614187 != nil:
    section.add "Version", valid_614187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614188 = header.getOrDefault("X-Amz-Signature")
  valid_614188 = validateParameter(valid_614188, JString, required = false,
                                 default = nil)
  if valid_614188 != nil:
    section.add "X-Amz-Signature", valid_614188
  var valid_614189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614189 = validateParameter(valid_614189, JString, required = false,
                                 default = nil)
  if valid_614189 != nil:
    section.add "X-Amz-Content-Sha256", valid_614189
  var valid_614190 = header.getOrDefault("X-Amz-Date")
  valid_614190 = validateParameter(valid_614190, JString, required = false,
                                 default = nil)
  if valid_614190 != nil:
    section.add "X-Amz-Date", valid_614190
  var valid_614191 = header.getOrDefault("X-Amz-Credential")
  valid_614191 = validateParameter(valid_614191, JString, required = false,
                                 default = nil)
  if valid_614191 != nil:
    section.add "X-Amz-Credential", valid_614191
  var valid_614192 = header.getOrDefault("X-Amz-Security-Token")
  valid_614192 = validateParameter(valid_614192, JString, required = false,
                                 default = nil)
  if valid_614192 != nil:
    section.add "X-Amz-Security-Token", valid_614192
  var valid_614193 = header.getOrDefault("X-Amz-Algorithm")
  valid_614193 = validateParameter(valid_614193, JString, required = false,
                                 default = nil)
  if valid_614193 != nil:
    section.add "X-Amz-Algorithm", valid_614193
  var valid_614194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614194 = validateParameter(valid_614194, JString, required = false,
                                 default = nil)
  if valid_614194 != nil:
    section.add "X-Amz-SignedHeaders", valid_614194
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614195: Call_GetListGroups_614180; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614195.validator(path, query, header, formData, body)
  let scheme = call_614195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614195.url(scheme.get, call_614195.host, call_614195.base,
                         call_614195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614195, url, valid)

proc call*(call_614196: Call_GetListGroups_614180; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614197 = newJObject()
  add(query_614197, "Marker", newJString(Marker))
  add(query_614197, "MaxItems", newJInt(MaxItems))
  add(query_614197, "PathPrefix", newJString(PathPrefix))
  add(query_614197, "Action", newJString(Action))
  add(query_614197, "Version", newJString(Version))
  result = call_614196.call(nil, query_614197, nil, nil, nil)

var getListGroups* = Call_GetListGroups_614180(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_614181,
    base: "/", url: url_GetListGroups_614182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_614235 = ref object of OpenApiRestCall_610658
proc url_PostListGroupsForUser_614237(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupsForUser_614236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614238 = query.getOrDefault("Action")
  valid_614238 = validateParameter(valid_614238, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_614238 != nil:
    section.add "Action", valid_614238
  var valid_614239 = query.getOrDefault("Version")
  valid_614239 = validateParameter(valid_614239, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614239 != nil:
    section.add "Version", valid_614239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614240 = header.getOrDefault("X-Amz-Signature")
  valid_614240 = validateParameter(valid_614240, JString, required = false,
                                 default = nil)
  if valid_614240 != nil:
    section.add "X-Amz-Signature", valid_614240
  var valid_614241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614241 = validateParameter(valid_614241, JString, required = false,
                                 default = nil)
  if valid_614241 != nil:
    section.add "X-Amz-Content-Sha256", valid_614241
  var valid_614242 = header.getOrDefault("X-Amz-Date")
  valid_614242 = validateParameter(valid_614242, JString, required = false,
                                 default = nil)
  if valid_614242 != nil:
    section.add "X-Amz-Date", valid_614242
  var valid_614243 = header.getOrDefault("X-Amz-Credential")
  valid_614243 = validateParameter(valid_614243, JString, required = false,
                                 default = nil)
  if valid_614243 != nil:
    section.add "X-Amz-Credential", valid_614243
  var valid_614244 = header.getOrDefault("X-Amz-Security-Token")
  valid_614244 = validateParameter(valid_614244, JString, required = false,
                                 default = nil)
  if valid_614244 != nil:
    section.add "X-Amz-Security-Token", valid_614244
  var valid_614245 = header.getOrDefault("X-Amz-Algorithm")
  valid_614245 = validateParameter(valid_614245, JString, required = false,
                                 default = nil)
  if valid_614245 != nil:
    section.add "X-Amz-Algorithm", valid_614245
  var valid_614246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614246 = validateParameter(valid_614246, JString, required = false,
                                 default = nil)
  if valid_614246 != nil:
    section.add "X-Amz-SignedHeaders", valid_614246
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614247 = formData.getOrDefault("Marker")
  valid_614247 = validateParameter(valid_614247, JString, required = false,
                                 default = nil)
  if valid_614247 != nil:
    section.add "Marker", valid_614247
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614248 = formData.getOrDefault("UserName")
  valid_614248 = validateParameter(valid_614248, JString, required = true,
                                 default = nil)
  if valid_614248 != nil:
    section.add "UserName", valid_614248
  var valid_614249 = formData.getOrDefault("MaxItems")
  valid_614249 = validateParameter(valid_614249, JInt, required = false, default = nil)
  if valid_614249 != nil:
    section.add "MaxItems", valid_614249
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614250: Call_PostListGroupsForUser_614235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614250.validator(path, query, header, formData, body)
  let scheme = call_614250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614250.url(scheme.get, call_614250.host, call_614250.base,
                         call_614250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614250, url, valid)

proc call*(call_614251: Call_PostListGroupsForUser_614235; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614252 = newJObject()
  var formData_614253 = newJObject()
  add(formData_614253, "Marker", newJString(Marker))
  add(formData_614253, "UserName", newJString(UserName))
  add(query_614252, "Action", newJString(Action))
  add(formData_614253, "MaxItems", newJInt(MaxItems))
  add(query_614252, "Version", newJString(Version))
  result = call_614251.call(nil, query_614252, nil, formData_614253, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_614235(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_614236, base: "/",
    url: url_PostListGroupsForUser_614237, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_614217 = ref object of OpenApiRestCall_610658
proc url_GetListGroupsForUser_614219(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupsForUser_614218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614220 = query.getOrDefault("Marker")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "Marker", valid_614220
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614221 = query.getOrDefault("UserName")
  valid_614221 = validateParameter(valid_614221, JString, required = true,
                                 default = nil)
  if valid_614221 != nil:
    section.add "UserName", valid_614221
  var valid_614222 = query.getOrDefault("MaxItems")
  valid_614222 = validateParameter(valid_614222, JInt, required = false, default = nil)
  if valid_614222 != nil:
    section.add "MaxItems", valid_614222
  var valid_614223 = query.getOrDefault("Action")
  valid_614223 = validateParameter(valid_614223, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_614223 != nil:
    section.add "Action", valid_614223
  var valid_614224 = query.getOrDefault("Version")
  valid_614224 = validateParameter(valid_614224, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614224 != nil:
    section.add "Version", valid_614224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614225 = header.getOrDefault("X-Amz-Signature")
  valid_614225 = validateParameter(valid_614225, JString, required = false,
                                 default = nil)
  if valid_614225 != nil:
    section.add "X-Amz-Signature", valid_614225
  var valid_614226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614226 = validateParameter(valid_614226, JString, required = false,
                                 default = nil)
  if valid_614226 != nil:
    section.add "X-Amz-Content-Sha256", valid_614226
  var valid_614227 = header.getOrDefault("X-Amz-Date")
  valid_614227 = validateParameter(valid_614227, JString, required = false,
                                 default = nil)
  if valid_614227 != nil:
    section.add "X-Amz-Date", valid_614227
  var valid_614228 = header.getOrDefault("X-Amz-Credential")
  valid_614228 = validateParameter(valid_614228, JString, required = false,
                                 default = nil)
  if valid_614228 != nil:
    section.add "X-Amz-Credential", valid_614228
  var valid_614229 = header.getOrDefault("X-Amz-Security-Token")
  valid_614229 = validateParameter(valid_614229, JString, required = false,
                                 default = nil)
  if valid_614229 != nil:
    section.add "X-Amz-Security-Token", valid_614229
  var valid_614230 = header.getOrDefault("X-Amz-Algorithm")
  valid_614230 = validateParameter(valid_614230, JString, required = false,
                                 default = nil)
  if valid_614230 != nil:
    section.add "X-Amz-Algorithm", valid_614230
  var valid_614231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614231 = validateParameter(valid_614231, JString, required = false,
                                 default = nil)
  if valid_614231 != nil:
    section.add "X-Amz-SignedHeaders", valid_614231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614232: Call_GetListGroupsForUser_614217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614232.validator(path, query, header, formData, body)
  let scheme = call_614232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614232.url(scheme.get, call_614232.host, call_614232.base,
                         call_614232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614232, url, valid)

proc call*(call_614233: Call_GetListGroupsForUser_614217; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupsForUser";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614234 = newJObject()
  add(query_614234, "Marker", newJString(Marker))
  add(query_614234, "UserName", newJString(UserName))
  add(query_614234, "MaxItems", newJInt(MaxItems))
  add(query_614234, "Action", newJString(Action))
  add(query_614234, "Version", newJString(Version))
  result = call_614233.call(nil, query_614234, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_614217(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_614218, base: "/",
    url: url_GetListGroupsForUser_614219, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_614272 = ref object of OpenApiRestCall_610658
proc url_PostListInstanceProfiles_614274(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfiles_614273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614275 = query.getOrDefault("Action")
  valid_614275 = validateParameter(valid_614275, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_614275 != nil:
    section.add "Action", valid_614275
  var valid_614276 = query.getOrDefault("Version")
  valid_614276 = validateParameter(valid_614276, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614276 != nil:
    section.add "Version", valid_614276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614277 = header.getOrDefault("X-Amz-Signature")
  valid_614277 = validateParameter(valid_614277, JString, required = false,
                                 default = nil)
  if valid_614277 != nil:
    section.add "X-Amz-Signature", valid_614277
  var valid_614278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614278 = validateParameter(valid_614278, JString, required = false,
                                 default = nil)
  if valid_614278 != nil:
    section.add "X-Amz-Content-Sha256", valid_614278
  var valid_614279 = header.getOrDefault("X-Amz-Date")
  valid_614279 = validateParameter(valid_614279, JString, required = false,
                                 default = nil)
  if valid_614279 != nil:
    section.add "X-Amz-Date", valid_614279
  var valid_614280 = header.getOrDefault("X-Amz-Credential")
  valid_614280 = validateParameter(valid_614280, JString, required = false,
                                 default = nil)
  if valid_614280 != nil:
    section.add "X-Amz-Credential", valid_614280
  var valid_614281 = header.getOrDefault("X-Amz-Security-Token")
  valid_614281 = validateParameter(valid_614281, JString, required = false,
                                 default = nil)
  if valid_614281 != nil:
    section.add "X-Amz-Security-Token", valid_614281
  var valid_614282 = header.getOrDefault("X-Amz-Algorithm")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-Algorithm", valid_614282
  var valid_614283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614283 = validateParameter(valid_614283, JString, required = false,
                                 default = nil)
  if valid_614283 != nil:
    section.add "X-Amz-SignedHeaders", valid_614283
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614284 = formData.getOrDefault("Marker")
  valid_614284 = validateParameter(valid_614284, JString, required = false,
                                 default = nil)
  if valid_614284 != nil:
    section.add "Marker", valid_614284
  var valid_614285 = formData.getOrDefault("PathPrefix")
  valid_614285 = validateParameter(valid_614285, JString, required = false,
                                 default = nil)
  if valid_614285 != nil:
    section.add "PathPrefix", valid_614285
  var valid_614286 = formData.getOrDefault("MaxItems")
  valid_614286 = validateParameter(valid_614286, JInt, required = false, default = nil)
  if valid_614286 != nil:
    section.add "MaxItems", valid_614286
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614287: Call_PostListInstanceProfiles_614272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614287.validator(path, query, header, formData, body)
  let scheme = call_614287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614287.url(scheme.get, call_614287.host, call_614287.base,
                         call_614287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614287, url, valid)

proc call*(call_614288: Call_PostListInstanceProfiles_614272; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614289 = newJObject()
  var formData_614290 = newJObject()
  add(formData_614290, "Marker", newJString(Marker))
  add(formData_614290, "PathPrefix", newJString(PathPrefix))
  add(formData_614290, "MaxItems", newJInt(MaxItems))
  add(query_614289, "Action", newJString(Action))
  add(query_614289, "Version", newJString(Version))
  result = call_614288.call(nil, query_614289, nil, formData_614290, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_614272(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_614273, base: "/",
    url: url_PostListInstanceProfiles_614274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_614254 = ref object of OpenApiRestCall_610658
proc url_GetListInstanceProfiles_614256(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfiles_614255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614257 = query.getOrDefault("Marker")
  valid_614257 = validateParameter(valid_614257, JString, required = false,
                                 default = nil)
  if valid_614257 != nil:
    section.add "Marker", valid_614257
  var valid_614258 = query.getOrDefault("MaxItems")
  valid_614258 = validateParameter(valid_614258, JInt, required = false, default = nil)
  if valid_614258 != nil:
    section.add "MaxItems", valid_614258
  var valid_614259 = query.getOrDefault("PathPrefix")
  valid_614259 = validateParameter(valid_614259, JString, required = false,
                                 default = nil)
  if valid_614259 != nil:
    section.add "PathPrefix", valid_614259
  var valid_614260 = query.getOrDefault("Action")
  valid_614260 = validateParameter(valid_614260, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_614260 != nil:
    section.add "Action", valid_614260
  var valid_614261 = query.getOrDefault("Version")
  valid_614261 = validateParameter(valid_614261, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614261 != nil:
    section.add "Version", valid_614261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614262 = header.getOrDefault("X-Amz-Signature")
  valid_614262 = validateParameter(valid_614262, JString, required = false,
                                 default = nil)
  if valid_614262 != nil:
    section.add "X-Amz-Signature", valid_614262
  var valid_614263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614263 = validateParameter(valid_614263, JString, required = false,
                                 default = nil)
  if valid_614263 != nil:
    section.add "X-Amz-Content-Sha256", valid_614263
  var valid_614264 = header.getOrDefault("X-Amz-Date")
  valid_614264 = validateParameter(valid_614264, JString, required = false,
                                 default = nil)
  if valid_614264 != nil:
    section.add "X-Amz-Date", valid_614264
  var valid_614265 = header.getOrDefault("X-Amz-Credential")
  valid_614265 = validateParameter(valid_614265, JString, required = false,
                                 default = nil)
  if valid_614265 != nil:
    section.add "X-Amz-Credential", valid_614265
  var valid_614266 = header.getOrDefault("X-Amz-Security-Token")
  valid_614266 = validateParameter(valid_614266, JString, required = false,
                                 default = nil)
  if valid_614266 != nil:
    section.add "X-Amz-Security-Token", valid_614266
  var valid_614267 = header.getOrDefault("X-Amz-Algorithm")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "X-Amz-Algorithm", valid_614267
  var valid_614268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "X-Amz-SignedHeaders", valid_614268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614269: Call_GetListInstanceProfiles_614254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614269.validator(path, query, header, formData, body)
  let scheme = call_614269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614269.url(scheme.get, call_614269.host, call_614269.base,
                         call_614269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614269, url, valid)

proc call*(call_614270: Call_GetListInstanceProfiles_614254; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614271 = newJObject()
  add(query_614271, "Marker", newJString(Marker))
  add(query_614271, "MaxItems", newJInt(MaxItems))
  add(query_614271, "PathPrefix", newJString(PathPrefix))
  add(query_614271, "Action", newJString(Action))
  add(query_614271, "Version", newJString(Version))
  result = call_614270.call(nil, query_614271, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_614254(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_614255, base: "/",
    url: url_GetListInstanceProfiles_614256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_614309 = ref object of OpenApiRestCall_610658
proc url_PostListInstanceProfilesForRole_614311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfilesForRole_614310(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614312 = query.getOrDefault("Action")
  valid_614312 = validateParameter(valid_614312, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_614312 != nil:
    section.add "Action", valid_614312
  var valid_614313 = query.getOrDefault("Version")
  valid_614313 = validateParameter(valid_614313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614313 != nil:
    section.add "Version", valid_614313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614314 = header.getOrDefault("X-Amz-Signature")
  valid_614314 = validateParameter(valid_614314, JString, required = false,
                                 default = nil)
  if valid_614314 != nil:
    section.add "X-Amz-Signature", valid_614314
  var valid_614315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614315 = validateParameter(valid_614315, JString, required = false,
                                 default = nil)
  if valid_614315 != nil:
    section.add "X-Amz-Content-Sha256", valid_614315
  var valid_614316 = header.getOrDefault("X-Amz-Date")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Date", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Credential")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Credential", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-Security-Token")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-Security-Token", valid_614318
  var valid_614319 = header.getOrDefault("X-Amz-Algorithm")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-Algorithm", valid_614319
  var valid_614320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "X-Amz-SignedHeaders", valid_614320
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614321 = formData.getOrDefault("RoleName")
  valid_614321 = validateParameter(valid_614321, JString, required = true,
                                 default = nil)
  if valid_614321 != nil:
    section.add "RoleName", valid_614321
  var valid_614322 = formData.getOrDefault("Marker")
  valid_614322 = validateParameter(valid_614322, JString, required = false,
                                 default = nil)
  if valid_614322 != nil:
    section.add "Marker", valid_614322
  var valid_614323 = formData.getOrDefault("MaxItems")
  valid_614323 = validateParameter(valid_614323, JInt, required = false, default = nil)
  if valid_614323 != nil:
    section.add "MaxItems", valid_614323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614324: Call_PostListInstanceProfilesForRole_614309;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614324.validator(path, query, header, formData, body)
  let scheme = call_614324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614324.url(scheme.get, call_614324.host, call_614324.base,
                         call_614324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614324, url, valid)

proc call*(call_614325: Call_PostListInstanceProfilesForRole_614309;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614326 = newJObject()
  var formData_614327 = newJObject()
  add(formData_614327, "RoleName", newJString(RoleName))
  add(formData_614327, "Marker", newJString(Marker))
  add(query_614326, "Action", newJString(Action))
  add(formData_614327, "MaxItems", newJInt(MaxItems))
  add(query_614326, "Version", newJString(Version))
  result = call_614325.call(nil, query_614326, nil, formData_614327, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_614309(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_614310, base: "/",
    url: url_PostListInstanceProfilesForRole_614311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_614291 = ref object of OpenApiRestCall_610658
proc url_GetListInstanceProfilesForRole_614293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfilesForRole_614292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614294 = query.getOrDefault("Marker")
  valid_614294 = validateParameter(valid_614294, JString, required = false,
                                 default = nil)
  if valid_614294 != nil:
    section.add "Marker", valid_614294
  var valid_614295 = query.getOrDefault("MaxItems")
  valid_614295 = validateParameter(valid_614295, JInt, required = false, default = nil)
  if valid_614295 != nil:
    section.add "MaxItems", valid_614295
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614296 = query.getOrDefault("RoleName")
  valid_614296 = validateParameter(valid_614296, JString, required = true,
                                 default = nil)
  if valid_614296 != nil:
    section.add "RoleName", valid_614296
  var valid_614297 = query.getOrDefault("Action")
  valid_614297 = validateParameter(valid_614297, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_614297 != nil:
    section.add "Action", valid_614297
  var valid_614298 = query.getOrDefault("Version")
  valid_614298 = validateParameter(valid_614298, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614298 != nil:
    section.add "Version", valid_614298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614299 = header.getOrDefault("X-Amz-Signature")
  valid_614299 = validateParameter(valid_614299, JString, required = false,
                                 default = nil)
  if valid_614299 != nil:
    section.add "X-Amz-Signature", valid_614299
  var valid_614300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614300 = validateParameter(valid_614300, JString, required = false,
                                 default = nil)
  if valid_614300 != nil:
    section.add "X-Amz-Content-Sha256", valid_614300
  var valid_614301 = header.getOrDefault("X-Amz-Date")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "X-Amz-Date", valid_614301
  var valid_614302 = header.getOrDefault("X-Amz-Credential")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "X-Amz-Credential", valid_614302
  var valid_614303 = header.getOrDefault("X-Amz-Security-Token")
  valid_614303 = validateParameter(valid_614303, JString, required = false,
                                 default = nil)
  if valid_614303 != nil:
    section.add "X-Amz-Security-Token", valid_614303
  var valid_614304 = header.getOrDefault("X-Amz-Algorithm")
  valid_614304 = validateParameter(valid_614304, JString, required = false,
                                 default = nil)
  if valid_614304 != nil:
    section.add "X-Amz-Algorithm", valid_614304
  var valid_614305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614305 = validateParameter(valid_614305, JString, required = false,
                                 default = nil)
  if valid_614305 != nil:
    section.add "X-Amz-SignedHeaders", valid_614305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614306: Call_GetListInstanceProfilesForRole_614291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614306.validator(path, query, header, formData, body)
  let scheme = call_614306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614306.url(scheme.get, call_614306.host, call_614306.base,
                         call_614306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614306, url, valid)

proc call*(call_614307: Call_GetListInstanceProfilesForRole_614291;
          RoleName: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfilesForRole";
          Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614308 = newJObject()
  add(query_614308, "Marker", newJString(Marker))
  add(query_614308, "MaxItems", newJInt(MaxItems))
  add(query_614308, "RoleName", newJString(RoleName))
  add(query_614308, "Action", newJString(Action))
  add(query_614308, "Version", newJString(Version))
  result = call_614307.call(nil, query_614308, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_614291(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_614292, base: "/",
    url: url_GetListInstanceProfilesForRole_614293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_614346 = ref object of OpenApiRestCall_610658
proc url_PostListMFADevices_614348(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListMFADevices_614347(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614349 = query.getOrDefault("Action")
  valid_614349 = validateParameter(valid_614349, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_614349 != nil:
    section.add "Action", valid_614349
  var valid_614350 = query.getOrDefault("Version")
  valid_614350 = validateParameter(valid_614350, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614350 != nil:
    section.add "Version", valid_614350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614351 = header.getOrDefault("X-Amz-Signature")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "X-Amz-Signature", valid_614351
  var valid_614352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "X-Amz-Content-Sha256", valid_614352
  var valid_614353 = header.getOrDefault("X-Amz-Date")
  valid_614353 = validateParameter(valid_614353, JString, required = false,
                                 default = nil)
  if valid_614353 != nil:
    section.add "X-Amz-Date", valid_614353
  var valid_614354 = header.getOrDefault("X-Amz-Credential")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "X-Amz-Credential", valid_614354
  var valid_614355 = header.getOrDefault("X-Amz-Security-Token")
  valid_614355 = validateParameter(valid_614355, JString, required = false,
                                 default = nil)
  if valid_614355 != nil:
    section.add "X-Amz-Security-Token", valid_614355
  var valid_614356 = header.getOrDefault("X-Amz-Algorithm")
  valid_614356 = validateParameter(valid_614356, JString, required = false,
                                 default = nil)
  if valid_614356 != nil:
    section.add "X-Amz-Algorithm", valid_614356
  var valid_614357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614357 = validateParameter(valid_614357, JString, required = false,
                                 default = nil)
  if valid_614357 != nil:
    section.add "X-Amz-SignedHeaders", valid_614357
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614358 = formData.getOrDefault("Marker")
  valid_614358 = validateParameter(valid_614358, JString, required = false,
                                 default = nil)
  if valid_614358 != nil:
    section.add "Marker", valid_614358
  var valid_614359 = formData.getOrDefault("UserName")
  valid_614359 = validateParameter(valid_614359, JString, required = false,
                                 default = nil)
  if valid_614359 != nil:
    section.add "UserName", valid_614359
  var valid_614360 = formData.getOrDefault("MaxItems")
  valid_614360 = validateParameter(valid_614360, JInt, required = false, default = nil)
  if valid_614360 != nil:
    section.add "MaxItems", valid_614360
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614361: Call_PostListMFADevices_614346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614361.validator(path, query, header, formData, body)
  let scheme = call_614361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614361.url(scheme.get, call_614361.host, call_614361.base,
                         call_614361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614361, url, valid)

proc call*(call_614362: Call_PostListMFADevices_614346; Marker: string = "";
          UserName: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614363 = newJObject()
  var formData_614364 = newJObject()
  add(formData_614364, "Marker", newJString(Marker))
  add(formData_614364, "UserName", newJString(UserName))
  add(query_614363, "Action", newJString(Action))
  add(formData_614364, "MaxItems", newJInt(MaxItems))
  add(query_614363, "Version", newJString(Version))
  result = call_614362.call(nil, query_614363, nil, formData_614364, nil)

var postListMFADevices* = Call_PostListMFADevices_614346(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_614347, base: "/",
    url: url_PostListMFADevices_614348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_614328 = ref object of OpenApiRestCall_610658
proc url_GetListMFADevices_614330(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListMFADevices_614329(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614331 = query.getOrDefault("Marker")
  valid_614331 = validateParameter(valid_614331, JString, required = false,
                                 default = nil)
  if valid_614331 != nil:
    section.add "Marker", valid_614331
  var valid_614332 = query.getOrDefault("UserName")
  valid_614332 = validateParameter(valid_614332, JString, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "UserName", valid_614332
  var valid_614333 = query.getOrDefault("MaxItems")
  valid_614333 = validateParameter(valid_614333, JInt, required = false, default = nil)
  if valid_614333 != nil:
    section.add "MaxItems", valid_614333
  var valid_614334 = query.getOrDefault("Action")
  valid_614334 = validateParameter(valid_614334, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_614334 != nil:
    section.add "Action", valid_614334
  var valid_614335 = query.getOrDefault("Version")
  valid_614335 = validateParameter(valid_614335, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614335 != nil:
    section.add "Version", valid_614335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614336 = header.getOrDefault("X-Amz-Signature")
  valid_614336 = validateParameter(valid_614336, JString, required = false,
                                 default = nil)
  if valid_614336 != nil:
    section.add "X-Amz-Signature", valid_614336
  var valid_614337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "X-Amz-Content-Sha256", valid_614337
  var valid_614338 = header.getOrDefault("X-Amz-Date")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = nil)
  if valid_614338 != nil:
    section.add "X-Amz-Date", valid_614338
  var valid_614339 = header.getOrDefault("X-Amz-Credential")
  valid_614339 = validateParameter(valid_614339, JString, required = false,
                                 default = nil)
  if valid_614339 != nil:
    section.add "X-Amz-Credential", valid_614339
  var valid_614340 = header.getOrDefault("X-Amz-Security-Token")
  valid_614340 = validateParameter(valid_614340, JString, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "X-Amz-Security-Token", valid_614340
  var valid_614341 = header.getOrDefault("X-Amz-Algorithm")
  valid_614341 = validateParameter(valid_614341, JString, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "X-Amz-Algorithm", valid_614341
  var valid_614342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614342 = validateParameter(valid_614342, JString, required = false,
                                 default = nil)
  if valid_614342 != nil:
    section.add "X-Amz-SignedHeaders", valid_614342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614343: Call_GetListMFADevices_614328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614343.validator(path, query, header, formData, body)
  let scheme = call_614343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614343.url(scheme.get, call_614343.host, call_614343.base,
                         call_614343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614343, url, valid)

proc call*(call_614344: Call_GetListMFADevices_614328; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListMFADevices";
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614345 = newJObject()
  add(query_614345, "Marker", newJString(Marker))
  add(query_614345, "UserName", newJString(UserName))
  add(query_614345, "MaxItems", newJInt(MaxItems))
  add(query_614345, "Action", newJString(Action))
  add(query_614345, "Version", newJString(Version))
  result = call_614344.call(nil, query_614345, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_614328(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_614329,
    base: "/", url: url_GetListMFADevices_614330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_614380 = ref object of OpenApiRestCall_610658
proc url_PostListOpenIDConnectProviders_614382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListOpenIDConnectProviders_614381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614383 = query.getOrDefault("Action")
  valid_614383 = validateParameter(valid_614383, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_614383 != nil:
    section.add "Action", valid_614383
  var valid_614384 = query.getOrDefault("Version")
  valid_614384 = validateParameter(valid_614384, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614384 != nil:
    section.add "Version", valid_614384
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614385 = header.getOrDefault("X-Amz-Signature")
  valid_614385 = validateParameter(valid_614385, JString, required = false,
                                 default = nil)
  if valid_614385 != nil:
    section.add "X-Amz-Signature", valid_614385
  var valid_614386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614386 = validateParameter(valid_614386, JString, required = false,
                                 default = nil)
  if valid_614386 != nil:
    section.add "X-Amz-Content-Sha256", valid_614386
  var valid_614387 = header.getOrDefault("X-Amz-Date")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "X-Amz-Date", valid_614387
  var valid_614388 = header.getOrDefault("X-Amz-Credential")
  valid_614388 = validateParameter(valid_614388, JString, required = false,
                                 default = nil)
  if valid_614388 != nil:
    section.add "X-Amz-Credential", valid_614388
  var valid_614389 = header.getOrDefault("X-Amz-Security-Token")
  valid_614389 = validateParameter(valid_614389, JString, required = false,
                                 default = nil)
  if valid_614389 != nil:
    section.add "X-Amz-Security-Token", valid_614389
  var valid_614390 = header.getOrDefault("X-Amz-Algorithm")
  valid_614390 = validateParameter(valid_614390, JString, required = false,
                                 default = nil)
  if valid_614390 != nil:
    section.add "X-Amz-Algorithm", valid_614390
  var valid_614391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614391 = validateParameter(valid_614391, JString, required = false,
                                 default = nil)
  if valid_614391 != nil:
    section.add "X-Amz-SignedHeaders", valid_614391
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614392: Call_PostListOpenIDConnectProviders_614380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_614392.validator(path, query, header, formData, body)
  let scheme = call_614392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614392.url(scheme.get, call_614392.host, call_614392.base,
                         call_614392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614392, url, valid)

proc call*(call_614393: Call_PostListOpenIDConnectProviders_614380;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614394 = newJObject()
  add(query_614394, "Action", newJString(Action))
  add(query_614394, "Version", newJString(Version))
  result = call_614393.call(nil, query_614394, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_614380(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_614381, base: "/",
    url: url_PostListOpenIDConnectProviders_614382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_614365 = ref object of OpenApiRestCall_610658
proc url_GetListOpenIDConnectProviders_614367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListOpenIDConnectProviders_614366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614368 = query.getOrDefault("Action")
  valid_614368 = validateParameter(valid_614368, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_614368 != nil:
    section.add "Action", valid_614368
  var valid_614369 = query.getOrDefault("Version")
  valid_614369 = validateParameter(valid_614369, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614369 != nil:
    section.add "Version", valid_614369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614370 = header.getOrDefault("X-Amz-Signature")
  valid_614370 = validateParameter(valid_614370, JString, required = false,
                                 default = nil)
  if valid_614370 != nil:
    section.add "X-Amz-Signature", valid_614370
  var valid_614371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614371 = validateParameter(valid_614371, JString, required = false,
                                 default = nil)
  if valid_614371 != nil:
    section.add "X-Amz-Content-Sha256", valid_614371
  var valid_614372 = header.getOrDefault("X-Amz-Date")
  valid_614372 = validateParameter(valid_614372, JString, required = false,
                                 default = nil)
  if valid_614372 != nil:
    section.add "X-Amz-Date", valid_614372
  var valid_614373 = header.getOrDefault("X-Amz-Credential")
  valid_614373 = validateParameter(valid_614373, JString, required = false,
                                 default = nil)
  if valid_614373 != nil:
    section.add "X-Amz-Credential", valid_614373
  var valid_614374 = header.getOrDefault("X-Amz-Security-Token")
  valid_614374 = validateParameter(valid_614374, JString, required = false,
                                 default = nil)
  if valid_614374 != nil:
    section.add "X-Amz-Security-Token", valid_614374
  var valid_614375 = header.getOrDefault("X-Amz-Algorithm")
  valid_614375 = validateParameter(valid_614375, JString, required = false,
                                 default = nil)
  if valid_614375 != nil:
    section.add "X-Amz-Algorithm", valid_614375
  var valid_614376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614376 = validateParameter(valid_614376, JString, required = false,
                                 default = nil)
  if valid_614376 != nil:
    section.add "X-Amz-SignedHeaders", valid_614376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614377: Call_GetListOpenIDConnectProviders_614365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_614377.validator(path, query, header, formData, body)
  let scheme = call_614377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614377.url(scheme.get, call_614377.host, call_614377.base,
                         call_614377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614377, url, valid)

proc call*(call_614378: Call_GetListOpenIDConnectProviders_614365;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614379 = newJObject()
  add(query_614379, "Action", newJString(Action))
  add(query_614379, "Version", newJString(Version))
  result = call_614378.call(nil, query_614379, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_614365(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_614366, base: "/",
    url: url_GetListOpenIDConnectProviders_614367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_614416 = ref object of OpenApiRestCall_610658
proc url_PostListPolicies_614418(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicies_614417(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614419 = query.getOrDefault("Action")
  valid_614419 = validateParameter(valid_614419, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_614419 != nil:
    section.add "Action", valid_614419
  var valid_614420 = query.getOrDefault("Version")
  valid_614420 = validateParameter(valid_614420, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614420 != nil:
    section.add "Version", valid_614420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614421 = header.getOrDefault("X-Amz-Signature")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-Signature", valid_614421
  var valid_614422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "X-Amz-Content-Sha256", valid_614422
  var valid_614423 = header.getOrDefault("X-Amz-Date")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "X-Amz-Date", valid_614423
  var valid_614424 = header.getOrDefault("X-Amz-Credential")
  valid_614424 = validateParameter(valid_614424, JString, required = false,
                                 default = nil)
  if valid_614424 != nil:
    section.add "X-Amz-Credential", valid_614424
  var valid_614425 = header.getOrDefault("X-Amz-Security-Token")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "X-Amz-Security-Token", valid_614425
  var valid_614426 = header.getOrDefault("X-Amz-Algorithm")
  valid_614426 = validateParameter(valid_614426, JString, required = false,
                                 default = nil)
  if valid_614426 != nil:
    section.add "X-Amz-Algorithm", valid_614426
  var valid_614427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614427 = validateParameter(valid_614427, JString, required = false,
                                 default = nil)
  if valid_614427 != nil:
    section.add "X-Amz-SignedHeaders", valid_614427
  result.add "header", section
  ## parameters in `formData` object:
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_614428 = formData.getOrDefault("Scope")
  valid_614428 = validateParameter(valid_614428, JString, required = false,
                                 default = newJString("All"))
  if valid_614428 != nil:
    section.add "Scope", valid_614428
  var valid_614429 = formData.getOrDefault("Marker")
  valid_614429 = validateParameter(valid_614429, JString, required = false,
                                 default = nil)
  if valid_614429 != nil:
    section.add "Marker", valid_614429
  var valid_614430 = formData.getOrDefault("PathPrefix")
  valid_614430 = validateParameter(valid_614430, JString, required = false,
                                 default = nil)
  if valid_614430 != nil:
    section.add "PathPrefix", valid_614430
  var valid_614431 = formData.getOrDefault("MaxItems")
  valid_614431 = validateParameter(valid_614431, JInt, required = false, default = nil)
  if valid_614431 != nil:
    section.add "MaxItems", valid_614431
  var valid_614432 = formData.getOrDefault("OnlyAttached")
  valid_614432 = validateParameter(valid_614432, JBool, required = false, default = nil)
  if valid_614432 != nil:
    section.add "OnlyAttached", valid_614432
  var valid_614433 = formData.getOrDefault("PolicyUsageFilter")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_614433 != nil:
    section.add "PolicyUsageFilter", valid_614433
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614434: Call_PostListPolicies_614416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614434.validator(path, query, header, formData, body)
  let scheme = call_614434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614434.url(scheme.get, call_614434.host, call_614434.base,
                         call_614434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614434, url, valid)

proc call*(call_614435: Call_PostListPolicies_614416; Scope: string = "All";
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListPolicies"; OnlyAttached: bool = false;
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_614436 = newJObject()
  var formData_614437 = newJObject()
  add(formData_614437, "Scope", newJString(Scope))
  add(formData_614437, "Marker", newJString(Marker))
  add(formData_614437, "PathPrefix", newJString(PathPrefix))
  add(formData_614437, "MaxItems", newJInt(MaxItems))
  add(query_614436, "Action", newJString(Action))
  add(formData_614437, "OnlyAttached", newJBool(OnlyAttached))
  add(query_614436, "Version", newJString(Version))
  add(formData_614437, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_614435.call(nil, query_614436, nil, formData_614437, nil)

var postListPolicies* = Call_PostListPolicies_614416(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_614417,
    base: "/", url: url_PostListPolicies_614418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_614395 = ref object of OpenApiRestCall_610658
proc url_GetListPolicies_614397(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicies_614396(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614398 = query.getOrDefault("Marker")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "Marker", valid_614398
  var valid_614399 = query.getOrDefault("PolicyUsageFilter")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_614399 != nil:
    section.add "PolicyUsageFilter", valid_614399
  var valid_614400 = query.getOrDefault("OnlyAttached")
  valid_614400 = validateParameter(valid_614400, JBool, required = false, default = nil)
  if valid_614400 != nil:
    section.add "OnlyAttached", valid_614400
  var valid_614401 = query.getOrDefault("MaxItems")
  valid_614401 = validateParameter(valid_614401, JInt, required = false, default = nil)
  if valid_614401 != nil:
    section.add "MaxItems", valid_614401
  var valid_614402 = query.getOrDefault("Scope")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = newJString("All"))
  if valid_614402 != nil:
    section.add "Scope", valid_614402
  var valid_614403 = query.getOrDefault("PathPrefix")
  valid_614403 = validateParameter(valid_614403, JString, required = false,
                                 default = nil)
  if valid_614403 != nil:
    section.add "PathPrefix", valid_614403
  var valid_614404 = query.getOrDefault("Action")
  valid_614404 = validateParameter(valid_614404, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_614404 != nil:
    section.add "Action", valid_614404
  var valid_614405 = query.getOrDefault("Version")
  valid_614405 = validateParameter(valid_614405, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614405 != nil:
    section.add "Version", valid_614405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614406 = header.getOrDefault("X-Amz-Signature")
  valid_614406 = validateParameter(valid_614406, JString, required = false,
                                 default = nil)
  if valid_614406 != nil:
    section.add "X-Amz-Signature", valid_614406
  var valid_614407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614407 = validateParameter(valid_614407, JString, required = false,
                                 default = nil)
  if valid_614407 != nil:
    section.add "X-Amz-Content-Sha256", valid_614407
  var valid_614408 = header.getOrDefault("X-Amz-Date")
  valid_614408 = validateParameter(valid_614408, JString, required = false,
                                 default = nil)
  if valid_614408 != nil:
    section.add "X-Amz-Date", valid_614408
  var valid_614409 = header.getOrDefault("X-Amz-Credential")
  valid_614409 = validateParameter(valid_614409, JString, required = false,
                                 default = nil)
  if valid_614409 != nil:
    section.add "X-Amz-Credential", valid_614409
  var valid_614410 = header.getOrDefault("X-Amz-Security-Token")
  valid_614410 = validateParameter(valid_614410, JString, required = false,
                                 default = nil)
  if valid_614410 != nil:
    section.add "X-Amz-Security-Token", valid_614410
  var valid_614411 = header.getOrDefault("X-Amz-Algorithm")
  valid_614411 = validateParameter(valid_614411, JString, required = false,
                                 default = nil)
  if valid_614411 != nil:
    section.add "X-Amz-Algorithm", valid_614411
  var valid_614412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614412 = validateParameter(valid_614412, JString, required = false,
                                 default = nil)
  if valid_614412 != nil:
    section.add "X-Amz-SignedHeaders", valid_614412
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614413: Call_GetListPolicies_614395; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614413.validator(path, query, header, formData, body)
  let scheme = call_614413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614413.url(scheme.get, call_614413.host, call_614413.base,
                         call_614413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614413, url, valid)

proc call*(call_614414: Call_GetListPolicies_614395; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          OnlyAttached: bool = false; MaxItems: int = 0; Scope: string = "All";
          PathPrefix: string = ""; Action: string = "ListPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614415 = newJObject()
  add(query_614415, "Marker", newJString(Marker))
  add(query_614415, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_614415, "OnlyAttached", newJBool(OnlyAttached))
  add(query_614415, "MaxItems", newJInt(MaxItems))
  add(query_614415, "Scope", newJString(Scope))
  add(query_614415, "PathPrefix", newJString(PathPrefix))
  add(query_614415, "Action", newJString(Action))
  add(query_614415, "Version", newJString(Version))
  result = call_614414.call(nil, query_614415, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_614395(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_614396,
    base: "/", url: url_GetListPolicies_614397, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_614456 = ref object of OpenApiRestCall_610658
proc url_PostListPoliciesGrantingServiceAccess_614458(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_614457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614459 = query.getOrDefault("Action")
  valid_614459 = validateParameter(valid_614459, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_614459 != nil:
    section.add "Action", valid_614459
  var valid_614460 = query.getOrDefault("Version")
  valid_614460 = validateParameter(valid_614460, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614460 != nil:
    section.add "Version", valid_614460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614461 = header.getOrDefault("X-Amz-Signature")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Signature", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Content-Sha256", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-Date")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-Date", valid_614463
  var valid_614464 = header.getOrDefault("X-Amz-Credential")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-Credential", valid_614464
  var valid_614465 = header.getOrDefault("X-Amz-Security-Token")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "X-Amz-Security-Token", valid_614465
  var valid_614466 = header.getOrDefault("X-Amz-Algorithm")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "X-Amz-Algorithm", valid_614466
  var valid_614467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "X-Amz-SignedHeaders", valid_614467
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespaces` field"
  var valid_614468 = formData.getOrDefault("ServiceNamespaces")
  valid_614468 = validateParameter(valid_614468, JArray, required = true, default = nil)
  if valid_614468 != nil:
    section.add "ServiceNamespaces", valid_614468
  var valid_614469 = formData.getOrDefault("Arn")
  valid_614469 = validateParameter(valid_614469, JString, required = true,
                                 default = nil)
  if valid_614469 != nil:
    section.add "Arn", valid_614469
  var valid_614470 = formData.getOrDefault("Marker")
  valid_614470 = validateParameter(valid_614470, JString, required = false,
                                 default = nil)
  if valid_614470 != nil:
    section.add "Marker", valid_614470
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614471: Call_PostListPoliciesGrantingServiceAccess_614456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_614471.validator(path, query, header, formData, body)
  let scheme = call_614471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614471.url(scheme.get, call_614471.host, call_614471.base,
                         call_614471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614471, url, valid)

proc call*(call_614472: Call_PostListPoliciesGrantingServiceAccess_614456;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614473 = newJObject()
  var formData_614474 = newJObject()
  if ServiceNamespaces != nil:
    formData_614474.add "ServiceNamespaces", ServiceNamespaces
  add(formData_614474, "Arn", newJString(Arn))
  add(formData_614474, "Marker", newJString(Marker))
  add(query_614473, "Action", newJString(Action))
  add(query_614473, "Version", newJString(Version))
  result = call_614472.call(nil, query_614473, nil, formData_614474, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_614456(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_614457, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_614458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_614438 = ref object of OpenApiRestCall_610658
proc url_GetListPoliciesGrantingServiceAccess_614440(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_614439(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_614441 = query.getOrDefault("Marker")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "Marker", valid_614441
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_614442 = query.getOrDefault("ServiceNamespaces")
  valid_614442 = validateParameter(valid_614442, JArray, required = true, default = nil)
  if valid_614442 != nil:
    section.add "ServiceNamespaces", valid_614442
  var valid_614443 = query.getOrDefault("Action")
  valid_614443 = validateParameter(valid_614443, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_614443 != nil:
    section.add "Action", valid_614443
  var valid_614444 = query.getOrDefault("Version")
  valid_614444 = validateParameter(valid_614444, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614444 != nil:
    section.add "Version", valid_614444
  var valid_614445 = query.getOrDefault("Arn")
  valid_614445 = validateParameter(valid_614445, JString, required = true,
                                 default = nil)
  if valid_614445 != nil:
    section.add "Arn", valid_614445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614446 = header.getOrDefault("X-Amz-Signature")
  valid_614446 = validateParameter(valid_614446, JString, required = false,
                                 default = nil)
  if valid_614446 != nil:
    section.add "X-Amz-Signature", valid_614446
  var valid_614447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614447 = validateParameter(valid_614447, JString, required = false,
                                 default = nil)
  if valid_614447 != nil:
    section.add "X-Amz-Content-Sha256", valid_614447
  var valid_614448 = header.getOrDefault("X-Amz-Date")
  valid_614448 = validateParameter(valid_614448, JString, required = false,
                                 default = nil)
  if valid_614448 != nil:
    section.add "X-Amz-Date", valid_614448
  var valid_614449 = header.getOrDefault("X-Amz-Credential")
  valid_614449 = validateParameter(valid_614449, JString, required = false,
                                 default = nil)
  if valid_614449 != nil:
    section.add "X-Amz-Credential", valid_614449
  var valid_614450 = header.getOrDefault("X-Amz-Security-Token")
  valid_614450 = validateParameter(valid_614450, JString, required = false,
                                 default = nil)
  if valid_614450 != nil:
    section.add "X-Amz-Security-Token", valid_614450
  var valid_614451 = header.getOrDefault("X-Amz-Algorithm")
  valid_614451 = validateParameter(valid_614451, JString, required = false,
                                 default = nil)
  if valid_614451 != nil:
    section.add "X-Amz-Algorithm", valid_614451
  var valid_614452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614452 = validateParameter(valid_614452, JString, required = false,
                                 default = nil)
  if valid_614452 != nil:
    section.add "X-Amz-SignedHeaders", valid_614452
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614453: Call_GetListPoliciesGrantingServiceAccess_614438;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_614453.validator(path, query, header, formData, body)
  let scheme = call_614453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614453.url(scheme.get, call_614453.host, call_614453.base,
                         call_614453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614453, url, valid)

proc call*(call_614454: Call_GetListPoliciesGrantingServiceAccess_614438;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_614455 = newJObject()
  add(query_614455, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    query_614455.add "ServiceNamespaces", ServiceNamespaces
  add(query_614455, "Action", newJString(Action))
  add(query_614455, "Version", newJString(Version))
  add(query_614455, "Arn", newJString(Arn))
  result = call_614454.call(nil, query_614455, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_614438(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_614439, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_614440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_614493 = ref object of OpenApiRestCall_610658
proc url_PostListPolicyVersions_614495(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicyVersions_614494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614496 = query.getOrDefault("Action")
  valid_614496 = validateParameter(valid_614496, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_614496 != nil:
    section.add "Action", valid_614496
  var valid_614497 = query.getOrDefault("Version")
  valid_614497 = validateParameter(valid_614497, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614497 != nil:
    section.add "Version", valid_614497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614498 = header.getOrDefault("X-Amz-Signature")
  valid_614498 = validateParameter(valid_614498, JString, required = false,
                                 default = nil)
  if valid_614498 != nil:
    section.add "X-Amz-Signature", valid_614498
  var valid_614499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614499 = validateParameter(valid_614499, JString, required = false,
                                 default = nil)
  if valid_614499 != nil:
    section.add "X-Amz-Content-Sha256", valid_614499
  var valid_614500 = header.getOrDefault("X-Amz-Date")
  valid_614500 = validateParameter(valid_614500, JString, required = false,
                                 default = nil)
  if valid_614500 != nil:
    section.add "X-Amz-Date", valid_614500
  var valid_614501 = header.getOrDefault("X-Amz-Credential")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "X-Amz-Credential", valid_614501
  var valid_614502 = header.getOrDefault("X-Amz-Security-Token")
  valid_614502 = validateParameter(valid_614502, JString, required = false,
                                 default = nil)
  if valid_614502 != nil:
    section.add "X-Amz-Security-Token", valid_614502
  var valid_614503 = header.getOrDefault("X-Amz-Algorithm")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Algorithm", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-SignedHeaders", valid_614504
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614505 = formData.getOrDefault("Marker")
  valid_614505 = validateParameter(valid_614505, JString, required = false,
                                 default = nil)
  if valid_614505 != nil:
    section.add "Marker", valid_614505
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_614506 = formData.getOrDefault("PolicyArn")
  valid_614506 = validateParameter(valid_614506, JString, required = true,
                                 default = nil)
  if valid_614506 != nil:
    section.add "PolicyArn", valid_614506
  var valid_614507 = formData.getOrDefault("MaxItems")
  valid_614507 = validateParameter(valid_614507, JInt, required = false, default = nil)
  if valid_614507 != nil:
    section.add "MaxItems", valid_614507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614508: Call_PostListPolicyVersions_614493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614508.validator(path, query, header, formData, body)
  let scheme = call_614508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614508.url(scheme.get, call_614508.host, call_614508.base,
                         call_614508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614508, url, valid)

proc call*(call_614509: Call_PostListPolicyVersions_614493; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614510 = newJObject()
  var formData_614511 = newJObject()
  add(formData_614511, "Marker", newJString(Marker))
  add(formData_614511, "PolicyArn", newJString(PolicyArn))
  add(query_614510, "Action", newJString(Action))
  add(formData_614511, "MaxItems", newJInt(MaxItems))
  add(query_614510, "Version", newJString(Version))
  result = call_614509.call(nil, query_614510, nil, formData_614511, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_614493(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_614494, base: "/",
    url: url_PostListPolicyVersions_614495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_614475 = ref object of OpenApiRestCall_610658
proc url_GetListPolicyVersions_614477(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicyVersions_614476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614478 = query.getOrDefault("Marker")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "Marker", valid_614478
  var valid_614479 = query.getOrDefault("MaxItems")
  valid_614479 = validateParameter(valid_614479, JInt, required = false, default = nil)
  if valid_614479 != nil:
    section.add "MaxItems", valid_614479
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_614480 = query.getOrDefault("PolicyArn")
  valid_614480 = validateParameter(valid_614480, JString, required = true,
                                 default = nil)
  if valid_614480 != nil:
    section.add "PolicyArn", valid_614480
  var valid_614481 = query.getOrDefault("Action")
  valid_614481 = validateParameter(valid_614481, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_614481 != nil:
    section.add "Action", valid_614481
  var valid_614482 = query.getOrDefault("Version")
  valid_614482 = validateParameter(valid_614482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614482 != nil:
    section.add "Version", valid_614482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614483 = header.getOrDefault("X-Amz-Signature")
  valid_614483 = validateParameter(valid_614483, JString, required = false,
                                 default = nil)
  if valid_614483 != nil:
    section.add "X-Amz-Signature", valid_614483
  var valid_614484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614484 = validateParameter(valid_614484, JString, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "X-Amz-Content-Sha256", valid_614484
  var valid_614485 = header.getOrDefault("X-Amz-Date")
  valid_614485 = validateParameter(valid_614485, JString, required = false,
                                 default = nil)
  if valid_614485 != nil:
    section.add "X-Amz-Date", valid_614485
  var valid_614486 = header.getOrDefault("X-Amz-Credential")
  valid_614486 = validateParameter(valid_614486, JString, required = false,
                                 default = nil)
  if valid_614486 != nil:
    section.add "X-Amz-Credential", valid_614486
  var valid_614487 = header.getOrDefault("X-Amz-Security-Token")
  valid_614487 = validateParameter(valid_614487, JString, required = false,
                                 default = nil)
  if valid_614487 != nil:
    section.add "X-Amz-Security-Token", valid_614487
  var valid_614488 = header.getOrDefault("X-Amz-Algorithm")
  valid_614488 = validateParameter(valid_614488, JString, required = false,
                                 default = nil)
  if valid_614488 != nil:
    section.add "X-Amz-Algorithm", valid_614488
  var valid_614489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614489 = validateParameter(valid_614489, JString, required = false,
                                 default = nil)
  if valid_614489 != nil:
    section.add "X-Amz-SignedHeaders", valid_614489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614490: Call_GetListPolicyVersions_614475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614490.validator(path, query, header, formData, body)
  let scheme = call_614490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614490.url(scheme.get, call_614490.host, call_614490.base,
                         call_614490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614490, url, valid)

proc call*(call_614491: Call_GetListPolicyVersions_614475; PolicyArn: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListPolicyVersions";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614492 = newJObject()
  add(query_614492, "Marker", newJString(Marker))
  add(query_614492, "MaxItems", newJInt(MaxItems))
  add(query_614492, "PolicyArn", newJString(PolicyArn))
  add(query_614492, "Action", newJString(Action))
  add(query_614492, "Version", newJString(Version))
  result = call_614491.call(nil, query_614492, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_614475(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_614476, base: "/",
    url: url_GetListPolicyVersions_614477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_614530 = ref object of OpenApiRestCall_610658
proc url_PostListRolePolicies_614532(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRolePolicies_614531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614533 = query.getOrDefault("Action")
  valid_614533 = validateParameter(valid_614533, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_614533 != nil:
    section.add "Action", valid_614533
  var valid_614534 = query.getOrDefault("Version")
  valid_614534 = validateParameter(valid_614534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614534 != nil:
    section.add "Version", valid_614534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614535 = header.getOrDefault("X-Amz-Signature")
  valid_614535 = validateParameter(valid_614535, JString, required = false,
                                 default = nil)
  if valid_614535 != nil:
    section.add "X-Amz-Signature", valid_614535
  var valid_614536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614536 = validateParameter(valid_614536, JString, required = false,
                                 default = nil)
  if valid_614536 != nil:
    section.add "X-Amz-Content-Sha256", valid_614536
  var valid_614537 = header.getOrDefault("X-Amz-Date")
  valid_614537 = validateParameter(valid_614537, JString, required = false,
                                 default = nil)
  if valid_614537 != nil:
    section.add "X-Amz-Date", valid_614537
  var valid_614538 = header.getOrDefault("X-Amz-Credential")
  valid_614538 = validateParameter(valid_614538, JString, required = false,
                                 default = nil)
  if valid_614538 != nil:
    section.add "X-Amz-Credential", valid_614538
  var valid_614539 = header.getOrDefault("X-Amz-Security-Token")
  valid_614539 = validateParameter(valid_614539, JString, required = false,
                                 default = nil)
  if valid_614539 != nil:
    section.add "X-Amz-Security-Token", valid_614539
  var valid_614540 = header.getOrDefault("X-Amz-Algorithm")
  valid_614540 = validateParameter(valid_614540, JString, required = false,
                                 default = nil)
  if valid_614540 != nil:
    section.add "X-Amz-Algorithm", valid_614540
  var valid_614541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "X-Amz-SignedHeaders", valid_614541
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614542 = formData.getOrDefault("RoleName")
  valid_614542 = validateParameter(valid_614542, JString, required = true,
                                 default = nil)
  if valid_614542 != nil:
    section.add "RoleName", valid_614542
  var valid_614543 = formData.getOrDefault("Marker")
  valid_614543 = validateParameter(valid_614543, JString, required = false,
                                 default = nil)
  if valid_614543 != nil:
    section.add "Marker", valid_614543
  var valid_614544 = formData.getOrDefault("MaxItems")
  valid_614544 = validateParameter(valid_614544, JInt, required = false, default = nil)
  if valid_614544 != nil:
    section.add "MaxItems", valid_614544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614545: Call_PostListRolePolicies_614530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_614545.validator(path, query, header, formData, body)
  let scheme = call_614545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614545.url(scheme.get, call_614545.host, call_614545.base,
                         call_614545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614545, url, valid)

proc call*(call_614546: Call_PostListRolePolicies_614530; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614547 = newJObject()
  var formData_614548 = newJObject()
  add(formData_614548, "RoleName", newJString(RoleName))
  add(formData_614548, "Marker", newJString(Marker))
  add(query_614547, "Action", newJString(Action))
  add(formData_614548, "MaxItems", newJInt(MaxItems))
  add(query_614547, "Version", newJString(Version))
  result = call_614546.call(nil, query_614547, nil, formData_614548, nil)

var postListRolePolicies* = Call_PostListRolePolicies_614530(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_614531, base: "/",
    url: url_PostListRolePolicies_614532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_614512 = ref object of OpenApiRestCall_610658
proc url_GetListRolePolicies_614514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRolePolicies_614513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614515 = query.getOrDefault("Marker")
  valid_614515 = validateParameter(valid_614515, JString, required = false,
                                 default = nil)
  if valid_614515 != nil:
    section.add "Marker", valid_614515
  var valid_614516 = query.getOrDefault("MaxItems")
  valid_614516 = validateParameter(valid_614516, JInt, required = false, default = nil)
  if valid_614516 != nil:
    section.add "MaxItems", valid_614516
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614517 = query.getOrDefault("RoleName")
  valid_614517 = validateParameter(valid_614517, JString, required = true,
                                 default = nil)
  if valid_614517 != nil:
    section.add "RoleName", valid_614517
  var valid_614518 = query.getOrDefault("Action")
  valid_614518 = validateParameter(valid_614518, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_614518 != nil:
    section.add "Action", valid_614518
  var valid_614519 = query.getOrDefault("Version")
  valid_614519 = validateParameter(valid_614519, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614519 != nil:
    section.add "Version", valid_614519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614520 = header.getOrDefault("X-Amz-Signature")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "X-Amz-Signature", valid_614520
  var valid_614521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614521 = validateParameter(valid_614521, JString, required = false,
                                 default = nil)
  if valid_614521 != nil:
    section.add "X-Amz-Content-Sha256", valid_614521
  var valid_614522 = header.getOrDefault("X-Amz-Date")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "X-Amz-Date", valid_614522
  var valid_614523 = header.getOrDefault("X-Amz-Credential")
  valid_614523 = validateParameter(valid_614523, JString, required = false,
                                 default = nil)
  if valid_614523 != nil:
    section.add "X-Amz-Credential", valid_614523
  var valid_614524 = header.getOrDefault("X-Amz-Security-Token")
  valid_614524 = validateParameter(valid_614524, JString, required = false,
                                 default = nil)
  if valid_614524 != nil:
    section.add "X-Amz-Security-Token", valid_614524
  var valid_614525 = header.getOrDefault("X-Amz-Algorithm")
  valid_614525 = validateParameter(valid_614525, JString, required = false,
                                 default = nil)
  if valid_614525 != nil:
    section.add "X-Amz-Algorithm", valid_614525
  var valid_614526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-SignedHeaders", valid_614526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614527: Call_GetListRolePolicies_614512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_614527.validator(path, query, header, formData, body)
  let scheme = call_614527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614527.url(scheme.get, call_614527.host, call_614527.base,
                         call_614527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614527, url, valid)

proc call*(call_614528: Call_GetListRolePolicies_614512; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614529 = newJObject()
  add(query_614529, "Marker", newJString(Marker))
  add(query_614529, "MaxItems", newJInt(MaxItems))
  add(query_614529, "RoleName", newJString(RoleName))
  add(query_614529, "Action", newJString(Action))
  add(query_614529, "Version", newJString(Version))
  result = call_614528.call(nil, query_614529, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_614512(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_614513, base: "/",
    url: url_GetListRolePolicies_614514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_614567 = ref object of OpenApiRestCall_610658
proc url_PostListRoleTags_614569(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoleTags_614568(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614570 = query.getOrDefault("Action")
  valid_614570 = validateParameter(valid_614570, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_614570 != nil:
    section.add "Action", valid_614570
  var valid_614571 = query.getOrDefault("Version")
  valid_614571 = validateParameter(valid_614571, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614571 != nil:
    section.add "Version", valid_614571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614572 = header.getOrDefault("X-Amz-Signature")
  valid_614572 = validateParameter(valid_614572, JString, required = false,
                                 default = nil)
  if valid_614572 != nil:
    section.add "X-Amz-Signature", valid_614572
  var valid_614573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614573 = validateParameter(valid_614573, JString, required = false,
                                 default = nil)
  if valid_614573 != nil:
    section.add "X-Amz-Content-Sha256", valid_614573
  var valid_614574 = header.getOrDefault("X-Amz-Date")
  valid_614574 = validateParameter(valid_614574, JString, required = false,
                                 default = nil)
  if valid_614574 != nil:
    section.add "X-Amz-Date", valid_614574
  var valid_614575 = header.getOrDefault("X-Amz-Credential")
  valid_614575 = validateParameter(valid_614575, JString, required = false,
                                 default = nil)
  if valid_614575 != nil:
    section.add "X-Amz-Credential", valid_614575
  var valid_614576 = header.getOrDefault("X-Amz-Security-Token")
  valid_614576 = validateParameter(valid_614576, JString, required = false,
                                 default = nil)
  if valid_614576 != nil:
    section.add "X-Amz-Security-Token", valid_614576
  var valid_614577 = header.getOrDefault("X-Amz-Algorithm")
  valid_614577 = validateParameter(valid_614577, JString, required = false,
                                 default = nil)
  if valid_614577 != nil:
    section.add "X-Amz-Algorithm", valid_614577
  var valid_614578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614578 = validateParameter(valid_614578, JString, required = false,
                                 default = nil)
  if valid_614578 != nil:
    section.add "X-Amz-SignedHeaders", valid_614578
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614579 = formData.getOrDefault("RoleName")
  valid_614579 = validateParameter(valid_614579, JString, required = true,
                                 default = nil)
  if valid_614579 != nil:
    section.add "RoleName", valid_614579
  var valid_614580 = formData.getOrDefault("Marker")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "Marker", valid_614580
  var valid_614581 = formData.getOrDefault("MaxItems")
  valid_614581 = validateParameter(valid_614581, JInt, required = false, default = nil)
  if valid_614581 != nil:
    section.add "MaxItems", valid_614581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614582: Call_PostListRoleTags_614567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614582.validator(path, query, header, formData, body)
  let scheme = call_614582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614582.url(scheme.get, call_614582.host, call_614582.base,
                         call_614582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614582, url, valid)

proc call*(call_614583: Call_PostListRoleTags_614567; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614584 = newJObject()
  var formData_614585 = newJObject()
  add(formData_614585, "RoleName", newJString(RoleName))
  add(formData_614585, "Marker", newJString(Marker))
  add(query_614584, "Action", newJString(Action))
  add(formData_614585, "MaxItems", newJInt(MaxItems))
  add(query_614584, "Version", newJString(Version))
  result = call_614583.call(nil, query_614584, nil, formData_614585, nil)

var postListRoleTags* = Call_PostListRoleTags_614567(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_614568,
    base: "/", url: url_PostListRoleTags_614569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_614549 = ref object of OpenApiRestCall_610658
proc url_GetListRoleTags_614551(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoleTags_614550(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614552 = query.getOrDefault("Marker")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "Marker", valid_614552
  var valid_614553 = query.getOrDefault("MaxItems")
  valid_614553 = validateParameter(valid_614553, JInt, required = false, default = nil)
  if valid_614553 != nil:
    section.add "MaxItems", valid_614553
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614554 = query.getOrDefault("RoleName")
  valid_614554 = validateParameter(valid_614554, JString, required = true,
                                 default = nil)
  if valid_614554 != nil:
    section.add "RoleName", valid_614554
  var valid_614555 = query.getOrDefault("Action")
  valid_614555 = validateParameter(valid_614555, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_614555 != nil:
    section.add "Action", valid_614555
  var valid_614556 = query.getOrDefault("Version")
  valid_614556 = validateParameter(valid_614556, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614556 != nil:
    section.add "Version", valid_614556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614557 = header.getOrDefault("X-Amz-Signature")
  valid_614557 = validateParameter(valid_614557, JString, required = false,
                                 default = nil)
  if valid_614557 != nil:
    section.add "X-Amz-Signature", valid_614557
  var valid_614558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614558 = validateParameter(valid_614558, JString, required = false,
                                 default = nil)
  if valid_614558 != nil:
    section.add "X-Amz-Content-Sha256", valid_614558
  var valid_614559 = header.getOrDefault("X-Amz-Date")
  valid_614559 = validateParameter(valid_614559, JString, required = false,
                                 default = nil)
  if valid_614559 != nil:
    section.add "X-Amz-Date", valid_614559
  var valid_614560 = header.getOrDefault("X-Amz-Credential")
  valid_614560 = validateParameter(valid_614560, JString, required = false,
                                 default = nil)
  if valid_614560 != nil:
    section.add "X-Amz-Credential", valid_614560
  var valid_614561 = header.getOrDefault("X-Amz-Security-Token")
  valid_614561 = validateParameter(valid_614561, JString, required = false,
                                 default = nil)
  if valid_614561 != nil:
    section.add "X-Amz-Security-Token", valid_614561
  var valid_614562 = header.getOrDefault("X-Amz-Algorithm")
  valid_614562 = validateParameter(valid_614562, JString, required = false,
                                 default = nil)
  if valid_614562 != nil:
    section.add "X-Amz-Algorithm", valid_614562
  var valid_614563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614563 = validateParameter(valid_614563, JString, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "X-Amz-SignedHeaders", valid_614563
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614564: Call_GetListRoleTags_614549; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614564.validator(path, query, header, formData, body)
  let scheme = call_614564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614564.url(scheme.get, call_614564.host, call_614564.base,
                         call_614564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614564, url, valid)

proc call*(call_614565: Call_GetListRoleTags_614549; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRoleTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614566 = newJObject()
  add(query_614566, "Marker", newJString(Marker))
  add(query_614566, "MaxItems", newJInt(MaxItems))
  add(query_614566, "RoleName", newJString(RoleName))
  add(query_614566, "Action", newJString(Action))
  add(query_614566, "Version", newJString(Version))
  result = call_614565.call(nil, query_614566, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_614549(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_614550,
    base: "/", url: url_GetListRoleTags_614551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_614604 = ref object of OpenApiRestCall_610658
proc url_PostListRoles_614606(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoles_614605(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614607 = query.getOrDefault("Action")
  valid_614607 = validateParameter(valid_614607, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_614607 != nil:
    section.add "Action", valid_614607
  var valid_614608 = query.getOrDefault("Version")
  valid_614608 = validateParameter(valid_614608, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614608 != nil:
    section.add "Version", valid_614608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614609 = header.getOrDefault("X-Amz-Signature")
  valid_614609 = validateParameter(valid_614609, JString, required = false,
                                 default = nil)
  if valid_614609 != nil:
    section.add "X-Amz-Signature", valid_614609
  var valid_614610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614610 = validateParameter(valid_614610, JString, required = false,
                                 default = nil)
  if valid_614610 != nil:
    section.add "X-Amz-Content-Sha256", valid_614610
  var valid_614611 = header.getOrDefault("X-Amz-Date")
  valid_614611 = validateParameter(valid_614611, JString, required = false,
                                 default = nil)
  if valid_614611 != nil:
    section.add "X-Amz-Date", valid_614611
  var valid_614612 = header.getOrDefault("X-Amz-Credential")
  valid_614612 = validateParameter(valid_614612, JString, required = false,
                                 default = nil)
  if valid_614612 != nil:
    section.add "X-Amz-Credential", valid_614612
  var valid_614613 = header.getOrDefault("X-Amz-Security-Token")
  valid_614613 = validateParameter(valid_614613, JString, required = false,
                                 default = nil)
  if valid_614613 != nil:
    section.add "X-Amz-Security-Token", valid_614613
  var valid_614614 = header.getOrDefault("X-Amz-Algorithm")
  valid_614614 = validateParameter(valid_614614, JString, required = false,
                                 default = nil)
  if valid_614614 != nil:
    section.add "X-Amz-Algorithm", valid_614614
  var valid_614615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614615 = validateParameter(valid_614615, JString, required = false,
                                 default = nil)
  if valid_614615 != nil:
    section.add "X-Amz-SignedHeaders", valid_614615
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614616 = formData.getOrDefault("Marker")
  valid_614616 = validateParameter(valid_614616, JString, required = false,
                                 default = nil)
  if valid_614616 != nil:
    section.add "Marker", valid_614616
  var valid_614617 = formData.getOrDefault("PathPrefix")
  valid_614617 = validateParameter(valid_614617, JString, required = false,
                                 default = nil)
  if valid_614617 != nil:
    section.add "PathPrefix", valid_614617
  var valid_614618 = formData.getOrDefault("MaxItems")
  valid_614618 = validateParameter(valid_614618, JInt, required = false, default = nil)
  if valid_614618 != nil:
    section.add "MaxItems", valid_614618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614619: Call_PostListRoles_614604; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614619.validator(path, query, header, formData, body)
  let scheme = call_614619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614619.url(scheme.get, call_614619.host, call_614619.base,
                         call_614619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614619, url, valid)

proc call*(call_614620: Call_PostListRoles_614604; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614621 = newJObject()
  var formData_614622 = newJObject()
  add(formData_614622, "Marker", newJString(Marker))
  add(formData_614622, "PathPrefix", newJString(PathPrefix))
  add(formData_614622, "MaxItems", newJInt(MaxItems))
  add(query_614621, "Action", newJString(Action))
  add(query_614621, "Version", newJString(Version))
  result = call_614620.call(nil, query_614621, nil, formData_614622, nil)

var postListRoles* = Call_PostListRoles_614604(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_614605,
    base: "/", url: url_PostListRoles_614606, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_614586 = ref object of OpenApiRestCall_610658
proc url_GetListRoles_614588(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoles_614587(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614589 = query.getOrDefault("Marker")
  valid_614589 = validateParameter(valid_614589, JString, required = false,
                                 default = nil)
  if valid_614589 != nil:
    section.add "Marker", valid_614589
  var valid_614590 = query.getOrDefault("MaxItems")
  valid_614590 = validateParameter(valid_614590, JInt, required = false, default = nil)
  if valid_614590 != nil:
    section.add "MaxItems", valid_614590
  var valid_614591 = query.getOrDefault("PathPrefix")
  valid_614591 = validateParameter(valid_614591, JString, required = false,
                                 default = nil)
  if valid_614591 != nil:
    section.add "PathPrefix", valid_614591
  var valid_614592 = query.getOrDefault("Action")
  valid_614592 = validateParameter(valid_614592, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_614592 != nil:
    section.add "Action", valid_614592
  var valid_614593 = query.getOrDefault("Version")
  valid_614593 = validateParameter(valid_614593, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614593 != nil:
    section.add "Version", valid_614593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614594 = header.getOrDefault("X-Amz-Signature")
  valid_614594 = validateParameter(valid_614594, JString, required = false,
                                 default = nil)
  if valid_614594 != nil:
    section.add "X-Amz-Signature", valid_614594
  var valid_614595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614595 = validateParameter(valid_614595, JString, required = false,
                                 default = nil)
  if valid_614595 != nil:
    section.add "X-Amz-Content-Sha256", valid_614595
  var valid_614596 = header.getOrDefault("X-Amz-Date")
  valid_614596 = validateParameter(valid_614596, JString, required = false,
                                 default = nil)
  if valid_614596 != nil:
    section.add "X-Amz-Date", valid_614596
  var valid_614597 = header.getOrDefault("X-Amz-Credential")
  valid_614597 = validateParameter(valid_614597, JString, required = false,
                                 default = nil)
  if valid_614597 != nil:
    section.add "X-Amz-Credential", valid_614597
  var valid_614598 = header.getOrDefault("X-Amz-Security-Token")
  valid_614598 = validateParameter(valid_614598, JString, required = false,
                                 default = nil)
  if valid_614598 != nil:
    section.add "X-Amz-Security-Token", valid_614598
  var valid_614599 = header.getOrDefault("X-Amz-Algorithm")
  valid_614599 = validateParameter(valid_614599, JString, required = false,
                                 default = nil)
  if valid_614599 != nil:
    section.add "X-Amz-Algorithm", valid_614599
  var valid_614600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614600 = validateParameter(valid_614600, JString, required = false,
                                 default = nil)
  if valid_614600 != nil:
    section.add "X-Amz-SignedHeaders", valid_614600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614601: Call_GetListRoles_614586; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614601.validator(path, query, header, formData, body)
  let scheme = call_614601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614601.url(scheme.get, call_614601.host, call_614601.base,
                         call_614601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614601, url, valid)

proc call*(call_614602: Call_GetListRoles_614586; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614603 = newJObject()
  add(query_614603, "Marker", newJString(Marker))
  add(query_614603, "MaxItems", newJInt(MaxItems))
  add(query_614603, "PathPrefix", newJString(PathPrefix))
  add(query_614603, "Action", newJString(Action))
  add(query_614603, "Version", newJString(Version))
  result = call_614602.call(nil, query_614603, nil, nil, nil)

var getListRoles* = Call_GetListRoles_614586(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_614587, base: "/",
    url: url_GetListRoles_614588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_614638 = ref object of OpenApiRestCall_610658
proc url_PostListSAMLProviders_614640(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSAMLProviders_614639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614641 = query.getOrDefault("Action")
  valid_614641 = validateParameter(valid_614641, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_614641 != nil:
    section.add "Action", valid_614641
  var valid_614642 = query.getOrDefault("Version")
  valid_614642 = validateParameter(valid_614642, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614642 != nil:
    section.add "Version", valid_614642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614643 = header.getOrDefault("X-Amz-Signature")
  valid_614643 = validateParameter(valid_614643, JString, required = false,
                                 default = nil)
  if valid_614643 != nil:
    section.add "X-Amz-Signature", valid_614643
  var valid_614644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614644 = validateParameter(valid_614644, JString, required = false,
                                 default = nil)
  if valid_614644 != nil:
    section.add "X-Amz-Content-Sha256", valid_614644
  var valid_614645 = header.getOrDefault("X-Amz-Date")
  valid_614645 = validateParameter(valid_614645, JString, required = false,
                                 default = nil)
  if valid_614645 != nil:
    section.add "X-Amz-Date", valid_614645
  var valid_614646 = header.getOrDefault("X-Amz-Credential")
  valid_614646 = validateParameter(valid_614646, JString, required = false,
                                 default = nil)
  if valid_614646 != nil:
    section.add "X-Amz-Credential", valid_614646
  var valid_614647 = header.getOrDefault("X-Amz-Security-Token")
  valid_614647 = validateParameter(valid_614647, JString, required = false,
                                 default = nil)
  if valid_614647 != nil:
    section.add "X-Amz-Security-Token", valid_614647
  var valid_614648 = header.getOrDefault("X-Amz-Algorithm")
  valid_614648 = validateParameter(valid_614648, JString, required = false,
                                 default = nil)
  if valid_614648 != nil:
    section.add "X-Amz-Algorithm", valid_614648
  var valid_614649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "X-Amz-SignedHeaders", valid_614649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614650: Call_PostListSAMLProviders_614638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614650.validator(path, query, header, formData, body)
  let scheme = call_614650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614650.url(scheme.get, call_614650.host, call_614650.base,
                         call_614650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614650, url, valid)

proc call*(call_614651: Call_PostListSAMLProviders_614638;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614652 = newJObject()
  add(query_614652, "Action", newJString(Action))
  add(query_614652, "Version", newJString(Version))
  result = call_614651.call(nil, query_614652, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_614638(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_614639, base: "/",
    url: url_PostListSAMLProviders_614640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_614623 = ref object of OpenApiRestCall_610658
proc url_GetListSAMLProviders_614625(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSAMLProviders_614624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614626 = query.getOrDefault("Action")
  valid_614626 = validateParameter(valid_614626, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_614626 != nil:
    section.add "Action", valid_614626
  var valid_614627 = query.getOrDefault("Version")
  valid_614627 = validateParameter(valid_614627, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614627 != nil:
    section.add "Version", valid_614627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614628 = header.getOrDefault("X-Amz-Signature")
  valid_614628 = validateParameter(valid_614628, JString, required = false,
                                 default = nil)
  if valid_614628 != nil:
    section.add "X-Amz-Signature", valid_614628
  var valid_614629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614629 = validateParameter(valid_614629, JString, required = false,
                                 default = nil)
  if valid_614629 != nil:
    section.add "X-Amz-Content-Sha256", valid_614629
  var valid_614630 = header.getOrDefault("X-Amz-Date")
  valid_614630 = validateParameter(valid_614630, JString, required = false,
                                 default = nil)
  if valid_614630 != nil:
    section.add "X-Amz-Date", valid_614630
  var valid_614631 = header.getOrDefault("X-Amz-Credential")
  valid_614631 = validateParameter(valid_614631, JString, required = false,
                                 default = nil)
  if valid_614631 != nil:
    section.add "X-Amz-Credential", valid_614631
  var valid_614632 = header.getOrDefault("X-Amz-Security-Token")
  valid_614632 = validateParameter(valid_614632, JString, required = false,
                                 default = nil)
  if valid_614632 != nil:
    section.add "X-Amz-Security-Token", valid_614632
  var valid_614633 = header.getOrDefault("X-Amz-Algorithm")
  valid_614633 = validateParameter(valid_614633, JString, required = false,
                                 default = nil)
  if valid_614633 != nil:
    section.add "X-Amz-Algorithm", valid_614633
  var valid_614634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614634 = validateParameter(valid_614634, JString, required = false,
                                 default = nil)
  if valid_614634 != nil:
    section.add "X-Amz-SignedHeaders", valid_614634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614635: Call_GetListSAMLProviders_614623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614635.validator(path, query, header, formData, body)
  let scheme = call_614635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614635.url(scheme.get, call_614635.host, call_614635.base,
                         call_614635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614635, url, valid)

proc call*(call_614636: Call_GetListSAMLProviders_614623;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614637 = newJObject()
  add(query_614637, "Action", newJString(Action))
  add(query_614637, "Version", newJString(Version))
  result = call_614636.call(nil, query_614637, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_614623(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_614624, base: "/",
    url: url_GetListSAMLProviders_614625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_614671 = ref object of OpenApiRestCall_610658
proc url_PostListSSHPublicKeys_614673(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSSHPublicKeys_614672(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614674 = query.getOrDefault("Action")
  valid_614674 = validateParameter(valid_614674, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_614674 != nil:
    section.add "Action", valid_614674
  var valid_614675 = query.getOrDefault("Version")
  valid_614675 = validateParameter(valid_614675, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614675 != nil:
    section.add "Version", valid_614675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614676 = header.getOrDefault("X-Amz-Signature")
  valid_614676 = validateParameter(valid_614676, JString, required = false,
                                 default = nil)
  if valid_614676 != nil:
    section.add "X-Amz-Signature", valid_614676
  var valid_614677 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614677 = validateParameter(valid_614677, JString, required = false,
                                 default = nil)
  if valid_614677 != nil:
    section.add "X-Amz-Content-Sha256", valid_614677
  var valid_614678 = header.getOrDefault("X-Amz-Date")
  valid_614678 = validateParameter(valid_614678, JString, required = false,
                                 default = nil)
  if valid_614678 != nil:
    section.add "X-Amz-Date", valid_614678
  var valid_614679 = header.getOrDefault("X-Amz-Credential")
  valid_614679 = validateParameter(valid_614679, JString, required = false,
                                 default = nil)
  if valid_614679 != nil:
    section.add "X-Amz-Credential", valid_614679
  var valid_614680 = header.getOrDefault("X-Amz-Security-Token")
  valid_614680 = validateParameter(valid_614680, JString, required = false,
                                 default = nil)
  if valid_614680 != nil:
    section.add "X-Amz-Security-Token", valid_614680
  var valid_614681 = header.getOrDefault("X-Amz-Algorithm")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "X-Amz-Algorithm", valid_614681
  var valid_614682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614682 = validateParameter(valid_614682, JString, required = false,
                                 default = nil)
  if valid_614682 != nil:
    section.add "X-Amz-SignedHeaders", valid_614682
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614683 = formData.getOrDefault("Marker")
  valid_614683 = validateParameter(valid_614683, JString, required = false,
                                 default = nil)
  if valid_614683 != nil:
    section.add "Marker", valid_614683
  var valid_614684 = formData.getOrDefault("UserName")
  valid_614684 = validateParameter(valid_614684, JString, required = false,
                                 default = nil)
  if valid_614684 != nil:
    section.add "UserName", valid_614684
  var valid_614685 = formData.getOrDefault("MaxItems")
  valid_614685 = validateParameter(valid_614685, JInt, required = false, default = nil)
  if valid_614685 != nil:
    section.add "MaxItems", valid_614685
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614686: Call_PostListSSHPublicKeys_614671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614686.validator(path, query, header, formData, body)
  let scheme = call_614686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614686.url(scheme.get, call_614686.host, call_614686.base,
                         call_614686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614686, url, valid)

proc call*(call_614687: Call_PostListSSHPublicKeys_614671; Marker: string = "";
          UserName: string = ""; Action: string = "ListSSHPublicKeys";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614688 = newJObject()
  var formData_614689 = newJObject()
  add(formData_614689, "Marker", newJString(Marker))
  add(formData_614689, "UserName", newJString(UserName))
  add(query_614688, "Action", newJString(Action))
  add(formData_614689, "MaxItems", newJInt(MaxItems))
  add(query_614688, "Version", newJString(Version))
  result = call_614687.call(nil, query_614688, nil, formData_614689, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_614671(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_614672, base: "/",
    url: url_PostListSSHPublicKeys_614673, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_614653 = ref object of OpenApiRestCall_610658
proc url_GetListSSHPublicKeys_614655(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSSHPublicKeys_614654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614656 = query.getOrDefault("Marker")
  valid_614656 = validateParameter(valid_614656, JString, required = false,
                                 default = nil)
  if valid_614656 != nil:
    section.add "Marker", valid_614656
  var valid_614657 = query.getOrDefault("UserName")
  valid_614657 = validateParameter(valid_614657, JString, required = false,
                                 default = nil)
  if valid_614657 != nil:
    section.add "UserName", valid_614657
  var valid_614658 = query.getOrDefault("MaxItems")
  valid_614658 = validateParameter(valid_614658, JInt, required = false, default = nil)
  if valid_614658 != nil:
    section.add "MaxItems", valid_614658
  var valid_614659 = query.getOrDefault("Action")
  valid_614659 = validateParameter(valid_614659, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_614659 != nil:
    section.add "Action", valid_614659
  var valid_614660 = query.getOrDefault("Version")
  valid_614660 = validateParameter(valid_614660, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614660 != nil:
    section.add "Version", valid_614660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614661 = header.getOrDefault("X-Amz-Signature")
  valid_614661 = validateParameter(valid_614661, JString, required = false,
                                 default = nil)
  if valid_614661 != nil:
    section.add "X-Amz-Signature", valid_614661
  var valid_614662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-Content-Sha256", valid_614662
  var valid_614663 = header.getOrDefault("X-Amz-Date")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "X-Amz-Date", valid_614663
  var valid_614664 = header.getOrDefault("X-Amz-Credential")
  valid_614664 = validateParameter(valid_614664, JString, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "X-Amz-Credential", valid_614664
  var valid_614665 = header.getOrDefault("X-Amz-Security-Token")
  valid_614665 = validateParameter(valid_614665, JString, required = false,
                                 default = nil)
  if valid_614665 != nil:
    section.add "X-Amz-Security-Token", valid_614665
  var valid_614666 = header.getOrDefault("X-Amz-Algorithm")
  valid_614666 = validateParameter(valid_614666, JString, required = false,
                                 default = nil)
  if valid_614666 != nil:
    section.add "X-Amz-Algorithm", valid_614666
  var valid_614667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614667 = validateParameter(valid_614667, JString, required = false,
                                 default = nil)
  if valid_614667 != nil:
    section.add "X-Amz-SignedHeaders", valid_614667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614668: Call_GetListSSHPublicKeys_614653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614668.validator(path, query, header, formData, body)
  let scheme = call_614668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614668.url(scheme.get, call_614668.host, call_614668.base,
                         call_614668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614668, url, valid)

proc call*(call_614669: Call_GetListSSHPublicKeys_614653; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSSHPublicKeys"; Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614670 = newJObject()
  add(query_614670, "Marker", newJString(Marker))
  add(query_614670, "UserName", newJString(UserName))
  add(query_614670, "MaxItems", newJInt(MaxItems))
  add(query_614670, "Action", newJString(Action))
  add(query_614670, "Version", newJString(Version))
  result = call_614669.call(nil, query_614670, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_614653(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_614654, base: "/",
    url: url_GetListSSHPublicKeys_614655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_614708 = ref object of OpenApiRestCall_610658
proc url_PostListServerCertificates_614710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServerCertificates_614709(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614711 = query.getOrDefault("Action")
  valid_614711 = validateParameter(valid_614711, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_614711 != nil:
    section.add "Action", valid_614711
  var valid_614712 = query.getOrDefault("Version")
  valid_614712 = validateParameter(valid_614712, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614712 != nil:
    section.add "Version", valid_614712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614713 = header.getOrDefault("X-Amz-Signature")
  valid_614713 = validateParameter(valid_614713, JString, required = false,
                                 default = nil)
  if valid_614713 != nil:
    section.add "X-Amz-Signature", valid_614713
  var valid_614714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614714 = validateParameter(valid_614714, JString, required = false,
                                 default = nil)
  if valid_614714 != nil:
    section.add "X-Amz-Content-Sha256", valid_614714
  var valid_614715 = header.getOrDefault("X-Amz-Date")
  valid_614715 = validateParameter(valid_614715, JString, required = false,
                                 default = nil)
  if valid_614715 != nil:
    section.add "X-Amz-Date", valid_614715
  var valid_614716 = header.getOrDefault("X-Amz-Credential")
  valid_614716 = validateParameter(valid_614716, JString, required = false,
                                 default = nil)
  if valid_614716 != nil:
    section.add "X-Amz-Credential", valid_614716
  var valid_614717 = header.getOrDefault("X-Amz-Security-Token")
  valid_614717 = validateParameter(valid_614717, JString, required = false,
                                 default = nil)
  if valid_614717 != nil:
    section.add "X-Amz-Security-Token", valid_614717
  var valid_614718 = header.getOrDefault("X-Amz-Algorithm")
  valid_614718 = validateParameter(valid_614718, JString, required = false,
                                 default = nil)
  if valid_614718 != nil:
    section.add "X-Amz-Algorithm", valid_614718
  var valid_614719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614719 = validateParameter(valid_614719, JString, required = false,
                                 default = nil)
  if valid_614719 != nil:
    section.add "X-Amz-SignedHeaders", valid_614719
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614720 = formData.getOrDefault("Marker")
  valid_614720 = validateParameter(valid_614720, JString, required = false,
                                 default = nil)
  if valid_614720 != nil:
    section.add "Marker", valid_614720
  var valid_614721 = formData.getOrDefault("PathPrefix")
  valid_614721 = validateParameter(valid_614721, JString, required = false,
                                 default = nil)
  if valid_614721 != nil:
    section.add "PathPrefix", valid_614721
  var valid_614722 = formData.getOrDefault("MaxItems")
  valid_614722 = validateParameter(valid_614722, JInt, required = false, default = nil)
  if valid_614722 != nil:
    section.add "MaxItems", valid_614722
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614723: Call_PostListServerCertificates_614708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_614723.validator(path, query, header, formData, body)
  let scheme = call_614723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614723.url(scheme.get, call_614723.host, call_614723.base,
                         call_614723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614723, url, valid)

proc call*(call_614724: Call_PostListServerCertificates_614708;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614725 = newJObject()
  var formData_614726 = newJObject()
  add(formData_614726, "Marker", newJString(Marker))
  add(formData_614726, "PathPrefix", newJString(PathPrefix))
  add(formData_614726, "MaxItems", newJInt(MaxItems))
  add(query_614725, "Action", newJString(Action))
  add(query_614725, "Version", newJString(Version))
  result = call_614724.call(nil, query_614725, nil, formData_614726, nil)

var postListServerCertificates* = Call_PostListServerCertificates_614708(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_614709, base: "/",
    url: url_PostListServerCertificates_614710,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_614690 = ref object of OpenApiRestCall_610658
proc url_GetListServerCertificates_614692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServerCertificates_614691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614693 = query.getOrDefault("Marker")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "Marker", valid_614693
  var valid_614694 = query.getOrDefault("MaxItems")
  valid_614694 = validateParameter(valid_614694, JInt, required = false, default = nil)
  if valid_614694 != nil:
    section.add "MaxItems", valid_614694
  var valid_614695 = query.getOrDefault("PathPrefix")
  valid_614695 = validateParameter(valid_614695, JString, required = false,
                                 default = nil)
  if valid_614695 != nil:
    section.add "PathPrefix", valid_614695
  var valid_614696 = query.getOrDefault("Action")
  valid_614696 = validateParameter(valid_614696, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_614696 != nil:
    section.add "Action", valid_614696
  var valid_614697 = query.getOrDefault("Version")
  valid_614697 = validateParameter(valid_614697, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614697 != nil:
    section.add "Version", valid_614697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614698 = header.getOrDefault("X-Amz-Signature")
  valid_614698 = validateParameter(valid_614698, JString, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "X-Amz-Signature", valid_614698
  var valid_614699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614699 = validateParameter(valid_614699, JString, required = false,
                                 default = nil)
  if valid_614699 != nil:
    section.add "X-Amz-Content-Sha256", valid_614699
  var valid_614700 = header.getOrDefault("X-Amz-Date")
  valid_614700 = validateParameter(valid_614700, JString, required = false,
                                 default = nil)
  if valid_614700 != nil:
    section.add "X-Amz-Date", valid_614700
  var valid_614701 = header.getOrDefault("X-Amz-Credential")
  valid_614701 = validateParameter(valid_614701, JString, required = false,
                                 default = nil)
  if valid_614701 != nil:
    section.add "X-Amz-Credential", valid_614701
  var valid_614702 = header.getOrDefault("X-Amz-Security-Token")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "X-Amz-Security-Token", valid_614702
  var valid_614703 = header.getOrDefault("X-Amz-Algorithm")
  valid_614703 = validateParameter(valid_614703, JString, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "X-Amz-Algorithm", valid_614703
  var valid_614704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614704 = validateParameter(valid_614704, JString, required = false,
                                 default = nil)
  if valid_614704 != nil:
    section.add "X-Amz-SignedHeaders", valid_614704
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614705: Call_GetListServerCertificates_614690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_614705.validator(path, query, header, formData, body)
  let scheme = call_614705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614705.url(scheme.get, call_614705.host, call_614705.base,
                         call_614705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614705, url, valid)

proc call*(call_614706: Call_GetListServerCertificates_614690; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614707 = newJObject()
  add(query_614707, "Marker", newJString(Marker))
  add(query_614707, "MaxItems", newJInt(MaxItems))
  add(query_614707, "PathPrefix", newJString(PathPrefix))
  add(query_614707, "Action", newJString(Action))
  add(query_614707, "Version", newJString(Version))
  result = call_614706.call(nil, query_614707, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_614690(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_614691, base: "/",
    url: url_GetListServerCertificates_614692,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_614744 = ref object of OpenApiRestCall_610658
proc url_PostListServiceSpecificCredentials_614746(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServiceSpecificCredentials_614745(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614747 = query.getOrDefault("Action")
  valid_614747 = validateParameter(valid_614747, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_614747 != nil:
    section.add "Action", valid_614747
  var valid_614748 = query.getOrDefault("Version")
  valid_614748 = validateParameter(valid_614748, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614748 != nil:
    section.add "Version", valid_614748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614749 = header.getOrDefault("X-Amz-Signature")
  valid_614749 = validateParameter(valid_614749, JString, required = false,
                                 default = nil)
  if valid_614749 != nil:
    section.add "X-Amz-Signature", valid_614749
  var valid_614750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614750 = validateParameter(valid_614750, JString, required = false,
                                 default = nil)
  if valid_614750 != nil:
    section.add "X-Amz-Content-Sha256", valid_614750
  var valid_614751 = header.getOrDefault("X-Amz-Date")
  valid_614751 = validateParameter(valid_614751, JString, required = false,
                                 default = nil)
  if valid_614751 != nil:
    section.add "X-Amz-Date", valid_614751
  var valid_614752 = header.getOrDefault("X-Amz-Credential")
  valid_614752 = validateParameter(valid_614752, JString, required = false,
                                 default = nil)
  if valid_614752 != nil:
    section.add "X-Amz-Credential", valid_614752
  var valid_614753 = header.getOrDefault("X-Amz-Security-Token")
  valid_614753 = validateParameter(valid_614753, JString, required = false,
                                 default = nil)
  if valid_614753 != nil:
    section.add "X-Amz-Security-Token", valid_614753
  var valid_614754 = header.getOrDefault("X-Amz-Algorithm")
  valid_614754 = validateParameter(valid_614754, JString, required = false,
                                 default = nil)
  if valid_614754 != nil:
    section.add "X-Amz-Algorithm", valid_614754
  var valid_614755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614755 = validateParameter(valid_614755, JString, required = false,
                                 default = nil)
  if valid_614755 != nil:
    section.add "X-Amz-SignedHeaders", valid_614755
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_614756 = formData.getOrDefault("ServiceName")
  valid_614756 = validateParameter(valid_614756, JString, required = false,
                                 default = nil)
  if valid_614756 != nil:
    section.add "ServiceName", valid_614756
  var valid_614757 = formData.getOrDefault("UserName")
  valid_614757 = validateParameter(valid_614757, JString, required = false,
                                 default = nil)
  if valid_614757 != nil:
    section.add "UserName", valid_614757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614758: Call_PostListServiceSpecificCredentials_614744;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_614758.validator(path, query, header, formData, body)
  let scheme = call_614758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614758.url(scheme.get, call_614758.host, call_614758.base,
                         call_614758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614758, url, valid)

proc call*(call_614759: Call_PostListServiceSpecificCredentials_614744;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614760 = newJObject()
  var formData_614761 = newJObject()
  add(formData_614761, "ServiceName", newJString(ServiceName))
  add(formData_614761, "UserName", newJString(UserName))
  add(query_614760, "Action", newJString(Action))
  add(query_614760, "Version", newJString(Version))
  result = call_614759.call(nil, query_614760, nil, formData_614761, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_614744(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_614745, base: "/",
    url: url_PostListServiceSpecificCredentials_614746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_614727 = ref object of OpenApiRestCall_610658
proc url_GetListServiceSpecificCredentials_614729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServiceSpecificCredentials_614728(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614730 = query.getOrDefault("UserName")
  valid_614730 = validateParameter(valid_614730, JString, required = false,
                                 default = nil)
  if valid_614730 != nil:
    section.add "UserName", valid_614730
  var valid_614731 = query.getOrDefault("ServiceName")
  valid_614731 = validateParameter(valid_614731, JString, required = false,
                                 default = nil)
  if valid_614731 != nil:
    section.add "ServiceName", valid_614731
  var valid_614732 = query.getOrDefault("Action")
  valid_614732 = validateParameter(valid_614732, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_614732 != nil:
    section.add "Action", valid_614732
  var valid_614733 = query.getOrDefault("Version")
  valid_614733 = validateParameter(valid_614733, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614733 != nil:
    section.add "Version", valid_614733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614734 = header.getOrDefault("X-Amz-Signature")
  valid_614734 = validateParameter(valid_614734, JString, required = false,
                                 default = nil)
  if valid_614734 != nil:
    section.add "X-Amz-Signature", valid_614734
  var valid_614735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614735 = validateParameter(valid_614735, JString, required = false,
                                 default = nil)
  if valid_614735 != nil:
    section.add "X-Amz-Content-Sha256", valid_614735
  var valid_614736 = header.getOrDefault("X-Amz-Date")
  valid_614736 = validateParameter(valid_614736, JString, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "X-Amz-Date", valid_614736
  var valid_614737 = header.getOrDefault("X-Amz-Credential")
  valid_614737 = validateParameter(valid_614737, JString, required = false,
                                 default = nil)
  if valid_614737 != nil:
    section.add "X-Amz-Credential", valid_614737
  var valid_614738 = header.getOrDefault("X-Amz-Security-Token")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Security-Token", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Algorithm")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Algorithm", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-SignedHeaders", valid_614740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614741: Call_GetListServiceSpecificCredentials_614727;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_614741.validator(path, query, header, formData, body)
  let scheme = call_614741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614741.url(scheme.get, call_614741.host, call_614741.base,
                         call_614741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614741, url, valid)

proc call*(call_614742: Call_GetListServiceSpecificCredentials_614727;
          UserName: string = ""; ServiceName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614743 = newJObject()
  add(query_614743, "UserName", newJString(UserName))
  add(query_614743, "ServiceName", newJString(ServiceName))
  add(query_614743, "Action", newJString(Action))
  add(query_614743, "Version", newJString(Version))
  result = call_614742.call(nil, query_614743, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_614727(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_614728, base: "/",
    url: url_GetListServiceSpecificCredentials_614729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_614780 = ref object of OpenApiRestCall_610658
proc url_PostListSigningCertificates_614782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSigningCertificates_614781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614783 = query.getOrDefault("Action")
  valid_614783 = validateParameter(valid_614783, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_614783 != nil:
    section.add "Action", valid_614783
  var valid_614784 = query.getOrDefault("Version")
  valid_614784 = validateParameter(valid_614784, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614784 != nil:
    section.add "Version", valid_614784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614785 = header.getOrDefault("X-Amz-Signature")
  valid_614785 = validateParameter(valid_614785, JString, required = false,
                                 default = nil)
  if valid_614785 != nil:
    section.add "X-Amz-Signature", valid_614785
  var valid_614786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614786 = validateParameter(valid_614786, JString, required = false,
                                 default = nil)
  if valid_614786 != nil:
    section.add "X-Amz-Content-Sha256", valid_614786
  var valid_614787 = header.getOrDefault("X-Amz-Date")
  valid_614787 = validateParameter(valid_614787, JString, required = false,
                                 default = nil)
  if valid_614787 != nil:
    section.add "X-Amz-Date", valid_614787
  var valid_614788 = header.getOrDefault("X-Amz-Credential")
  valid_614788 = validateParameter(valid_614788, JString, required = false,
                                 default = nil)
  if valid_614788 != nil:
    section.add "X-Amz-Credential", valid_614788
  var valid_614789 = header.getOrDefault("X-Amz-Security-Token")
  valid_614789 = validateParameter(valid_614789, JString, required = false,
                                 default = nil)
  if valid_614789 != nil:
    section.add "X-Amz-Security-Token", valid_614789
  var valid_614790 = header.getOrDefault("X-Amz-Algorithm")
  valid_614790 = validateParameter(valid_614790, JString, required = false,
                                 default = nil)
  if valid_614790 != nil:
    section.add "X-Amz-Algorithm", valid_614790
  var valid_614791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614791 = validateParameter(valid_614791, JString, required = false,
                                 default = nil)
  if valid_614791 != nil:
    section.add "X-Amz-SignedHeaders", valid_614791
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614792 = formData.getOrDefault("Marker")
  valid_614792 = validateParameter(valid_614792, JString, required = false,
                                 default = nil)
  if valid_614792 != nil:
    section.add "Marker", valid_614792
  var valid_614793 = formData.getOrDefault("UserName")
  valid_614793 = validateParameter(valid_614793, JString, required = false,
                                 default = nil)
  if valid_614793 != nil:
    section.add "UserName", valid_614793
  var valid_614794 = formData.getOrDefault("MaxItems")
  valid_614794 = validateParameter(valid_614794, JInt, required = false, default = nil)
  if valid_614794 != nil:
    section.add "MaxItems", valid_614794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614795: Call_PostListSigningCertificates_614780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_614795.validator(path, query, header, formData, body)
  let scheme = call_614795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614795.url(scheme.get, call_614795.host, call_614795.base,
                         call_614795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614795, url, valid)

proc call*(call_614796: Call_PostListSigningCertificates_614780;
          Marker: string = ""; UserName: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614797 = newJObject()
  var formData_614798 = newJObject()
  add(formData_614798, "Marker", newJString(Marker))
  add(formData_614798, "UserName", newJString(UserName))
  add(query_614797, "Action", newJString(Action))
  add(formData_614798, "MaxItems", newJInt(MaxItems))
  add(query_614797, "Version", newJString(Version))
  result = call_614796.call(nil, query_614797, nil, formData_614798, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_614780(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_614781, base: "/",
    url: url_PostListSigningCertificates_614782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_614762 = ref object of OpenApiRestCall_610658
proc url_GetListSigningCertificates_614764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSigningCertificates_614763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614765 = query.getOrDefault("Marker")
  valid_614765 = validateParameter(valid_614765, JString, required = false,
                                 default = nil)
  if valid_614765 != nil:
    section.add "Marker", valid_614765
  var valid_614766 = query.getOrDefault("UserName")
  valid_614766 = validateParameter(valid_614766, JString, required = false,
                                 default = nil)
  if valid_614766 != nil:
    section.add "UserName", valid_614766
  var valid_614767 = query.getOrDefault("MaxItems")
  valid_614767 = validateParameter(valid_614767, JInt, required = false, default = nil)
  if valid_614767 != nil:
    section.add "MaxItems", valid_614767
  var valid_614768 = query.getOrDefault("Action")
  valid_614768 = validateParameter(valid_614768, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_614768 != nil:
    section.add "Action", valid_614768
  var valid_614769 = query.getOrDefault("Version")
  valid_614769 = validateParameter(valid_614769, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614769 != nil:
    section.add "Version", valid_614769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614770 = header.getOrDefault("X-Amz-Signature")
  valid_614770 = validateParameter(valid_614770, JString, required = false,
                                 default = nil)
  if valid_614770 != nil:
    section.add "X-Amz-Signature", valid_614770
  var valid_614771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "X-Amz-Content-Sha256", valid_614771
  var valid_614772 = header.getOrDefault("X-Amz-Date")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "X-Amz-Date", valid_614772
  var valid_614773 = header.getOrDefault("X-Amz-Credential")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = nil)
  if valid_614773 != nil:
    section.add "X-Amz-Credential", valid_614773
  var valid_614774 = header.getOrDefault("X-Amz-Security-Token")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Security-Token", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-Algorithm")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-Algorithm", valid_614775
  var valid_614776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614776 = validateParameter(valid_614776, JString, required = false,
                                 default = nil)
  if valid_614776 != nil:
    section.add "X-Amz-SignedHeaders", valid_614776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614777: Call_GetListSigningCertificates_614762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_614777.validator(path, query, header, formData, body)
  let scheme = call_614777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614777.url(scheme.get, call_614777.host, call_614777.base,
                         call_614777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614777, url, valid)

proc call*(call_614778: Call_GetListSigningCertificates_614762;
          Marker: string = ""; UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSigningCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614779 = newJObject()
  add(query_614779, "Marker", newJString(Marker))
  add(query_614779, "UserName", newJString(UserName))
  add(query_614779, "MaxItems", newJInt(MaxItems))
  add(query_614779, "Action", newJString(Action))
  add(query_614779, "Version", newJString(Version))
  result = call_614778.call(nil, query_614779, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_614762(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_614763, base: "/",
    url: url_GetListSigningCertificates_614764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_614817 = ref object of OpenApiRestCall_610658
proc url_PostListUserPolicies_614819(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserPolicies_614818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614820 = query.getOrDefault("Action")
  valid_614820 = validateParameter(valid_614820, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_614820 != nil:
    section.add "Action", valid_614820
  var valid_614821 = query.getOrDefault("Version")
  valid_614821 = validateParameter(valid_614821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614821 != nil:
    section.add "Version", valid_614821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614822 = header.getOrDefault("X-Amz-Signature")
  valid_614822 = validateParameter(valid_614822, JString, required = false,
                                 default = nil)
  if valid_614822 != nil:
    section.add "X-Amz-Signature", valid_614822
  var valid_614823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614823 = validateParameter(valid_614823, JString, required = false,
                                 default = nil)
  if valid_614823 != nil:
    section.add "X-Amz-Content-Sha256", valid_614823
  var valid_614824 = header.getOrDefault("X-Amz-Date")
  valid_614824 = validateParameter(valid_614824, JString, required = false,
                                 default = nil)
  if valid_614824 != nil:
    section.add "X-Amz-Date", valid_614824
  var valid_614825 = header.getOrDefault("X-Amz-Credential")
  valid_614825 = validateParameter(valid_614825, JString, required = false,
                                 default = nil)
  if valid_614825 != nil:
    section.add "X-Amz-Credential", valid_614825
  var valid_614826 = header.getOrDefault("X-Amz-Security-Token")
  valid_614826 = validateParameter(valid_614826, JString, required = false,
                                 default = nil)
  if valid_614826 != nil:
    section.add "X-Amz-Security-Token", valid_614826
  var valid_614827 = header.getOrDefault("X-Amz-Algorithm")
  valid_614827 = validateParameter(valid_614827, JString, required = false,
                                 default = nil)
  if valid_614827 != nil:
    section.add "X-Amz-Algorithm", valid_614827
  var valid_614828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-SignedHeaders", valid_614828
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614829 = formData.getOrDefault("Marker")
  valid_614829 = validateParameter(valid_614829, JString, required = false,
                                 default = nil)
  if valid_614829 != nil:
    section.add "Marker", valid_614829
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614830 = formData.getOrDefault("UserName")
  valid_614830 = validateParameter(valid_614830, JString, required = true,
                                 default = nil)
  if valid_614830 != nil:
    section.add "UserName", valid_614830
  var valid_614831 = formData.getOrDefault("MaxItems")
  valid_614831 = validateParameter(valid_614831, JInt, required = false, default = nil)
  if valid_614831 != nil:
    section.add "MaxItems", valid_614831
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614832: Call_PostListUserPolicies_614817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_614832.validator(path, query, header, formData, body)
  let scheme = call_614832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614832.url(scheme.get, call_614832.host, call_614832.base,
                         call_614832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614832, url, valid)

proc call*(call_614833: Call_PostListUserPolicies_614817; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614834 = newJObject()
  var formData_614835 = newJObject()
  add(formData_614835, "Marker", newJString(Marker))
  add(formData_614835, "UserName", newJString(UserName))
  add(query_614834, "Action", newJString(Action))
  add(formData_614835, "MaxItems", newJInt(MaxItems))
  add(query_614834, "Version", newJString(Version))
  result = call_614833.call(nil, query_614834, nil, formData_614835, nil)

var postListUserPolicies* = Call_PostListUserPolicies_614817(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_614818, base: "/",
    url: url_PostListUserPolicies_614819, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_614799 = ref object of OpenApiRestCall_610658
proc url_GetListUserPolicies_614801(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserPolicies_614800(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614802 = query.getOrDefault("Marker")
  valid_614802 = validateParameter(valid_614802, JString, required = false,
                                 default = nil)
  if valid_614802 != nil:
    section.add "Marker", valid_614802
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614803 = query.getOrDefault("UserName")
  valid_614803 = validateParameter(valid_614803, JString, required = true,
                                 default = nil)
  if valid_614803 != nil:
    section.add "UserName", valid_614803
  var valid_614804 = query.getOrDefault("MaxItems")
  valid_614804 = validateParameter(valid_614804, JInt, required = false, default = nil)
  if valid_614804 != nil:
    section.add "MaxItems", valid_614804
  var valid_614805 = query.getOrDefault("Action")
  valid_614805 = validateParameter(valid_614805, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_614805 != nil:
    section.add "Action", valid_614805
  var valid_614806 = query.getOrDefault("Version")
  valid_614806 = validateParameter(valid_614806, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614806 != nil:
    section.add "Version", valid_614806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614807 = header.getOrDefault("X-Amz-Signature")
  valid_614807 = validateParameter(valid_614807, JString, required = false,
                                 default = nil)
  if valid_614807 != nil:
    section.add "X-Amz-Signature", valid_614807
  var valid_614808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614808 = validateParameter(valid_614808, JString, required = false,
                                 default = nil)
  if valid_614808 != nil:
    section.add "X-Amz-Content-Sha256", valid_614808
  var valid_614809 = header.getOrDefault("X-Amz-Date")
  valid_614809 = validateParameter(valid_614809, JString, required = false,
                                 default = nil)
  if valid_614809 != nil:
    section.add "X-Amz-Date", valid_614809
  var valid_614810 = header.getOrDefault("X-Amz-Credential")
  valid_614810 = validateParameter(valid_614810, JString, required = false,
                                 default = nil)
  if valid_614810 != nil:
    section.add "X-Amz-Credential", valid_614810
  var valid_614811 = header.getOrDefault("X-Amz-Security-Token")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Security-Token", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Algorithm")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Algorithm", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-SignedHeaders", valid_614813
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614814: Call_GetListUserPolicies_614799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_614814.validator(path, query, header, formData, body)
  let scheme = call_614814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614814.url(scheme.get, call_614814.host, call_614814.base,
                         call_614814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614814, url, valid)

proc call*(call_614815: Call_GetListUserPolicies_614799; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614816 = newJObject()
  add(query_614816, "Marker", newJString(Marker))
  add(query_614816, "UserName", newJString(UserName))
  add(query_614816, "MaxItems", newJInt(MaxItems))
  add(query_614816, "Action", newJString(Action))
  add(query_614816, "Version", newJString(Version))
  result = call_614815.call(nil, query_614816, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_614799(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_614800, base: "/",
    url: url_GetListUserPolicies_614801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_614854 = ref object of OpenApiRestCall_610658
proc url_PostListUserTags_614856(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserTags_614855(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614857 = query.getOrDefault("Action")
  valid_614857 = validateParameter(valid_614857, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_614857 != nil:
    section.add "Action", valid_614857
  var valid_614858 = query.getOrDefault("Version")
  valid_614858 = validateParameter(valid_614858, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614858 != nil:
    section.add "Version", valid_614858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614859 = header.getOrDefault("X-Amz-Signature")
  valid_614859 = validateParameter(valid_614859, JString, required = false,
                                 default = nil)
  if valid_614859 != nil:
    section.add "X-Amz-Signature", valid_614859
  var valid_614860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614860 = validateParameter(valid_614860, JString, required = false,
                                 default = nil)
  if valid_614860 != nil:
    section.add "X-Amz-Content-Sha256", valid_614860
  var valid_614861 = header.getOrDefault("X-Amz-Date")
  valid_614861 = validateParameter(valid_614861, JString, required = false,
                                 default = nil)
  if valid_614861 != nil:
    section.add "X-Amz-Date", valid_614861
  var valid_614862 = header.getOrDefault("X-Amz-Credential")
  valid_614862 = validateParameter(valid_614862, JString, required = false,
                                 default = nil)
  if valid_614862 != nil:
    section.add "X-Amz-Credential", valid_614862
  var valid_614863 = header.getOrDefault("X-Amz-Security-Token")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-Security-Token", valid_614863
  var valid_614864 = header.getOrDefault("X-Amz-Algorithm")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "X-Amz-Algorithm", valid_614864
  var valid_614865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "X-Amz-SignedHeaders", valid_614865
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614866 = formData.getOrDefault("Marker")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "Marker", valid_614866
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614867 = formData.getOrDefault("UserName")
  valid_614867 = validateParameter(valid_614867, JString, required = true,
                                 default = nil)
  if valid_614867 != nil:
    section.add "UserName", valid_614867
  var valid_614868 = formData.getOrDefault("MaxItems")
  valid_614868 = validateParameter(valid_614868, JInt, required = false, default = nil)
  if valid_614868 != nil:
    section.add "MaxItems", valid_614868
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614869: Call_PostListUserTags_614854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614869.validator(path, query, header, formData, body)
  let scheme = call_614869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614869.url(scheme.get, call_614869.host, call_614869.base,
                         call_614869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614869, url, valid)

proc call*(call_614870: Call_PostListUserTags_614854; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614871 = newJObject()
  var formData_614872 = newJObject()
  add(formData_614872, "Marker", newJString(Marker))
  add(formData_614872, "UserName", newJString(UserName))
  add(query_614871, "Action", newJString(Action))
  add(formData_614872, "MaxItems", newJInt(MaxItems))
  add(query_614871, "Version", newJString(Version))
  result = call_614870.call(nil, query_614871, nil, formData_614872, nil)

var postListUserTags* = Call_PostListUserTags_614854(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_614855,
    base: "/", url: url_PostListUserTags_614856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_614836 = ref object of OpenApiRestCall_610658
proc url_GetListUserTags_614838(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserTags_614837(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614839 = query.getOrDefault("Marker")
  valid_614839 = validateParameter(valid_614839, JString, required = false,
                                 default = nil)
  if valid_614839 != nil:
    section.add "Marker", valid_614839
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614840 = query.getOrDefault("UserName")
  valid_614840 = validateParameter(valid_614840, JString, required = true,
                                 default = nil)
  if valid_614840 != nil:
    section.add "UserName", valid_614840
  var valid_614841 = query.getOrDefault("MaxItems")
  valid_614841 = validateParameter(valid_614841, JInt, required = false, default = nil)
  if valid_614841 != nil:
    section.add "MaxItems", valid_614841
  var valid_614842 = query.getOrDefault("Action")
  valid_614842 = validateParameter(valid_614842, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_614842 != nil:
    section.add "Action", valid_614842
  var valid_614843 = query.getOrDefault("Version")
  valid_614843 = validateParameter(valid_614843, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614843 != nil:
    section.add "Version", valid_614843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614844 = header.getOrDefault("X-Amz-Signature")
  valid_614844 = validateParameter(valid_614844, JString, required = false,
                                 default = nil)
  if valid_614844 != nil:
    section.add "X-Amz-Signature", valid_614844
  var valid_614845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614845 = validateParameter(valid_614845, JString, required = false,
                                 default = nil)
  if valid_614845 != nil:
    section.add "X-Amz-Content-Sha256", valid_614845
  var valid_614846 = header.getOrDefault("X-Amz-Date")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "X-Amz-Date", valid_614846
  var valid_614847 = header.getOrDefault("X-Amz-Credential")
  valid_614847 = validateParameter(valid_614847, JString, required = false,
                                 default = nil)
  if valid_614847 != nil:
    section.add "X-Amz-Credential", valid_614847
  var valid_614848 = header.getOrDefault("X-Amz-Security-Token")
  valid_614848 = validateParameter(valid_614848, JString, required = false,
                                 default = nil)
  if valid_614848 != nil:
    section.add "X-Amz-Security-Token", valid_614848
  var valid_614849 = header.getOrDefault("X-Amz-Algorithm")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-Algorithm", valid_614849
  var valid_614850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "X-Amz-SignedHeaders", valid_614850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614851: Call_GetListUserTags_614836; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614851.validator(path, query, header, formData, body)
  let scheme = call_614851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614851.url(scheme.get, call_614851.host, call_614851.base,
                         call_614851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614851, url, valid)

proc call*(call_614852: Call_GetListUserTags_614836; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614853 = newJObject()
  add(query_614853, "Marker", newJString(Marker))
  add(query_614853, "UserName", newJString(UserName))
  add(query_614853, "MaxItems", newJInt(MaxItems))
  add(query_614853, "Action", newJString(Action))
  add(query_614853, "Version", newJString(Version))
  result = call_614852.call(nil, query_614853, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_614836(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_614837,
    base: "/", url: url_GetListUserTags_614838, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_614891 = ref object of OpenApiRestCall_610658
proc url_PostListUsers_614893(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUsers_614892(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614894 = query.getOrDefault("Action")
  valid_614894 = validateParameter(valid_614894, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_614894 != nil:
    section.add "Action", valid_614894
  var valid_614895 = query.getOrDefault("Version")
  valid_614895 = validateParameter(valid_614895, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614895 != nil:
    section.add "Version", valid_614895
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614896 = header.getOrDefault("X-Amz-Signature")
  valid_614896 = validateParameter(valid_614896, JString, required = false,
                                 default = nil)
  if valid_614896 != nil:
    section.add "X-Amz-Signature", valid_614896
  var valid_614897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614897 = validateParameter(valid_614897, JString, required = false,
                                 default = nil)
  if valid_614897 != nil:
    section.add "X-Amz-Content-Sha256", valid_614897
  var valid_614898 = header.getOrDefault("X-Amz-Date")
  valid_614898 = validateParameter(valid_614898, JString, required = false,
                                 default = nil)
  if valid_614898 != nil:
    section.add "X-Amz-Date", valid_614898
  var valid_614899 = header.getOrDefault("X-Amz-Credential")
  valid_614899 = validateParameter(valid_614899, JString, required = false,
                                 default = nil)
  if valid_614899 != nil:
    section.add "X-Amz-Credential", valid_614899
  var valid_614900 = header.getOrDefault("X-Amz-Security-Token")
  valid_614900 = validateParameter(valid_614900, JString, required = false,
                                 default = nil)
  if valid_614900 != nil:
    section.add "X-Amz-Security-Token", valid_614900
  var valid_614901 = header.getOrDefault("X-Amz-Algorithm")
  valid_614901 = validateParameter(valid_614901, JString, required = false,
                                 default = nil)
  if valid_614901 != nil:
    section.add "X-Amz-Algorithm", valid_614901
  var valid_614902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614902 = validateParameter(valid_614902, JString, required = false,
                                 default = nil)
  if valid_614902 != nil:
    section.add "X-Amz-SignedHeaders", valid_614902
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614903 = formData.getOrDefault("Marker")
  valid_614903 = validateParameter(valid_614903, JString, required = false,
                                 default = nil)
  if valid_614903 != nil:
    section.add "Marker", valid_614903
  var valid_614904 = formData.getOrDefault("PathPrefix")
  valid_614904 = validateParameter(valid_614904, JString, required = false,
                                 default = nil)
  if valid_614904 != nil:
    section.add "PathPrefix", valid_614904
  var valid_614905 = formData.getOrDefault("MaxItems")
  valid_614905 = validateParameter(valid_614905, JInt, required = false, default = nil)
  if valid_614905 != nil:
    section.add "MaxItems", valid_614905
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614906: Call_PostListUsers_614891; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614906.validator(path, query, header, formData, body)
  let scheme = call_614906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614906.url(scheme.get, call_614906.host, call_614906.base,
                         call_614906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614906, url, valid)

proc call*(call_614907: Call_PostListUsers_614891; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614908 = newJObject()
  var formData_614909 = newJObject()
  add(formData_614909, "Marker", newJString(Marker))
  add(formData_614909, "PathPrefix", newJString(PathPrefix))
  add(formData_614909, "MaxItems", newJInt(MaxItems))
  add(query_614908, "Action", newJString(Action))
  add(query_614908, "Version", newJString(Version))
  result = call_614907.call(nil, query_614908, nil, formData_614909, nil)

var postListUsers* = Call_PostListUsers_614891(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_614892,
    base: "/", url: url_PostListUsers_614893, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_614873 = ref object of OpenApiRestCall_610658
proc url_GetListUsers_614875(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUsers_614874(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614876 = query.getOrDefault("Marker")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "Marker", valid_614876
  var valid_614877 = query.getOrDefault("MaxItems")
  valid_614877 = validateParameter(valid_614877, JInt, required = false, default = nil)
  if valid_614877 != nil:
    section.add "MaxItems", valid_614877
  var valid_614878 = query.getOrDefault("PathPrefix")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "PathPrefix", valid_614878
  var valid_614879 = query.getOrDefault("Action")
  valid_614879 = validateParameter(valid_614879, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_614879 != nil:
    section.add "Action", valid_614879
  var valid_614880 = query.getOrDefault("Version")
  valid_614880 = validateParameter(valid_614880, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614880 != nil:
    section.add "Version", valid_614880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614881 = header.getOrDefault("X-Amz-Signature")
  valid_614881 = validateParameter(valid_614881, JString, required = false,
                                 default = nil)
  if valid_614881 != nil:
    section.add "X-Amz-Signature", valid_614881
  var valid_614882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614882 = validateParameter(valid_614882, JString, required = false,
                                 default = nil)
  if valid_614882 != nil:
    section.add "X-Amz-Content-Sha256", valid_614882
  var valid_614883 = header.getOrDefault("X-Amz-Date")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "X-Amz-Date", valid_614883
  var valid_614884 = header.getOrDefault("X-Amz-Credential")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = nil)
  if valid_614884 != nil:
    section.add "X-Amz-Credential", valid_614884
  var valid_614885 = header.getOrDefault("X-Amz-Security-Token")
  valid_614885 = validateParameter(valid_614885, JString, required = false,
                                 default = nil)
  if valid_614885 != nil:
    section.add "X-Amz-Security-Token", valid_614885
  var valid_614886 = header.getOrDefault("X-Amz-Algorithm")
  valid_614886 = validateParameter(valid_614886, JString, required = false,
                                 default = nil)
  if valid_614886 != nil:
    section.add "X-Amz-Algorithm", valid_614886
  var valid_614887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614887 = validateParameter(valid_614887, JString, required = false,
                                 default = nil)
  if valid_614887 != nil:
    section.add "X-Amz-SignedHeaders", valid_614887
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614888: Call_GetListUsers_614873; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614888.validator(path, query, header, formData, body)
  let scheme = call_614888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614888.url(scheme.get, call_614888.host, call_614888.base,
                         call_614888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614888, url, valid)

proc call*(call_614889: Call_GetListUsers_614873; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614890 = newJObject()
  add(query_614890, "Marker", newJString(Marker))
  add(query_614890, "MaxItems", newJInt(MaxItems))
  add(query_614890, "PathPrefix", newJString(PathPrefix))
  add(query_614890, "Action", newJString(Action))
  add(query_614890, "Version", newJString(Version))
  result = call_614889.call(nil, query_614890, nil, nil, nil)

var getListUsers* = Call_GetListUsers_614873(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_614874, base: "/",
    url: url_GetListUsers_614875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_614928 = ref object of OpenApiRestCall_610658
proc url_PostListVirtualMFADevices_614930(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVirtualMFADevices_614929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614931 = query.getOrDefault("Action")
  valid_614931 = validateParameter(valid_614931, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_614931 != nil:
    section.add "Action", valid_614931
  var valid_614932 = query.getOrDefault("Version")
  valid_614932 = validateParameter(valid_614932, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614932 != nil:
    section.add "Version", valid_614932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614933 = header.getOrDefault("X-Amz-Signature")
  valid_614933 = validateParameter(valid_614933, JString, required = false,
                                 default = nil)
  if valid_614933 != nil:
    section.add "X-Amz-Signature", valid_614933
  var valid_614934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614934 = validateParameter(valid_614934, JString, required = false,
                                 default = nil)
  if valid_614934 != nil:
    section.add "X-Amz-Content-Sha256", valid_614934
  var valid_614935 = header.getOrDefault("X-Amz-Date")
  valid_614935 = validateParameter(valid_614935, JString, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "X-Amz-Date", valid_614935
  var valid_614936 = header.getOrDefault("X-Amz-Credential")
  valid_614936 = validateParameter(valid_614936, JString, required = false,
                                 default = nil)
  if valid_614936 != nil:
    section.add "X-Amz-Credential", valid_614936
  var valid_614937 = header.getOrDefault("X-Amz-Security-Token")
  valid_614937 = validateParameter(valid_614937, JString, required = false,
                                 default = nil)
  if valid_614937 != nil:
    section.add "X-Amz-Security-Token", valid_614937
  var valid_614938 = header.getOrDefault("X-Amz-Algorithm")
  valid_614938 = validateParameter(valid_614938, JString, required = false,
                                 default = nil)
  if valid_614938 != nil:
    section.add "X-Amz-Algorithm", valid_614938
  var valid_614939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614939 = validateParameter(valid_614939, JString, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "X-Amz-SignedHeaders", valid_614939
  result.add "header", section
  ## parameters in `formData` object:
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_614940 = formData.getOrDefault("AssignmentStatus")
  valid_614940 = validateParameter(valid_614940, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_614940 != nil:
    section.add "AssignmentStatus", valid_614940
  var valid_614941 = formData.getOrDefault("Marker")
  valid_614941 = validateParameter(valid_614941, JString, required = false,
                                 default = nil)
  if valid_614941 != nil:
    section.add "Marker", valid_614941
  var valid_614942 = formData.getOrDefault("MaxItems")
  valid_614942 = validateParameter(valid_614942, JInt, required = false, default = nil)
  if valid_614942 != nil:
    section.add "MaxItems", valid_614942
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614943: Call_PostListVirtualMFADevices_614928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614943.validator(path, query, header, formData, body)
  let scheme = call_614943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614943.url(scheme.get, call_614943.host, call_614943.base,
                         call_614943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614943, url, valid)

proc call*(call_614944: Call_PostListVirtualMFADevices_614928;
          AssignmentStatus: string = "Assigned"; Marker: string = "";
          Action: string = "ListVirtualMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_614945 = newJObject()
  var formData_614946 = newJObject()
  add(formData_614946, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_614946, "Marker", newJString(Marker))
  add(query_614945, "Action", newJString(Action))
  add(formData_614946, "MaxItems", newJInt(MaxItems))
  add(query_614945, "Version", newJString(Version))
  result = call_614944.call(nil, query_614945, nil, formData_614946, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_614928(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_614929, base: "/",
    url: url_PostListVirtualMFADevices_614930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_614910 = ref object of OpenApiRestCall_610658
proc url_GetListVirtualMFADevices_614912(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVirtualMFADevices_614911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614913 = query.getOrDefault("Marker")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "Marker", valid_614913
  var valid_614914 = query.getOrDefault("MaxItems")
  valid_614914 = validateParameter(valid_614914, JInt, required = false, default = nil)
  if valid_614914 != nil:
    section.add "MaxItems", valid_614914
  var valid_614915 = query.getOrDefault("AssignmentStatus")
  valid_614915 = validateParameter(valid_614915, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_614915 != nil:
    section.add "AssignmentStatus", valid_614915
  var valid_614916 = query.getOrDefault("Action")
  valid_614916 = validateParameter(valid_614916, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_614916 != nil:
    section.add "Action", valid_614916
  var valid_614917 = query.getOrDefault("Version")
  valid_614917 = validateParameter(valid_614917, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614917 != nil:
    section.add "Version", valid_614917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614918 = header.getOrDefault("X-Amz-Signature")
  valid_614918 = validateParameter(valid_614918, JString, required = false,
                                 default = nil)
  if valid_614918 != nil:
    section.add "X-Amz-Signature", valid_614918
  var valid_614919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614919 = validateParameter(valid_614919, JString, required = false,
                                 default = nil)
  if valid_614919 != nil:
    section.add "X-Amz-Content-Sha256", valid_614919
  var valid_614920 = header.getOrDefault("X-Amz-Date")
  valid_614920 = validateParameter(valid_614920, JString, required = false,
                                 default = nil)
  if valid_614920 != nil:
    section.add "X-Amz-Date", valid_614920
  var valid_614921 = header.getOrDefault("X-Amz-Credential")
  valid_614921 = validateParameter(valid_614921, JString, required = false,
                                 default = nil)
  if valid_614921 != nil:
    section.add "X-Amz-Credential", valid_614921
  var valid_614922 = header.getOrDefault("X-Amz-Security-Token")
  valid_614922 = validateParameter(valid_614922, JString, required = false,
                                 default = nil)
  if valid_614922 != nil:
    section.add "X-Amz-Security-Token", valid_614922
  var valid_614923 = header.getOrDefault("X-Amz-Algorithm")
  valid_614923 = validateParameter(valid_614923, JString, required = false,
                                 default = nil)
  if valid_614923 != nil:
    section.add "X-Amz-Algorithm", valid_614923
  var valid_614924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614924 = validateParameter(valid_614924, JString, required = false,
                                 default = nil)
  if valid_614924 != nil:
    section.add "X-Amz-SignedHeaders", valid_614924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614925: Call_GetListVirtualMFADevices_614910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_614925.validator(path, query, header, formData, body)
  let scheme = call_614925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614925.url(scheme.get, call_614925.host, call_614925.base,
                         call_614925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614925, url, valid)

proc call*(call_614926: Call_GetListVirtualMFADevices_614910; Marker: string = "";
          MaxItems: int = 0; AssignmentStatus: string = "Assigned";
          Action: string = "ListVirtualMFADevices"; Version: string = "2010-05-08"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614927 = newJObject()
  add(query_614927, "Marker", newJString(Marker))
  add(query_614927, "MaxItems", newJInt(MaxItems))
  add(query_614927, "AssignmentStatus", newJString(AssignmentStatus))
  add(query_614927, "Action", newJString(Action))
  add(query_614927, "Version", newJString(Version))
  result = call_614926.call(nil, query_614927, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_614910(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_614911, base: "/",
    url: url_GetListVirtualMFADevices_614912, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_614965 = ref object of OpenApiRestCall_610658
proc url_PostPutGroupPolicy_614967(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutGroupPolicy_614966(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614968 = query.getOrDefault("Action")
  valid_614968 = validateParameter(valid_614968, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_614968 != nil:
    section.add "Action", valid_614968
  var valid_614969 = query.getOrDefault("Version")
  valid_614969 = validateParameter(valid_614969, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614969 != nil:
    section.add "Version", valid_614969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614970 = header.getOrDefault("X-Amz-Signature")
  valid_614970 = validateParameter(valid_614970, JString, required = false,
                                 default = nil)
  if valid_614970 != nil:
    section.add "X-Amz-Signature", valid_614970
  var valid_614971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614971 = validateParameter(valid_614971, JString, required = false,
                                 default = nil)
  if valid_614971 != nil:
    section.add "X-Amz-Content-Sha256", valid_614971
  var valid_614972 = header.getOrDefault("X-Amz-Date")
  valid_614972 = validateParameter(valid_614972, JString, required = false,
                                 default = nil)
  if valid_614972 != nil:
    section.add "X-Amz-Date", valid_614972
  var valid_614973 = header.getOrDefault("X-Amz-Credential")
  valid_614973 = validateParameter(valid_614973, JString, required = false,
                                 default = nil)
  if valid_614973 != nil:
    section.add "X-Amz-Credential", valid_614973
  var valid_614974 = header.getOrDefault("X-Amz-Security-Token")
  valid_614974 = validateParameter(valid_614974, JString, required = false,
                                 default = nil)
  if valid_614974 != nil:
    section.add "X-Amz-Security-Token", valid_614974
  var valid_614975 = header.getOrDefault("X-Amz-Algorithm")
  valid_614975 = validateParameter(valid_614975, JString, required = false,
                                 default = nil)
  if valid_614975 != nil:
    section.add "X-Amz-Algorithm", valid_614975
  var valid_614976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614976 = validateParameter(valid_614976, JString, required = false,
                                 default = nil)
  if valid_614976 != nil:
    section.add "X-Amz-SignedHeaders", valid_614976
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_614977 = formData.getOrDefault("PolicyDocument")
  valid_614977 = validateParameter(valid_614977, JString, required = true,
                                 default = nil)
  if valid_614977 != nil:
    section.add "PolicyDocument", valid_614977
  var valid_614978 = formData.getOrDefault("GroupName")
  valid_614978 = validateParameter(valid_614978, JString, required = true,
                                 default = nil)
  if valid_614978 != nil:
    section.add "GroupName", valid_614978
  var valid_614979 = formData.getOrDefault("PolicyName")
  valid_614979 = validateParameter(valid_614979, JString, required = true,
                                 default = nil)
  if valid_614979 != nil:
    section.add "PolicyName", valid_614979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614980: Call_PostPutGroupPolicy_614965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614980.validator(path, query, header, formData, body)
  let scheme = call_614980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614980.url(scheme.get, call_614980.host, call_614980.base,
                         call_614980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614980, url, valid)

proc call*(call_614981: Call_PostPutGroupPolicy_614965; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614982 = newJObject()
  var formData_614983 = newJObject()
  add(formData_614983, "PolicyDocument", newJString(PolicyDocument))
  add(formData_614983, "GroupName", newJString(GroupName))
  add(query_614982, "Action", newJString(Action))
  add(query_614982, "Version", newJString(Version))
  add(formData_614983, "PolicyName", newJString(PolicyName))
  result = call_614981.call(nil, query_614982, nil, formData_614983, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_614965(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_614966, base: "/",
    url: url_PostPutGroupPolicy_614967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_614947 = ref object of OpenApiRestCall_610658
proc url_GetPutGroupPolicy_614949(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutGroupPolicy_614948(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614950 = query.getOrDefault("GroupName")
  valid_614950 = validateParameter(valid_614950, JString, required = true,
                                 default = nil)
  if valid_614950 != nil:
    section.add "GroupName", valid_614950
  var valid_614951 = query.getOrDefault("PolicyName")
  valid_614951 = validateParameter(valid_614951, JString, required = true,
                                 default = nil)
  if valid_614951 != nil:
    section.add "PolicyName", valid_614951
  var valid_614952 = query.getOrDefault("PolicyDocument")
  valid_614952 = validateParameter(valid_614952, JString, required = true,
                                 default = nil)
  if valid_614952 != nil:
    section.add "PolicyDocument", valid_614952
  var valid_614953 = query.getOrDefault("Action")
  valid_614953 = validateParameter(valid_614953, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_614953 != nil:
    section.add "Action", valid_614953
  var valid_614954 = query.getOrDefault("Version")
  valid_614954 = validateParameter(valid_614954, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614954 != nil:
    section.add "Version", valid_614954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614955 = header.getOrDefault("X-Amz-Signature")
  valid_614955 = validateParameter(valid_614955, JString, required = false,
                                 default = nil)
  if valid_614955 != nil:
    section.add "X-Amz-Signature", valid_614955
  var valid_614956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614956 = validateParameter(valid_614956, JString, required = false,
                                 default = nil)
  if valid_614956 != nil:
    section.add "X-Amz-Content-Sha256", valid_614956
  var valid_614957 = header.getOrDefault("X-Amz-Date")
  valid_614957 = validateParameter(valid_614957, JString, required = false,
                                 default = nil)
  if valid_614957 != nil:
    section.add "X-Amz-Date", valid_614957
  var valid_614958 = header.getOrDefault("X-Amz-Credential")
  valid_614958 = validateParameter(valid_614958, JString, required = false,
                                 default = nil)
  if valid_614958 != nil:
    section.add "X-Amz-Credential", valid_614958
  var valid_614959 = header.getOrDefault("X-Amz-Security-Token")
  valid_614959 = validateParameter(valid_614959, JString, required = false,
                                 default = nil)
  if valid_614959 != nil:
    section.add "X-Amz-Security-Token", valid_614959
  var valid_614960 = header.getOrDefault("X-Amz-Algorithm")
  valid_614960 = validateParameter(valid_614960, JString, required = false,
                                 default = nil)
  if valid_614960 != nil:
    section.add "X-Amz-Algorithm", valid_614960
  var valid_614961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614961 = validateParameter(valid_614961, JString, required = false,
                                 default = nil)
  if valid_614961 != nil:
    section.add "X-Amz-SignedHeaders", valid_614961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614962: Call_GetPutGroupPolicy_614947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_614962.validator(path, query, header, formData, body)
  let scheme = call_614962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614962.url(scheme.get, call_614962.host, call_614962.base,
                         call_614962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614962, url, valid)

proc call*(call_614963: Call_GetPutGroupPolicy_614947; GroupName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614964 = newJObject()
  add(query_614964, "GroupName", newJString(GroupName))
  add(query_614964, "PolicyName", newJString(PolicyName))
  add(query_614964, "PolicyDocument", newJString(PolicyDocument))
  add(query_614964, "Action", newJString(Action))
  add(query_614964, "Version", newJString(Version))
  result = call_614963.call(nil, query_614964, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_614947(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_614948,
    base: "/", url: url_GetPutGroupPolicy_614949,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_615001 = ref object of OpenApiRestCall_610658
proc url_PostPutRolePermissionsBoundary_615003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePermissionsBoundary_615002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615004 = query.getOrDefault("Action")
  valid_615004 = validateParameter(valid_615004, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_615004 != nil:
    section.add "Action", valid_615004
  var valid_615005 = query.getOrDefault("Version")
  valid_615005 = validateParameter(valid_615005, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615005 != nil:
    section.add "Version", valid_615005
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615006 = header.getOrDefault("X-Amz-Signature")
  valid_615006 = validateParameter(valid_615006, JString, required = false,
                                 default = nil)
  if valid_615006 != nil:
    section.add "X-Amz-Signature", valid_615006
  var valid_615007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615007 = validateParameter(valid_615007, JString, required = false,
                                 default = nil)
  if valid_615007 != nil:
    section.add "X-Amz-Content-Sha256", valid_615007
  var valid_615008 = header.getOrDefault("X-Amz-Date")
  valid_615008 = validateParameter(valid_615008, JString, required = false,
                                 default = nil)
  if valid_615008 != nil:
    section.add "X-Amz-Date", valid_615008
  var valid_615009 = header.getOrDefault("X-Amz-Credential")
  valid_615009 = validateParameter(valid_615009, JString, required = false,
                                 default = nil)
  if valid_615009 != nil:
    section.add "X-Amz-Credential", valid_615009
  var valid_615010 = header.getOrDefault("X-Amz-Security-Token")
  valid_615010 = validateParameter(valid_615010, JString, required = false,
                                 default = nil)
  if valid_615010 != nil:
    section.add "X-Amz-Security-Token", valid_615010
  var valid_615011 = header.getOrDefault("X-Amz-Algorithm")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-Algorithm", valid_615011
  var valid_615012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615012 = validateParameter(valid_615012, JString, required = false,
                                 default = nil)
  if valid_615012 != nil:
    section.add "X-Amz-SignedHeaders", valid_615012
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615013 = formData.getOrDefault("RoleName")
  valid_615013 = validateParameter(valid_615013, JString, required = true,
                                 default = nil)
  if valid_615013 != nil:
    section.add "RoleName", valid_615013
  var valid_615014 = formData.getOrDefault("PermissionsBoundary")
  valid_615014 = validateParameter(valid_615014, JString, required = true,
                                 default = nil)
  if valid_615014 != nil:
    section.add "PermissionsBoundary", valid_615014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615015: Call_PostPutRolePermissionsBoundary_615001; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_615015.validator(path, query, header, formData, body)
  let scheme = call_615015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615015.url(scheme.get, call_615015.host, call_615015.base,
                         call_615015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615015, url, valid)

proc call*(call_615016: Call_PostPutRolePermissionsBoundary_615001;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_615017 = newJObject()
  var formData_615018 = newJObject()
  add(formData_615018, "RoleName", newJString(RoleName))
  add(query_615017, "Action", newJString(Action))
  add(formData_615018, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_615017, "Version", newJString(Version))
  result = call_615016.call(nil, query_615017, nil, formData_615018, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_615001(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_615002, base: "/",
    url: url_PostPutRolePermissionsBoundary_615003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_614984 = ref object of OpenApiRestCall_610658
proc url_GetPutRolePermissionsBoundary_614986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePermissionsBoundary_614985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `PermissionsBoundary` field"
  var valid_614987 = query.getOrDefault("PermissionsBoundary")
  valid_614987 = validateParameter(valid_614987, JString, required = true,
                                 default = nil)
  if valid_614987 != nil:
    section.add "PermissionsBoundary", valid_614987
  var valid_614988 = query.getOrDefault("RoleName")
  valid_614988 = validateParameter(valid_614988, JString, required = true,
                                 default = nil)
  if valid_614988 != nil:
    section.add "RoleName", valid_614988
  var valid_614989 = query.getOrDefault("Action")
  valid_614989 = validateParameter(valid_614989, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_614989 != nil:
    section.add "Action", valid_614989
  var valid_614990 = query.getOrDefault("Version")
  valid_614990 = validateParameter(valid_614990, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614990 != nil:
    section.add "Version", valid_614990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614991 = header.getOrDefault("X-Amz-Signature")
  valid_614991 = validateParameter(valid_614991, JString, required = false,
                                 default = nil)
  if valid_614991 != nil:
    section.add "X-Amz-Signature", valid_614991
  var valid_614992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614992 = validateParameter(valid_614992, JString, required = false,
                                 default = nil)
  if valid_614992 != nil:
    section.add "X-Amz-Content-Sha256", valid_614992
  var valid_614993 = header.getOrDefault("X-Amz-Date")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "X-Amz-Date", valid_614993
  var valid_614994 = header.getOrDefault("X-Amz-Credential")
  valid_614994 = validateParameter(valid_614994, JString, required = false,
                                 default = nil)
  if valid_614994 != nil:
    section.add "X-Amz-Credential", valid_614994
  var valid_614995 = header.getOrDefault("X-Amz-Security-Token")
  valid_614995 = validateParameter(valid_614995, JString, required = false,
                                 default = nil)
  if valid_614995 != nil:
    section.add "X-Amz-Security-Token", valid_614995
  var valid_614996 = header.getOrDefault("X-Amz-Algorithm")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "X-Amz-Algorithm", valid_614996
  var valid_614997 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614997 = validateParameter(valid_614997, JString, required = false,
                                 default = nil)
  if valid_614997 != nil:
    section.add "X-Amz-SignedHeaders", valid_614997
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614998: Call_GetPutRolePermissionsBoundary_614984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_614998.validator(path, query, header, formData, body)
  let scheme = call_614998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614998.url(scheme.get, call_614998.host, call_614998.base,
                         call_614998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614998, url, valid)

proc call*(call_614999: Call_GetPutRolePermissionsBoundary_614984;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615000 = newJObject()
  add(query_615000, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_615000, "RoleName", newJString(RoleName))
  add(query_615000, "Action", newJString(Action))
  add(query_615000, "Version", newJString(Version))
  result = call_614999.call(nil, query_615000, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_614984(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_614985, base: "/",
    url: url_GetPutRolePermissionsBoundary_614986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_615037 = ref object of OpenApiRestCall_610658
proc url_PostPutRolePolicy_615039(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePolicy_615038(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615040 = query.getOrDefault("Action")
  valid_615040 = validateParameter(valid_615040, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_615040 != nil:
    section.add "Action", valid_615040
  var valid_615041 = query.getOrDefault("Version")
  valid_615041 = validateParameter(valid_615041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615041 != nil:
    section.add "Version", valid_615041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615042 = header.getOrDefault("X-Amz-Signature")
  valid_615042 = validateParameter(valid_615042, JString, required = false,
                                 default = nil)
  if valid_615042 != nil:
    section.add "X-Amz-Signature", valid_615042
  var valid_615043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615043 = validateParameter(valid_615043, JString, required = false,
                                 default = nil)
  if valid_615043 != nil:
    section.add "X-Amz-Content-Sha256", valid_615043
  var valid_615044 = header.getOrDefault("X-Amz-Date")
  valid_615044 = validateParameter(valid_615044, JString, required = false,
                                 default = nil)
  if valid_615044 != nil:
    section.add "X-Amz-Date", valid_615044
  var valid_615045 = header.getOrDefault("X-Amz-Credential")
  valid_615045 = validateParameter(valid_615045, JString, required = false,
                                 default = nil)
  if valid_615045 != nil:
    section.add "X-Amz-Credential", valid_615045
  var valid_615046 = header.getOrDefault("X-Amz-Security-Token")
  valid_615046 = validateParameter(valid_615046, JString, required = false,
                                 default = nil)
  if valid_615046 != nil:
    section.add "X-Amz-Security-Token", valid_615046
  var valid_615047 = header.getOrDefault("X-Amz-Algorithm")
  valid_615047 = validateParameter(valid_615047, JString, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "X-Amz-Algorithm", valid_615047
  var valid_615048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615048 = validateParameter(valid_615048, JString, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "X-Amz-SignedHeaders", valid_615048
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_615049 = formData.getOrDefault("PolicyDocument")
  valid_615049 = validateParameter(valid_615049, JString, required = true,
                                 default = nil)
  if valid_615049 != nil:
    section.add "PolicyDocument", valid_615049
  var valid_615050 = formData.getOrDefault("RoleName")
  valid_615050 = validateParameter(valid_615050, JString, required = true,
                                 default = nil)
  if valid_615050 != nil:
    section.add "RoleName", valid_615050
  var valid_615051 = formData.getOrDefault("PolicyName")
  valid_615051 = validateParameter(valid_615051, JString, required = true,
                                 default = nil)
  if valid_615051 != nil:
    section.add "PolicyName", valid_615051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615052: Call_PostPutRolePolicy_615037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615052.validator(path, query, header, formData, body)
  let scheme = call_615052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615052.url(scheme.get, call_615052.host, call_615052.base,
                         call_615052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615052, url, valid)

proc call*(call_615053: Call_PostPutRolePolicy_615037; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_615054 = newJObject()
  var formData_615055 = newJObject()
  add(formData_615055, "PolicyDocument", newJString(PolicyDocument))
  add(formData_615055, "RoleName", newJString(RoleName))
  add(query_615054, "Action", newJString(Action))
  add(query_615054, "Version", newJString(Version))
  add(formData_615055, "PolicyName", newJString(PolicyName))
  result = call_615053.call(nil, query_615054, nil, formData_615055, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_615037(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_615038,
    base: "/", url: url_PostPutRolePolicy_615039,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_615019 = ref object of OpenApiRestCall_610658
proc url_GetPutRolePolicy_615021(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePolicy_615020(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_615022 = query.getOrDefault("PolicyName")
  valid_615022 = validateParameter(valid_615022, JString, required = true,
                                 default = nil)
  if valid_615022 != nil:
    section.add "PolicyName", valid_615022
  var valid_615023 = query.getOrDefault("RoleName")
  valid_615023 = validateParameter(valid_615023, JString, required = true,
                                 default = nil)
  if valid_615023 != nil:
    section.add "RoleName", valid_615023
  var valid_615024 = query.getOrDefault("PolicyDocument")
  valid_615024 = validateParameter(valid_615024, JString, required = true,
                                 default = nil)
  if valid_615024 != nil:
    section.add "PolicyDocument", valid_615024
  var valid_615025 = query.getOrDefault("Action")
  valid_615025 = validateParameter(valid_615025, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_615025 != nil:
    section.add "Action", valid_615025
  var valid_615026 = query.getOrDefault("Version")
  valid_615026 = validateParameter(valid_615026, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615026 != nil:
    section.add "Version", valid_615026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615027 = header.getOrDefault("X-Amz-Signature")
  valid_615027 = validateParameter(valid_615027, JString, required = false,
                                 default = nil)
  if valid_615027 != nil:
    section.add "X-Amz-Signature", valid_615027
  var valid_615028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615028 = validateParameter(valid_615028, JString, required = false,
                                 default = nil)
  if valid_615028 != nil:
    section.add "X-Amz-Content-Sha256", valid_615028
  var valid_615029 = header.getOrDefault("X-Amz-Date")
  valid_615029 = validateParameter(valid_615029, JString, required = false,
                                 default = nil)
  if valid_615029 != nil:
    section.add "X-Amz-Date", valid_615029
  var valid_615030 = header.getOrDefault("X-Amz-Credential")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "X-Amz-Credential", valid_615030
  var valid_615031 = header.getOrDefault("X-Amz-Security-Token")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-Security-Token", valid_615031
  var valid_615032 = header.getOrDefault("X-Amz-Algorithm")
  valid_615032 = validateParameter(valid_615032, JString, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "X-Amz-Algorithm", valid_615032
  var valid_615033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "X-Amz-SignedHeaders", valid_615033
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615034: Call_GetPutRolePolicy_615019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615034.validator(path, query, header, formData, body)
  let scheme = call_615034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615034.url(scheme.get, call_615034.host, call_615034.base,
                         call_615034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615034, url, valid)

proc call*(call_615035: Call_GetPutRolePolicy_615019; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615036 = newJObject()
  add(query_615036, "PolicyName", newJString(PolicyName))
  add(query_615036, "RoleName", newJString(RoleName))
  add(query_615036, "PolicyDocument", newJString(PolicyDocument))
  add(query_615036, "Action", newJString(Action))
  add(query_615036, "Version", newJString(Version))
  result = call_615035.call(nil, query_615036, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_615019(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_615020,
    base: "/", url: url_GetPutRolePolicy_615021,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_615073 = ref object of OpenApiRestCall_610658
proc url_PostPutUserPermissionsBoundary_615075(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPermissionsBoundary_615074(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615076 = query.getOrDefault("Action")
  valid_615076 = validateParameter(valid_615076, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_615076 != nil:
    section.add "Action", valid_615076
  var valid_615077 = query.getOrDefault("Version")
  valid_615077 = validateParameter(valid_615077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615077 != nil:
    section.add "Version", valid_615077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615078 = header.getOrDefault("X-Amz-Signature")
  valid_615078 = validateParameter(valid_615078, JString, required = false,
                                 default = nil)
  if valid_615078 != nil:
    section.add "X-Amz-Signature", valid_615078
  var valid_615079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615079 = validateParameter(valid_615079, JString, required = false,
                                 default = nil)
  if valid_615079 != nil:
    section.add "X-Amz-Content-Sha256", valid_615079
  var valid_615080 = header.getOrDefault("X-Amz-Date")
  valid_615080 = validateParameter(valid_615080, JString, required = false,
                                 default = nil)
  if valid_615080 != nil:
    section.add "X-Amz-Date", valid_615080
  var valid_615081 = header.getOrDefault("X-Amz-Credential")
  valid_615081 = validateParameter(valid_615081, JString, required = false,
                                 default = nil)
  if valid_615081 != nil:
    section.add "X-Amz-Credential", valid_615081
  var valid_615082 = header.getOrDefault("X-Amz-Security-Token")
  valid_615082 = validateParameter(valid_615082, JString, required = false,
                                 default = nil)
  if valid_615082 != nil:
    section.add "X-Amz-Security-Token", valid_615082
  var valid_615083 = header.getOrDefault("X-Amz-Algorithm")
  valid_615083 = validateParameter(valid_615083, JString, required = false,
                                 default = nil)
  if valid_615083 != nil:
    section.add "X-Amz-Algorithm", valid_615083
  var valid_615084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615084 = validateParameter(valid_615084, JString, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "X-Amz-SignedHeaders", valid_615084
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615085 = formData.getOrDefault("UserName")
  valid_615085 = validateParameter(valid_615085, JString, required = true,
                                 default = nil)
  if valid_615085 != nil:
    section.add "UserName", valid_615085
  var valid_615086 = formData.getOrDefault("PermissionsBoundary")
  valid_615086 = validateParameter(valid_615086, JString, required = true,
                                 default = nil)
  if valid_615086 != nil:
    section.add "PermissionsBoundary", valid_615086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615087: Call_PostPutUserPermissionsBoundary_615073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_615087.validator(path, query, header, formData, body)
  let scheme = call_615087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615087.url(scheme.get, call_615087.host, call_615087.base,
                         call_615087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615087, url, valid)

proc call*(call_615088: Call_PostPutUserPermissionsBoundary_615073;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_615089 = newJObject()
  var formData_615090 = newJObject()
  add(formData_615090, "UserName", newJString(UserName))
  add(query_615089, "Action", newJString(Action))
  add(formData_615090, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_615089, "Version", newJString(Version))
  result = call_615088.call(nil, query_615089, nil, formData_615090, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_615073(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_615074, base: "/",
    url: url_PostPutUserPermissionsBoundary_615075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_615056 = ref object of OpenApiRestCall_610658
proc url_GetPutUserPermissionsBoundary_615058(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPermissionsBoundary_615057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615059 = query.getOrDefault("UserName")
  valid_615059 = validateParameter(valid_615059, JString, required = true,
                                 default = nil)
  if valid_615059 != nil:
    section.add "UserName", valid_615059
  var valid_615060 = query.getOrDefault("PermissionsBoundary")
  valid_615060 = validateParameter(valid_615060, JString, required = true,
                                 default = nil)
  if valid_615060 != nil:
    section.add "PermissionsBoundary", valid_615060
  var valid_615061 = query.getOrDefault("Action")
  valid_615061 = validateParameter(valid_615061, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_615061 != nil:
    section.add "Action", valid_615061
  var valid_615062 = query.getOrDefault("Version")
  valid_615062 = validateParameter(valid_615062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615062 != nil:
    section.add "Version", valid_615062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615063 = header.getOrDefault("X-Amz-Signature")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "X-Amz-Signature", valid_615063
  var valid_615064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615064 = validateParameter(valid_615064, JString, required = false,
                                 default = nil)
  if valid_615064 != nil:
    section.add "X-Amz-Content-Sha256", valid_615064
  var valid_615065 = header.getOrDefault("X-Amz-Date")
  valid_615065 = validateParameter(valid_615065, JString, required = false,
                                 default = nil)
  if valid_615065 != nil:
    section.add "X-Amz-Date", valid_615065
  var valid_615066 = header.getOrDefault("X-Amz-Credential")
  valid_615066 = validateParameter(valid_615066, JString, required = false,
                                 default = nil)
  if valid_615066 != nil:
    section.add "X-Amz-Credential", valid_615066
  var valid_615067 = header.getOrDefault("X-Amz-Security-Token")
  valid_615067 = validateParameter(valid_615067, JString, required = false,
                                 default = nil)
  if valid_615067 != nil:
    section.add "X-Amz-Security-Token", valid_615067
  var valid_615068 = header.getOrDefault("X-Amz-Algorithm")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Algorithm", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-SignedHeaders", valid_615069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615070: Call_GetPutUserPermissionsBoundary_615056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_615070.validator(path, query, header, formData, body)
  let scheme = call_615070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615070.url(scheme.get, call_615070.host, call_615070.base,
                         call_615070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615070, url, valid)

proc call*(call_615071: Call_GetPutUserPermissionsBoundary_615056;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615072 = newJObject()
  add(query_615072, "UserName", newJString(UserName))
  add(query_615072, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_615072, "Action", newJString(Action))
  add(query_615072, "Version", newJString(Version))
  result = call_615071.call(nil, query_615072, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_615056(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_615057, base: "/",
    url: url_GetPutUserPermissionsBoundary_615058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_615109 = ref object of OpenApiRestCall_610658
proc url_PostPutUserPolicy_615111(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPolicy_615110(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615112 = query.getOrDefault("Action")
  valid_615112 = validateParameter(valid_615112, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_615112 != nil:
    section.add "Action", valid_615112
  var valid_615113 = query.getOrDefault("Version")
  valid_615113 = validateParameter(valid_615113, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615113 != nil:
    section.add "Version", valid_615113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615114 = header.getOrDefault("X-Amz-Signature")
  valid_615114 = validateParameter(valid_615114, JString, required = false,
                                 default = nil)
  if valid_615114 != nil:
    section.add "X-Amz-Signature", valid_615114
  var valid_615115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615115 = validateParameter(valid_615115, JString, required = false,
                                 default = nil)
  if valid_615115 != nil:
    section.add "X-Amz-Content-Sha256", valid_615115
  var valid_615116 = header.getOrDefault("X-Amz-Date")
  valid_615116 = validateParameter(valid_615116, JString, required = false,
                                 default = nil)
  if valid_615116 != nil:
    section.add "X-Amz-Date", valid_615116
  var valid_615117 = header.getOrDefault("X-Amz-Credential")
  valid_615117 = validateParameter(valid_615117, JString, required = false,
                                 default = nil)
  if valid_615117 != nil:
    section.add "X-Amz-Credential", valid_615117
  var valid_615118 = header.getOrDefault("X-Amz-Security-Token")
  valid_615118 = validateParameter(valid_615118, JString, required = false,
                                 default = nil)
  if valid_615118 != nil:
    section.add "X-Amz-Security-Token", valid_615118
  var valid_615119 = header.getOrDefault("X-Amz-Algorithm")
  valid_615119 = validateParameter(valid_615119, JString, required = false,
                                 default = nil)
  if valid_615119 != nil:
    section.add "X-Amz-Algorithm", valid_615119
  var valid_615120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615120 = validateParameter(valid_615120, JString, required = false,
                                 default = nil)
  if valid_615120 != nil:
    section.add "X-Amz-SignedHeaders", valid_615120
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_615121 = formData.getOrDefault("PolicyDocument")
  valid_615121 = validateParameter(valid_615121, JString, required = true,
                                 default = nil)
  if valid_615121 != nil:
    section.add "PolicyDocument", valid_615121
  var valid_615122 = formData.getOrDefault("UserName")
  valid_615122 = validateParameter(valid_615122, JString, required = true,
                                 default = nil)
  if valid_615122 != nil:
    section.add "UserName", valid_615122
  var valid_615123 = formData.getOrDefault("PolicyName")
  valid_615123 = validateParameter(valid_615123, JString, required = true,
                                 default = nil)
  if valid_615123 != nil:
    section.add "PolicyName", valid_615123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615124: Call_PostPutUserPolicy_615109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615124.validator(path, query, header, formData, body)
  let scheme = call_615124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615124.url(scheme.get, call_615124.host, call_615124.base,
                         call_615124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615124, url, valid)

proc call*(call_615125: Call_PostPutUserPolicy_615109; PolicyDocument: string;
          UserName: string; PolicyName: string; Action: string = "PutUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_615126 = newJObject()
  var formData_615127 = newJObject()
  add(formData_615127, "PolicyDocument", newJString(PolicyDocument))
  add(formData_615127, "UserName", newJString(UserName))
  add(query_615126, "Action", newJString(Action))
  add(query_615126, "Version", newJString(Version))
  add(formData_615127, "PolicyName", newJString(PolicyName))
  result = call_615125.call(nil, query_615126, nil, formData_615127, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_615109(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_615110,
    base: "/", url: url_PostPutUserPolicy_615111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_615091 = ref object of OpenApiRestCall_610658
proc url_GetPutUserPolicy_615093(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPolicy_615092(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615094 = query.getOrDefault("UserName")
  valid_615094 = validateParameter(valid_615094, JString, required = true,
                                 default = nil)
  if valid_615094 != nil:
    section.add "UserName", valid_615094
  var valid_615095 = query.getOrDefault("PolicyName")
  valid_615095 = validateParameter(valid_615095, JString, required = true,
                                 default = nil)
  if valid_615095 != nil:
    section.add "PolicyName", valid_615095
  var valid_615096 = query.getOrDefault("PolicyDocument")
  valid_615096 = validateParameter(valid_615096, JString, required = true,
                                 default = nil)
  if valid_615096 != nil:
    section.add "PolicyDocument", valid_615096
  var valid_615097 = query.getOrDefault("Action")
  valid_615097 = validateParameter(valid_615097, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_615097 != nil:
    section.add "Action", valid_615097
  var valid_615098 = query.getOrDefault("Version")
  valid_615098 = validateParameter(valid_615098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615098 != nil:
    section.add "Version", valid_615098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615099 = header.getOrDefault("X-Amz-Signature")
  valid_615099 = validateParameter(valid_615099, JString, required = false,
                                 default = nil)
  if valid_615099 != nil:
    section.add "X-Amz-Signature", valid_615099
  var valid_615100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "X-Amz-Content-Sha256", valid_615100
  var valid_615101 = header.getOrDefault("X-Amz-Date")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "X-Amz-Date", valid_615101
  var valid_615102 = header.getOrDefault("X-Amz-Credential")
  valid_615102 = validateParameter(valid_615102, JString, required = false,
                                 default = nil)
  if valid_615102 != nil:
    section.add "X-Amz-Credential", valid_615102
  var valid_615103 = header.getOrDefault("X-Amz-Security-Token")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Security-Token", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-Algorithm")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-Algorithm", valid_615104
  var valid_615105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615105 = validateParameter(valid_615105, JString, required = false,
                                 default = nil)
  if valid_615105 != nil:
    section.add "X-Amz-SignedHeaders", valid_615105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615106: Call_GetPutUserPolicy_615091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_615106.validator(path, query, header, formData, body)
  let scheme = call_615106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615106.url(scheme.get, call_615106.host, call_615106.base,
                         call_615106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615106, url, valid)

proc call*(call_615107: Call_GetPutUserPolicy_615091; UserName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615108 = newJObject()
  add(query_615108, "UserName", newJString(UserName))
  add(query_615108, "PolicyName", newJString(PolicyName))
  add(query_615108, "PolicyDocument", newJString(PolicyDocument))
  add(query_615108, "Action", newJString(Action))
  add(query_615108, "Version", newJString(Version))
  result = call_615107.call(nil, query_615108, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_615091(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_615092,
    base: "/", url: url_GetPutUserPolicy_615093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_615145 = ref object of OpenApiRestCall_610658
proc url_PostRemoveClientIDFromOpenIDConnectProvider_615147(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_615146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615148 = query.getOrDefault("Action")
  valid_615148 = validateParameter(valid_615148, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_615148 != nil:
    section.add "Action", valid_615148
  var valid_615149 = query.getOrDefault("Version")
  valid_615149 = validateParameter(valid_615149, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615149 != nil:
    section.add "Version", valid_615149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615150 = header.getOrDefault("X-Amz-Signature")
  valid_615150 = validateParameter(valid_615150, JString, required = false,
                                 default = nil)
  if valid_615150 != nil:
    section.add "X-Amz-Signature", valid_615150
  var valid_615151 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615151 = validateParameter(valid_615151, JString, required = false,
                                 default = nil)
  if valid_615151 != nil:
    section.add "X-Amz-Content-Sha256", valid_615151
  var valid_615152 = header.getOrDefault("X-Amz-Date")
  valid_615152 = validateParameter(valid_615152, JString, required = false,
                                 default = nil)
  if valid_615152 != nil:
    section.add "X-Amz-Date", valid_615152
  var valid_615153 = header.getOrDefault("X-Amz-Credential")
  valid_615153 = validateParameter(valid_615153, JString, required = false,
                                 default = nil)
  if valid_615153 != nil:
    section.add "X-Amz-Credential", valid_615153
  var valid_615154 = header.getOrDefault("X-Amz-Security-Token")
  valid_615154 = validateParameter(valid_615154, JString, required = false,
                                 default = nil)
  if valid_615154 != nil:
    section.add "X-Amz-Security-Token", valid_615154
  var valid_615155 = header.getOrDefault("X-Amz-Algorithm")
  valid_615155 = validateParameter(valid_615155, JString, required = false,
                                 default = nil)
  if valid_615155 != nil:
    section.add "X-Amz-Algorithm", valid_615155
  var valid_615156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615156 = validateParameter(valid_615156, JString, required = false,
                                 default = nil)
  if valid_615156 != nil:
    section.add "X-Amz-SignedHeaders", valid_615156
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_615157 = formData.getOrDefault("ClientID")
  valid_615157 = validateParameter(valid_615157, JString, required = true,
                                 default = nil)
  if valid_615157 != nil:
    section.add "ClientID", valid_615157
  var valid_615158 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_615158 = validateParameter(valid_615158, JString, required = true,
                                 default = nil)
  if valid_615158 != nil:
    section.add "OpenIDConnectProviderArn", valid_615158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615159: Call_PostRemoveClientIDFromOpenIDConnectProvider_615145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_615159.validator(path, query, header, formData, body)
  let scheme = call_615159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615159.url(scheme.get, call_615159.host, call_615159.base,
                         call_615159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615159, url, valid)

proc call*(call_615160: Call_PostRemoveClientIDFromOpenIDConnectProvider_615145;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_615161 = newJObject()
  var formData_615162 = newJObject()
  add(formData_615162, "ClientID", newJString(ClientID))
  add(query_615161, "Action", newJString(Action))
  add(query_615161, "Version", newJString(Version))
  add(formData_615162, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_615160.call(nil, query_615161, nil, formData_615162, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_615145(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_615146,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_615147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_615128 = ref object of OpenApiRestCall_610658
proc url_GetRemoveClientIDFromOpenIDConnectProvider_615130(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_615129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_615131 = query.getOrDefault("ClientID")
  valid_615131 = validateParameter(valid_615131, JString, required = true,
                                 default = nil)
  if valid_615131 != nil:
    section.add "ClientID", valid_615131
  var valid_615132 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_615132 = validateParameter(valid_615132, JString, required = true,
                                 default = nil)
  if valid_615132 != nil:
    section.add "OpenIDConnectProviderArn", valid_615132
  var valid_615133 = query.getOrDefault("Action")
  valid_615133 = validateParameter(valid_615133, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_615133 != nil:
    section.add "Action", valid_615133
  var valid_615134 = query.getOrDefault("Version")
  valid_615134 = validateParameter(valid_615134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615134 != nil:
    section.add "Version", valid_615134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615135 = header.getOrDefault("X-Amz-Signature")
  valid_615135 = validateParameter(valid_615135, JString, required = false,
                                 default = nil)
  if valid_615135 != nil:
    section.add "X-Amz-Signature", valid_615135
  var valid_615136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615136 = validateParameter(valid_615136, JString, required = false,
                                 default = nil)
  if valid_615136 != nil:
    section.add "X-Amz-Content-Sha256", valid_615136
  var valid_615137 = header.getOrDefault("X-Amz-Date")
  valid_615137 = validateParameter(valid_615137, JString, required = false,
                                 default = nil)
  if valid_615137 != nil:
    section.add "X-Amz-Date", valid_615137
  var valid_615138 = header.getOrDefault("X-Amz-Credential")
  valid_615138 = validateParameter(valid_615138, JString, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "X-Amz-Credential", valid_615138
  var valid_615139 = header.getOrDefault("X-Amz-Security-Token")
  valid_615139 = validateParameter(valid_615139, JString, required = false,
                                 default = nil)
  if valid_615139 != nil:
    section.add "X-Amz-Security-Token", valid_615139
  var valid_615140 = header.getOrDefault("X-Amz-Algorithm")
  valid_615140 = validateParameter(valid_615140, JString, required = false,
                                 default = nil)
  if valid_615140 != nil:
    section.add "X-Amz-Algorithm", valid_615140
  var valid_615141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-SignedHeaders", valid_615141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615142: Call_GetRemoveClientIDFromOpenIDConnectProvider_615128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_615142.validator(path, query, header, formData, body)
  let scheme = call_615142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615142.url(scheme.get, call_615142.host, call_615142.base,
                         call_615142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615142, url, valid)

proc call*(call_615143: Call_GetRemoveClientIDFromOpenIDConnectProvider_615128;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615144 = newJObject()
  add(query_615144, "ClientID", newJString(ClientID))
  add(query_615144, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_615144, "Action", newJString(Action))
  add(query_615144, "Version", newJString(Version))
  result = call_615143.call(nil, query_615144, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_615128(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_615129,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_615130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_615180 = ref object of OpenApiRestCall_610658
proc url_PostRemoveRoleFromInstanceProfile_615182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_615181(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615183 = query.getOrDefault("Action")
  valid_615183 = validateParameter(valid_615183, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_615183 != nil:
    section.add "Action", valid_615183
  var valid_615184 = query.getOrDefault("Version")
  valid_615184 = validateParameter(valid_615184, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615184 != nil:
    section.add "Version", valid_615184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615185 = header.getOrDefault("X-Amz-Signature")
  valid_615185 = validateParameter(valid_615185, JString, required = false,
                                 default = nil)
  if valid_615185 != nil:
    section.add "X-Amz-Signature", valid_615185
  var valid_615186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615186 = validateParameter(valid_615186, JString, required = false,
                                 default = nil)
  if valid_615186 != nil:
    section.add "X-Amz-Content-Sha256", valid_615186
  var valid_615187 = header.getOrDefault("X-Amz-Date")
  valid_615187 = validateParameter(valid_615187, JString, required = false,
                                 default = nil)
  if valid_615187 != nil:
    section.add "X-Amz-Date", valid_615187
  var valid_615188 = header.getOrDefault("X-Amz-Credential")
  valid_615188 = validateParameter(valid_615188, JString, required = false,
                                 default = nil)
  if valid_615188 != nil:
    section.add "X-Amz-Credential", valid_615188
  var valid_615189 = header.getOrDefault("X-Amz-Security-Token")
  valid_615189 = validateParameter(valid_615189, JString, required = false,
                                 default = nil)
  if valid_615189 != nil:
    section.add "X-Amz-Security-Token", valid_615189
  var valid_615190 = header.getOrDefault("X-Amz-Algorithm")
  valid_615190 = validateParameter(valid_615190, JString, required = false,
                                 default = nil)
  if valid_615190 != nil:
    section.add "X-Amz-Algorithm", valid_615190
  var valid_615191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615191 = validateParameter(valid_615191, JString, required = false,
                                 default = nil)
  if valid_615191 != nil:
    section.add "X-Amz-SignedHeaders", valid_615191
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615192 = formData.getOrDefault("RoleName")
  valid_615192 = validateParameter(valid_615192, JString, required = true,
                                 default = nil)
  if valid_615192 != nil:
    section.add "RoleName", valid_615192
  var valid_615193 = formData.getOrDefault("InstanceProfileName")
  valid_615193 = validateParameter(valid_615193, JString, required = true,
                                 default = nil)
  if valid_615193 != nil:
    section.add "InstanceProfileName", valid_615193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615194: Call_PostRemoveRoleFromInstanceProfile_615180;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_615194.validator(path, query, header, formData, body)
  let scheme = call_615194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615194.url(scheme.get, call_615194.host, call_615194.base,
                         call_615194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615194, url, valid)

proc call*(call_615195: Call_PostRemoveRoleFromInstanceProfile_615180;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_615196 = newJObject()
  var formData_615197 = newJObject()
  add(formData_615197, "RoleName", newJString(RoleName))
  add(query_615196, "Action", newJString(Action))
  add(formData_615197, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_615196, "Version", newJString(Version))
  result = call_615195.call(nil, query_615196, nil, formData_615197, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_615180(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_615181, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_615182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_615163 = ref object of OpenApiRestCall_610658
proc url_GetRemoveRoleFromInstanceProfile_615165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_615164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_615166 = query.getOrDefault("RoleName")
  valid_615166 = validateParameter(valid_615166, JString, required = true,
                                 default = nil)
  if valid_615166 != nil:
    section.add "RoleName", valid_615166
  var valid_615167 = query.getOrDefault("Action")
  valid_615167 = validateParameter(valid_615167, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_615167 != nil:
    section.add "Action", valid_615167
  var valid_615168 = query.getOrDefault("InstanceProfileName")
  valid_615168 = validateParameter(valid_615168, JString, required = true,
                                 default = nil)
  if valid_615168 != nil:
    section.add "InstanceProfileName", valid_615168
  var valid_615169 = query.getOrDefault("Version")
  valid_615169 = validateParameter(valid_615169, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615169 != nil:
    section.add "Version", valid_615169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615170 = header.getOrDefault("X-Amz-Signature")
  valid_615170 = validateParameter(valid_615170, JString, required = false,
                                 default = nil)
  if valid_615170 != nil:
    section.add "X-Amz-Signature", valid_615170
  var valid_615171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615171 = validateParameter(valid_615171, JString, required = false,
                                 default = nil)
  if valid_615171 != nil:
    section.add "X-Amz-Content-Sha256", valid_615171
  var valid_615172 = header.getOrDefault("X-Amz-Date")
  valid_615172 = validateParameter(valid_615172, JString, required = false,
                                 default = nil)
  if valid_615172 != nil:
    section.add "X-Amz-Date", valid_615172
  var valid_615173 = header.getOrDefault("X-Amz-Credential")
  valid_615173 = validateParameter(valid_615173, JString, required = false,
                                 default = nil)
  if valid_615173 != nil:
    section.add "X-Amz-Credential", valid_615173
  var valid_615174 = header.getOrDefault("X-Amz-Security-Token")
  valid_615174 = validateParameter(valid_615174, JString, required = false,
                                 default = nil)
  if valid_615174 != nil:
    section.add "X-Amz-Security-Token", valid_615174
  var valid_615175 = header.getOrDefault("X-Amz-Algorithm")
  valid_615175 = validateParameter(valid_615175, JString, required = false,
                                 default = nil)
  if valid_615175 != nil:
    section.add "X-Amz-Algorithm", valid_615175
  var valid_615176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615176 = validateParameter(valid_615176, JString, required = false,
                                 default = nil)
  if valid_615176 != nil:
    section.add "X-Amz-SignedHeaders", valid_615176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615177: Call_GetRemoveRoleFromInstanceProfile_615163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_615177.validator(path, query, header, formData, body)
  let scheme = call_615177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615177.url(scheme.get, call_615177.host, call_615177.base,
                         call_615177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615177, url, valid)

proc call*(call_615178: Call_GetRemoveRoleFromInstanceProfile_615163;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_615179 = newJObject()
  add(query_615179, "RoleName", newJString(RoleName))
  add(query_615179, "Action", newJString(Action))
  add(query_615179, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_615179, "Version", newJString(Version))
  result = call_615178.call(nil, query_615179, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_615163(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_615164, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_615165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_615215 = ref object of OpenApiRestCall_610658
proc url_PostRemoveUserFromGroup_615217(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveUserFromGroup_615216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615218 = query.getOrDefault("Action")
  valid_615218 = validateParameter(valid_615218, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_615218 != nil:
    section.add "Action", valid_615218
  var valid_615219 = query.getOrDefault("Version")
  valid_615219 = validateParameter(valid_615219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615219 != nil:
    section.add "Version", valid_615219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615220 = header.getOrDefault("X-Amz-Signature")
  valid_615220 = validateParameter(valid_615220, JString, required = false,
                                 default = nil)
  if valid_615220 != nil:
    section.add "X-Amz-Signature", valid_615220
  var valid_615221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615221 = validateParameter(valid_615221, JString, required = false,
                                 default = nil)
  if valid_615221 != nil:
    section.add "X-Amz-Content-Sha256", valid_615221
  var valid_615222 = header.getOrDefault("X-Amz-Date")
  valid_615222 = validateParameter(valid_615222, JString, required = false,
                                 default = nil)
  if valid_615222 != nil:
    section.add "X-Amz-Date", valid_615222
  var valid_615223 = header.getOrDefault("X-Amz-Credential")
  valid_615223 = validateParameter(valid_615223, JString, required = false,
                                 default = nil)
  if valid_615223 != nil:
    section.add "X-Amz-Credential", valid_615223
  var valid_615224 = header.getOrDefault("X-Amz-Security-Token")
  valid_615224 = validateParameter(valid_615224, JString, required = false,
                                 default = nil)
  if valid_615224 != nil:
    section.add "X-Amz-Security-Token", valid_615224
  var valid_615225 = header.getOrDefault("X-Amz-Algorithm")
  valid_615225 = validateParameter(valid_615225, JString, required = false,
                                 default = nil)
  if valid_615225 != nil:
    section.add "X-Amz-Algorithm", valid_615225
  var valid_615226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615226 = validateParameter(valid_615226, JString, required = false,
                                 default = nil)
  if valid_615226 != nil:
    section.add "X-Amz-SignedHeaders", valid_615226
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_615227 = formData.getOrDefault("GroupName")
  valid_615227 = validateParameter(valid_615227, JString, required = true,
                                 default = nil)
  if valid_615227 != nil:
    section.add "GroupName", valid_615227
  var valid_615228 = formData.getOrDefault("UserName")
  valid_615228 = validateParameter(valid_615228, JString, required = true,
                                 default = nil)
  if valid_615228 != nil:
    section.add "UserName", valid_615228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615229: Call_PostRemoveUserFromGroup_615215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_615229.validator(path, query, header, formData, body)
  let scheme = call_615229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615229.url(scheme.get, call_615229.host, call_615229.base,
                         call_615229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615229, url, valid)

proc call*(call_615230: Call_PostRemoveUserFromGroup_615215; GroupName: string;
          UserName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615231 = newJObject()
  var formData_615232 = newJObject()
  add(formData_615232, "GroupName", newJString(GroupName))
  add(formData_615232, "UserName", newJString(UserName))
  add(query_615231, "Action", newJString(Action))
  add(query_615231, "Version", newJString(Version))
  result = call_615230.call(nil, query_615231, nil, formData_615232, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_615215(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_615216, base: "/",
    url: url_PostRemoveUserFromGroup_615217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_615198 = ref object of OpenApiRestCall_610658
proc url_GetRemoveUserFromGroup_615200(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveUserFromGroup_615199(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615201 = query.getOrDefault("UserName")
  valid_615201 = validateParameter(valid_615201, JString, required = true,
                                 default = nil)
  if valid_615201 != nil:
    section.add "UserName", valid_615201
  var valid_615202 = query.getOrDefault("GroupName")
  valid_615202 = validateParameter(valid_615202, JString, required = true,
                                 default = nil)
  if valid_615202 != nil:
    section.add "GroupName", valid_615202
  var valid_615203 = query.getOrDefault("Action")
  valid_615203 = validateParameter(valid_615203, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_615203 != nil:
    section.add "Action", valid_615203
  var valid_615204 = query.getOrDefault("Version")
  valid_615204 = validateParameter(valid_615204, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615204 != nil:
    section.add "Version", valid_615204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615205 = header.getOrDefault("X-Amz-Signature")
  valid_615205 = validateParameter(valid_615205, JString, required = false,
                                 default = nil)
  if valid_615205 != nil:
    section.add "X-Amz-Signature", valid_615205
  var valid_615206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615206 = validateParameter(valid_615206, JString, required = false,
                                 default = nil)
  if valid_615206 != nil:
    section.add "X-Amz-Content-Sha256", valid_615206
  var valid_615207 = header.getOrDefault("X-Amz-Date")
  valid_615207 = validateParameter(valid_615207, JString, required = false,
                                 default = nil)
  if valid_615207 != nil:
    section.add "X-Amz-Date", valid_615207
  var valid_615208 = header.getOrDefault("X-Amz-Credential")
  valid_615208 = validateParameter(valid_615208, JString, required = false,
                                 default = nil)
  if valid_615208 != nil:
    section.add "X-Amz-Credential", valid_615208
  var valid_615209 = header.getOrDefault("X-Amz-Security-Token")
  valid_615209 = validateParameter(valid_615209, JString, required = false,
                                 default = nil)
  if valid_615209 != nil:
    section.add "X-Amz-Security-Token", valid_615209
  var valid_615210 = header.getOrDefault("X-Amz-Algorithm")
  valid_615210 = validateParameter(valid_615210, JString, required = false,
                                 default = nil)
  if valid_615210 != nil:
    section.add "X-Amz-Algorithm", valid_615210
  var valid_615211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615211 = validateParameter(valid_615211, JString, required = false,
                                 default = nil)
  if valid_615211 != nil:
    section.add "X-Amz-SignedHeaders", valid_615211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615212: Call_GetRemoveUserFromGroup_615198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_615212.validator(path, query, header, formData, body)
  let scheme = call_615212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615212.url(scheme.get, call_615212.host, call_615212.base,
                         call_615212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615212, url, valid)

proc call*(call_615213: Call_GetRemoveUserFromGroup_615198; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615214 = newJObject()
  add(query_615214, "UserName", newJString(UserName))
  add(query_615214, "GroupName", newJString(GroupName))
  add(query_615214, "Action", newJString(Action))
  add(query_615214, "Version", newJString(Version))
  result = call_615213.call(nil, query_615214, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_615198(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_615199, base: "/",
    url: url_GetRemoveUserFromGroup_615200, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_615250 = ref object of OpenApiRestCall_610658
proc url_PostResetServiceSpecificCredential_615252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetServiceSpecificCredential_615251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615253 = query.getOrDefault("Action")
  valid_615253 = validateParameter(valid_615253, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_615253 != nil:
    section.add "Action", valid_615253
  var valid_615254 = query.getOrDefault("Version")
  valid_615254 = validateParameter(valid_615254, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615254 != nil:
    section.add "Version", valid_615254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615255 = header.getOrDefault("X-Amz-Signature")
  valid_615255 = validateParameter(valid_615255, JString, required = false,
                                 default = nil)
  if valid_615255 != nil:
    section.add "X-Amz-Signature", valid_615255
  var valid_615256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615256 = validateParameter(valid_615256, JString, required = false,
                                 default = nil)
  if valid_615256 != nil:
    section.add "X-Amz-Content-Sha256", valid_615256
  var valid_615257 = header.getOrDefault("X-Amz-Date")
  valid_615257 = validateParameter(valid_615257, JString, required = false,
                                 default = nil)
  if valid_615257 != nil:
    section.add "X-Amz-Date", valid_615257
  var valid_615258 = header.getOrDefault("X-Amz-Credential")
  valid_615258 = validateParameter(valid_615258, JString, required = false,
                                 default = nil)
  if valid_615258 != nil:
    section.add "X-Amz-Credential", valid_615258
  var valid_615259 = header.getOrDefault("X-Amz-Security-Token")
  valid_615259 = validateParameter(valid_615259, JString, required = false,
                                 default = nil)
  if valid_615259 != nil:
    section.add "X-Amz-Security-Token", valid_615259
  var valid_615260 = header.getOrDefault("X-Amz-Algorithm")
  valid_615260 = validateParameter(valid_615260, JString, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "X-Amz-Algorithm", valid_615260
  var valid_615261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615261 = validateParameter(valid_615261, JString, required = false,
                                 default = nil)
  if valid_615261 != nil:
    section.add "X-Amz-SignedHeaders", valid_615261
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_615262 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_615262 = validateParameter(valid_615262, JString, required = true,
                                 default = nil)
  if valid_615262 != nil:
    section.add "ServiceSpecificCredentialId", valid_615262
  var valid_615263 = formData.getOrDefault("UserName")
  valid_615263 = validateParameter(valid_615263, JString, required = false,
                                 default = nil)
  if valid_615263 != nil:
    section.add "UserName", valid_615263
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615264: Call_PostResetServiceSpecificCredential_615250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_615264.validator(path, query, header, formData, body)
  let scheme = call_615264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615264.url(scheme.get, call_615264.host, call_615264.base,
                         call_615264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615264, url, valid)

proc call*(call_615265: Call_PostResetServiceSpecificCredential_615250;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615266 = newJObject()
  var formData_615267 = newJObject()
  add(formData_615267, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_615267, "UserName", newJString(UserName))
  add(query_615266, "Action", newJString(Action))
  add(query_615266, "Version", newJString(Version))
  result = call_615265.call(nil, query_615266, nil, formData_615267, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_615250(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_615251, base: "/",
    url: url_PostResetServiceSpecificCredential_615252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_615233 = ref object of OpenApiRestCall_610658
proc url_GetResetServiceSpecificCredential_615235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetServiceSpecificCredential_615234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615236 = query.getOrDefault("UserName")
  valid_615236 = validateParameter(valid_615236, JString, required = false,
                                 default = nil)
  if valid_615236 != nil:
    section.add "UserName", valid_615236
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_615237 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_615237 = validateParameter(valid_615237, JString, required = true,
                                 default = nil)
  if valid_615237 != nil:
    section.add "ServiceSpecificCredentialId", valid_615237
  var valid_615238 = query.getOrDefault("Action")
  valid_615238 = validateParameter(valid_615238, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_615238 != nil:
    section.add "Action", valid_615238
  var valid_615239 = query.getOrDefault("Version")
  valid_615239 = validateParameter(valid_615239, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615239 != nil:
    section.add "Version", valid_615239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615240 = header.getOrDefault("X-Amz-Signature")
  valid_615240 = validateParameter(valid_615240, JString, required = false,
                                 default = nil)
  if valid_615240 != nil:
    section.add "X-Amz-Signature", valid_615240
  var valid_615241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615241 = validateParameter(valid_615241, JString, required = false,
                                 default = nil)
  if valid_615241 != nil:
    section.add "X-Amz-Content-Sha256", valid_615241
  var valid_615242 = header.getOrDefault("X-Amz-Date")
  valid_615242 = validateParameter(valid_615242, JString, required = false,
                                 default = nil)
  if valid_615242 != nil:
    section.add "X-Amz-Date", valid_615242
  var valid_615243 = header.getOrDefault("X-Amz-Credential")
  valid_615243 = validateParameter(valid_615243, JString, required = false,
                                 default = nil)
  if valid_615243 != nil:
    section.add "X-Amz-Credential", valid_615243
  var valid_615244 = header.getOrDefault("X-Amz-Security-Token")
  valid_615244 = validateParameter(valid_615244, JString, required = false,
                                 default = nil)
  if valid_615244 != nil:
    section.add "X-Amz-Security-Token", valid_615244
  var valid_615245 = header.getOrDefault("X-Amz-Algorithm")
  valid_615245 = validateParameter(valid_615245, JString, required = false,
                                 default = nil)
  if valid_615245 != nil:
    section.add "X-Amz-Algorithm", valid_615245
  var valid_615246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615246 = validateParameter(valid_615246, JString, required = false,
                                 default = nil)
  if valid_615246 != nil:
    section.add "X-Amz-SignedHeaders", valid_615246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615247: Call_GetResetServiceSpecificCredential_615233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_615247.validator(path, query, header, formData, body)
  let scheme = call_615247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615247.url(scheme.get, call_615247.host, call_615247.base,
                         call_615247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615247, url, valid)

proc call*(call_615248: Call_GetResetServiceSpecificCredential_615233;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615249 = newJObject()
  add(query_615249, "UserName", newJString(UserName))
  add(query_615249, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_615249, "Action", newJString(Action))
  add(query_615249, "Version", newJString(Version))
  result = call_615248.call(nil, query_615249, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_615233(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_615234, base: "/",
    url: url_GetResetServiceSpecificCredential_615235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_615287 = ref object of OpenApiRestCall_610658
proc url_PostResyncMFADevice_615289(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResyncMFADevice_615288(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615290 = query.getOrDefault("Action")
  valid_615290 = validateParameter(valid_615290, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_615290 != nil:
    section.add "Action", valid_615290
  var valid_615291 = query.getOrDefault("Version")
  valid_615291 = validateParameter(valid_615291, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615291 != nil:
    section.add "Version", valid_615291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615292 = header.getOrDefault("X-Amz-Signature")
  valid_615292 = validateParameter(valid_615292, JString, required = false,
                                 default = nil)
  if valid_615292 != nil:
    section.add "X-Amz-Signature", valid_615292
  var valid_615293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615293 = validateParameter(valid_615293, JString, required = false,
                                 default = nil)
  if valid_615293 != nil:
    section.add "X-Amz-Content-Sha256", valid_615293
  var valid_615294 = header.getOrDefault("X-Amz-Date")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "X-Amz-Date", valid_615294
  var valid_615295 = header.getOrDefault("X-Amz-Credential")
  valid_615295 = validateParameter(valid_615295, JString, required = false,
                                 default = nil)
  if valid_615295 != nil:
    section.add "X-Amz-Credential", valid_615295
  var valid_615296 = header.getOrDefault("X-Amz-Security-Token")
  valid_615296 = validateParameter(valid_615296, JString, required = false,
                                 default = nil)
  if valid_615296 != nil:
    section.add "X-Amz-Security-Token", valid_615296
  var valid_615297 = header.getOrDefault("X-Amz-Algorithm")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-Algorithm", valid_615297
  var valid_615298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615298 = validateParameter(valid_615298, JString, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "X-Amz-SignedHeaders", valid_615298
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_615299 = formData.getOrDefault("AuthenticationCode2")
  valid_615299 = validateParameter(valid_615299, JString, required = true,
                                 default = nil)
  if valid_615299 != nil:
    section.add "AuthenticationCode2", valid_615299
  var valid_615300 = formData.getOrDefault("SerialNumber")
  valid_615300 = validateParameter(valid_615300, JString, required = true,
                                 default = nil)
  if valid_615300 != nil:
    section.add "SerialNumber", valid_615300
  var valid_615301 = formData.getOrDefault("UserName")
  valid_615301 = validateParameter(valid_615301, JString, required = true,
                                 default = nil)
  if valid_615301 != nil:
    section.add "UserName", valid_615301
  var valid_615302 = formData.getOrDefault("AuthenticationCode1")
  valid_615302 = validateParameter(valid_615302, JString, required = true,
                                 default = nil)
  if valid_615302 != nil:
    section.add "AuthenticationCode1", valid_615302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615303: Call_PostResyncMFADevice_615287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615303.validator(path, query, header, formData, body)
  let scheme = call_615303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615303.url(scheme.get, call_615303.host, call_615303.base,
                         call_615303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615303, url, valid)

proc call*(call_615304: Call_PostResyncMFADevice_615287;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_615305 = newJObject()
  var formData_615306 = newJObject()
  add(formData_615306, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_615306, "SerialNumber", newJString(SerialNumber))
  add(formData_615306, "UserName", newJString(UserName))
  add(query_615305, "Action", newJString(Action))
  add(formData_615306, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_615305, "Version", newJString(Version))
  result = call_615304.call(nil, query_615305, nil, formData_615306, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_615287(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_615288, base: "/",
    url: url_PostResyncMFADevice_615289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_615268 = ref object of OpenApiRestCall_610658
proc url_GetResyncMFADevice_615270(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResyncMFADevice_615269(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615271 = query.getOrDefault("UserName")
  valid_615271 = validateParameter(valid_615271, JString, required = true,
                                 default = nil)
  if valid_615271 != nil:
    section.add "UserName", valid_615271
  var valid_615272 = query.getOrDefault("AuthenticationCode1")
  valid_615272 = validateParameter(valid_615272, JString, required = true,
                                 default = nil)
  if valid_615272 != nil:
    section.add "AuthenticationCode1", valid_615272
  var valid_615273 = query.getOrDefault("AuthenticationCode2")
  valid_615273 = validateParameter(valid_615273, JString, required = true,
                                 default = nil)
  if valid_615273 != nil:
    section.add "AuthenticationCode2", valid_615273
  var valid_615274 = query.getOrDefault("SerialNumber")
  valid_615274 = validateParameter(valid_615274, JString, required = true,
                                 default = nil)
  if valid_615274 != nil:
    section.add "SerialNumber", valid_615274
  var valid_615275 = query.getOrDefault("Action")
  valid_615275 = validateParameter(valid_615275, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_615275 != nil:
    section.add "Action", valid_615275
  var valid_615276 = query.getOrDefault("Version")
  valid_615276 = validateParameter(valid_615276, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615276 != nil:
    section.add "Version", valid_615276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615277 = header.getOrDefault("X-Amz-Signature")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "X-Amz-Signature", valid_615277
  var valid_615278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "X-Amz-Content-Sha256", valid_615278
  var valid_615279 = header.getOrDefault("X-Amz-Date")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "X-Amz-Date", valid_615279
  var valid_615280 = header.getOrDefault("X-Amz-Credential")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "X-Amz-Credential", valid_615280
  var valid_615281 = header.getOrDefault("X-Amz-Security-Token")
  valid_615281 = validateParameter(valid_615281, JString, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "X-Amz-Security-Token", valid_615281
  var valid_615282 = header.getOrDefault("X-Amz-Algorithm")
  valid_615282 = validateParameter(valid_615282, JString, required = false,
                                 default = nil)
  if valid_615282 != nil:
    section.add "X-Amz-Algorithm", valid_615282
  var valid_615283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615283 = validateParameter(valid_615283, JString, required = false,
                                 default = nil)
  if valid_615283 != nil:
    section.add "X-Amz-SignedHeaders", valid_615283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615284: Call_GetResyncMFADevice_615268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615284.validator(path, query, header, formData, body)
  let scheme = call_615284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615284.url(scheme.get, call_615284.host, call_615284.base,
                         call_615284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615284, url, valid)

proc call*(call_615285: Call_GetResyncMFADevice_615268; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615286 = newJObject()
  add(query_615286, "UserName", newJString(UserName))
  add(query_615286, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_615286, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_615286, "SerialNumber", newJString(SerialNumber))
  add(query_615286, "Action", newJString(Action))
  add(query_615286, "Version", newJString(Version))
  result = call_615285.call(nil, query_615286, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_615268(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_615269,
    base: "/", url: url_GetResyncMFADevice_615270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_615324 = ref object of OpenApiRestCall_610658
proc url_PostSetDefaultPolicyVersion_615326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDefaultPolicyVersion_615325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615327 = query.getOrDefault("Action")
  valid_615327 = validateParameter(valid_615327, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_615327 != nil:
    section.add "Action", valid_615327
  var valid_615328 = query.getOrDefault("Version")
  valid_615328 = validateParameter(valid_615328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615328 != nil:
    section.add "Version", valid_615328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615329 = header.getOrDefault("X-Amz-Signature")
  valid_615329 = validateParameter(valid_615329, JString, required = false,
                                 default = nil)
  if valid_615329 != nil:
    section.add "X-Amz-Signature", valid_615329
  var valid_615330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615330 = validateParameter(valid_615330, JString, required = false,
                                 default = nil)
  if valid_615330 != nil:
    section.add "X-Amz-Content-Sha256", valid_615330
  var valid_615331 = header.getOrDefault("X-Amz-Date")
  valid_615331 = validateParameter(valid_615331, JString, required = false,
                                 default = nil)
  if valid_615331 != nil:
    section.add "X-Amz-Date", valid_615331
  var valid_615332 = header.getOrDefault("X-Amz-Credential")
  valid_615332 = validateParameter(valid_615332, JString, required = false,
                                 default = nil)
  if valid_615332 != nil:
    section.add "X-Amz-Credential", valid_615332
  var valid_615333 = header.getOrDefault("X-Amz-Security-Token")
  valid_615333 = validateParameter(valid_615333, JString, required = false,
                                 default = nil)
  if valid_615333 != nil:
    section.add "X-Amz-Security-Token", valid_615333
  var valid_615334 = header.getOrDefault("X-Amz-Algorithm")
  valid_615334 = validateParameter(valid_615334, JString, required = false,
                                 default = nil)
  if valid_615334 != nil:
    section.add "X-Amz-Algorithm", valid_615334
  var valid_615335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615335 = validateParameter(valid_615335, JString, required = false,
                                 default = nil)
  if valid_615335 != nil:
    section.add "X-Amz-SignedHeaders", valid_615335
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_615336 = formData.getOrDefault("VersionId")
  valid_615336 = validateParameter(valid_615336, JString, required = true,
                                 default = nil)
  if valid_615336 != nil:
    section.add "VersionId", valid_615336
  var valid_615337 = formData.getOrDefault("PolicyArn")
  valid_615337 = validateParameter(valid_615337, JString, required = true,
                                 default = nil)
  if valid_615337 != nil:
    section.add "PolicyArn", valid_615337
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615338: Call_PostSetDefaultPolicyVersion_615324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615338.validator(path, query, header, formData, body)
  let scheme = call_615338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615338.url(scheme.get, call_615338.host, call_615338.base,
                         call_615338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615338, url, valid)

proc call*(call_615339: Call_PostSetDefaultPolicyVersion_615324; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615340 = newJObject()
  var formData_615341 = newJObject()
  add(formData_615341, "VersionId", newJString(VersionId))
  add(formData_615341, "PolicyArn", newJString(PolicyArn))
  add(query_615340, "Action", newJString(Action))
  add(query_615340, "Version", newJString(Version))
  result = call_615339.call(nil, query_615340, nil, formData_615341, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_615324(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_615325, base: "/",
    url: url_PostSetDefaultPolicyVersion_615326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_615307 = ref object of OpenApiRestCall_610658
proc url_GetSetDefaultPolicyVersion_615309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDefaultPolicyVersion_615308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_615310 = query.getOrDefault("VersionId")
  valid_615310 = validateParameter(valid_615310, JString, required = true,
                                 default = nil)
  if valid_615310 != nil:
    section.add "VersionId", valid_615310
  var valid_615311 = query.getOrDefault("PolicyArn")
  valid_615311 = validateParameter(valid_615311, JString, required = true,
                                 default = nil)
  if valid_615311 != nil:
    section.add "PolicyArn", valid_615311
  var valid_615312 = query.getOrDefault("Action")
  valid_615312 = validateParameter(valid_615312, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_615312 != nil:
    section.add "Action", valid_615312
  var valid_615313 = query.getOrDefault("Version")
  valid_615313 = validateParameter(valid_615313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615313 != nil:
    section.add "Version", valid_615313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615314 = header.getOrDefault("X-Amz-Signature")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "X-Amz-Signature", valid_615314
  var valid_615315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "X-Amz-Content-Sha256", valid_615315
  var valid_615316 = header.getOrDefault("X-Amz-Date")
  valid_615316 = validateParameter(valid_615316, JString, required = false,
                                 default = nil)
  if valid_615316 != nil:
    section.add "X-Amz-Date", valid_615316
  var valid_615317 = header.getOrDefault("X-Amz-Credential")
  valid_615317 = validateParameter(valid_615317, JString, required = false,
                                 default = nil)
  if valid_615317 != nil:
    section.add "X-Amz-Credential", valid_615317
  var valid_615318 = header.getOrDefault("X-Amz-Security-Token")
  valid_615318 = validateParameter(valid_615318, JString, required = false,
                                 default = nil)
  if valid_615318 != nil:
    section.add "X-Amz-Security-Token", valid_615318
  var valid_615319 = header.getOrDefault("X-Amz-Algorithm")
  valid_615319 = validateParameter(valid_615319, JString, required = false,
                                 default = nil)
  if valid_615319 != nil:
    section.add "X-Amz-Algorithm", valid_615319
  var valid_615320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615320 = validateParameter(valid_615320, JString, required = false,
                                 default = nil)
  if valid_615320 != nil:
    section.add "X-Amz-SignedHeaders", valid_615320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615321: Call_GetSetDefaultPolicyVersion_615307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615321.validator(path, query, header, formData, body)
  let scheme = call_615321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615321.url(scheme.get, call_615321.host, call_615321.base,
                         call_615321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615321, url, valid)

proc call*(call_615322: Call_GetSetDefaultPolicyVersion_615307; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615323 = newJObject()
  add(query_615323, "VersionId", newJString(VersionId))
  add(query_615323, "PolicyArn", newJString(PolicyArn))
  add(query_615323, "Action", newJString(Action))
  add(query_615323, "Version", newJString(Version))
  result = call_615322.call(nil, query_615323, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_615307(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_615308, base: "/",
    url: url_GetSetDefaultPolicyVersion_615309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_615358 = ref object of OpenApiRestCall_610658
proc url_PostSetSecurityTokenServicePreferences_615360(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_615359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615361 = query.getOrDefault("Action")
  valid_615361 = validateParameter(valid_615361, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_615361 != nil:
    section.add "Action", valid_615361
  var valid_615362 = query.getOrDefault("Version")
  valid_615362 = validateParameter(valid_615362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615362 != nil:
    section.add "Version", valid_615362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615363 = header.getOrDefault("X-Amz-Signature")
  valid_615363 = validateParameter(valid_615363, JString, required = false,
                                 default = nil)
  if valid_615363 != nil:
    section.add "X-Amz-Signature", valid_615363
  var valid_615364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615364 = validateParameter(valid_615364, JString, required = false,
                                 default = nil)
  if valid_615364 != nil:
    section.add "X-Amz-Content-Sha256", valid_615364
  var valid_615365 = header.getOrDefault("X-Amz-Date")
  valid_615365 = validateParameter(valid_615365, JString, required = false,
                                 default = nil)
  if valid_615365 != nil:
    section.add "X-Amz-Date", valid_615365
  var valid_615366 = header.getOrDefault("X-Amz-Credential")
  valid_615366 = validateParameter(valid_615366, JString, required = false,
                                 default = nil)
  if valid_615366 != nil:
    section.add "X-Amz-Credential", valid_615366
  var valid_615367 = header.getOrDefault("X-Amz-Security-Token")
  valid_615367 = validateParameter(valid_615367, JString, required = false,
                                 default = nil)
  if valid_615367 != nil:
    section.add "X-Amz-Security-Token", valid_615367
  var valid_615368 = header.getOrDefault("X-Amz-Algorithm")
  valid_615368 = validateParameter(valid_615368, JString, required = false,
                                 default = nil)
  if valid_615368 != nil:
    section.add "X-Amz-Algorithm", valid_615368
  var valid_615369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615369 = validateParameter(valid_615369, JString, required = false,
                                 default = nil)
  if valid_615369 != nil:
    section.add "X-Amz-SignedHeaders", valid_615369
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_615370 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_615370 = validateParameter(valid_615370, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_615370 != nil:
    section.add "GlobalEndpointTokenVersion", valid_615370
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615371: Call_PostSetSecurityTokenServicePreferences_615358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_615371.validator(path, query, header, formData, body)
  let scheme = call_615371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615371.url(scheme.get, call_615371.host, call_615371.base,
                         call_615371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615371, url, valid)

proc call*(call_615372: Call_PostSetSecurityTokenServicePreferences_615358;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615373 = newJObject()
  var formData_615374 = newJObject()
  add(formData_615374, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_615373, "Action", newJString(Action))
  add(query_615373, "Version", newJString(Version))
  result = call_615372.call(nil, query_615373, nil, formData_615374, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_615358(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_615359, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_615360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_615342 = ref object of OpenApiRestCall_610658
proc url_GetSetSecurityTokenServicePreferences_615344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_615343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615345 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_615345 = validateParameter(valid_615345, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_615345 != nil:
    section.add "GlobalEndpointTokenVersion", valid_615345
  var valid_615346 = query.getOrDefault("Action")
  valid_615346 = validateParameter(valid_615346, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_615346 != nil:
    section.add "Action", valid_615346
  var valid_615347 = query.getOrDefault("Version")
  valid_615347 = validateParameter(valid_615347, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615347 != nil:
    section.add "Version", valid_615347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615348 = header.getOrDefault("X-Amz-Signature")
  valid_615348 = validateParameter(valid_615348, JString, required = false,
                                 default = nil)
  if valid_615348 != nil:
    section.add "X-Amz-Signature", valid_615348
  var valid_615349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615349 = validateParameter(valid_615349, JString, required = false,
                                 default = nil)
  if valid_615349 != nil:
    section.add "X-Amz-Content-Sha256", valid_615349
  var valid_615350 = header.getOrDefault("X-Amz-Date")
  valid_615350 = validateParameter(valid_615350, JString, required = false,
                                 default = nil)
  if valid_615350 != nil:
    section.add "X-Amz-Date", valid_615350
  var valid_615351 = header.getOrDefault("X-Amz-Credential")
  valid_615351 = validateParameter(valid_615351, JString, required = false,
                                 default = nil)
  if valid_615351 != nil:
    section.add "X-Amz-Credential", valid_615351
  var valid_615352 = header.getOrDefault("X-Amz-Security-Token")
  valid_615352 = validateParameter(valid_615352, JString, required = false,
                                 default = nil)
  if valid_615352 != nil:
    section.add "X-Amz-Security-Token", valid_615352
  var valid_615353 = header.getOrDefault("X-Amz-Algorithm")
  valid_615353 = validateParameter(valid_615353, JString, required = false,
                                 default = nil)
  if valid_615353 != nil:
    section.add "X-Amz-Algorithm", valid_615353
  var valid_615354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615354 = validateParameter(valid_615354, JString, required = false,
                                 default = nil)
  if valid_615354 != nil:
    section.add "X-Amz-SignedHeaders", valid_615354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615355: Call_GetSetSecurityTokenServicePreferences_615342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_615355.validator(path, query, header, formData, body)
  let scheme = call_615355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615355.url(scheme.get, call_615355.host, call_615355.base,
                         call_615355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615355, url, valid)

proc call*(call_615356: Call_GetSetSecurityTokenServicePreferences_615342;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615357 = newJObject()
  add(query_615357, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_615357, "Action", newJString(Action))
  add(query_615357, "Version", newJString(Version))
  result = call_615356.call(nil, query_615357, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_615342(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_615343, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_615344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_615401 = ref object of OpenApiRestCall_610658
proc url_PostSimulateCustomPolicy_615403(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulateCustomPolicy_615402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615404 = query.getOrDefault("Action")
  valid_615404 = validateParameter(valid_615404, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_615404 != nil:
    section.add "Action", valid_615404
  var valid_615405 = query.getOrDefault("Version")
  valid_615405 = validateParameter(valid_615405, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615405 != nil:
    section.add "Version", valid_615405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615406 = header.getOrDefault("X-Amz-Signature")
  valid_615406 = validateParameter(valid_615406, JString, required = false,
                                 default = nil)
  if valid_615406 != nil:
    section.add "X-Amz-Signature", valid_615406
  var valid_615407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615407 = validateParameter(valid_615407, JString, required = false,
                                 default = nil)
  if valid_615407 != nil:
    section.add "X-Amz-Content-Sha256", valid_615407
  var valid_615408 = header.getOrDefault("X-Amz-Date")
  valid_615408 = validateParameter(valid_615408, JString, required = false,
                                 default = nil)
  if valid_615408 != nil:
    section.add "X-Amz-Date", valid_615408
  var valid_615409 = header.getOrDefault("X-Amz-Credential")
  valid_615409 = validateParameter(valid_615409, JString, required = false,
                                 default = nil)
  if valid_615409 != nil:
    section.add "X-Amz-Credential", valid_615409
  var valid_615410 = header.getOrDefault("X-Amz-Security-Token")
  valid_615410 = validateParameter(valid_615410, JString, required = false,
                                 default = nil)
  if valid_615410 != nil:
    section.add "X-Amz-Security-Token", valid_615410
  var valid_615411 = header.getOrDefault("X-Amz-Algorithm")
  valid_615411 = validateParameter(valid_615411, JString, required = false,
                                 default = nil)
  if valid_615411 != nil:
    section.add "X-Amz-Algorithm", valid_615411
  var valid_615412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615412 = validateParameter(valid_615412, JString, required = false,
                                 default = nil)
  if valid_615412 != nil:
    section.add "X-Amz-SignedHeaders", valid_615412
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  section = newJObject()
  var valid_615413 = formData.getOrDefault("ResourceArns")
  valid_615413 = validateParameter(valid_615413, JArray, required = false,
                                 default = nil)
  if valid_615413 != nil:
    section.add "ResourceArns", valid_615413
  var valid_615414 = formData.getOrDefault("ContextEntries")
  valid_615414 = validateParameter(valid_615414, JArray, required = false,
                                 default = nil)
  if valid_615414 != nil:
    section.add "ContextEntries", valid_615414
  var valid_615415 = formData.getOrDefault("CallerArn")
  valid_615415 = validateParameter(valid_615415, JString, required = false,
                                 default = nil)
  if valid_615415 != nil:
    section.add "CallerArn", valid_615415
  var valid_615416 = formData.getOrDefault("ResourceHandlingOption")
  valid_615416 = validateParameter(valid_615416, JString, required = false,
                                 default = nil)
  if valid_615416 != nil:
    section.add "ResourceHandlingOption", valid_615416
  var valid_615417 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_615417 = validateParameter(valid_615417, JArray, required = false,
                                 default = nil)
  if valid_615417 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_615417
  var valid_615418 = formData.getOrDefault("Marker")
  valid_615418 = validateParameter(valid_615418, JString, required = false,
                                 default = nil)
  if valid_615418 != nil:
    section.add "Marker", valid_615418
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_615419 = formData.getOrDefault("ActionNames")
  valid_615419 = validateParameter(valid_615419, JArray, required = true, default = nil)
  if valid_615419 != nil:
    section.add "ActionNames", valid_615419
  var valid_615420 = formData.getOrDefault("MaxItems")
  valid_615420 = validateParameter(valid_615420, JInt, required = false, default = nil)
  if valid_615420 != nil:
    section.add "MaxItems", valid_615420
  var valid_615421 = formData.getOrDefault("ResourcePolicy")
  valid_615421 = validateParameter(valid_615421, JString, required = false,
                                 default = nil)
  if valid_615421 != nil:
    section.add "ResourcePolicy", valid_615421
  var valid_615422 = formData.getOrDefault("PolicyInputList")
  valid_615422 = validateParameter(valid_615422, JArray, required = true, default = nil)
  if valid_615422 != nil:
    section.add "PolicyInputList", valid_615422
  var valid_615423 = formData.getOrDefault("ResourceOwner")
  valid_615423 = validateParameter(valid_615423, JString, required = false,
                                 default = nil)
  if valid_615423 != nil:
    section.add "ResourceOwner", valid_615423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615424: Call_PostSimulateCustomPolicy_615401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_615424.validator(path, query, header, formData, body)
  let scheme = call_615424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615424.url(scheme.get, call_615424.host, call_615424.base,
                         call_615424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615424, url, valid)

proc call*(call_615425: Call_PostSimulateCustomPolicy_615401;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulateCustomPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          ResourceOwner: string = ""): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  var query_615426 = newJObject()
  var formData_615427 = newJObject()
  if ResourceArns != nil:
    formData_615427.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_615427.add "ContextEntries", ContextEntries
  add(formData_615427, "CallerArn", newJString(CallerArn))
  add(formData_615427, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_615427.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_615427, "Marker", newJString(Marker))
  if ActionNames != nil:
    formData_615427.add "ActionNames", ActionNames
  add(query_615426, "Action", newJString(Action))
  add(formData_615427, "MaxItems", newJInt(MaxItems))
  add(formData_615427, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_615426, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_615427.add "PolicyInputList", PolicyInputList
  add(formData_615427, "ResourceOwner", newJString(ResourceOwner))
  result = call_615425.call(nil, query_615426, nil, formData_615427, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_615401(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_615402, base: "/",
    url: url_PostSimulateCustomPolicy_615403, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_615375 = ref object of OpenApiRestCall_610658
proc url_GetSimulateCustomPolicy_615377(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulateCustomPolicy_615376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_615378 = query.getOrDefault("Marker")
  valid_615378 = validateParameter(valid_615378, JString, required = false,
                                 default = nil)
  if valid_615378 != nil:
    section.add "Marker", valid_615378
  var valid_615379 = query.getOrDefault("ResourceOwner")
  valid_615379 = validateParameter(valid_615379, JString, required = false,
                                 default = nil)
  if valid_615379 != nil:
    section.add "ResourceOwner", valid_615379
  var valid_615380 = query.getOrDefault("MaxItems")
  valid_615380 = validateParameter(valid_615380, JInt, required = false, default = nil)
  if valid_615380 != nil:
    section.add "MaxItems", valid_615380
  var valid_615381 = query.getOrDefault("ResourceArns")
  valid_615381 = validateParameter(valid_615381, JArray, required = false,
                                 default = nil)
  if valid_615381 != nil:
    section.add "ResourceArns", valid_615381
  var valid_615382 = query.getOrDefault("ResourcePolicy")
  valid_615382 = validateParameter(valid_615382, JString, required = false,
                                 default = nil)
  if valid_615382 != nil:
    section.add "ResourcePolicy", valid_615382
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_615383 = query.getOrDefault("PolicyInputList")
  valid_615383 = validateParameter(valid_615383, JArray, required = true, default = nil)
  if valid_615383 != nil:
    section.add "PolicyInputList", valid_615383
  var valid_615384 = query.getOrDefault("CallerArn")
  valid_615384 = validateParameter(valid_615384, JString, required = false,
                                 default = nil)
  if valid_615384 != nil:
    section.add "CallerArn", valid_615384
  var valid_615385 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_615385 = validateParameter(valid_615385, JArray, required = false,
                                 default = nil)
  if valid_615385 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_615385
  var valid_615386 = query.getOrDefault("ResourceHandlingOption")
  valid_615386 = validateParameter(valid_615386, JString, required = false,
                                 default = nil)
  if valid_615386 != nil:
    section.add "ResourceHandlingOption", valid_615386
  var valid_615387 = query.getOrDefault("Action")
  valid_615387 = validateParameter(valid_615387, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_615387 != nil:
    section.add "Action", valid_615387
  var valid_615388 = query.getOrDefault("Version")
  valid_615388 = validateParameter(valid_615388, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615388 != nil:
    section.add "Version", valid_615388
  var valid_615389 = query.getOrDefault("ActionNames")
  valid_615389 = validateParameter(valid_615389, JArray, required = true, default = nil)
  if valid_615389 != nil:
    section.add "ActionNames", valid_615389
  var valid_615390 = query.getOrDefault("ContextEntries")
  valid_615390 = validateParameter(valid_615390, JArray, required = false,
                                 default = nil)
  if valid_615390 != nil:
    section.add "ContextEntries", valid_615390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615391 = header.getOrDefault("X-Amz-Signature")
  valid_615391 = validateParameter(valid_615391, JString, required = false,
                                 default = nil)
  if valid_615391 != nil:
    section.add "X-Amz-Signature", valid_615391
  var valid_615392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615392 = validateParameter(valid_615392, JString, required = false,
                                 default = nil)
  if valid_615392 != nil:
    section.add "X-Amz-Content-Sha256", valid_615392
  var valid_615393 = header.getOrDefault("X-Amz-Date")
  valid_615393 = validateParameter(valid_615393, JString, required = false,
                                 default = nil)
  if valid_615393 != nil:
    section.add "X-Amz-Date", valid_615393
  var valid_615394 = header.getOrDefault("X-Amz-Credential")
  valid_615394 = validateParameter(valid_615394, JString, required = false,
                                 default = nil)
  if valid_615394 != nil:
    section.add "X-Amz-Credential", valid_615394
  var valid_615395 = header.getOrDefault("X-Amz-Security-Token")
  valid_615395 = validateParameter(valid_615395, JString, required = false,
                                 default = nil)
  if valid_615395 != nil:
    section.add "X-Amz-Security-Token", valid_615395
  var valid_615396 = header.getOrDefault("X-Amz-Algorithm")
  valid_615396 = validateParameter(valid_615396, JString, required = false,
                                 default = nil)
  if valid_615396 != nil:
    section.add "X-Amz-Algorithm", valid_615396
  var valid_615397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615397 = validateParameter(valid_615397, JString, required = false,
                                 default = nil)
  if valid_615397 != nil:
    section.add "X-Amz-SignedHeaders", valid_615397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615398: Call_GetSimulateCustomPolicy_615375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_615398.validator(path, query, header, formData, body)
  let scheme = call_615398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615398.url(scheme.get, call_615398.host, call_615398.base,
                         call_615398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615398, url, valid)

proc call*(call_615399: Call_GetSimulateCustomPolicy_615375;
          PolicyInputList: JsonNode; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulateCustomPolicy"; Version: string = "2010-05-08";
          ContextEntries: JsonNode = nil): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_615400 = newJObject()
  add(query_615400, "Marker", newJString(Marker))
  add(query_615400, "ResourceOwner", newJString(ResourceOwner))
  add(query_615400, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_615400.add "ResourceArns", ResourceArns
  add(query_615400, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_615400.add "PolicyInputList", PolicyInputList
  add(query_615400, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_615400.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_615400, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_615400, "Action", newJString(Action))
  add(query_615400, "Version", newJString(Version))
  if ActionNames != nil:
    query_615400.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_615400.add "ContextEntries", ContextEntries
  result = call_615399.call(nil, query_615400, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_615375(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_615376, base: "/",
    url: url_GetSimulateCustomPolicy_615377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_615455 = ref object of OpenApiRestCall_610658
proc url_PostSimulatePrincipalPolicy_615457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulatePrincipalPolicy_615456(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615458 = query.getOrDefault("Action")
  valid_615458 = validateParameter(valid_615458, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_615458 != nil:
    section.add "Action", valid_615458
  var valid_615459 = query.getOrDefault("Version")
  valid_615459 = validateParameter(valid_615459, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615459 != nil:
    section.add "Version", valid_615459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615460 = header.getOrDefault("X-Amz-Signature")
  valid_615460 = validateParameter(valid_615460, JString, required = false,
                                 default = nil)
  if valid_615460 != nil:
    section.add "X-Amz-Signature", valid_615460
  var valid_615461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615461 = validateParameter(valid_615461, JString, required = false,
                                 default = nil)
  if valid_615461 != nil:
    section.add "X-Amz-Content-Sha256", valid_615461
  var valid_615462 = header.getOrDefault("X-Amz-Date")
  valid_615462 = validateParameter(valid_615462, JString, required = false,
                                 default = nil)
  if valid_615462 != nil:
    section.add "X-Amz-Date", valid_615462
  var valid_615463 = header.getOrDefault("X-Amz-Credential")
  valid_615463 = validateParameter(valid_615463, JString, required = false,
                                 default = nil)
  if valid_615463 != nil:
    section.add "X-Amz-Credential", valid_615463
  var valid_615464 = header.getOrDefault("X-Amz-Security-Token")
  valid_615464 = validateParameter(valid_615464, JString, required = false,
                                 default = nil)
  if valid_615464 != nil:
    section.add "X-Amz-Security-Token", valid_615464
  var valid_615465 = header.getOrDefault("X-Amz-Algorithm")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "X-Amz-Algorithm", valid_615465
  var valid_615466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "X-Amz-SignedHeaders", valid_615466
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  section = newJObject()
  var valid_615467 = formData.getOrDefault("ResourceArns")
  valid_615467 = validateParameter(valid_615467, JArray, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "ResourceArns", valid_615467
  var valid_615468 = formData.getOrDefault("ContextEntries")
  valid_615468 = validateParameter(valid_615468, JArray, required = false,
                                 default = nil)
  if valid_615468 != nil:
    section.add "ContextEntries", valid_615468
  var valid_615469 = formData.getOrDefault("CallerArn")
  valid_615469 = validateParameter(valid_615469, JString, required = false,
                                 default = nil)
  if valid_615469 != nil:
    section.add "CallerArn", valid_615469
  var valid_615470 = formData.getOrDefault("ResourceHandlingOption")
  valid_615470 = validateParameter(valid_615470, JString, required = false,
                                 default = nil)
  if valid_615470 != nil:
    section.add "ResourceHandlingOption", valid_615470
  var valid_615471 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_615471 = validateParameter(valid_615471, JArray, required = false,
                                 default = nil)
  if valid_615471 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_615471
  var valid_615472 = formData.getOrDefault("Marker")
  valid_615472 = validateParameter(valid_615472, JString, required = false,
                                 default = nil)
  if valid_615472 != nil:
    section.add "Marker", valid_615472
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_615473 = formData.getOrDefault("PolicySourceArn")
  valid_615473 = validateParameter(valid_615473, JString, required = true,
                                 default = nil)
  if valid_615473 != nil:
    section.add "PolicySourceArn", valid_615473
  var valid_615474 = formData.getOrDefault("ActionNames")
  valid_615474 = validateParameter(valid_615474, JArray, required = true, default = nil)
  if valid_615474 != nil:
    section.add "ActionNames", valid_615474
  var valid_615475 = formData.getOrDefault("MaxItems")
  valid_615475 = validateParameter(valid_615475, JInt, required = false, default = nil)
  if valid_615475 != nil:
    section.add "MaxItems", valid_615475
  var valid_615476 = formData.getOrDefault("ResourcePolicy")
  valid_615476 = validateParameter(valid_615476, JString, required = false,
                                 default = nil)
  if valid_615476 != nil:
    section.add "ResourcePolicy", valid_615476
  var valid_615477 = formData.getOrDefault("PolicyInputList")
  valid_615477 = validateParameter(valid_615477, JArray, required = false,
                                 default = nil)
  if valid_615477 != nil:
    section.add "PolicyInputList", valid_615477
  var valid_615478 = formData.getOrDefault("ResourceOwner")
  valid_615478 = validateParameter(valid_615478, JString, required = false,
                                 default = nil)
  if valid_615478 != nil:
    section.add "ResourceOwner", valid_615478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615479: Call_PostSimulatePrincipalPolicy_615455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_615479.validator(path, query, header, formData, body)
  let scheme = call_615479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615479.url(scheme.get, call_615479.host, call_615479.base,
                         call_615479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615479, url, valid)

proc call*(call_615480: Call_PostSimulatePrincipalPolicy_615455;
          PolicySourceArn: string; ActionNames: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          PolicyInputList: JsonNode = nil; ResourceOwner: string = ""): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  var query_615481 = newJObject()
  var formData_615482 = newJObject()
  if ResourceArns != nil:
    formData_615482.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_615482.add "ContextEntries", ContextEntries
  add(formData_615482, "CallerArn", newJString(CallerArn))
  add(formData_615482, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_615482.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_615482, "Marker", newJString(Marker))
  add(formData_615482, "PolicySourceArn", newJString(PolicySourceArn))
  if ActionNames != nil:
    formData_615482.add "ActionNames", ActionNames
  add(query_615481, "Action", newJString(Action))
  add(formData_615482, "MaxItems", newJInt(MaxItems))
  add(formData_615482, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_615481, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_615482.add "PolicyInputList", PolicyInputList
  add(formData_615482, "ResourceOwner", newJString(ResourceOwner))
  result = call_615480.call(nil, query_615481, nil, formData_615482, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_615455(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_615456, base: "/",
    url: url_PostSimulatePrincipalPolicy_615457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_615428 = ref object of OpenApiRestCall_610658
proc url_GetSimulatePrincipalPolicy_615430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulatePrincipalPolicy_615429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_615431 = query.getOrDefault("Marker")
  valid_615431 = validateParameter(valid_615431, JString, required = false,
                                 default = nil)
  if valid_615431 != nil:
    section.add "Marker", valid_615431
  var valid_615432 = query.getOrDefault("ResourceOwner")
  valid_615432 = validateParameter(valid_615432, JString, required = false,
                                 default = nil)
  if valid_615432 != nil:
    section.add "ResourceOwner", valid_615432
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_615433 = query.getOrDefault("PolicySourceArn")
  valid_615433 = validateParameter(valid_615433, JString, required = true,
                                 default = nil)
  if valid_615433 != nil:
    section.add "PolicySourceArn", valid_615433
  var valid_615434 = query.getOrDefault("MaxItems")
  valid_615434 = validateParameter(valid_615434, JInt, required = false, default = nil)
  if valid_615434 != nil:
    section.add "MaxItems", valid_615434
  var valid_615435 = query.getOrDefault("ResourceArns")
  valid_615435 = validateParameter(valid_615435, JArray, required = false,
                                 default = nil)
  if valid_615435 != nil:
    section.add "ResourceArns", valid_615435
  var valid_615436 = query.getOrDefault("ResourcePolicy")
  valid_615436 = validateParameter(valid_615436, JString, required = false,
                                 default = nil)
  if valid_615436 != nil:
    section.add "ResourcePolicy", valid_615436
  var valid_615437 = query.getOrDefault("PolicyInputList")
  valid_615437 = validateParameter(valid_615437, JArray, required = false,
                                 default = nil)
  if valid_615437 != nil:
    section.add "PolicyInputList", valid_615437
  var valid_615438 = query.getOrDefault("CallerArn")
  valid_615438 = validateParameter(valid_615438, JString, required = false,
                                 default = nil)
  if valid_615438 != nil:
    section.add "CallerArn", valid_615438
  var valid_615439 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_615439 = validateParameter(valid_615439, JArray, required = false,
                                 default = nil)
  if valid_615439 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_615439
  var valid_615440 = query.getOrDefault("ResourceHandlingOption")
  valid_615440 = validateParameter(valid_615440, JString, required = false,
                                 default = nil)
  if valid_615440 != nil:
    section.add "ResourceHandlingOption", valid_615440
  var valid_615441 = query.getOrDefault("Action")
  valid_615441 = validateParameter(valid_615441, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_615441 != nil:
    section.add "Action", valid_615441
  var valid_615442 = query.getOrDefault("Version")
  valid_615442 = validateParameter(valid_615442, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615442 != nil:
    section.add "Version", valid_615442
  var valid_615443 = query.getOrDefault("ActionNames")
  valid_615443 = validateParameter(valid_615443, JArray, required = true, default = nil)
  if valid_615443 != nil:
    section.add "ActionNames", valid_615443
  var valid_615444 = query.getOrDefault("ContextEntries")
  valid_615444 = validateParameter(valid_615444, JArray, required = false,
                                 default = nil)
  if valid_615444 != nil:
    section.add "ContextEntries", valid_615444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615445 = header.getOrDefault("X-Amz-Signature")
  valid_615445 = validateParameter(valid_615445, JString, required = false,
                                 default = nil)
  if valid_615445 != nil:
    section.add "X-Amz-Signature", valid_615445
  var valid_615446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615446 = validateParameter(valid_615446, JString, required = false,
                                 default = nil)
  if valid_615446 != nil:
    section.add "X-Amz-Content-Sha256", valid_615446
  var valid_615447 = header.getOrDefault("X-Amz-Date")
  valid_615447 = validateParameter(valid_615447, JString, required = false,
                                 default = nil)
  if valid_615447 != nil:
    section.add "X-Amz-Date", valid_615447
  var valid_615448 = header.getOrDefault("X-Amz-Credential")
  valid_615448 = validateParameter(valid_615448, JString, required = false,
                                 default = nil)
  if valid_615448 != nil:
    section.add "X-Amz-Credential", valid_615448
  var valid_615449 = header.getOrDefault("X-Amz-Security-Token")
  valid_615449 = validateParameter(valid_615449, JString, required = false,
                                 default = nil)
  if valid_615449 != nil:
    section.add "X-Amz-Security-Token", valid_615449
  var valid_615450 = header.getOrDefault("X-Amz-Algorithm")
  valid_615450 = validateParameter(valid_615450, JString, required = false,
                                 default = nil)
  if valid_615450 != nil:
    section.add "X-Amz-Algorithm", valid_615450
  var valid_615451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615451 = validateParameter(valid_615451, JString, required = false,
                                 default = nil)
  if valid_615451 != nil:
    section.add "X-Amz-SignedHeaders", valid_615451
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615452: Call_GetSimulatePrincipalPolicy_615428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_615452.validator(path, query, header, formData, body)
  let scheme = call_615452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615452.url(scheme.get, call_615452.host, call_615452.base,
                         call_615452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615452, url, valid)

proc call*(call_615453: Call_GetSimulatePrincipalPolicy_615428;
          PolicySourceArn: string; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; PolicyInputList: JsonNode = nil;
          CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulatePrincipalPolicy";
          Version: string = "2010-05-08"; ContextEntries: JsonNode = nil): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_615454 = newJObject()
  add(query_615454, "Marker", newJString(Marker))
  add(query_615454, "ResourceOwner", newJString(ResourceOwner))
  add(query_615454, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_615454, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_615454.add "ResourceArns", ResourceArns
  add(query_615454, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_615454.add "PolicyInputList", PolicyInputList
  add(query_615454, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_615454.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_615454, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_615454, "Action", newJString(Action))
  add(query_615454, "Version", newJString(Version))
  if ActionNames != nil:
    query_615454.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_615454.add "ContextEntries", ContextEntries
  result = call_615453.call(nil, query_615454, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_615428(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_615429, base: "/",
    url: url_GetSimulatePrincipalPolicy_615430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_615500 = ref object of OpenApiRestCall_610658
proc url_PostTagRole_615502(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagRole_615501(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615503 = query.getOrDefault("Action")
  valid_615503 = validateParameter(valid_615503, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_615503 != nil:
    section.add "Action", valid_615503
  var valid_615504 = query.getOrDefault("Version")
  valid_615504 = validateParameter(valid_615504, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615504 != nil:
    section.add "Version", valid_615504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615505 = header.getOrDefault("X-Amz-Signature")
  valid_615505 = validateParameter(valid_615505, JString, required = false,
                                 default = nil)
  if valid_615505 != nil:
    section.add "X-Amz-Signature", valid_615505
  var valid_615506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615506 = validateParameter(valid_615506, JString, required = false,
                                 default = nil)
  if valid_615506 != nil:
    section.add "X-Amz-Content-Sha256", valid_615506
  var valid_615507 = header.getOrDefault("X-Amz-Date")
  valid_615507 = validateParameter(valid_615507, JString, required = false,
                                 default = nil)
  if valid_615507 != nil:
    section.add "X-Amz-Date", valid_615507
  var valid_615508 = header.getOrDefault("X-Amz-Credential")
  valid_615508 = validateParameter(valid_615508, JString, required = false,
                                 default = nil)
  if valid_615508 != nil:
    section.add "X-Amz-Credential", valid_615508
  var valid_615509 = header.getOrDefault("X-Amz-Security-Token")
  valid_615509 = validateParameter(valid_615509, JString, required = false,
                                 default = nil)
  if valid_615509 != nil:
    section.add "X-Amz-Security-Token", valid_615509
  var valid_615510 = header.getOrDefault("X-Amz-Algorithm")
  valid_615510 = validateParameter(valid_615510, JString, required = false,
                                 default = nil)
  if valid_615510 != nil:
    section.add "X-Amz-Algorithm", valid_615510
  var valid_615511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615511 = validateParameter(valid_615511, JString, required = false,
                                 default = nil)
  if valid_615511 != nil:
    section.add "X-Amz-SignedHeaders", valid_615511
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615512 = formData.getOrDefault("RoleName")
  valid_615512 = validateParameter(valid_615512, JString, required = true,
                                 default = nil)
  if valid_615512 != nil:
    section.add "RoleName", valid_615512
  var valid_615513 = formData.getOrDefault("Tags")
  valid_615513 = validateParameter(valid_615513, JArray, required = true, default = nil)
  if valid_615513 != nil:
    section.add "Tags", valid_615513
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615514: Call_PostTagRole_615500; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615514.validator(path, query, header, formData, body)
  let scheme = call_615514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615514.url(scheme.get, call_615514.host, call_615514.base,
                         call_615514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615514, url, valid)

proc call*(call_615515: Call_PostTagRole_615500; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Version: string (required)
  var query_615516 = newJObject()
  var formData_615517 = newJObject()
  add(formData_615517, "RoleName", newJString(RoleName))
  add(query_615516, "Action", newJString(Action))
  if Tags != nil:
    formData_615517.add "Tags", Tags
  add(query_615516, "Version", newJString(Version))
  result = call_615515.call(nil, query_615516, nil, formData_615517, nil)

var postTagRole* = Call_PostTagRole_615500(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_615501,
                                        base: "/", url: url_PostTagRole_615502,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_615483 = ref object of OpenApiRestCall_610658
proc url_GetTagRole_615485(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagRole_615484(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_615486 = query.getOrDefault("Tags")
  valid_615486 = validateParameter(valid_615486, JArray, required = true, default = nil)
  if valid_615486 != nil:
    section.add "Tags", valid_615486
  var valid_615487 = query.getOrDefault("RoleName")
  valid_615487 = validateParameter(valid_615487, JString, required = true,
                                 default = nil)
  if valid_615487 != nil:
    section.add "RoleName", valid_615487
  var valid_615488 = query.getOrDefault("Action")
  valid_615488 = validateParameter(valid_615488, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_615488 != nil:
    section.add "Action", valid_615488
  var valid_615489 = query.getOrDefault("Version")
  valid_615489 = validateParameter(valid_615489, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615489 != nil:
    section.add "Version", valid_615489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615490 = header.getOrDefault("X-Amz-Signature")
  valid_615490 = validateParameter(valid_615490, JString, required = false,
                                 default = nil)
  if valid_615490 != nil:
    section.add "X-Amz-Signature", valid_615490
  var valid_615491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615491 = validateParameter(valid_615491, JString, required = false,
                                 default = nil)
  if valid_615491 != nil:
    section.add "X-Amz-Content-Sha256", valid_615491
  var valid_615492 = header.getOrDefault("X-Amz-Date")
  valid_615492 = validateParameter(valid_615492, JString, required = false,
                                 default = nil)
  if valid_615492 != nil:
    section.add "X-Amz-Date", valid_615492
  var valid_615493 = header.getOrDefault("X-Amz-Credential")
  valid_615493 = validateParameter(valid_615493, JString, required = false,
                                 default = nil)
  if valid_615493 != nil:
    section.add "X-Amz-Credential", valid_615493
  var valid_615494 = header.getOrDefault("X-Amz-Security-Token")
  valid_615494 = validateParameter(valid_615494, JString, required = false,
                                 default = nil)
  if valid_615494 != nil:
    section.add "X-Amz-Security-Token", valid_615494
  var valid_615495 = header.getOrDefault("X-Amz-Algorithm")
  valid_615495 = validateParameter(valid_615495, JString, required = false,
                                 default = nil)
  if valid_615495 != nil:
    section.add "X-Amz-Algorithm", valid_615495
  var valid_615496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615496 = validateParameter(valid_615496, JString, required = false,
                                 default = nil)
  if valid_615496 != nil:
    section.add "X-Amz-SignedHeaders", valid_615496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615497: Call_GetTagRole_615483; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615497.validator(path, query, header, formData, body)
  let scheme = call_615497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615497.url(scheme.get, call_615497.host, call_615497.base,
                         call_615497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615497, url, valid)

proc call*(call_615498: Call_GetTagRole_615483; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615499 = newJObject()
  if Tags != nil:
    query_615499.add "Tags", Tags
  add(query_615499, "RoleName", newJString(RoleName))
  add(query_615499, "Action", newJString(Action))
  add(query_615499, "Version", newJString(Version))
  result = call_615498.call(nil, query_615499, nil, nil, nil)

var getTagRole* = Call_GetTagRole_615483(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_615484,
                                      base: "/", url: url_GetTagRole_615485,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_615535 = ref object of OpenApiRestCall_610658
proc url_PostTagUser_615537(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagUser_615536(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615538 = query.getOrDefault("Action")
  valid_615538 = validateParameter(valid_615538, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_615538 != nil:
    section.add "Action", valid_615538
  var valid_615539 = query.getOrDefault("Version")
  valid_615539 = validateParameter(valid_615539, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615539 != nil:
    section.add "Version", valid_615539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615540 = header.getOrDefault("X-Amz-Signature")
  valid_615540 = validateParameter(valid_615540, JString, required = false,
                                 default = nil)
  if valid_615540 != nil:
    section.add "X-Amz-Signature", valid_615540
  var valid_615541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615541 = validateParameter(valid_615541, JString, required = false,
                                 default = nil)
  if valid_615541 != nil:
    section.add "X-Amz-Content-Sha256", valid_615541
  var valid_615542 = header.getOrDefault("X-Amz-Date")
  valid_615542 = validateParameter(valid_615542, JString, required = false,
                                 default = nil)
  if valid_615542 != nil:
    section.add "X-Amz-Date", valid_615542
  var valid_615543 = header.getOrDefault("X-Amz-Credential")
  valid_615543 = validateParameter(valid_615543, JString, required = false,
                                 default = nil)
  if valid_615543 != nil:
    section.add "X-Amz-Credential", valid_615543
  var valid_615544 = header.getOrDefault("X-Amz-Security-Token")
  valid_615544 = validateParameter(valid_615544, JString, required = false,
                                 default = nil)
  if valid_615544 != nil:
    section.add "X-Amz-Security-Token", valid_615544
  var valid_615545 = header.getOrDefault("X-Amz-Algorithm")
  valid_615545 = validateParameter(valid_615545, JString, required = false,
                                 default = nil)
  if valid_615545 != nil:
    section.add "X-Amz-Algorithm", valid_615545
  var valid_615546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615546 = validateParameter(valid_615546, JString, required = false,
                                 default = nil)
  if valid_615546 != nil:
    section.add "X-Amz-SignedHeaders", valid_615546
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615547 = formData.getOrDefault("UserName")
  valid_615547 = validateParameter(valid_615547, JString, required = true,
                                 default = nil)
  if valid_615547 != nil:
    section.add "UserName", valid_615547
  var valid_615548 = formData.getOrDefault("Tags")
  valid_615548 = validateParameter(valid_615548, JArray, required = true, default = nil)
  if valid_615548 != nil:
    section.add "Tags", valid_615548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615549: Call_PostTagUser_615535; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615549.validator(path, query, header, formData, body)
  let scheme = call_615549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615549.url(scheme.get, call_615549.host, call_615549.base,
                         call_615549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615549, url, valid)

proc call*(call_615550: Call_PostTagUser_615535; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Version: string (required)
  var query_615551 = newJObject()
  var formData_615552 = newJObject()
  add(formData_615552, "UserName", newJString(UserName))
  add(query_615551, "Action", newJString(Action))
  if Tags != nil:
    formData_615552.add "Tags", Tags
  add(query_615551, "Version", newJString(Version))
  result = call_615550.call(nil, query_615551, nil, formData_615552, nil)

var postTagUser* = Call_PostTagUser_615535(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_615536,
                                        base: "/", url: url_PostTagUser_615537,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_615518 = ref object of OpenApiRestCall_610658
proc url_GetTagUser_615520(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagUser_615519(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615521 = query.getOrDefault("UserName")
  valid_615521 = validateParameter(valid_615521, JString, required = true,
                                 default = nil)
  if valid_615521 != nil:
    section.add "UserName", valid_615521
  var valid_615522 = query.getOrDefault("Tags")
  valid_615522 = validateParameter(valid_615522, JArray, required = true, default = nil)
  if valid_615522 != nil:
    section.add "Tags", valid_615522
  var valid_615523 = query.getOrDefault("Action")
  valid_615523 = validateParameter(valid_615523, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_615523 != nil:
    section.add "Action", valid_615523
  var valid_615524 = query.getOrDefault("Version")
  valid_615524 = validateParameter(valid_615524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615524 != nil:
    section.add "Version", valid_615524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615525 = header.getOrDefault("X-Amz-Signature")
  valid_615525 = validateParameter(valid_615525, JString, required = false,
                                 default = nil)
  if valid_615525 != nil:
    section.add "X-Amz-Signature", valid_615525
  var valid_615526 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615526 = validateParameter(valid_615526, JString, required = false,
                                 default = nil)
  if valid_615526 != nil:
    section.add "X-Amz-Content-Sha256", valid_615526
  var valid_615527 = header.getOrDefault("X-Amz-Date")
  valid_615527 = validateParameter(valid_615527, JString, required = false,
                                 default = nil)
  if valid_615527 != nil:
    section.add "X-Amz-Date", valid_615527
  var valid_615528 = header.getOrDefault("X-Amz-Credential")
  valid_615528 = validateParameter(valid_615528, JString, required = false,
                                 default = nil)
  if valid_615528 != nil:
    section.add "X-Amz-Credential", valid_615528
  var valid_615529 = header.getOrDefault("X-Amz-Security-Token")
  valid_615529 = validateParameter(valid_615529, JString, required = false,
                                 default = nil)
  if valid_615529 != nil:
    section.add "X-Amz-Security-Token", valid_615529
  var valid_615530 = header.getOrDefault("X-Amz-Algorithm")
  valid_615530 = validateParameter(valid_615530, JString, required = false,
                                 default = nil)
  if valid_615530 != nil:
    section.add "X-Amz-Algorithm", valid_615530
  var valid_615531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615531 = validateParameter(valid_615531, JString, required = false,
                                 default = nil)
  if valid_615531 != nil:
    section.add "X-Amz-SignedHeaders", valid_615531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615532: Call_GetTagUser_615518; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615532.validator(path, query, header, formData, body)
  let scheme = call_615532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615532.url(scheme.get, call_615532.host, call_615532.base,
                         call_615532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615532, url, valid)

proc call*(call_615533: Call_GetTagUser_615518; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615534 = newJObject()
  add(query_615534, "UserName", newJString(UserName))
  if Tags != nil:
    query_615534.add "Tags", Tags
  add(query_615534, "Action", newJString(Action))
  add(query_615534, "Version", newJString(Version))
  result = call_615533.call(nil, query_615534, nil, nil, nil)

var getTagUser* = Call_GetTagUser_615518(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_615519,
                                      base: "/", url: url_GetTagUser_615520,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_615570 = ref object of OpenApiRestCall_610658
proc url_PostUntagRole_615572(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagRole_615571(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615573 = query.getOrDefault("Action")
  valid_615573 = validateParameter(valid_615573, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_615573 != nil:
    section.add "Action", valid_615573
  var valid_615574 = query.getOrDefault("Version")
  valid_615574 = validateParameter(valid_615574, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615574 != nil:
    section.add "Version", valid_615574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615575 = header.getOrDefault("X-Amz-Signature")
  valid_615575 = validateParameter(valid_615575, JString, required = false,
                                 default = nil)
  if valid_615575 != nil:
    section.add "X-Amz-Signature", valid_615575
  var valid_615576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615576 = validateParameter(valid_615576, JString, required = false,
                                 default = nil)
  if valid_615576 != nil:
    section.add "X-Amz-Content-Sha256", valid_615576
  var valid_615577 = header.getOrDefault("X-Amz-Date")
  valid_615577 = validateParameter(valid_615577, JString, required = false,
                                 default = nil)
  if valid_615577 != nil:
    section.add "X-Amz-Date", valid_615577
  var valid_615578 = header.getOrDefault("X-Amz-Credential")
  valid_615578 = validateParameter(valid_615578, JString, required = false,
                                 default = nil)
  if valid_615578 != nil:
    section.add "X-Amz-Credential", valid_615578
  var valid_615579 = header.getOrDefault("X-Amz-Security-Token")
  valid_615579 = validateParameter(valid_615579, JString, required = false,
                                 default = nil)
  if valid_615579 != nil:
    section.add "X-Amz-Security-Token", valid_615579
  var valid_615580 = header.getOrDefault("X-Amz-Algorithm")
  valid_615580 = validateParameter(valid_615580, JString, required = false,
                                 default = nil)
  if valid_615580 != nil:
    section.add "X-Amz-Algorithm", valid_615580
  var valid_615581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615581 = validateParameter(valid_615581, JString, required = false,
                                 default = nil)
  if valid_615581 != nil:
    section.add "X-Amz-SignedHeaders", valid_615581
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_615582 = formData.getOrDefault("TagKeys")
  valid_615582 = validateParameter(valid_615582, JArray, required = true, default = nil)
  if valid_615582 != nil:
    section.add "TagKeys", valid_615582
  var valid_615583 = formData.getOrDefault("RoleName")
  valid_615583 = validateParameter(valid_615583, JString, required = true,
                                 default = nil)
  if valid_615583 != nil:
    section.add "RoleName", valid_615583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615584: Call_PostUntagRole_615570; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615584.validator(path, query, header, formData, body)
  let scheme = call_615584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615584.url(scheme.get, call_615584.host, call_615584.base,
                         call_615584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615584, url, valid)

proc call*(call_615585: Call_PostUntagRole_615570; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615586 = newJObject()
  var formData_615587 = newJObject()
  if TagKeys != nil:
    formData_615587.add "TagKeys", TagKeys
  add(formData_615587, "RoleName", newJString(RoleName))
  add(query_615586, "Action", newJString(Action))
  add(query_615586, "Version", newJString(Version))
  result = call_615585.call(nil, query_615586, nil, formData_615587, nil)

var postUntagRole* = Call_PostUntagRole_615570(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_615571,
    base: "/", url: url_PostUntagRole_615572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_615553 = ref object of OpenApiRestCall_610658
proc url_GetUntagRole_615555(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagRole_615554(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TagKeys` field"
  var valid_615556 = query.getOrDefault("TagKeys")
  valid_615556 = validateParameter(valid_615556, JArray, required = true, default = nil)
  if valid_615556 != nil:
    section.add "TagKeys", valid_615556
  var valid_615557 = query.getOrDefault("RoleName")
  valid_615557 = validateParameter(valid_615557, JString, required = true,
                                 default = nil)
  if valid_615557 != nil:
    section.add "RoleName", valid_615557
  var valid_615558 = query.getOrDefault("Action")
  valid_615558 = validateParameter(valid_615558, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_615558 != nil:
    section.add "Action", valid_615558
  var valid_615559 = query.getOrDefault("Version")
  valid_615559 = validateParameter(valid_615559, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615559 != nil:
    section.add "Version", valid_615559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615560 = header.getOrDefault("X-Amz-Signature")
  valid_615560 = validateParameter(valid_615560, JString, required = false,
                                 default = nil)
  if valid_615560 != nil:
    section.add "X-Amz-Signature", valid_615560
  var valid_615561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615561 = validateParameter(valid_615561, JString, required = false,
                                 default = nil)
  if valid_615561 != nil:
    section.add "X-Amz-Content-Sha256", valid_615561
  var valid_615562 = header.getOrDefault("X-Amz-Date")
  valid_615562 = validateParameter(valid_615562, JString, required = false,
                                 default = nil)
  if valid_615562 != nil:
    section.add "X-Amz-Date", valid_615562
  var valid_615563 = header.getOrDefault("X-Amz-Credential")
  valid_615563 = validateParameter(valid_615563, JString, required = false,
                                 default = nil)
  if valid_615563 != nil:
    section.add "X-Amz-Credential", valid_615563
  var valid_615564 = header.getOrDefault("X-Amz-Security-Token")
  valid_615564 = validateParameter(valid_615564, JString, required = false,
                                 default = nil)
  if valid_615564 != nil:
    section.add "X-Amz-Security-Token", valid_615564
  var valid_615565 = header.getOrDefault("X-Amz-Algorithm")
  valid_615565 = validateParameter(valid_615565, JString, required = false,
                                 default = nil)
  if valid_615565 != nil:
    section.add "X-Amz-Algorithm", valid_615565
  var valid_615566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615566 = validateParameter(valid_615566, JString, required = false,
                                 default = nil)
  if valid_615566 != nil:
    section.add "X-Amz-SignedHeaders", valid_615566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615567: Call_GetUntagRole_615553; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615567.validator(path, query, header, formData, body)
  let scheme = call_615567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615567.url(scheme.get, call_615567.host, call_615567.base,
                         call_615567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615567, url, valid)

proc call*(call_615568: Call_GetUntagRole_615553; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615569 = newJObject()
  if TagKeys != nil:
    query_615569.add "TagKeys", TagKeys
  add(query_615569, "RoleName", newJString(RoleName))
  add(query_615569, "Action", newJString(Action))
  add(query_615569, "Version", newJString(Version))
  result = call_615568.call(nil, query_615569, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_615553(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_615554, base: "/",
    url: url_GetUntagRole_615555, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_615605 = ref object of OpenApiRestCall_610658
proc url_PostUntagUser_615607(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagUser_615606(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615608 = query.getOrDefault("Action")
  valid_615608 = validateParameter(valid_615608, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_615608 != nil:
    section.add "Action", valid_615608
  var valid_615609 = query.getOrDefault("Version")
  valid_615609 = validateParameter(valid_615609, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615609 != nil:
    section.add "Version", valid_615609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615610 = header.getOrDefault("X-Amz-Signature")
  valid_615610 = validateParameter(valid_615610, JString, required = false,
                                 default = nil)
  if valid_615610 != nil:
    section.add "X-Amz-Signature", valid_615610
  var valid_615611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615611 = validateParameter(valid_615611, JString, required = false,
                                 default = nil)
  if valid_615611 != nil:
    section.add "X-Amz-Content-Sha256", valid_615611
  var valid_615612 = header.getOrDefault("X-Amz-Date")
  valid_615612 = validateParameter(valid_615612, JString, required = false,
                                 default = nil)
  if valid_615612 != nil:
    section.add "X-Amz-Date", valid_615612
  var valid_615613 = header.getOrDefault("X-Amz-Credential")
  valid_615613 = validateParameter(valid_615613, JString, required = false,
                                 default = nil)
  if valid_615613 != nil:
    section.add "X-Amz-Credential", valid_615613
  var valid_615614 = header.getOrDefault("X-Amz-Security-Token")
  valid_615614 = validateParameter(valid_615614, JString, required = false,
                                 default = nil)
  if valid_615614 != nil:
    section.add "X-Amz-Security-Token", valid_615614
  var valid_615615 = header.getOrDefault("X-Amz-Algorithm")
  valid_615615 = validateParameter(valid_615615, JString, required = false,
                                 default = nil)
  if valid_615615 != nil:
    section.add "X-Amz-Algorithm", valid_615615
  var valid_615616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615616 = validateParameter(valid_615616, JString, required = false,
                                 default = nil)
  if valid_615616 != nil:
    section.add "X-Amz-SignedHeaders", valid_615616
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_615617 = formData.getOrDefault("TagKeys")
  valid_615617 = validateParameter(valid_615617, JArray, required = true, default = nil)
  if valid_615617 != nil:
    section.add "TagKeys", valid_615617
  var valid_615618 = formData.getOrDefault("UserName")
  valid_615618 = validateParameter(valid_615618, JString, required = true,
                                 default = nil)
  if valid_615618 != nil:
    section.add "UserName", valid_615618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615619: Call_PostUntagUser_615605; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615619.validator(path, query, header, formData, body)
  let scheme = call_615619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615619.url(scheme.get, call_615619.host, call_615619.base,
                         call_615619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615619, url, valid)

proc call*(call_615620: Call_PostUntagUser_615605; TagKeys: JsonNode;
          UserName: string; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615621 = newJObject()
  var formData_615622 = newJObject()
  if TagKeys != nil:
    formData_615622.add "TagKeys", TagKeys
  add(formData_615622, "UserName", newJString(UserName))
  add(query_615621, "Action", newJString(Action))
  add(query_615621, "Version", newJString(Version))
  result = call_615620.call(nil, query_615621, nil, formData_615622, nil)

var postUntagUser* = Call_PostUntagUser_615605(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_615606,
    base: "/", url: url_PostUntagUser_615607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_615588 = ref object of OpenApiRestCall_610658
proc url_GetUntagUser_615590(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagUser_615589(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615591 = query.getOrDefault("UserName")
  valid_615591 = validateParameter(valid_615591, JString, required = true,
                                 default = nil)
  if valid_615591 != nil:
    section.add "UserName", valid_615591
  var valid_615592 = query.getOrDefault("TagKeys")
  valid_615592 = validateParameter(valid_615592, JArray, required = true, default = nil)
  if valid_615592 != nil:
    section.add "TagKeys", valid_615592
  var valid_615593 = query.getOrDefault("Action")
  valid_615593 = validateParameter(valid_615593, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_615593 != nil:
    section.add "Action", valid_615593
  var valid_615594 = query.getOrDefault("Version")
  valid_615594 = validateParameter(valid_615594, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615594 != nil:
    section.add "Version", valid_615594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615595 = header.getOrDefault("X-Amz-Signature")
  valid_615595 = validateParameter(valid_615595, JString, required = false,
                                 default = nil)
  if valid_615595 != nil:
    section.add "X-Amz-Signature", valid_615595
  var valid_615596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615596 = validateParameter(valid_615596, JString, required = false,
                                 default = nil)
  if valid_615596 != nil:
    section.add "X-Amz-Content-Sha256", valid_615596
  var valid_615597 = header.getOrDefault("X-Amz-Date")
  valid_615597 = validateParameter(valid_615597, JString, required = false,
                                 default = nil)
  if valid_615597 != nil:
    section.add "X-Amz-Date", valid_615597
  var valid_615598 = header.getOrDefault("X-Amz-Credential")
  valid_615598 = validateParameter(valid_615598, JString, required = false,
                                 default = nil)
  if valid_615598 != nil:
    section.add "X-Amz-Credential", valid_615598
  var valid_615599 = header.getOrDefault("X-Amz-Security-Token")
  valid_615599 = validateParameter(valid_615599, JString, required = false,
                                 default = nil)
  if valid_615599 != nil:
    section.add "X-Amz-Security-Token", valid_615599
  var valid_615600 = header.getOrDefault("X-Amz-Algorithm")
  valid_615600 = validateParameter(valid_615600, JString, required = false,
                                 default = nil)
  if valid_615600 != nil:
    section.add "X-Amz-Algorithm", valid_615600
  var valid_615601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615601 = validateParameter(valid_615601, JString, required = false,
                                 default = nil)
  if valid_615601 != nil:
    section.add "X-Amz-SignedHeaders", valid_615601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615602: Call_GetUntagUser_615588; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615602.validator(path, query, header, formData, body)
  let scheme = call_615602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615602.url(scheme.get, call_615602.host, call_615602.base,
                         call_615602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615602, url, valid)

proc call*(call_615603: Call_GetUntagUser_615588; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615604 = newJObject()
  add(query_615604, "UserName", newJString(UserName))
  if TagKeys != nil:
    query_615604.add "TagKeys", TagKeys
  add(query_615604, "Action", newJString(Action))
  add(query_615604, "Version", newJString(Version))
  result = call_615603.call(nil, query_615604, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_615588(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_615589, base: "/",
    url: url_GetUntagUser_615590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_615641 = ref object of OpenApiRestCall_610658
proc url_PostUpdateAccessKey_615643(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccessKey_615642(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615644 = query.getOrDefault("Action")
  valid_615644 = validateParameter(valid_615644, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_615644 != nil:
    section.add "Action", valid_615644
  var valid_615645 = query.getOrDefault("Version")
  valid_615645 = validateParameter(valid_615645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615645 != nil:
    section.add "Version", valid_615645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615646 = header.getOrDefault("X-Amz-Signature")
  valid_615646 = validateParameter(valid_615646, JString, required = false,
                                 default = nil)
  if valid_615646 != nil:
    section.add "X-Amz-Signature", valid_615646
  var valid_615647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615647 = validateParameter(valid_615647, JString, required = false,
                                 default = nil)
  if valid_615647 != nil:
    section.add "X-Amz-Content-Sha256", valid_615647
  var valid_615648 = header.getOrDefault("X-Amz-Date")
  valid_615648 = validateParameter(valid_615648, JString, required = false,
                                 default = nil)
  if valid_615648 != nil:
    section.add "X-Amz-Date", valid_615648
  var valid_615649 = header.getOrDefault("X-Amz-Credential")
  valid_615649 = validateParameter(valid_615649, JString, required = false,
                                 default = nil)
  if valid_615649 != nil:
    section.add "X-Amz-Credential", valid_615649
  var valid_615650 = header.getOrDefault("X-Amz-Security-Token")
  valid_615650 = validateParameter(valid_615650, JString, required = false,
                                 default = nil)
  if valid_615650 != nil:
    section.add "X-Amz-Security-Token", valid_615650
  var valid_615651 = header.getOrDefault("X-Amz-Algorithm")
  valid_615651 = validateParameter(valid_615651, JString, required = false,
                                 default = nil)
  if valid_615651 != nil:
    section.add "X-Amz-Algorithm", valid_615651
  var valid_615652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615652 = validateParameter(valid_615652, JString, required = false,
                                 default = nil)
  if valid_615652 != nil:
    section.add "X-Amz-SignedHeaders", valid_615652
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_615653 = formData.getOrDefault("AccessKeyId")
  valid_615653 = validateParameter(valid_615653, JString, required = true,
                                 default = nil)
  if valid_615653 != nil:
    section.add "AccessKeyId", valid_615653
  var valid_615654 = formData.getOrDefault("UserName")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "UserName", valid_615654
  var valid_615655 = formData.getOrDefault("Status")
  valid_615655 = validateParameter(valid_615655, JString, required = true,
                                 default = newJString("Active"))
  if valid_615655 != nil:
    section.add "Status", valid_615655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615656: Call_PostUpdateAccessKey_615641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615656.validator(path, query, header, formData, body)
  let scheme = call_615656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615656.url(scheme.get, call_615656.host, call_615656.base,
                         call_615656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615656, url, valid)

proc call*(call_615657: Call_PostUpdateAccessKey_615641; AccessKeyId: string;
          UserName: string = ""; Action: string = "UpdateAccessKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_615658 = newJObject()
  var formData_615659 = newJObject()
  add(formData_615659, "AccessKeyId", newJString(AccessKeyId))
  add(formData_615659, "UserName", newJString(UserName))
  add(query_615658, "Action", newJString(Action))
  add(formData_615659, "Status", newJString(Status))
  add(query_615658, "Version", newJString(Version))
  result = call_615657.call(nil, query_615658, nil, formData_615659, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_615641(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_615642, base: "/",
    url: url_PostUpdateAccessKey_615643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_615623 = ref object of OpenApiRestCall_610658
proc url_GetUpdateAccessKey_615625(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccessKey_615624(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615626 = query.getOrDefault("UserName")
  valid_615626 = validateParameter(valid_615626, JString, required = false,
                                 default = nil)
  if valid_615626 != nil:
    section.add "UserName", valid_615626
  var valid_615627 = query.getOrDefault("Status")
  valid_615627 = validateParameter(valid_615627, JString, required = true,
                                 default = newJString("Active"))
  if valid_615627 != nil:
    section.add "Status", valid_615627
  var valid_615628 = query.getOrDefault("Action")
  valid_615628 = validateParameter(valid_615628, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_615628 != nil:
    section.add "Action", valid_615628
  var valid_615629 = query.getOrDefault("AccessKeyId")
  valid_615629 = validateParameter(valid_615629, JString, required = true,
                                 default = nil)
  if valid_615629 != nil:
    section.add "AccessKeyId", valid_615629
  var valid_615630 = query.getOrDefault("Version")
  valid_615630 = validateParameter(valid_615630, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615630 != nil:
    section.add "Version", valid_615630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615631 = header.getOrDefault("X-Amz-Signature")
  valid_615631 = validateParameter(valid_615631, JString, required = false,
                                 default = nil)
  if valid_615631 != nil:
    section.add "X-Amz-Signature", valid_615631
  var valid_615632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615632 = validateParameter(valid_615632, JString, required = false,
                                 default = nil)
  if valid_615632 != nil:
    section.add "X-Amz-Content-Sha256", valid_615632
  var valid_615633 = header.getOrDefault("X-Amz-Date")
  valid_615633 = validateParameter(valid_615633, JString, required = false,
                                 default = nil)
  if valid_615633 != nil:
    section.add "X-Amz-Date", valid_615633
  var valid_615634 = header.getOrDefault("X-Amz-Credential")
  valid_615634 = validateParameter(valid_615634, JString, required = false,
                                 default = nil)
  if valid_615634 != nil:
    section.add "X-Amz-Credential", valid_615634
  var valid_615635 = header.getOrDefault("X-Amz-Security-Token")
  valid_615635 = validateParameter(valid_615635, JString, required = false,
                                 default = nil)
  if valid_615635 != nil:
    section.add "X-Amz-Security-Token", valid_615635
  var valid_615636 = header.getOrDefault("X-Amz-Algorithm")
  valid_615636 = validateParameter(valid_615636, JString, required = false,
                                 default = nil)
  if valid_615636 != nil:
    section.add "X-Amz-Algorithm", valid_615636
  var valid_615637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615637 = validateParameter(valid_615637, JString, required = false,
                                 default = nil)
  if valid_615637 != nil:
    section.add "X-Amz-SignedHeaders", valid_615637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615638: Call_GetUpdateAccessKey_615623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615638.validator(path, query, header, formData, body)
  let scheme = call_615638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615638.url(scheme.get, call_615638.host, call_615638.base,
                         call_615638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615638, url, valid)

proc call*(call_615639: Call_GetUpdateAccessKey_615623; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_615640 = newJObject()
  add(query_615640, "UserName", newJString(UserName))
  add(query_615640, "Status", newJString(Status))
  add(query_615640, "Action", newJString(Action))
  add(query_615640, "AccessKeyId", newJString(AccessKeyId))
  add(query_615640, "Version", newJString(Version))
  result = call_615639.call(nil, query_615640, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_615623(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_615624,
    base: "/", url: url_GetUpdateAccessKey_615625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_615684 = ref object of OpenApiRestCall_610658
proc url_PostUpdateAccountPasswordPolicy_615686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_615685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615687 = query.getOrDefault("Action")
  valid_615687 = validateParameter(valid_615687, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_615687 != nil:
    section.add "Action", valid_615687
  var valid_615688 = query.getOrDefault("Version")
  valid_615688 = validateParameter(valid_615688, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615688 != nil:
    section.add "Version", valid_615688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615689 = header.getOrDefault("X-Amz-Signature")
  valid_615689 = validateParameter(valid_615689, JString, required = false,
                                 default = nil)
  if valid_615689 != nil:
    section.add "X-Amz-Signature", valid_615689
  var valid_615690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615690 = validateParameter(valid_615690, JString, required = false,
                                 default = nil)
  if valid_615690 != nil:
    section.add "X-Amz-Content-Sha256", valid_615690
  var valid_615691 = header.getOrDefault("X-Amz-Date")
  valid_615691 = validateParameter(valid_615691, JString, required = false,
                                 default = nil)
  if valid_615691 != nil:
    section.add "X-Amz-Date", valid_615691
  var valid_615692 = header.getOrDefault("X-Amz-Credential")
  valid_615692 = validateParameter(valid_615692, JString, required = false,
                                 default = nil)
  if valid_615692 != nil:
    section.add "X-Amz-Credential", valid_615692
  var valid_615693 = header.getOrDefault("X-Amz-Security-Token")
  valid_615693 = validateParameter(valid_615693, JString, required = false,
                                 default = nil)
  if valid_615693 != nil:
    section.add "X-Amz-Security-Token", valid_615693
  var valid_615694 = header.getOrDefault("X-Amz-Algorithm")
  valid_615694 = validateParameter(valid_615694, JString, required = false,
                                 default = nil)
  if valid_615694 != nil:
    section.add "X-Amz-Algorithm", valid_615694
  var valid_615695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615695 = validateParameter(valid_615695, JString, required = false,
                                 default = nil)
  if valid_615695 != nil:
    section.add "X-Amz-SignedHeaders", valid_615695
  result.add "header", section
  ## parameters in `formData` object:
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_615696 = formData.getOrDefault("HardExpiry")
  valid_615696 = validateParameter(valid_615696, JBool, required = false, default = nil)
  if valid_615696 != nil:
    section.add "HardExpiry", valid_615696
  var valid_615697 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_615697 = validateParameter(valid_615697, JBool, required = false, default = nil)
  if valid_615697 != nil:
    section.add "AllowUsersToChangePassword", valid_615697
  var valid_615698 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_615698 = validateParameter(valid_615698, JBool, required = false, default = nil)
  if valid_615698 != nil:
    section.add "RequireLowercaseCharacters", valid_615698
  var valid_615699 = formData.getOrDefault("RequireNumbers")
  valid_615699 = validateParameter(valid_615699, JBool, required = false, default = nil)
  if valid_615699 != nil:
    section.add "RequireNumbers", valid_615699
  var valid_615700 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_615700 = validateParameter(valid_615700, JBool, required = false, default = nil)
  if valid_615700 != nil:
    section.add "RequireUppercaseCharacters", valid_615700
  var valid_615701 = formData.getOrDefault("MaxPasswordAge")
  valid_615701 = validateParameter(valid_615701, JInt, required = false, default = nil)
  if valid_615701 != nil:
    section.add "MaxPasswordAge", valid_615701
  var valid_615702 = formData.getOrDefault("PasswordReusePrevention")
  valid_615702 = validateParameter(valid_615702, JInt, required = false, default = nil)
  if valid_615702 != nil:
    section.add "PasswordReusePrevention", valid_615702
  var valid_615703 = formData.getOrDefault("RequireSymbols")
  valid_615703 = validateParameter(valid_615703, JBool, required = false, default = nil)
  if valid_615703 != nil:
    section.add "RequireSymbols", valid_615703
  var valid_615704 = formData.getOrDefault("MinimumPasswordLength")
  valid_615704 = validateParameter(valid_615704, JInt, required = false, default = nil)
  if valid_615704 != nil:
    section.add "MinimumPasswordLength", valid_615704
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615705: Call_PostUpdateAccountPasswordPolicy_615684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615705.validator(path, query, header, formData, body)
  let scheme = call_615705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615705.url(scheme.get, call_615705.host, call_615705.base,
                         call_615705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615705, url, valid)

proc call*(call_615706: Call_PostUpdateAccountPasswordPolicy_615684;
          HardExpiry: bool = false; AllowUsersToChangePassword: bool = false;
          RequireLowercaseCharacters: bool = false; RequireNumbers: bool = false;
          RequireUppercaseCharacters: bool = false; MaxPasswordAge: int = 0;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0; Version: string = "2010-05-08";
          RequireSymbols: bool = false; MinimumPasswordLength: int = 0): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Version: string (required)
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_615707 = newJObject()
  var formData_615708 = newJObject()
  add(formData_615708, "HardExpiry", newJBool(HardExpiry))
  add(formData_615708, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_615708, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_615708, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_615708, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_615708, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_615707, "Action", newJString(Action))
  add(formData_615708, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_615707, "Version", newJString(Version))
  add(formData_615708, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_615708, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_615706.call(nil, query_615707, nil, formData_615708, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_615684(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_615685, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_615686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_615660 = ref object of OpenApiRestCall_610658
proc url_GetUpdateAccountPasswordPolicy_615662(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_615661(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615663 = query.getOrDefault("RequireUppercaseCharacters")
  valid_615663 = validateParameter(valid_615663, JBool, required = false, default = nil)
  if valid_615663 != nil:
    section.add "RequireUppercaseCharacters", valid_615663
  var valid_615664 = query.getOrDefault("MinimumPasswordLength")
  valid_615664 = validateParameter(valid_615664, JInt, required = false, default = nil)
  if valid_615664 != nil:
    section.add "MinimumPasswordLength", valid_615664
  var valid_615665 = query.getOrDefault("RequireNumbers")
  valid_615665 = validateParameter(valid_615665, JBool, required = false, default = nil)
  if valid_615665 != nil:
    section.add "RequireNumbers", valid_615665
  var valid_615666 = query.getOrDefault("AllowUsersToChangePassword")
  valid_615666 = validateParameter(valid_615666, JBool, required = false, default = nil)
  if valid_615666 != nil:
    section.add "AllowUsersToChangePassword", valid_615666
  var valid_615667 = query.getOrDefault("MaxPasswordAge")
  valid_615667 = validateParameter(valid_615667, JInt, required = false, default = nil)
  if valid_615667 != nil:
    section.add "MaxPasswordAge", valid_615667
  var valid_615668 = query.getOrDefault("RequireSymbols")
  valid_615668 = validateParameter(valid_615668, JBool, required = false, default = nil)
  if valid_615668 != nil:
    section.add "RequireSymbols", valid_615668
  var valid_615669 = query.getOrDefault("Action")
  valid_615669 = validateParameter(valid_615669, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_615669 != nil:
    section.add "Action", valid_615669
  var valid_615670 = query.getOrDefault("PasswordReusePrevention")
  valid_615670 = validateParameter(valid_615670, JInt, required = false, default = nil)
  if valid_615670 != nil:
    section.add "PasswordReusePrevention", valid_615670
  var valid_615671 = query.getOrDefault("RequireLowercaseCharacters")
  valid_615671 = validateParameter(valid_615671, JBool, required = false, default = nil)
  if valid_615671 != nil:
    section.add "RequireLowercaseCharacters", valid_615671
  var valid_615672 = query.getOrDefault("HardExpiry")
  valid_615672 = validateParameter(valid_615672, JBool, required = false, default = nil)
  if valid_615672 != nil:
    section.add "HardExpiry", valid_615672
  var valid_615673 = query.getOrDefault("Version")
  valid_615673 = validateParameter(valid_615673, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615673 != nil:
    section.add "Version", valid_615673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615674 = header.getOrDefault("X-Amz-Signature")
  valid_615674 = validateParameter(valid_615674, JString, required = false,
                                 default = nil)
  if valid_615674 != nil:
    section.add "X-Amz-Signature", valid_615674
  var valid_615675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615675 = validateParameter(valid_615675, JString, required = false,
                                 default = nil)
  if valid_615675 != nil:
    section.add "X-Amz-Content-Sha256", valid_615675
  var valid_615676 = header.getOrDefault("X-Amz-Date")
  valid_615676 = validateParameter(valid_615676, JString, required = false,
                                 default = nil)
  if valid_615676 != nil:
    section.add "X-Amz-Date", valid_615676
  var valid_615677 = header.getOrDefault("X-Amz-Credential")
  valid_615677 = validateParameter(valid_615677, JString, required = false,
                                 default = nil)
  if valid_615677 != nil:
    section.add "X-Amz-Credential", valid_615677
  var valid_615678 = header.getOrDefault("X-Amz-Security-Token")
  valid_615678 = validateParameter(valid_615678, JString, required = false,
                                 default = nil)
  if valid_615678 != nil:
    section.add "X-Amz-Security-Token", valid_615678
  var valid_615679 = header.getOrDefault("X-Amz-Algorithm")
  valid_615679 = validateParameter(valid_615679, JString, required = false,
                                 default = nil)
  if valid_615679 != nil:
    section.add "X-Amz-Algorithm", valid_615679
  var valid_615680 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615680 = validateParameter(valid_615680, JString, required = false,
                                 default = nil)
  if valid_615680 != nil:
    section.add "X-Amz-SignedHeaders", valid_615680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615681: Call_GetUpdateAccountPasswordPolicy_615660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615681.validator(path, query, header, formData, body)
  let scheme = call_615681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615681.url(scheme.get, call_615681.host, call_615681.base,
                         call_615681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615681, url, valid)

proc call*(call_615682: Call_GetUpdateAccountPasswordPolicy_615660;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireNumbers: bool = false; AllowUsersToChangePassword: bool = false;
          MaxPasswordAge: int = 0; RequireSymbols: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireLowercaseCharacters: bool = false; HardExpiry: bool = false;
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: string (required)
  var query_615683 = newJObject()
  add(query_615683, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_615683, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(query_615683, "RequireNumbers", newJBool(RequireNumbers))
  add(query_615683, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_615683, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_615683, "RequireSymbols", newJBool(RequireSymbols))
  add(query_615683, "Action", newJString(Action))
  add(query_615683, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_615683, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_615683, "HardExpiry", newJBool(HardExpiry))
  add(query_615683, "Version", newJString(Version))
  result = call_615682.call(nil, query_615683, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_615660(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_615661, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_615662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_615726 = ref object of OpenApiRestCall_610658
proc url_PostUpdateAssumeRolePolicy_615728(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_615727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615729 = query.getOrDefault("Action")
  valid_615729 = validateParameter(valid_615729, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_615729 != nil:
    section.add "Action", valid_615729
  var valid_615730 = query.getOrDefault("Version")
  valid_615730 = validateParameter(valid_615730, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615730 != nil:
    section.add "Version", valid_615730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615731 = header.getOrDefault("X-Amz-Signature")
  valid_615731 = validateParameter(valid_615731, JString, required = false,
                                 default = nil)
  if valid_615731 != nil:
    section.add "X-Amz-Signature", valid_615731
  var valid_615732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615732 = validateParameter(valid_615732, JString, required = false,
                                 default = nil)
  if valid_615732 != nil:
    section.add "X-Amz-Content-Sha256", valid_615732
  var valid_615733 = header.getOrDefault("X-Amz-Date")
  valid_615733 = validateParameter(valid_615733, JString, required = false,
                                 default = nil)
  if valid_615733 != nil:
    section.add "X-Amz-Date", valid_615733
  var valid_615734 = header.getOrDefault("X-Amz-Credential")
  valid_615734 = validateParameter(valid_615734, JString, required = false,
                                 default = nil)
  if valid_615734 != nil:
    section.add "X-Amz-Credential", valid_615734
  var valid_615735 = header.getOrDefault("X-Amz-Security-Token")
  valid_615735 = validateParameter(valid_615735, JString, required = false,
                                 default = nil)
  if valid_615735 != nil:
    section.add "X-Amz-Security-Token", valid_615735
  var valid_615736 = header.getOrDefault("X-Amz-Algorithm")
  valid_615736 = validateParameter(valid_615736, JString, required = false,
                                 default = nil)
  if valid_615736 != nil:
    section.add "X-Amz-Algorithm", valid_615736
  var valid_615737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615737 = validateParameter(valid_615737, JString, required = false,
                                 default = nil)
  if valid_615737 != nil:
    section.add "X-Amz-SignedHeaders", valid_615737
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_615738 = formData.getOrDefault("PolicyDocument")
  valid_615738 = validateParameter(valid_615738, JString, required = true,
                                 default = nil)
  if valid_615738 != nil:
    section.add "PolicyDocument", valid_615738
  var valid_615739 = formData.getOrDefault("RoleName")
  valid_615739 = validateParameter(valid_615739, JString, required = true,
                                 default = nil)
  if valid_615739 != nil:
    section.add "RoleName", valid_615739
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615740: Call_PostUpdateAssumeRolePolicy_615726; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_615740.validator(path, query, header, formData, body)
  let scheme = call_615740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615740.url(scheme.get, call_615740.host, call_615740.base,
                         call_615740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615740, url, valid)

proc call*(call_615741: Call_PostUpdateAssumeRolePolicy_615726;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615742 = newJObject()
  var formData_615743 = newJObject()
  add(formData_615743, "PolicyDocument", newJString(PolicyDocument))
  add(formData_615743, "RoleName", newJString(RoleName))
  add(query_615742, "Action", newJString(Action))
  add(query_615742, "Version", newJString(Version))
  result = call_615741.call(nil, query_615742, nil, formData_615743, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_615726(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_615727, base: "/",
    url: url_PostUpdateAssumeRolePolicy_615728,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_615709 = ref object of OpenApiRestCall_610658
proc url_GetUpdateAssumeRolePolicy_615711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_615710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_615712 = query.getOrDefault("RoleName")
  valid_615712 = validateParameter(valid_615712, JString, required = true,
                                 default = nil)
  if valid_615712 != nil:
    section.add "RoleName", valid_615712
  var valid_615713 = query.getOrDefault("PolicyDocument")
  valid_615713 = validateParameter(valid_615713, JString, required = true,
                                 default = nil)
  if valid_615713 != nil:
    section.add "PolicyDocument", valid_615713
  var valid_615714 = query.getOrDefault("Action")
  valid_615714 = validateParameter(valid_615714, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_615714 != nil:
    section.add "Action", valid_615714
  var valid_615715 = query.getOrDefault("Version")
  valid_615715 = validateParameter(valid_615715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615715 != nil:
    section.add "Version", valid_615715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615716 = header.getOrDefault("X-Amz-Signature")
  valid_615716 = validateParameter(valid_615716, JString, required = false,
                                 default = nil)
  if valid_615716 != nil:
    section.add "X-Amz-Signature", valid_615716
  var valid_615717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615717 = validateParameter(valid_615717, JString, required = false,
                                 default = nil)
  if valid_615717 != nil:
    section.add "X-Amz-Content-Sha256", valid_615717
  var valid_615718 = header.getOrDefault("X-Amz-Date")
  valid_615718 = validateParameter(valid_615718, JString, required = false,
                                 default = nil)
  if valid_615718 != nil:
    section.add "X-Amz-Date", valid_615718
  var valid_615719 = header.getOrDefault("X-Amz-Credential")
  valid_615719 = validateParameter(valid_615719, JString, required = false,
                                 default = nil)
  if valid_615719 != nil:
    section.add "X-Amz-Credential", valid_615719
  var valid_615720 = header.getOrDefault("X-Amz-Security-Token")
  valid_615720 = validateParameter(valid_615720, JString, required = false,
                                 default = nil)
  if valid_615720 != nil:
    section.add "X-Amz-Security-Token", valid_615720
  var valid_615721 = header.getOrDefault("X-Amz-Algorithm")
  valid_615721 = validateParameter(valid_615721, JString, required = false,
                                 default = nil)
  if valid_615721 != nil:
    section.add "X-Amz-Algorithm", valid_615721
  var valid_615722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615722 = validateParameter(valid_615722, JString, required = false,
                                 default = nil)
  if valid_615722 != nil:
    section.add "X-Amz-SignedHeaders", valid_615722
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615723: Call_GetUpdateAssumeRolePolicy_615709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_615723.validator(path, query, header, formData, body)
  let scheme = call_615723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615723.url(scheme.get, call_615723.host, call_615723.base,
                         call_615723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615723, url, valid)

proc call*(call_615724: Call_GetUpdateAssumeRolePolicy_615709; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615725 = newJObject()
  add(query_615725, "RoleName", newJString(RoleName))
  add(query_615725, "PolicyDocument", newJString(PolicyDocument))
  add(query_615725, "Action", newJString(Action))
  add(query_615725, "Version", newJString(Version))
  result = call_615724.call(nil, query_615725, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_615709(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_615710, base: "/",
    url: url_GetUpdateAssumeRolePolicy_615711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_615762 = ref object of OpenApiRestCall_610658
proc url_PostUpdateGroup_615764(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateGroup_615763(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615765 = query.getOrDefault("Action")
  valid_615765 = validateParameter(valid_615765, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_615765 != nil:
    section.add "Action", valid_615765
  var valid_615766 = query.getOrDefault("Version")
  valid_615766 = validateParameter(valid_615766, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615766 != nil:
    section.add "Version", valid_615766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615767 = header.getOrDefault("X-Amz-Signature")
  valid_615767 = validateParameter(valid_615767, JString, required = false,
                                 default = nil)
  if valid_615767 != nil:
    section.add "X-Amz-Signature", valid_615767
  var valid_615768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615768 = validateParameter(valid_615768, JString, required = false,
                                 default = nil)
  if valid_615768 != nil:
    section.add "X-Amz-Content-Sha256", valid_615768
  var valid_615769 = header.getOrDefault("X-Amz-Date")
  valid_615769 = validateParameter(valid_615769, JString, required = false,
                                 default = nil)
  if valid_615769 != nil:
    section.add "X-Amz-Date", valid_615769
  var valid_615770 = header.getOrDefault("X-Amz-Credential")
  valid_615770 = validateParameter(valid_615770, JString, required = false,
                                 default = nil)
  if valid_615770 != nil:
    section.add "X-Amz-Credential", valid_615770
  var valid_615771 = header.getOrDefault("X-Amz-Security-Token")
  valid_615771 = validateParameter(valid_615771, JString, required = false,
                                 default = nil)
  if valid_615771 != nil:
    section.add "X-Amz-Security-Token", valid_615771
  var valid_615772 = header.getOrDefault("X-Amz-Algorithm")
  valid_615772 = validateParameter(valid_615772, JString, required = false,
                                 default = nil)
  if valid_615772 != nil:
    section.add "X-Amz-Algorithm", valid_615772
  var valid_615773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615773 = validateParameter(valid_615773, JString, required = false,
                                 default = nil)
  if valid_615773 != nil:
    section.add "X-Amz-SignedHeaders", valid_615773
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_615774 = formData.getOrDefault("NewGroupName")
  valid_615774 = validateParameter(valid_615774, JString, required = false,
                                 default = nil)
  if valid_615774 != nil:
    section.add "NewGroupName", valid_615774
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_615775 = formData.getOrDefault("GroupName")
  valid_615775 = validateParameter(valid_615775, JString, required = true,
                                 default = nil)
  if valid_615775 != nil:
    section.add "GroupName", valid_615775
  var valid_615776 = formData.getOrDefault("NewPath")
  valid_615776 = validateParameter(valid_615776, JString, required = false,
                                 default = nil)
  if valid_615776 != nil:
    section.add "NewPath", valid_615776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615777: Call_PostUpdateGroup_615762; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_615777.validator(path, query, header, formData, body)
  let scheme = call_615777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615777.url(scheme.get, call_615777.host, call_615777.base,
                         call_615777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615777, url, valid)

proc call*(call_615778: Call_PostUpdateGroup_615762; GroupName: string;
          NewGroupName: string = ""; NewPath: string = "";
          Action: string = "UpdateGroup"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615779 = newJObject()
  var formData_615780 = newJObject()
  add(formData_615780, "NewGroupName", newJString(NewGroupName))
  add(formData_615780, "GroupName", newJString(GroupName))
  add(formData_615780, "NewPath", newJString(NewPath))
  add(query_615779, "Action", newJString(Action))
  add(query_615779, "Version", newJString(Version))
  result = call_615778.call(nil, query_615779, nil, formData_615780, nil)

var postUpdateGroup* = Call_PostUpdateGroup_615762(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_615763,
    base: "/", url: url_PostUpdateGroup_615764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_615744 = ref object of OpenApiRestCall_610658
proc url_GetUpdateGroup_615746(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateGroup_615745(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_615747 = query.getOrDefault("GroupName")
  valid_615747 = validateParameter(valid_615747, JString, required = true,
                                 default = nil)
  if valid_615747 != nil:
    section.add "GroupName", valid_615747
  var valid_615748 = query.getOrDefault("NewPath")
  valid_615748 = validateParameter(valid_615748, JString, required = false,
                                 default = nil)
  if valid_615748 != nil:
    section.add "NewPath", valid_615748
  var valid_615749 = query.getOrDefault("Action")
  valid_615749 = validateParameter(valid_615749, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_615749 != nil:
    section.add "Action", valid_615749
  var valid_615750 = query.getOrDefault("NewGroupName")
  valid_615750 = validateParameter(valid_615750, JString, required = false,
                                 default = nil)
  if valid_615750 != nil:
    section.add "NewGroupName", valid_615750
  var valid_615751 = query.getOrDefault("Version")
  valid_615751 = validateParameter(valid_615751, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615751 != nil:
    section.add "Version", valid_615751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615752 = header.getOrDefault("X-Amz-Signature")
  valid_615752 = validateParameter(valid_615752, JString, required = false,
                                 default = nil)
  if valid_615752 != nil:
    section.add "X-Amz-Signature", valid_615752
  var valid_615753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615753 = validateParameter(valid_615753, JString, required = false,
                                 default = nil)
  if valid_615753 != nil:
    section.add "X-Amz-Content-Sha256", valid_615753
  var valid_615754 = header.getOrDefault("X-Amz-Date")
  valid_615754 = validateParameter(valid_615754, JString, required = false,
                                 default = nil)
  if valid_615754 != nil:
    section.add "X-Amz-Date", valid_615754
  var valid_615755 = header.getOrDefault("X-Amz-Credential")
  valid_615755 = validateParameter(valid_615755, JString, required = false,
                                 default = nil)
  if valid_615755 != nil:
    section.add "X-Amz-Credential", valid_615755
  var valid_615756 = header.getOrDefault("X-Amz-Security-Token")
  valid_615756 = validateParameter(valid_615756, JString, required = false,
                                 default = nil)
  if valid_615756 != nil:
    section.add "X-Amz-Security-Token", valid_615756
  var valid_615757 = header.getOrDefault("X-Amz-Algorithm")
  valid_615757 = validateParameter(valid_615757, JString, required = false,
                                 default = nil)
  if valid_615757 != nil:
    section.add "X-Amz-Algorithm", valid_615757
  var valid_615758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615758 = validateParameter(valid_615758, JString, required = false,
                                 default = nil)
  if valid_615758 != nil:
    section.add "X-Amz-SignedHeaders", valid_615758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615759: Call_GetUpdateGroup_615744; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_615759.validator(path, query, header, formData, body)
  let scheme = call_615759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615759.url(scheme.get, call_615759.host, call_615759.base,
                         call_615759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615759, url, valid)

proc call*(call_615760: Call_GetUpdateGroup_615744; GroupName: string;
          NewPath: string = ""; Action: string = "UpdateGroup";
          NewGroupName: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_615761 = newJObject()
  add(query_615761, "GroupName", newJString(GroupName))
  add(query_615761, "NewPath", newJString(NewPath))
  add(query_615761, "Action", newJString(Action))
  add(query_615761, "NewGroupName", newJString(NewGroupName))
  add(query_615761, "Version", newJString(Version))
  result = call_615760.call(nil, query_615761, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_615744(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_615745,
    base: "/", url: url_GetUpdateGroup_615746, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_615799 = ref object of OpenApiRestCall_610658
proc url_PostUpdateLoginProfile_615801(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateLoginProfile_615800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615802 = query.getOrDefault("Action")
  valid_615802 = validateParameter(valid_615802, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_615802 != nil:
    section.add "Action", valid_615802
  var valid_615803 = query.getOrDefault("Version")
  valid_615803 = validateParameter(valid_615803, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615803 != nil:
    section.add "Version", valid_615803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615804 = header.getOrDefault("X-Amz-Signature")
  valid_615804 = validateParameter(valid_615804, JString, required = false,
                                 default = nil)
  if valid_615804 != nil:
    section.add "X-Amz-Signature", valid_615804
  var valid_615805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615805 = validateParameter(valid_615805, JString, required = false,
                                 default = nil)
  if valid_615805 != nil:
    section.add "X-Amz-Content-Sha256", valid_615805
  var valid_615806 = header.getOrDefault("X-Amz-Date")
  valid_615806 = validateParameter(valid_615806, JString, required = false,
                                 default = nil)
  if valid_615806 != nil:
    section.add "X-Amz-Date", valid_615806
  var valid_615807 = header.getOrDefault("X-Amz-Credential")
  valid_615807 = validateParameter(valid_615807, JString, required = false,
                                 default = nil)
  if valid_615807 != nil:
    section.add "X-Amz-Credential", valid_615807
  var valid_615808 = header.getOrDefault("X-Amz-Security-Token")
  valid_615808 = validateParameter(valid_615808, JString, required = false,
                                 default = nil)
  if valid_615808 != nil:
    section.add "X-Amz-Security-Token", valid_615808
  var valid_615809 = header.getOrDefault("X-Amz-Algorithm")
  valid_615809 = validateParameter(valid_615809, JString, required = false,
                                 default = nil)
  if valid_615809 != nil:
    section.add "X-Amz-Algorithm", valid_615809
  var valid_615810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615810 = validateParameter(valid_615810, JString, required = false,
                                 default = nil)
  if valid_615810 != nil:
    section.add "X-Amz-SignedHeaders", valid_615810
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  var valid_615811 = formData.getOrDefault("Password")
  valid_615811 = validateParameter(valid_615811, JString, required = false,
                                 default = nil)
  if valid_615811 != nil:
    section.add "Password", valid_615811
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615812 = formData.getOrDefault("UserName")
  valid_615812 = validateParameter(valid_615812, JString, required = true,
                                 default = nil)
  if valid_615812 != nil:
    section.add "UserName", valid_615812
  var valid_615813 = formData.getOrDefault("PasswordResetRequired")
  valid_615813 = validateParameter(valid_615813, JBool, required = false, default = nil)
  if valid_615813 != nil:
    section.add "PasswordResetRequired", valid_615813
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615814: Call_PostUpdateLoginProfile_615799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615814.validator(path, query, header, formData, body)
  let scheme = call_615814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615814.url(scheme.get, call_615814.host, call_615814.base,
                         call_615814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615814, url, valid)

proc call*(call_615815: Call_PostUpdateLoginProfile_615799; UserName: string;
          Password: string = ""; Action: string = "UpdateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Version: string (required)
  var query_615816 = newJObject()
  var formData_615817 = newJObject()
  add(formData_615817, "Password", newJString(Password))
  add(formData_615817, "UserName", newJString(UserName))
  add(query_615816, "Action", newJString(Action))
  add(formData_615817, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_615816, "Version", newJString(Version))
  result = call_615815.call(nil, query_615816, nil, formData_615817, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_615799(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_615800, base: "/",
    url: url_PostUpdateLoginProfile_615801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_615781 = ref object of OpenApiRestCall_610658
proc url_GetUpdateLoginProfile_615783(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateLoginProfile_615782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615784 = query.getOrDefault("Password")
  valid_615784 = validateParameter(valid_615784, JString, required = false,
                                 default = nil)
  if valid_615784 != nil:
    section.add "Password", valid_615784
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615785 = query.getOrDefault("UserName")
  valid_615785 = validateParameter(valid_615785, JString, required = true,
                                 default = nil)
  if valid_615785 != nil:
    section.add "UserName", valid_615785
  var valid_615786 = query.getOrDefault("PasswordResetRequired")
  valid_615786 = validateParameter(valid_615786, JBool, required = false, default = nil)
  if valid_615786 != nil:
    section.add "PasswordResetRequired", valid_615786
  var valid_615787 = query.getOrDefault("Action")
  valid_615787 = validateParameter(valid_615787, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_615787 != nil:
    section.add "Action", valid_615787
  var valid_615788 = query.getOrDefault("Version")
  valid_615788 = validateParameter(valid_615788, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615788 != nil:
    section.add "Version", valid_615788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615789 = header.getOrDefault("X-Amz-Signature")
  valid_615789 = validateParameter(valid_615789, JString, required = false,
                                 default = nil)
  if valid_615789 != nil:
    section.add "X-Amz-Signature", valid_615789
  var valid_615790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615790 = validateParameter(valid_615790, JString, required = false,
                                 default = nil)
  if valid_615790 != nil:
    section.add "X-Amz-Content-Sha256", valid_615790
  var valid_615791 = header.getOrDefault("X-Amz-Date")
  valid_615791 = validateParameter(valid_615791, JString, required = false,
                                 default = nil)
  if valid_615791 != nil:
    section.add "X-Amz-Date", valid_615791
  var valid_615792 = header.getOrDefault("X-Amz-Credential")
  valid_615792 = validateParameter(valid_615792, JString, required = false,
                                 default = nil)
  if valid_615792 != nil:
    section.add "X-Amz-Credential", valid_615792
  var valid_615793 = header.getOrDefault("X-Amz-Security-Token")
  valid_615793 = validateParameter(valid_615793, JString, required = false,
                                 default = nil)
  if valid_615793 != nil:
    section.add "X-Amz-Security-Token", valid_615793
  var valid_615794 = header.getOrDefault("X-Amz-Algorithm")
  valid_615794 = validateParameter(valid_615794, JString, required = false,
                                 default = nil)
  if valid_615794 != nil:
    section.add "X-Amz-Algorithm", valid_615794
  var valid_615795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615795 = validateParameter(valid_615795, JString, required = false,
                                 default = nil)
  if valid_615795 != nil:
    section.add "X-Amz-SignedHeaders", valid_615795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615796: Call_GetUpdateLoginProfile_615781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615796.validator(path, query, header, formData, body)
  let scheme = call_615796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615796.url(scheme.get, call_615796.host, call_615796.base,
                         call_615796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615796, url, valid)

proc call*(call_615797: Call_GetUpdateLoginProfile_615781; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615798 = newJObject()
  add(query_615798, "Password", newJString(Password))
  add(query_615798, "UserName", newJString(UserName))
  add(query_615798, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_615798, "Action", newJString(Action))
  add(query_615798, "Version", newJString(Version))
  result = call_615797.call(nil, query_615798, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_615781(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_615782, base: "/",
    url: url_GetUpdateLoginProfile_615783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_615835 = ref object of OpenApiRestCall_610658
proc url_PostUpdateOpenIDConnectProviderThumbprint_615837(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_615836(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615838 = query.getOrDefault("Action")
  valid_615838 = validateParameter(valid_615838, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_615838 != nil:
    section.add "Action", valid_615838
  var valid_615839 = query.getOrDefault("Version")
  valid_615839 = validateParameter(valid_615839, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615839 != nil:
    section.add "Version", valid_615839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615840 = header.getOrDefault("X-Amz-Signature")
  valid_615840 = validateParameter(valid_615840, JString, required = false,
                                 default = nil)
  if valid_615840 != nil:
    section.add "X-Amz-Signature", valid_615840
  var valid_615841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615841 = validateParameter(valid_615841, JString, required = false,
                                 default = nil)
  if valid_615841 != nil:
    section.add "X-Amz-Content-Sha256", valid_615841
  var valid_615842 = header.getOrDefault("X-Amz-Date")
  valid_615842 = validateParameter(valid_615842, JString, required = false,
                                 default = nil)
  if valid_615842 != nil:
    section.add "X-Amz-Date", valid_615842
  var valid_615843 = header.getOrDefault("X-Amz-Credential")
  valid_615843 = validateParameter(valid_615843, JString, required = false,
                                 default = nil)
  if valid_615843 != nil:
    section.add "X-Amz-Credential", valid_615843
  var valid_615844 = header.getOrDefault("X-Amz-Security-Token")
  valid_615844 = validateParameter(valid_615844, JString, required = false,
                                 default = nil)
  if valid_615844 != nil:
    section.add "X-Amz-Security-Token", valid_615844
  var valid_615845 = header.getOrDefault("X-Amz-Algorithm")
  valid_615845 = validateParameter(valid_615845, JString, required = false,
                                 default = nil)
  if valid_615845 != nil:
    section.add "X-Amz-Algorithm", valid_615845
  var valid_615846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615846 = validateParameter(valid_615846, JString, required = false,
                                 default = nil)
  if valid_615846 != nil:
    section.add "X-Amz-SignedHeaders", valid_615846
  result.add "header", section
  ## parameters in `formData` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_615847 = formData.getOrDefault("ThumbprintList")
  valid_615847 = validateParameter(valid_615847, JArray, required = true, default = nil)
  if valid_615847 != nil:
    section.add "ThumbprintList", valid_615847
  var valid_615848 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_615848 = validateParameter(valid_615848, JString, required = true,
                                 default = nil)
  if valid_615848 != nil:
    section.add "OpenIDConnectProviderArn", valid_615848
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615849: Call_PostUpdateOpenIDConnectProviderThumbprint_615835;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_615849.validator(path, query, header, formData, body)
  let scheme = call_615849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615849.url(scheme.get, call_615849.host, call_615849.base,
                         call_615849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615849, url, valid)

proc call*(call_615850: Call_PostUpdateOpenIDConnectProviderThumbprint_615835;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_615851 = newJObject()
  var formData_615852 = newJObject()
  if ThumbprintList != nil:
    formData_615852.add "ThumbprintList", ThumbprintList
  add(query_615851, "Action", newJString(Action))
  add(query_615851, "Version", newJString(Version))
  add(formData_615852, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_615850.call(nil, query_615851, nil, formData_615852, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_615835(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_615836,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_615837,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_615818 = ref object of OpenApiRestCall_610658
proc url_GetUpdateOpenIDConnectProviderThumbprint_615820(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_615819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_615821 = query.getOrDefault("ThumbprintList")
  valid_615821 = validateParameter(valid_615821, JArray, required = true, default = nil)
  if valid_615821 != nil:
    section.add "ThumbprintList", valid_615821
  var valid_615822 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_615822 = validateParameter(valid_615822, JString, required = true,
                                 default = nil)
  if valid_615822 != nil:
    section.add "OpenIDConnectProviderArn", valid_615822
  var valid_615823 = query.getOrDefault("Action")
  valid_615823 = validateParameter(valid_615823, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_615823 != nil:
    section.add "Action", valid_615823
  var valid_615824 = query.getOrDefault("Version")
  valid_615824 = validateParameter(valid_615824, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615824 != nil:
    section.add "Version", valid_615824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615825 = header.getOrDefault("X-Amz-Signature")
  valid_615825 = validateParameter(valid_615825, JString, required = false,
                                 default = nil)
  if valid_615825 != nil:
    section.add "X-Amz-Signature", valid_615825
  var valid_615826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615826 = validateParameter(valid_615826, JString, required = false,
                                 default = nil)
  if valid_615826 != nil:
    section.add "X-Amz-Content-Sha256", valid_615826
  var valid_615827 = header.getOrDefault("X-Amz-Date")
  valid_615827 = validateParameter(valid_615827, JString, required = false,
                                 default = nil)
  if valid_615827 != nil:
    section.add "X-Amz-Date", valid_615827
  var valid_615828 = header.getOrDefault("X-Amz-Credential")
  valid_615828 = validateParameter(valid_615828, JString, required = false,
                                 default = nil)
  if valid_615828 != nil:
    section.add "X-Amz-Credential", valid_615828
  var valid_615829 = header.getOrDefault("X-Amz-Security-Token")
  valid_615829 = validateParameter(valid_615829, JString, required = false,
                                 default = nil)
  if valid_615829 != nil:
    section.add "X-Amz-Security-Token", valid_615829
  var valid_615830 = header.getOrDefault("X-Amz-Algorithm")
  valid_615830 = validateParameter(valid_615830, JString, required = false,
                                 default = nil)
  if valid_615830 != nil:
    section.add "X-Amz-Algorithm", valid_615830
  var valid_615831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615831 = validateParameter(valid_615831, JString, required = false,
                                 default = nil)
  if valid_615831 != nil:
    section.add "X-Amz-SignedHeaders", valid_615831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615832: Call_GetUpdateOpenIDConnectProviderThumbprint_615818;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_615832.validator(path, query, header, formData, body)
  let scheme = call_615832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615832.url(scheme.get, call_615832.host, call_615832.base,
                         call_615832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615832, url, valid)

proc call*(call_615833: Call_GetUpdateOpenIDConnectProviderThumbprint_615818;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615834 = newJObject()
  if ThumbprintList != nil:
    query_615834.add "ThumbprintList", ThumbprintList
  add(query_615834, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_615834, "Action", newJString(Action))
  add(query_615834, "Version", newJString(Version))
  result = call_615833.call(nil, query_615834, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_615818(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_615819,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_615820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_615871 = ref object of OpenApiRestCall_610658
proc url_PostUpdateRole_615873(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRole_615872(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615874 = query.getOrDefault("Action")
  valid_615874 = validateParameter(valid_615874, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_615874 != nil:
    section.add "Action", valid_615874
  var valid_615875 = query.getOrDefault("Version")
  valid_615875 = validateParameter(valid_615875, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615875 != nil:
    section.add "Version", valid_615875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615876 = header.getOrDefault("X-Amz-Signature")
  valid_615876 = validateParameter(valid_615876, JString, required = false,
                                 default = nil)
  if valid_615876 != nil:
    section.add "X-Amz-Signature", valid_615876
  var valid_615877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615877 = validateParameter(valid_615877, JString, required = false,
                                 default = nil)
  if valid_615877 != nil:
    section.add "X-Amz-Content-Sha256", valid_615877
  var valid_615878 = header.getOrDefault("X-Amz-Date")
  valid_615878 = validateParameter(valid_615878, JString, required = false,
                                 default = nil)
  if valid_615878 != nil:
    section.add "X-Amz-Date", valid_615878
  var valid_615879 = header.getOrDefault("X-Amz-Credential")
  valid_615879 = validateParameter(valid_615879, JString, required = false,
                                 default = nil)
  if valid_615879 != nil:
    section.add "X-Amz-Credential", valid_615879
  var valid_615880 = header.getOrDefault("X-Amz-Security-Token")
  valid_615880 = validateParameter(valid_615880, JString, required = false,
                                 default = nil)
  if valid_615880 != nil:
    section.add "X-Amz-Security-Token", valid_615880
  var valid_615881 = header.getOrDefault("X-Amz-Algorithm")
  valid_615881 = validateParameter(valid_615881, JString, required = false,
                                 default = nil)
  if valid_615881 != nil:
    section.add "X-Amz-Algorithm", valid_615881
  var valid_615882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615882 = validateParameter(valid_615882, JString, required = false,
                                 default = nil)
  if valid_615882 != nil:
    section.add "X-Amz-SignedHeaders", valid_615882
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_615883 = formData.getOrDefault("Description")
  valid_615883 = validateParameter(valid_615883, JString, required = false,
                                 default = nil)
  if valid_615883 != nil:
    section.add "Description", valid_615883
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615884 = formData.getOrDefault("RoleName")
  valid_615884 = validateParameter(valid_615884, JString, required = true,
                                 default = nil)
  if valid_615884 != nil:
    section.add "RoleName", valid_615884
  var valid_615885 = formData.getOrDefault("MaxSessionDuration")
  valid_615885 = validateParameter(valid_615885, JInt, required = false, default = nil)
  if valid_615885 != nil:
    section.add "MaxSessionDuration", valid_615885
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615886: Call_PostUpdateRole_615871; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_615886.validator(path, query, header, formData, body)
  let scheme = call_615886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615886.url(scheme.get, call_615886.host, call_615886.base,
                         call_615886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615886, url, valid)

proc call*(call_615887: Call_PostUpdateRole_615871; RoleName: string;
          Description: string = ""; Action: string = "UpdateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_615888 = newJObject()
  var formData_615889 = newJObject()
  add(formData_615889, "Description", newJString(Description))
  add(formData_615889, "RoleName", newJString(RoleName))
  add(query_615888, "Action", newJString(Action))
  add(formData_615889, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_615888, "Version", newJString(Version))
  result = call_615887.call(nil, query_615888, nil, formData_615889, nil)

var postUpdateRole* = Call_PostUpdateRole_615871(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_615872,
    base: "/", url: url_PostUpdateRole_615873, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_615853 = ref object of OpenApiRestCall_610658
proc url_GetUpdateRole_615855(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRole_615854(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_615856 = query.getOrDefault("RoleName")
  valid_615856 = validateParameter(valid_615856, JString, required = true,
                                 default = nil)
  if valid_615856 != nil:
    section.add "RoleName", valid_615856
  var valid_615857 = query.getOrDefault("MaxSessionDuration")
  valid_615857 = validateParameter(valid_615857, JInt, required = false, default = nil)
  if valid_615857 != nil:
    section.add "MaxSessionDuration", valid_615857
  var valid_615858 = query.getOrDefault("Action")
  valid_615858 = validateParameter(valid_615858, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_615858 != nil:
    section.add "Action", valid_615858
  var valid_615859 = query.getOrDefault("Description")
  valid_615859 = validateParameter(valid_615859, JString, required = false,
                                 default = nil)
  if valid_615859 != nil:
    section.add "Description", valid_615859
  var valid_615860 = query.getOrDefault("Version")
  valid_615860 = validateParameter(valid_615860, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615860 != nil:
    section.add "Version", valid_615860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615861 = header.getOrDefault("X-Amz-Signature")
  valid_615861 = validateParameter(valid_615861, JString, required = false,
                                 default = nil)
  if valid_615861 != nil:
    section.add "X-Amz-Signature", valid_615861
  var valid_615862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615862 = validateParameter(valid_615862, JString, required = false,
                                 default = nil)
  if valid_615862 != nil:
    section.add "X-Amz-Content-Sha256", valid_615862
  var valid_615863 = header.getOrDefault("X-Amz-Date")
  valid_615863 = validateParameter(valid_615863, JString, required = false,
                                 default = nil)
  if valid_615863 != nil:
    section.add "X-Amz-Date", valid_615863
  var valid_615864 = header.getOrDefault("X-Amz-Credential")
  valid_615864 = validateParameter(valid_615864, JString, required = false,
                                 default = nil)
  if valid_615864 != nil:
    section.add "X-Amz-Credential", valid_615864
  var valid_615865 = header.getOrDefault("X-Amz-Security-Token")
  valid_615865 = validateParameter(valid_615865, JString, required = false,
                                 default = nil)
  if valid_615865 != nil:
    section.add "X-Amz-Security-Token", valid_615865
  var valid_615866 = header.getOrDefault("X-Amz-Algorithm")
  valid_615866 = validateParameter(valid_615866, JString, required = false,
                                 default = nil)
  if valid_615866 != nil:
    section.add "X-Amz-Algorithm", valid_615866
  var valid_615867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615867 = validateParameter(valid_615867, JString, required = false,
                                 default = nil)
  if valid_615867 != nil:
    section.add "X-Amz-SignedHeaders", valid_615867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615868: Call_GetUpdateRole_615853; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_615868.validator(path, query, header, formData, body)
  let scheme = call_615868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615868.url(scheme.get, call_615868.host, call_615868.base,
                         call_615868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615868, url, valid)

proc call*(call_615869: Call_GetUpdateRole_615853; RoleName: string;
          MaxSessionDuration: int = 0; Action: string = "UpdateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_615870 = newJObject()
  add(query_615870, "RoleName", newJString(RoleName))
  add(query_615870, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_615870, "Action", newJString(Action))
  add(query_615870, "Description", newJString(Description))
  add(query_615870, "Version", newJString(Version))
  result = call_615869.call(nil, query_615870, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_615853(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_615854,
    base: "/", url: url_GetUpdateRole_615855, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_615907 = ref object of OpenApiRestCall_610658
proc url_PostUpdateRoleDescription_615909(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRoleDescription_615908(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615910 = query.getOrDefault("Action")
  valid_615910 = validateParameter(valid_615910, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_615910 != nil:
    section.add "Action", valid_615910
  var valid_615911 = query.getOrDefault("Version")
  valid_615911 = validateParameter(valid_615911, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615911 != nil:
    section.add "Version", valid_615911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615912 = header.getOrDefault("X-Amz-Signature")
  valid_615912 = validateParameter(valid_615912, JString, required = false,
                                 default = nil)
  if valid_615912 != nil:
    section.add "X-Amz-Signature", valid_615912
  var valid_615913 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615913 = validateParameter(valid_615913, JString, required = false,
                                 default = nil)
  if valid_615913 != nil:
    section.add "X-Amz-Content-Sha256", valid_615913
  var valid_615914 = header.getOrDefault("X-Amz-Date")
  valid_615914 = validateParameter(valid_615914, JString, required = false,
                                 default = nil)
  if valid_615914 != nil:
    section.add "X-Amz-Date", valid_615914
  var valid_615915 = header.getOrDefault("X-Amz-Credential")
  valid_615915 = validateParameter(valid_615915, JString, required = false,
                                 default = nil)
  if valid_615915 != nil:
    section.add "X-Amz-Credential", valid_615915
  var valid_615916 = header.getOrDefault("X-Amz-Security-Token")
  valid_615916 = validateParameter(valid_615916, JString, required = false,
                                 default = nil)
  if valid_615916 != nil:
    section.add "X-Amz-Security-Token", valid_615916
  var valid_615917 = header.getOrDefault("X-Amz-Algorithm")
  valid_615917 = validateParameter(valid_615917, JString, required = false,
                                 default = nil)
  if valid_615917 != nil:
    section.add "X-Amz-Algorithm", valid_615917
  var valid_615918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615918 = validateParameter(valid_615918, JString, required = false,
                                 default = nil)
  if valid_615918 != nil:
    section.add "X-Amz-SignedHeaders", valid_615918
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_615919 = formData.getOrDefault("Description")
  valid_615919 = validateParameter(valid_615919, JString, required = true,
                                 default = nil)
  if valid_615919 != nil:
    section.add "Description", valid_615919
  var valid_615920 = formData.getOrDefault("RoleName")
  valid_615920 = validateParameter(valid_615920, JString, required = true,
                                 default = nil)
  if valid_615920 != nil:
    section.add "RoleName", valid_615920
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615921: Call_PostUpdateRoleDescription_615907; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_615921.validator(path, query, header, formData, body)
  let scheme = call_615921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615921.url(scheme.get, call_615921.host, call_615921.base,
                         call_615921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615921, url, valid)

proc call*(call_615922: Call_PostUpdateRoleDescription_615907; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615923 = newJObject()
  var formData_615924 = newJObject()
  add(formData_615924, "Description", newJString(Description))
  add(formData_615924, "RoleName", newJString(RoleName))
  add(query_615923, "Action", newJString(Action))
  add(query_615923, "Version", newJString(Version))
  result = call_615922.call(nil, query_615923, nil, formData_615924, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_615907(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_615908, base: "/",
    url: url_PostUpdateRoleDescription_615909,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_615890 = ref object of OpenApiRestCall_610658
proc url_GetUpdateRoleDescription_615892(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRoleDescription_615891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_615893 = query.getOrDefault("RoleName")
  valid_615893 = validateParameter(valid_615893, JString, required = true,
                                 default = nil)
  if valid_615893 != nil:
    section.add "RoleName", valid_615893
  var valid_615894 = query.getOrDefault("Action")
  valid_615894 = validateParameter(valid_615894, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_615894 != nil:
    section.add "Action", valid_615894
  var valid_615895 = query.getOrDefault("Description")
  valid_615895 = validateParameter(valid_615895, JString, required = true,
                                 default = nil)
  if valid_615895 != nil:
    section.add "Description", valid_615895
  var valid_615896 = query.getOrDefault("Version")
  valid_615896 = validateParameter(valid_615896, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615896 != nil:
    section.add "Version", valid_615896
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615897 = header.getOrDefault("X-Amz-Signature")
  valid_615897 = validateParameter(valid_615897, JString, required = false,
                                 default = nil)
  if valid_615897 != nil:
    section.add "X-Amz-Signature", valid_615897
  var valid_615898 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615898 = validateParameter(valid_615898, JString, required = false,
                                 default = nil)
  if valid_615898 != nil:
    section.add "X-Amz-Content-Sha256", valid_615898
  var valid_615899 = header.getOrDefault("X-Amz-Date")
  valid_615899 = validateParameter(valid_615899, JString, required = false,
                                 default = nil)
  if valid_615899 != nil:
    section.add "X-Amz-Date", valid_615899
  var valid_615900 = header.getOrDefault("X-Amz-Credential")
  valid_615900 = validateParameter(valid_615900, JString, required = false,
                                 default = nil)
  if valid_615900 != nil:
    section.add "X-Amz-Credential", valid_615900
  var valid_615901 = header.getOrDefault("X-Amz-Security-Token")
  valid_615901 = validateParameter(valid_615901, JString, required = false,
                                 default = nil)
  if valid_615901 != nil:
    section.add "X-Amz-Security-Token", valid_615901
  var valid_615902 = header.getOrDefault("X-Amz-Algorithm")
  valid_615902 = validateParameter(valid_615902, JString, required = false,
                                 default = nil)
  if valid_615902 != nil:
    section.add "X-Amz-Algorithm", valid_615902
  var valid_615903 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615903 = validateParameter(valid_615903, JString, required = false,
                                 default = nil)
  if valid_615903 != nil:
    section.add "X-Amz-SignedHeaders", valid_615903
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615904: Call_GetUpdateRoleDescription_615890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_615904.validator(path, query, header, formData, body)
  let scheme = call_615904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615904.url(scheme.get, call_615904.host, call_615904.base,
                         call_615904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615904, url, valid)

proc call*(call_615905: Call_GetUpdateRoleDescription_615890; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_615906 = newJObject()
  add(query_615906, "RoleName", newJString(RoleName))
  add(query_615906, "Action", newJString(Action))
  add(query_615906, "Description", newJString(Description))
  add(query_615906, "Version", newJString(Version))
  result = call_615905.call(nil, query_615906, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_615890(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_615891, base: "/",
    url: url_GetUpdateRoleDescription_615892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_615942 = ref object of OpenApiRestCall_610658
proc url_PostUpdateSAMLProvider_615944(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSAMLProvider_615943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615945 = query.getOrDefault("Action")
  valid_615945 = validateParameter(valid_615945, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_615945 != nil:
    section.add "Action", valid_615945
  var valid_615946 = query.getOrDefault("Version")
  valid_615946 = validateParameter(valid_615946, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615946 != nil:
    section.add "Version", valid_615946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615947 = header.getOrDefault("X-Amz-Signature")
  valid_615947 = validateParameter(valid_615947, JString, required = false,
                                 default = nil)
  if valid_615947 != nil:
    section.add "X-Amz-Signature", valid_615947
  var valid_615948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615948 = validateParameter(valid_615948, JString, required = false,
                                 default = nil)
  if valid_615948 != nil:
    section.add "X-Amz-Content-Sha256", valid_615948
  var valid_615949 = header.getOrDefault("X-Amz-Date")
  valid_615949 = validateParameter(valid_615949, JString, required = false,
                                 default = nil)
  if valid_615949 != nil:
    section.add "X-Amz-Date", valid_615949
  var valid_615950 = header.getOrDefault("X-Amz-Credential")
  valid_615950 = validateParameter(valid_615950, JString, required = false,
                                 default = nil)
  if valid_615950 != nil:
    section.add "X-Amz-Credential", valid_615950
  var valid_615951 = header.getOrDefault("X-Amz-Security-Token")
  valid_615951 = validateParameter(valid_615951, JString, required = false,
                                 default = nil)
  if valid_615951 != nil:
    section.add "X-Amz-Security-Token", valid_615951
  var valid_615952 = header.getOrDefault("X-Amz-Algorithm")
  valid_615952 = validateParameter(valid_615952, JString, required = false,
                                 default = nil)
  if valid_615952 != nil:
    section.add "X-Amz-Algorithm", valid_615952
  var valid_615953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615953 = validateParameter(valid_615953, JString, required = false,
                                 default = nil)
  if valid_615953 != nil:
    section.add "X-Amz-SignedHeaders", valid_615953
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_615954 = formData.getOrDefault("SAMLProviderArn")
  valid_615954 = validateParameter(valid_615954, JString, required = true,
                                 default = nil)
  if valid_615954 != nil:
    section.add "SAMLProviderArn", valid_615954
  var valid_615955 = formData.getOrDefault("SAMLMetadataDocument")
  valid_615955 = validateParameter(valid_615955, JString, required = true,
                                 default = nil)
  if valid_615955 != nil:
    section.add "SAMLMetadataDocument", valid_615955
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615956: Call_PostUpdateSAMLProvider_615942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_615956.validator(path, query, header, formData, body)
  let scheme = call_615956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615956.url(scheme.get, call_615956.host, call_615956.base,
                         call_615956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615956, url, valid)

proc call*(call_615957: Call_PostUpdateSAMLProvider_615942;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615958 = newJObject()
  var formData_615959 = newJObject()
  add(formData_615959, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(formData_615959, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_615958, "Action", newJString(Action))
  add(query_615958, "Version", newJString(Version))
  result = call_615957.call(nil, query_615958, nil, formData_615959, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_615942(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_615943, base: "/",
    url: url_PostUpdateSAMLProvider_615944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_615925 = ref object of OpenApiRestCall_610658
proc url_GetUpdateSAMLProvider_615927(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSAMLProvider_615926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615928 = query.getOrDefault("Action")
  valid_615928 = validateParameter(valid_615928, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_615928 != nil:
    section.add "Action", valid_615928
  var valid_615929 = query.getOrDefault("SAMLMetadataDocument")
  valid_615929 = validateParameter(valid_615929, JString, required = true,
                                 default = nil)
  if valid_615929 != nil:
    section.add "SAMLMetadataDocument", valid_615929
  var valid_615930 = query.getOrDefault("SAMLProviderArn")
  valid_615930 = validateParameter(valid_615930, JString, required = true,
                                 default = nil)
  if valid_615930 != nil:
    section.add "SAMLProviderArn", valid_615930
  var valid_615931 = query.getOrDefault("Version")
  valid_615931 = validateParameter(valid_615931, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615931 != nil:
    section.add "Version", valid_615931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615932 = header.getOrDefault("X-Amz-Signature")
  valid_615932 = validateParameter(valid_615932, JString, required = false,
                                 default = nil)
  if valid_615932 != nil:
    section.add "X-Amz-Signature", valid_615932
  var valid_615933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615933 = validateParameter(valid_615933, JString, required = false,
                                 default = nil)
  if valid_615933 != nil:
    section.add "X-Amz-Content-Sha256", valid_615933
  var valid_615934 = header.getOrDefault("X-Amz-Date")
  valid_615934 = validateParameter(valid_615934, JString, required = false,
                                 default = nil)
  if valid_615934 != nil:
    section.add "X-Amz-Date", valid_615934
  var valid_615935 = header.getOrDefault("X-Amz-Credential")
  valid_615935 = validateParameter(valid_615935, JString, required = false,
                                 default = nil)
  if valid_615935 != nil:
    section.add "X-Amz-Credential", valid_615935
  var valid_615936 = header.getOrDefault("X-Amz-Security-Token")
  valid_615936 = validateParameter(valid_615936, JString, required = false,
                                 default = nil)
  if valid_615936 != nil:
    section.add "X-Amz-Security-Token", valid_615936
  var valid_615937 = header.getOrDefault("X-Amz-Algorithm")
  valid_615937 = validateParameter(valid_615937, JString, required = false,
                                 default = nil)
  if valid_615937 != nil:
    section.add "X-Amz-Algorithm", valid_615937
  var valid_615938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615938 = validateParameter(valid_615938, JString, required = false,
                                 default = nil)
  if valid_615938 != nil:
    section.add "X-Amz-SignedHeaders", valid_615938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615939: Call_GetUpdateSAMLProvider_615925; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_615939.validator(path, query, header, formData, body)
  let scheme = call_615939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615939.url(scheme.get, call_615939.host, call_615939.base,
                         call_615939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615939, url, valid)

proc call*(call_615940: Call_GetUpdateSAMLProvider_615925;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_615941 = newJObject()
  add(query_615941, "Action", newJString(Action))
  add(query_615941, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_615941, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_615941, "Version", newJString(Version))
  result = call_615940.call(nil, query_615941, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_615925(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_615926, base: "/",
    url: url_GetUpdateSAMLProvider_615927, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_615978 = ref object of OpenApiRestCall_610658
proc url_PostUpdateSSHPublicKey_615980(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSSHPublicKey_615979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615981 = query.getOrDefault("Action")
  valid_615981 = validateParameter(valid_615981, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_615981 != nil:
    section.add "Action", valid_615981
  var valid_615982 = query.getOrDefault("Version")
  valid_615982 = validateParameter(valid_615982, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615982 != nil:
    section.add "Version", valid_615982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615983 = header.getOrDefault("X-Amz-Signature")
  valid_615983 = validateParameter(valid_615983, JString, required = false,
                                 default = nil)
  if valid_615983 != nil:
    section.add "X-Amz-Signature", valid_615983
  var valid_615984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615984 = validateParameter(valid_615984, JString, required = false,
                                 default = nil)
  if valid_615984 != nil:
    section.add "X-Amz-Content-Sha256", valid_615984
  var valid_615985 = header.getOrDefault("X-Amz-Date")
  valid_615985 = validateParameter(valid_615985, JString, required = false,
                                 default = nil)
  if valid_615985 != nil:
    section.add "X-Amz-Date", valid_615985
  var valid_615986 = header.getOrDefault("X-Amz-Credential")
  valid_615986 = validateParameter(valid_615986, JString, required = false,
                                 default = nil)
  if valid_615986 != nil:
    section.add "X-Amz-Credential", valid_615986
  var valid_615987 = header.getOrDefault("X-Amz-Security-Token")
  valid_615987 = validateParameter(valid_615987, JString, required = false,
                                 default = nil)
  if valid_615987 != nil:
    section.add "X-Amz-Security-Token", valid_615987
  var valid_615988 = header.getOrDefault("X-Amz-Algorithm")
  valid_615988 = validateParameter(valid_615988, JString, required = false,
                                 default = nil)
  if valid_615988 != nil:
    section.add "X-Amz-Algorithm", valid_615988
  var valid_615989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615989 = validateParameter(valid_615989, JString, required = false,
                                 default = nil)
  if valid_615989 != nil:
    section.add "X-Amz-SignedHeaders", valid_615989
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_615990 = formData.getOrDefault("SSHPublicKeyId")
  valid_615990 = validateParameter(valid_615990, JString, required = true,
                                 default = nil)
  if valid_615990 != nil:
    section.add "SSHPublicKeyId", valid_615990
  var valid_615991 = formData.getOrDefault("UserName")
  valid_615991 = validateParameter(valid_615991, JString, required = true,
                                 default = nil)
  if valid_615991 != nil:
    section.add "UserName", valid_615991
  var valid_615992 = formData.getOrDefault("Status")
  valid_615992 = validateParameter(valid_615992, JString, required = true,
                                 default = newJString("Active"))
  if valid_615992 != nil:
    section.add "Status", valid_615992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615993: Call_PostUpdateSSHPublicKey_615978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615993.validator(path, query, header, formData, body)
  let scheme = call_615993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615993.url(scheme.get, call_615993.host, call_615993.base,
                         call_615993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615993, url, valid)

proc call*(call_615994: Call_PostUpdateSSHPublicKey_615978; SSHPublicKeyId: string;
          UserName: string; Action: string = "UpdateSSHPublicKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_615995 = newJObject()
  var formData_615996 = newJObject()
  add(formData_615996, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_615996, "UserName", newJString(UserName))
  add(query_615995, "Action", newJString(Action))
  add(formData_615996, "Status", newJString(Status))
  add(query_615995, "Version", newJString(Version))
  result = call_615994.call(nil, query_615995, nil, formData_615996, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_615978(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_615979, base: "/",
    url: url_PostUpdateSSHPublicKey_615980, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_615960 = ref object of OpenApiRestCall_610658
proc url_GetUpdateSSHPublicKey_615962(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSSHPublicKey_615961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_615963 = query.getOrDefault("SSHPublicKeyId")
  valid_615963 = validateParameter(valid_615963, JString, required = true,
                                 default = nil)
  if valid_615963 != nil:
    section.add "SSHPublicKeyId", valid_615963
  var valid_615964 = query.getOrDefault("UserName")
  valid_615964 = validateParameter(valid_615964, JString, required = true,
                                 default = nil)
  if valid_615964 != nil:
    section.add "UserName", valid_615964
  var valid_615965 = query.getOrDefault("Status")
  valid_615965 = validateParameter(valid_615965, JString, required = true,
                                 default = newJString("Active"))
  if valid_615965 != nil:
    section.add "Status", valid_615965
  var valid_615966 = query.getOrDefault("Action")
  valid_615966 = validateParameter(valid_615966, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_615966 != nil:
    section.add "Action", valid_615966
  var valid_615967 = query.getOrDefault("Version")
  valid_615967 = validateParameter(valid_615967, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615967 != nil:
    section.add "Version", valid_615967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615968 = header.getOrDefault("X-Amz-Signature")
  valid_615968 = validateParameter(valid_615968, JString, required = false,
                                 default = nil)
  if valid_615968 != nil:
    section.add "X-Amz-Signature", valid_615968
  var valid_615969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615969 = validateParameter(valid_615969, JString, required = false,
                                 default = nil)
  if valid_615969 != nil:
    section.add "X-Amz-Content-Sha256", valid_615969
  var valid_615970 = header.getOrDefault("X-Amz-Date")
  valid_615970 = validateParameter(valid_615970, JString, required = false,
                                 default = nil)
  if valid_615970 != nil:
    section.add "X-Amz-Date", valid_615970
  var valid_615971 = header.getOrDefault("X-Amz-Credential")
  valid_615971 = validateParameter(valid_615971, JString, required = false,
                                 default = nil)
  if valid_615971 != nil:
    section.add "X-Amz-Credential", valid_615971
  var valid_615972 = header.getOrDefault("X-Amz-Security-Token")
  valid_615972 = validateParameter(valid_615972, JString, required = false,
                                 default = nil)
  if valid_615972 != nil:
    section.add "X-Amz-Security-Token", valid_615972
  var valid_615973 = header.getOrDefault("X-Amz-Algorithm")
  valid_615973 = validateParameter(valid_615973, JString, required = false,
                                 default = nil)
  if valid_615973 != nil:
    section.add "X-Amz-Algorithm", valid_615973
  var valid_615974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615974 = validateParameter(valid_615974, JString, required = false,
                                 default = nil)
  if valid_615974 != nil:
    section.add "X-Amz-SignedHeaders", valid_615974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615975: Call_GetUpdateSSHPublicKey_615960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615975.validator(path, query, header, formData, body)
  let scheme = call_615975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615975.url(scheme.get, call_615975.host, call_615975.base,
                         call_615975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615975, url, valid)

proc call*(call_615976: Call_GetUpdateSSHPublicKey_615960; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615977 = newJObject()
  add(query_615977, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_615977, "UserName", newJString(UserName))
  add(query_615977, "Status", newJString(Status))
  add(query_615977, "Action", newJString(Action))
  add(query_615977, "Version", newJString(Version))
  result = call_615976.call(nil, query_615977, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_615960(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_615961, base: "/",
    url: url_GetUpdateSSHPublicKey_615962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_616015 = ref object of OpenApiRestCall_610658
proc url_PostUpdateServerCertificate_616017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServerCertificate_616016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616018 = query.getOrDefault("Action")
  valid_616018 = validateParameter(valid_616018, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_616018 != nil:
    section.add "Action", valid_616018
  var valid_616019 = query.getOrDefault("Version")
  valid_616019 = validateParameter(valid_616019, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616019 != nil:
    section.add "Version", valid_616019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616020 = header.getOrDefault("X-Amz-Signature")
  valid_616020 = validateParameter(valid_616020, JString, required = false,
                                 default = nil)
  if valid_616020 != nil:
    section.add "X-Amz-Signature", valid_616020
  var valid_616021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616021 = validateParameter(valid_616021, JString, required = false,
                                 default = nil)
  if valid_616021 != nil:
    section.add "X-Amz-Content-Sha256", valid_616021
  var valid_616022 = header.getOrDefault("X-Amz-Date")
  valid_616022 = validateParameter(valid_616022, JString, required = false,
                                 default = nil)
  if valid_616022 != nil:
    section.add "X-Amz-Date", valid_616022
  var valid_616023 = header.getOrDefault("X-Amz-Credential")
  valid_616023 = validateParameter(valid_616023, JString, required = false,
                                 default = nil)
  if valid_616023 != nil:
    section.add "X-Amz-Credential", valid_616023
  var valid_616024 = header.getOrDefault("X-Amz-Security-Token")
  valid_616024 = validateParameter(valid_616024, JString, required = false,
                                 default = nil)
  if valid_616024 != nil:
    section.add "X-Amz-Security-Token", valid_616024
  var valid_616025 = header.getOrDefault("X-Amz-Algorithm")
  valid_616025 = validateParameter(valid_616025, JString, required = false,
                                 default = nil)
  if valid_616025 != nil:
    section.add "X-Amz-Algorithm", valid_616025
  var valid_616026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616026 = validateParameter(valid_616026, JString, required = false,
                                 default = nil)
  if valid_616026 != nil:
    section.add "X-Amz-SignedHeaders", valid_616026
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_616027 = formData.getOrDefault("ServerCertificateName")
  valid_616027 = validateParameter(valid_616027, JString, required = true,
                                 default = nil)
  if valid_616027 != nil:
    section.add "ServerCertificateName", valid_616027
  var valid_616028 = formData.getOrDefault("NewPath")
  valid_616028 = validateParameter(valid_616028, JString, required = false,
                                 default = nil)
  if valid_616028 != nil:
    section.add "NewPath", valid_616028
  var valid_616029 = formData.getOrDefault("NewServerCertificateName")
  valid_616029 = validateParameter(valid_616029, JString, required = false,
                                 default = nil)
  if valid_616029 != nil:
    section.add "NewServerCertificateName", valid_616029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616030: Call_PostUpdateServerCertificate_616015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616030.validator(path, query, header, formData, body)
  let scheme = call_616030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616030.url(scheme.get, call_616030.host, call_616030.base,
                         call_616030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616030, url, valid)

proc call*(call_616031: Call_PostUpdateServerCertificate_616015;
          ServerCertificateName: string; NewPath: string = "";
          NewServerCertificateName: string = "";
          Action: string = "UpdateServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616032 = newJObject()
  var formData_616033 = newJObject()
  add(formData_616033, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_616033, "NewPath", newJString(NewPath))
  add(formData_616033, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_616032, "Action", newJString(Action))
  add(query_616032, "Version", newJString(Version))
  result = call_616031.call(nil, query_616032, nil, formData_616033, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_616015(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_616016, base: "/",
    url: url_PostUpdateServerCertificate_616017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_615997 = ref object of OpenApiRestCall_610658
proc url_GetUpdateServerCertificate_615999(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServerCertificate_615998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_616000 = query.getOrDefault("NewPath")
  valid_616000 = validateParameter(valid_616000, JString, required = false,
                                 default = nil)
  if valid_616000 != nil:
    section.add "NewPath", valid_616000
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_616001 = query.getOrDefault("ServerCertificateName")
  valid_616001 = validateParameter(valid_616001, JString, required = true,
                                 default = nil)
  if valid_616001 != nil:
    section.add "ServerCertificateName", valid_616001
  var valid_616002 = query.getOrDefault("Action")
  valid_616002 = validateParameter(valid_616002, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_616002 != nil:
    section.add "Action", valid_616002
  var valid_616003 = query.getOrDefault("Version")
  valid_616003 = validateParameter(valid_616003, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616003 != nil:
    section.add "Version", valid_616003
  var valid_616004 = query.getOrDefault("NewServerCertificateName")
  valid_616004 = validateParameter(valid_616004, JString, required = false,
                                 default = nil)
  if valid_616004 != nil:
    section.add "NewServerCertificateName", valid_616004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616005 = header.getOrDefault("X-Amz-Signature")
  valid_616005 = validateParameter(valid_616005, JString, required = false,
                                 default = nil)
  if valid_616005 != nil:
    section.add "X-Amz-Signature", valid_616005
  var valid_616006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616006 = validateParameter(valid_616006, JString, required = false,
                                 default = nil)
  if valid_616006 != nil:
    section.add "X-Amz-Content-Sha256", valid_616006
  var valid_616007 = header.getOrDefault("X-Amz-Date")
  valid_616007 = validateParameter(valid_616007, JString, required = false,
                                 default = nil)
  if valid_616007 != nil:
    section.add "X-Amz-Date", valid_616007
  var valid_616008 = header.getOrDefault("X-Amz-Credential")
  valid_616008 = validateParameter(valid_616008, JString, required = false,
                                 default = nil)
  if valid_616008 != nil:
    section.add "X-Amz-Credential", valid_616008
  var valid_616009 = header.getOrDefault("X-Amz-Security-Token")
  valid_616009 = validateParameter(valid_616009, JString, required = false,
                                 default = nil)
  if valid_616009 != nil:
    section.add "X-Amz-Security-Token", valid_616009
  var valid_616010 = header.getOrDefault("X-Amz-Algorithm")
  valid_616010 = validateParameter(valid_616010, JString, required = false,
                                 default = nil)
  if valid_616010 != nil:
    section.add "X-Amz-Algorithm", valid_616010
  var valid_616011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616011 = validateParameter(valid_616011, JString, required = false,
                                 default = nil)
  if valid_616011 != nil:
    section.add "X-Amz-SignedHeaders", valid_616011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616012: Call_GetUpdateServerCertificate_615997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616012.validator(path, query, header, formData, body)
  let scheme = call_616012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616012.url(scheme.get, call_616012.host, call_616012.base,
                         call_616012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616012, url, valid)

proc call*(call_616013: Call_GetUpdateServerCertificate_615997;
          ServerCertificateName: string; NewPath: string = "";
          Action: string = "UpdateServerCertificate";
          Version: string = "2010-05-08"; NewServerCertificateName: string = ""): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_616014 = newJObject()
  add(query_616014, "NewPath", newJString(NewPath))
  add(query_616014, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_616014, "Action", newJString(Action))
  add(query_616014, "Version", newJString(Version))
  add(query_616014, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  result = call_616013.call(nil, query_616014, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_615997(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_615998, base: "/",
    url: url_GetUpdateServerCertificate_615999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_616052 = ref object of OpenApiRestCall_610658
proc url_PostUpdateServiceSpecificCredential_616054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_616053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616055 = query.getOrDefault("Action")
  valid_616055 = validateParameter(valid_616055, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_616055 != nil:
    section.add "Action", valid_616055
  var valid_616056 = query.getOrDefault("Version")
  valid_616056 = validateParameter(valid_616056, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616056 != nil:
    section.add "Version", valid_616056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616057 = header.getOrDefault("X-Amz-Signature")
  valid_616057 = validateParameter(valid_616057, JString, required = false,
                                 default = nil)
  if valid_616057 != nil:
    section.add "X-Amz-Signature", valid_616057
  var valid_616058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616058 = validateParameter(valid_616058, JString, required = false,
                                 default = nil)
  if valid_616058 != nil:
    section.add "X-Amz-Content-Sha256", valid_616058
  var valid_616059 = header.getOrDefault("X-Amz-Date")
  valid_616059 = validateParameter(valid_616059, JString, required = false,
                                 default = nil)
  if valid_616059 != nil:
    section.add "X-Amz-Date", valid_616059
  var valid_616060 = header.getOrDefault("X-Amz-Credential")
  valid_616060 = validateParameter(valid_616060, JString, required = false,
                                 default = nil)
  if valid_616060 != nil:
    section.add "X-Amz-Credential", valid_616060
  var valid_616061 = header.getOrDefault("X-Amz-Security-Token")
  valid_616061 = validateParameter(valid_616061, JString, required = false,
                                 default = nil)
  if valid_616061 != nil:
    section.add "X-Amz-Security-Token", valid_616061
  var valid_616062 = header.getOrDefault("X-Amz-Algorithm")
  valid_616062 = validateParameter(valid_616062, JString, required = false,
                                 default = nil)
  if valid_616062 != nil:
    section.add "X-Amz-Algorithm", valid_616062
  var valid_616063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616063 = validateParameter(valid_616063, JString, required = false,
                                 default = nil)
  if valid_616063 != nil:
    section.add "X-Amz-SignedHeaders", valid_616063
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_616064 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_616064 = validateParameter(valid_616064, JString, required = true,
                                 default = nil)
  if valid_616064 != nil:
    section.add "ServiceSpecificCredentialId", valid_616064
  var valid_616065 = formData.getOrDefault("UserName")
  valid_616065 = validateParameter(valid_616065, JString, required = false,
                                 default = nil)
  if valid_616065 != nil:
    section.add "UserName", valid_616065
  var valid_616066 = formData.getOrDefault("Status")
  valid_616066 = validateParameter(valid_616066, JString, required = true,
                                 default = newJString("Active"))
  if valid_616066 != nil:
    section.add "Status", valid_616066
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616067: Call_PostUpdateServiceSpecificCredential_616052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_616067.validator(path, query, header, formData, body)
  let scheme = call_616067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616067.url(scheme.get, call_616067.host, call_616067.base,
                         call_616067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616067, url, valid)

proc call*(call_616068: Call_PostUpdateServiceSpecificCredential_616052;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "UpdateServiceSpecificCredential";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Version: string (required)
  var query_616069 = newJObject()
  var formData_616070 = newJObject()
  add(formData_616070, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_616070, "UserName", newJString(UserName))
  add(query_616069, "Action", newJString(Action))
  add(formData_616070, "Status", newJString(Status))
  add(query_616069, "Version", newJString(Version))
  result = call_616068.call(nil, query_616069, nil, formData_616070, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_616052(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_616053, base: "/",
    url: url_PostUpdateServiceSpecificCredential_616054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_616034 = ref object of OpenApiRestCall_610658
proc url_GetUpdateServiceSpecificCredential_616036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_616035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616037 = query.getOrDefault("UserName")
  valid_616037 = validateParameter(valid_616037, JString, required = false,
                                 default = nil)
  if valid_616037 != nil:
    section.add "UserName", valid_616037
  var valid_616038 = query.getOrDefault("Status")
  valid_616038 = validateParameter(valid_616038, JString, required = true,
                                 default = newJString("Active"))
  if valid_616038 != nil:
    section.add "Status", valid_616038
  var valid_616039 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_616039 = validateParameter(valid_616039, JString, required = true,
                                 default = nil)
  if valid_616039 != nil:
    section.add "ServiceSpecificCredentialId", valid_616039
  var valid_616040 = query.getOrDefault("Action")
  valid_616040 = validateParameter(valid_616040, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_616040 != nil:
    section.add "Action", valid_616040
  var valid_616041 = query.getOrDefault("Version")
  valid_616041 = validateParameter(valid_616041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616041 != nil:
    section.add "Version", valid_616041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616042 = header.getOrDefault("X-Amz-Signature")
  valid_616042 = validateParameter(valid_616042, JString, required = false,
                                 default = nil)
  if valid_616042 != nil:
    section.add "X-Amz-Signature", valid_616042
  var valid_616043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616043 = validateParameter(valid_616043, JString, required = false,
                                 default = nil)
  if valid_616043 != nil:
    section.add "X-Amz-Content-Sha256", valid_616043
  var valid_616044 = header.getOrDefault("X-Amz-Date")
  valid_616044 = validateParameter(valid_616044, JString, required = false,
                                 default = nil)
  if valid_616044 != nil:
    section.add "X-Amz-Date", valid_616044
  var valid_616045 = header.getOrDefault("X-Amz-Credential")
  valid_616045 = validateParameter(valid_616045, JString, required = false,
                                 default = nil)
  if valid_616045 != nil:
    section.add "X-Amz-Credential", valid_616045
  var valid_616046 = header.getOrDefault("X-Amz-Security-Token")
  valid_616046 = validateParameter(valid_616046, JString, required = false,
                                 default = nil)
  if valid_616046 != nil:
    section.add "X-Amz-Security-Token", valid_616046
  var valid_616047 = header.getOrDefault("X-Amz-Algorithm")
  valid_616047 = validateParameter(valid_616047, JString, required = false,
                                 default = nil)
  if valid_616047 != nil:
    section.add "X-Amz-Algorithm", valid_616047
  var valid_616048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616048 = validateParameter(valid_616048, JString, required = false,
                                 default = nil)
  if valid_616048 != nil:
    section.add "X-Amz-SignedHeaders", valid_616048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616049: Call_GetUpdateServiceSpecificCredential_616034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_616049.validator(path, query, header, formData, body)
  let scheme = call_616049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616049.url(scheme.get, call_616049.host, call_616049.base,
                         call_616049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616049, url, valid)

proc call*(call_616050: Call_GetUpdateServiceSpecificCredential_616034;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616051 = newJObject()
  add(query_616051, "UserName", newJString(UserName))
  add(query_616051, "Status", newJString(Status))
  add(query_616051, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_616051, "Action", newJString(Action))
  add(query_616051, "Version", newJString(Version))
  result = call_616050.call(nil, query_616051, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_616034(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_616035, base: "/",
    url: url_GetUpdateServiceSpecificCredential_616036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_616089 = ref object of OpenApiRestCall_610658
proc url_PostUpdateSigningCertificate_616091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSigningCertificate_616090(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616092 = query.getOrDefault("Action")
  valid_616092 = validateParameter(valid_616092, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_616092 != nil:
    section.add "Action", valid_616092
  var valid_616093 = query.getOrDefault("Version")
  valid_616093 = validateParameter(valid_616093, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616093 != nil:
    section.add "Version", valid_616093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616094 = header.getOrDefault("X-Amz-Signature")
  valid_616094 = validateParameter(valid_616094, JString, required = false,
                                 default = nil)
  if valid_616094 != nil:
    section.add "X-Amz-Signature", valid_616094
  var valid_616095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616095 = validateParameter(valid_616095, JString, required = false,
                                 default = nil)
  if valid_616095 != nil:
    section.add "X-Amz-Content-Sha256", valid_616095
  var valid_616096 = header.getOrDefault("X-Amz-Date")
  valid_616096 = validateParameter(valid_616096, JString, required = false,
                                 default = nil)
  if valid_616096 != nil:
    section.add "X-Amz-Date", valid_616096
  var valid_616097 = header.getOrDefault("X-Amz-Credential")
  valid_616097 = validateParameter(valid_616097, JString, required = false,
                                 default = nil)
  if valid_616097 != nil:
    section.add "X-Amz-Credential", valid_616097
  var valid_616098 = header.getOrDefault("X-Amz-Security-Token")
  valid_616098 = validateParameter(valid_616098, JString, required = false,
                                 default = nil)
  if valid_616098 != nil:
    section.add "X-Amz-Security-Token", valid_616098
  var valid_616099 = header.getOrDefault("X-Amz-Algorithm")
  valid_616099 = validateParameter(valid_616099, JString, required = false,
                                 default = nil)
  if valid_616099 != nil:
    section.add "X-Amz-Algorithm", valid_616099
  var valid_616100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616100 = validateParameter(valid_616100, JString, required = false,
                                 default = nil)
  if valid_616100 != nil:
    section.add "X-Amz-SignedHeaders", valid_616100
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_616101 = formData.getOrDefault("CertificateId")
  valid_616101 = validateParameter(valid_616101, JString, required = true,
                                 default = nil)
  if valid_616101 != nil:
    section.add "CertificateId", valid_616101
  var valid_616102 = formData.getOrDefault("UserName")
  valid_616102 = validateParameter(valid_616102, JString, required = false,
                                 default = nil)
  if valid_616102 != nil:
    section.add "UserName", valid_616102
  var valid_616103 = formData.getOrDefault("Status")
  valid_616103 = validateParameter(valid_616103, JString, required = true,
                                 default = newJString("Active"))
  if valid_616103 != nil:
    section.add "Status", valid_616103
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616104: Call_PostUpdateSigningCertificate_616089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_616104.validator(path, query, header, formData, body)
  let scheme = call_616104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616104.url(scheme.get, call_616104.host, call_616104.base,
                         call_616104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616104, url, valid)

proc call*(call_616105: Call_PostUpdateSigningCertificate_616089;
          CertificateId: string; UserName: string = "";
          Action: string = "UpdateSigningCertificate"; Status: string = "Active";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Version: string (required)
  var query_616106 = newJObject()
  var formData_616107 = newJObject()
  add(formData_616107, "CertificateId", newJString(CertificateId))
  add(formData_616107, "UserName", newJString(UserName))
  add(query_616106, "Action", newJString(Action))
  add(formData_616107, "Status", newJString(Status))
  add(query_616106, "Version", newJString(Version))
  result = call_616105.call(nil, query_616106, nil, formData_616107, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_616089(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_616090, base: "/",
    url: url_PostUpdateSigningCertificate_616091,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_616071 = ref object of OpenApiRestCall_610658
proc url_GetUpdateSigningCertificate_616073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSigningCertificate_616072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_616074 = query.getOrDefault("UserName")
  valid_616074 = validateParameter(valid_616074, JString, required = false,
                                 default = nil)
  if valid_616074 != nil:
    section.add "UserName", valid_616074
  var valid_616075 = query.getOrDefault("Status")
  valid_616075 = validateParameter(valid_616075, JString, required = true,
                                 default = newJString("Active"))
  if valid_616075 != nil:
    section.add "Status", valid_616075
  var valid_616076 = query.getOrDefault("Action")
  valid_616076 = validateParameter(valid_616076, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_616076 != nil:
    section.add "Action", valid_616076
  var valid_616077 = query.getOrDefault("Version")
  valid_616077 = validateParameter(valid_616077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616077 != nil:
    section.add "Version", valid_616077
  var valid_616078 = query.getOrDefault("CertificateId")
  valid_616078 = validateParameter(valid_616078, JString, required = true,
                                 default = nil)
  if valid_616078 != nil:
    section.add "CertificateId", valid_616078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616079 = header.getOrDefault("X-Amz-Signature")
  valid_616079 = validateParameter(valid_616079, JString, required = false,
                                 default = nil)
  if valid_616079 != nil:
    section.add "X-Amz-Signature", valid_616079
  var valid_616080 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616080 = validateParameter(valid_616080, JString, required = false,
                                 default = nil)
  if valid_616080 != nil:
    section.add "X-Amz-Content-Sha256", valid_616080
  var valid_616081 = header.getOrDefault("X-Amz-Date")
  valid_616081 = validateParameter(valid_616081, JString, required = false,
                                 default = nil)
  if valid_616081 != nil:
    section.add "X-Amz-Date", valid_616081
  var valid_616082 = header.getOrDefault("X-Amz-Credential")
  valid_616082 = validateParameter(valid_616082, JString, required = false,
                                 default = nil)
  if valid_616082 != nil:
    section.add "X-Amz-Credential", valid_616082
  var valid_616083 = header.getOrDefault("X-Amz-Security-Token")
  valid_616083 = validateParameter(valid_616083, JString, required = false,
                                 default = nil)
  if valid_616083 != nil:
    section.add "X-Amz-Security-Token", valid_616083
  var valid_616084 = header.getOrDefault("X-Amz-Algorithm")
  valid_616084 = validateParameter(valid_616084, JString, required = false,
                                 default = nil)
  if valid_616084 != nil:
    section.add "X-Amz-Algorithm", valid_616084
  var valid_616085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616085 = validateParameter(valid_616085, JString, required = false,
                                 default = nil)
  if valid_616085 != nil:
    section.add "X-Amz-SignedHeaders", valid_616085
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616086: Call_GetUpdateSigningCertificate_616071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_616086.validator(path, query, header, formData, body)
  let scheme = call_616086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616086.url(scheme.get, call_616086.host, call_616086.base,
                         call_616086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616086, url, valid)

proc call*(call_616087: Call_GetUpdateSigningCertificate_616071;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  var query_616088 = newJObject()
  add(query_616088, "UserName", newJString(UserName))
  add(query_616088, "Status", newJString(Status))
  add(query_616088, "Action", newJString(Action))
  add(query_616088, "Version", newJString(Version))
  add(query_616088, "CertificateId", newJString(CertificateId))
  result = call_616087.call(nil, query_616088, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_616071(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_616072, base: "/",
    url: url_GetUpdateSigningCertificate_616073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_616126 = ref object of OpenApiRestCall_610658
proc url_PostUpdateUser_616128(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateUser_616127(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616129 = query.getOrDefault("Action")
  valid_616129 = validateParameter(valid_616129, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_616129 != nil:
    section.add "Action", valid_616129
  var valid_616130 = query.getOrDefault("Version")
  valid_616130 = validateParameter(valid_616130, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616130 != nil:
    section.add "Version", valid_616130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616131 = header.getOrDefault("X-Amz-Signature")
  valid_616131 = validateParameter(valid_616131, JString, required = false,
                                 default = nil)
  if valid_616131 != nil:
    section.add "X-Amz-Signature", valid_616131
  var valid_616132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616132 = validateParameter(valid_616132, JString, required = false,
                                 default = nil)
  if valid_616132 != nil:
    section.add "X-Amz-Content-Sha256", valid_616132
  var valid_616133 = header.getOrDefault("X-Amz-Date")
  valid_616133 = validateParameter(valid_616133, JString, required = false,
                                 default = nil)
  if valid_616133 != nil:
    section.add "X-Amz-Date", valid_616133
  var valid_616134 = header.getOrDefault("X-Amz-Credential")
  valid_616134 = validateParameter(valid_616134, JString, required = false,
                                 default = nil)
  if valid_616134 != nil:
    section.add "X-Amz-Credential", valid_616134
  var valid_616135 = header.getOrDefault("X-Amz-Security-Token")
  valid_616135 = validateParameter(valid_616135, JString, required = false,
                                 default = nil)
  if valid_616135 != nil:
    section.add "X-Amz-Security-Token", valid_616135
  var valid_616136 = header.getOrDefault("X-Amz-Algorithm")
  valid_616136 = validateParameter(valid_616136, JString, required = false,
                                 default = nil)
  if valid_616136 != nil:
    section.add "X-Amz-Algorithm", valid_616136
  var valid_616137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616137 = validateParameter(valid_616137, JString, required = false,
                                 default = nil)
  if valid_616137 != nil:
    section.add "X-Amz-SignedHeaders", valid_616137
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_616138 = formData.getOrDefault("NewPath")
  valid_616138 = validateParameter(valid_616138, JString, required = false,
                                 default = nil)
  if valid_616138 != nil:
    section.add "NewPath", valid_616138
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_616139 = formData.getOrDefault("UserName")
  valid_616139 = validateParameter(valid_616139, JString, required = true,
                                 default = nil)
  if valid_616139 != nil:
    section.add "UserName", valid_616139
  var valid_616140 = formData.getOrDefault("NewUserName")
  valid_616140 = validateParameter(valid_616140, JString, required = false,
                                 default = nil)
  if valid_616140 != nil:
    section.add "NewUserName", valid_616140
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616141: Call_PostUpdateUser_616126; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_616141.validator(path, query, header, formData, body)
  let scheme = call_616141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616141.url(scheme.get, call_616141.host, call_616141.base,
                         call_616141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616141, url, valid)

proc call*(call_616142: Call_PostUpdateUser_616126; UserName: string;
          NewPath: string = ""; Action: string = "UpdateUser"; NewUserName: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_616143 = newJObject()
  var formData_616144 = newJObject()
  add(formData_616144, "NewPath", newJString(NewPath))
  add(formData_616144, "UserName", newJString(UserName))
  add(query_616143, "Action", newJString(Action))
  add(formData_616144, "NewUserName", newJString(NewUserName))
  add(query_616143, "Version", newJString(Version))
  result = call_616142.call(nil, query_616143, nil, formData_616144, nil)

var postUpdateUser* = Call_PostUpdateUser_616126(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_616127,
    base: "/", url: url_PostUpdateUser_616128, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_616108 = ref object of OpenApiRestCall_610658
proc url_GetUpdateUser_616110(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateUser_616109(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_616111 = query.getOrDefault("UserName")
  valid_616111 = validateParameter(valid_616111, JString, required = true,
                                 default = nil)
  if valid_616111 != nil:
    section.add "UserName", valid_616111
  var valid_616112 = query.getOrDefault("NewUserName")
  valid_616112 = validateParameter(valid_616112, JString, required = false,
                                 default = nil)
  if valid_616112 != nil:
    section.add "NewUserName", valid_616112
  var valid_616113 = query.getOrDefault("NewPath")
  valid_616113 = validateParameter(valid_616113, JString, required = false,
                                 default = nil)
  if valid_616113 != nil:
    section.add "NewPath", valid_616113
  var valid_616114 = query.getOrDefault("Action")
  valid_616114 = validateParameter(valid_616114, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_616114 != nil:
    section.add "Action", valid_616114
  var valid_616115 = query.getOrDefault("Version")
  valid_616115 = validateParameter(valid_616115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616115 != nil:
    section.add "Version", valid_616115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616116 = header.getOrDefault("X-Amz-Signature")
  valid_616116 = validateParameter(valid_616116, JString, required = false,
                                 default = nil)
  if valid_616116 != nil:
    section.add "X-Amz-Signature", valid_616116
  var valid_616117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616117 = validateParameter(valid_616117, JString, required = false,
                                 default = nil)
  if valid_616117 != nil:
    section.add "X-Amz-Content-Sha256", valid_616117
  var valid_616118 = header.getOrDefault("X-Amz-Date")
  valid_616118 = validateParameter(valid_616118, JString, required = false,
                                 default = nil)
  if valid_616118 != nil:
    section.add "X-Amz-Date", valid_616118
  var valid_616119 = header.getOrDefault("X-Amz-Credential")
  valid_616119 = validateParameter(valid_616119, JString, required = false,
                                 default = nil)
  if valid_616119 != nil:
    section.add "X-Amz-Credential", valid_616119
  var valid_616120 = header.getOrDefault("X-Amz-Security-Token")
  valid_616120 = validateParameter(valid_616120, JString, required = false,
                                 default = nil)
  if valid_616120 != nil:
    section.add "X-Amz-Security-Token", valid_616120
  var valid_616121 = header.getOrDefault("X-Amz-Algorithm")
  valid_616121 = validateParameter(valid_616121, JString, required = false,
                                 default = nil)
  if valid_616121 != nil:
    section.add "X-Amz-Algorithm", valid_616121
  var valid_616122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616122 = validateParameter(valid_616122, JString, required = false,
                                 default = nil)
  if valid_616122 != nil:
    section.add "X-Amz-SignedHeaders", valid_616122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616123: Call_GetUpdateUser_616108; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_616123.validator(path, query, header, formData, body)
  let scheme = call_616123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616123.url(scheme.get, call_616123.host, call_616123.base,
                         call_616123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616123, url, valid)

proc call*(call_616124: Call_GetUpdateUser_616108; UserName: string;
          NewUserName: string = ""; NewPath: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616125 = newJObject()
  add(query_616125, "UserName", newJString(UserName))
  add(query_616125, "NewUserName", newJString(NewUserName))
  add(query_616125, "NewPath", newJString(NewPath))
  add(query_616125, "Action", newJString(Action))
  add(query_616125, "Version", newJString(Version))
  result = call_616124.call(nil, query_616125, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_616108(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_616109,
    base: "/", url: url_GetUpdateUser_616110, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_616162 = ref object of OpenApiRestCall_610658
proc url_PostUploadSSHPublicKey_616164(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSSHPublicKey_616163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616165 = query.getOrDefault("Action")
  valid_616165 = validateParameter(valid_616165, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_616165 != nil:
    section.add "Action", valid_616165
  var valid_616166 = query.getOrDefault("Version")
  valid_616166 = validateParameter(valid_616166, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616166 != nil:
    section.add "Version", valid_616166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616167 = header.getOrDefault("X-Amz-Signature")
  valid_616167 = validateParameter(valid_616167, JString, required = false,
                                 default = nil)
  if valid_616167 != nil:
    section.add "X-Amz-Signature", valid_616167
  var valid_616168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616168 = validateParameter(valid_616168, JString, required = false,
                                 default = nil)
  if valid_616168 != nil:
    section.add "X-Amz-Content-Sha256", valid_616168
  var valid_616169 = header.getOrDefault("X-Amz-Date")
  valid_616169 = validateParameter(valid_616169, JString, required = false,
                                 default = nil)
  if valid_616169 != nil:
    section.add "X-Amz-Date", valid_616169
  var valid_616170 = header.getOrDefault("X-Amz-Credential")
  valid_616170 = validateParameter(valid_616170, JString, required = false,
                                 default = nil)
  if valid_616170 != nil:
    section.add "X-Amz-Credential", valid_616170
  var valid_616171 = header.getOrDefault("X-Amz-Security-Token")
  valid_616171 = validateParameter(valid_616171, JString, required = false,
                                 default = nil)
  if valid_616171 != nil:
    section.add "X-Amz-Security-Token", valid_616171
  var valid_616172 = header.getOrDefault("X-Amz-Algorithm")
  valid_616172 = validateParameter(valid_616172, JString, required = false,
                                 default = nil)
  if valid_616172 != nil:
    section.add "X-Amz-Algorithm", valid_616172
  var valid_616173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616173 = validateParameter(valid_616173, JString, required = false,
                                 default = nil)
  if valid_616173 != nil:
    section.add "X-Amz-SignedHeaders", valid_616173
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_616174 = formData.getOrDefault("SSHPublicKeyBody")
  valid_616174 = validateParameter(valid_616174, JString, required = true,
                                 default = nil)
  if valid_616174 != nil:
    section.add "SSHPublicKeyBody", valid_616174
  var valid_616175 = formData.getOrDefault("UserName")
  valid_616175 = validateParameter(valid_616175, JString, required = true,
                                 default = nil)
  if valid_616175 != nil:
    section.add "UserName", valid_616175
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616176: Call_PostUploadSSHPublicKey_616162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_616176.validator(path, query, header, formData, body)
  let scheme = call_616176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616176.url(scheme.get, call_616176.host, call_616176.base,
                         call_616176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616176, url, valid)

proc call*(call_616177: Call_PostUploadSSHPublicKey_616162;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616178 = newJObject()
  var formData_616179 = newJObject()
  add(formData_616179, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(formData_616179, "UserName", newJString(UserName))
  add(query_616178, "Action", newJString(Action))
  add(query_616178, "Version", newJString(Version))
  result = call_616177.call(nil, query_616178, nil, formData_616179, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_616162(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_616163, base: "/",
    url: url_PostUploadSSHPublicKey_616164, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_616145 = ref object of OpenApiRestCall_610658
proc url_GetUploadSSHPublicKey_616147(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSSHPublicKey_616146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_616148 = query.getOrDefault("SSHPublicKeyBody")
  valid_616148 = validateParameter(valid_616148, JString, required = true,
                                 default = nil)
  if valid_616148 != nil:
    section.add "SSHPublicKeyBody", valid_616148
  var valid_616149 = query.getOrDefault("UserName")
  valid_616149 = validateParameter(valid_616149, JString, required = true,
                                 default = nil)
  if valid_616149 != nil:
    section.add "UserName", valid_616149
  var valid_616150 = query.getOrDefault("Action")
  valid_616150 = validateParameter(valid_616150, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_616150 != nil:
    section.add "Action", valid_616150
  var valid_616151 = query.getOrDefault("Version")
  valid_616151 = validateParameter(valid_616151, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616151 != nil:
    section.add "Version", valid_616151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616152 = header.getOrDefault("X-Amz-Signature")
  valid_616152 = validateParameter(valid_616152, JString, required = false,
                                 default = nil)
  if valid_616152 != nil:
    section.add "X-Amz-Signature", valid_616152
  var valid_616153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616153 = validateParameter(valid_616153, JString, required = false,
                                 default = nil)
  if valid_616153 != nil:
    section.add "X-Amz-Content-Sha256", valid_616153
  var valid_616154 = header.getOrDefault("X-Amz-Date")
  valid_616154 = validateParameter(valid_616154, JString, required = false,
                                 default = nil)
  if valid_616154 != nil:
    section.add "X-Amz-Date", valid_616154
  var valid_616155 = header.getOrDefault("X-Amz-Credential")
  valid_616155 = validateParameter(valid_616155, JString, required = false,
                                 default = nil)
  if valid_616155 != nil:
    section.add "X-Amz-Credential", valid_616155
  var valid_616156 = header.getOrDefault("X-Amz-Security-Token")
  valid_616156 = validateParameter(valid_616156, JString, required = false,
                                 default = nil)
  if valid_616156 != nil:
    section.add "X-Amz-Security-Token", valid_616156
  var valid_616157 = header.getOrDefault("X-Amz-Algorithm")
  valid_616157 = validateParameter(valid_616157, JString, required = false,
                                 default = nil)
  if valid_616157 != nil:
    section.add "X-Amz-Algorithm", valid_616157
  var valid_616158 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616158 = validateParameter(valid_616158, JString, required = false,
                                 default = nil)
  if valid_616158 != nil:
    section.add "X-Amz-SignedHeaders", valid_616158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616159: Call_GetUploadSSHPublicKey_616145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_616159.validator(path, query, header, formData, body)
  let scheme = call_616159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616159.url(scheme.get, call_616159.host, call_616159.base,
                         call_616159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616159, url, valid)

proc call*(call_616160: Call_GetUploadSSHPublicKey_616145;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616161 = newJObject()
  add(query_616161, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_616161, "UserName", newJString(UserName))
  add(query_616161, "Action", newJString(Action))
  add(query_616161, "Version", newJString(Version))
  result = call_616160.call(nil, query_616161, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_616145(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_616146, base: "/",
    url: url_GetUploadSSHPublicKey_616147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_616200 = ref object of OpenApiRestCall_610658
proc url_PostUploadServerCertificate_616202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadServerCertificate_616201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616203 = query.getOrDefault("Action")
  valid_616203 = validateParameter(valid_616203, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_616203 != nil:
    section.add "Action", valid_616203
  var valid_616204 = query.getOrDefault("Version")
  valid_616204 = validateParameter(valid_616204, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616204 != nil:
    section.add "Version", valid_616204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616205 = header.getOrDefault("X-Amz-Signature")
  valid_616205 = validateParameter(valid_616205, JString, required = false,
                                 default = nil)
  if valid_616205 != nil:
    section.add "X-Amz-Signature", valid_616205
  var valid_616206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616206 = validateParameter(valid_616206, JString, required = false,
                                 default = nil)
  if valid_616206 != nil:
    section.add "X-Amz-Content-Sha256", valid_616206
  var valid_616207 = header.getOrDefault("X-Amz-Date")
  valid_616207 = validateParameter(valid_616207, JString, required = false,
                                 default = nil)
  if valid_616207 != nil:
    section.add "X-Amz-Date", valid_616207
  var valid_616208 = header.getOrDefault("X-Amz-Credential")
  valid_616208 = validateParameter(valid_616208, JString, required = false,
                                 default = nil)
  if valid_616208 != nil:
    section.add "X-Amz-Credential", valid_616208
  var valid_616209 = header.getOrDefault("X-Amz-Security-Token")
  valid_616209 = validateParameter(valid_616209, JString, required = false,
                                 default = nil)
  if valid_616209 != nil:
    section.add "X-Amz-Security-Token", valid_616209
  var valid_616210 = header.getOrDefault("X-Amz-Algorithm")
  valid_616210 = validateParameter(valid_616210, JString, required = false,
                                 default = nil)
  if valid_616210 != nil:
    section.add "X-Amz-Algorithm", valid_616210
  var valid_616211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616211 = validateParameter(valid_616211, JString, required = false,
                                 default = nil)
  if valid_616211 != nil:
    section.add "X-Amz-SignedHeaders", valid_616211
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_616212 = formData.getOrDefault("CertificateBody")
  valid_616212 = validateParameter(valid_616212, JString, required = true,
                                 default = nil)
  if valid_616212 != nil:
    section.add "CertificateBody", valid_616212
  var valid_616213 = formData.getOrDefault("PrivateKey")
  valid_616213 = validateParameter(valid_616213, JString, required = true,
                                 default = nil)
  if valid_616213 != nil:
    section.add "PrivateKey", valid_616213
  var valid_616214 = formData.getOrDefault("CertificateChain")
  valid_616214 = validateParameter(valid_616214, JString, required = false,
                                 default = nil)
  if valid_616214 != nil:
    section.add "CertificateChain", valid_616214
  var valid_616215 = formData.getOrDefault("ServerCertificateName")
  valid_616215 = validateParameter(valid_616215, JString, required = true,
                                 default = nil)
  if valid_616215 != nil:
    section.add "ServerCertificateName", valid_616215
  var valid_616216 = formData.getOrDefault("Path")
  valid_616216 = validateParameter(valid_616216, JString, required = false,
                                 default = nil)
  if valid_616216 != nil:
    section.add "Path", valid_616216
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616217: Call_PostUploadServerCertificate_616200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616217.validator(path, query, header, formData, body)
  let scheme = call_616217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616217.url(scheme.get, call_616217.host, call_616217.base,
                         call_616217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616217, url, valid)

proc call*(call_616218: Call_PostUploadServerCertificate_616200;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616219 = newJObject()
  var formData_616220 = newJObject()
  add(formData_616220, "CertificateBody", newJString(CertificateBody))
  add(formData_616220, "PrivateKey", newJString(PrivateKey))
  add(formData_616220, "CertificateChain", newJString(CertificateChain))
  add(formData_616220, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_616220, "Path", newJString(Path))
  add(query_616219, "Action", newJString(Action))
  add(query_616219, "Version", newJString(Version))
  result = call_616218.call(nil, query_616219, nil, formData_616220, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_616200(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_616201, base: "/",
    url: url_PostUploadServerCertificate_616202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_616180 = ref object of OpenApiRestCall_610658
proc url_GetUploadServerCertificate_616182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadServerCertificate_616181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616183 = query.getOrDefault("CertificateChain")
  valid_616183 = validateParameter(valid_616183, JString, required = false,
                                 default = nil)
  if valid_616183 != nil:
    section.add "CertificateChain", valid_616183
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_616184 = query.getOrDefault("CertificateBody")
  valid_616184 = validateParameter(valid_616184, JString, required = true,
                                 default = nil)
  if valid_616184 != nil:
    section.add "CertificateBody", valid_616184
  var valid_616185 = query.getOrDefault("PrivateKey")
  valid_616185 = validateParameter(valid_616185, JString, required = true,
                                 default = nil)
  if valid_616185 != nil:
    section.add "PrivateKey", valid_616185
  var valid_616186 = query.getOrDefault("Path")
  valid_616186 = validateParameter(valid_616186, JString, required = false,
                                 default = nil)
  if valid_616186 != nil:
    section.add "Path", valid_616186
  var valid_616187 = query.getOrDefault("ServerCertificateName")
  valid_616187 = validateParameter(valid_616187, JString, required = true,
                                 default = nil)
  if valid_616187 != nil:
    section.add "ServerCertificateName", valid_616187
  var valid_616188 = query.getOrDefault("Action")
  valid_616188 = validateParameter(valid_616188, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_616188 != nil:
    section.add "Action", valid_616188
  var valid_616189 = query.getOrDefault("Version")
  valid_616189 = validateParameter(valid_616189, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616189 != nil:
    section.add "Version", valid_616189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616190 = header.getOrDefault("X-Amz-Signature")
  valid_616190 = validateParameter(valid_616190, JString, required = false,
                                 default = nil)
  if valid_616190 != nil:
    section.add "X-Amz-Signature", valid_616190
  var valid_616191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616191 = validateParameter(valid_616191, JString, required = false,
                                 default = nil)
  if valid_616191 != nil:
    section.add "X-Amz-Content-Sha256", valid_616191
  var valid_616192 = header.getOrDefault("X-Amz-Date")
  valid_616192 = validateParameter(valid_616192, JString, required = false,
                                 default = nil)
  if valid_616192 != nil:
    section.add "X-Amz-Date", valid_616192
  var valid_616193 = header.getOrDefault("X-Amz-Credential")
  valid_616193 = validateParameter(valid_616193, JString, required = false,
                                 default = nil)
  if valid_616193 != nil:
    section.add "X-Amz-Credential", valid_616193
  var valid_616194 = header.getOrDefault("X-Amz-Security-Token")
  valid_616194 = validateParameter(valid_616194, JString, required = false,
                                 default = nil)
  if valid_616194 != nil:
    section.add "X-Amz-Security-Token", valid_616194
  var valid_616195 = header.getOrDefault("X-Amz-Algorithm")
  valid_616195 = validateParameter(valid_616195, JString, required = false,
                                 default = nil)
  if valid_616195 != nil:
    section.add "X-Amz-Algorithm", valid_616195
  var valid_616196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616196 = validateParameter(valid_616196, JString, required = false,
                                 default = nil)
  if valid_616196 != nil:
    section.add "X-Amz-SignedHeaders", valid_616196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616197: Call_GetUploadServerCertificate_616180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616197.validator(path, query, header, formData, body)
  let scheme = call_616197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616197.url(scheme.get, call_616197.host, call_616197.base,
                         call_616197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616197, url, valid)

proc call*(call_616198: Call_GetUploadServerCertificate_616180;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616199 = newJObject()
  add(query_616199, "CertificateChain", newJString(CertificateChain))
  add(query_616199, "CertificateBody", newJString(CertificateBody))
  add(query_616199, "PrivateKey", newJString(PrivateKey))
  add(query_616199, "Path", newJString(Path))
  add(query_616199, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_616199, "Action", newJString(Action))
  add(query_616199, "Version", newJString(Version))
  result = call_616198.call(nil, query_616199, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_616180(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_616181, base: "/",
    url: url_GetUploadServerCertificate_616182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_616238 = ref object of OpenApiRestCall_610658
proc url_PostUploadSigningCertificate_616240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSigningCertificate_616239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616241 = query.getOrDefault("Action")
  valid_616241 = validateParameter(valid_616241, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_616241 != nil:
    section.add "Action", valid_616241
  var valid_616242 = query.getOrDefault("Version")
  valid_616242 = validateParameter(valid_616242, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616242 != nil:
    section.add "Version", valid_616242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616243 = header.getOrDefault("X-Amz-Signature")
  valid_616243 = validateParameter(valid_616243, JString, required = false,
                                 default = nil)
  if valid_616243 != nil:
    section.add "X-Amz-Signature", valid_616243
  var valid_616244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616244 = validateParameter(valid_616244, JString, required = false,
                                 default = nil)
  if valid_616244 != nil:
    section.add "X-Amz-Content-Sha256", valid_616244
  var valid_616245 = header.getOrDefault("X-Amz-Date")
  valid_616245 = validateParameter(valid_616245, JString, required = false,
                                 default = nil)
  if valid_616245 != nil:
    section.add "X-Amz-Date", valid_616245
  var valid_616246 = header.getOrDefault("X-Amz-Credential")
  valid_616246 = validateParameter(valid_616246, JString, required = false,
                                 default = nil)
  if valid_616246 != nil:
    section.add "X-Amz-Credential", valid_616246
  var valid_616247 = header.getOrDefault("X-Amz-Security-Token")
  valid_616247 = validateParameter(valid_616247, JString, required = false,
                                 default = nil)
  if valid_616247 != nil:
    section.add "X-Amz-Security-Token", valid_616247
  var valid_616248 = header.getOrDefault("X-Amz-Algorithm")
  valid_616248 = validateParameter(valid_616248, JString, required = false,
                                 default = nil)
  if valid_616248 != nil:
    section.add "X-Amz-Algorithm", valid_616248
  var valid_616249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616249 = validateParameter(valid_616249, JString, required = false,
                                 default = nil)
  if valid_616249 != nil:
    section.add "X-Amz-SignedHeaders", valid_616249
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_616250 = formData.getOrDefault("CertificateBody")
  valid_616250 = validateParameter(valid_616250, JString, required = true,
                                 default = nil)
  if valid_616250 != nil:
    section.add "CertificateBody", valid_616250
  var valid_616251 = formData.getOrDefault("UserName")
  valid_616251 = validateParameter(valid_616251, JString, required = false,
                                 default = nil)
  if valid_616251 != nil:
    section.add "UserName", valid_616251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616252: Call_PostUploadSigningCertificate_616238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616252.validator(path, query, header, formData, body)
  let scheme = call_616252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616252.url(scheme.get, call_616252.host, call_616252.base,
                         call_616252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616252, url, valid)

proc call*(call_616253: Call_PostUploadSigningCertificate_616238;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616254 = newJObject()
  var formData_616255 = newJObject()
  add(formData_616255, "CertificateBody", newJString(CertificateBody))
  add(formData_616255, "UserName", newJString(UserName))
  add(query_616254, "Action", newJString(Action))
  add(query_616254, "Version", newJString(Version))
  result = call_616253.call(nil, query_616254, nil, formData_616255, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_616238(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_616239, base: "/",
    url: url_PostUploadSigningCertificate_616240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_616221 = ref object of OpenApiRestCall_610658
proc url_GetUploadSigningCertificate_616223(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSigningCertificate_616222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616224 = query.getOrDefault("UserName")
  valid_616224 = validateParameter(valid_616224, JString, required = false,
                                 default = nil)
  if valid_616224 != nil:
    section.add "UserName", valid_616224
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_616225 = query.getOrDefault("CertificateBody")
  valid_616225 = validateParameter(valid_616225, JString, required = true,
                                 default = nil)
  if valid_616225 != nil:
    section.add "CertificateBody", valid_616225
  var valid_616226 = query.getOrDefault("Action")
  valid_616226 = validateParameter(valid_616226, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_616226 != nil:
    section.add "Action", valid_616226
  var valid_616227 = query.getOrDefault("Version")
  valid_616227 = validateParameter(valid_616227, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616227 != nil:
    section.add "Version", valid_616227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616228 = header.getOrDefault("X-Amz-Signature")
  valid_616228 = validateParameter(valid_616228, JString, required = false,
                                 default = nil)
  if valid_616228 != nil:
    section.add "X-Amz-Signature", valid_616228
  var valid_616229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616229 = validateParameter(valid_616229, JString, required = false,
                                 default = nil)
  if valid_616229 != nil:
    section.add "X-Amz-Content-Sha256", valid_616229
  var valid_616230 = header.getOrDefault("X-Amz-Date")
  valid_616230 = validateParameter(valid_616230, JString, required = false,
                                 default = nil)
  if valid_616230 != nil:
    section.add "X-Amz-Date", valid_616230
  var valid_616231 = header.getOrDefault("X-Amz-Credential")
  valid_616231 = validateParameter(valid_616231, JString, required = false,
                                 default = nil)
  if valid_616231 != nil:
    section.add "X-Amz-Credential", valid_616231
  var valid_616232 = header.getOrDefault("X-Amz-Security-Token")
  valid_616232 = validateParameter(valid_616232, JString, required = false,
                                 default = nil)
  if valid_616232 != nil:
    section.add "X-Amz-Security-Token", valid_616232
  var valid_616233 = header.getOrDefault("X-Amz-Algorithm")
  valid_616233 = validateParameter(valid_616233, JString, required = false,
                                 default = nil)
  if valid_616233 != nil:
    section.add "X-Amz-Algorithm", valid_616233
  var valid_616234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616234 = validateParameter(valid_616234, JString, required = false,
                                 default = nil)
  if valid_616234 != nil:
    section.add "X-Amz-SignedHeaders", valid_616234
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616235: Call_GetUploadSigningCertificate_616221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616235.validator(path, query, header, formData, body)
  let scheme = call_616235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616235.url(scheme.get, call_616235.host, call_616235.base,
                         call_616235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616235, url, valid)

proc call*(call_616236: Call_GetUploadSigningCertificate_616221;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616237 = newJObject()
  add(query_616237, "UserName", newJString(UserName))
  add(query_616237, "CertificateBody", newJString(CertificateBody))
  add(query_616237, "Action", newJString(Action))
  add(query_616237, "Version", newJString(Version))
  result = call_616236.call(nil, query_616237, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_616221(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_616222, base: "/",
    url: url_GetUploadSigningCertificate_616223,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  headers[$ContentSha256] = hash(text, SHA256)
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
