
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5,
  base64, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Chime
## version: 2018-05-01
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <p>The Amazon Chime API (application programming interface) is designed for developers to perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes. It also includes some server-side API actions to use with the Amazon Chime SDK. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls. We recommend using an AWS SDK or the AWS CLI. Each API operation includes links to information about using it with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p>You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href="http://aws.amazon.com/developer/">AWS Developer Center</a>.</p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href="https://docs.aws.amazon.com/cli/latest/reference/chime/index.html">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>.</p> </dd> <dt>Using REST API</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports signature version 4. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href="https://docs.aws.amazon.com/chime/latest/ag/security-iam.html">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/chime/
type
  Scheme* {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                             header: JsonNode = nil; formData: JsonNode = nil;
                             body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                    path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_402656044 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_402656044](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base,
             route: t.route, schemes: t.schemes, validator: t.validator,
             url: t.url)

proc pickScheme(t: OpenApiRestCall_402656044): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                       default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
                                                            ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.
    used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Https: {"cn-northwest-1": "chime.cn-northwest-1.amazonaws.com.cn", "cn-north-1": "chime.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Http: {
      "cn-northwest-1": "chime.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "chime.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "chime"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode;
                body: string = ""): Recallable {.base.}
type
  Call_AssociatePhoneNumberWithUser_402656294 = ref object of OpenApiRestCall_402656044
proc url_AssociatePhoneNumberWithUser_402656296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"), (
        kind: ConstantSegment, value: "#operation=associate-phone-number")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociatePhoneNumberWithUser_402656295(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Associates a phone number with the specified Amazon Chime user.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656389 = path.getOrDefault("accountId")
  valid_402656389 = validateParameter(valid_402656389, JString, required = true,
                                      default = nil)
  if valid_402656389 != nil:
    section.add "accountId", valid_402656389
  var valid_402656390 = path.getOrDefault("userId")
  valid_402656390 = validateParameter(valid_402656390, JString, required = true,
                                      default = nil)
  if valid_402656390 != nil:
    section.add "userId", valid_402656390
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656403 = query.getOrDefault("operation")
  valid_402656403 = validateParameter(valid_402656403, JString, required = true, default = newJString(
      "associate-phone-number"))
  if valid_402656403 != nil:
    section.add "operation", valid_402656403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656404 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656404 = validateParameter(valid_402656404, JString,
                                      required = false, default = nil)
  if valid_402656404 != nil:
    section.add "X-Amz-Security-Token", valid_402656404
  var valid_402656405 = header.getOrDefault("X-Amz-Signature")
  valid_402656405 = validateParameter(valid_402656405, JString,
                                      required = false, default = nil)
  if valid_402656405 != nil:
    section.add "X-Amz-Signature", valid_402656405
  var valid_402656406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656406 = validateParameter(valid_402656406, JString,
                                      required = false, default = nil)
  if valid_402656406 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656406
  var valid_402656407 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656407 = validateParameter(valid_402656407, JString,
                                      required = false, default = nil)
  if valid_402656407 != nil:
    section.add "X-Amz-Algorithm", valid_402656407
  var valid_402656408 = header.getOrDefault("X-Amz-Date")
  valid_402656408 = validateParameter(valid_402656408, JString,
                                      required = false, default = nil)
  if valid_402656408 != nil:
    section.add "X-Amz-Date", valid_402656408
  var valid_402656409 = header.getOrDefault("X-Amz-Credential")
  valid_402656409 = validateParameter(valid_402656409, JString,
                                      required = false, default = nil)
  if valid_402656409 != nil:
    section.add "X-Amz-Credential", valid_402656409
  var valid_402656410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656410 = validateParameter(valid_402656410, JString,
                                      required = false, default = nil)
  if valid_402656410 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656410
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656425: Call_AssociatePhoneNumberWithUser_402656294;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates a phone number with the specified Amazon Chime user.
                                                                                         ## 
  let valid = call_402656425.validator(path, query, header, formData, body, _)
  let scheme = call_402656425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656425.makeUrl(scheme.get, call_402656425.host, call_402656425.base,
                                   call_402656425.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656425, uri, valid, _)

proc call*(call_402656474: Call_AssociatePhoneNumberWithUser_402656294;
           body: JsonNode; accountId: string; userId: string;
           operation: string = "associate-phone-number"): Recallable =
  ## associatePhoneNumberWithUser
  ## Associates a phone number with the specified Amazon Chime user.
  ##   body: JObject (required)
  ##   accountId: string (required)
                               ##            : The Amazon Chime account ID.
  ##   
                                                                           ## userId: string (required)
                                                                           ##         
                                                                           ## : 
                                                                           ## The 
                                                                           ## user 
                                                                           ## ID.
  ##   
                                                                                 ## operation: string (required)
  var path_402656475 = newJObject()
  var query_402656477 = newJObject()
  var body_402656478 = newJObject()
  if body != nil:
    body_402656478 = body
  add(path_402656475, "accountId", newJString(accountId))
  add(path_402656475, "userId", newJString(userId))
  add(query_402656477, "operation", newJString(operation))
  result = call_402656474.call(path_402656475, query_402656477, nil, nil, body_402656478)

var associatePhoneNumberWithUser* = Call_AssociatePhoneNumberWithUser_402656294(
    name: "associatePhoneNumberWithUser", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/users/{userId}#operation=associate-phone-number",
    validator: validate_AssociatePhoneNumberWithUser_402656295, base: "/",
    makeUrl: url_AssociatePhoneNumberWithUser_402656296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AssociatePhoneNumbersWithVoiceConnector_402656504 = ref object of OpenApiRestCall_402656044
proc url_AssociatePhoneNumbersWithVoiceConnector_402656506(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"), (
        kind: ConstantSegment, value: "#operation=associate-phone-numbers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociatePhoneNumbersWithVoiceConnector_402656505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Associates phone numbers with the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402656507 = path.getOrDefault("voiceConnectorId")
  valid_402656507 = validateParameter(valid_402656507, JString, required = true,
                                      default = nil)
  if valid_402656507 != nil:
    section.add "voiceConnectorId", valid_402656507
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656508 = query.getOrDefault("operation")
  valid_402656508 = validateParameter(valid_402656508, JString, required = true, default = newJString(
      "associate-phone-numbers"))
  if valid_402656508 != nil:
    section.add "operation", valid_402656508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656509 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656509 = validateParameter(valid_402656509, JString,
                                      required = false, default = nil)
  if valid_402656509 != nil:
    section.add "X-Amz-Security-Token", valid_402656509
  var valid_402656510 = header.getOrDefault("X-Amz-Signature")
  valid_402656510 = validateParameter(valid_402656510, JString,
                                      required = false, default = nil)
  if valid_402656510 != nil:
    section.add "X-Amz-Signature", valid_402656510
  var valid_402656511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656511 = validateParameter(valid_402656511, JString,
                                      required = false, default = nil)
  if valid_402656511 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656511
  var valid_402656512 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656512 = validateParameter(valid_402656512, JString,
                                      required = false, default = nil)
  if valid_402656512 != nil:
    section.add "X-Amz-Algorithm", valid_402656512
  var valid_402656513 = header.getOrDefault("X-Amz-Date")
  valid_402656513 = validateParameter(valid_402656513, JString,
                                      required = false, default = nil)
  if valid_402656513 != nil:
    section.add "X-Amz-Date", valid_402656513
  var valid_402656514 = header.getOrDefault("X-Amz-Credential")
  valid_402656514 = validateParameter(valid_402656514, JString,
                                      required = false, default = nil)
  if valid_402656514 != nil:
    section.add "X-Amz-Credential", valid_402656514
  var valid_402656515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656515 = validateParameter(valid_402656515, JString,
                                      required = false, default = nil)
  if valid_402656515 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656515
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656517: Call_AssociatePhoneNumbersWithVoiceConnector_402656504;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates phone numbers with the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402656517.validator(path, query, header, formData, body, _)
  let scheme = call_402656517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656517.makeUrl(scheme.get, call_402656517.host, call_402656517.base,
                                   call_402656517.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656517, uri, valid, _)

proc call*(call_402656518: Call_AssociatePhoneNumbersWithVoiceConnector_402656504;
           body: JsonNode; voiceConnectorId: string;
           operation: string = "associate-phone-numbers"): Recallable =
  ## associatePhoneNumbersWithVoiceConnector
  ## Associates phone numbers with the specified Amazon Chime Voice Connector.
  ##   
                                                                              ## body: JObject (required)
  ##   
                                                                                                         ## operation: string (required)
  ##   
                                                                                                                                        ## voiceConnectorId: string (required)
                                                                                                                                        ##                   
                                                                                                                                        ## : 
                                                                                                                                        ## The 
                                                                                                                                        ## Amazon 
                                                                                                                                        ## Chime 
                                                                                                                                        ## Voice 
                                                                                                                                        ## Connector 
                                                                                                                                        ## ID.
  var path_402656519 = newJObject()
  var query_402656520 = newJObject()
  var body_402656521 = newJObject()
  if body != nil:
    body_402656521 = body
  add(query_402656520, "operation", newJString(operation))
  add(path_402656519, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402656518.call(path_402656519, query_402656520, nil, nil, body_402656521)

var associatePhoneNumbersWithVoiceConnector* = Call_AssociatePhoneNumbersWithVoiceConnector_402656504(
    name: "associatePhoneNumbersWithVoiceConnector", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}#operation=associate-phone-numbers",
    validator: validate_AssociatePhoneNumbersWithVoiceConnector_402656505,
    base: "/", makeUrl: url_AssociatePhoneNumbersWithVoiceConnector_402656506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AssociatePhoneNumbersWithVoiceConnectorGroup_402656522 = ref object of OpenApiRestCall_402656044
proc url_AssociatePhoneNumbersWithVoiceConnectorGroup_402656524(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorGroupId" in path,
         "`voiceConnectorGroupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connector-groups/"),
                 (kind: VariableSegment, value: "voiceConnectorGroupId"), (
        kind: ConstantSegment, value: "#operation=associate-phone-numbers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociatePhoneNumbersWithVoiceConnectorGroup_402656523(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Associates phone numbers with the specified Amazon Chime Voice Connector group.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorGroupId: JString (required)
                                 ##                        : The Amazon Chime Voice Connector group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `voiceConnectorGroupId` field"
  var valid_402656525 = path.getOrDefault("voiceConnectorGroupId")
  valid_402656525 = validateParameter(valid_402656525, JString, required = true,
                                      default = nil)
  if valid_402656525 != nil:
    section.add "voiceConnectorGroupId", valid_402656525
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656526 = query.getOrDefault("operation")
  valid_402656526 = validateParameter(valid_402656526, JString, required = true, default = newJString(
      "associate-phone-numbers"))
  if valid_402656526 != nil:
    section.add "operation", valid_402656526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656527 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656527 = validateParameter(valid_402656527, JString,
                                      required = false, default = nil)
  if valid_402656527 != nil:
    section.add "X-Amz-Security-Token", valid_402656527
  var valid_402656528 = header.getOrDefault("X-Amz-Signature")
  valid_402656528 = validateParameter(valid_402656528, JString,
                                      required = false, default = nil)
  if valid_402656528 != nil:
    section.add "X-Amz-Signature", valid_402656528
  var valid_402656529 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656529 = validateParameter(valid_402656529, JString,
                                      required = false, default = nil)
  if valid_402656529 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656529
  var valid_402656530 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656530 = validateParameter(valid_402656530, JString,
                                      required = false, default = nil)
  if valid_402656530 != nil:
    section.add "X-Amz-Algorithm", valid_402656530
  var valid_402656531 = header.getOrDefault("X-Amz-Date")
  valid_402656531 = validateParameter(valid_402656531, JString,
                                      required = false, default = nil)
  if valid_402656531 != nil:
    section.add "X-Amz-Date", valid_402656531
  var valid_402656532 = header.getOrDefault("X-Amz-Credential")
  valid_402656532 = validateParameter(valid_402656532, JString,
                                      required = false, default = nil)
  if valid_402656532 != nil:
    section.add "X-Amz-Credential", valid_402656532
  var valid_402656533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656533 = validateParameter(valid_402656533, JString,
                                      required = false, default = nil)
  if valid_402656533 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656533
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656535: Call_AssociatePhoneNumbersWithVoiceConnectorGroup_402656522;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates phone numbers with the specified Amazon Chime Voice Connector group.
                                                                                         ## 
  let valid = call_402656535.validator(path, query, header, formData, body, _)
  let scheme = call_402656535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656535.makeUrl(scheme.get, call_402656535.host, call_402656535.base,
                                   call_402656535.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656535, uri, valid, _)

proc call*(call_402656536: Call_AssociatePhoneNumbersWithVoiceConnectorGroup_402656522;
           voiceConnectorGroupId: string; body: JsonNode;
           operation: string = "associate-phone-numbers"): Recallable =
  ## associatePhoneNumbersWithVoiceConnectorGroup
  ## Associates phone numbers with the specified Amazon Chime Voice Connector group.
  ##   
                                                                                    ## voiceConnectorGroupId: string (required)
                                                                                    ##                        
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## Amazon 
                                                                                    ## Chime 
                                                                                    ## Voice 
                                                                                    ## Connector 
                                                                                    ## group 
                                                                                    ## ID.
  ##   
                                                                                          ## body: JObject (required)
  ##   
                                                                                                                     ## operation: string (required)
  var path_402656537 = newJObject()
  var query_402656538 = newJObject()
  var body_402656539 = newJObject()
  add(path_402656537, "voiceConnectorGroupId", newJString(voiceConnectorGroupId))
  if body != nil:
    body_402656539 = body
  add(query_402656538, "operation", newJString(operation))
  result = call_402656536.call(path_402656537, query_402656538, nil, nil, body_402656539)

var associatePhoneNumbersWithVoiceConnectorGroup* = Call_AssociatePhoneNumbersWithVoiceConnectorGroup_402656522(
    name: "associatePhoneNumbersWithVoiceConnectorGroup",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/voice-connector-groups/{voiceConnectorGroupId}#operation=associate-phone-numbers",
    validator: validate_AssociatePhoneNumbersWithVoiceConnectorGroup_402656523,
    base: "/", makeUrl: url_AssociatePhoneNumbersWithVoiceConnectorGroup_402656524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_AssociateSigninDelegateGroupsWithAccount_402656540 = ref object of OpenApiRestCall_402656044
proc url_AssociateSigninDelegateGroupsWithAccount_402656542(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"), (
        kind: ConstantSegment,
        value: "#operation=associate-signin-delegate-groups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_AssociateSigninDelegateGroupsWithAccount_402656541(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Associates the specified sign-in delegate groups with the specified Amazon Chime account.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656543 = path.getOrDefault("accountId")
  valid_402656543 = validateParameter(valid_402656543, JString, required = true,
                                      default = nil)
  if valid_402656543 != nil:
    section.add "accountId", valid_402656543
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656544 = query.getOrDefault("operation")
  valid_402656544 = validateParameter(valid_402656544, JString, required = true, default = newJString(
      "associate-signin-delegate-groups"))
  if valid_402656544 != nil:
    section.add "operation", valid_402656544
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656545 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656545 = validateParameter(valid_402656545, JString,
                                      required = false, default = nil)
  if valid_402656545 != nil:
    section.add "X-Amz-Security-Token", valid_402656545
  var valid_402656546 = header.getOrDefault("X-Amz-Signature")
  valid_402656546 = validateParameter(valid_402656546, JString,
                                      required = false, default = nil)
  if valid_402656546 != nil:
    section.add "X-Amz-Signature", valid_402656546
  var valid_402656547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656547 = validateParameter(valid_402656547, JString,
                                      required = false, default = nil)
  if valid_402656547 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656547
  var valid_402656548 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656548 = validateParameter(valid_402656548, JString,
                                      required = false, default = nil)
  if valid_402656548 != nil:
    section.add "X-Amz-Algorithm", valid_402656548
  var valid_402656549 = header.getOrDefault("X-Amz-Date")
  valid_402656549 = validateParameter(valid_402656549, JString,
                                      required = false, default = nil)
  if valid_402656549 != nil:
    section.add "X-Amz-Date", valid_402656549
  var valid_402656550 = header.getOrDefault("X-Amz-Credential")
  valid_402656550 = validateParameter(valid_402656550, JString,
                                      required = false, default = nil)
  if valid_402656550 != nil:
    section.add "X-Amz-Credential", valid_402656550
  var valid_402656551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656551 = validateParameter(valid_402656551, JString,
                                      required = false, default = nil)
  if valid_402656551 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656551
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656553: Call_AssociateSigninDelegateGroupsWithAccount_402656540;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates the specified sign-in delegate groups with the specified Amazon Chime account.
                                                                                         ## 
  let valid = call_402656553.validator(path, query, header, formData, body, _)
  let scheme = call_402656553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656553.makeUrl(scheme.get, call_402656553.host, call_402656553.base,
                                   call_402656553.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656553, uri, valid, _)

proc call*(call_402656554: Call_AssociateSigninDelegateGroupsWithAccount_402656540;
           body: JsonNode; accountId: string;
           operation: string = "associate-signin-delegate-groups"): Recallable =
  ## associateSigninDelegateGroupsWithAccount
  ## Associates the specified sign-in delegate groups with the specified Amazon Chime account.
  ##   
                                                                                              ## body: JObject (required)
  ##   
                                                                                                                         ## accountId: string (required)
                                                                                                                         ##            
                                                                                                                         ## : 
                                                                                                                         ## The 
                                                                                                                         ## Amazon 
                                                                                                                         ## Chime 
                                                                                                                         ## account 
                                                                                                                         ## ID.
  ##   
                                                                                                                               ## operation: string (required)
  var path_402656555 = newJObject()
  var query_402656556 = newJObject()
  var body_402656557 = newJObject()
  if body != nil:
    body_402656557 = body
  add(path_402656555, "accountId", newJString(accountId))
  add(query_402656556, "operation", newJString(operation))
  result = call_402656554.call(path_402656555, query_402656556, nil, nil, body_402656557)

var associateSigninDelegateGroupsWithAccount* = Call_AssociateSigninDelegateGroupsWithAccount_402656540(
    name: "associateSigninDelegateGroupsWithAccount", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}#operation=associate-signin-delegate-groups",
    validator: validate_AssociateSigninDelegateGroupsWithAccount_402656541,
    base: "/", makeUrl: url_AssociateSigninDelegateGroupsWithAccount_402656542,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchCreateAttendee_402656558 = ref object of OpenApiRestCall_402656044
proc url_BatchCreateAttendee_402656560(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId"), (
        kind: ConstantSegment, value: "/attendees#operation=batch-create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_BatchCreateAttendee_402656559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>. 
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402656561 = path.getOrDefault("meetingId")
  valid_402656561 = validateParameter(valid_402656561, JString, required = true,
                                      default = nil)
  if valid_402656561 != nil:
    section.add "meetingId", valid_402656561
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656562 = query.getOrDefault("operation")
  valid_402656562 = validateParameter(valid_402656562, JString, required = true,
                                      default = newJString("batch-create"))
  if valid_402656562 != nil:
    section.add "operation", valid_402656562
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656563 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656563 = validateParameter(valid_402656563, JString,
                                      required = false, default = nil)
  if valid_402656563 != nil:
    section.add "X-Amz-Security-Token", valid_402656563
  var valid_402656564 = header.getOrDefault("X-Amz-Signature")
  valid_402656564 = validateParameter(valid_402656564, JString,
                                      required = false, default = nil)
  if valid_402656564 != nil:
    section.add "X-Amz-Signature", valid_402656564
  var valid_402656565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656565 = validateParameter(valid_402656565, JString,
                                      required = false, default = nil)
  if valid_402656565 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656565
  var valid_402656566 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656566 = validateParameter(valid_402656566, JString,
                                      required = false, default = nil)
  if valid_402656566 != nil:
    section.add "X-Amz-Algorithm", valid_402656566
  var valid_402656567 = header.getOrDefault("X-Amz-Date")
  valid_402656567 = validateParameter(valid_402656567, JString,
                                      required = false, default = nil)
  if valid_402656567 != nil:
    section.add "X-Amz-Date", valid_402656567
  var valid_402656568 = header.getOrDefault("X-Amz-Credential")
  valid_402656568 = validateParameter(valid_402656568, JString,
                                      required = false, default = nil)
  if valid_402656568 != nil:
    section.add "X-Amz-Credential", valid_402656568
  var valid_402656569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656569 = validateParameter(valid_402656569, JString,
                                      required = false, default = nil)
  if valid_402656569 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656569
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656571: Call_BatchCreateAttendee_402656558;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>. 
                                                                                         ## 
  let valid = call_402656571.validator(path, query, header, formData, body, _)
  let scheme = call_402656571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656571.makeUrl(scheme.get, call_402656571.host, call_402656571.base,
                                   call_402656571.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656571, uri, valid, _)

proc call*(call_402656572: Call_BatchCreateAttendee_402656558;
           meetingId: string; body: JsonNode; operation: string = "batch-create"): Recallable =
  ## batchCreateAttendee
  ## Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>. 
  ##   
                                                                                                                                                                                                                                                                                     ## meetingId: string (required)
                                                                                                                                                                                                                                                                                     ##            
                                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                                                     ## Amazon 
                                                                                                                                                                                                                                                                                     ## Chime 
                                                                                                                                                                                                                                                                                     ## SDK 
                                                                                                                                                                                                                                                                                     ## meeting 
                                                                                                                                                                                                                                                                                     ## ID.
  ##   
                                                                                                                                                                                                                                                                                           ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                      ## operation: string (required)
  var path_402656573 = newJObject()
  var query_402656574 = newJObject()
  var body_402656575 = newJObject()
  add(path_402656573, "meetingId", newJString(meetingId))
  if body != nil:
    body_402656575 = body
  add(query_402656574, "operation", newJString(operation))
  result = call_402656572.call(path_402656573, query_402656574, nil, nil, body_402656575)

var batchCreateAttendee* = Call_BatchCreateAttendee_402656558(
    name: "batchCreateAttendee", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}/attendees#operation=batch-create",
    validator: validate_BatchCreateAttendee_402656559, base: "/",
    makeUrl: url_BatchCreateAttendee_402656560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchCreateRoomMembership_402656576 = ref object of OpenApiRestCall_402656044
proc url_BatchCreateRoomMembership_402656578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId"), (
        kind: ConstantSegment, value: "/memberships#operation=batch-create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_BatchCreateRoomMembership_402656577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The room ID.
  ##   accountId: JString (required)
                                                          ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402656579 = path.getOrDefault("roomId")
  valid_402656579 = validateParameter(valid_402656579, JString, required = true,
                                      default = nil)
  if valid_402656579 != nil:
    section.add "roomId", valid_402656579
  var valid_402656580 = path.getOrDefault("accountId")
  valid_402656580 = validateParameter(valid_402656580, JString, required = true,
                                      default = nil)
  if valid_402656580 != nil:
    section.add "accountId", valid_402656580
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656581 = query.getOrDefault("operation")
  valid_402656581 = validateParameter(valid_402656581, JString, required = true,
                                      default = newJString("batch-create"))
  if valid_402656581 != nil:
    section.add "operation", valid_402656581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656582 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656582 = validateParameter(valid_402656582, JString,
                                      required = false, default = nil)
  if valid_402656582 != nil:
    section.add "X-Amz-Security-Token", valid_402656582
  var valid_402656583 = header.getOrDefault("X-Amz-Signature")
  valid_402656583 = validateParameter(valid_402656583, JString,
                                      required = false, default = nil)
  if valid_402656583 != nil:
    section.add "X-Amz-Signature", valid_402656583
  var valid_402656584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656584 = validateParameter(valid_402656584, JString,
                                      required = false, default = nil)
  if valid_402656584 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656584
  var valid_402656585 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656585 = validateParameter(valid_402656585, JString,
                                      required = false, default = nil)
  if valid_402656585 != nil:
    section.add "X-Amz-Algorithm", valid_402656585
  var valid_402656586 = header.getOrDefault("X-Amz-Date")
  valid_402656586 = validateParameter(valid_402656586, JString,
                                      required = false, default = nil)
  if valid_402656586 != nil:
    section.add "X-Amz-Date", valid_402656586
  var valid_402656587 = header.getOrDefault("X-Amz-Credential")
  valid_402656587 = validateParameter(valid_402656587, JString,
                                      required = false, default = nil)
  if valid_402656587 != nil:
    section.add "X-Amz-Credential", valid_402656587
  var valid_402656588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656588 = validateParameter(valid_402656588, JString,
                                      required = false, default = nil)
  if valid_402656588 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656588
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656590: Call_BatchCreateRoomMembership_402656576;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
                                                                                         ## 
  let valid = call_402656590.validator(path, query, header, formData, body, _)
  let scheme = call_402656590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656590.makeUrl(scheme.get, call_402656590.host, call_402656590.base,
                                   call_402656590.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656590, uri, valid, _)

proc call*(call_402656591: Call_BatchCreateRoomMembership_402656576;
           roomId: string; body: JsonNode; accountId: string;
           operation: string = "batch-create"): Recallable =
  ## batchCreateRoomMembership
  ## Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
  ##   
                                                                                                                                                                                                                               ## roomId: string (required)
                                                                                                                                                                                                                               ##         
                                                                                                                                                                                                                               ## : 
                                                                                                                                                                                                                               ## The 
                                                                                                                                                                                                                               ## room 
                                                                                                                                                                                                                               ## ID.
  ##   
                                                                                                                                                                                                                                     ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                ## accountId: string (required)
                                                                                                                                                                                                                                                                ##            
                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                ## Amazon 
                                                                                                                                                                                                                                                                ## Chime 
                                                                                                                                                                                                                                                                ## account 
                                                                                                                                                                                                                                                                ## ID.
  ##   
                                                                                                                                                                                                                                                                      ## operation: string (required)
  var path_402656592 = newJObject()
  var query_402656593 = newJObject()
  var body_402656594 = newJObject()
  add(path_402656592, "roomId", newJString(roomId))
  if body != nil:
    body_402656594 = body
  add(path_402656592, "accountId", newJString(accountId))
  add(query_402656593, "operation", newJString(operation))
  result = call_402656591.call(path_402656592, query_402656593, nil, nil, body_402656594)

var batchCreateRoomMembership* = Call_BatchCreateRoomMembership_402656576(
    name: "batchCreateRoomMembership", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/rooms/{roomId}/memberships#operation=batch-create",
    validator: validate_BatchCreateRoomMembership_402656577, base: "/",
    makeUrl: url_BatchCreateRoomMembership_402656578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchDeletePhoneNumber_402656595 = ref object of OpenApiRestCall_402656044
proc url_BatchDeletePhoneNumber_402656597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_BatchDeletePhoneNumber_402656596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.</p> <p>Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656598 = query.getOrDefault("operation")
  valid_402656598 = validateParameter(valid_402656598, JString, required = true,
                                      default = newJString("batch-delete"))
  if valid_402656598 != nil:
    section.add "operation", valid_402656598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656599 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656599 = validateParameter(valid_402656599, JString,
                                      required = false, default = nil)
  if valid_402656599 != nil:
    section.add "X-Amz-Security-Token", valid_402656599
  var valid_402656600 = header.getOrDefault("X-Amz-Signature")
  valid_402656600 = validateParameter(valid_402656600, JString,
                                      required = false, default = nil)
  if valid_402656600 != nil:
    section.add "X-Amz-Signature", valid_402656600
  var valid_402656601 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656601 = validateParameter(valid_402656601, JString,
                                      required = false, default = nil)
  if valid_402656601 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656601
  var valid_402656602 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656602 = validateParameter(valid_402656602, JString,
                                      required = false, default = nil)
  if valid_402656602 != nil:
    section.add "X-Amz-Algorithm", valid_402656602
  var valid_402656603 = header.getOrDefault("X-Amz-Date")
  valid_402656603 = validateParameter(valid_402656603, JString,
                                      required = false, default = nil)
  if valid_402656603 != nil:
    section.add "X-Amz-Date", valid_402656603
  var valid_402656604 = header.getOrDefault("X-Amz-Credential")
  valid_402656604 = validateParameter(valid_402656604, JString,
                                      required = false, default = nil)
  if valid_402656604 != nil:
    section.add "X-Amz-Credential", valid_402656604
  var valid_402656605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656605 = validateParameter(valid_402656605, JString,
                                      required = false, default = nil)
  if valid_402656605 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656605
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656607: Call_BatchDeletePhoneNumber_402656595;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.</p> <p>Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
                                                                                         ## 
  let valid = call_402656607.validator(path, query, header, formData, body, _)
  let scheme = call_402656607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656607.makeUrl(scheme.get, call_402656607.host, call_402656607.base,
                                   call_402656607.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656607, uri, valid, _)

proc call*(call_402656608: Call_BatchDeletePhoneNumber_402656595;
           body: JsonNode; operation: string = "batch-delete"): Recallable =
  ## batchDeletePhoneNumber
  ## <p>Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.</p> <p>Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
  ##   
                                                                                                                                                                                                                                                                                        ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                   ## operation: string (required)
  var query_402656609 = newJObject()
  var body_402656610 = newJObject()
  if body != nil:
    body_402656610 = body
  add(query_402656609, "operation", newJString(operation))
  result = call_402656608.call(nil, query_402656609, nil, nil, body_402656610)

var batchDeletePhoneNumber* = Call_BatchDeletePhoneNumber_402656595(
    name: "batchDeletePhoneNumber", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/phone-numbers#operation=batch-delete",
    validator: validate_BatchDeletePhoneNumber_402656596, base: "/",
    makeUrl: url_BatchDeletePhoneNumber_402656597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchSuspendUser_402656611 = ref object of OpenApiRestCall_402656044
proc url_BatchSuspendUser_402656613(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users#operation=suspend")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_BatchSuspendUser_402656612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Users suspended from a <code>Team</code> account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended <code>Team</code> account users, invite them to the <code>Team</code> account again. You can use the <a>InviteUsers</a> action to do so.</p> <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action. </p> <p>To sign out users without suspending them, use the <a>LogoutUser</a> action.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656614 = path.getOrDefault("accountId")
  valid_402656614 = validateParameter(valid_402656614, JString, required = true,
                                      default = nil)
  if valid_402656614 != nil:
    section.add "accountId", valid_402656614
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656615 = query.getOrDefault("operation")
  valid_402656615 = validateParameter(valid_402656615, JString, required = true,
                                      default = newJString("suspend"))
  if valid_402656615 != nil:
    section.add "operation", valid_402656615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656616 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656616 = validateParameter(valid_402656616, JString,
                                      required = false, default = nil)
  if valid_402656616 != nil:
    section.add "X-Amz-Security-Token", valid_402656616
  var valid_402656617 = header.getOrDefault("X-Amz-Signature")
  valid_402656617 = validateParameter(valid_402656617, JString,
                                      required = false, default = nil)
  if valid_402656617 != nil:
    section.add "X-Amz-Signature", valid_402656617
  var valid_402656618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656618 = validateParameter(valid_402656618, JString,
                                      required = false, default = nil)
  if valid_402656618 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656618
  var valid_402656619 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656619 = validateParameter(valid_402656619, JString,
                                      required = false, default = nil)
  if valid_402656619 != nil:
    section.add "X-Amz-Algorithm", valid_402656619
  var valid_402656620 = header.getOrDefault("X-Amz-Date")
  valid_402656620 = validateParameter(valid_402656620, JString,
                                      required = false, default = nil)
  if valid_402656620 != nil:
    section.add "X-Amz-Date", valid_402656620
  var valid_402656621 = header.getOrDefault("X-Amz-Credential")
  valid_402656621 = validateParameter(valid_402656621, JString,
                                      required = false, default = nil)
  if valid_402656621 != nil:
    section.add "X-Amz-Credential", valid_402656621
  var valid_402656622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656622 = validateParameter(valid_402656622, JString,
                                      required = false, default = nil)
  if valid_402656622 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656624: Call_BatchSuspendUser_402656611;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Users suspended from a <code>Team</code> account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended <code>Team</code> account users, invite them to the <code>Team</code> account again. You can use the <a>InviteUsers</a> action to do so.</p> <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action. </p> <p>To sign out users without suspending them, use the <a>LogoutUser</a> action.</p>
                                                                                         ## 
  let valid = call_402656624.validator(path, query, header, formData, body, _)
  let scheme = call_402656624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656624.makeUrl(scheme.get, call_402656624.host, call_402656624.base,
                                   call_402656624.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656624, uri, valid, _)

proc call*(call_402656625: Call_BatchSuspendUser_402656611; body: JsonNode;
           accountId: string; operation: string = "suspend"): Recallable =
  ## batchSuspendUser
  ## <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Users suspended from a <code>Team</code> account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended <code>Team</code> account users, invite them to the <code>Team</code> account again. You can use the <a>InviteUsers</a> action to do so.</p> <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action. </p> <p>To sign out users without suspending them, use the <a>LogoutUser</a> action.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ## body: JObject (required)
  ##   
accountId: string (required)


he 
mazon 
hime 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## account 

  ##   
operation: string (required)
  var path_402656626 = newJObject()
  var query_402656627 = newJObject()
  var body_402656628 = newJObject()
  if body != nil:
    body_402656628 = body
  add(path_402656626, "accountId", newJString(accountId))
  add(query_402656627, "operation", newJString(operation))
  result = call_402656625.call(path_402656626, query_402656627, nil, nil, body_402656628)

var batchSuspendUser* = Call_BatchSuspendUser_402656611(
    name: "batchSuspendUser", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users#operation=suspend",
    validator: validate_BatchSuspendUser_402656612, base: "/",
    makeUrl: url_BatchSuspendUser_402656613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchUnsuspendUser_402656629 = ref object of OpenApiRestCall_402656044
proc url_BatchUnsuspendUser_402656631(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users#operation=unsuspend")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_BatchUnsuspendUser_402656630(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code> accounts can be unsuspended using this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Previously suspended users who are unsuspended using this action are returned to <code>Registered</code> status. Users who are not previously suspended are ignored.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656632 = path.getOrDefault("accountId")
  valid_402656632 = validateParameter(valid_402656632, JString, required = true,
                                      default = nil)
  if valid_402656632 != nil:
    section.add "accountId", valid_402656632
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656633 = query.getOrDefault("operation")
  valid_402656633 = validateParameter(valid_402656633, JString, required = true,
                                      default = newJString("unsuspend"))
  if valid_402656633 != nil:
    section.add "operation", valid_402656633
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656634 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656634 = validateParameter(valid_402656634, JString,
                                      required = false, default = nil)
  if valid_402656634 != nil:
    section.add "X-Amz-Security-Token", valid_402656634
  var valid_402656635 = header.getOrDefault("X-Amz-Signature")
  valid_402656635 = validateParameter(valid_402656635, JString,
                                      required = false, default = nil)
  if valid_402656635 != nil:
    section.add "X-Amz-Signature", valid_402656635
  var valid_402656636 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656636 = validateParameter(valid_402656636, JString,
                                      required = false, default = nil)
  if valid_402656636 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656636
  var valid_402656637 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656637 = validateParameter(valid_402656637, JString,
                                      required = false, default = nil)
  if valid_402656637 != nil:
    section.add "X-Amz-Algorithm", valid_402656637
  var valid_402656638 = header.getOrDefault("X-Amz-Date")
  valid_402656638 = validateParameter(valid_402656638, JString,
                                      required = false, default = nil)
  if valid_402656638 != nil:
    section.add "X-Amz-Date", valid_402656638
  var valid_402656639 = header.getOrDefault("X-Amz-Credential")
  valid_402656639 = validateParameter(valid_402656639, JString,
                                      required = false, default = nil)
  if valid_402656639 != nil:
    section.add "X-Amz-Credential", valid_402656639
  var valid_402656640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656640 = validateParameter(valid_402656640, JString,
                                      required = false, default = nil)
  if valid_402656640 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656640
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656642: Call_BatchUnsuspendUser_402656629;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code> accounts can be unsuspended using this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Previously suspended users who are unsuspended using this action are returned to <code>Registered</code> status. Users who are not previously suspended are ignored.</p>
                                                                                         ## 
  let valid = call_402656642.validator(path, query, header, formData, body, _)
  let scheme = call_402656642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656642.makeUrl(scheme.get, call_402656642.host, call_402656642.base,
                                   call_402656642.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656642, uri, valid, _)

proc call*(call_402656643: Call_BatchUnsuspendUser_402656629; body: JsonNode;
           accountId: string; operation: string = "unsuspend"): Recallable =
  ## batchUnsuspendUser
  ## <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code> accounts can be unsuspended using this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Previously suspended users who are unsuspended using this action are returned to <code>Registered</code> status. Users who are not previously suspended are ignored.</p>
  ##   
body: JObject (required)
  ##   
accountId: string (required)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ## The 
mazon 
hime 
account 

  ##   
operation: string (required)
  var path_402656644 = newJObject()
  var query_402656645 = newJObject()
  var body_402656646 = newJObject()
  if body != nil:
    body_402656646 = body
  add(path_402656644, "accountId", newJString(accountId))
  add(query_402656645, "operation", newJString(operation))
  result = call_402656643.call(path_402656644, query_402656645, nil, nil, body_402656646)

var batchUnsuspendUser* = Call_BatchUnsuspendUser_402656629(
    name: "batchUnsuspendUser", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users#operation=unsuspend",
    validator: validate_BatchUnsuspendUser_402656630, base: "/",
    makeUrl: url_BatchUnsuspendUser_402656631,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchUpdatePhoneNumber_402656647 = ref object of OpenApiRestCall_402656044
proc url_BatchUpdatePhoneNumber_402656649(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_BatchUpdatePhoneNumber_402656648(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update either the product type or the calling name.</p> <p>For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656650 = query.getOrDefault("operation")
  valid_402656650 = validateParameter(valid_402656650, JString, required = true,
                                      default = newJString("batch-update"))
  if valid_402656650 != nil:
    section.add "operation", valid_402656650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656651 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656651 = validateParameter(valid_402656651, JString,
                                      required = false, default = nil)
  if valid_402656651 != nil:
    section.add "X-Amz-Security-Token", valid_402656651
  var valid_402656652 = header.getOrDefault("X-Amz-Signature")
  valid_402656652 = validateParameter(valid_402656652, JString,
                                      required = false, default = nil)
  if valid_402656652 != nil:
    section.add "X-Amz-Signature", valid_402656652
  var valid_402656653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656653 = validateParameter(valid_402656653, JString,
                                      required = false, default = nil)
  if valid_402656653 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656653
  var valid_402656654 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656654 = validateParameter(valid_402656654, JString,
                                      required = false, default = nil)
  if valid_402656654 != nil:
    section.add "X-Amz-Algorithm", valid_402656654
  var valid_402656655 = header.getOrDefault("X-Amz-Date")
  valid_402656655 = validateParameter(valid_402656655, JString,
                                      required = false, default = nil)
  if valid_402656655 != nil:
    section.add "X-Amz-Date", valid_402656655
  var valid_402656656 = header.getOrDefault("X-Amz-Credential")
  valid_402656656 = validateParameter(valid_402656656, JString,
                                      required = false, default = nil)
  if valid_402656656 != nil:
    section.add "X-Amz-Credential", valid_402656656
  var valid_402656657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656657 = validateParameter(valid_402656657, JString,
                                      required = false, default = nil)
  if valid_402656657 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656659: Call_BatchUpdatePhoneNumber_402656647;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update either the product type or the calling name.</p> <p>For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
                                                                                         ## 
  let valid = call_402656659.validator(path, query, header, formData, body, _)
  let scheme = call_402656659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656659.makeUrl(scheme.get, call_402656659.host, call_402656659.base,
                                   call_402656659.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656659, uri, valid, _)

proc call*(call_402656660: Call_BatchUpdatePhoneNumber_402656647;
           body: JsonNode; operation: string = "batch-update"): Recallable =
  ## batchUpdatePhoneNumber
  ## <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update either the product type or the calling name.</p> <p>For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
  ##   
body: JObject (required)
  ##   
operation: string (required)
  var query_402656661 = newJObject()
  var body_402656662 = newJObject()
  if body != nil:
    body_402656662 = body
  add(query_402656661, "operation", newJString(operation))
  result = call_402656660.call(nil, query_402656661, nil, nil, body_402656662)

var batchUpdatePhoneNumber* = Call_BatchUpdatePhoneNumber_402656647(
    name: "batchUpdatePhoneNumber", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/phone-numbers#operation=batch-update",
    validator: validate_BatchUpdatePhoneNumber_402656648, base: "/",
    makeUrl: url_BatchUpdatePhoneNumber_402656649,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_BatchUpdateUser_402656684 = ref object of OpenApiRestCall_402656044
proc url_BatchUpdateUser_402656686(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_BatchUpdateUser_402656685(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656687 = path.getOrDefault("accountId")
  valid_402656687 = validateParameter(valid_402656687, JString, required = true,
                                      default = nil)
  if valid_402656687 != nil:
    section.add "accountId", valid_402656687
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656688 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656688 = validateParameter(valid_402656688, JString,
                                      required = false, default = nil)
  if valid_402656688 != nil:
    section.add "X-Amz-Security-Token", valid_402656688
  var valid_402656689 = header.getOrDefault("X-Amz-Signature")
  valid_402656689 = validateParameter(valid_402656689, JString,
                                      required = false, default = nil)
  if valid_402656689 != nil:
    section.add "X-Amz-Signature", valid_402656689
  var valid_402656690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656690 = validateParameter(valid_402656690, JString,
                                      required = false, default = nil)
  if valid_402656690 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656690
  var valid_402656691 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656691 = validateParameter(valid_402656691, JString,
                                      required = false, default = nil)
  if valid_402656691 != nil:
    section.add "X-Amz-Algorithm", valid_402656691
  var valid_402656692 = header.getOrDefault("X-Amz-Date")
  valid_402656692 = validateParameter(valid_402656692, JString,
                                      required = false, default = nil)
  if valid_402656692 != nil:
    section.add "X-Amz-Date", valid_402656692
  var valid_402656693 = header.getOrDefault("X-Amz-Credential")
  valid_402656693 = validateParameter(valid_402656693, JString,
                                      required = false, default = nil)
  if valid_402656693 != nil:
    section.add "X-Amz-Credential", valid_402656693
  var valid_402656694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656694 = validateParameter(valid_402656694, JString,
                                      required = false, default = nil)
  if valid_402656694 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656694
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656696: Call_BatchUpdateUser_402656684; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action.
                                                                                         ## 
  let valid = call_402656696.validator(path, query, header, formData, body, _)
  let scheme = call_402656696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656696.makeUrl(scheme.get, call_402656696.host, call_402656696.base,
                                   call_402656696.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656696, uri, valid, _)

proc call*(call_402656697: Call_BatchUpdateUser_402656684; body: JsonNode;
           accountId: string): Recallable =
  ## batchUpdateUser
  ## Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action.
  ##   
                                                                                                                                                                                                                   ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                              ## accountId: string (required)
                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                              ## Amazon 
                                                                                                                                                                                                                                              ## Chime 
                                                                                                                                                                                                                                              ## account 
                                                                                                                                                                                                                                              ## ID.
  var path_402656698 = newJObject()
  var body_402656699 = newJObject()
  if body != nil:
    body_402656699 = body
  add(path_402656698, "accountId", newJString(accountId))
  result = call_402656697.call(path_402656698, nil, nil, nil, body_402656699)

var batchUpdateUser* = Call_BatchUpdateUser_402656684(name: "batchUpdateUser",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users", validator: validate_BatchUpdateUser_402656685,
    base: "/", makeUrl: url_BatchUpdateUser_402656686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListUsers_402656663 = ref object of OpenApiRestCall_402656044
proc url_ListUsers_402656665(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListUsers_402656664(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656666 = path.getOrDefault("accountId")
  valid_402656666 = validateParameter(valid_402656666, JString, required = true,
                                      default = nil)
  if valid_402656666 != nil:
    section.add "accountId", valid_402656666
  result.add "path", section
  ## parameters in `query` object:
  ##   user-email: JString
                                  ##             : Optional. The user email address used to filter results. Maximum 1.
  ##   
                                                                                                                      ## user-type: JString
                                                                                                                      ##            
                                                                                                                      ## : 
                                                                                                                      ## The 
                                                                                                                      ## user 
                                                                                                                      ## type.
  ##   
                                                                                                                              ## max-results: JInt
                                                                                                                              ##              
                                                                                                                              ## : 
                                                                                                                              ## The 
                                                                                                                              ## maximum 
                                                                                                                              ## number 
                                                                                                                              ## of 
                                                                                                                              ## results 
                                                                                                                              ## to 
                                                                                                                              ## return 
                                                                                                                              ## in 
                                                                                                                              ## a 
                                                                                                                              ## single 
                                                                                                                              ## call. 
                                                                                                                              ## Defaults 
                                                                                                                              ## to 
                                                                                                                              ## 100.
  ##   
                                                                                                                                     ## MaxResults: JString
                                                                                                                                     ##             
                                                                                                                                     ## : 
                                                                                                                                     ## Pagination 
                                                                                                                                     ## limit
  ##   
                                                                                                                                             ## NextToken: JString
                                                                                                                                             ##            
                                                                                                                                             ## : 
                                                                                                                                             ## Pagination 
                                                                                                                                             ## token
  ##   
                                                                                                                                                     ## next-token: JString
                                                                                                                                                     ##             
                                                                                                                                                     ## : 
                                                                                                                                                     ## The 
                                                                                                                                                     ## token 
                                                                                                                                                     ## to 
                                                                                                                                                     ## use 
                                                                                                                                                     ## to 
                                                                                                                                                     ## retrieve 
                                                                                                                                                     ## the 
                                                                                                                                                     ## next 
                                                                                                                                                     ## page 
                                                                                                                                                     ## of 
                                                                                                                                                     ## results.
  section = newJObject()
  var valid_402656667 = query.getOrDefault("user-email")
  valid_402656667 = validateParameter(valid_402656667, JString,
                                      required = false, default = nil)
  if valid_402656667 != nil:
    section.add "user-email", valid_402656667
  var valid_402656668 = query.getOrDefault("user-type")
  valid_402656668 = validateParameter(valid_402656668, JString,
                                      required = false,
                                      default = newJString("PrivateUser"))
  if valid_402656668 != nil:
    section.add "user-type", valid_402656668
  var valid_402656669 = query.getOrDefault("max-results")
  valid_402656669 = validateParameter(valid_402656669, JInt, required = false,
                                      default = nil)
  if valid_402656669 != nil:
    section.add "max-results", valid_402656669
  var valid_402656670 = query.getOrDefault("MaxResults")
  valid_402656670 = validateParameter(valid_402656670, JString,
                                      required = false, default = nil)
  if valid_402656670 != nil:
    section.add "MaxResults", valid_402656670
  var valid_402656671 = query.getOrDefault("NextToken")
  valid_402656671 = validateParameter(valid_402656671, JString,
                                      required = false, default = nil)
  if valid_402656671 != nil:
    section.add "NextToken", valid_402656671
  var valid_402656672 = query.getOrDefault("next-token")
  valid_402656672 = validateParameter(valid_402656672, JString,
                                      required = false, default = nil)
  if valid_402656672 != nil:
    section.add "next-token", valid_402656672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656673 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656673 = validateParameter(valid_402656673, JString,
                                      required = false, default = nil)
  if valid_402656673 != nil:
    section.add "X-Amz-Security-Token", valid_402656673
  var valid_402656674 = header.getOrDefault("X-Amz-Signature")
  valid_402656674 = validateParameter(valid_402656674, JString,
                                      required = false, default = nil)
  if valid_402656674 != nil:
    section.add "X-Amz-Signature", valid_402656674
  var valid_402656675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656675 = validateParameter(valid_402656675, JString,
                                      required = false, default = nil)
  if valid_402656675 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656675
  var valid_402656676 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656676 = validateParameter(valid_402656676, JString,
                                      required = false, default = nil)
  if valid_402656676 != nil:
    section.add "X-Amz-Algorithm", valid_402656676
  var valid_402656677 = header.getOrDefault("X-Amz-Date")
  valid_402656677 = validateParameter(valid_402656677, JString,
                                      required = false, default = nil)
  if valid_402656677 != nil:
    section.add "X-Amz-Date", valid_402656677
  var valid_402656678 = header.getOrDefault("X-Amz-Credential")
  valid_402656678 = validateParameter(valid_402656678, JString,
                                      required = false, default = nil)
  if valid_402656678 != nil:
    section.add "X-Amz-Credential", valid_402656678
  var valid_402656679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656679 = validateParameter(valid_402656679, JString,
                                      required = false, default = nil)
  if valid_402656679 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656680: Call_ListUsers_402656663; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
                                                                                         ## 
  let valid = call_402656680.validator(path, query, header, formData, body, _)
  let scheme = call_402656680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656680.makeUrl(scheme.get, call_402656680.host, call_402656680.base,
                                   call_402656680.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656680, uri, valid, _)

proc call*(call_402656681: Call_ListUsers_402656663; accountId: string;
           userEmail: string = ""; userType: string = "PrivateUser";
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listUsers
  ## Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
  ##   
                                                                                                                                                                 ## userEmail: string
                                                                                                                                                                 ##            
                                                                                                                                                                 ## : 
                                                                                                                                                                 ## Optional. 
                                                                                                                                                                 ## The 
                                                                                                                                                                 ## user 
                                                                                                                                                                 ## email 
                                                                                                                                                                 ## address 
                                                                                                                                                                 ## used 
                                                                                                                                                                 ## to 
                                                                                                                                                                 ## filter 
                                                                                                                                                                 ## results. 
                                                                                                                                                                 ## Maximum 
                                                                                                                                                                 ## 1.
  ##   
                                                                                                                                                                      ## userType: string
                                                                                                                                                                      ##           
                                                                                                                                                                      ## : 
                                                                                                                                                                      ## The 
                                                                                                                                                                      ## user 
                                                                                                                                                                      ## type.
  ##   
                                                                                                                                                                              ## maxResults: int
                                                                                                                                                                              ##             
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## The 
                                                                                                                                                                              ## maximum 
                                                                                                                                                                              ## number 
                                                                                                                                                                              ## of 
                                                                                                                                                                              ## results 
                                                                                                                                                                              ## to 
                                                                                                                                                                              ## return 
                                                                                                                                                                              ## in 
                                                                                                                                                                              ## a 
                                                                                                                                                                              ## single 
                                                                                                                                                                              ## call. 
                                                                                                                                                                              ## Defaults 
                                                                                                                                                                              ## to 
                                                                                                                                                                              ## 100.
  ##   
                                                                                                                                                                                     ## MaxResults: string
                                                                                                                                                                                     ##             
                                                                                                                                                                                     ## : 
                                                                                                                                                                                     ## Pagination 
                                                                                                                                                                                     ## limit
  ##   
                                                                                                                                                                                             ## accountId: string (required)
                                                                                                                                                                                             ##            
                                                                                                                                                                                             ## : 
                                                                                                                                                                                             ## The 
                                                                                                                                                                                             ## Amazon 
                                                                                                                                                                                             ## Chime 
                                                                                                                                                                                             ## account 
                                                                                                                                                                                             ## ID.
  ##   
                                                                                                                                                                                                   ## NextToken: string
                                                                                                                                                                                                   ##            
                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                   ## Pagination 
                                                                                                                                                                                                   ## token
  ##   
                                                                                                                                                                                                           ## nextToken: string
                                                                                                                                                                                                           ##            
                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                           ## token 
                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                           ## use 
                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                           ## retrieve 
                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                           ## next 
                                                                                                                                                                                                           ## page 
                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                           ## results.
  var path_402656682 = newJObject()
  var query_402656683 = newJObject()
  add(query_402656683, "user-email", newJString(userEmail))
  add(query_402656683, "user-type", newJString(userType))
  add(query_402656683, "max-results", newJInt(maxResults))
  add(query_402656683, "MaxResults", newJString(MaxResults))
  add(path_402656682, "accountId", newJString(accountId))
  add(query_402656683, "NextToken", newJString(NextToken))
  add(query_402656683, "next-token", newJString(nextToken))
  result = call_402656681.call(path_402656682, query_402656683, nil, nil, nil)

var listUsers* = Call_ListUsers_402656663(name: "listUsers",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users", validator: validate_ListUsers_402656664,
    base: "/", makeUrl: url_ListUsers_402656665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateAccount_402656719 = ref object of OpenApiRestCall_402656044
proc url_CreateAccount_402656721(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateAccount_402656720(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code> account types are currently supported for this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656722 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656722 = validateParameter(valid_402656722, JString,
                                      required = false, default = nil)
  if valid_402656722 != nil:
    section.add "X-Amz-Security-Token", valid_402656722
  var valid_402656723 = header.getOrDefault("X-Amz-Signature")
  valid_402656723 = validateParameter(valid_402656723, JString,
                                      required = false, default = nil)
  if valid_402656723 != nil:
    section.add "X-Amz-Signature", valid_402656723
  var valid_402656724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656724 = validateParameter(valid_402656724, JString,
                                      required = false, default = nil)
  if valid_402656724 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656724
  var valid_402656725 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656725 = validateParameter(valid_402656725, JString,
                                      required = false, default = nil)
  if valid_402656725 != nil:
    section.add "X-Amz-Algorithm", valid_402656725
  var valid_402656726 = header.getOrDefault("X-Amz-Date")
  valid_402656726 = validateParameter(valid_402656726, JString,
                                      required = false, default = nil)
  if valid_402656726 != nil:
    section.add "X-Amz-Date", valid_402656726
  var valid_402656727 = header.getOrDefault("X-Amz-Credential")
  valid_402656727 = validateParameter(valid_402656727, JString,
                                      required = false, default = nil)
  if valid_402656727 != nil:
    section.add "X-Amz-Credential", valid_402656727
  var valid_402656728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656728 = validateParameter(valid_402656728, JString,
                                      required = false, default = nil)
  if valid_402656728 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656730: Call_CreateAccount_402656719; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code> account types are currently supported for this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.
                                                                                         ## 
  let valid = call_402656730.validator(path, query, header, formData, body, _)
  let scheme = call_402656730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656730.makeUrl(scheme.get, call_402656730.host, call_402656730.base,
                                   call_402656730.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656730, uri, valid, _)

proc call*(call_402656731: Call_CreateAccount_402656719; body: JsonNode): Recallable =
  ## createAccount
  ## Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code> account types are currently supported for this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                          ## body: JObject (required)
  var body_402656732 = newJObject()
  if body != nil:
    body_402656732 = body
  result = call_402656731.call(nil, nil, nil, nil, body_402656732)

var createAccount* = Call_CreateAccount_402656719(name: "createAccount",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/accounts",
    validator: validate_CreateAccount_402656720, base: "/",
    makeUrl: url_CreateAccount_402656721, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAccounts_402656700 = ref object of OpenApiRestCall_402656044
proc url_ListAccounts_402656702(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListAccounts_402656701(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   user-email: JString
                                  ##             : User email address with which to filter results.
  ##   
                                                                                                   ## max-results: JInt
                                                                                                   ##              
                                                                                                   ## : 
                                                                                                   ## The 
                                                                                                   ## maximum 
                                                                                                   ## number 
                                                                                                   ## of 
                                                                                                   ## results 
                                                                                                   ## to 
                                                                                                   ## return 
                                                                                                   ## in 
                                                                                                   ## a 
                                                                                                   ## single 
                                                                                                   ## call. 
                                                                                                   ## Defaults 
                                                                                                   ## to 
                                                                                                   ## 100.
  ##   
                                                                                                          ## MaxResults: JString
                                                                                                          ##             
                                                                                                          ## : 
                                                                                                          ## Pagination 
                                                                                                          ## limit
  ##   
                                                                                                                  ## name: JString
                                                                                                                  ##       
                                                                                                                  ## : 
                                                                                                                  ## Amazon 
                                                                                                                  ## Chime 
                                                                                                                  ## account 
                                                                                                                  ## name 
                                                                                                                  ## prefix 
                                                                                                                  ## with 
                                                                                                                  ## which 
                                                                                                                  ## to 
                                                                                                                  ## filter 
                                                                                                                  ## results.
  ##   
                                                                                                                             ## NextToken: JString
                                                                                                                             ##            
                                                                                                                             ## : 
                                                                                                                             ## Pagination 
                                                                                                                             ## token
  ##   
                                                                                                                                     ## next-token: JString
                                                                                                                                     ##             
                                                                                                                                     ## : 
                                                                                                                                     ## The 
                                                                                                                                     ## token 
                                                                                                                                     ## to 
                                                                                                                                     ## use 
                                                                                                                                     ## to 
                                                                                                                                     ## retrieve 
                                                                                                                                     ## the 
                                                                                                                                     ## next 
                                                                                                                                     ## page 
                                                                                                                                     ## of 
                                                                                                                                     ## results.
  section = newJObject()
  var valid_402656703 = query.getOrDefault("user-email")
  valid_402656703 = validateParameter(valid_402656703, JString,
                                      required = false, default = nil)
  if valid_402656703 != nil:
    section.add "user-email", valid_402656703
  var valid_402656704 = query.getOrDefault("max-results")
  valid_402656704 = validateParameter(valid_402656704, JInt, required = false,
                                      default = nil)
  if valid_402656704 != nil:
    section.add "max-results", valid_402656704
  var valid_402656705 = query.getOrDefault("MaxResults")
  valid_402656705 = validateParameter(valid_402656705, JString,
                                      required = false, default = nil)
  if valid_402656705 != nil:
    section.add "MaxResults", valid_402656705
  var valid_402656706 = query.getOrDefault("name")
  valid_402656706 = validateParameter(valid_402656706, JString,
                                      required = false, default = nil)
  if valid_402656706 != nil:
    section.add "name", valid_402656706
  var valid_402656707 = query.getOrDefault("NextToken")
  valid_402656707 = validateParameter(valid_402656707, JString,
                                      required = false, default = nil)
  if valid_402656707 != nil:
    section.add "NextToken", valid_402656707
  var valid_402656708 = query.getOrDefault("next-token")
  valid_402656708 = validateParameter(valid_402656708, JString,
                                      required = false, default = nil)
  if valid_402656708 != nil:
    section.add "next-token", valid_402656708
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656709 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656709 = validateParameter(valid_402656709, JString,
                                      required = false, default = nil)
  if valid_402656709 != nil:
    section.add "X-Amz-Security-Token", valid_402656709
  var valid_402656710 = header.getOrDefault("X-Amz-Signature")
  valid_402656710 = validateParameter(valid_402656710, JString,
                                      required = false, default = nil)
  if valid_402656710 != nil:
    section.add "X-Amz-Signature", valid_402656710
  var valid_402656711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656711 = validateParameter(valid_402656711, JString,
                                      required = false, default = nil)
  if valid_402656711 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656711
  var valid_402656712 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656712 = validateParameter(valid_402656712, JString,
                                      required = false, default = nil)
  if valid_402656712 != nil:
    section.add "X-Amz-Algorithm", valid_402656712
  var valid_402656713 = header.getOrDefault("X-Amz-Date")
  valid_402656713 = validateParameter(valid_402656713, JString,
                                      required = false, default = nil)
  if valid_402656713 != nil:
    section.add "X-Amz-Date", valid_402656713
  var valid_402656714 = header.getOrDefault("X-Amz-Credential")
  valid_402656714 = validateParameter(valid_402656714, JString,
                                      required = false, default = nil)
  if valid_402656714 != nil:
    section.add "X-Amz-Credential", valid_402656714
  var valid_402656715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656715 = validateParameter(valid_402656715, JString,
                                      required = false, default = nil)
  if valid_402656715 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656715
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656716: Call_ListAccounts_402656700; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
                                                                                         ## 
  let valid = call_402656716.validator(path, query, header, formData, body, _)
  let scheme = call_402656716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656716.makeUrl(scheme.get, call_402656716.host, call_402656716.base,
                                   call_402656716.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656716, uri, valid, _)

proc call*(call_402656717: Call_ListAccounts_402656700; userEmail: string = "";
           maxResults: int = 0; MaxResults: string = ""; name: string = "";
           NextToken: string = ""; nextToken: string = ""): Recallable =
  ## listAccounts
  ## Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
  ##   
                                                                                                                                                                                                                                                                   ## userEmail: string
                                                                                                                                                                                                                                                                   ##            
                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                   ## User 
                                                                                                                                                                                                                                                                   ## email 
                                                                                                                                                                                                                                                                   ## address 
                                                                                                                                                                                                                                                                   ## with 
                                                                                                                                                                                                                                                                   ## which 
                                                                                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                                                                                   ## filter 
                                                                                                                                                                                                                                                                   ## results.
  ##   
                                                                                                                                                                                                                                                                              ## maxResults: int
                                                                                                                                                                                                                                                                              ##             
                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                              ## maximum 
                                                                                                                                                                                                                                                                              ## number 
                                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                                              ## results 
                                                                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                                                                              ## return 
                                                                                                                                                                                                                                                                              ## in 
                                                                                                                                                                                                                                                                              ## a 
                                                                                                                                                                                                                                                                              ## single 
                                                                                                                                                                                                                                                                              ## call. 
                                                                                                                                                                                                                                                                              ## Defaults 
                                                                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                                                                              ## 100.
  ##   
                                                                                                                                                                                                                                                                                     ## MaxResults: string
                                                                                                                                                                                                                                                                                     ##             
                                                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                                                     ## Pagination 
                                                                                                                                                                                                                                                                                     ## limit
  ##   
                                                                                                                                                                                                                                                                                             ## name: string
                                                                                                                                                                                                                                                                                             ##       
                                                                                                                                                                                                                                                                                             ## : 
                                                                                                                                                                                                                                                                                             ## Amazon 
                                                                                                                                                                                                                                                                                             ## Chime 
                                                                                                                                                                                                                                                                                             ## account 
                                                                                                                                                                                                                                                                                             ## name 
                                                                                                                                                                                                                                                                                             ## prefix 
                                                                                                                                                                                                                                                                                             ## with 
                                                                                                                                                                                                                                                                                             ## which 
                                                                                                                                                                                                                                                                                             ## to 
                                                                                                                                                                                                                                                                                             ## filter 
                                                                                                                                                                                                                                                                                             ## results.
  ##   
                                                                                                                                                                                                                                                                                                        ## NextToken: string
                                                                                                                                                                                                                                                                                                        ##            
                                                                                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                                                                                        ## Pagination 
                                                                                                                                                                                                                                                                                                        ## token
  ##   
                                                                                                                                                                                                                                                                                                                ## nextToken: string
                                                                                                                                                                                                                                                                                                                ##            
                                                                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                                                ## token 
                                                                                                                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                                                                                                                ## use 
                                                                                                                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                                                                                                                ## retrieve 
                                                                                                                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                                                                                                                ## next 
                                                                                                                                                                                                                                                                                                                ## page 
                                                                                                                                                                                                                                                                                                                ## of 
                                                                                                                                                                                                                                                                                                                ## results.
  var query_402656718 = newJObject()
  add(query_402656718, "user-email", newJString(userEmail))
  add(query_402656718, "max-results", newJInt(maxResults))
  add(query_402656718, "MaxResults", newJString(MaxResults))
  add(query_402656718, "name", newJString(name))
  add(query_402656718, "NextToken", newJString(NextToken))
  add(query_402656718, "next-token", newJString(nextToken))
  result = call_402656717.call(nil, query_402656718, nil, nil, nil)

var listAccounts* = Call_ListAccounts_402656700(name: "listAccounts",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com", route: "/accounts",
    validator: validate_ListAccounts_402656701, base: "/",
    makeUrl: url_ListAccounts_402656702, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateAttendee_402656752 = ref object of OpenApiRestCall_402656044
proc url_CreateAttendee_402656754(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId"),
                 (kind: ConstantSegment, value: "/attendees")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateAttendee_402656753(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402656755 = path.getOrDefault("meetingId")
  valid_402656755 = validateParameter(valid_402656755, JString, required = true,
                                      default = nil)
  if valid_402656755 != nil:
    section.add "meetingId", valid_402656755
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656756 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656756 = validateParameter(valid_402656756, JString,
                                      required = false, default = nil)
  if valid_402656756 != nil:
    section.add "X-Amz-Security-Token", valid_402656756
  var valid_402656757 = header.getOrDefault("X-Amz-Signature")
  valid_402656757 = validateParameter(valid_402656757, JString,
                                      required = false, default = nil)
  if valid_402656757 != nil:
    section.add "X-Amz-Signature", valid_402656757
  var valid_402656758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656758 = validateParameter(valid_402656758, JString,
                                      required = false, default = nil)
  if valid_402656758 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656758
  var valid_402656759 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656759 = validateParameter(valid_402656759, JString,
                                      required = false, default = nil)
  if valid_402656759 != nil:
    section.add "X-Amz-Algorithm", valid_402656759
  var valid_402656760 = header.getOrDefault("X-Amz-Date")
  valid_402656760 = validateParameter(valid_402656760, JString,
                                      required = false, default = nil)
  if valid_402656760 != nil:
    section.add "X-Amz-Date", valid_402656760
  var valid_402656761 = header.getOrDefault("X-Amz-Credential")
  valid_402656761 = validateParameter(valid_402656761, JString,
                                      required = false, default = nil)
  if valid_402656761 != nil:
    section.add "X-Amz-Credential", valid_402656761
  var valid_402656762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656762 = validateParameter(valid_402656762, JString,
                                      required = false, default = nil)
  if valid_402656762 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656764: Call_CreateAttendee_402656752; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402656764.validator(path, query, header, formData, body, _)
  let scheme = call_402656764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656764.makeUrl(scheme.get, call_402656764.host, call_402656764.base,
                                   call_402656764.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656764, uri, valid, _)

proc call*(call_402656765: Call_CreateAttendee_402656752; meetingId: string;
           body: JsonNode): Recallable =
  ## createAttendee
  ## Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                           ## meetingId: string (required)
                                                                                                                                                                                                                                                                           ##            
                                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                                           ## Amazon 
                                                                                                                                                                                                                                                                           ## Chime 
                                                                                                                                                                                                                                                                           ## SDK 
                                                                                                                                                                                                                                                                           ## meeting 
                                                                                                                                                                                                                                                                           ## ID.
  ##   
                                                                                                                                                                                                                                                                                 ## body: JObject (required)
  var path_402656766 = newJObject()
  var body_402656767 = newJObject()
  add(path_402656766, "meetingId", newJString(meetingId))
  if body != nil:
    body_402656767 = body
  result = call_402656765.call(path_402656766, nil, nil, nil, body_402656767)

var createAttendee* = Call_CreateAttendee_402656752(name: "createAttendee",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}/attendees",
    validator: validate_CreateAttendee_402656753, base: "/",
    makeUrl: url_CreateAttendee_402656754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListAttendees_402656733 = ref object of OpenApiRestCall_402656044
proc url_ListAttendees_402656735(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId"),
                 (kind: ConstantSegment, value: "/attendees")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListAttendees_402656734(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402656736 = path.getOrDefault("meetingId")
  valid_402656736 = validateParameter(valid_402656736, JString, required = true,
                                      default = nil)
  if valid_402656736 != nil:
    section.add "meetingId", valid_402656736
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656737 = query.getOrDefault("max-results")
  valid_402656737 = validateParameter(valid_402656737, JInt, required = false,
                                      default = nil)
  if valid_402656737 != nil:
    section.add "max-results", valid_402656737
  var valid_402656738 = query.getOrDefault("MaxResults")
  valid_402656738 = validateParameter(valid_402656738, JString,
                                      required = false, default = nil)
  if valid_402656738 != nil:
    section.add "MaxResults", valid_402656738
  var valid_402656739 = query.getOrDefault("NextToken")
  valid_402656739 = validateParameter(valid_402656739, JString,
                                      required = false, default = nil)
  if valid_402656739 != nil:
    section.add "NextToken", valid_402656739
  var valid_402656740 = query.getOrDefault("next-token")
  valid_402656740 = validateParameter(valid_402656740, JString,
                                      required = false, default = nil)
  if valid_402656740 != nil:
    section.add "next-token", valid_402656740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656741 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656741 = validateParameter(valid_402656741, JString,
                                      required = false, default = nil)
  if valid_402656741 != nil:
    section.add "X-Amz-Security-Token", valid_402656741
  var valid_402656742 = header.getOrDefault("X-Amz-Signature")
  valid_402656742 = validateParameter(valid_402656742, JString,
                                      required = false, default = nil)
  if valid_402656742 != nil:
    section.add "X-Amz-Signature", valid_402656742
  var valid_402656743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656743 = validateParameter(valid_402656743, JString,
                                      required = false, default = nil)
  if valid_402656743 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656743
  var valid_402656744 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656744 = validateParameter(valid_402656744, JString,
                                      required = false, default = nil)
  if valid_402656744 != nil:
    section.add "X-Amz-Algorithm", valid_402656744
  var valid_402656745 = header.getOrDefault("X-Amz-Date")
  valid_402656745 = validateParameter(valid_402656745, JString,
                                      required = false, default = nil)
  if valid_402656745 != nil:
    section.add "X-Amz-Date", valid_402656745
  var valid_402656746 = header.getOrDefault("X-Amz-Credential")
  valid_402656746 = validateParameter(valid_402656746, JString,
                                      required = false, default = nil)
  if valid_402656746 != nil:
    section.add "X-Amz-Credential", valid_402656746
  var valid_402656747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656747 = validateParameter(valid_402656747, JString,
                                      required = false, default = nil)
  if valid_402656747 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656747
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656748: Call_ListAttendees_402656733; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402656748.validator(path, query, header, formData, body, _)
  let scheme = call_402656748.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656748.makeUrl(scheme.get, call_402656748.host, call_402656748.base,
                                   call_402656748.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656748, uri, valid, _)

proc call*(call_402656749: Call_ListAttendees_402656733; meetingId: string;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listAttendees
  ## Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                            ## meetingId: string (required)
                                                                                                                                                                                                                                                                            ##            
                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                            ## Amazon 
                                                                                                                                                                                                                                                                            ## Chime 
                                                                                                                                                                                                                                                                            ## SDK 
                                                                                                                                                                                                                                                                            ## meeting 
                                                                                                                                                                                                                                                                            ## ID.
  ##   
                                                                                                                                                                                                                                                                                  ## maxResults: int
                                                                                                                                                                                                                                                                                  ##             
                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                                                                  ## maximum 
                                                                                                                                                                                                                                                                                  ## number 
                                                                                                                                                                                                                                                                                  ## of 
                                                                                                                                                                                                                                                                                  ## results 
                                                                                                                                                                                                                                                                                  ## to 
                                                                                                                                                                                                                                                                                  ## return 
                                                                                                                                                                                                                                                                                  ## in 
                                                                                                                                                                                                                                                                                  ## a 
                                                                                                                                                                                                                                                                                  ## single 
                                                                                                                                                                                                                                                                                  ## call.
  ##   
                                                                                                                                                                                                                                                                                          ## MaxResults: string
                                                                                                                                                                                                                                                                                          ##             
                                                                                                                                                                                                                                                                                          ## : 
                                                                                                                                                                                                                                                                                          ## Pagination 
                                                                                                                                                                                                                                                                                          ## limit
  ##   
                                                                                                                                                                                                                                                                                                  ## NextToken: string
                                                                                                                                                                                                                                                                                                  ##            
                                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                                  ## Pagination 
                                                                                                                                                                                                                                                                                                  ## token
  ##   
                                                                                                                                                                                                                                                                                                          ## nextToken: string
                                                                                                                                                                                                                                                                                                          ##            
                                                                                                                                                                                                                                                                                                          ## : 
                                                                                                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                                                                                                          ## token 
                                                                                                                                                                                                                                                                                                          ## to 
                                                                                                                                                                                                                                                                                                          ## use 
                                                                                                                                                                                                                                                                                                          ## to 
                                                                                                                                                                                                                                                                                                          ## retrieve 
                                                                                                                                                                                                                                                                                                          ## the 
                                                                                                                                                                                                                                                                                                          ## next 
                                                                                                                                                                                                                                                                                                          ## page 
                                                                                                                                                                                                                                                                                                          ## of 
                                                                                                                                                                                                                                                                                                          ## results.
  var path_402656750 = newJObject()
  var query_402656751 = newJObject()
  add(path_402656750, "meetingId", newJString(meetingId))
  add(query_402656751, "max-results", newJInt(maxResults))
  add(query_402656751, "MaxResults", newJString(MaxResults))
  add(query_402656751, "NextToken", newJString(NextToken))
  add(query_402656751, "next-token", newJString(nextToken))
  result = call_402656749.call(path_402656750, query_402656751, nil, nil, nil)

var listAttendees* = Call_ListAttendees_402656733(name: "listAttendees",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}/attendees", validator: validate_ListAttendees_402656734,
    base: "/", makeUrl: url_ListAttendees_402656735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateBot_402656787 = ref object of OpenApiRestCall_402656044
proc url_CreateBot_402656789(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateBot_402656788(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a bot for an Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656790 = path.getOrDefault("accountId")
  valid_402656790 = validateParameter(valid_402656790, JString, required = true,
                                      default = nil)
  if valid_402656790 != nil:
    section.add "accountId", valid_402656790
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656791 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656791 = validateParameter(valid_402656791, JString,
                                      required = false, default = nil)
  if valid_402656791 != nil:
    section.add "X-Amz-Security-Token", valid_402656791
  var valid_402656792 = header.getOrDefault("X-Amz-Signature")
  valid_402656792 = validateParameter(valid_402656792, JString,
                                      required = false, default = nil)
  if valid_402656792 != nil:
    section.add "X-Amz-Signature", valid_402656792
  var valid_402656793 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656793 = validateParameter(valid_402656793, JString,
                                      required = false, default = nil)
  if valid_402656793 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656793
  var valid_402656794 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656794 = validateParameter(valid_402656794, JString,
                                      required = false, default = nil)
  if valid_402656794 != nil:
    section.add "X-Amz-Algorithm", valid_402656794
  var valid_402656795 = header.getOrDefault("X-Amz-Date")
  valid_402656795 = validateParameter(valid_402656795, JString,
                                      required = false, default = nil)
  if valid_402656795 != nil:
    section.add "X-Amz-Date", valid_402656795
  var valid_402656796 = header.getOrDefault("X-Amz-Credential")
  valid_402656796 = validateParameter(valid_402656796, JString,
                                      required = false, default = nil)
  if valid_402656796 != nil:
    section.add "X-Amz-Credential", valid_402656796
  var valid_402656797 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656797 = validateParameter(valid_402656797, JString,
                                      required = false, default = nil)
  if valid_402656797 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656797
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656799: Call_CreateBot_402656787; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a bot for an Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402656799.validator(path, query, header, formData, body, _)
  let scheme = call_402656799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656799.makeUrl(scheme.get, call_402656799.host, call_402656799.base,
                                   call_402656799.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656799, uri, valid, _)

proc call*(call_402656800: Call_CreateBot_402656787; body: JsonNode;
           accountId: string): Recallable =
  ## createBot
  ## Creates a bot for an Amazon Chime Enterprise account.
  ##   body: JObject (required)
  ##   accountId: string (required)
                               ##            : The Amazon Chime account ID.
  var path_402656801 = newJObject()
  var body_402656802 = newJObject()
  if body != nil:
    body_402656802 = body
  add(path_402656801, "accountId", newJString(accountId))
  result = call_402656800.call(path_402656801, nil, nil, nil, body_402656802)

var createBot* = Call_CreateBot_402656787(name: "createBot",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/bots", validator: validate_CreateBot_402656788,
    base: "/", makeUrl: url_CreateBot_402656789,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListBots_402656768 = ref object of OpenApiRestCall_402656044
proc url_ListBots_402656770(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListBots_402656769(path: JsonNode; query: JsonNode;
                                 header: JsonNode; formData: JsonNode;
                                 body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656771 = path.getOrDefault("accountId")
  valid_402656771 = validateParameter(valid_402656771, JString, required = true,
                                      default = nil)
  if valid_402656771 != nil:
    section.add "accountId", valid_402656771
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call. The default is 10.
  ##   
                                                                                                                                ## MaxResults: JString
                                                                                                                                ##             
                                                                                                                                ## : 
                                                                                                                                ## Pagination 
                                                                                                                                ## limit
  ##   
                                                                                                                                        ## NextToken: JString
                                                                                                                                        ##            
                                                                                                                                        ## : 
                                                                                                                                        ## Pagination 
                                                                                                                                        ## token
  ##   
                                                                                                                                                ## next-token: JString
                                                                                                                                                ##             
                                                                                                                                                ## : 
                                                                                                                                                ## The 
                                                                                                                                                ## token 
                                                                                                                                                ## to 
                                                                                                                                                ## use 
                                                                                                                                                ## to 
                                                                                                                                                ## retrieve 
                                                                                                                                                ## the 
                                                                                                                                                ## next 
                                                                                                                                                ## page 
                                                                                                                                                ## of 
                                                                                                                                                ## results.
  section = newJObject()
  var valid_402656772 = query.getOrDefault("max-results")
  valid_402656772 = validateParameter(valid_402656772, JInt, required = false,
                                      default = nil)
  if valid_402656772 != nil:
    section.add "max-results", valid_402656772
  var valid_402656773 = query.getOrDefault("MaxResults")
  valid_402656773 = validateParameter(valid_402656773, JString,
                                      required = false, default = nil)
  if valid_402656773 != nil:
    section.add "MaxResults", valid_402656773
  var valid_402656774 = query.getOrDefault("NextToken")
  valid_402656774 = validateParameter(valid_402656774, JString,
                                      required = false, default = nil)
  if valid_402656774 != nil:
    section.add "NextToken", valid_402656774
  var valid_402656775 = query.getOrDefault("next-token")
  valid_402656775 = validateParameter(valid_402656775, JString,
                                      required = false, default = nil)
  if valid_402656775 != nil:
    section.add "next-token", valid_402656775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656776 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656776 = validateParameter(valid_402656776, JString,
                                      required = false, default = nil)
  if valid_402656776 != nil:
    section.add "X-Amz-Security-Token", valid_402656776
  var valid_402656777 = header.getOrDefault("X-Amz-Signature")
  valid_402656777 = validateParameter(valid_402656777, JString,
                                      required = false, default = nil)
  if valid_402656777 != nil:
    section.add "X-Amz-Signature", valid_402656777
  var valid_402656778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656778 = validateParameter(valid_402656778, JString,
                                      required = false, default = nil)
  if valid_402656778 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656778
  var valid_402656779 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656779 = validateParameter(valid_402656779, JString,
                                      required = false, default = nil)
  if valid_402656779 != nil:
    section.add "X-Amz-Algorithm", valid_402656779
  var valid_402656780 = header.getOrDefault("X-Amz-Date")
  valid_402656780 = validateParameter(valid_402656780, JString,
                                      required = false, default = nil)
  if valid_402656780 != nil:
    section.add "X-Amz-Date", valid_402656780
  var valid_402656781 = header.getOrDefault("X-Amz-Credential")
  valid_402656781 = validateParameter(valid_402656781, JString,
                                      required = false, default = nil)
  if valid_402656781 != nil:
    section.add "X-Amz-Credential", valid_402656781
  var valid_402656782 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656782 = validateParameter(valid_402656782, JString,
                                      required = false, default = nil)
  if valid_402656782 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656782
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656783: Call_ListBots_402656768; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
                                                                                         ## 
  let valid = call_402656783.validator(path, query, header, formData, body, _)
  let scheme = call_402656783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656783.makeUrl(scheme.get, call_402656783.host, call_402656783.base,
                                   call_402656783.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656783, uri, valid, _)

proc call*(call_402656784: Call_ListBots_402656768; accountId: string;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listBots
  ## Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
  ##   
                                                                                           ## maxResults: int
                                                                                           ##             
                                                                                           ## : 
                                                                                           ## The 
                                                                                           ## maximum 
                                                                                           ## number 
                                                                                           ## of 
                                                                                           ## results 
                                                                                           ## to 
                                                                                           ## return 
                                                                                           ## in 
                                                                                           ## a 
                                                                                           ## single 
                                                                                           ## call. 
                                                                                           ## The 
                                                                                           ## default 
                                                                                           ## is 
                                                                                           ## 10.
  ##   
                                                                                                 ## MaxResults: string
                                                                                                 ##             
                                                                                                 ## : 
                                                                                                 ## Pagination 
                                                                                                 ## limit
  ##   
                                                                                                         ## accountId: string (required)
                                                                                                         ##            
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## Amazon 
                                                                                                         ## Chime 
                                                                                                         ## account 
                                                                                                         ## ID.
  ##   
                                                                                                               ## NextToken: string
                                                                                                               ##            
                                                                                                               ## : 
                                                                                                               ## Pagination 
                                                                                                               ## token
  ##   
                                                                                                                       ## nextToken: string
                                                                                                                       ##            
                                                                                                                       ## : 
                                                                                                                       ## The 
                                                                                                                       ## token 
                                                                                                                       ## to 
                                                                                                                       ## use 
                                                                                                                       ## to 
                                                                                                                       ## retrieve 
                                                                                                                       ## the 
                                                                                                                       ## next 
                                                                                                                       ## page 
                                                                                                                       ## of 
                                                                                                                       ## results.
  var path_402656785 = newJObject()
  var query_402656786 = newJObject()
  add(query_402656786, "max-results", newJInt(maxResults))
  add(query_402656786, "MaxResults", newJString(MaxResults))
  add(path_402656785, "accountId", newJString(accountId))
  add(query_402656786, "NextToken", newJString(NextToken))
  add(query_402656786, "next-token", newJString(nextToken))
  result = call_402656784.call(path_402656785, query_402656786, nil, nil, nil)

var listBots* = Call_ListBots_402656768(name: "listBots",
                                        meth: HttpMethod.HttpGet,
                                        host: "chime.amazonaws.com",
                                        route: "/accounts/{accountId}/bots",
                                        validator: validate_ListBots_402656769,
                                        base: "/", makeUrl: url_ListBots_402656770,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateMeeting_402656820 = ref object of OpenApiRestCall_402656044
proc url_CreateMeeting_402656822(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateMeeting_402656821(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656823 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656823 = validateParameter(valid_402656823, JString,
                                      required = false, default = nil)
  if valid_402656823 != nil:
    section.add "X-Amz-Security-Token", valid_402656823
  var valid_402656824 = header.getOrDefault("X-Amz-Signature")
  valid_402656824 = validateParameter(valid_402656824, JString,
                                      required = false, default = nil)
  if valid_402656824 != nil:
    section.add "X-Amz-Signature", valid_402656824
  var valid_402656825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656825 = validateParameter(valid_402656825, JString,
                                      required = false, default = nil)
  if valid_402656825 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656825
  var valid_402656826 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656826 = validateParameter(valid_402656826, JString,
                                      required = false, default = nil)
  if valid_402656826 != nil:
    section.add "X-Amz-Algorithm", valid_402656826
  var valid_402656827 = header.getOrDefault("X-Amz-Date")
  valid_402656827 = validateParameter(valid_402656827, JString,
                                      required = false, default = nil)
  if valid_402656827 != nil:
    section.add "X-Amz-Date", valid_402656827
  var valid_402656828 = header.getOrDefault("X-Amz-Credential")
  valid_402656828 = validateParameter(valid_402656828, JString,
                                      required = false, default = nil)
  if valid_402656828 != nil:
    section.add "X-Amz-Credential", valid_402656828
  var valid_402656829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656829 = validateParameter(valid_402656829, JString,
                                      required = false, default = nil)
  if valid_402656829 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656831: Call_CreateMeeting_402656820; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402656831.validator(path, query, header, formData, body, _)
  let scheme = call_402656831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656831.makeUrl(scheme.get, call_402656831.host, call_402656831.base,
                                   call_402656831.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656831, uri, valid, _)

proc call*(call_402656832: Call_CreateMeeting_402656820; body: JsonNode): Recallable =
  ## createMeeting
  ## Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                            ## body: JObject (required)
  var body_402656833 = newJObject()
  if body != nil:
    body_402656833 = body
  result = call_402656832.call(nil, nil, nil, nil, body_402656833)

var createMeeting* = Call_CreateMeeting_402656820(name: "createMeeting",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/meetings",
    validator: validate_CreateMeeting_402656821, base: "/",
    makeUrl: url_CreateMeeting_402656822, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListMeetings_402656803 = ref object of OpenApiRestCall_402656044
proc url_ListMeetings_402656805(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListMeetings_402656804(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656806 = query.getOrDefault("max-results")
  valid_402656806 = validateParameter(valid_402656806, JInt, required = false,
                                      default = nil)
  if valid_402656806 != nil:
    section.add "max-results", valid_402656806
  var valid_402656807 = query.getOrDefault("MaxResults")
  valid_402656807 = validateParameter(valid_402656807, JString,
                                      required = false, default = nil)
  if valid_402656807 != nil:
    section.add "MaxResults", valid_402656807
  var valid_402656808 = query.getOrDefault("NextToken")
  valid_402656808 = validateParameter(valid_402656808, JString,
                                      required = false, default = nil)
  if valid_402656808 != nil:
    section.add "NextToken", valid_402656808
  var valid_402656809 = query.getOrDefault("next-token")
  valid_402656809 = validateParameter(valid_402656809, JString,
                                      required = false, default = nil)
  if valid_402656809 != nil:
    section.add "next-token", valid_402656809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656810 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656810 = validateParameter(valid_402656810, JString,
                                      required = false, default = nil)
  if valid_402656810 != nil:
    section.add "X-Amz-Security-Token", valid_402656810
  var valid_402656811 = header.getOrDefault("X-Amz-Signature")
  valid_402656811 = validateParameter(valid_402656811, JString,
                                      required = false, default = nil)
  if valid_402656811 != nil:
    section.add "X-Amz-Signature", valid_402656811
  var valid_402656812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656812 = validateParameter(valid_402656812, JString,
                                      required = false, default = nil)
  if valid_402656812 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656812
  var valid_402656813 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656813 = validateParameter(valid_402656813, JString,
                                      required = false, default = nil)
  if valid_402656813 != nil:
    section.add "X-Amz-Algorithm", valid_402656813
  var valid_402656814 = header.getOrDefault("X-Amz-Date")
  valid_402656814 = validateParameter(valid_402656814, JString,
                                      required = false, default = nil)
  if valid_402656814 != nil:
    section.add "X-Amz-Date", valid_402656814
  var valid_402656815 = header.getOrDefault("X-Amz-Credential")
  valid_402656815 = validateParameter(valid_402656815, JString,
                                      required = false, default = nil)
  if valid_402656815 != nil:
    section.add "X-Amz-Credential", valid_402656815
  var valid_402656816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656816 = validateParameter(valid_402656816, JString,
                                      required = false, default = nil)
  if valid_402656816 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656817: Call_ListMeetings_402656803; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402656817.validator(path, query, header, formData, body, _)
  let scheme = call_402656817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656817.makeUrl(scheme.get, call_402656817.host, call_402656817.base,
                                   call_402656817.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656817, uri, valid, _)

proc call*(call_402656818: Call_ListMeetings_402656803; maxResults: int = 0;
           MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listMeetings
  ## Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                              ## maxResults: int
                                                                                                                                                                                                                                                              ##             
                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                              ## maximum 
                                                                                                                                                                                                                                                              ## number 
                                                                                                                                                                                                                                                              ## of 
                                                                                                                                                                                                                                                              ## results 
                                                                                                                                                                                                                                                              ## to 
                                                                                                                                                                                                                                                              ## return 
                                                                                                                                                                                                                                                              ## in 
                                                                                                                                                                                                                                                              ## a 
                                                                                                                                                                                                                                                              ## single 
                                                                                                                                                                                                                                                              ## call.
  ##   
                                                                                                                                                                                                                                                                      ## MaxResults: string
                                                                                                                                                                                                                                                                      ##             
                                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                                      ## Pagination 
                                                                                                                                                                                                                                                                      ## limit
  ##   
                                                                                                                                                                                                                                                                              ## NextToken: string
                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                              ## Pagination 
                                                                                                                                                                                                                                                                              ## token
  ##   
                                                                                                                                                                                                                                                                                      ## nextToken: string
                                                                                                                                                                                                                                                                                      ##            
                                                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                                                                                      ## token 
                                                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                                                      ## use 
                                                                                                                                                                                                                                                                                      ## to 
                                                                                                                                                                                                                                                                                      ## retrieve 
                                                                                                                                                                                                                                                                                      ## the 
                                                                                                                                                                                                                                                                                      ## next 
                                                                                                                                                                                                                                                                                      ## page 
                                                                                                                                                                                                                                                                                      ## of 
                                                                                                                                                                                                                                                                                      ## results.
  var query_402656819 = newJObject()
  add(query_402656819, "max-results", newJInt(maxResults))
  add(query_402656819, "MaxResults", newJString(MaxResults))
  add(query_402656819, "NextToken", newJString(NextToken))
  add(query_402656819, "next-token", newJString(nextToken))
  result = call_402656818.call(nil, query_402656819, nil, nil, nil)

var listMeetings* = Call_ListMeetings_402656803(name: "listMeetings",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com", route: "/meetings",
    validator: validate_ListMeetings_402656804, base: "/",
    makeUrl: url_ListMeetings_402656805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreatePhoneNumberOrder_402656851 = ref object of OpenApiRestCall_402656044
proc url_CreatePhoneNumberOrder_402656853(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreatePhoneNumberOrder_402656852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656854 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656854 = validateParameter(valid_402656854, JString,
                                      required = false, default = nil)
  if valid_402656854 != nil:
    section.add "X-Amz-Security-Token", valid_402656854
  var valid_402656855 = header.getOrDefault("X-Amz-Signature")
  valid_402656855 = validateParameter(valid_402656855, JString,
                                      required = false, default = nil)
  if valid_402656855 != nil:
    section.add "X-Amz-Signature", valid_402656855
  var valid_402656856 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656856 = validateParameter(valid_402656856, JString,
                                      required = false, default = nil)
  if valid_402656856 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656856
  var valid_402656857 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656857 = validateParameter(valid_402656857, JString,
                                      required = false, default = nil)
  if valid_402656857 != nil:
    section.add "X-Amz-Algorithm", valid_402656857
  var valid_402656858 = header.getOrDefault("X-Amz-Date")
  valid_402656858 = validateParameter(valid_402656858, JString,
                                      required = false, default = nil)
  if valid_402656858 != nil:
    section.add "X-Amz-Date", valid_402656858
  var valid_402656859 = header.getOrDefault("X-Amz-Credential")
  valid_402656859 = validateParameter(valid_402656859, JString,
                                      required = false, default = nil)
  if valid_402656859 != nil:
    section.add "X-Amz-Credential", valid_402656859
  var valid_402656860 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656860 = validateParameter(valid_402656860, JString,
                                      required = false, default = nil)
  if valid_402656860 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656862: Call_CreatePhoneNumberOrder_402656851;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.
                                                                                         ## 
  let valid = call_402656862.validator(path, query, header, formData, body, _)
  let scheme = call_402656862.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656862.makeUrl(scheme.get, call_402656862.host, call_402656862.base,
                                   call_402656862.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656862, uri, valid, _)

proc call*(call_402656863: Call_CreatePhoneNumberOrder_402656851; body: JsonNode): Recallable =
  ## createPhoneNumberOrder
  ## Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.
  ##   
                                                                                                                                                                                                                                       ## body: JObject (required)
  var body_402656864 = newJObject()
  if body != nil:
    body_402656864 = body
  result = call_402656863.call(nil, nil, nil, nil, body_402656864)

var createPhoneNumberOrder* = Call_CreatePhoneNumberOrder_402656851(
    name: "createPhoneNumberOrder", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/phone-number-orders",
    validator: validate_CreatePhoneNumberOrder_402656852, base: "/",
    makeUrl: url_CreatePhoneNumberOrder_402656853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPhoneNumberOrders_402656834 = ref object of OpenApiRestCall_402656044
proc url_ListPhoneNumberOrders_402656836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPhoneNumberOrders_402656835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the phone number orders for the administrator's Amazon Chime account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656837 = query.getOrDefault("max-results")
  valid_402656837 = validateParameter(valid_402656837, JInt, required = false,
                                      default = nil)
  if valid_402656837 != nil:
    section.add "max-results", valid_402656837
  var valid_402656838 = query.getOrDefault("MaxResults")
  valid_402656838 = validateParameter(valid_402656838, JString,
                                      required = false, default = nil)
  if valid_402656838 != nil:
    section.add "MaxResults", valid_402656838
  var valid_402656839 = query.getOrDefault("NextToken")
  valid_402656839 = validateParameter(valid_402656839, JString,
                                      required = false, default = nil)
  if valid_402656839 != nil:
    section.add "NextToken", valid_402656839
  var valid_402656840 = query.getOrDefault("next-token")
  valid_402656840 = validateParameter(valid_402656840, JString,
                                      required = false, default = nil)
  if valid_402656840 != nil:
    section.add "next-token", valid_402656840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656841 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656841 = validateParameter(valid_402656841, JString,
                                      required = false, default = nil)
  if valid_402656841 != nil:
    section.add "X-Amz-Security-Token", valid_402656841
  var valid_402656842 = header.getOrDefault("X-Amz-Signature")
  valid_402656842 = validateParameter(valid_402656842, JString,
                                      required = false, default = nil)
  if valid_402656842 != nil:
    section.add "X-Amz-Signature", valid_402656842
  var valid_402656843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656843 = validateParameter(valid_402656843, JString,
                                      required = false, default = nil)
  if valid_402656843 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656843
  var valid_402656844 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656844 = validateParameter(valid_402656844, JString,
                                      required = false, default = nil)
  if valid_402656844 != nil:
    section.add "X-Amz-Algorithm", valid_402656844
  var valid_402656845 = header.getOrDefault("X-Amz-Date")
  valid_402656845 = validateParameter(valid_402656845, JString,
                                      required = false, default = nil)
  if valid_402656845 != nil:
    section.add "X-Amz-Date", valid_402656845
  var valid_402656846 = header.getOrDefault("X-Amz-Credential")
  valid_402656846 = validateParameter(valid_402656846, JString,
                                      required = false, default = nil)
  if valid_402656846 != nil:
    section.add "X-Amz-Credential", valid_402656846
  var valid_402656847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656847 = validateParameter(valid_402656847, JString,
                                      required = false, default = nil)
  if valid_402656847 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656847
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656848: Call_ListPhoneNumberOrders_402656834;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the phone number orders for the administrator's Amazon Chime account.
                                                                                         ## 
  let valid = call_402656848.validator(path, query, header, formData, body, _)
  let scheme = call_402656848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656848.makeUrl(scheme.get, call_402656848.host, call_402656848.base,
                                   call_402656848.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656848, uri, valid, _)

proc call*(call_402656849: Call_ListPhoneNumberOrders_402656834;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listPhoneNumberOrders
  ## Lists the phone number orders for the administrator's Amazon Chime account.
  ##   
                                                                                ## maxResults: int
                                                                                ##             
                                                                                ## : 
                                                                                ## The 
                                                                                ## maximum 
                                                                                ## number 
                                                                                ## of 
                                                                                ## results 
                                                                                ## to 
                                                                                ## return 
                                                                                ## in 
                                                                                ## a 
                                                                                ## single 
                                                                                ## call.
  ##   
                                                                                        ## MaxResults: string
                                                                                        ##             
                                                                                        ## : 
                                                                                        ## Pagination 
                                                                                        ## limit
  ##   
                                                                                                ## NextToken: string
                                                                                                ##            
                                                                                                ## : 
                                                                                                ## Pagination 
                                                                                                ## token
  ##   
                                                                                                        ## nextToken: string
                                                                                                        ##            
                                                                                                        ## : 
                                                                                                        ## The 
                                                                                                        ## token 
                                                                                                        ## to 
                                                                                                        ## use 
                                                                                                        ## to 
                                                                                                        ## retrieve 
                                                                                                        ## the 
                                                                                                        ## next 
                                                                                                        ## page 
                                                                                                        ## of 
                                                                                                        ## results.
  var query_402656850 = newJObject()
  add(query_402656850, "max-results", newJInt(maxResults))
  add(query_402656850, "MaxResults", newJString(MaxResults))
  add(query_402656850, "NextToken", newJString(NextToken))
  add(query_402656850, "next-token", newJString(nextToken))
  result = call_402656849.call(nil, query_402656850, nil, nil, nil)

var listPhoneNumberOrders* = Call_ListPhoneNumberOrders_402656834(
    name: "listPhoneNumberOrders", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/phone-number-orders",
    validator: validate_ListPhoneNumberOrders_402656835, base: "/",
    makeUrl: url_ListPhoneNumberOrders_402656836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRoom_402656885 = ref object of OpenApiRestCall_402656044
proc url_CreateRoom_402656887(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateRoom_402656886(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a chat room for the specified Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656888 = path.getOrDefault("accountId")
  valid_402656888 = validateParameter(valid_402656888, JString, required = true,
                                      default = nil)
  if valid_402656888 != nil:
    section.add "accountId", valid_402656888
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656889 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656889 = validateParameter(valid_402656889, JString,
                                      required = false, default = nil)
  if valid_402656889 != nil:
    section.add "X-Amz-Security-Token", valid_402656889
  var valid_402656890 = header.getOrDefault("X-Amz-Signature")
  valid_402656890 = validateParameter(valid_402656890, JString,
                                      required = false, default = nil)
  if valid_402656890 != nil:
    section.add "X-Amz-Signature", valid_402656890
  var valid_402656891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656891 = validateParameter(valid_402656891, JString,
                                      required = false, default = nil)
  if valid_402656891 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656891
  var valid_402656892 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656892 = validateParameter(valid_402656892, JString,
                                      required = false, default = nil)
  if valid_402656892 != nil:
    section.add "X-Amz-Algorithm", valid_402656892
  var valid_402656893 = header.getOrDefault("X-Amz-Date")
  valid_402656893 = validateParameter(valid_402656893, JString,
                                      required = false, default = nil)
  if valid_402656893 != nil:
    section.add "X-Amz-Date", valid_402656893
  var valid_402656894 = header.getOrDefault("X-Amz-Credential")
  valid_402656894 = validateParameter(valid_402656894, JString,
                                      required = false, default = nil)
  if valid_402656894 != nil:
    section.add "X-Amz-Credential", valid_402656894
  var valid_402656895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656895 = validateParameter(valid_402656895, JString,
                                      required = false, default = nil)
  if valid_402656895 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656895
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656897: Call_CreateRoom_402656885; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a chat room for the specified Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402656897.validator(path, query, header, formData, body, _)
  let scheme = call_402656897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656897.makeUrl(scheme.get, call_402656897.host, call_402656897.base,
                                   call_402656897.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656897, uri, valid, _)

proc call*(call_402656898: Call_CreateRoom_402656885; body: JsonNode;
           accountId: string): Recallable =
  ## createRoom
  ## Creates a chat room for the specified Amazon Chime Enterprise account.
  ##   body: 
                                                                           ## JObject (required)
  ##   
                                                                                                ## accountId: string (required)
                                                                                                ##            
                                                                                                ## : 
                                                                                                ## The 
                                                                                                ## Amazon 
                                                                                                ## Chime 
                                                                                                ## account 
                                                                                                ## ID.
  var path_402656899 = newJObject()
  var body_402656900 = newJObject()
  if body != nil:
    body_402656900 = body
  add(path_402656899, "accountId", newJString(accountId))
  result = call_402656898.call(path_402656899, nil, nil, nil, body_402656900)

var createRoom* = Call_CreateRoom_402656885(name: "createRoom",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms", validator: validate_CreateRoom_402656886,
    base: "/", makeUrl: url_CreateRoom_402656887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListRooms_402656865 = ref object of OpenApiRestCall_402656044
proc url_ListRooms_402656867(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListRooms_402656866(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656868 = path.getOrDefault("accountId")
  valid_402656868 = validateParameter(valid_402656868, JString, required = true,
                                      default = nil)
  if valid_402656868 != nil:
    section.add "accountId", valid_402656868
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## member-id: JString
                                                                                                                             ##            
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## member 
                                                                                                                             ## ID 
                                                                                                                             ## (user 
                                                                                                                             ## ID 
                                                                                                                             ## or 
                                                                                                                             ## bot 
                                                                                                                             ## ID).
  ##   
                                                                                                                                    ## next-token: JString
                                                                                                                                    ##             
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## token 
                                                                                                                                    ## to 
                                                                                                                                    ## use 
                                                                                                                                    ## to 
                                                                                                                                    ## retrieve 
                                                                                                                                    ## the 
                                                                                                                                    ## next 
                                                                                                                                    ## page 
                                                                                                                                    ## of 
                                                                                                                                    ## results.
  section = newJObject()
  var valid_402656869 = query.getOrDefault("max-results")
  valid_402656869 = validateParameter(valid_402656869, JInt, required = false,
                                      default = nil)
  if valid_402656869 != nil:
    section.add "max-results", valid_402656869
  var valid_402656870 = query.getOrDefault("MaxResults")
  valid_402656870 = validateParameter(valid_402656870, JString,
                                      required = false, default = nil)
  if valid_402656870 != nil:
    section.add "MaxResults", valid_402656870
  var valid_402656871 = query.getOrDefault("NextToken")
  valid_402656871 = validateParameter(valid_402656871, JString,
                                      required = false, default = nil)
  if valid_402656871 != nil:
    section.add "NextToken", valid_402656871
  var valid_402656872 = query.getOrDefault("member-id")
  valid_402656872 = validateParameter(valid_402656872, JString,
                                      required = false, default = nil)
  if valid_402656872 != nil:
    section.add "member-id", valid_402656872
  var valid_402656873 = query.getOrDefault("next-token")
  valid_402656873 = validateParameter(valid_402656873, JString,
                                      required = false, default = nil)
  if valid_402656873 != nil:
    section.add "next-token", valid_402656873
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656874 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656874 = validateParameter(valid_402656874, JString,
                                      required = false, default = nil)
  if valid_402656874 != nil:
    section.add "X-Amz-Security-Token", valid_402656874
  var valid_402656875 = header.getOrDefault("X-Amz-Signature")
  valid_402656875 = validateParameter(valid_402656875, JString,
                                      required = false, default = nil)
  if valid_402656875 != nil:
    section.add "X-Amz-Signature", valid_402656875
  var valid_402656876 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656876 = validateParameter(valid_402656876, JString,
                                      required = false, default = nil)
  if valid_402656876 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656876
  var valid_402656877 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656877 = validateParameter(valid_402656877, JString,
                                      required = false, default = nil)
  if valid_402656877 != nil:
    section.add "X-Amz-Algorithm", valid_402656877
  var valid_402656878 = header.getOrDefault("X-Amz-Date")
  valid_402656878 = validateParameter(valid_402656878, JString,
                                      required = false, default = nil)
  if valid_402656878 != nil:
    section.add "X-Amz-Date", valid_402656878
  var valid_402656879 = header.getOrDefault("X-Amz-Credential")
  valid_402656879 = validateParameter(valid_402656879, JString,
                                      required = false, default = nil)
  if valid_402656879 != nil:
    section.add "X-Amz-Credential", valid_402656879
  var valid_402656880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656880 = validateParameter(valid_402656880, JString,
                                      required = false, default = nil)
  if valid_402656880 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656880
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656881: Call_ListRooms_402656865; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
                                                                                         ## 
  let valid = call_402656881.validator(path, query, header, formData, body, _)
  let scheme = call_402656881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656881.makeUrl(scheme.get, call_402656881.host, call_402656881.base,
                                   call_402656881.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656881, uri, valid, _)

proc call*(call_402656882: Call_ListRooms_402656865; accountId: string;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           memberId: string = ""; nextToken: string = ""): Recallable =
  ## listRooms
  ## Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
  ##   
                                                                                                                                                                                                   ## maxResults: int
                                                                                                                                                                                                   ##             
                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                   ## maximum 
                                                                                                                                                                                                   ## number 
                                                                                                                                                                                                   ## of 
                                                                                                                                                                                                   ## results 
                                                                                                                                                                                                   ## to 
                                                                                                                                                                                                   ## return 
                                                                                                                                                                                                   ## in 
                                                                                                                                                                                                   ## a 
                                                                                                                                                                                                   ## single 
                                                                                                                                                                                                   ## call.
  ##   
                                                                                                                                                                                                           ## MaxResults: string
                                                                                                                                                                                                           ##             
                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                           ## Pagination 
                                                                                                                                                                                                           ## limit
  ##   
                                                                                                                                                                                                                   ## accountId: string (required)
                                                                                                                                                                                                                   ##            
                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                   ## Amazon 
                                                                                                                                                                                                                   ## Chime 
                                                                                                                                                                                                                   ## account 
                                                                                                                                                                                                                   ## ID.
  ##   
                                                                                                                                                                                                                         ## NextToken: string
                                                                                                                                                                                                                         ##            
                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                         ## Pagination 
                                                                                                                                                                                                                         ## token
  ##   
                                                                                                                                                                                                                                 ## memberId: string
                                                                                                                                                                                                                                 ##           
                                                                                                                                                                                                                                 ## : 
                                                                                                                                                                                                                                 ## The 
                                                                                                                                                                                                                                 ## member 
                                                                                                                                                                                                                                 ## ID 
                                                                                                                                                                                                                                 ## (user 
                                                                                                                                                                                                                                 ## ID 
                                                                                                                                                                                                                                 ## or 
                                                                                                                                                                                                                                 ## bot 
                                                                                                                                                                                                                                 ## ID).
  ##   
                                                                                                                                                                                                                                        ## nextToken: string
                                                                                                                                                                                                                                        ##            
                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                        ## token 
                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                        ## use 
                                                                                                                                                                                                                                        ## to 
                                                                                                                                                                                                                                        ## retrieve 
                                                                                                                                                                                                                                        ## the 
                                                                                                                                                                                                                                        ## next 
                                                                                                                                                                                                                                        ## page 
                                                                                                                                                                                                                                        ## of 
                                                                                                                                                                                                                                        ## results.
  var path_402656883 = newJObject()
  var query_402656884 = newJObject()
  add(query_402656884, "max-results", newJInt(maxResults))
  add(query_402656884, "MaxResults", newJString(MaxResults))
  add(path_402656883, "accountId", newJString(accountId))
  add(query_402656884, "NextToken", newJString(NextToken))
  add(query_402656884, "member-id", newJString(memberId))
  add(query_402656884, "next-token", newJString(nextToken))
  result = call_402656882.call(path_402656883, query_402656884, nil, nil, nil)

var listRooms* = Call_ListRooms_402656865(name: "listRooms",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms", validator: validate_ListRooms_402656866,
    base: "/", makeUrl: url_ListRooms_402656867,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateRoomMembership_402656921 = ref object of OpenApiRestCall_402656044
proc url_CreateRoomMembership_402656923(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId"),
                 (kind: ConstantSegment, value: "/memberships")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateRoomMembership_402656922(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The room ID.
  ##   accountId: JString (required)
                                                          ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402656924 = path.getOrDefault("roomId")
  valid_402656924 = validateParameter(valid_402656924, JString, required = true,
                                      default = nil)
  if valid_402656924 != nil:
    section.add "roomId", valid_402656924
  var valid_402656925 = path.getOrDefault("accountId")
  valid_402656925 = validateParameter(valid_402656925, JString, required = true,
                                      default = nil)
  if valid_402656925 != nil:
    section.add "accountId", valid_402656925
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656926 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656926 = validateParameter(valid_402656926, JString,
                                      required = false, default = nil)
  if valid_402656926 != nil:
    section.add "X-Amz-Security-Token", valid_402656926
  var valid_402656927 = header.getOrDefault("X-Amz-Signature")
  valid_402656927 = validateParameter(valid_402656927, JString,
                                      required = false, default = nil)
  if valid_402656927 != nil:
    section.add "X-Amz-Signature", valid_402656927
  var valid_402656928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656928 = validateParameter(valid_402656928, JString,
                                      required = false, default = nil)
  if valid_402656928 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656928
  var valid_402656929 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656929 = validateParameter(valid_402656929, JString,
                                      required = false, default = nil)
  if valid_402656929 != nil:
    section.add "X-Amz-Algorithm", valid_402656929
  var valid_402656930 = header.getOrDefault("X-Amz-Date")
  valid_402656930 = validateParameter(valid_402656930, JString,
                                      required = false, default = nil)
  if valid_402656930 != nil:
    section.add "X-Amz-Date", valid_402656930
  var valid_402656931 = header.getOrDefault("X-Amz-Credential")
  valid_402656931 = validateParameter(valid_402656931, JString,
                                      required = false, default = nil)
  if valid_402656931 != nil:
    section.add "X-Amz-Credential", valid_402656931
  var valid_402656932 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656932 = validateParameter(valid_402656932, JString,
                                      required = false, default = nil)
  if valid_402656932 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656934: Call_CreateRoomMembership_402656921;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
                                                                                         ## 
  let valid = call_402656934.validator(path, query, header, formData, body, _)
  let scheme = call_402656934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656934.makeUrl(scheme.get, call_402656934.host, call_402656934.base,
                                   call_402656934.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656934, uri, valid, _)

proc call*(call_402656935: Call_CreateRoomMembership_402656921; roomId: string;
           body: JsonNode; accountId: string): Recallable =
  ## createRoomMembership
  ## Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
  ##   
                                                                                                                                                                                                                          ## roomId: string (required)
                                                                                                                                                                                                                          ##         
                                                                                                                                                                                                                          ## : 
                                                                                                                                                                                                                          ## The 
                                                                                                                                                                                                                          ## room 
                                                                                                                                                                                                                          ## ID.
  ##   
                                                                                                                                                                                                                                ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                           ## accountId: string (required)
                                                                                                                                                                                                                                                           ##            
                                                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                                                           ## Amazon 
                                                                                                                                                                                                                                                           ## Chime 
                                                                                                                                                                                                                                                           ## account 
                                                                                                                                                                                                                                                           ## ID.
  var path_402656936 = newJObject()
  var body_402656937 = newJObject()
  add(path_402656936, "roomId", newJString(roomId))
  if body != nil:
    body_402656937 = body
  add(path_402656936, "accountId", newJString(accountId))
  result = call_402656935.call(path_402656936, nil, nil, nil, body_402656937)

var createRoomMembership* = Call_CreateRoomMembership_402656921(
    name: "createRoomMembership", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}/memberships",
    validator: validate_CreateRoomMembership_402656922, base: "/",
    makeUrl: url_CreateRoomMembership_402656923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListRoomMemberships_402656901 = ref object of OpenApiRestCall_402656044
proc url_ListRoomMemberships_402656903(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId"),
                 (kind: ConstantSegment, value: "/memberships")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListRoomMemberships_402656902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The room ID.
  ##   accountId: JString (required)
                                                          ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402656904 = path.getOrDefault("roomId")
  valid_402656904 = validateParameter(valid_402656904, JString, required = true,
                                      default = nil)
  if valid_402656904 != nil:
    section.add "roomId", valid_402656904
  var valid_402656905 = path.getOrDefault("accountId")
  valid_402656905 = validateParameter(valid_402656905, JString, required = true,
                                      default = nil)
  if valid_402656905 != nil:
    section.add "accountId", valid_402656905
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656906 = query.getOrDefault("max-results")
  valid_402656906 = validateParameter(valid_402656906, JInt, required = false,
                                      default = nil)
  if valid_402656906 != nil:
    section.add "max-results", valid_402656906
  var valid_402656907 = query.getOrDefault("MaxResults")
  valid_402656907 = validateParameter(valid_402656907, JString,
                                      required = false, default = nil)
  if valid_402656907 != nil:
    section.add "MaxResults", valid_402656907
  var valid_402656908 = query.getOrDefault("NextToken")
  valid_402656908 = validateParameter(valid_402656908, JString,
                                      required = false, default = nil)
  if valid_402656908 != nil:
    section.add "NextToken", valid_402656908
  var valid_402656909 = query.getOrDefault("next-token")
  valid_402656909 = validateParameter(valid_402656909, JString,
                                      required = false, default = nil)
  if valid_402656909 != nil:
    section.add "next-token", valid_402656909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656910 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656910 = validateParameter(valid_402656910, JString,
                                      required = false, default = nil)
  if valid_402656910 != nil:
    section.add "X-Amz-Security-Token", valid_402656910
  var valid_402656911 = header.getOrDefault("X-Amz-Signature")
  valid_402656911 = validateParameter(valid_402656911, JString,
                                      required = false, default = nil)
  if valid_402656911 != nil:
    section.add "X-Amz-Signature", valid_402656911
  var valid_402656912 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656912 = validateParameter(valid_402656912, JString,
                                      required = false, default = nil)
  if valid_402656912 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656912
  var valid_402656913 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656913 = validateParameter(valid_402656913, JString,
                                      required = false, default = nil)
  if valid_402656913 != nil:
    section.add "X-Amz-Algorithm", valid_402656913
  var valid_402656914 = header.getOrDefault("X-Amz-Date")
  valid_402656914 = validateParameter(valid_402656914, JString,
                                      required = false, default = nil)
  if valid_402656914 != nil:
    section.add "X-Amz-Date", valid_402656914
  var valid_402656915 = header.getOrDefault("X-Amz-Credential")
  valid_402656915 = validateParameter(valid_402656915, JString,
                                      required = false, default = nil)
  if valid_402656915 != nil:
    section.add "X-Amz-Credential", valid_402656915
  var valid_402656916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656916 = validateParameter(valid_402656916, JString,
                                      required = false, default = nil)
  if valid_402656916 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656916
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656917: Call_ListRoomMemberships_402656901;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
                                                                                         ## 
  let valid = call_402656917.validator(path, query, header, formData, body, _)
  let scheme = call_402656917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656917.makeUrl(scheme.get, call_402656917.host, call_402656917.base,
                                   call_402656917.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656917, uri, valid, _)

proc call*(call_402656918: Call_ListRoomMemberships_402656901; roomId: string;
           accountId: string; maxResults: int = 0; MaxResults: string = "";
           NextToken: string = ""; nextToken: string = ""): Recallable =
  ## listRoomMemberships
  ## Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
  ##   
                                                                                                                                                     ## roomId: string (required)
                                                                                                                                                     ##         
                                                                                                                                                     ## : 
                                                                                                                                                     ## The 
                                                                                                                                                     ## room 
                                                                                                                                                     ## ID.
  ##   
                                                                                                                                                           ## maxResults: int
                                                                                                                                                           ##             
                                                                                                                                                           ## : 
                                                                                                                                                           ## The 
                                                                                                                                                           ## maximum 
                                                                                                                                                           ## number 
                                                                                                                                                           ## of 
                                                                                                                                                           ## results 
                                                                                                                                                           ## to 
                                                                                                                                                           ## return 
                                                                                                                                                           ## in 
                                                                                                                                                           ## a 
                                                                                                                                                           ## single 
                                                                                                                                                           ## call.
  ##   
                                                                                                                                                                   ## MaxResults: string
                                                                                                                                                                   ##             
                                                                                                                                                                   ## : 
                                                                                                                                                                   ## Pagination 
                                                                                                                                                                   ## limit
  ##   
                                                                                                                                                                           ## accountId: string (required)
                                                                                                                                                                           ##            
                                                                                                                                                                           ## : 
                                                                                                                                                                           ## The 
                                                                                                                                                                           ## Amazon 
                                                                                                                                                                           ## Chime 
                                                                                                                                                                           ## account 
                                                                                                                                                                           ## ID.
  ##   
                                                                                                                                                                                 ## NextToken: string
                                                                                                                                                                                 ##            
                                                                                                                                                                                 ## : 
                                                                                                                                                                                 ## Pagination 
                                                                                                                                                                                 ## token
  ##   
                                                                                                                                                                                         ## nextToken: string
                                                                                                                                                                                         ##            
                                                                                                                                                                                         ## : 
                                                                                                                                                                                         ## The 
                                                                                                                                                                                         ## token 
                                                                                                                                                                                         ## to 
                                                                                                                                                                                         ## use 
                                                                                                                                                                                         ## to 
                                                                                                                                                                                         ## retrieve 
                                                                                                                                                                                         ## the 
                                                                                                                                                                                         ## next 
                                                                                                                                                                                         ## page 
                                                                                                                                                                                         ## of 
                                                                                                                                                                                         ## results.
  var path_402656919 = newJObject()
  var query_402656920 = newJObject()
  add(path_402656919, "roomId", newJString(roomId))
  add(query_402656920, "max-results", newJInt(maxResults))
  add(query_402656920, "MaxResults", newJString(MaxResults))
  add(path_402656919, "accountId", newJString(accountId))
  add(query_402656920, "NextToken", newJString(NextToken))
  add(query_402656920, "next-token", newJString(nextToken))
  result = call_402656918.call(path_402656919, query_402656920, nil, nil, nil)

var listRoomMemberships* = Call_ListRoomMemberships_402656901(
    name: "listRoomMemberships", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}/memberships",
    validator: validate_ListRoomMemberships_402656902, base: "/",
    makeUrl: url_ListRoomMemberships_402656903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateUser_402656938 = ref object of OpenApiRestCall_402656044
proc url_CreateUser_402656940(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users#operation=create")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_CreateUser_402656939(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a user under the specified Amazon Chime account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402656941 = path.getOrDefault("accountId")
  valid_402656941 = validateParameter(valid_402656941, JString, required = true,
                                      default = nil)
  if valid_402656941 != nil:
    section.add "accountId", valid_402656941
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402656942 = query.getOrDefault("operation")
  valid_402656942 = validateParameter(valid_402656942, JString, required = true,
                                      default = newJString("create"))
  if valid_402656942 != nil:
    section.add "operation", valid_402656942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656943 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656943 = validateParameter(valid_402656943, JString,
                                      required = false, default = nil)
  if valid_402656943 != nil:
    section.add "X-Amz-Security-Token", valid_402656943
  var valid_402656944 = header.getOrDefault("X-Amz-Signature")
  valid_402656944 = validateParameter(valid_402656944, JString,
                                      required = false, default = nil)
  if valid_402656944 != nil:
    section.add "X-Amz-Signature", valid_402656944
  var valid_402656945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656945 = validateParameter(valid_402656945, JString,
                                      required = false, default = nil)
  if valid_402656945 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656945
  var valid_402656946 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656946 = validateParameter(valid_402656946, JString,
                                      required = false, default = nil)
  if valid_402656946 != nil:
    section.add "X-Amz-Algorithm", valid_402656946
  var valid_402656947 = header.getOrDefault("X-Amz-Date")
  valid_402656947 = validateParameter(valid_402656947, JString,
                                      required = false, default = nil)
  if valid_402656947 != nil:
    section.add "X-Amz-Date", valid_402656947
  var valid_402656948 = header.getOrDefault("X-Amz-Credential")
  valid_402656948 = validateParameter(valid_402656948, JString,
                                      required = false, default = nil)
  if valid_402656948 != nil:
    section.add "X-Amz-Credential", valid_402656948
  var valid_402656949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656949 = validateParameter(valid_402656949, JString,
                                      required = false, default = nil)
  if valid_402656949 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656949
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656951: Call_CreateUser_402656938; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a user under the specified Amazon Chime account.
                                                                                         ## 
  let valid = call_402656951.validator(path, query, header, formData, body, _)
  let scheme = call_402656951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656951.makeUrl(scheme.get, call_402656951.host, call_402656951.base,
                                   call_402656951.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656951, uri, valid, _)

proc call*(call_402656952: Call_CreateUser_402656938; body: JsonNode;
           accountId: string; operation: string = "create"): Recallable =
  ## createUser
  ## Creates a user under the specified Amazon Chime account.
  ##   body: JObject (required)
  ##   accountId: string (required)
                               ##            : The Amazon Chime account ID.
  ##   
                                                                           ## operation: string (required)
  var path_402656953 = newJObject()
  var query_402656954 = newJObject()
  var body_402656955 = newJObject()
  if body != nil:
    body_402656955 = body
  add(path_402656953, "accountId", newJString(accountId))
  add(query_402656954, "operation", newJString(operation))
  result = call_402656952.call(path_402656953, query_402656954, nil, nil, body_402656955)

var createUser* = Call_CreateUser_402656938(name: "createUser",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users#operation=create",
    validator: validate_CreateUser_402656939, base: "/",
    makeUrl: url_CreateUser_402656940, schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateVoiceConnector_402656973 = ref object of OpenApiRestCall_402656044
proc url_CreateVoiceConnector_402656975(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateVoiceConnector_402656974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p> <p>Enabling <a>CreateVoiceConnectorRequest$RequireEncryption</a> configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656976 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656976 = validateParameter(valid_402656976, JString,
                                      required = false, default = nil)
  if valid_402656976 != nil:
    section.add "X-Amz-Security-Token", valid_402656976
  var valid_402656977 = header.getOrDefault("X-Amz-Signature")
  valid_402656977 = validateParameter(valid_402656977, JString,
                                      required = false, default = nil)
  if valid_402656977 != nil:
    section.add "X-Amz-Signature", valid_402656977
  var valid_402656978 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656978 = validateParameter(valid_402656978, JString,
                                      required = false, default = nil)
  if valid_402656978 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656978
  var valid_402656979 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656979 = validateParameter(valid_402656979, JString,
                                      required = false, default = nil)
  if valid_402656979 != nil:
    section.add "X-Amz-Algorithm", valid_402656979
  var valid_402656980 = header.getOrDefault("X-Amz-Date")
  valid_402656980 = validateParameter(valid_402656980, JString,
                                      required = false, default = nil)
  if valid_402656980 != nil:
    section.add "X-Amz-Date", valid_402656980
  var valid_402656981 = header.getOrDefault("X-Amz-Credential")
  valid_402656981 = validateParameter(valid_402656981, JString,
                                      required = false, default = nil)
  if valid_402656981 != nil:
    section.add "X-Amz-Credential", valid_402656981
  var valid_402656982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656982 = validateParameter(valid_402656982, JString,
                                      required = false, default = nil)
  if valid_402656982 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656982
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402656984: Call_CreateVoiceConnector_402656973;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p> <p>Enabling <a>CreateVoiceConnectorRequest$RequireEncryption</a> configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.</p>
                                                                                         ## 
  let valid = call_402656984.validator(path, query, header, formData, body, _)
  let scheme = call_402656984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656984.makeUrl(scheme.get, call_402656984.host, call_402656984.base,
                                   call_402656984.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656984, uri, valid, _)

proc call*(call_402656985: Call_CreateVoiceConnector_402656973; body: JsonNode): Recallable =
  ## createVoiceConnector
  ## <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p> <p>Enabling <a>CreateVoiceConnectorRequest$RequireEncryption</a> configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                                    ## body: JObject (required)
  var body_402656986 = newJObject()
  if body != nil:
    body_402656986 = body
  result = call_402656985.call(nil, nil, nil, nil, body_402656986)

var createVoiceConnector* = Call_CreateVoiceConnector_402656973(
    name: "createVoiceConnector", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/voice-connectors",
    validator: validate_CreateVoiceConnector_402656974, base: "/",
    makeUrl: url_CreateVoiceConnector_402656975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListVoiceConnectors_402656956 = ref object of OpenApiRestCall_402656044
proc url_ListVoiceConnectors_402656958(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListVoiceConnectors_402656957(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656959 = query.getOrDefault("max-results")
  valid_402656959 = validateParameter(valid_402656959, JInt, required = false,
                                      default = nil)
  if valid_402656959 != nil:
    section.add "max-results", valid_402656959
  var valid_402656960 = query.getOrDefault("MaxResults")
  valid_402656960 = validateParameter(valid_402656960, JString,
                                      required = false, default = nil)
  if valid_402656960 != nil:
    section.add "MaxResults", valid_402656960
  var valid_402656961 = query.getOrDefault("NextToken")
  valid_402656961 = validateParameter(valid_402656961, JString,
                                      required = false, default = nil)
  if valid_402656961 != nil:
    section.add "NextToken", valid_402656961
  var valid_402656962 = query.getOrDefault("next-token")
  valid_402656962 = validateParameter(valid_402656962, JString,
                                      required = false, default = nil)
  if valid_402656962 != nil:
    section.add "next-token", valid_402656962
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656963 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656963 = validateParameter(valid_402656963, JString,
                                      required = false, default = nil)
  if valid_402656963 != nil:
    section.add "X-Amz-Security-Token", valid_402656963
  var valid_402656964 = header.getOrDefault("X-Amz-Signature")
  valid_402656964 = validateParameter(valid_402656964, JString,
                                      required = false, default = nil)
  if valid_402656964 != nil:
    section.add "X-Amz-Signature", valid_402656964
  var valid_402656965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656965 = validateParameter(valid_402656965, JString,
                                      required = false, default = nil)
  if valid_402656965 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656965
  var valid_402656966 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656966 = validateParameter(valid_402656966, JString,
                                      required = false, default = nil)
  if valid_402656966 != nil:
    section.add "X-Amz-Algorithm", valid_402656966
  var valid_402656967 = header.getOrDefault("X-Amz-Date")
  valid_402656967 = validateParameter(valid_402656967, JString,
                                      required = false, default = nil)
  if valid_402656967 != nil:
    section.add "X-Amz-Date", valid_402656967
  var valid_402656968 = header.getOrDefault("X-Amz-Credential")
  valid_402656968 = validateParameter(valid_402656968, JString,
                                      required = false, default = nil)
  if valid_402656968 != nil:
    section.add "X-Amz-Credential", valid_402656968
  var valid_402656969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402656969 = validateParameter(valid_402656969, JString,
                                      required = false, default = nil)
  if valid_402656969 != nil:
    section.add "X-Amz-SignedHeaders", valid_402656969
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402656970: Call_ListVoiceConnectors_402656956;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
                                                                                         ## 
  let valid = call_402656970.validator(path, query, header, formData, body, _)
  let scheme = call_402656970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402656970.makeUrl(scheme.get, call_402656970.host, call_402656970.base,
                                   call_402656970.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402656970, uri, valid, _)

proc call*(call_402656971: Call_ListVoiceConnectors_402656956;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listVoiceConnectors
  ## Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
  ##   
                                                                                 ## maxResults: int
                                                                                 ##             
                                                                                 ## : 
                                                                                 ## The 
                                                                                 ## maximum 
                                                                                 ## number 
                                                                                 ## of 
                                                                                 ## results 
                                                                                 ## to 
                                                                                 ## return 
                                                                                 ## in 
                                                                                 ## a 
                                                                                 ## single 
                                                                                 ## call.
  ##   
                                                                                         ## MaxResults: string
                                                                                         ##             
                                                                                         ## : 
                                                                                         ## Pagination 
                                                                                         ## limit
  ##   
                                                                                                 ## NextToken: string
                                                                                                 ##            
                                                                                                 ## : 
                                                                                                 ## Pagination 
                                                                                                 ## token
  ##   
                                                                                                         ## nextToken: string
                                                                                                         ##            
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## token 
                                                                                                         ## to 
                                                                                                         ## use 
                                                                                                         ## to 
                                                                                                         ## retrieve 
                                                                                                         ## the 
                                                                                                         ## next 
                                                                                                         ## page 
                                                                                                         ## of 
                                                                                                         ## results.
  var query_402656972 = newJObject()
  add(query_402656972, "max-results", newJInt(maxResults))
  add(query_402656972, "MaxResults", newJString(MaxResults))
  add(query_402656972, "NextToken", newJString(NextToken))
  add(query_402656972, "next-token", newJString(nextToken))
  result = call_402656971.call(nil, query_402656972, nil, nil, nil)

var listVoiceConnectors* = Call_ListVoiceConnectors_402656956(
    name: "listVoiceConnectors", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/voice-connectors",
    validator: validate_ListVoiceConnectors_402656957, base: "/",
    makeUrl: url_ListVoiceConnectors_402656958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_CreateVoiceConnectorGroup_402657004 = ref object of OpenApiRestCall_402656044
proc url_CreateVoiceConnectorGroup_402657006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_CreateVoiceConnectorGroup_402657005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including <code>VoiceConnectorItems</code> in the request.</p> <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p>
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657007 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657007 = validateParameter(valid_402657007, JString,
                                      required = false, default = nil)
  if valid_402657007 != nil:
    section.add "X-Amz-Security-Token", valid_402657007
  var valid_402657008 = header.getOrDefault("X-Amz-Signature")
  valid_402657008 = validateParameter(valid_402657008, JString,
                                      required = false, default = nil)
  if valid_402657008 != nil:
    section.add "X-Amz-Signature", valid_402657008
  var valid_402657009 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657009 = validateParameter(valid_402657009, JString,
                                      required = false, default = nil)
  if valid_402657009 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657009
  var valid_402657010 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657010 = validateParameter(valid_402657010, JString,
                                      required = false, default = nil)
  if valid_402657010 != nil:
    section.add "X-Amz-Algorithm", valid_402657010
  var valid_402657011 = header.getOrDefault("X-Amz-Date")
  valid_402657011 = validateParameter(valid_402657011, JString,
                                      required = false, default = nil)
  if valid_402657011 != nil:
    section.add "X-Amz-Date", valid_402657011
  var valid_402657012 = header.getOrDefault("X-Amz-Credential")
  valid_402657012 = validateParameter(valid_402657012, JString,
                                      required = false, default = nil)
  if valid_402657012 != nil:
    section.add "X-Amz-Credential", valid_402657012
  var valid_402657013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657013 = validateParameter(valid_402657013, JString,
                                      required = false, default = nil)
  if valid_402657013 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657013
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657015: Call_CreateVoiceConnectorGroup_402657004;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including <code>VoiceConnectorItems</code> in the request.</p> <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p>
                                                                                         ## 
  let valid = call_402657015.validator(path, query, header, formData, body, _)
  let scheme = call_402657015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657015.makeUrl(scheme.get, call_402657015.host, call_402657015.base,
                                   call_402657015.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657015, uri, valid, _)

proc call*(call_402657016: Call_CreateVoiceConnectorGroup_402657004;
           body: JsonNode): Recallable =
  ## createVoiceConnectorGroup
  ## <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including <code>VoiceConnectorItems</code> in the request.</p> <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p>
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                                                              ## body: JObject (required)
  var body_402657017 = newJObject()
  if body != nil:
    body_402657017 = body
  result = call_402657016.call(nil, nil, nil, nil, body_402657017)

var createVoiceConnectorGroup* = Call_CreateVoiceConnectorGroup_402657004(
    name: "createVoiceConnectorGroup", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/voice-connector-groups",
    validator: validate_CreateVoiceConnectorGroup_402657005, base: "/",
    makeUrl: url_CreateVoiceConnectorGroup_402657006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListVoiceConnectorGroups_402656987 = ref object of OpenApiRestCall_402656044
proc url_ListVoiceConnectorGroups_402656989(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListVoiceConnectorGroups_402656988(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## MaxResults: JString
                                                                                                             ##             
                                                                                                             ## : 
                                                                                                             ## Pagination 
                                                                                                             ## limit
  ##   
                                                                                                                     ## NextToken: JString
                                                                                                                     ##            
                                                                                                                     ## : 
                                                                                                                     ## Pagination 
                                                                                                                     ## token
  ##   
                                                                                                                             ## next-token: JString
                                                                                                                             ##             
                                                                                                                             ## : 
                                                                                                                             ## The 
                                                                                                                             ## token 
                                                                                                                             ## to 
                                                                                                                             ## use 
                                                                                                                             ## to 
                                                                                                                             ## retrieve 
                                                                                                                             ## the 
                                                                                                                             ## next 
                                                                                                                             ## page 
                                                                                                                             ## of 
                                                                                                                             ## results.
  section = newJObject()
  var valid_402656990 = query.getOrDefault("max-results")
  valid_402656990 = validateParameter(valid_402656990, JInt, required = false,
                                      default = nil)
  if valid_402656990 != nil:
    section.add "max-results", valid_402656990
  var valid_402656991 = query.getOrDefault("MaxResults")
  valid_402656991 = validateParameter(valid_402656991, JString,
                                      required = false, default = nil)
  if valid_402656991 != nil:
    section.add "MaxResults", valid_402656991
  var valid_402656992 = query.getOrDefault("NextToken")
  valid_402656992 = validateParameter(valid_402656992, JString,
                                      required = false, default = nil)
  if valid_402656992 != nil:
    section.add "NextToken", valid_402656992
  var valid_402656993 = query.getOrDefault("next-token")
  valid_402656993 = validateParameter(valid_402656993, JString,
                                      required = false, default = nil)
  if valid_402656993 != nil:
    section.add "next-token", valid_402656993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402656994 = header.getOrDefault("X-Amz-Security-Token")
  valid_402656994 = validateParameter(valid_402656994, JString,
                                      required = false, default = nil)
  if valid_402656994 != nil:
    section.add "X-Amz-Security-Token", valid_402656994
  var valid_402656995 = header.getOrDefault("X-Amz-Signature")
  valid_402656995 = validateParameter(valid_402656995, JString,
                                      required = false, default = nil)
  if valid_402656995 != nil:
    section.add "X-Amz-Signature", valid_402656995
  var valid_402656996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402656996 = validateParameter(valid_402656996, JString,
                                      required = false, default = nil)
  if valid_402656996 != nil:
    section.add "X-Amz-Content-Sha256", valid_402656996
  var valid_402656997 = header.getOrDefault("X-Amz-Algorithm")
  valid_402656997 = validateParameter(valid_402656997, JString,
                                      required = false, default = nil)
  if valid_402656997 != nil:
    section.add "X-Amz-Algorithm", valid_402656997
  var valid_402656998 = header.getOrDefault("X-Amz-Date")
  valid_402656998 = validateParameter(valid_402656998, JString,
                                      required = false, default = nil)
  if valid_402656998 != nil:
    section.add "X-Amz-Date", valid_402656998
  var valid_402656999 = header.getOrDefault("X-Amz-Credential")
  valid_402656999 = validateParameter(valid_402656999, JString,
                                      required = false, default = nil)
  if valid_402656999 != nil:
    section.add "X-Amz-Credential", valid_402656999
  var valid_402657000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657000 = validateParameter(valid_402657000, JString,
                                      required = false, default = nil)
  if valid_402657000 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657001: Call_ListVoiceConnectorGroups_402656987;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
                                                                                         ## 
  let valid = call_402657001.validator(path, query, header, formData, body, _)
  let scheme = call_402657001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657001.makeUrl(scheme.get, call_402657001.host, call_402657001.base,
                                   call_402657001.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657001, uri, valid, _)

proc call*(call_402657002: Call_ListVoiceConnectorGroups_402656987;
           maxResults: int = 0; MaxResults: string = ""; NextToken: string = "";
           nextToken: string = ""): Recallable =
  ## listVoiceConnectorGroups
  ## Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
  ##   
                                                                                       ## maxResults: int
                                                                                       ##             
                                                                                       ## : 
                                                                                       ## The 
                                                                                       ## maximum 
                                                                                       ## number 
                                                                                       ## of 
                                                                                       ## results 
                                                                                       ## to 
                                                                                       ## return 
                                                                                       ## in 
                                                                                       ## a 
                                                                                       ## single 
                                                                                       ## call.
  ##   
                                                                                               ## MaxResults: string
                                                                                               ##             
                                                                                               ## : 
                                                                                               ## Pagination 
                                                                                               ## limit
  ##   
                                                                                                       ## NextToken: string
                                                                                                       ##            
                                                                                                       ## : 
                                                                                                       ## Pagination 
                                                                                                       ## token
  ##   
                                                                                                               ## nextToken: string
                                                                                                               ##            
                                                                                                               ## : 
                                                                                                               ## The 
                                                                                                               ## token 
                                                                                                               ## to 
                                                                                                               ## use 
                                                                                                               ## to 
                                                                                                               ## retrieve 
                                                                                                               ## the 
                                                                                                               ## next 
                                                                                                               ## page 
                                                                                                               ## of 
                                                                                                               ## results.
  var query_402657003 = newJObject()
  add(query_402657003, "max-results", newJInt(maxResults))
  add(query_402657003, "MaxResults", newJString(MaxResults))
  add(query_402657003, "NextToken", newJString(NextToken))
  add(query_402657003, "next-token", newJString(nextToken))
  result = call_402657002.call(nil, query_402657003, nil, nil, nil)

var listVoiceConnectorGroups* = Call_ListVoiceConnectorGroups_402656987(
    name: "listVoiceConnectorGroups", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/voice-connector-groups",
    validator: validate_ListVoiceConnectorGroups_402656988, base: "/",
    makeUrl: url_ListVoiceConnectorGroups_402656989,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAccount_402657032 = ref object of OpenApiRestCall_402656044
proc url_UpdateAccount_402657034(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateAccount_402657033(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657035 = path.getOrDefault("accountId")
  valid_402657035 = validateParameter(valid_402657035, JString, required = true,
                                      default = nil)
  if valid_402657035 != nil:
    section.add "accountId", valid_402657035
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657036 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657036 = validateParameter(valid_402657036, JString,
                                      required = false, default = nil)
  if valid_402657036 != nil:
    section.add "X-Amz-Security-Token", valid_402657036
  var valid_402657037 = header.getOrDefault("X-Amz-Signature")
  valid_402657037 = validateParameter(valid_402657037, JString,
                                      required = false, default = nil)
  if valid_402657037 != nil:
    section.add "X-Amz-Signature", valid_402657037
  var valid_402657038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657038 = validateParameter(valid_402657038, JString,
                                      required = false, default = nil)
  if valid_402657038 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657038
  var valid_402657039 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657039 = validateParameter(valid_402657039, JString,
                                      required = false, default = nil)
  if valid_402657039 != nil:
    section.add "X-Amz-Algorithm", valid_402657039
  var valid_402657040 = header.getOrDefault("X-Amz-Date")
  valid_402657040 = validateParameter(valid_402657040, JString,
                                      required = false, default = nil)
  if valid_402657040 != nil:
    section.add "X-Amz-Date", valid_402657040
  var valid_402657041 = header.getOrDefault("X-Amz-Credential")
  valid_402657041 = validateParameter(valid_402657041, JString,
                                      required = false, default = nil)
  if valid_402657041 != nil:
    section.add "X-Amz-Credential", valid_402657041
  var valid_402657042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657042 = validateParameter(valid_402657042, JString,
                                      required = false, default = nil)
  if valid_402657042 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657042
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657044: Call_UpdateAccount_402657032; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.
                                                                                         ## 
  let valid = call_402657044.validator(path, query, header, formData, body, _)
  let scheme = call_402657044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657044.makeUrl(scheme.get, call_402657044.host, call_402657044.base,
                                   call_402657044.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657044, uri, valid, _)

proc call*(call_402657045: Call_UpdateAccount_402657032; body: JsonNode;
           accountId: string): Recallable =
  ## updateAccount
  ## Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.
  ##   
                                                                                                                                        ## body: JObject (required)
  ##   
                                                                                                                                                                   ## accountId: string (required)
                                                                                                                                                                   ##            
                                                                                                                                                                   ## : 
                                                                                                                                                                   ## The 
                                                                                                                                                                   ## Amazon 
                                                                                                                                                                   ## Chime 
                                                                                                                                                                   ## account 
                                                                                                                                                                   ## ID.
  var path_402657046 = newJObject()
  var body_402657047 = newJObject()
  if body != nil:
    body_402657047 = body
  add(path_402657046, "accountId", newJString(accountId))
  result = call_402657045.call(path_402657046, nil, nil, nil, body_402657047)

var updateAccount* = Call_UpdateAccount_402657032(name: "updateAccount",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}", validator: validate_UpdateAccount_402657033,
    base: "/", makeUrl: url_UpdateAccount_402657034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAccount_402657018 = ref object of OpenApiRestCall_402656044
proc url_GetAccount_402657020(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetAccount_402657019(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657021 = path.getOrDefault("accountId")
  valid_402657021 = validateParameter(valid_402657021, JString, required = true,
                                      default = nil)
  if valid_402657021 != nil:
    section.add "accountId", valid_402657021
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657022 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657022 = validateParameter(valid_402657022, JString,
                                      required = false, default = nil)
  if valid_402657022 != nil:
    section.add "X-Amz-Security-Token", valid_402657022
  var valid_402657023 = header.getOrDefault("X-Amz-Signature")
  valid_402657023 = validateParameter(valid_402657023, JString,
                                      required = false, default = nil)
  if valid_402657023 != nil:
    section.add "X-Amz-Signature", valid_402657023
  var valid_402657024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657024 = validateParameter(valid_402657024, JString,
                                      required = false, default = nil)
  if valid_402657024 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657024
  var valid_402657025 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657025 = validateParameter(valid_402657025, JString,
                                      required = false, default = nil)
  if valid_402657025 != nil:
    section.add "X-Amz-Algorithm", valid_402657025
  var valid_402657026 = header.getOrDefault("X-Amz-Date")
  valid_402657026 = validateParameter(valid_402657026, JString,
                                      required = false, default = nil)
  if valid_402657026 != nil:
    section.add "X-Amz-Date", valid_402657026
  var valid_402657027 = header.getOrDefault("X-Amz-Credential")
  valid_402657027 = validateParameter(valid_402657027, JString,
                                      required = false, default = nil)
  if valid_402657027 != nil:
    section.add "X-Amz-Credential", valid_402657027
  var valid_402657028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657028 = validateParameter(valid_402657028, JString,
                                      required = false, default = nil)
  if valid_402657028 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657028
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657029: Call_GetAccount_402657018; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
                                                                                         ## 
  let valid = call_402657029.validator(path, query, header, formData, body, _)
  let scheme = call_402657029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657029.makeUrl(scheme.get, call_402657029.host, call_402657029.base,
                                   call_402657029.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657029, uri, valid, _)

proc call*(call_402657030: Call_GetAccount_402657018; accountId: string): Recallable =
  ## getAccount
  ## Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
  ##   
                                                                                                           ## accountId: string (required)
                                                                                                           ##            
                                                                                                           ## : 
                                                                                                           ## The 
                                                                                                           ## Amazon 
                                                                                                           ## Chime 
                                                                                                           ## account 
                                                                                                           ## ID.
  var path_402657031 = newJObject()
  add(path_402657031, "accountId", newJString(accountId))
  result = call_402657030.call(path_402657031, nil, nil, nil, nil)

var getAccount* = Call_GetAccount_402657018(name: "getAccount",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}", validator: validate_GetAccount_402657019,
    base: "/", makeUrl: url_GetAccount_402657020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAccount_402657048 = ref object of OpenApiRestCall_402656044
proc url_DeleteAccount_402657050(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteAccount_402657049(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting a <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action to do so.</p> <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.</p> <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore a deleted account from your <code>Disabled</code> accounts list, you must contact AWS Support.</p> <p>After 90 days, deleted accounts are permanently removed from your <code>Disabled</code> accounts list.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657051 = path.getOrDefault("accountId")
  valid_402657051 = validateParameter(valid_402657051, JString, required = true,
                                      default = nil)
  if valid_402657051 != nil:
    section.add "accountId", valid_402657051
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657052 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657052 = validateParameter(valid_402657052, JString,
                                      required = false, default = nil)
  if valid_402657052 != nil:
    section.add "X-Amz-Security-Token", valid_402657052
  var valid_402657053 = header.getOrDefault("X-Amz-Signature")
  valid_402657053 = validateParameter(valid_402657053, JString,
                                      required = false, default = nil)
  if valid_402657053 != nil:
    section.add "X-Amz-Signature", valid_402657053
  var valid_402657054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657054 = validateParameter(valid_402657054, JString,
                                      required = false, default = nil)
  if valid_402657054 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657054
  var valid_402657055 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657055 = validateParameter(valid_402657055, JString,
                                      required = false, default = nil)
  if valid_402657055 != nil:
    section.add "X-Amz-Algorithm", valid_402657055
  var valid_402657056 = header.getOrDefault("X-Amz-Date")
  valid_402657056 = validateParameter(valid_402657056, JString,
                                      required = false, default = nil)
  if valid_402657056 != nil:
    section.add "X-Amz-Date", valid_402657056
  var valid_402657057 = header.getOrDefault("X-Amz-Credential")
  valid_402657057 = validateParameter(valid_402657057, JString,
                                      required = false, default = nil)
  if valid_402657057 != nil:
    section.add "X-Amz-Credential", valid_402657057
  var valid_402657058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657058 = validateParameter(valid_402657058, JString,
                                      required = false, default = nil)
  if valid_402657058 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657058
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657059: Call_DeleteAccount_402657048; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting a <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action to do so.</p> <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.</p> <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore a deleted account from your <code>Disabled</code> accounts list, you must contact AWS Support.</p> <p>After 90 days, deleted accounts are permanently removed from your <code>Disabled</code> accounts list.</p>
                                                                                         ## 
  let valid = call_402657059.validator(path, query, header, formData, body, _)
  let scheme = call_402657059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657059.makeUrl(scheme.get, call_402657059.host, call_402657059.base,
                                   call_402657059.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657059, uri, valid, _)

proc call*(call_402657060: Call_DeleteAccount_402657048; accountId: string): Recallable =
  ## deleteAccount
  ## <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting a <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action to do so.</p> <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.</p> <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore a deleted account from your <code>Disabled</code> accounts list, you must contact AWS Support.</p> <p>After 90 days, deleted accounts are permanently removed from your <code>Disabled</code> accounts list.</p>
  ##   
accountId: string (required)


he 
mazon 
hime 
account 

  var path_402657061 = newJObject()
  add(path_402657061, "accountId", newJString(accountId))
  result = call_402657060.call(path_402657061, nil, nil, nil, nil)

var deleteAccount* = Call_DeleteAccount_402657048(name: "deleteAccount",
    meth: HttpMethod.HttpDelete, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}", validator: validate_DeleteAccount_402657049,
    base: "/", makeUrl: url_DeleteAccount_402657050,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttendee_402657062 = ref object of OpenApiRestCall_402656044
proc url_GetAttendee_402657064(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  assert "attendeeId" in path, "`attendeeId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId"),
                 (kind: ConstantSegment, value: "/attendees/"),
                 (kind: VariableSegment, value: "attendeeId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetAttendee_402657063(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  ##   
                                                                                 ## attendeeId: JString (required)
                                                                                 ##             
                                                                                 ## : 
                                                                                 ## The 
                                                                                 ## Amazon 
                                                                                 ## Chime 
                                                                                 ## SDK 
                                                                                 ## attendee 
                                                                                 ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402657065 = path.getOrDefault("meetingId")
  valid_402657065 = validateParameter(valid_402657065, JString, required = true,
                                      default = nil)
  if valid_402657065 != nil:
    section.add "meetingId", valid_402657065
  var valid_402657066 = path.getOrDefault("attendeeId")
  valid_402657066 = validateParameter(valid_402657066, JString, required = true,
                                      default = nil)
  if valid_402657066 != nil:
    section.add "attendeeId", valid_402657066
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657067 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657067 = validateParameter(valid_402657067, JString,
                                      required = false, default = nil)
  if valid_402657067 != nil:
    section.add "X-Amz-Security-Token", valid_402657067
  var valid_402657068 = header.getOrDefault("X-Amz-Signature")
  valid_402657068 = validateParameter(valid_402657068, JString,
                                      required = false, default = nil)
  if valid_402657068 != nil:
    section.add "X-Amz-Signature", valid_402657068
  var valid_402657069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657069 = validateParameter(valid_402657069, JString,
                                      required = false, default = nil)
  if valid_402657069 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657069
  var valid_402657070 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657070 = validateParameter(valid_402657070, JString,
                                      required = false, default = nil)
  if valid_402657070 != nil:
    section.add "X-Amz-Algorithm", valid_402657070
  var valid_402657071 = header.getOrDefault("X-Amz-Date")
  valid_402657071 = validateParameter(valid_402657071, JString,
                                      required = false, default = nil)
  if valid_402657071 != nil:
    section.add "X-Amz-Date", valid_402657071
  var valid_402657072 = header.getOrDefault("X-Amz-Credential")
  valid_402657072 = validateParameter(valid_402657072, JString,
                                      required = false, default = nil)
  if valid_402657072 != nil:
    section.add "X-Amz-Credential", valid_402657072
  var valid_402657073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657073 = validateParameter(valid_402657073, JString,
                                      required = false, default = nil)
  if valid_402657073 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657074: Call_GetAttendee_402657062; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402657074.validator(path, query, header, formData, body, _)
  let scheme = call_402657074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657074.makeUrl(scheme.get, call_402657074.host, call_402657074.base,
                                   call_402657074.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657074, uri, valid, _)

proc call*(call_402657075: Call_GetAttendee_402657062; meetingId: string;
           attendeeId: string): Recallable =
  ## getAttendee
  ## Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                   ## meetingId: string (required)
                                                                                                                                                                                                                                                                                                   ##            
                                                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                                                                                                   ## Amazon 
                                                                                                                                                                                                                                                                                                   ## Chime 
                                                                                                                                                                                                                                                                                                   ## SDK 
                                                                                                                                                                                                                                                                                                   ## meeting 
                                                                                                                                                                                                                                                                                                   ## ID.
  ##   
                                                                                                                                                                                                                                                                                                         ## attendeeId: string (required)
                                                                                                                                                                                                                                                                                                         ##             
                                                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                                                                                         ## Amazon 
                                                                                                                                                                                                                                                                                                         ## Chime 
                                                                                                                                                                                                                                                                                                         ## SDK 
                                                                                                                                                                                                                                                                                                         ## attendee 
                                                                                                                                                                                                                                                                                                         ## ID.
  var path_402657076 = newJObject()
  add(path_402657076, "meetingId", newJString(meetingId))
  add(path_402657076, "attendeeId", newJString(attendeeId))
  result = call_402657075.call(path_402657076, nil, nil, nil, nil)

var getAttendee* = Call_GetAttendee_402657062(name: "getAttendee",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}/attendees/{attendeeId}",
    validator: validate_GetAttendee_402657063, base: "/",
    makeUrl: url_GetAttendee_402657064, schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteAttendee_402657077 = ref object of OpenApiRestCall_402656044
proc url_DeleteAttendee_402657079(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  assert "attendeeId" in path, "`attendeeId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId"),
                 (kind: ConstantSegment, value: "/attendees/"),
                 (kind: VariableSegment, value: "attendeeId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteAttendee_402657078(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  ##   
                                                                                 ## attendeeId: JString (required)
                                                                                 ##             
                                                                                 ## : 
                                                                                 ## The 
                                                                                 ## Amazon 
                                                                                 ## Chime 
                                                                                 ## SDK 
                                                                                 ## attendee 
                                                                                 ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402657080 = path.getOrDefault("meetingId")
  valid_402657080 = validateParameter(valid_402657080, JString, required = true,
                                      default = nil)
  if valid_402657080 != nil:
    section.add "meetingId", valid_402657080
  var valid_402657081 = path.getOrDefault("attendeeId")
  valid_402657081 = validateParameter(valid_402657081, JString, required = true,
                                      default = nil)
  if valid_402657081 != nil:
    section.add "attendeeId", valid_402657081
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657082 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657082 = validateParameter(valid_402657082, JString,
                                      required = false, default = nil)
  if valid_402657082 != nil:
    section.add "X-Amz-Security-Token", valid_402657082
  var valid_402657083 = header.getOrDefault("X-Amz-Signature")
  valid_402657083 = validateParameter(valid_402657083, JString,
                                      required = false, default = nil)
  if valid_402657083 != nil:
    section.add "X-Amz-Signature", valid_402657083
  var valid_402657084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657084 = validateParameter(valid_402657084, JString,
                                      required = false, default = nil)
  if valid_402657084 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657084
  var valid_402657085 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657085 = validateParameter(valid_402657085, JString,
                                      required = false, default = nil)
  if valid_402657085 != nil:
    section.add "X-Amz-Algorithm", valid_402657085
  var valid_402657086 = header.getOrDefault("X-Amz-Date")
  valid_402657086 = validateParameter(valid_402657086, JString,
                                      required = false, default = nil)
  if valid_402657086 != nil:
    section.add "X-Amz-Date", valid_402657086
  var valid_402657087 = header.getOrDefault("X-Amz-Credential")
  valid_402657087 = validateParameter(valid_402657087, JString,
                                      required = false, default = nil)
  if valid_402657087 != nil:
    section.add "X-Amz-Credential", valid_402657087
  var valid_402657088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657088 = validateParameter(valid_402657088, JString,
                                      required = false, default = nil)
  if valid_402657088 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657089: Call_DeleteAttendee_402657077; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402657089.validator(path, query, header, formData, body, _)
  let scheme = call_402657089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657089.makeUrl(scheme.get, call_402657089.host, call_402657089.base,
                                   call_402657089.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657089, uri, valid, _)

proc call*(call_402657090: Call_DeleteAttendee_402657077; meetingId: string;
           attendeeId: string): Recallable =
  ## deleteAttendee
  ## Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                      ## meetingId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                      ##            
                                                                                                                                                                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                                                                                                                                                                                                      ## Amazon 
                                                                                                                                                                                                                                                                                                                                                                                                      ## Chime 
                                                                                                                                                                                                                                                                                                                                                                                                      ## SDK 
                                                                                                                                                                                                                                                                                                                                                                                                      ## meeting 
                                                                                                                                                                                                                                                                                                                                                                                                      ## ID.
  ##   
                                                                                                                                                                                                                                                                                                                                                                                                            ## attendeeId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                                            ##             
                                                                                                                                                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                                                                                                                                                            ## Amazon 
                                                                                                                                                                                                                                                                                                                                                                                                            ## Chime 
                                                                                                                                                                                                                                                                                                                                                                                                            ## SDK 
                                                                                                                                                                                                                                                                                                                                                                                                            ## attendee 
                                                                                                                                                                                                                                                                                                                                                                                                            ## ID.
  var path_402657091 = newJObject()
  add(path_402657091, "meetingId", newJString(meetingId))
  add(path_402657091, "attendeeId", newJString(attendeeId))
  result = call_402657090.call(path_402657091, nil, nil, nil, nil)

var deleteAttendee* = Call_DeleteAttendee_402657077(name: "deleteAttendee",
    meth: HttpMethod.HttpDelete, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}/attendees/{attendeeId}",
    validator: validate_DeleteAttendee_402657078, base: "/",
    makeUrl: url_DeleteAttendee_402657079, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutEventsConfiguration_402657107 = ref object of OpenApiRestCall_402656044
proc url_PutEventsConfiguration_402657109(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId"),
                 (kind: ConstantSegment, value: "/events-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutEventsConfiguration_402657108(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see <a>Bot</a>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657110 = path.getOrDefault("botId")
  valid_402657110 = validateParameter(valid_402657110, JString, required = true,
                                      default = nil)
  if valid_402657110 != nil:
    section.add "botId", valid_402657110
  var valid_402657111 = path.getOrDefault("accountId")
  valid_402657111 = validateParameter(valid_402657111, JString, required = true,
                                      default = nil)
  if valid_402657111 != nil:
    section.add "accountId", valid_402657111
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657112 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657112 = validateParameter(valid_402657112, JString,
                                      required = false, default = nil)
  if valid_402657112 != nil:
    section.add "X-Amz-Security-Token", valid_402657112
  var valid_402657113 = header.getOrDefault("X-Amz-Signature")
  valid_402657113 = validateParameter(valid_402657113, JString,
                                      required = false, default = nil)
  if valid_402657113 != nil:
    section.add "X-Amz-Signature", valid_402657113
  var valid_402657114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657114 = validateParameter(valid_402657114, JString,
                                      required = false, default = nil)
  if valid_402657114 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657114
  var valid_402657115 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657115 = validateParameter(valid_402657115, JString,
                                      required = false, default = nil)
  if valid_402657115 != nil:
    section.add "X-Amz-Algorithm", valid_402657115
  var valid_402657116 = header.getOrDefault("X-Amz-Date")
  valid_402657116 = validateParameter(valid_402657116, JString,
                                      required = false, default = nil)
  if valid_402657116 != nil:
    section.add "X-Amz-Date", valid_402657116
  var valid_402657117 = header.getOrDefault("X-Amz-Credential")
  valid_402657117 = validateParameter(valid_402657117, JString,
                                      required = false, default = nil)
  if valid_402657117 != nil:
    section.add "X-Amz-Credential", valid_402657117
  var valid_402657118 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657118 = validateParameter(valid_402657118, JString,
                                      required = false, default = nil)
  if valid_402657118 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657118
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657120: Call_PutEventsConfiguration_402657107;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see <a>Bot</a>.
                                                                                         ## 
  let valid = call_402657120.validator(path, query, header, formData, body, _)
  let scheme = call_402657120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657120.makeUrl(scheme.get, call_402657120.host, call_402657120.base,
                                   call_402657120.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657120, uri, valid, _)

proc call*(call_402657121: Call_PutEventsConfiguration_402657107; botId: string;
           body: JsonNode; accountId: string): Recallable =
  ## putEventsConfiguration
  ## Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see <a>Bot</a>.
  ##   
                                                                                                                                                                                                       ## botId: string (required)
                                                                                                                                                                                                       ##        
                                                                                                                                                                                                       ## : 
                                                                                                                                                                                                       ## The 
                                                                                                                                                                                                       ## bot 
                                                                                                                                                                                                       ## ID.
  ##   
                                                                                                                                                                                                             ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                        ## accountId: string (required)
                                                                                                                                                                                                                                        ##            
                                                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                                                        ## The 
                                                                                                                                                                                                                                        ## Amazon 
                                                                                                                                                                                                                                        ## Chime 
                                                                                                                                                                                                                                        ## account 
                                                                                                                                                                                                                                        ## ID.
  var path_402657122 = newJObject()
  var body_402657123 = newJObject()
  add(path_402657122, "botId", newJString(botId))
  if body != nil:
    body_402657123 = body
  add(path_402657122, "accountId", newJString(accountId))
  result = call_402657121.call(path_402657122, nil, nil, nil, body_402657123)

var putEventsConfiguration* = Call_PutEventsConfiguration_402657107(
    name: "putEventsConfiguration", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/bots/{botId}/events-configuration",
    validator: validate_PutEventsConfiguration_402657108, base: "/",
    makeUrl: url_PutEventsConfiguration_402657109,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEventsConfiguration_402657092 = ref object of OpenApiRestCall_402656044
proc url_GetEventsConfiguration_402657094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId"),
                 (kind: ConstantSegment, value: "/events-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetEventsConfiguration_402657093(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. 
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657095 = path.getOrDefault("botId")
  valid_402657095 = validateParameter(valid_402657095, JString, required = true,
                                      default = nil)
  if valid_402657095 != nil:
    section.add "botId", valid_402657095
  var valid_402657096 = path.getOrDefault("accountId")
  valid_402657096 = validateParameter(valid_402657096, JString, required = true,
                                      default = nil)
  if valid_402657096 != nil:
    section.add "accountId", valid_402657096
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657097 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657097 = validateParameter(valid_402657097, JString,
                                      required = false, default = nil)
  if valid_402657097 != nil:
    section.add "X-Amz-Security-Token", valid_402657097
  var valid_402657098 = header.getOrDefault("X-Amz-Signature")
  valid_402657098 = validateParameter(valid_402657098, JString,
                                      required = false, default = nil)
  if valid_402657098 != nil:
    section.add "X-Amz-Signature", valid_402657098
  var valid_402657099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657099 = validateParameter(valid_402657099, JString,
                                      required = false, default = nil)
  if valid_402657099 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657099
  var valid_402657100 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657100 = validateParameter(valid_402657100, JString,
                                      required = false, default = nil)
  if valid_402657100 != nil:
    section.add "X-Amz-Algorithm", valid_402657100
  var valid_402657101 = header.getOrDefault("X-Amz-Date")
  valid_402657101 = validateParameter(valid_402657101, JString,
                                      required = false, default = nil)
  if valid_402657101 != nil:
    section.add "X-Amz-Date", valid_402657101
  var valid_402657102 = header.getOrDefault("X-Amz-Credential")
  valid_402657102 = validateParameter(valid_402657102, JString,
                                      required = false, default = nil)
  if valid_402657102 != nil:
    section.add "X-Amz-Credential", valid_402657102
  var valid_402657103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657103 = validateParameter(valid_402657103, JString,
                                      required = false, default = nil)
  if valid_402657103 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657103
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657104: Call_GetEventsConfiguration_402657092;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. 
                                                                                         ## 
  let valid = call_402657104.validator(path, query, header, formData, body, _)
  let scheme = call_402657104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657104.makeUrl(scheme.get, call_402657104.host, call_402657104.base,
                                   call_402657104.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657104, uri, valid, _)

proc call*(call_402657105: Call_GetEventsConfiguration_402657092; botId: string;
           accountId: string): Recallable =
  ## getEventsConfiguration
  ## Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. 
  ##   
                                                                                                                                              ## botId: string (required)
                                                                                                                                              ##        
                                                                                                                                              ## : 
                                                                                                                                              ## The 
                                                                                                                                              ## bot 
                                                                                                                                              ## ID.
  ##   
                                                                                                                                                    ## accountId: string (required)
                                                                                                                                                    ##            
                                                                                                                                                    ## : 
                                                                                                                                                    ## The 
                                                                                                                                                    ## Amazon 
                                                                                                                                                    ## Chime 
                                                                                                                                                    ## account 
                                                                                                                                                    ## ID.
  var path_402657106 = newJObject()
  add(path_402657106, "botId", newJString(botId))
  add(path_402657106, "accountId", newJString(accountId))
  result = call_402657105.call(path_402657106, nil, nil, nil, nil)

var getEventsConfiguration* = Call_GetEventsConfiguration_402657092(
    name: "getEventsConfiguration", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/bots/{botId}/events-configuration",
    validator: validate_GetEventsConfiguration_402657093, base: "/",
    makeUrl: url_GetEventsConfiguration_402657094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteEventsConfiguration_402657124 = ref object of OpenApiRestCall_402656044
proc url_DeleteEventsConfiguration_402657126(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId"),
                 (kind: ConstantSegment, value: "/events-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteEventsConfiguration_402657125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the events configuration that allows a bot to receive outgoing events.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657127 = path.getOrDefault("botId")
  valid_402657127 = validateParameter(valid_402657127, JString, required = true,
                                      default = nil)
  if valid_402657127 != nil:
    section.add "botId", valid_402657127
  var valid_402657128 = path.getOrDefault("accountId")
  valid_402657128 = validateParameter(valid_402657128, JString, required = true,
                                      default = nil)
  if valid_402657128 != nil:
    section.add "accountId", valid_402657128
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657129 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657129 = validateParameter(valid_402657129, JString,
                                      required = false, default = nil)
  if valid_402657129 != nil:
    section.add "X-Amz-Security-Token", valid_402657129
  var valid_402657130 = header.getOrDefault("X-Amz-Signature")
  valid_402657130 = validateParameter(valid_402657130, JString,
                                      required = false, default = nil)
  if valid_402657130 != nil:
    section.add "X-Amz-Signature", valid_402657130
  var valid_402657131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657131 = validateParameter(valid_402657131, JString,
                                      required = false, default = nil)
  if valid_402657131 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657131
  var valid_402657132 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657132 = validateParameter(valid_402657132, JString,
                                      required = false, default = nil)
  if valid_402657132 != nil:
    section.add "X-Amz-Algorithm", valid_402657132
  var valid_402657133 = header.getOrDefault("X-Amz-Date")
  valid_402657133 = validateParameter(valid_402657133, JString,
                                      required = false, default = nil)
  if valid_402657133 != nil:
    section.add "X-Amz-Date", valid_402657133
  var valid_402657134 = header.getOrDefault("X-Amz-Credential")
  valid_402657134 = validateParameter(valid_402657134, JString,
                                      required = false, default = nil)
  if valid_402657134 != nil:
    section.add "X-Amz-Credential", valid_402657134
  var valid_402657135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657135 = validateParameter(valid_402657135, JString,
                                      required = false, default = nil)
  if valid_402657135 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657136: Call_DeleteEventsConfiguration_402657124;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the events configuration that allows a bot to receive outgoing events.
                                                                                         ## 
  let valid = call_402657136.validator(path, query, header, formData, body, _)
  let scheme = call_402657136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657136.makeUrl(scheme.get, call_402657136.host, call_402657136.base,
                                   call_402657136.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657136, uri, valid, _)

proc call*(call_402657137: Call_DeleteEventsConfiguration_402657124;
           botId: string; accountId: string): Recallable =
  ## deleteEventsConfiguration
  ## Deletes the events configuration that allows a bot to receive outgoing events.
  ##   
                                                                                   ## botId: string (required)
                                                                                   ##        
                                                                                   ## : 
                                                                                   ## The 
                                                                                   ## bot 
                                                                                   ## ID.
  ##   
                                                                                         ## accountId: string (required)
                                                                                         ##            
                                                                                         ## : 
                                                                                         ## The 
                                                                                         ## Amazon 
                                                                                         ## Chime 
                                                                                         ## account 
                                                                                         ## ID.
  var path_402657138 = newJObject()
  add(path_402657138, "botId", newJString(botId))
  add(path_402657138, "accountId", newJString(accountId))
  result = call_402657137.call(path_402657138, nil, nil, nil, nil)

var deleteEventsConfiguration* = Call_DeleteEventsConfiguration_402657124(
    name: "deleteEventsConfiguration", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/bots/{botId}/events-configuration",
    validator: validate_DeleteEventsConfiguration_402657125, base: "/",
    makeUrl: url_DeleteEventsConfiguration_402657126,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetMeeting_402657139 = ref object of OpenApiRestCall_402656044
proc url_GetMeeting_402657141(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetMeeting_402657140(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402657142 = path.getOrDefault("meetingId")
  valid_402657142 = validateParameter(valid_402657142, JString, required = true,
                                      default = nil)
  if valid_402657142 != nil:
    section.add "meetingId", valid_402657142
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657143 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657143 = validateParameter(valid_402657143, JString,
                                      required = false, default = nil)
  if valid_402657143 != nil:
    section.add "X-Amz-Security-Token", valid_402657143
  var valid_402657144 = header.getOrDefault("X-Amz-Signature")
  valid_402657144 = validateParameter(valid_402657144, JString,
                                      required = false, default = nil)
  if valid_402657144 != nil:
    section.add "X-Amz-Signature", valid_402657144
  var valid_402657145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657145 = validateParameter(valid_402657145, JString,
                                      required = false, default = nil)
  if valid_402657145 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657145
  var valid_402657146 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657146 = validateParameter(valid_402657146, JString,
                                      required = false, default = nil)
  if valid_402657146 != nil:
    section.add "X-Amz-Algorithm", valid_402657146
  var valid_402657147 = header.getOrDefault("X-Amz-Date")
  valid_402657147 = validateParameter(valid_402657147, JString,
                                      required = false, default = nil)
  if valid_402657147 != nil:
    section.add "X-Amz-Date", valid_402657147
  var valid_402657148 = header.getOrDefault("X-Amz-Credential")
  valid_402657148 = validateParameter(valid_402657148, JString,
                                      required = false, default = nil)
  if valid_402657148 != nil:
    section.add "X-Amz-Credential", valid_402657148
  var valid_402657149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657149 = validateParameter(valid_402657149, JString,
                                      required = false, default = nil)
  if valid_402657149 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657149
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657150: Call_GetMeeting_402657139; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402657150.validator(path, query, header, formData, body, _)
  let scheme = call_402657150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657150.makeUrl(scheme.get, call_402657150.host, call_402657150.base,
                                   call_402657150.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657150, uri, valid, _)

proc call*(call_402657151: Call_GetMeeting_402657139; meetingId: string): Recallable =
  ## getMeeting
  ## Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                    ## meetingId: string (required)
                                                                                                                                                                                                                                                                                    ##            
                                                                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                                                                    ## Amazon 
                                                                                                                                                                                                                                                                                    ## Chime 
                                                                                                                                                                                                                                                                                    ## SDK 
                                                                                                                                                                                                                                                                                    ## meeting 
                                                                                                                                                                                                                                                                                    ## ID.
  var path_402657152 = newJObject()
  add(path_402657152, "meetingId", newJString(meetingId))
  result = call_402657151.call(path_402657152, nil, nil, nil, nil)

var getMeeting* = Call_GetMeeting_402657139(name: "getMeeting",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}", validator: validate_GetMeeting_402657140,
    base: "/", makeUrl: url_GetMeeting_402657141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteMeeting_402657153 = ref object of OpenApiRestCall_402656044
proc url_DeleteMeeting_402657155(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "meetingId" in path, "`meetingId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/meetings/"),
                 (kind: VariableSegment, value: "meetingId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteMeeting_402657154(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   meetingId: JString (required)
                                 ##            : The Amazon Chime SDK meeting ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `meetingId` field"
  var valid_402657156 = path.getOrDefault("meetingId")
  valid_402657156 = validateParameter(valid_402657156, JString, required = true,
                                      default = nil)
  if valid_402657156 != nil:
    section.add "meetingId", valid_402657156
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657157 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657157 = validateParameter(valid_402657157, JString,
                                      required = false, default = nil)
  if valid_402657157 != nil:
    section.add "X-Amz-Security-Token", valid_402657157
  var valid_402657158 = header.getOrDefault("X-Amz-Signature")
  valid_402657158 = validateParameter(valid_402657158, JString,
                                      required = false, default = nil)
  if valid_402657158 != nil:
    section.add "X-Amz-Signature", valid_402657158
  var valid_402657159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657159 = validateParameter(valid_402657159, JString,
                                      required = false, default = nil)
  if valid_402657159 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657159
  var valid_402657160 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657160 = validateParameter(valid_402657160, JString,
                                      required = false, default = nil)
  if valid_402657160 != nil:
    section.add "X-Amz-Algorithm", valid_402657160
  var valid_402657161 = header.getOrDefault("X-Amz-Date")
  valid_402657161 = validateParameter(valid_402657161, JString,
                                      required = false, default = nil)
  if valid_402657161 != nil:
    section.add "X-Amz-Date", valid_402657161
  var valid_402657162 = header.getOrDefault("X-Amz-Credential")
  valid_402657162 = validateParameter(valid_402657162, JString,
                                      required = false, default = nil)
  if valid_402657162 != nil:
    section.add "X-Amz-Credential", valid_402657162
  var valid_402657163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657163 = validateParameter(valid_402657163, JString,
                                      required = false, default = nil)
  if valid_402657163 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657163
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657164: Call_DeleteMeeting_402657153; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
                                                                                         ## 
  let valid = call_402657164.validator(path, query, header, formData, body, _)
  let scheme = call_402657164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657164.makeUrl(scheme.get, call_402657164.host, call_402657164.base,
                                   call_402657164.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657164, uri, valid, _)

proc call*(call_402657165: Call_DeleteMeeting_402657153; meetingId: string): Recallable =
  ## deleteMeeting
  ## Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                                                                         ## meetingId: string (required)
                                                                                                                                                                                                                                                                                                                                                         ##            
                                                                                                                                                                                                                                                                                                                                                         ## : 
                                                                                                                                                                                                                                                                                                                                                         ## The 
                                                                                                                                                                                                                                                                                                                                                         ## Amazon 
                                                                                                                                                                                                                                                                                                                                                         ## Chime 
                                                                                                                                                                                                                                                                                                                                                         ## SDK 
                                                                                                                                                                                                                                                                                                                                                         ## meeting 
                                                                                                                                                                                                                                                                                                                                                         ## ID.
  var path_402657166 = newJObject()
  add(path_402657166, "meetingId", newJString(meetingId))
  result = call_402657165.call(path_402657166, nil, nil, nil, nil)

var deleteMeeting* = Call_DeleteMeeting_402657153(name: "deleteMeeting",
    meth: HttpMethod.HttpDelete, host: "chime.amazonaws.com",
    route: "/meetings/{meetingId}", validator: validate_DeleteMeeting_402657154,
    base: "/", makeUrl: url_DeleteMeeting_402657155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdatePhoneNumber_402657181 = ref object of OpenApiRestCall_402656044
proc url_UpdatePhoneNumber_402657183(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "phoneNumberId" in path, "`phoneNumberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/phone-numbers/"),
                 (kind: VariableSegment, value: "phoneNumberId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdatePhoneNumber_402657182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   phoneNumberId: JString (required)
                                 ##                : The phone number ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `phoneNumberId` field"
  var valid_402657184 = path.getOrDefault("phoneNumberId")
  valid_402657184 = validateParameter(valid_402657184, JString, required = true,
                                      default = nil)
  if valid_402657184 != nil:
    section.add "phoneNumberId", valid_402657184
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657185 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657185 = validateParameter(valid_402657185, JString,
                                      required = false, default = nil)
  if valid_402657185 != nil:
    section.add "X-Amz-Security-Token", valid_402657185
  var valid_402657186 = header.getOrDefault("X-Amz-Signature")
  valid_402657186 = validateParameter(valid_402657186, JString,
                                      required = false, default = nil)
  if valid_402657186 != nil:
    section.add "X-Amz-Signature", valid_402657186
  var valid_402657187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657187 = validateParameter(valid_402657187, JString,
                                      required = false, default = nil)
  if valid_402657187 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657187
  var valid_402657188 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657188 = validateParameter(valid_402657188, JString,
                                      required = false, default = nil)
  if valid_402657188 != nil:
    section.add "X-Amz-Algorithm", valid_402657188
  var valid_402657189 = header.getOrDefault("X-Amz-Date")
  valid_402657189 = validateParameter(valid_402657189, JString,
                                      required = false, default = nil)
  if valid_402657189 != nil:
    section.add "X-Amz-Date", valid_402657189
  var valid_402657190 = header.getOrDefault("X-Amz-Credential")
  valid_402657190 = validateParameter(valid_402657190, JString,
                                      required = false, default = nil)
  if valid_402657190 != nil:
    section.add "X-Amz-Credential", valid_402657190
  var valid_402657191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657191 = validateParameter(valid_402657191, JString,
                                      required = false, default = nil)
  if valid_402657191 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657191
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657193: Call_UpdatePhoneNumber_402657181;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
                                                                                         ## 
  let valid = call_402657193.validator(path, query, header, formData, body, _)
  let scheme = call_402657193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657193.makeUrl(scheme.get, call_402657193.host, call_402657193.base,
                                   call_402657193.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657193, uri, valid, _)

proc call*(call_402657194: Call_UpdatePhoneNumber_402657181; body: JsonNode;
           phoneNumberId: string): Recallable =
  ## updatePhoneNumber
  ## <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
  ##   
body: JObject (required)
  ##   
phoneNumberId: string (required)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ## : 
he 
phone 
number 

  var path_402657195 = newJObject()
  var body_402657196 = newJObject()
  if body != nil:
    body_402657196 = body
  add(path_402657195, "phoneNumberId", newJString(phoneNumberId))
  result = call_402657194.call(path_402657195, nil, nil, nil, body_402657196)

var updatePhoneNumber* = Call_UpdatePhoneNumber_402657181(
    name: "updatePhoneNumber", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/phone-numbers/{phoneNumberId}",
    validator: validate_UpdatePhoneNumber_402657182, base: "/",
    makeUrl: url_UpdatePhoneNumber_402657183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPhoneNumber_402657167 = ref object of OpenApiRestCall_402656044
proc url_GetPhoneNumber_402657169(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "phoneNumberId" in path, "`phoneNumberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/phone-numbers/"),
                 (kind: VariableSegment, value: "phoneNumberId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPhoneNumber_402657168(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   phoneNumberId: JString (required)
                                 ##                : The phone number ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `phoneNumberId` field"
  var valid_402657170 = path.getOrDefault("phoneNumberId")
  valid_402657170 = validateParameter(valid_402657170, JString, required = true,
                                      default = nil)
  if valid_402657170 != nil:
    section.add "phoneNumberId", valid_402657170
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657171 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657171 = validateParameter(valid_402657171, JString,
                                      required = false, default = nil)
  if valid_402657171 != nil:
    section.add "X-Amz-Security-Token", valid_402657171
  var valid_402657172 = header.getOrDefault("X-Amz-Signature")
  valid_402657172 = validateParameter(valid_402657172, JString,
                                      required = false, default = nil)
  if valid_402657172 != nil:
    section.add "X-Amz-Signature", valid_402657172
  var valid_402657173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657173 = validateParameter(valid_402657173, JString,
                                      required = false, default = nil)
  if valid_402657173 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657173
  var valid_402657174 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657174 = validateParameter(valid_402657174, JString,
                                      required = false, default = nil)
  if valid_402657174 != nil:
    section.add "X-Amz-Algorithm", valid_402657174
  var valid_402657175 = header.getOrDefault("X-Amz-Date")
  valid_402657175 = validateParameter(valid_402657175, JString,
                                      required = false, default = nil)
  if valid_402657175 != nil:
    section.add "X-Amz-Date", valid_402657175
  var valid_402657176 = header.getOrDefault("X-Amz-Credential")
  valid_402657176 = validateParameter(valid_402657176, JString,
                                      required = false, default = nil)
  if valid_402657176 != nil:
    section.add "X-Amz-Credential", valid_402657176
  var valid_402657177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657177 = validateParameter(valid_402657177, JString,
                                      required = false, default = nil)
  if valid_402657177 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657178: Call_GetPhoneNumber_402657167; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
                                                                                         ## 
  let valid = call_402657178.validator(path, query, header, formData, body, _)
  let scheme = call_402657178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657178.makeUrl(scheme.get, call_402657178.host, call_402657178.base,
                                   call_402657178.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657178, uri, valid, _)

proc call*(call_402657179: Call_GetPhoneNumber_402657167; phoneNumberId: string): Recallable =
  ## getPhoneNumber
  ## Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
  ##   
                                                                                                               ## phoneNumberId: string (required)
                                                                                                               ##                
                                                                                                               ## : 
                                                                                                               ## The 
                                                                                                               ## phone 
                                                                                                               ## number 
                                                                                                               ## ID.
  var path_402657180 = newJObject()
  add(path_402657180, "phoneNumberId", newJString(phoneNumberId))
  result = call_402657179.call(path_402657180, nil, nil, nil, nil)

var getPhoneNumber* = Call_GetPhoneNumber_402657167(name: "getPhoneNumber",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/phone-numbers/{phoneNumberId}", validator: validate_GetPhoneNumber_402657168,
    base: "/", makeUrl: url_GetPhoneNumber_402657169,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeletePhoneNumber_402657197 = ref object of OpenApiRestCall_402656044
proc url_DeletePhoneNumber_402657199(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "phoneNumberId" in path, "`phoneNumberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/phone-numbers/"),
                 (kind: VariableSegment, value: "phoneNumberId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeletePhoneNumber_402657198(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   phoneNumberId: JString (required)
                                 ##                : The phone number ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `phoneNumberId` field"
  var valid_402657200 = path.getOrDefault("phoneNumberId")
  valid_402657200 = validateParameter(valid_402657200, JString, required = true,
                                      default = nil)
  if valid_402657200 != nil:
    section.add "phoneNumberId", valid_402657200
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657201 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657201 = validateParameter(valid_402657201, JString,
                                      required = false, default = nil)
  if valid_402657201 != nil:
    section.add "X-Amz-Security-Token", valid_402657201
  var valid_402657202 = header.getOrDefault("X-Amz-Signature")
  valid_402657202 = validateParameter(valid_402657202, JString,
                                      required = false, default = nil)
  if valid_402657202 != nil:
    section.add "X-Amz-Signature", valid_402657202
  var valid_402657203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657203 = validateParameter(valid_402657203, JString,
                                      required = false, default = nil)
  if valid_402657203 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657203
  var valid_402657204 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657204 = validateParameter(valid_402657204, JString,
                                      required = false, default = nil)
  if valid_402657204 != nil:
    section.add "X-Amz-Algorithm", valid_402657204
  var valid_402657205 = header.getOrDefault("X-Amz-Date")
  valid_402657205 = validateParameter(valid_402657205, JString,
                                      required = false, default = nil)
  if valid_402657205 != nil:
    section.add "X-Amz-Date", valid_402657205
  var valid_402657206 = header.getOrDefault("X-Amz-Credential")
  valid_402657206 = validateParameter(valid_402657206, JString,
                                      required = false, default = nil)
  if valid_402657206 != nil:
    section.add "X-Amz-Credential", valid_402657206
  var valid_402657207 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657207 = validateParameter(valid_402657207, JString,
                                      required = false, default = nil)
  if valid_402657207 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657208: Call_DeletePhoneNumber_402657197;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
                                                                                         ## 
  let valid = call_402657208.validator(path, query, header, formData, body, _)
  let scheme = call_402657208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657208.makeUrl(scheme.get, call_402657208.host, call_402657208.base,
                                   call_402657208.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657208, uri, valid, _)

proc call*(call_402657209: Call_DeletePhoneNumber_402657197;
           phoneNumberId: string): Recallable =
  ## deletePhoneNumber
  ## <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
  ##   
                                                                                                                                                                                                                                                                                                            ## phoneNumberId: string (required)
                                                                                                                                                                                                                                                                                                            ##                
                                                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                                                            ## phone 
                                                                                                                                                                                                                                                                                                            ## number 
                                                                                                                                                                                                                                                                                                            ## ID.
  var path_402657210 = newJObject()
  add(path_402657210, "phoneNumberId", newJString(phoneNumberId))
  result = call_402657209.call(path_402657210, nil, nil, nil, nil)

var deletePhoneNumber* = Call_DeletePhoneNumber_402657197(
    name: "deletePhoneNumber", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com", route: "/phone-numbers/{phoneNumberId}",
    validator: validate_DeletePhoneNumber_402657198, base: "/",
    makeUrl: url_DeletePhoneNumber_402657199,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRoom_402657226 = ref object of OpenApiRestCall_402656044
proc url_UpdateRoom_402657228(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRoom_402657227(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The room ID.
  ##   accountId: JString (required)
                                                          ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402657229 = path.getOrDefault("roomId")
  valid_402657229 = validateParameter(valid_402657229, JString, required = true,
                                      default = nil)
  if valid_402657229 != nil:
    section.add "roomId", valid_402657229
  var valid_402657230 = path.getOrDefault("accountId")
  valid_402657230 = validateParameter(valid_402657230, JString, required = true,
                                      default = nil)
  if valid_402657230 != nil:
    section.add "accountId", valid_402657230
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657231 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657231 = validateParameter(valid_402657231, JString,
                                      required = false, default = nil)
  if valid_402657231 != nil:
    section.add "X-Amz-Security-Token", valid_402657231
  var valid_402657232 = header.getOrDefault("X-Amz-Signature")
  valid_402657232 = validateParameter(valid_402657232, JString,
                                      required = false, default = nil)
  if valid_402657232 != nil:
    section.add "X-Amz-Signature", valid_402657232
  var valid_402657233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657233 = validateParameter(valid_402657233, JString,
                                      required = false, default = nil)
  if valid_402657233 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657233
  var valid_402657234 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657234 = validateParameter(valid_402657234, JString,
                                      required = false, default = nil)
  if valid_402657234 != nil:
    section.add "X-Amz-Algorithm", valid_402657234
  var valid_402657235 = header.getOrDefault("X-Amz-Date")
  valid_402657235 = validateParameter(valid_402657235, JString,
                                      required = false, default = nil)
  if valid_402657235 != nil:
    section.add "X-Amz-Date", valid_402657235
  var valid_402657236 = header.getOrDefault("X-Amz-Credential")
  valid_402657236 = validateParameter(valid_402657236, JString,
                                      required = false, default = nil)
  if valid_402657236 != nil:
    section.add "X-Amz-Credential", valid_402657236
  var valid_402657237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657237 = validateParameter(valid_402657237, JString,
                                      required = false, default = nil)
  if valid_402657237 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657237
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657239: Call_UpdateRoom_402657226; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402657239.validator(path, query, header, formData, body, _)
  let scheme = call_402657239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657239.makeUrl(scheme.get, call_402657239.host, call_402657239.base,
                                   call_402657239.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657239, uri, valid, _)

proc call*(call_402657240: Call_UpdateRoom_402657226; roomId: string;
           body: JsonNode; accountId: string): Recallable =
  ## updateRoom
  ## Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
  ##   
                                                                                                   ## roomId: string (required)
                                                                                                   ##         
                                                                                                   ## : 
                                                                                                   ## The 
                                                                                                   ## room 
                                                                                                   ## ID.
  ##   
                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                    ## accountId: string (required)
                                                                                                                                    ##            
                                                                                                                                    ## : 
                                                                                                                                    ## The 
                                                                                                                                    ## Amazon 
                                                                                                                                    ## Chime 
                                                                                                                                    ## account 
                                                                                                                                    ## ID.
  var path_402657241 = newJObject()
  var body_402657242 = newJObject()
  add(path_402657241, "roomId", newJString(roomId))
  if body != nil:
    body_402657242 = body
  add(path_402657241, "accountId", newJString(accountId))
  result = call_402657240.call(path_402657241, nil, nil, nil, body_402657242)

var updateRoom* = Call_UpdateRoom_402657226(name: "updateRoom",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}",
    validator: validate_UpdateRoom_402657227, base: "/",
    makeUrl: url_UpdateRoom_402657228, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRoom_402657211 = ref object of OpenApiRestCall_402656044
proc url_GetRoom_402657213(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetRoom_402657212(path: JsonNode; query: JsonNode;
                                header: JsonNode; formData: JsonNode;
                                body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The room ID.
  ##   accountId: JString (required)
                                                          ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402657214 = path.getOrDefault("roomId")
  valid_402657214 = validateParameter(valid_402657214, JString, required = true,
                                      default = nil)
  if valid_402657214 != nil:
    section.add "roomId", valid_402657214
  var valid_402657215 = path.getOrDefault("accountId")
  valid_402657215 = validateParameter(valid_402657215, JString, required = true,
                                      default = nil)
  if valid_402657215 != nil:
    section.add "accountId", valid_402657215
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657216 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657216 = validateParameter(valid_402657216, JString,
                                      required = false, default = nil)
  if valid_402657216 != nil:
    section.add "X-Amz-Security-Token", valid_402657216
  var valid_402657217 = header.getOrDefault("X-Amz-Signature")
  valid_402657217 = validateParameter(valid_402657217, JString,
                                      required = false, default = nil)
  if valid_402657217 != nil:
    section.add "X-Amz-Signature", valid_402657217
  var valid_402657218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657218 = validateParameter(valid_402657218, JString,
                                      required = false, default = nil)
  if valid_402657218 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657218
  var valid_402657219 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657219 = validateParameter(valid_402657219, JString,
                                      required = false, default = nil)
  if valid_402657219 != nil:
    section.add "X-Amz-Algorithm", valid_402657219
  var valid_402657220 = header.getOrDefault("X-Amz-Date")
  valid_402657220 = validateParameter(valid_402657220, JString,
                                      required = false, default = nil)
  if valid_402657220 != nil:
    section.add "X-Amz-Date", valid_402657220
  var valid_402657221 = header.getOrDefault("X-Amz-Credential")
  valid_402657221 = validateParameter(valid_402657221, JString,
                                      required = false, default = nil)
  if valid_402657221 != nil:
    section.add "X-Amz-Credential", valid_402657221
  var valid_402657222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657222 = validateParameter(valid_402657222, JString,
                                      required = false, default = nil)
  if valid_402657222 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657223: Call_GetRoom_402657211; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402657223.validator(path, query, header, formData, body, _)
  let scheme = call_402657223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657223.makeUrl(scheme.get, call_402657223.host, call_402657223.base,
                                   call_402657223.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657223, uri, valid, _)

proc call*(call_402657224: Call_GetRoom_402657211; roomId: string;
           accountId: string): Recallable =
  ## getRoom
  ## Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
  ##   
                                                                                                     ## roomId: string (required)
                                                                                                     ##         
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## room 
                                                                                                     ## ID.
  ##   
                                                                                                           ## accountId: string (required)
                                                                                                           ##            
                                                                                                           ## : 
                                                                                                           ## The 
                                                                                                           ## Amazon 
                                                                                                           ## Chime 
                                                                                                           ## account 
                                                                                                           ## ID.
  var path_402657225 = newJObject()
  add(path_402657225, "roomId", newJString(roomId))
  add(path_402657225, "accountId", newJString(accountId))
  result = call_402657224.call(path_402657225, nil, nil, nil, nil)

var getRoom* = Call_GetRoom_402657211(name: "getRoom", meth: HttpMethod.HttpGet,
                                      host: "chime.amazonaws.com", route: "/accounts/{accountId}/rooms/{roomId}",
                                      validator: validate_GetRoom_402657212,
                                      base: "/", makeUrl: url_GetRoom_402657213,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRoom_402657243 = ref object of OpenApiRestCall_402656044
proc url_DeleteRoom_402657245(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRoom_402657244(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a chat room in an Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   roomId: JString (required)
                                 ##         : The chat room ID.
  ##   accountId: JString (required)
                                                               ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `roomId` field"
  var valid_402657246 = path.getOrDefault("roomId")
  valid_402657246 = validateParameter(valid_402657246, JString, required = true,
                                      default = nil)
  if valid_402657246 != nil:
    section.add "roomId", valid_402657246
  var valid_402657247 = path.getOrDefault("accountId")
  valid_402657247 = validateParameter(valid_402657247, JString, required = true,
                                      default = nil)
  if valid_402657247 != nil:
    section.add "accountId", valid_402657247
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657248 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657248 = validateParameter(valid_402657248, JString,
                                      required = false, default = nil)
  if valid_402657248 != nil:
    section.add "X-Amz-Security-Token", valid_402657248
  var valid_402657249 = header.getOrDefault("X-Amz-Signature")
  valid_402657249 = validateParameter(valid_402657249, JString,
                                      required = false, default = nil)
  if valid_402657249 != nil:
    section.add "X-Amz-Signature", valid_402657249
  var valid_402657250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657250 = validateParameter(valid_402657250, JString,
                                      required = false, default = nil)
  if valid_402657250 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657250
  var valid_402657251 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657251 = validateParameter(valid_402657251, JString,
                                      required = false, default = nil)
  if valid_402657251 != nil:
    section.add "X-Amz-Algorithm", valid_402657251
  var valid_402657252 = header.getOrDefault("X-Amz-Date")
  valid_402657252 = validateParameter(valid_402657252, JString,
                                      required = false, default = nil)
  if valid_402657252 != nil:
    section.add "X-Amz-Date", valid_402657252
  var valid_402657253 = header.getOrDefault("X-Amz-Credential")
  valid_402657253 = validateParameter(valid_402657253, JString,
                                      required = false, default = nil)
  if valid_402657253 != nil:
    section.add "X-Amz-Credential", valid_402657253
  var valid_402657254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657254 = validateParameter(valid_402657254, JString,
                                      required = false, default = nil)
  if valid_402657254 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657255: Call_DeleteRoom_402657243; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a chat room in an Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402657255.validator(path, query, header, formData, body, _)
  let scheme = call_402657255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657255.makeUrl(scheme.get, call_402657255.host, call_402657255.base,
                                   call_402657255.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657255, uri, valid, _)

proc call*(call_402657256: Call_DeleteRoom_402657243; roomId: string;
           accountId: string): Recallable =
  ## deleteRoom
  ## Deletes a chat room in an Amazon Chime Enterprise account.
  ##   roomId: string (required)
                                                               ##         : The chat room ID.
  ##   
                                                                                             ## accountId: string (required)
                                                                                             ##            
                                                                                             ## : 
                                                                                             ## The 
                                                                                             ## Amazon 
                                                                                             ## Chime 
                                                                                             ## account 
                                                                                             ## ID.
  var path_402657257 = newJObject()
  add(path_402657257, "roomId", newJString(roomId))
  add(path_402657257, "accountId", newJString(accountId))
  result = call_402657256.call(path_402657257, nil, nil, nil, nil)

var deleteRoom* = Call_DeleteRoom_402657243(name: "deleteRoom",
    meth: HttpMethod.HttpDelete, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}",
    validator: validate_DeleteRoom_402657244, base: "/",
    makeUrl: url_DeleteRoom_402657245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateRoomMembership_402657258 = ref object of OpenApiRestCall_402656044
proc url_UpdateRoomMembership_402657260(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  assert "memberId" in path, "`memberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId"),
                 (kind: ConstantSegment, value: "/memberships/"),
                 (kind: VariableSegment, value: "memberId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateRoomMembership_402657259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   memberId: JString (required)
                                 ##           : The member ID.
  ##   roomId: JString (required)
                                                              ##         : The room ID.
  ##   
                                                                                       ## accountId: JString (required)
                                                                                       ##            
                                                                                       ## : 
                                                                                       ## The 
                                                                                       ## Amazon 
                                                                                       ## Chime 
                                                                                       ## account 
                                                                                       ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `memberId` field"
  var valid_402657261 = path.getOrDefault("memberId")
  valid_402657261 = validateParameter(valid_402657261, JString, required = true,
                                      default = nil)
  if valid_402657261 != nil:
    section.add "memberId", valid_402657261
  var valid_402657262 = path.getOrDefault("roomId")
  valid_402657262 = validateParameter(valid_402657262, JString, required = true,
                                      default = nil)
  if valid_402657262 != nil:
    section.add "roomId", valid_402657262
  var valid_402657263 = path.getOrDefault("accountId")
  valid_402657263 = validateParameter(valid_402657263, JString, required = true,
                                      default = nil)
  if valid_402657263 != nil:
    section.add "accountId", valid_402657263
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657264 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657264 = validateParameter(valid_402657264, JString,
                                      required = false, default = nil)
  if valid_402657264 != nil:
    section.add "X-Amz-Security-Token", valid_402657264
  var valid_402657265 = header.getOrDefault("X-Amz-Signature")
  valid_402657265 = validateParameter(valid_402657265, JString,
                                      required = false, default = nil)
  if valid_402657265 != nil:
    section.add "X-Amz-Signature", valid_402657265
  var valid_402657266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657266 = validateParameter(valid_402657266, JString,
                                      required = false, default = nil)
  if valid_402657266 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657266
  var valid_402657267 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657267 = validateParameter(valid_402657267, JString,
                                      required = false, default = nil)
  if valid_402657267 != nil:
    section.add "X-Amz-Algorithm", valid_402657267
  var valid_402657268 = header.getOrDefault("X-Amz-Date")
  valid_402657268 = validateParameter(valid_402657268, JString,
                                      required = false, default = nil)
  if valid_402657268 != nil:
    section.add "X-Amz-Date", valid_402657268
  var valid_402657269 = header.getOrDefault("X-Amz-Credential")
  valid_402657269 = validateParameter(valid_402657269, JString,
                                      required = false, default = nil)
  if valid_402657269 != nil:
    section.add "X-Amz-Credential", valid_402657269
  var valid_402657270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657270 = validateParameter(valid_402657270, JString,
                                      required = false, default = nil)
  if valid_402657270 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657272: Call_UpdateRoomMembership_402657258;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
                                                                                         ## 
  let valid = call_402657272.validator(path, query, header, formData, body, _)
  let scheme = call_402657272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657272.makeUrl(scheme.get, call_402657272.host, call_402657272.base,
                                   call_402657272.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657272, uri, valid, _)

proc call*(call_402657273: Call_UpdateRoomMembership_402657258;
           memberId: string; roomId: string; body: JsonNode; accountId: string): Recallable =
  ## updateRoomMembership
  ## Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
  ##   
                                                                                                                                                                                                                                                                            ## memberId: string (required)
                                                                                                                                                                                                                                                                            ##           
                                                                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                                                                            ## member 
                                                                                                                                                                                                                                                                            ## ID.
  ##   
                                                                                                                                                                                                                                                                                  ## roomId: string (required)
                                                                                                                                                                                                                                                                                  ##         
                                                                                                                                                                                                                                                                                  ## : 
                                                                                                                                                                                                                                                                                  ## The 
                                                                                                                                                                                                                                                                                  ## room 
                                                                                                                                                                                                                                                                                  ## ID.
  ##   
                                                                                                                                                                                                                                                                                        ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                   ## accountId: string (required)
                                                                                                                                                                                                                                                                                                                   ##            
                                                                                                                                                                                                                                                                                                                   ## : 
                                                                                                                                                                                                                                                                                                                   ## The 
                                                                                                                                                                                                                                                                                                                   ## Amazon 
                                                                                                                                                                                                                                                                                                                   ## Chime 
                                                                                                                                                                                                                                                                                                                   ## account 
                                                                                                                                                                                                                                                                                                                   ## ID.
  var path_402657274 = newJObject()
  var body_402657275 = newJObject()
  add(path_402657274, "memberId", newJString(memberId))
  add(path_402657274, "roomId", newJString(roomId))
  if body != nil:
    body_402657275 = body
  add(path_402657274, "accountId", newJString(accountId))
  result = call_402657273.call(path_402657274, nil, nil, nil, body_402657275)

var updateRoomMembership* = Call_UpdateRoomMembership_402657258(
    name: "updateRoomMembership", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
    validator: validate_UpdateRoomMembership_402657259, base: "/",
    makeUrl: url_UpdateRoomMembership_402657260,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteRoomMembership_402657276 = ref object of OpenApiRestCall_402656044
proc url_DeleteRoomMembership_402657278(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "roomId" in path, "`roomId` is a required path parameter"
  assert "memberId" in path, "`memberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/rooms/"),
                 (kind: VariableSegment, value: "roomId"),
                 (kind: ConstantSegment, value: "/memberships/"),
                 (kind: VariableSegment, value: "memberId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteRoomMembership_402657277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes a member from a chat room in an Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   memberId: JString (required)
                                 ##           : The member ID (user ID or bot ID).
  ##   
                                                                                  ## roomId: JString (required)
                                                                                  ##         
                                                                                  ## : 
                                                                                  ## The 
                                                                                  ## room 
                                                                                  ## ID.
  ##   
                                                                                        ## accountId: JString (required)
                                                                                        ##            
                                                                                        ## : 
                                                                                        ## The 
                                                                                        ## Amazon 
                                                                                        ## Chime 
                                                                                        ## account 
                                                                                        ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `memberId` field"
  var valid_402657279 = path.getOrDefault("memberId")
  valid_402657279 = validateParameter(valid_402657279, JString, required = true,
                                      default = nil)
  if valid_402657279 != nil:
    section.add "memberId", valid_402657279
  var valid_402657280 = path.getOrDefault("roomId")
  valid_402657280 = validateParameter(valid_402657280, JString, required = true,
                                      default = nil)
  if valid_402657280 != nil:
    section.add "roomId", valid_402657280
  var valid_402657281 = path.getOrDefault("accountId")
  valid_402657281 = validateParameter(valid_402657281, JString, required = true,
                                      default = nil)
  if valid_402657281 != nil:
    section.add "accountId", valid_402657281
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657282 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657282 = validateParameter(valid_402657282, JString,
                                      required = false, default = nil)
  if valid_402657282 != nil:
    section.add "X-Amz-Security-Token", valid_402657282
  var valid_402657283 = header.getOrDefault("X-Amz-Signature")
  valid_402657283 = validateParameter(valid_402657283, JString,
                                      required = false, default = nil)
  if valid_402657283 != nil:
    section.add "X-Amz-Signature", valid_402657283
  var valid_402657284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657284 = validateParameter(valid_402657284, JString,
                                      required = false, default = nil)
  if valid_402657284 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657284
  var valid_402657285 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657285 = validateParameter(valid_402657285, JString,
                                      required = false, default = nil)
  if valid_402657285 != nil:
    section.add "X-Amz-Algorithm", valid_402657285
  var valid_402657286 = header.getOrDefault("X-Amz-Date")
  valid_402657286 = validateParameter(valid_402657286, JString,
                                      required = false, default = nil)
  if valid_402657286 != nil:
    section.add "X-Amz-Date", valid_402657286
  var valid_402657287 = header.getOrDefault("X-Amz-Credential")
  valid_402657287 = validateParameter(valid_402657287, JString,
                                      required = false, default = nil)
  if valid_402657287 != nil:
    section.add "X-Amz-Credential", valid_402657287
  var valid_402657288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657288 = validateParameter(valid_402657288, JString,
                                      required = false, default = nil)
  if valid_402657288 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657289: Call_DeleteRoomMembership_402657276;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a member from a chat room in an Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402657289.validator(path, query, header, formData, body, _)
  let scheme = call_402657289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657289.makeUrl(scheme.get, call_402657289.host, call_402657289.base,
                                   call_402657289.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657289, uri, valid, _)

proc call*(call_402657290: Call_DeleteRoomMembership_402657276;
           memberId: string; roomId: string; accountId: string): Recallable =
  ## deleteRoomMembership
  ## Removes a member from a chat room in an Amazon Chime Enterprise account.
  ##   
                                                                             ## memberId: string (required)
                                                                             ##           
                                                                             ## : 
                                                                             ## The 
                                                                             ## member 
                                                                             ## ID 
                                                                             ## (user 
                                                                             ## ID 
                                                                             ## or 
                                                                             ## bot 
                                                                             ## ID).
  ##   
                                                                                    ## roomId: string (required)
                                                                                    ##         
                                                                                    ## : 
                                                                                    ## The 
                                                                                    ## room 
                                                                                    ## ID.
  ##   
                                                                                          ## accountId: string (required)
                                                                                          ##            
                                                                                          ## : 
                                                                                          ## The 
                                                                                          ## Amazon 
                                                                                          ## Chime 
                                                                                          ## account 
                                                                                          ## ID.
  var path_402657291 = newJObject()
  add(path_402657291, "memberId", newJString(memberId))
  add(path_402657291, "roomId", newJString(roomId))
  add(path_402657291, "accountId", newJString(accountId))
  result = call_402657290.call(path_402657291, nil, nil, nil, nil)

var deleteRoomMembership* = Call_DeleteRoomMembership_402657276(
    name: "deleteRoomMembership", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
    validator: validate_DeleteRoomMembership_402657277, base: "/",
    makeUrl: url_DeleteRoomMembership_402657278,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateVoiceConnector_402657306 = ref object of OpenApiRestCall_402656044
proc url_UpdateVoiceConnector_402657308(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateVoiceConnector_402657307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates details for the specified Amazon Chime Voice Connector.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657309 = path.getOrDefault("voiceConnectorId")
  valid_402657309 = validateParameter(valid_402657309, JString, required = true,
                                      default = nil)
  if valid_402657309 != nil:
    section.add "voiceConnectorId", valid_402657309
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657310 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657310 = validateParameter(valid_402657310, JString,
                                      required = false, default = nil)
  if valid_402657310 != nil:
    section.add "X-Amz-Security-Token", valid_402657310
  var valid_402657311 = header.getOrDefault("X-Amz-Signature")
  valid_402657311 = validateParameter(valid_402657311, JString,
                                      required = false, default = nil)
  if valid_402657311 != nil:
    section.add "X-Amz-Signature", valid_402657311
  var valid_402657312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657312 = validateParameter(valid_402657312, JString,
                                      required = false, default = nil)
  if valid_402657312 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657312
  var valid_402657313 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657313 = validateParameter(valid_402657313, JString,
                                      required = false, default = nil)
  if valid_402657313 != nil:
    section.add "X-Amz-Algorithm", valid_402657313
  var valid_402657314 = header.getOrDefault("X-Amz-Date")
  valid_402657314 = validateParameter(valid_402657314, JString,
                                      required = false, default = nil)
  if valid_402657314 != nil:
    section.add "X-Amz-Date", valid_402657314
  var valid_402657315 = header.getOrDefault("X-Amz-Credential")
  valid_402657315 = validateParameter(valid_402657315, JString,
                                      required = false, default = nil)
  if valid_402657315 != nil:
    section.add "X-Amz-Credential", valid_402657315
  var valid_402657316 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657316 = validateParameter(valid_402657316, JString,
                                      required = false, default = nil)
  if valid_402657316 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657316
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657318: Call_UpdateVoiceConnector_402657306;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates details for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657318.validator(path, query, header, formData, body, _)
  let scheme = call_402657318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657318.makeUrl(scheme.get, call_402657318.host, call_402657318.base,
                                   call_402657318.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657318, uri, valid, _)

proc call*(call_402657319: Call_UpdateVoiceConnector_402657306; body: JsonNode;
           voiceConnectorId: string): Recallable =
  ## updateVoiceConnector
  ## Updates details for the specified Amazon Chime Voice Connector.
  ##   body: JObject (required)
  ##   voiceConnectorId: string (required)
                               ##                   : The Amazon Chime Voice Connector ID.
  var path_402657320 = newJObject()
  var body_402657321 = newJObject()
  if body != nil:
    body_402657321 = body
  add(path_402657320, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657319.call(path_402657320, nil, nil, nil, body_402657321)

var updateVoiceConnector* = Call_UpdateVoiceConnector_402657306(
    name: "updateVoiceConnector", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}",
    validator: validate_UpdateVoiceConnector_402657307, base: "/",
    makeUrl: url_UpdateVoiceConnector_402657308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnector_402657292 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnector_402657294(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnector_402657293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657295 = path.getOrDefault("voiceConnectorId")
  valid_402657295 = validateParameter(valid_402657295, JString, required = true,
                                      default = nil)
  if valid_402657295 != nil:
    section.add "voiceConnectorId", valid_402657295
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657296 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657296 = validateParameter(valid_402657296, JString,
                                      required = false, default = nil)
  if valid_402657296 != nil:
    section.add "X-Amz-Security-Token", valid_402657296
  var valid_402657297 = header.getOrDefault("X-Amz-Signature")
  valid_402657297 = validateParameter(valid_402657297, JString,
                                      required = false, default = nil)
  if valid_402657297 != nil:
    section.add "X-Amz-Signature", valid_402657297
  var valid_402657298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657298 = validateParameter(valid_402657298, JString,
                                      required = false, default = nil)
  if valid_402657298 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657298
  var valid_402657299 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657299 = validateParameter(valid_402657299, JString,
                                      required = false, default = nil)
  if valid_402657299 != nil:
    section.add "X-Amz-Algorithm", valid_402657299
  var valid_402657300 = header.getOrDefault("X-Amz-Date")
  valid_402657300 = validateParameter(valid_402657300, JString,
                                      required = false, default = nil)
  if valid_402657300 != nil:
    section.add "X-Amz-Date", valid_402657300
  var valid_402657301 = header.getOrDefault("X-Amz-Credential")
  valid_402657301 = validateParameter(valid_402657301, JString,
                                      required = false, default = nil)
  if valid_402657301 != nil:
    section.add "X-Amz-Credential", valid_402657301
  var valid_402657302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657302 = validateParameter(valid_402657302, JString,
                                      required = false, default = nil)
  if valid_402657302 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657303: Call_GetVoiceConnector_402657292;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.
                                                                                         ## 
  let valid = call_402657303.validator(path, query, header, formData, body, _)
  let scheme = call_402657303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657303.makeUrl(scheme.get, call_402657303.host, call_402657303.base,
                                   call_402657303.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657303, uri, valid, _)

proc call*(call_402657304: Call_GetVoiceConnector_402657292;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnector
  ## Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.
  ##   
                                                                                                                                            ## voiceConnectorId: string (required)
                                                                                                                                            ##                   
                                                                                                                                            ## : 
                                                                                                                                            ## The 
                                                                                                                                            ## Amazon 
                                                                                                                                            ## Chime 
                                                                                                                                            ## Voice 
                                                                                                                                            ## Connector 
                                                                                                                                            ## ID.
  var path_402657305 = newJObject()
  add(path_402657305, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657304.call(path_402657305, nil, nil, nil, nil)

var getVoiceConnector* = Call_GetVoiceConnector_402657292(
    name: "getVoiceConnector", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}",
    validator: validate_GetVoiceConnector_402657293, base: "/",
    makeUrl: url_GetVoiceConnector_402657294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnector_402657322 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnector_402657324(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnector_402657323(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657325 = path.getOrDefault("voiceConnectorId")
  valid_402657325 = validateParameter(valid_402657325, JString, required = true,
                                      default = nil)
  if valid_402657325 != nil:
    section.add "voiceConnectorId", valid_402657325
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657326 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657326 = validateParameter(valid_402657326, JString,
                                      required = false, default = nil)
  if valid_402657326 != nil:
    section.add "X-Amz-Security-Token", valid_402657326
  var valid_402657327 = header.getOrDefault("X-Amz-Signature")
  valid_402657327 = validateParameter(valid_402657327, JString,
                                      required = false, default = nil)
  if valid_402657327 != nil:
    section.add "X-Amz-Signature", valid_402657327
  var valid_402657328 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657328 = validateParameter(valid_402657328, JString,
                                      required = false, default = nil)
  if valid_402657328 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657328
  var valid_402657329 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657329 = validateParameter(valid_402657329, JString,
                                      required = false, default = nil)
  if valid_402657329 != nil:
    section.add "X-Amz-Algorithm", valid_402657329
  var valid_402657330 = header.getOrDefault("X-Amz-Date")
  valid_402657330 = validateParameter(valid_402657330, JString,
                                      required = false, default = nil)
  if valid_402657330 != nil:
    section.add "X-Amz-Date", valid_402657330
  var valid_402657331 = header.getOrDefault("X-Amz-Credential")
  valid_402657331 = validateParameter(valid_402657331, JString,
                                      required = false, default = nil)
  if valid_402657331 != nil:
    section.add "X-Amz-Credential", valid_402657331
  var valid_402657332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657332 = validateParameter(valid_402657332, JString,
                                      required = false, default = nil)
  if valid_402657332 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657332
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657333: Call_DeleteVoiceConnector_402657322;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.
                                                                                         ## 
  let valid = call_402657333.validator(path, query, header, formData, body, _)
  let scheme = call_402657333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657333.makeUrl(scheme.get, call_402657333.host, call_402657333.base,
                                   call_402657333.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657333, uri, valid, _)

proc call*(call_402657334: Call_DeleteVoiceConnector_402657322;
           voiceConnectorId: string): Recallable =
  ## deleteVoiceConnector
  ## Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.
  ##   
                                                                                                                                                                                   ## voiceConnectorId: string (required)
                                                                                                                                                                                   ##                   
                                                                                                                                                                                   ## : 
                                                                                                                                                                                   ## The 
                                                                                                                                                                                   ## Amazon 
                                                                                                                                                                                   ## Chime 
                                                                                                                                                                                   ## Voice 
                                                                                                                                                                                   ## Connector 
                                                                                                                                                                                   ## ID.
  var path_402657335 = newJObject()
  add(path_402657335, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657334.call(path_402657335, nil, nil, nil, nil)

var deleteVoiceConnector* = Call_DeleteVoiceConnector_402657322(
    name: "deleteVoiceConnector", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}",
    validator: validate_DeleteVoiceConnector_402657323, base: "/",
    makeUrl: url_DeleteVoiceConnector_402657324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateVoiceConnectorGroup_402657350 = ref object of OpenApiRestCall_402656044
proc url_UpdateVoiceConnectorGroup_402657352(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorGroupId" in path,
         "`voiceConnectorGroupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connector-groups/"),
                 (kind: VariableSegment, value: "voiceConnectorGroupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateVoiceConnectorGroup_402657351(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorGroupId: JString (required)
                                 ##                        : The Amazon Chime Voice Connector group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `voiceConnectorGroupId` field"
  var valid_402657353 = path.getOrDefault("voiceConnectorGroupId")
  valid_402657353 = validateParameter(valid_402657353, JString, required = true,
                                      default = nil)
  if valid_402657353 != nil:
    section.add "voiceConnectorGroupId", valid_402657353
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657354 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657354 = validateParameter(valid_402657354, JString,
                                      required = false, default = nil)
  if valid_402657354 != nil:
    section.add "X-Amz-Security-Token", valid_402657354
  var valid_402657355 = header.getOrDefault("X-Amz-Signature")
  valid_402657355 = validateParameter(valid_402657355, JString,
                                      required = false, default = nil)
  if valid_402657355 != nil:
    section.add "X-Amz-Signature", valid_402657355
  var valid_402657356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657356 = validateParameter(valid_402657356, JString,
                                      required = false, default = nil)
  if valid_402657356 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657356
  var valid_402657357 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657357 = validateParameter(valid_402657357, JString,
                                      required = false, default = nil)
  if valid_402657357 != nil:
    section.add "X-Amz-Algorithm", valid_402657357
  var valid_402657358 = header.getOrDefault("X-Amz-Date")
  valid_402657358 = validateParameter(valid_402657358, JString,
                                      required = false, default = nil)
  if valid_402657358 != nil:
    section.add "X-Amz-Date", valid_402657358
  var valid_402657359 = header.getOrDefault("X-Amz-Credential")
  valid_402657359 = validateParameter(valid_402657359, JString,
                                      required = false, default = nil)
  if valid_402657359 != nil:
    section.add "X-Amz-Credential", valid_402657359
  var valid_402657360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657360 = validateParameter(valid_402657360, JString,
                                      required = false, default = nil)
  if valid_402657360 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657360
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657362: Call_UpdateVoiceConnectorGroup_402657350;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.
                                                                                         ## 
  let valid = call_402657362.validator(path, query, header, formData, body, _)
  let scheme = call_402657362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657362.makeUrl(scheme.get, call_402657362.host, call_402657362.base,
                                   call_402657362.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657362, uri, valid, _)

proc call*(call_402657363: Call_UpdateVoiceConnectorGroup_402657350;
           voiceConnectorGroupId: string; body: JsonNode): Recallable =
  ## updateVoiceConnectorGroup
  ## Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.
  ##   
                                                                                                                                              ## voiceConnectorGroupId: string (required)
                                                                                                                                              ##                        
                                                                                                                                              ## : 
                                                                                                                                              ## The 
                                                                                                                                              ## Amazon 
                                                                                                                                              ## Chime 
                                                                                                                                              ## Voice 
                                                                                                                                              ## Connector 
                                                                                                                                              ## group 
                                                                                                                                              ## ID.
  ##   
                                                                                                                                                    ## body: JObject (required)
  var path_402657364 = newJObject()
  var body_402657365 = newJObject()
  add(path_402657364, "voiceConnectorGroupId", newJString(voiceConnectorGroupId))
  if body != nil:
    body_402657365 = body
  result = call_402657363.call(path_402657364, nil, nil, nil, body_402657365)

var updateVoiceConnectorGroup* = Call_UpdateVoiceConnectorGroup_402657350(
    name: "updateVoiceConnectorGroup", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/voice-connector-groups/{voiceConnectorGroupId}",
    validator: validate_UpdateVoiceConnectorGroup_402657351, base: "/",
    makeUrl: url_UpdateVoiceConnectorGroup_402657352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorGroup_402657336 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorGroup_402657338(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorGroupId" in path,
         "`voiceConnectorGroupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connector-groups/"),
                 (kind: VariableSegment, value: "voiceConnectorGroupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorGroup_402657337(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated <code>VoiceConnectorItems</code>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorGroupId: JString (required)
                                 ##                        : The Amazon Chime Voice Connector group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `voiceConnectorGroupId` field"
  var valid_402657339 = path.getOrDefault("voiceConnectorGroupId")
  valid_402657339 = validateParameter(valid_402657339, JString, required = true,
                                      default = nil)
  if valid_402657339 != nil:
    section.add "voiceConnectorGroupId", valid_402657339
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657340 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657340 = validateParameter(valid_402657340, JString,
                                      required = false, default = nil)
  if valid_402657340 != nil:
    section.add "X-Amz-Security-Token", valid_402657340
  var valid_402657341 = header.getOrDefault("X-Amz-Signature")
  valid_402657341 = validateParameter(valid_402657341, JString,
                                      required = false, default = nil)
  if valid_402657341 != nil:
    section.add "X-Amz-Signature", valid_402657341
  var valid_402657342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657342 = validateParameter(valid_402657342, JString,
                                      required = false, default = nil)
  if valid_402657342 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657342
  var valid_402657343 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657343 = validateParameter(valid_402657343, JString,
                                      required = false, default = nil)
  if valid_402657343 != nil:
    section.add "X-Amz-Algorithm", valid_402657343
  var valid_402657344 = header.getOrDefault("X-Amz-Date")
  valid_402657344 = validateParameter(valid_402657344, JString,
                                      required = false, default = nil)
  if valid_402657344 != nil:
    section.add "X-Amz-Date", valid_402657344
  var valid_402657345 = header.getOrDefault("X-Amz-Credential")
  valid_402657345 = validateParameter(valid_402657345, JString,
                                      required = false, default = nil)
  if valid_402657345 != nil:
    section.add "X-Amz-Credential", valid_402657345
  var valid_402657346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657346 = validateParameter(valid_402657346, JString,
                                      required = false, default = nil)
  if valid_402657346 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657347: Call_GetVoiceConnectorGroup_402657336;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated <code>VoiceConnectorItems</code>.
                                                                                         ## 
  let valid = call_402657347.validator(path, query, header, formData, body, _)
  let scheme = call_402657347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657347.makeUrl(scheme.get, call_402657347.host, call_402657347.base,
                                   call_402657347.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657347, uri, valid, _)

proc call*(call_402657348: Call_GetVoiceConnectorGroup_402657336;
           voiceConnectorGroupId: string): Recallable =
  ## getVoiceConnectorGroup
  ## Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated <code>VoiceConnectorItems</code>.
  ##   
                                                                                                                                                       ## voiceConnectorGroupId: string (required)
                                                                                                                                                       ##                        
                                                                                                                                                       ## : 
                                                                                                                                                       ## The 
                                                                                                                                                       ## Amazon 
                                                                                                                                                       ## Chime 
                                                                                                                                                       ## Voice 
                                                                                                                                                       ## Connector 
                                                                                                                                                       ## group 
                                                                                                                                                       ## ID.
  var path_402657349 = newJObject()
  add(path_402657349, "voiceConnectorGroupId", newJString(voiceConnectorGroupId))
  result = call_402657348.call(path_402657349, nil, nil, nil, nil)

var getVoiceConnectorGroup* = Call_GetVoiceConnectorGroup_402657336(
    name: "getVoiceConnectorGroup", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connector-groups/{voiceConnectorGroupId}",
    validator: validate_GetVoiceConnectorGroup_402657337, base: "/",
    makeUrl: url_GetVoiceConnectorGroup_402657338,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnectorGroup_402657366 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnectorGroup_402657368(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorGroupId" in path,
         "`voiceConnectorGroupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connector-groups/"),
                 (kind: VariableSegment, value: "voiceConnectorGroupId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnectorGroup_402657367(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified Amazon Chime Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorGroupId: JString (required)
                                 ##                        : The Amazon Chime Voice Connector group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `voiceConnectorGroupId` field"
  var valid_402657369 = path.getOrDefault("voiceConnectorGroupId")
  valid_402657369 = validateParameter(valid_402657369, JString, required = true,
                                      default = nil)
  if valid_402657369 != nil:
    section.add "voiceConnectorGroupId", valid_402657369
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657370 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657370 = validateParameter(valid_402657370, JString,
                                      required = false, default = nil)
  if valid_402657370 != nil:
    section.add "X-Amz-Security-Token", valid_402657370
  var valid_402657371 = header.getOrDefault("X-Amz-Signature")
  valid_402657371 = validateParameter(valid_402657371, JString,
                                      required = false, default = nil)
  if valid_402657371 != nil:
    section.add "X-Amz-Signature", valid_402657371
  var valid_402657372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657372 = validateParameter(valid_402657372, JString,
                                      required = false, default = nil)
  if valid_402657372 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657372
  var valid_402657373 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657373 = validateParameter(valid_402657373, JString,
                                      required = false, default = nil)
  if valid_402657373 != nil:
    section.add "X-Amz-Algorithm", valid_402657373
  var valid_402657374 = header.getOrDefault("X-Amz-Date")
  valid_402657374 = validateParameter(valid_402657374, JString,
                                      required = false, default = nil)
  if valid_402657374 != nil:
    section.add "X-Amz-Date", valid_402657374
  var valid_402657375 = header.getOrDefault("X-Amz-Credential")
  valid_402657375 = validateParameter(valid_402657375, JString,
                                      required = false, default = nil)
  if valid_402657375 != nil:
    section.add "X-Amz-Credential", valid_402657375
  var valid_402657376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657376 = validateParameter(valid_402657376, JString,
                                      required = false, default = nil)
  if valid_402657376 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657377: Call_DeleteVoiceConnectorGroup_402657366;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified Amazon Chime Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted.
                                                                                         ## 
  let valid = call_402657377.validator(path, query, header, formData, body, _)
  let scheme = call_402657377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657377.makeUrl(scheme.get, call_402657377.host, call_402657377.base,
                                   call_402657377.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657377, uri, valid, _)

proc call*(call_402657378: Call_DeleteVoiceConnectorGroup_402657366;
           voiceConnectorGroupId: string): Recallable =
  ## deleteVoiceConnectorGroup
  ## Deletes the specified Amazon Chime Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted.
  ##   
                                                                                                                                                                                         ## voiceConnectorGroupId: string (required)
                                                                                                                                                                                         ##                        
                                                                                                                                                                                         ## : 
                                                                                                                                                                                         ## The 
                                                                                                                                                                                         ## Amazon 
                                                                                                                                                                                         ## Chime 
                                                                                                                                                                                         ## Voice 
                                                                                                                                                                                         ## Connector 
                                                                                                                                                                                         ## group 
                                                                                                                                                                                         ## ID.
  var path_402657379 = newJObject()
  add(path_402657379, "voiceConnectorGroupId", newJString(voiceConnectorGroupId))
  result = call_402657378.call(path_402657379, nil, nil, nil, nil)

var deleteVoiceConnectorGroup* = Call_DeleteVoiceConnectorGroup_402657366(
    name: "deleteVoiceConnectorGroup", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com",
    route: "/voice-connector-groups/{voiceConnectorGroupId}",
    validator: validate_DeleteVoiceConnectorGroup_402657367, base: "/",
    makeUrl: url_DeleteVoiceConnectorGroup_402657368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutVoiceConnectorOrigination_402657394 = ref object of OpenApiRestCall_402656044
proc url_PutVoiceConnectorOrigination_402657396(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/origination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutVoiceConnectorOrigination_402657395(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds origination settings for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657397 = path.getOrDefault("voiceConnectorId")
  valid_402657397 = validateParameter(valid_402657397, JString, required = true,
                                      default = nil)
  if valid_402657397 != nil:
    section.add "voiceConnectorId", valid_402657397
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657398 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657398 = validateParameter(valid_402657398, JString,
                                      required = false, default = nil)
  if valid_402657398 != nil:
    section.add "X-Amz-Security-Token", valid_402657398
  var valid_402657399 = header.getOrDefault("X-Amz-Signature")
  valid_402657399 = validateParameter(valid_402657399, JString,
                                      required = false, default = nil)
  if valid_402657399 != nil:
    section.add "X-Amz-Signature", valid_402657399
  var valid_402657400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657400 = validateParameter(valid_402657400, JString,
                                      required = false, default = nil)
  if valid_402657400 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657400
  var valid_402657401 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657401 = validateParameter(valid_402657401, JString,
                                      required = false, default = nil)
  if valid_402657401 != nil:
    section.add "X-Amz-Algorithm", valid_402657401
  var valid_402657402 = header.getOrDefault("X-Amz-Date")
  valid_402657402 = validateParameter(valid_402657402, JString,
                                      required = false, default = nil)
  if valid_402657402 != nil:
    section.add "X-Amz-Date", valid_402657402
  var valid_402657403 = header.getOrDefault("X-Amz-Credential")
  valid_402657403 = validateParameter(valid_402657403, JString,
                                      required = false, default = nil)
  if valid_402657403 != nil:
    section.add "X-Amz-Credential", valid_402657403
  var valid_402657404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657404 = validateParameter(valid_402657404, JString,
                                      required = false, default = nil)
  if valid_402657404 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657406: Call_PutVoiceConnectorOrigination_402657394;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds origination settings for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657406.validator(path, query, header, formData, body, _)
  let scheme = call_402657406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657406.makeUrl(scheme.get, call_402657406.host, call_402657406.base,
                                   call_402657406.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657406, uri, valid, _)

proc call*(call_402657407: Call_PutVoiceConnectorOrigination_402657394;
           body: JsonNode; voiceConnectorId: string): Recallable =
  ## putVoiceConnectorOrigination
  ## Adds origination settings for the specified Amazon Chime Voice Connector.
  ##   
                                                                              ## body: JObject (required)
  ##   
                                                                                                         ## voiceConnectorId: string (required)
                                                                                                         ##                   
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## Amazon 
                                                                                                         ## Chime 
                                                                                                         ## Voice 
                                                                                                         ## Connector 
                                                                                                         ## ID.
  var path_402657408 = newJObject()
  var body_402657409 = newJObject()
  if body != nil:
    body_402657409 = body
  add(path_402657408, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657407.call(path_402657408, nil, nil, nil, body_402657409)

var putVoiceConnectorOrigination* = Call_PutVoiceConnectorOrigination_402657394(
    name: "putVoiceConnectorOrigination", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/origination",
    validator: validate_PutVoiceConnectorOrigination_402657395, base: "/",
    makeUrl: url_PutVoiceConnectorOrigination_402657396,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorOrigination_402657380 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorOrigination_402657382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/origination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorOrigination_402657381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves origination setting details for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657383 = path.getOrDefault("voiceConnectorId")
  valid_402657383 = validateParameter(valid_402657383, JString, required = true,
                                      default = nil)
  if valid_402657383 != nil:
    section.add "voiceConnectorId", valid_402657383
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657384 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657384 = validateParameter(valid_402657384, JString,
                                      required = false, default = nil)
  if valid_402657384 != nil:
    section.add "X-Amz-Security-Token", valid_402657384
  var valid_402657385 = header.getOrDefault("X-Amz-Signature")
  valid_402657385 = validateParameter(valid_402657385, JString,
                                      required = false, default = nil)
  if valid_402657385 != nil:
    section.add "X-Amz-Signature", valid_402657385
  var valid_402657386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657386 = validateParameter(valid_402657386, JString,
                                      required = false, default = nil)
  if valid_402657386 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657386
  var valid_402657387 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657387 = validateParameter(valid_402657387, JString,
                                      required = false, default = nil)
  if valid_402657387 != nil:
    section.add "X-Amz-Algorithm", valid_402657387
  var valid_402657388 = header.getOrDefault("X-Amz-Date")
  valid_402657388 = validateParameter(valid_402657388, JString,
                                      required = false, default = nil)
  if valid_402657388 != nil:
    section.add "X-Amz-Date", valid_402657388
  var valid_402657389 = header.getOrDefault("X-Amz-Credential")
  valid_402657389 = validateParameter(valid_402657389, JString,
                                      required = false, default = nil)
  if valid_402657389 != nil:
    section.add "X-Amz-Credential", valid_402657389
  var valid_402657390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657390 = validateParameter(valid_402657390, JString,
                                      required = false, default = nil)
  if valid_402657390 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657390
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657391: Call_GetVoiceConnectorOrigination_402657380;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves origination setting details for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657391.validator(path, query, header, formData, body, _)
  let scheme = call_402657391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657391.makeUrl(scheme.get, call_402657391.host, call_402657391.base,
                                   call_402657391.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657391, uri, valid, _)

proc call*(call_402657392: Call_GetVoiceConnectorOrigination_402657380;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnectorOrigination
  ## Retrieves origination setting details for the specified Amazon Chime Voice Connector.
  ##   
                                                                                          ## voiceConnectorId: string (required)
                                                                                          ##                   
                                                                                          ## : 
                                                                                          ## The 
                                                                                          ## Amazon 
                                                                                          ## Chime 
                                                                                          ## Voice 
                                                                                          ## Connector 
                                                                                          ## ID.
  var path_402657393 = newJObject()
  add(path_402657393, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657392.call(path_402657393, nil, nil, nil, nil)

var getVoiceConnectorOrigination* = Call_GetVoiceConnectorOrigination_402657380(
    name: "getVoiceConnectorOrigination", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/origination",
    validator: validate_GetVoiceConnectorOrigination_402657381, base: "/",
    makeUrl: url_GetVoiceConnectorOrigination_402657382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnectorOrigination_402657410 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnectorOrigination_402657412(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/origination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnectorOrigination_402657411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the origination settings for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657413 = path.getOrDefault("voiceConnectorId")
  valid_402657413 = validateParameter(valid_402657413, JString, required = true,
                                      default = nil)
  if valid_402657413 != nil:
    section.add "voiceConnectorId", valid_402657413
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657414 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657414 = validateParameter(valid_402657414, JString,
                                      required = false, default = nil)
  if valid_402657414 != nil:
    section.add "X-Amz-Security-Token", valid_402657414
  var valid_402657415 = header.getOrDefault("X-Amz-Signature")
  valid_402657415 = validateParameter(valid_402657415, JString,
                                      required = false, default = nil)
  if valid_402657415 != nil:
    section.add "X-Amz-Signature", valid_402657415
  var valid_402657416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657416 = validateParameter(valid_402657416, JString,
                                      required = false, default = nil)
  if valid_402657416 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657416
  var valid_402657417 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657417 = validateParameter(valid_402657417, JString,
                                      required = false, default = nil)
  if valid_402657417 != nil:
    section.add "X-Amz-Algorithm", valid_402657417
  var valid_402657418 = header.getOrDefault("X-Amz-Date")
  valid_402657418 = validateParameter(valid_402657418, JString,
                                      required = false, default = nil)
  if valid_402657418 != nil:
    section.add "X-Amz-Date", valid_402657418
  var valid_402657419 = header.getOrDefault("X-Amz-Credential")
  valid_402657419 = validateParameter(valid_402657419, JString,
                                      required = false, default = nil)
  if valid_402657419 != nil:
    section.add "X-Amz-Credential", valid_402657419
  var valid_402657420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657420 = validateParameter(valid_402657420, JString,
                                      required = false, default = nil)
  if valid_402657420 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657421: Call_DeleteVoiceConnectorOrigination_402657410;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the origination settings for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657421.validator(path, query, header, formData, body, _)
  let scheme = call_402657421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657421.makeUrl(scheme.get, call_402657421.host, call_402657421.base,
                                   call_402657421.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657421, uri, valid, _)

proc call*(call_402657422: Call_DeleteVoiceConnectorOrigination_402657410;
           voiceConnectorId: string): Recallable =
  ## deleteVoiceConnectorOrigination
  ## Deletes the origination settings for the specified Amazon Chime Voice Connector.
  ##   
                                                                                     ## voiceConnectorId: string (required)
                                                                                     ##                   
                                                                                     ## : 
                                                                                     ## The 
                                                                                     ## Amazon 
                                                                                     ## Chime 
                                                                                     ## Voice 
                                                                                     ## Connector 
                                                                                     ## ID.
  var path_402657423 = newJObject()
  add(path_402657423, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657422.call(path_402657423, nil, nil, nil, nil)

var deleteVoiceConnectorOrigination* = Call_DeleteVoiceConnectorOrigination_402657410(
    name: "deleteVoiceConnectorOrigination", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/origination",
    validator: validate_DeleteVoiceConnectorOrigination_402657411, base: "/",
    makeUrl: url_DeleteVoiceConnectorOrigination_402657412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutVoiceConnectorStreamingConfiguration_402657438 = ref object of OpenApiRestCall_402656044
proc url_PutVoiceConnectorStreamingConfiguration_402657440(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/streaming-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutVoiceConnectorStreamingConfiguration_402657439(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657441 = path.getOrDefault("voiceConnectorId")
  valid_402657441 = validateParameter(valid_402657441, JString, required = true,
                                      default = nil)
  if valid_402657441 != nil:
    section.add "voiceConnectorId", valid_402657441
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657442 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657442 = validateParameter(valid_402657442, JString,
                                      required = false, default = nil)
  if valid_402657442 != nil:
    section.add "X-Amz-Security-Token", valid_402657442
  var valid_402657443 = header.getOrDefault("X-Amz-Signature")
  valid_402657443 = validateParameter(valid_402657443, JString,
                                      required = false, default = nil)
  if valid_402657443 != nil:
    section.add "X-Amz-Signature", valid_402657443
  var valid_402657444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657444 = validateParameter(valid_402657444, JString,
                                      required = false, default = nil)
  if valid_402657444 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657444
  var valid_402657445 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657445 = validateParameter(valid_402657445, JString,
                                      required = false, default = nil)
  if valid_402657445 != nil:
    section.add "X-Amz-Algorithm", valid_402657445
  var valid_402657446 = header.getOrDefault("X-Amz-Date")
  valid_402657446 = validateParameter(valid_402657446, JString,
                                      required = false, default = nil)
  if valid_402657446 != nil:
    section.add "X-Amz-Date", valid_402657446
  var valid_402657447 = header.getOrDefault("X-Amz-Credential")
  valid_402657447 = validateParameter(valid_402657447, JString,
                                      required = false, default = nil)
  if valid_402657447 != nil:
    section.add "X-Amz-Credential", valid_402657447
  var valid_402657448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657448 = validateParameter(valid_402657448, JString,
                                      required = false, default = nil)
  if valid_402657448 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657450: Call_PutVoiceConnectorStreamingConfiguration_402657438;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.
                                                                                         ## 
  let valid = call_402657450.validator(path, query, header, formData, body, _)
  let scheme = call_402657450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657450.makeUrl(scheme.get, call_402657450.host, call_402657450.base,
                                   call_402657450.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657450, uri, valid, _)

proc call*(call_402657451: Call_PutVoiceConnectorStreamingConfiguration_402657438;
           body: JsonNode; voiceConnectorId: string): Recallable =
  ## putVoiceConnectorStreamingConfiguration
  ## Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.
  ##   
                                                                                                                                                                                                                                                                     ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                ## voiceConnectorId: string (required)
                                                                                                                                                                                                                                                                                                ##                   
                                                                                                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                                                                                                ## Amazon 
                                                                                                                                                                                                                                                                                                ## Chime 
                                                                                                                                                                                                                                                                                                ## Voice 
                                                                                                                                                                                                                                                                                                ## Connector 
                                                                                                                                                                                                                                                                                                ## ID.
  var path_402657452 = newJObject()
  var body_402657453 = newJObject()
  if body != nil:
    body_402657453 = body
  add(path_402657452, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657451.call(path_402657452, nil, nil, nil, body_402657453)

var putVoiceConnectorStreamingConfiguration* = Call_PutVoiceConnectorStreamingConfiguration_402657438(
    name: "putVoiceConnectorStreamingConfiguration", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
    validator: validate_PutVoiceConnectorStreamingConfiguration_402657439,
    base: "/", makeUrl: url_PutVoiceConnectorStreamingConfiguration_402657440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorStreamingConfiguration_402657424 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorStreamingConfiguration_402657426(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/streaming-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorStreamingConfiguration_402657425(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657427 = path.getOrDefault("voiceConnectorId")
  valid_402657427 = validateParameter(valid_402657427, JString, required = true,
                                      default = nil)
  if valid_402657427 != nil:
    section.add "voiceConnectorId", valid_402657427
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657428 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657428 = validateParameter(valid_402657428, JString,
                                      required = false, default = nil)
  if valid_402657428 != nil:
    section.add "X-Amz-Security-Token", valid_402657428
  var valid_402657429 = header.getOrDefault("X-Amz-Signature")
  valid_402657429 = validateParameter(valid_402657429, JString,
                                      required = false, default = nil)
  if valid_402657429 != nil:
    section.add "X-Amz-Signature", valid_402657429
  var valid_402657430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657430 = validateParameter(valid_402657430, JString,
                                      required = false, default = nil)
  if valid_402657430 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657430
  var valid_402657431 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657431 = validateParameter(valid_402657431, JString,
                                      required = false, default = nil)
  if valid_402657431 != nil:
    section.add "X-Amz-Algorithm", valid_402657431
  var valid_402657432 = header.getOrDefault("X-Amz-Date")
  valid_402657432 = validateParameter(valid_402657432, JString,
                                      required = false, default = nil)
  if valid_402657432 != nil:
    section.add "X-Amz-Date", valid_402657432
  var valid_402657433 = header.getOrDefault("X-Amz-Credential")
  valid_402657433 = validateParameter(valid_402657433, JString,
                                      required = false, default = nil)
  if valid_402657433 != nil:
    section.add "X-Amz-Credential", valid_402657433
  var valid_402657434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657434 = validateParameter(valid_402657434, JString,
                                      required = false, default = nil)
  if valid_402657434 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657434
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657435: Call_GetVoiceConnectorStreamingConfiguration_402657424;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
                                                                                         ## 
  let valid = call_402657435.validator(path, query, header, formData, body, _)
  let scheme = call_402657435.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657435.makeUrl(scheme.get, call_402657435.host, call_402657435.base,
                                   call_402657435.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657435, uri, valid, _)

proc call*(call_402657436: Call_GetVoiceConnectorStreamingConfiguration_402657424;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnectorStreamingConfiguration
  ## Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
  ##   
                                                                                                                                                                                                                                                     ## voiceConnectorId: string (required)
                                                                                                                                                                                                                                                     ##                   
                                                                                                                                                                                                                                                     ## : 
                                                                                                                                                                                                                                                     ## The 
                                                                                                                                                                                                                                                     ## Amazon 
                                                                                                                                                                                                                                                     ## Chime 
                                                                                                                                                                                                                                                     ## Voice 
                                                                                                                                                                                                                                                     ## Connector 
                                                                                                                                                                                                                                                     ## ID.
  var path_402657437 = newJObject()
  add(path_402657437, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657436.call(path_402657437, nil, nil, nil, nil)

var getVoiceConnectorStreamingConfiguration* = Call_GetVoiceConnectorStreamingConfiguration_402657424(
    name: "getVoiceConnectorStreamingConfiguration", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
    validator: validate_GetVoiceConnectorStreamingConfiguration_402657425,
    base: "/", makeUrl: url_GetVoiceConnectorStreamingConfiguration_402657426,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnectorStreamingConfiguration_402657454 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnectorStreamingConfiguration_402657456(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/streaming-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnectorStreamingConfiguration_402657455(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657457 = path.getOrDefault("voiceConnectorId")
  valid_402657457 = validateParameter(valid_402657457, JString, required = true,
                                      default = nil)
  if valid_402657457 != nil:
    section.add "voiceConnectorId", valid_402657457
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657458 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657458 = validateParameter(valid_402657458, JString,
                                      required = false, default = nil)
  if valid_402657458 != nil:
    section.add "X-Amz-Security-Token", valid_402657458
  var valid_402657459 = header.getOrDefault("X-Amz-Signature")
  valid_402657459 = validateParameter(valid_402657459, JString,
                                      required = false, default = nil)
  if valid_402657459 != nil:
    section.add "X-Amz-Signature", valid_402657459
  var valid_402657460 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657460 = validateParameter(valid_402657460, JString,
                                      required = false, default = nil)
  if valid_402657460 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657460
  var valid_402657461 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657461 = validateParameter(valid_402657461, JString,
                                      required = false, default = nil)
  if valid_402657461 != nil:
    section.add "X-Amz-Algorithm", valid_402657461
  var valid_402657462 = header.getOrDefault("X-Amz-Date")
  valid_402657462 = validateParameter(valid_402657462, JString,
                                      required = false, default = nil)
  if valid_402657462 != nil:
    section.add "X-Amz-Date", valid_402657462
  var valid_402657463 = header.getOrDefault("X-Amz-Credential")
  valid_402657463 = validateParameter(valid_402657463, JString,
                                      required = false, default = nil)
  if valid_402657463 != nil:
    section.add "X-Amz-Credential", valid_402657463
  var valid_402657464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657464 = validateParameter(valid_402657464, JString,
                                      required = false, default = nil)
  if valid_402657464 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657465: Call_DeleteVoiceConnectorStreamingConfiguration_402657454;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657465.validator(path, query, header, formData, body, _)
  let scheme = call_402657465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657465.makeUrl(scheme.get, call_402657465.host, call_402657465.base,
                                   call_402657465.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657465, uri, valid, _)

proc call*(call_402657466: Call_DeleteVoiceConnectorStreamingConfiguration_402657454;
           voiceConnectorId: string): Recallable =
  ## deleteVoiceConnectorStreamingConfiguration
  ## Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
  ##   
                                                                                        ## voiceConnectorId: string (required)
                                                                                        ##                   
                                                                                        ## : 
                                                                                        ## The 
                                                                                        ## Amazon 
                                                                                        ## Chime 
                                                                                        ## Voice 
                                                                                        ## Connector 
                                                                                        ## ID.
  var path_402657467 = newJObject()
  add(path_402657467, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657466.call(path_402657467, nil, nil, nil, nil)

var deleteVoiceConnectorStreamingConfiguration* = Call_DeleteVoiceConnectorStreamingConfiguration_402657454(
    name: "deleteVoiceConnectorStreamingConfiguration",
    meth: HttpMethod.HttpDelete, host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
    validator: validate_DeleteVoiceConnectorStreamingConfiguration_402657455,
    base: "/", makeUrl: url_DeleteVoiceConnectorStreamingConfiguration_402657456,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutVoiceConnectorTermination_402657482 = ref object of OpenApiRestCall_402656044
proc url_PutVoiceConnectorTermination_402657484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/termination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutVoiceConnectorTermination_402657483(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds termination settings for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657485 = path.getOrDefault("voiceConnectorId")
  valid_402657485 = validateParameter(valid_402657485, JString, required = true,
                                      default = nil)
  if valid_402657485 != nil:
    section.add "voiceConnectorId", valid_402657485
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657486 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657486 = validateParameter(valid_402657486, JString,
                                      required = false, default = nil)
  if valid_402657486 != nil:
    section.add "X-Amz-Security-Token", valid_402657486
  var valid_402657487 = header.getOrDefault("X-Amz-Signature")
  valid_402657487 = validateParameter(valid_402657487, JString,
                                      required = false, default = nil)
  if valid_402657487 != nil:
    section.add "X-Amz-Signature", valid_402657487
  var valid_402657488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657488 = validateParameter(valid_402657488, JString,
                                      required = false, default = nil)
  if valid_402657488 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657488
  var valid_402657489 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657489 = validateParameter(valid_402657489, JString,
                                      required = false, default = nil)
  if valid_402657489 != nil:
    section.add "X-Amz-Algorithm", valid_402657489
  var valid_402657490 = header.getOrDefault("X-Amz-Date")
  valid_402657490 = validateParameter(valid_402657490, JString,
                                      required = false, default = nil)
  if valid_402657490 != nil:
    section.add "X-Amz-Date", valid_402657490
  var valid_402657491 = header.getOrDefault("X-Amz-Credential")
  valid_402657491 = validateParameter(valid_402657491, JString,
                                      required = false, default = nil)
  if valid_402657491 != nil:
    section.add "X-Amz-Credential", valid_402657491
  var valid_402657492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657492 = validateParameter(valid_402657492, JString,
                                      required = false, default = nil)
  if valid_402657492 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657494: Call_PutVoiceConnectorTermination_402657482;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds termination settings for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657494.validator(path, query, header, formData, body, _)
  let scheme = call_402657494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657494.makeUrl(scheme.get, call_402657494.host, call_402657494.base,
                                   call_402657494.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657494, uri, valid, _)

proc call*(call_402657495: Call_PutVoiceConnectorTermination_402657482;
           body: JsonNode; voiceConnectorId: string): Recallable =
  ## putVoiceConnectorTermination
  ## Adds termination settings for the specified Amazon Chime Voice Connector.
  ##   
                                                                              ## body: JObject (required)
  ##   
                                                                                                         ## voiceConnectorId: string (required)
                                                                                                         ##                   
                                                                                                         ## : 
                                                                                                         ## The 
                                                                                                         ## Amazon 
                                                                                                         ## Chime 
                                                                                                         ## Voice 
                                                                                                         ## Connector 
                                                                                                         ## ID.
  var path_402657496 = newJObject()
  var body_402657497 = newJObject()
  if body != nil:
    body_402657497 = body
  add(path_402657496, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657495.call(path_402657496, nil, nil, nil, body_402657497)

var putVoiceConnectorTermination* = Call_PutVoiceConnectorTermination_402657482(
    name: "putVoiceConnectorTermination", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/termination",
    validator: validate_PutVoiceConnectorTermination_402657483, base: "/",
    makeUrl: url_PutVoiceConnectorTermination_402657484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorTermination_402657468 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorTermination_402657470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/termination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorTermination_402657469(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves termination setting details for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657471 = path.getOrDefault("voiceConnectorId")
  valid_402657471 = validateParameter(valid_402657471, JString, required = true,
                                      default = nil)
  if valid_402657471 != nil:
    section.add "voiceConnectorId", valid_402657471
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657472 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657472 = validateParameter(valid_402657472, JString,
                                      required = false, default = nil)
  if valid_402657472 != nil:
    section.add "X-Amz-Security-Token", valid_402657472
  var valid_402657473 = header.getOrDefault("X-Amz-Signature")
  valid_402657473 = validateParameter(valid_402657473, JString,
                                      required = false, default = nil)
  if valid_402657473 != nil:
    section.add "X-Amz-Signature", valid_402657473
  var valid_402657474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657474 = validateParameter(valid_402657474, JString,
                                      required = false, default = nil)
  if valid_402657474 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657474
  var valid_402657475 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657475 = validateParameter(valid_402657475, JString,
                                      required = false, default = nil)
  if valid_402657475 != nil:
    section.add "X-Amz-Algorithm", valid_402657475
  var valid_402657476 = header.getOrDefault("X-Amz-Date")
  valid_402657476 = validateParameter(valid_402657476, JString,
                                      required = false, default = nil)
  if valid_402657476 != nil:
    section.add "X-Amz-Date", valid_402657476
  var valid_402657477 = header.getOrDefault("X-Amz-Credential")
  valid_402657477 = validateParameter(valid_402657477, JString,
                                      required = false, default = nil)
  if valid_402657477 != nil:
    section.add "X-Amz-Credential", valid_402657477
  var valid_402657478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657478 = validateParameter(valid_402657478, JString,
                                      required = false, default = nil)
  if valid_402657478 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657479: Call_GetVoiceConnectorTermination_402657468;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves termination setting details for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657479.validator(path, query, header, formData, body, _)
  let scheme = call_402657479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657479.makeUrl(scheme.get, call_402657479.host, call_402657479.base,
                                   call_402657479.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657479, uri, valid, _)

proc call*(call_402657480: Call_GetVoiceConnectorTermination_402657468;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnectorTermination
  ## Retrieves termination setting details for the specified Amazon Chime Voice Connector.
  ##   
                                                                                          ## voiceConnectorId: string (required)
                                                                                          ##                   
                                                                                          ## : 
                                                                                          ## The 
                                                                                          ## Amazon 
                                                                                          ## Chime 
                                                                                          ## Voice 
                                                                                          ## Connector 
                                                                                          ## ID.
  var path_402657481 = newJObject()
  add(path_402657481, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657480.call(path_402657481, nil, nil, nil, nil)

var getVoiceConnectorTermination* = Call_GetVoiceConnectorTermination_402657468(
    name: "getVoiceConnectorTermination", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/termination",
    validator: validate_GetVoiceConnectorTermination_402657469, base: "/",
    makeUrl: url_GetVoiceConnectorTermination_402657470,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnectorTermination_402657498 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnectorTermination_402657500(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/termination")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnectorTermination_402657499(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the termination settings for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657501 = path.getOrDefault("voiceConnectorId")
  valid_402657501 = validateParameter(valid_402657501, JString, required = true,
                                      default = nil)
  if valid_402657501 != nil:
    section.add "voiceConnectorId", valid_402657501
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657502 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657502 = validateParameter(valid_402657502, JString,
                                      required = false, default = nil)
  if valid_402657502 != nil:
    section.add "X-Amz-Security-Token", valid_402657502
  var valid_402657503 = header.getOrDefault("X-Amz-Signature")
  valid_402657503 = validateParameter(valid_402657503, JString,
                                      required = false, default = nil)
  if valid_402657503 != nil:
    section.add "X-Amz-Signature", valid_402657503
  var valid_402657504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657504 = validateParameter(valid_402657504, JString,
                                      required = false, default = nil)
  if valid_402657504 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657504
  var valid_402657505 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657505 = validateParameter(valid_402657505, JString,
                                      required = false, default = nil)
  if valid_402657505 != nil:
    section.add "X-Amz-Algorithm", valid_402657505
  var valid_402657506 = header.getOrDefault("X-Amz-Date")
  valid_402657506 = validateParameter(valid_402657506, JString,
                                      required = false, default = nil)
  if valid_402657506 != nil:
    section.add "X-Amz-Date", valid_402657506
  var valid_402657507 = header.getOrDefault("X-Amz-Credential")
  valid_402657507 = validateParameter(valid_402657507, JString,
                                      required = false, default = nil)
  if valid_402657507 != nil:
    section.add "X-Amz-Credential", valid_402657507
  var valid_402657508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657508 = validateParameter(valid_402657508, JString,
                                      required = false, default = nil)
  if valid_402657508 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657509: Call_DeleteVoiceConnectorTermination_402657498;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the termination settings for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657509.validator(path, query, header, formData, body, _)
  let scheme = call_402657509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657509.makeUrl(scheme.get, call_402657509.host, call_402657509.base,
                                   call_402657509.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657509, uri, valid, _)

proc call*(call_402657510: Call_DeleteVoiceConnectorTermination_402657498;
           voiceConnectorId: string): Recallable =
  ## deleteVoiceConnectorTermination
  ## Deletes the termination settings for the specified Amazon Chime Voice Connector.
  ##   
                                                                                     ## voiceConnectorId: string (required)
                                                                                     ##                   
                                                                                     ## : 
                                                                                     ## The 
                                                                                     ## Amazon 
                                                                                     ## Chime 
                                                                                     ## Voice 
                                                                                     ## Connector 
                                                                                     ## ID.
  var path_402657511 = newJObject()
  add(path_402657511, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657510.call(path_402657511, nil, nil, nil, nil)

var deleteVoiceConnectorTermination* = Call_DeleteVoiceConnectorTermination_402657498(
    name: "deleteVoiceConnectorTermination", meth: HttpMethod.HttpDelete,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/termination",
    validator: validate_DeleteVoiceConnectorTermination_402657499, base: "/",
    makeUrl: url_DeleteVoiceConnectorTermination_402657500,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DeleteVoiceConnectorTerminationCredentials_402657512 = ref object of OpenApiRestCall_402656044
proc url_DeleteVoiceConnectorTerminationCredentials_402657514(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"), (
        kind: ConstantSegment,
        value: "/termination/credentials#operation=delete")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DeleteVoiceConnectorTerminationCredentials_402657513(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657515 = path.getOrDefault("voiceConnectorId")
  valid_402657515 = validateParameter(valid_402657515, JString, required = true,
                                      default = nil)
  if valid_402657515 != nil:
    section.add "voiceConnectorId", valid_402657515
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657516 = query.getOrDefault("operation")
  valid_402657516 = validateParameter(valid_402657516, JString, required = true,
                                      default = newJString("delete"))
  if valid_402657516 != nil:
    section.add "operation", valid_402657516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657517 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657517 = validateParameter(valid_402657517, JString,
                                      required = false, default = nil)
  if valid_402657517 != nil:
    section.add "X-Amz-Security-Token", valid_402657517
  var valid_402657518 = header.getOrDefault("X-Amz-Signature")
  valid_402657518 = validateParameter(valid_402657518, JString,
                                      required = false, default = nil)
  if valid_402657518 != nil:
    section.add "X-Amz-Signature", valid_402657518
  var valid_402657519 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657519 = validateParameter(valid_402657519, JString,
                                      required = false, default = nil)
  if valid_402657519 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657519
  var valid_402657520 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657520 = validateParameter(valid_402657520, JString,
                                      required = false, default = nil)
  if valid_402657520 != nil:
    section.add "X-Amz-Algorithm", valid_402657520
  var valid_402657521 = header.getOrDefault("X-Amz-Date")
  valid_402657521 = validateParameter(valid_402657521, JString,
                                      required = false, default = nil)
  if valid_402657521 != nil:
    section.add "X-Amz-Date", valid_402657521
  var valid_402657522 = header.getOrDefault("X-Amz-Credential")
  valid_402657522 = validateParameter(valid_402657522, JString,
                                      required = false, default = nil)
  if valid_402657522 != nil:
    section.add "X-Amz-Credential", valid_402657522
  var valid_402657523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657523 = validateParameter(valid_402657523, JString,
                                      required = false, default = nil)
  if valid_402657523 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657525: Call_DeleteVoiceConnectorTerminationCredentials_402657512;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
                                                                                         ## 
  let valid = call_402657525.validator(path, query, header, formData, body, _)
  let scheme = call_402657525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657525.makeUrl(scheme.get, call_402657525.host, call_402657525.base,
                                   call_402657525.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657525, uri, valid, _)

proc call*(call_402657526: Call_DeleteVoiceConnectorTerminationCredentials_402657512;
           body: JsonNode; voiceConnectorId: string;
           operation: string = "delete"): Recallable =
  ## deleteVoiceConnectorTerminationCredentials
  ## Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
  ##   
                                                                                                          ## body: JObject (required)
  ##   
                                                                                                                                     ## operation: string (required)
  ##   
                                                                                                                                                                    ## voiceConnectorId: string (required)
                                                                                                                                                                    ##                   
                                                                                                                                                                    ## : 
                                                                                                                                                                    ## The 
                                                                                                                                                                    ## Amazon 
                                                                                                                                                                    ## Chime 
                                                                                                                                                                    ## Voice 
                                                                                                                                                                    ## Connector 
                                                                                                                                                                    ## ID.
  var path_402657527 = newJObject()
  var query_402657528 = newJObject()
  var body_402657529 = newJObject()
  if body != nil:
    body_402657529 = body
  add(query_402657528, "operation", newJString(operation))
  add(path_402657527, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657526.call(path_402657527, query_402657528, nil, nil, body_402657529)

var deleteVoiceConnectorTerminationCredentials* = Call_DeleteVoiceConnectorTerminationCredentials_402657512(
    name: "deleteVoiceConnectorTerminationCredentials",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}/termination/credentials#operation=delete",
    validator: validate_DeleteVoiceConnectorTerminationCredentials_402657513,
    base: "/", makeUrl: url_DeleteVoiceConnectorTerminationCredentials_402657514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisassociatePhoneNumberFromUser_402657530 = ref object of OpenApiRestCall_402656044
proc url_DisassociatePhoneNumberFromUser_402657532(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"), (
        kind: ConstantSegment, value: "#operation=disassociate-phone-number")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisassociatePhoneNumberFromUser_402657531(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Disassociates the primary provisioned phone number from the specified Amazon Chime user.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657533 = path.getOrDefault("accountId")
  valid_402657533 = validateParameter(valid_402657533, JString, required = true,
                                      default = nil)
  if valid_402657533 != nil:
    section.add "accountId", valid_402657533
  var valid_402657534 = path.getOrDefault("userId")
  valid_402657534 = validateParameter(valid_402657534, JString, required = true,
                                      default = nil)
  if valid_402657534 != nil:
    section.add "userId", valid_402657534
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657535 = query.getOrDefault("operation")
  valid_402657535 = validateParameter(valid_402657535, JString, required = true, default = newJString(
      "disassociate-phone-number"))
  if valid_402657535 != nil:
    section.add "operation", valid_402657535
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657536 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657536 = validateParameter(valid_402657536, JString,
                                      required = false, default = nil)
  if valid_402657536 != nil:
    section.add "X-Amz-Security-Token", valid_402657536
  var valid_402657537 = header.getOrDefault("X-Amz-Signature")
  valid_402657537 = validateParameter(valid_402657537, JString,
                                      required = false, default = nil)
  if valid_402657537 != nil:
    section.add "X-Amz-Signature", valid_402657537
  var valid_402657538 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657538 = validateParameter(valid_402657538, JString,
                                      required = false, default = nil)
  if valid_402657538 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657538
  var valid_402657539 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657539 = validateParameter(valid_402657539, JString,
                                      required = false, default = nil)
  if valid_402657539 != nil:
    section.add "X-Amz-Algorithm", valid_402657539
  var valid_402657540 = header.getOrDefault("X-Amz-Date")
  valid_402657540 = validateParameter(valid_402657540, JString,
                                      required = false, default = nil)
  if valid_402657540 != nil:
    section.add "X-Amz-Date", valid_402657540
  var valid_402657541 = header.getOrDefault("X-Amz-Credential")
  valid_402657541 = validateParameter(valid_402657541, JString,
                                      required = false, default = nil)
  if valid_402657541 != nil:
    section.add "X-Amz-Credential", valid_402657541
  var valid_402657542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657542 = validateParameter(valid_402657542, JString,
                                      required = false, default = nil)
  if valid_402657542 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657542
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657543: Call_DisassociatePhoneNumberFromUser_402657530;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates the primary provisioned phone number from the specified Amazon Chime user.
                                                                                         ## 
  let valid = call_402657543.validator(path, query, header, formData, body, _)
  let scheme = call_402657543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657543.makeUrl(scheme.get, call_402657543.host, call_402657543.base,
                                   call_402657543.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657543, uri, valid, _)

proc call*(call_402657544: Call_DisassociatePhoneNumberFromUser_402657530;
           accountId: string; userId: string;
           operation: string = "disassociate-phone-number"): Recallable =
  ## disassociatePhoneNumberFromUser
  ## Disassociates the primary provisioned phone number from the specified Amazon Chime user.
  ##   
                                                                                             ## accountId: string (required)
                                                                                             ##            
                                                                                             ## : 
                                                                                             ## The 
                                                                                             ## Amazon 
                                                                                             ## Chime 
                                                                                             ## account 
                                                                                             ## ID.
  ##   
                                                                                                   ## userId: string (required)
                                                                                                   ##         
                                                                                                   ## : 
                                                                                                   ## The 
                                                                                                   ## user 
                                                                                                   ## ID.
  ##   
                                                                                                         ## operation: string (required)
  var path_402657545 = newJObject()
  var query_402657546 = newJObject()
  add(path_402657545, "accountId", newJString(accountId))
  add(path_402657545, "userId", newJString(userId))
  add(query_402657546, "operation", newJString(operation))
  result = call_402657544.call(path_402657545, query_402657546, nil, nil, nil)

var disassociatePhoneNumberFromUser* = Call_DisassociatePhoneNumberFromUser_402657530(
    name: "disassociatePhoneNumberFromUser", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/users/{userId}#operation=disassociate-phone-number",
    validator: validate_DisassociatePhoneNumberFromUser_402657531, base: "/",
    makeUrl: url_DisassociatePhoneNumberFromUser_402657532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisassociatePhoneNumbersFromVoiceConnector_402657547 = ref object of OpenApiRestCall_402656044
proc url_DisassociatePhoneNumbersFromVoiceConnector_402657549(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"), (
        kind: ConstantSegment, value: "#operation=disassociate-phone-numbers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisassociatePhoneNumbersFromVoiceConnector_402657548(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657550 = path.getOrDefault("voiceConnectorId")
  valid_402657550 = validateParameter(valid_402657550, JString, required = true,
                                      default = nil)
  if valid_402657550 != nil:
    section.add "voiceConnectorId", valid_402657550
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657551 = query.getOrDefault("operation")
  valid_402657551 = validateParameter(valid_402657551, JString, required = true, default = newJString(
      "disassociate-phone-numbers"))
  if valid_402657551 != nil:
    section.add "operation", valid_402657551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657552 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657552 = validateParameter(valid_402657552, JString,
                                      required = false, default = nil)
  if valid_402657552 != nil:
    section.add "X-Amz-Security-Token", valid_402657552
  var valid_402657553 = header.getOrDefault("X-Amz-Signature")
  valid_402657553 = validateParameter(valid_402657553, JString,
                                      required = false, default = nil)
  if valid_402657553 != nil:
    section.add "X-Amz-Signature", valid_402657553
  var valid_402657554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657554 = validateParameter(valid_402657554, JString,
                                      required = false, default = nil)
  if valid_402657554 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657554
  var valid_402657555 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657555 = validateParameter(valid_402657555, JString,
                                      required = false, default = nil)
  if valid_402657555 != nil:
    section.add "X-Amz-Algorithm", valid_402657555
  var valid_402657556 = header.getOrDefault("X-Amz-Date")
  valid_402657556 = validateParameter(valid_402657556, JString,
                                      required = false, default = nil)
  if valid_402657556 != nil:
    section.add "X-Amz-Date", valid_402657556
  var valid_402657557 = header.getOrDefault("X-Amz-Credential")
  valid_402657557 = validateParameter(valid_402657557, JString,
                                      required = false, default = nil)
  if valid_402657557 != nil:
    section.add "X-Amz-Credential", valid_402657557
  var valid_402657558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657558 = validateParameter(valid_402657558, JString,
                                      required = false, default = nil)
  if valid_402657558 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657560: Call_DisassociatePhoneNumbersFromVoiceConnector_402657547;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657560.validator(path, query, header, formData, body, _)
  let scheme = call_402657560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657560.makeUrl(scheme.get, call_402657560.host, call_402657560.base,
                                   call_402657560.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657560, uri, valid, _)

proc call*(call_402657561: Call_DisassociatePhoneNumbersFromVoiceConnector_402657547;
           body: JsonNode; voiceConnectorId: string;
           operation: string = "disassociate-phone-numbers"): Recallable =
  ## disassociatePhoneNumbersFromVoiceConnector
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
  ##   
                                                                                               ## body: JObject (required)
  ##   
                                                                                                                          ## operation: string (required)
  ##   
                                                                                                                                                         ## voiceConnectorId: string (required)
                                                                                                                                                         ##                   
                                                                                                                                                         ## : 
                                                                                                                                                         ## The 
                                                                                                                                                         ## Amazon 
                                                                                                                                                         ## Chime 
                                                                                                                                                         ## Voice 
                                                                                                                                                         ## Connector 
                                                                                                                                                         ## ID.
  var path_402657562 = newJObject()
  var query_402657563 = newJObject()
  var body_402657564 = newJObject()
  if body != nil:
    body_402657564 = body
  add(query_402657563, "operation", newJString(operation))
  add(path_402657562, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657561.call(path_402657562, query_402657563, nil, nil, body_402657564)

var disassociatePhoneNumbersFromVoiceConnector* = Call_DisassociatePhoneNumbersFromVoiceConnector_402657547(
    name: "disassociatePhoneNumbersFromVoiceConnector",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}#operation=disassociate-phone-numbers",
    validator: validate_DisassociatePhoneNumbersFromVoiceConnector_402657548,
    base: "/", makeUrl: url_DisassociatePhoneNumbersFromVoiceConnector_402657549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657565 = ref object of OpenApiRestCall_402656044
proc url_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657567(
    protocol: Scheme; host: string; base: string; route: string; path: JsonNode;
    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorGroupId" in path,
         "`voiceConnectorGroupId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connector-groups/"),
                 (kind: VariableSegment, value: "voiceConnectorGroupId"), (
        kind: ConstantSegment, value: "#operation=disassociate-phone-numbers")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657566(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorGroupId: JString (required)
                                 ##                        : The Amazon Chime Voice Connector group ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `voiceConnectorGroupId` field"
  var valid_402657568 = path.getOrDefault("voiceConnectorGroupId")
  valid_402657568 = validateParameter(valid_402657568, JString, required = true,
                                      default = nil)
  if valid_402657568 != nil:
    section.add "voiceConnectorGroupId", valid_402657568
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657569 = query.getOrDefault("operation")
  valid_402657569 = validateParameter(valid_402657569, JString, required = true, default = newJString(
      "disassociate-phone-numbers"))
  if valid_402657569 != nil:
    section.add "operation", valid_402657569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657570 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657570 = validateParameter(valid_402657570, JString,
                                      required = false, default = nil)
  if valid_402657570 != nil:
    section.add "X-Amz-Security-Token", valid_402657570
  var valid_402657571 = header.getOrDefault("X-Amz-Signature")
  valid_402657571 = validateParameter(valid_402657571, JString,
                                      required = false, default = nil)
  if valid_402657571 != nil:
    section.add "X-Amz-Signature", valid_402657571
  var valid_402657572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657572 = validateParameter(valid_402657572, JString,
                                      required = false, default = nil)
  if valid_402657572 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657572
  var valid_402657573 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657573 = validateParameter(valid_402657573, JString,
                                      required = false, default = nil)
  if valid_402657573 != nil:
    section.add "X-Amz-Algorithm", valid_402657573
  var valid_402657574 = header.getOrDefault("X-Amz-Date")
  valid_402657574 = validateParameter(valid_402657574, JString,
                                      required = false, default = nil)
  if valid_402657574 != nil:
    section.add "X-Amz-Date", valid_402657574
  var valid_402657575 = header.getOrDefault("X-Amz-Credential")
  valid_402657575 = validateParameter(valid_402657575, JString,
                                      required = false, default = nil)
  if valid_402657575 != nil:
    section.add "X-Amz-Credential", valid_402657575
  var valid_402657576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657576 = validateParameter(valid_402657576, JString,
                                      required = false, default = nil)
  if valid_402657576 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657576
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657578: Call_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657565;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
                                                                                         ## 
  let valid = call_402657578.validator(path, query, header, formData, body, _)
  let scheme = call_402657578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657578.makeUrl(scheme.get, call_402657578.host, call_402657578.base,
                                   call_402657578.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657578, uri, valid, _)

proc call*(call_402657579: Call_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657565;
           voiceConnectorGroupId: string; body: JsonNode;
           operation: string = "disassociate-phone-numbers"): Recallable =
  ## disassociatePhoneNumbersFromVoiceConnectorGroup
  ## Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
  ##   
                                                                                                     ## voiceConnectorGroupId: string (required)
                                                                                                     ##                        
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## Amazon 
                                                                                                     ## Chime 
                                                                                                     ## Voice 
                                                                                                     ## Connector 
                                                                                                     ## group 
                                                                                                     ## ID.
  ##   
                                                                                                           ## body: JObject (required)
  ##   
                                                                                                                                      ## operation: string (required)
  var path_402657580 = newJObject()
  var query_402657581 = newJObject()
  var body_402657582 = newJObject()
  add(path_402657580, "voiceConnectorGroupId", newJString(voiceConnectorGroupId))
  if body != nil:
    body_402657582 = body
  add(query_402657581, "operation", newJString(operation))
  result = call_402657579.call(path_402657580, query_402657581, nil, nil, body_402657582)

var disassociatePhoneNumbersFromVoiceConnectorGroup* = Call_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657565(
    name: "disassociatePhoneNumbersFromVoiceConnectorGroup",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/voice-connector-groups/{voiceConnectorGroupId}#operation=disassociate-phone-numbers",
    validator: validate_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657566,
    base: "/", makeUrl: url_DisassociatePhoneNumbersFromVoiceConnectorGroup_402657567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_DisassociateSigninDelegateGroupsFromAccount_402657583 = ref object of OpenApiRestCall_402656044
proc url_DisassociateSigninDelegateGroupsFromAccount_402657585(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"), (
        kind: ConstantSegment,
        value: "#operation=disassociate-signin-delegate-groups")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_DisassociateSigninDelegateGroupsFromAccount_402657584(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode; _: string = ""): JsonNode {.nosinks.} =
  ## Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
                                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657586 = path.getOrDefault("accountId")
  valid_402657586 = validateParameter(valid_402657586, JString, required = true,
                                      default = nil)
  if valid_402657586 != nil:
    section.add "accountId", valid_402657586
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657587 = query.getOrDefault("operation")
  valid_402657587 = validateParameter(valid_402657587, JString, required = true, default = newJString(
      "disassociate-signin-delegate-groups"))
  if valid_402657587 != nil:
    section.add "operation", valid_402657587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657588 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657588 = validateParameter(valid_402657588, JString,
                                      required = false, default = nil)
  if valid_402657588 != nil:
    section.add "X-Amz-Security-Token", valid_402657588
  var valid_402657589 = header.getOrDefault("X-Amz-Signature")
  valid_402657589 = validateParameter(valid_402657589, JString,
                                      required = false, default = nil)
  if valid_402657589 != nil:
    section.add "X-Amz-Signature", valid_402657589
  var valid_402657590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657590 = validateParameter(valid_402657590, JString,
                                      required = false, default = nil)
  if valid_402657590 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657590
  var valid_402657591 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657591 = validateParameter(valid_402657591, JString,
                                      required = false, default = nil)
  if valid_402657591 != nil:
    section.add "X-Amz-Algorithm", valid_402657591
  var valid_402657592 = header.getOrDefault("X-Amz-Date")
  valid_402657592 = validateParameter(valid_402657592, JString,
                                      required = false, default = nil)
  if valid_402657592 != nil:
    section.add "X-Amz-Date", valid_402657592
  var valid_402657593 = header.getOrDefault("X-Amz-Credential")
  valid_402657593 = validateParameter(valid_402657593, JString,
                                      required = false, default = nil)
  if valid_402657593 != nil:
    section.add "X-Amz-Credential", valid_402657593
  var valid_402657594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657594 = validateParameter(valid_402657594, JString,
                                      required = false, default = nil)
  if valid_402657594 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657594
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657596: Call_DisassociateSigninDelegateGroupsFromAccount_402657583;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
                                                                                         ## 
  let valid = call_402657596.validator(path, query, header, formData, body, _)
  let scheme = call_402657596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657596.makeUrl(scheme.get, call_402657596.host, call_402657596.base,
                                   call_402657596.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657596, uri, valid, _)

proc call*(call_402657597: Call_DisassociateSigninDelegateGroupsFromAccount_402657583;
           body: JsonNode; accountId: string;
           operation: string = "disassociate-signin-delegate-groups"): Recallable =
  ## disassociateSigninDelegateGroupsFromAccount
  ## Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
  ##   
                                                                                                 ## body: JObject (required)
  ##   
                                                                                                                            ## accountId: string (required)
                                                                                                                            ##            
                                                                                                                            ## : 
                                                                                                                            ## The 
                                                                                                                            ## Amazon 
                                                                                                                            ## Chime 
                                                                                                                            ## account 
                                                                                                                            ## ID.
  ##   
                                                                                                                                  ## operation: string (required)
  var path_402657598 = newJObject()
  var query_402657599 = newJObject()
  var body_402657600 = newJObject()
  if body != nil:
    body_402657600 = body
  add(path_402657598, "accountId", newJString(accountId))
  add(query_402657599, "operation", newJString(operation))
  result = call_402657597.call(path_402657598, query_402657599, nil, nil, body_402657600)

var disassociateSigninDelegateGroupsFromAccount* = Call_DisassociateSigninDelegateGroupsFromAccount_402657583(
    name: "disassociateSigninDelegateGroupsFromAccount",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com", route: "/accounts/{accountId}#operation=disassociate-signin-delegate-groups",
    validator: validate_DisassociateSigninDelegateGroupsFromAccount_402657584,
    base: "/", makeUrl: url_DisassociateSigninDelegateGroupsFromAccount_402657585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateAccountSettings_402657615 = ref object of OpenApiRestCall_402656044
proc url_UpdateAccountSettings_402657617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/settings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateAccountSettings_402657616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657618 = path.getOrDefault("accountId")
  valid_402657618 = validateParameter(valid_402657618, JString, required = true,
                                      default = nil)
  if valid_402657618 != nil:
    section.add "accountId", valid_402657618
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657619 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657619 = validateParameter(valid_402657619, JString,
                                      required = false, default = nil)
  if valid_402657619 != nil:
    section.add "X-Amz-Security-Token", valid_402657619
  var valid_402657620 = header.getOrDefault("X-Amz-Signature")
  valid_402657620 = validateParameter(valid_402657620, JString,
                                      required = false, default = nil)
  if valid_402657620 != nil:
    section.add "X-Amz-Signature", valid_402657620
  var valid_402657621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657621 = validateParameter(valid_402657621, JString,
                                      required = false, default = nil)
  if valid_402657621 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657621
  var valid_402657622 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657622 = validateParameter(valid_402657622, JString,
                                      required = false, default = nil)
  if valid_402657622 != nil:
    section.add "X-Amz-Algorithm", valid_402657622
  var valid_402657623 = header.getOrDefault("X-Amz-Date")
  valid_402657623 = validateParameter(valid_402657623, JString,
                                      required = false, default = nil)
  if valid_402657623 != nil:
    section.add "X-Amz-Date", valid_402657623
  var valid_402657624 = header.getOrDefault("X-Amz-Credential")
  valid_402657624 = validateParameter(valid_402657624, JString,
                                      required = false, default = nil)
  if valid_402657624 != nil:
    section.add "X-Amz-Credential", valid_402657624
  var valid_402657625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657625 = validateParameter(valid_402657625, JString,
                                      required = false, default = nil)
  if valid_402657625 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657625
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657627: Call_UpdateAccountSettings_402657615;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
                                                                                         ## 
  let valid = call_402657627.validator(path, query, header, formData, body, _)
  let scheme = call_402657627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657627.makeUrl(scheme.get, call_402657627.host, call_402657627.base,
                                   call_402657627.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657627, uri, valid, _)

proc call*(call_402657628: Call_UpdateAccountSettings_402657615; body: JsonNode;
           accountId: string): Recallable =
  ## updateAccountSettings
  ## Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                                                                         ## body: JObject (required)
  ##   
                                                                                                                                                                                                                                                                                                                                                                                    ## accountId: string (required)
                                                                                                                                                                                                                                                                                                                                                                                    ##            
                                                                                                                                                                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                                                                                                                                                                    ## Amazon 
                                                                                                                                                                                                                                                                                                                                                                                    ## Chime 
                                                                                                                                                                                                                                                                                                                                                                                    ## account 
                                                                                                                                                                                                                                                                                                                                                                                    ## ID.
  var path_402657629 = newJObject()
  var body_402657630 = newJObject()
  if body != nil:
    body_402657630 = body
  add(path_402657629, "accountId", newJString(accountId))
  result = call_402657628.call(path_402657629, nil, nil, nil, body_402657630)

var updateAccountSettings* = Call_UpdateAccountSettings_402657615(
    name: "updateAccountSettings", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/settings",
    validator: validate_UpdateAccountSettings_402657616, base: "/",
    makeUrl: url_UpdateAccountSettings_402657617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAccountSettings_402657601 = ref object of OpenApiRestCall_402656044
proc url_GetAccountSettings_402657603(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/settings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetAccountSettings_402657602(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657604 = path.getOrDefault("accountId")
  valid_402657604 = validateParameter(valid_402657604, JString, required = true,
                                      default = nil)
  if valid_402657604 != nil:
    section.add "accountId", valid_402657604
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657605 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657605 = validateParameter(valid_402657605, JString,
                                      required = false, default = nil)
  if valid_402657605 != nil:
    section.add "X-Amz-Security-Token", valid_402657605
  var valid_402657606 = header.getOrDefault("X-Amz-Signature")
  valid_402657606 = validateParameter(valid_402657606, JString,
                                      required = false, default = nil)
  if valid_402657606 != nil:
    section.add "X-Amz-Signature", valid_402657606
  var valid_402657607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657607 = validateParameter(valid_402657607, JString,
                                      required = false, default = nil)
  if valid_402657607 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657607
  var valid_402657608 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657608 = validateParameter(valid_402657608, JString,
                                      required = false, default = nil)
  if valid_402657608 != nil:
    section.add "X-Amz-Algorithm", valid_402657608
  var valid_402657609 = header.getOrDefault("X-Amz-Date")
  valid_402657609 = validateParameter(valid_402657609, JString,
                                      required = false, default = nil)
  if valid_402657609 != nil:
    section.add "X-Amz-Date", valid_402657609
  var valid_402657610 = header.getOrDefault("X-Amz-Credential")
  valid_402657610 = validateParameter(valid_402657610, JString,
                                      required = false, default = nil)
  if valid_402657610 != nil:
    section.add "X-Amz-Credential", valid_402657610
  var valid_402657611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657611 = validateParameter(valid_402657611, JString,
                                      required = false, default = nil)
  if valid_402657611 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657611
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657612: Call_GetAccountSettings_402657601;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
                                                                                         ## 
  let valid = call_402657612.validator(path, query, header, formData, body, _)
  let scheme = call_402657612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657612.makeUrl(scheme.get, call_402657612.host, call_402657612.base,
                                   call_402657612.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657612, uri, valid, _)

proc call*(call_402657613: Call_GetAccountSettings_402657601; accountId: string): Recallable =
  ## getAccountSettings
  ## Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
  ##   
                                                                                                                                                                                                                                                                                                                      ## accountId: string (required)
                                                                                                                                                                                                                                                                                                                      ##            
                                                                                                                                                                                                                                                                                                                      ## : 
                                                                                                                                                                                                                                                                                                                      ## The 
                                                                                                                                                                                                                                                                                                                      ## Amazon 
                                                                                                                                                                                                                                                                                                                      ## Chime 
                                                                                                                                                                                                                                                                                                                      ## account 
                                                                                                                                                                                                                                                                                                                      ## ID.
  var path_402657614 = newJObject()
  add(path_402657614, "accountId", newJString(accountId))
  result = call_402657613.call(path_402657614, nil, nil, nil, nil)

var getAccountSettings* = Call_GetAccountSettings_402657601(
    name: "getAccountSettings", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/settings",
    validator: validate_GetAccountSettings_402657602, base: "/",
    makeUrl: url_GetAccountSettings_402657603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateBot_402657646 = ref object of OpenApiRestCall_402656044
proc url_UpdateBot_402657648(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateBot_402657647(path: JsonNode; query: JsonNode;
                                  header: JsonNode; formData: JsonNode;
                                  body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657649 = path.getOrDefault("botId")
  valid_402657649 = validateParameter(valid_402657649, JString, required = true,
                                      default = nil)
  if valid_402657649 != nil:
    section.add "botId", valid_402657649
  var valid_402657650 = path.getOrDefault("accountId")
  valid_402657650 = validateParameter(valid_402657650, JString, required = true,
                                      default = nil)
  if valid_402657650 != nil:
    section.add "accountId", valid_402657650
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657651 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657651 = validateParameter(valid_402657651, JString,
                                      required = false, default = nil)
  if valid_402657651 != nil:
    section.add "X-Amz-Security-Token", valid_402657651
  var valid_402657652 = header.getOrDefault("X-Amz-Signature")
  valid_402657652 = validateParameter(valid_402657652, JString,
                                      required = false, default = nil)
  if valid_402657652 != nil:
    section.add "X-Amz-Signature", valid_402657652
  var valid_402657653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657653 = validateParameter(valid_402657653, JString,
                                      required = false, default = nil)
  if valid_402657653 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657653
  var valid_402657654 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657654 = validateParameter(valid_402657654, JString,
                                      required = false, default = nil)
  if valid_402657654 != nil:
    section.add "X-Amz-Algorithm", valid_402657654
  var valid_402657655 = header.getOrDefault("X-Amz-Date")
  valid_402657655 = validateParameter(valid_402657655, JString,
                                      required = false, default = nil)
  if valid_402657655 != nil:
    section.add "X-Amz-Date", valid_402657655
  var valid_402657656 = header.getOrDefault("X-Amz-Credential")
  valid_402657656 = validateParameter(valid_402657656, JString,
                                      required = false, default = nil)
  if valid_402657656 != nil:
    section.add "X-Amz-Credential", valid_402657656
  var valid_402657657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657657 = validateParameter(valid_402657657, JString,
                                      required = false, default = nil)
  if valid_402657657 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657659: Call_UpdateBot_402657646; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
                                                                                         ## 
  let valid = call_402657659.validator(path, query, header, formData, body, _)
  let scheme = call_402657659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657659.makeUrl(scheme.get, call_402657659.host, call_402657659.base,
                                   call_402657659.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657659, uri, valid, _)

proc call*(call_402657660: Call_UpdateBot_402657646; botId: string;
           body: JsonNode; accountId: string): Recallable =
  ## updateBot
  ## Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
  ##   
                                                                                                                                        ## botId: string (required)
                                                                                                                                        ##        
                                                                                                                                        ## : 
                                                                                                                                        ## The 
                                                                                                                                        ## bot 
                                                                                                                                        ## ID.
  ##   
                                                                                                                                              ## body: JObject (required)
  ##   
                                                                                                                                                                         ## accountId: string (required)
                                                                                                                                                                         ##            
                                                                                                                                                                         ## : 
                                                                                                                                                                         ## The 
                                                                                                                                                                         ## Amazon 
                                                                                                                                                                         ## Chime 
                                                                                                                                                                         ## account 
                                                                                                                                                                         ## ID.
  var path_402657661 = newJObject()
  var body_402657662 = newJObject()
  add(path_402657661, "botId", newJString(botId))
  if body != nil:
    body_402657662 = body
  add(path_402657661, "accountId", newJString(accountId))
  result = call_402657660.call(path_402657661, nil, nil, nil, body_402657662)

var updateBot* = Call_UpdateBot_402657646(name: "updateBot",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/bots/{botId}", validator: validate_UpdateBot_402657647,
    base: "/", makeUrl: url_UpdateBot_402657648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBot_402657631 = ref object of OpenApiRestCall_402656044
proc url_GetBot_402657633(protocol: Scheme; host: string; base: string;
                          route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetBot_402657632(path: JsonNode; query: JsonNode;
                               header: JsonNode; formData: JsonNode;
                               body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657634 = path.getOrDefault("botId")
  valid_402657634 = validateParameter(valid_402657634, JString, required = true,
                                      default = nil)
  if valid_402657634 != nil:
    section.add "botId", valid_402657634
  var valid_402657635 = path.getOrDefault("accountId")
  valid_402657635 = validateParameter(valid_402657635, JString, required = true,
                                      default = nil)
  if valid_402657635 != nil:
    section.add "accountId", valid_402657635
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657636 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657636 = validateParameter(valid_402657636, JString,
                                      required = false, default = nil)
  if valid_402657636 != nil:
    section.add "X-Amz-Security-Token", valid_402657636
  var valid_402657637 = header.getOrDefault("X-Amz-Signature")
  valid_402657637 = validateParameter(valid_402657637, JString,
                                      required = false, default = nil)
  if valid_402657637 != nil:
    section.add "X-Amz-Signature", valid_402657637
  var valid_402657638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657638 = validateParameter(valid_402657638, JString,
                                      required = false, default = nil)
  if valid_402657638 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657638
  var valid_402657639 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657639 = validateParameter(valid_402657639, JString,
                                      required = false, default = nil)
  if valid_402657639 != nil:
    section.add "X-Amz-Algorithm", valid_402657639
  var valid_402657640 = header.getOrDefault("X-Amz-Date")
  valid_402657640 = validateParameter(valid_402657640, JString,
                                      required = false, default = nil)
  if valid_402657640 != nil:
    section.add "X-Amz-Date", valid_402657640
  var valid_402657641 = header.getOrDefault("X-Amz-Credential")
  valid_402657641 = validateParameter(valid_402657641, JString,
                                      required = false, default = nil)
  if valid_402657641 != nil:
    section.add "X-Amz-Credential", valid_402657641
  var valid_402657642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657642 = validateParameter(valid_402657642, JString,
                                      required = false, default = nil)
  if valid_402657642 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657642
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657643: Call_GetBot_402657631; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
                                                                                         ## 
  let valid = call_402657643.validator(path, query, header, formData, body, _)
  let scheme = call_402657643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657643.makeUrl(scheme.get, call_402657643.host, call_402657643.base,
                                   call_402657643.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657643, uri, valid, _)

proc call*(call_402657644: Call_GetBot_402657631; botId: string;
           accountId: string): Recallable =
  ## getBot
  ## Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
  ##   
                                                                                                            ## botId: string (required)
                                                                                                            ##        
                                                                                                            ## : 
                                                                                                            ## The 
                                                                                                            ## bot 
                                                                                                            ## ID.
  ##   
                                                                                                                  ## accountId: string (required)
                                                                                                                  ##            
                                                                                                                  ## : 
                                                                                                                  ## The 
                                                                                                                  ## Amazon 
                                                                                                                  ## Chime 
                                                                                                                  ## account 
                                                                                                                  ## ID.
  var path_402657645 = newJObject()
  add(path_402657645, "botId", newJString(botId))
  add(path_402657645, "accountId", newJString(accountId))
  result = call_402657644.call(path_402657645, nil, nil, nil, nil)

var getBot* = Call_GetBot_402657631(name: "getBot", meth: HttpMethod.HttpGet,
                                    host: "chime.amazonaws.com", route: "/accounts/{accountId}/bots/{botId}",
                                    validator: validate_GetBot_402657632,
                                    base: "/", makeUrl: url_GetBot_402657633,
                                    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateGlobalSettings_402657675 = ref object of OpenApiRestCall_402656044
proc url_UpdateGlobalSettings_402657677(protocol: Scheme; host: string;
                                        base: string; route: string;
                                        path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdateGlobalSettings_402657676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657678 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657678 = validateParameter(valid_402657678, JString,
                                      required = false, default = nil)
  if valid_402657678 != nil:
    section.add "X-Amz-Security-Token", valid_402657678
  var valid_402657679 = header.getOrDefault("X-Amz-Signature")
  valid_402657679 = validateParameter(valid_402657679, JString,
                                      required = false, default = nil)
  if valid_402657679 != nil:
    section.add "X-Amz-Signature", valid_402657679
  var valid_402657680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657680 = validateParameter(valid_402657680, JString,
                                      required = false, default = nil)
  if valid_402657680 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657680
  var valid_402657681 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657681 = validateParameter(valid_402657681, JString,
                                      required = false, default = nil)
  if valid_402657681 != nil:
    section.add "X-Amz-Algorithm", valid_402657681
  var valid_402657682 = header.getOrDefault("X-Amz-Date")
  valid_402657682 = validateParameter(valid_402657682, JString,
                                      required = false, default = nil)
  if valid_402657682 != nil:
    section.add "X-Amz-Date", valid_402657682
  var valid_402657683 = header.getOrDefault("X-Amz-Credential")
  valid_402657683 = validateParameter(valid_402657683, JString,
                                      required = false, default = nil)
  if valid_402657683 != nil:
    section.add "X-Amz-Credential", valid_402657683
  var valid_402657684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657684 = validateParameter(valid_402657684, JString,
                                      required = false, default = nil)
  if valid_402657684 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657684
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657686: Call_UpdateGlobalSettings_402657675;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
                                                                                         ## 
  let valid = call_402657686.validator(path, query, header, formData, body, _)
  let scheme = call_402657686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657686.makeUrl(scheme.get, call_402657686.host, call_402657686.base,
                                   call_402657686.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657686, uri, valid, _)

proc call*(call_402657687: Call_UpdateGlobalSettings_402657675; body: JsonNode): Recallable =
  ## updateGlobalSettings
  ## Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
  ##   
                                                                                                                                                  ## body: JObject (required)
  var body_402657688 = newJObject()
  if body != nil:
    body_402657688 = body
  result = call_402657687.call(nil, nil, nil, nil, body_402657688)

var updateGlobalSettings* = Call_UpdateGlobalSettings_402657675(
    name: "updateGlobalSettings", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com", route: "/settings",
    validator: validate_UpdateGlobalSettings_402657676, base: "/",
    makeUrl: url_UpdateGlobalSettings_402657677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGlobalSettings_402657663 = ref object of OpenApiRestCall_402656044
proc url_GetGlobalSettings_402657665(protocol: Scheme; host: string;
                                     base: string; route: string;
                                     path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGlobalSettings_402657664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657666 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657666 = validateParameter(valid_402657666, JString,
                                      required = false, default = nil)
  if valid_402657666 != nil:
    section.add "X-Amz-Security-Token", valid_402657666
  var valid_402657667 = header.getOrDefault("X-Amz-Signature")
  valid_402657667 = validateParameter(valid_402657667, JString,
                                      required = false, default = nil)
  if valid_402657667 != nil:
    section.add "X-Amz-Signature", valid_402657667
  var valid_402657668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657668 = validateParameter(valid_402657668, JString,
                                      required = false, default = nil)
  if valid_402657668 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657668
  var valid_402657669 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657669 = validateParameter(valid_402657669, JString,
                                      required = false, default = nil)
  if valid_402657669 != nil:
    section.add "X-Amz-Algorithm", valid_402657669
  var valid_402657670 = header.getOrDefault("X-Amz-Date")
  valid_402657670 = validateParameter(valid_402657670, JString,
                                      required = false, default = nil)
  if valid_402657670 != nil:
    section.add "X-Amz-Date", valid_402657670
  var valid_402657671 = header.getOrDefault("X-Amz-Credential")
  valid_402657671 = validateParameter(valid_402657671, JString,
                                      required = false, default = nil)
  if valid_402657671 != nil:
    section.add "X-Amz-Credential", valid_402657671
  var valid_402657672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657672 = validateParameter(valid_402657672, JString,
                                      required = false, default = nil)
  if valid_402657672 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657673: Call_GetGlobalSettings_402657663;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
                                                                                         ## 
  let valid = call_402657673.validator(path, query, header, formData, body, _)
  let scheme = call_402657673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657673.makeUrl(scheme.get, call_402657673.host, call_402657673.base,
                                   call_402657673.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657673, uri, valid, _)

proc call*(call_402657674: Call_GetGlobalSettings_402657663): Recallable =
  ## getGlobalSettings
  ## Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
  result = call_402657674.call(nil, nil, nil, nil, nil)

var getGlobalSettings* = Call_GetGlobalSettings_402657663(
    name: "getGlobalSettings", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/settings",
    validator: validate_GetGlobalSettings_402657664, base: "/",
    makeUrl: url_GetGlobalSettings_402657665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPhoneNumberOrder_402657689 = ref object of OpenApiRestCall_402656044
proc url_GetPhoneNumberOrder_402657691(protocol: Scheme; host: string;
                                       base: string; route: string;
                                       path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "phoneNumberOrderId" in path,
         "`phoneNumberOrderId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/phone-number-orders/"),
                 (kind: VariableSegment, value: "phoneNumberOrderId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetPhoneNumberOrder_402657690(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   phoneNumberOrderId: JString (required)
                                 ##                     : The ID for the phone number order.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `phoneNumberOrderId` field"
  var valid_402657692 = path.getOrDefault("phoneNumberOrderId")
  valid_402657692 = validateParameter(valid_402657692, JString, required = true,
                                      default = nil)
  if valid_402657692 != nil:
    section.add "phoneNumberOrderId", valid_402657692
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657693 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657693 = validateParameter(valid_402657693, JString,
                                      required = false, default = nil)
  if valid_402657693 != nil:
    section.add "X-Amz-Security-Token", valid_402657693
  var valid_402657694 = header.getOrDefault("X-Amz-Signature")
  valid_402657694 = validateParameter(valid_402657694, JString,
                                      required = false, default = nil)
  if valid_402657694 != nil:
    section.add "X-Amz-Signature", valid_402657694
  var valid_402657695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657695 = validateParameter(valid_402657695, JString,
                                      required = false, default = nil)
  if valid_402657695 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657695
  var valid_402657696 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657696 = validateParameter(valid_402657696, JString,
                                      required = false, default = nil)
  if valid_402657696 != nil:
    section.add "X-Amz-Algorithm", valid_402657696
  var valid_402657697 = header.getOrDefault("X-Amz-Date")
  valid_402657697 = validateParameter(valid_402657697, JString,
                                      required = false, default = nil)
  if valid_402657697 != nil:
    section.add "X-Amz-Date", valid_402657697
  var valid_402657698 = header.getOrDefault("X-Amz-Credential")
  valid_402657698 = validateParameter(valid_402657698, JString,
                                      required = false, default = nil)
  if valid_402657698 != nil:
    section.add "X-Amz-Credential", valid_402657698
  var valid_402657699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657699 = validateParameter(valid_402657699, JString,
                                      required = false, default = nil)
  if valid_402657699 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657700: Call_GetPhoneNumberOrder_402657689;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.
                                                                                         ## 
  let valid = call_402657700.validator(path, query, header, formData, body, _)
  let scheme = call_402657700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657700.makeUrl(scheme.get, call_402657700.host, call_402657700.base,
                                   call_402657700.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657700, uri, valid, _)

proc call*(call_402657701: Call_GetPhoneNumberOrder_402657689;
           phoneNumberOrderId: string): Recallable =
  ## getPhoneNumberOrder
  ## Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.
  ##   
                                                                                                                                                             ## phoneNumberOrderId: string (required)
                                                                                                                                                             ##                     
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## ID 
                                                                                                                                                             ## for 
                                                                                                                                                             ## the 
                                                                                                                                                             ## phone 
                                                                                                                                                             ## number 
                                                                                                                                                             ## order.
  var path_402657702 = newJObject()
  add(path_402657702, "phoneNumberOrderId", newJString(phoneNumberOrderId))
  result = call_402657701.call(path_402657702, nil, nil, nil, nil)

var getPhoneNumberOrder* = Call_GetPhoneNumberOrder_402657689(
    name: "getPhoneNumberOrder", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/phone-number-orders/{phoneNumberOrderId}",
    validator: validate_GetPhoneNumberOrder_402657690, base: "/",
    makeUrl: url_GetPhoneNumberOrder_402657691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdatePhoneNumberSettings_402657715 = ref object of OpenApiRestCall_402656044
proc url_UpdatePhoneNumberSettings_402657717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_UpdatePhoneNumberSettings_402657716(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657718 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657718 = validateParameter(valid_402657718, JString,
                                      required = false, default = nil)
  if valid_402657718 != nil:
    section.add "X-Amz-Security-Token", valid_402657718
  var valid_402657719 = header.getOrDefault("X-Amz-Signature")
  valid_402657719 = validateParameter(valid_402657719, JString,
                                      required = false, default = nil)
  if valid_402657719 != nil:
    section.add "X-Amz-Signature", valid_402657719
  var valid_402657720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657720 = validateParameter(valid_402657720, JString,
                                      required = false, default = nil)
  if valid_402657720 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657720
  var valid_402657721 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657721 = validateParameter(valid_402657721, JString,
                                      required = false, default = nil)
  if valid_402657721 != nil:
    section.add "X-Amz-Algorithm", valid_402657721
  var valid_402657722 = header.getOrDefault("X-Amz-Date")
  valid_402657722 = validateParameter(valid_402657722, JString,
                                      required = false, default = nil)
  if valid_402657722 != nil:
    section.add "X-Amz-Date", valid_402657722
  var valid_402657723 = header.getOrDefault("X-Amz-Credential")
  valid_402657723 = validateParameter(valid_402657723, JString,
                                      required = false, default = nil)
  if valid_402657723 != nil:
    section.add "X-Amz-Credential", valid_402657723
  var valid_402657724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657724 = validateParameter(valid_402657724, JString,
                                      required = false, default = nil)
  if valid_402657724 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657724
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657726: Call_UpdatePhoneNumberSettings_402657715;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
                                                                                         ## 
  let valid = call_402657726.validator(path, query, header, formData, body, _)
  let scheme = call_402657726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657726.makeUrl(scheme.get, call_402657726.host, call_402657726.base,
                                   call_402657726.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657726, uri, valid, _)

proc call*(call_402657727: Call_UpdatePhoneNumberSettings_402657715;
           body: JsonNode): Recallable =
  ## updatePhoneNumberSettings
  ## Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
  ##   
                                                                                                                                                                                                                                                        ## body: JObject (required)
  var body_402657728 = newJObject()
  if body != nil:
    body_402657728 = body
  result = call_402657727.call(nil, nil, nil, nil, body_402657728)

var updatePhoneNumberSettings* = Call_UpdatePhoneNumberSettings_402657715(
    name: "updatePhoneNumberSettings", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com", route: "/settings/phone-number",
    validator: validate_UpdatePhoneNumberSettings_402657716, base: "/",
    makeUrl: url_UpdatePhoneNumberSettings_402657717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPhoneNumberSettings_402657703 = ref object of OpenApiRestCall_402656044
proc url_GetPhoneNumberSettings_402657705(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPhoneNumberSettings_402657704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657706 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657706 = validateParameter(valid_402657706, JString,
                                      required = false, default = nil)
  if valid_402657706 != nil:
    section.add "X-Amz-Security-Token", valid_402657706
  var valid_402657707 = header.getOrDefault("X-Amz-Signature")
  valid_402657707 = validateParameter(valid_402657707, JString,
                                      required = false, default = nil)
  if valid_402657707 != nil:
    section.add "X-Amz-Signature", valid_402657707
  var valid_402657708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657708 = validateParameter(valid_402657708, JString,
                                      required = false, default = nil)
  if valid_402657708 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657708
  var valid_402657709 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657709 = validateParameter(valid_402657709, JString,
                                      required = false, default = nil)
  if valid_402657709 != nil:
    section.add "X-Amz-Algorithm", valid_402657709
  var valid_402657710 = header.getOrDefault("X-Amz-Date")
  valid_402657710 = validateParameter(valid_402657710, JString,
                                      required = false, default = nil)
  if valid_402657710 != nil:
    section.add "X-Amz-Date", valid_402657710
  var valid_402657711 = header.getOrDefault("X-Amz-Credential")
  valid_402657711 = validateParameter(valid_402657711, JString,
                                      required = false, default = nil)
  if valid_402657711 != nil:
    section.add "X-Amz-Credential", valid_402657711
  var valid_402657712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657712 = validateParameter(valid_402657712, JString,
                                      required = false, default = nil)
  if valid_402657712 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657712
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657713: Call_GetPhoneNumberSettings_402657703;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
                                                                                         ## 
  let valid = call_402657713.validator(path, query, header, formData, body, _)
  let scheme = call_402657713.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657713.makeUrl(scheme.get, call_402657713.host, call_402657713.base,
                                   call_402657713.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657713, uri, valid, _)

proc call*(call_402657714: Call_GetPhoneNumberSettings_402657703): Recallable =
  ## getPhoneNumberSettings
  ## Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
  result = call_402657714.call(nil, nil, nil, nil, nil)

var getPhoneNumberSettings* = Call_GetPhoneNumberSettings_402657703(
    name: "getPhoneNumberSettings", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/settings/phone-number",
    validator: validate_GetPhoneNumberSettings_402657704, base: "/",
    makeUrl: url_GetPhoneNumberSettings_402657705,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateUser_402657744 = ref object of OpenApiRestCall_402656044
proc url_UpdateUser_402657746(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateUser_402657745(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657747 = path.getOrDefault("accountId")
  valid_402657747 = validateParameter(valid_402657747, JString, required = true,
                                      default = nil)
  if valid_402657747 != nil:
    section.add "accountId", valid_402657747
  var valid_402657748 = path.getOrDefault("userId")
  valid_402657748 = validateParameter(valid_402657748, JString, required = true,
                                      default = nil)
  if valid_402657748 != nil:
    section.add "userId", valid_402657748
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657749 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657749 = validateParameter(valid_402657749, JString,
                                      required = false, default = nil)
  if valid_402657749 != nil:
    section.add "X-Amz-Security-Token", valid_402657749
  var valid_402657750 = header.getOrDefault("X-Amz-Signature")
  valid_402657750 = validateParameter(valid_402657750, JString,
                                      required = false, default = nil)
  if valid_402657750 != nil:
    section.add "X-Amz-Signature", valid_402657750
  var valid_402657751 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657751 = validateParameter(valid_402657751, JString,
                                      required = false, default = nil)
  if valid_402657751 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657751
  var valid_402657752 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657752 = validateParameter(valid_402657752, JString,
                                      required = false, default = nil)
  if valid_402657752 != nil:
    section.add "X-Amz-Algorithm", valid_402657752
  var valid_402657753 = header.getOrDefault("X-Amz-Date")
  valid_402657753 = validateParameter(valid_402657753, JString,
                                      required = false, default = nil)
  if valid_402657753 != nil:
    section.add "X-Amz-Date", valid_402657753
  var valid_402657754 = header.getOrDefault("X-Amz-Credential")
  valid_402657754 = validateParameter(valid_402657754, JString,
                                      required = false, default = nil)
  if valid_402657754 != nil:
    section.add "X-Amz-Credential", valid_402657754
  var valid_402657755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657755 = validateParameter(valid_402657755, JString,
                                      required = false, default = nil)
  if valid_402657755 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657755
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657757: Call_UpdateUser_402657744; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action.
                                                                                         ## 
  let valid = call_402657757.validator(path, query, header, formData, body, _)
  let scheme = call_402657757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657757.makeUrl(scheme.get, call_402657757.host, call_402657757.base,
                                   call_402657757.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657757, uri, valid, _)

proc call*(call_402657758: Call_UpdateUser_402657744; body: JsonNode;
           accountId: string; userId: string): Recallable =
  ## updateUser
  ## Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action.
  ##   
                                                                                                                                  ## body: JObject (required)
  ##   
                                                                                                                                                             ## accountId: string (required)
                                                                                                                                                             ##            
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## Amazon 
                                                                                                                                                             ## Chime 
                                                                                                                                                             ## account 
                                                                                                                                                             ## ID.
  ##   
                                                                                                                                                                   ## userId: string (required)
                                                                                                                                                                   ##         
                                                                                                                                                                   ## : 
                                                                                                                                                                   ## The 
                                                                                                                                                                   ## user 
                                                                                                                                                                   ## ID.
  var path_402657759 = newJObject()
  var body_402657760 = newJObject()
  if body != nil:
    body_402657760 = body
  add(path_402657759, "accountId", newJString(accountId))
  add(path_402657759, "userId", newJString(userId))
  result = call_402657758.call(path_402657759, nil, nil, nil, body_402657760)

var updateUser* = Call_UpdateUser_402657744(name: "updateUser",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users/{userId}",
    validator: validate_UpdateUser_402657745, base: "/",
    makeUrl: url_UpdateUser_402657746, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUser_402657729 = ref object of OpenApiRestCall_402656044
proc url_GetUser_402657731(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUser_402657730(path: JsonNode; query: JsonNode;
                                header: JsonNode; formData: JsonNode;
                                body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN.</p> <p>To retrieve user details with an email address instead of a user ID, use the <a>ListUsers</a> action, and then filter by email address.</p>
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657732 = path.getOrDefault("accountId")
  valid_402657732 = validateParameter(valid_402657732, JString, required = true,
                                      default = nil)
  if valid_402657732 != nil:
    section.add "accountId", valid_402657732
  var valid_402657733 = path.getOrDefault("userId")
  valid_402657733 = validateParameter(valid_402657733, JString, required = true,
                                      default = nil)
  if valid_402657733 != nil:
    section.add "userId", valid_402657733
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657734 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657734 = validateParameter(valid_402657734, JString,
                                      required = false, default = nil)
  if valid_402657734 != nil:
    section.add "X-Amz-Security-Token", valid_402657734
  var valid_402657735 = header.getOrDefault("X-Amz-Signature")
  valid_402657735 = validateParameter(valid_402657735, JString,
                                      required = false, default = nil)
  if valid_402657735 != nil:
    section.add "X-Amz-Signature", valid_402657735
  var valid_402657736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657736 = validateParameter(valid_402657736, JString,
                                      required = false, default = nil)
  if valid_402657736 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657736
  var valid_402657737 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657737 = validateParameter(valid_402657737, JString,
                                      required = false, default = nil)
  if valid_402657737 != nil:
    section.add "X-Amz-Algorithm", valid_402657737
  var valid_402657738 = header.getOrDefault("X-Amz-Date")
  valid_402657738 = validateParameter(valid_402657738, JString,
                                      required = false, default = nil)
  if valid_402657738 != nil:
    section.add "X-Amz-Date", valid_402657738
  var valid_402657739 = header.getOrDefault("X-Amz-Credential")
  valid_402657739 = validateParameter(valid_402657739, JString,
                                      required = false, default = nil)
  if valid_402657739 != nil:
    section.add "X-Amz-Credential", valid_402657739
  var valid_402657740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657740 = validateParameter(valid_402657740, JString,
                                      required = false, default = nil)
  if valid_402657740 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657741: Call_GetUser_402657729; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN.</p> <p>To retrieve user details with an email address instead of a user ID, use the <a>ListUsers</a> action, and then filter by email address.</p>
                                                                                         ## 
  let valid = call_402657741.validator(path, query, header, formData, body, _)
  let scheme = call_402657741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657741.makeUrl(scheme.get, call_402657741.host, call_402657741.base,
                                   call_402657741.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657741, uri, valid, _)

proc call*(call_402657742: Call_GetUser_402657729; accountId: string;
           userId: string): Recallable =
  ## getUser
  ## <p>Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN.</p> <p>To retrieve user details with an email address instead of a user ID, use the <a>ListUsers</a> action, and then filter by email address.</p>
  ##   
                                                                                                                                                                                                                                                                              ## accountId: string (required)
                                                                                                                                                                                                                                                                              ##            
                                                                                                                                                                                                                                                                              ## : 
                                                                                                                                                                                                                                                                              ## The 
                                                                                                                                                                                                                                                                              ## Amazon 
                                                                                                                                                                                                                                                                              ## Chime 
                                                                                                                                                                                                                                                                              ## account 
                                                                                                                                                                                                                                                                              ## ID.
  ##   
                                                                                                                                                                                                                                                                                    ## userId: string (required)
                                                                                                                                                                                                                                                                                    ##         
                                                                                                                                                                                                                                                                                    ## : 
                                                                                                                                                                                                                                                                                    ## The 
                                                                                                                                                                                                                                                                                    ## user 
                                                                                                                                                                                                                                                                                    ## ID.
  var path_402657743 = newJObject()
  add(path_402657743, "accountId", newJString(accountId))
  add(path_402657743, "userId", newJString(userId))
  result = call_402657742.call(path_402657743, nil, nil, nil, nil)

var getUser* = Call_GetUser_402657729(name: "getUser", meth: HttpMethod.HttpGet,
                                      host: "chime.amazonaws.com", route: "/accounts/{accountId}/users/{userId}",
                                      validator: validate_GetUser_402657730,
                                      base: "/", makeUrl: url_GetUser_402657731,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_UpdateUserSettings_402657776 = ref object of OpenApiRestCall_402656044
proc url_UpdateUserSettings_402657778(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"),
                 (kind: ConstantSegment, value: "/settings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_UpdateUserSettings_402657777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Updates the settings for the specified user, such as phone number settings.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657779 = path.getOrDefault("accountId")
  valid_402657779 = validateParameter(valid_402657779, JString, required = true,
                                      default = nil)
  if valid_402657779 != nil:
    section.add "accountId", valid_402657779
  var valid_402657780 = path.getOrDefault("userId")
  valid_402657780 = validateParameter(valid_402657780, JString, required = true,
                                      default = nil)
  if valid_402657780 != nil:
    section.add "userId", valid_402657780
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657781 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657781 = validateParameter(valid_402657781, JString,
                                      required = false, default = nil)
  if valid_402657781 != nil:
    section.add "X-Amz-Security-Token", valid_402657781
  var valid_402657782 = header.getOrDefault("X-Amz-Signature")
  valid_402657782 = validateParameter(valid_402657782, JString,
                                      required = false, default = nil)
  if valid_402657782 != nil:
    section.add "X-Amz-Signature", valid_402657782
  var valid_402657783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657783 = validateParameter(valid_402657783, JString,
                                      required = false, default = nil)
  if valid_402657783 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657783
  var valid_402657784 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657784 = validateParameter(valid_402657784, JString,
                                      required = false, default = nil)
  if valid_402657784 != nil:
    section.add "X-Amz-Algorithm", valid_402657784
  var valid_402657785 = header.getOrDefault("X-Amz-Date")
  valid_402657785 = validateParameter(valid_402657785, JString,
                                      required = false, default = nil)
  if valid_402657785 != nil:
    section.add "X-Amz-Date", valid_402657785
  var valid_402657786 = header.getOrDefault("X-Amz-Credential")
  valid_402657786 = validateParameter(valid_402657786, JString,
                                      required = false, default = nil)
  if valid_402657786 != nil:
    section.add "X-Amz-Credential", valid_402657786
  var valid_402657787 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657787 = validateParameter(valid_402657787, JString,
                                      required = false, default = nil)
  if valid_402657787 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657787
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657789: Call_UpdateUserSettings_402657776;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Updates the settings for the specified user, such as phone number settings.
                                                                                         ## 
  let valid = call_402657789.validator(path, query, header, formData, body, _)
  let scheme = call_402657789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657789.makeUrl(scheme.get, call_402657789.host, call_402657789.base,
                                   call_402657789.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657789, uri, valid, _)

proc call*(call_402657790: Call_UpdateUserSettings_402657776; body: JsonNode;
           accountId: string; userId: string): Recallable =
  ## updateUserSettings
  ## Updates the settings for the specified user, such as phone number settings.
  ##   
                                                                                ## body: JObject (required)
  ##   
                                                                                                           ## accountId: string (required)
                                                                                                           ##            
                                                                                                           ## : 
                                                                                                           ## The 
                                                                                                           ## Amazon 
                                                                                                           ## Chime 
                                                                                                           ## account 
                                                                                                           ## ID.
  ##   
                                                                                                                 ## userId: string (required)
                                                                                                                 ##         
                                                                                                                 ## : 
                                                                                                                 ## The 
                                                                                                                 ## user 
                                                                                                                 ## ID.
  var path_402657791 = newJObject()
  var body_402657792 = newJObject()
  if body != nil:
    body_402657792 = body
  add(path_402657791, "accountId", newJString(accountId))
  add(path_402657791, "userId", newJString(userId))
  result = call_402657790.call(path_402657791, nil, nil, nil, body_402657792)

var updateUserSettings* = Call_UpdateUserSettings_402657776(
    name: "updateUserSettings", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users/{userId}/settings",
    validator: validate_UpdateUserSettings_402657777, base: "/",
    makeUrl: url_UpdateUserSettings_402657778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUserSettings_402657761 = ref object of OpenApiRestCall_402656044
proc url_GetUserSettings_402657763(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode;
                                   query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"),
                 (kind: ConstantSegment, value: "/settings")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetUserSettings_402657762(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Retrieves settings for the specified user ID, such as any associated phone number settings.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657764 = path.getOrDefault("accountId")
  valid_402657764 = validateParameter(valid_402657764, JString, required = true,
                                      default = nil)
  if valid_402657764 != nil:
    section.add "accountId", valid_402657764
  var valid_402657765 = path.getOrDefault("userId")
  valid_402657765 = validateParameter(valid_402657765, JString, required = true,
                                      default = nil)
  if valid_402657765 != nil:
    section.add "userId", valid_402657765
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657766 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657766 = validateParameter(valid_402657766, JString,
                                      required = false, default = nil)
  if valid_402657766 != nil:
    section.add "X-Amz-Security-Token", valid_402657766
  var valid_402657767 = header.getOrDefault("X-Amz-Signature")
  valid_402657767 = validateParameter(valid_402657767, JString,
                                      required = false, default = nil)
  if valid_402657767 != nil:
    section.add "X-Amz-Signature", valid_402657767
  var valid_402657768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657768 = validateParameter(valid_402657768, JString,
                                      required = false, default = nil)
  if valid_402657768 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657768
  var valid_402657769 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657769 = validateParameter(valid_402657769, JString,
                                      required = false, default = nil)
  if valid_402657769 != nil:
    section.add "X-Amz-Algorithm", valid_402657769
  var valid_402657770 = header.getOrDefault("X-Amz-Date")
  valid_402657770 = validateParameter(valid_402657770, JString,
                                      required = false, default = nil)
  if valid_402657770 != nil:
    section.add "X-Amz-Date", valid_402657770
  var valid_402657771 = header.getOrDefault("X-Amz-Credential")
  valid_402657771 = validateParameter(valid_402657771, JString,
                                      required = false, default = nil)
  if valid_402657771 != nil:
    section.add "X-Amz-Credential", valid_402657771
  var valid_402657772 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657772 = validateParameter(valid_402657772, JString,
                                      required = false, default = nil)
  if valid_402657772 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657772
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657773: Call_GetUserSettings_402657761; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves settings for the specified user ID, such as any associated phone number settings.
                                                                                         ## 
  let valid = call_402657773.validator(path, query, header, formData, body, _)
  let scheme = call_402657773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657773.makeUrl(scheme.get, call_402657773.host, call_402657773.base,
                                   call_402657773.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657773, uri, valid, _)

proc call*(call_402657774: Call_GetUserSettings_402657761; accountId: string;
           userId: string): Recallable =
  ## getUserSettings
  ## Retrieves settings for the specified user ID, such as any associated phone number settings.
  ##   
                                                                                                ## accountId: string (required)
                                                                                                ##            
                                                                                                ## : 
                                                                                                ## The 
                                                                                                ## Amazon 
                                                                                                ## Chime 
                                                                                                ## account 
                                                                                                ## ID.
  ##   
                                                                                                      ## userId: string (required)
                                                                                                      ##         
                                                                                                      ## : 
                                                                                                      ## The 
                                                                                                      ## user 
                                                                                                      ## ID.
  var path_402657775 = newJObject()
  add(path_402657775, "accountId", newJString(accountId))
  add(path_402657775, "userId", newJString(userId))
  result = call_402657774.call(path_402657775, nil, nil, nil, nil)

var getUserSettings* = Call_GetUserSettings_402657761(name: "getUserSettings",
    meth: HttpMethod.HttpGet, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users/{userId}/settings",
    validator: validate_GetUserSettings_402657762, base: "/",
    makeUrl: url_GetUserSettings_402657763, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutVoiceConnectorLoggingConfiguration_402657807 = ref object of OpenApiRestCall_402656044
proc url_PutVoiceConnectorLoggingConfiguration_402657809(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/logging-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutVoiceConnectorLoggingConfiguration_402657808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657810 = path.getOrDefault("voiceConnectorId")
  valid_402657810 = validateParameter(valid_402657810, JString, required = true,
                                      default = nil)
  if valid_402657810 != nil:
    section.add "voiceConnectorId", valid_402657810
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657811 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657811 = validateParameter(valid_402657811, JString,
                                      required = false, default = nil)
  if valid_402657811 != nil:
    section.add "X-Amz-Security-Token", valid_402657811
  var valid_402657812 = header.getOrDefault("X-Amz-Signature")
  valid_402657812 = validateParameter(valid_402657812, JString,
                                      required = false, default = nil)
  if valid_402657812 != nil:
    section.add "X-Amz-Signature", valid_402657812
  var valid_402657813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657813 = validateParameter(valid_402657813, JString,
                                      required = false, default = nil)
  if valid_402657813 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657813
  var valid_402657814 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657814 = validateParameter(valid_402657814, JString,
                                      required = false, default = nil)
  if valid_402657814 != nil:
    section.add "X-Amz-Algorithm", valid_402657814
  var valid_402657815 = header.getOrDefault("X-Amz-Date")
  valid_402657815 = validateParameter(valid_402657815, JString,
                                      required = false, default = nil)
  if valid_402657815 != nil:
    section.add "X-Amz-Date", valid_402657815
  var valid_402657816 = header.getOrDefault("X-Amz-Credential")
  valid_402657816 = validateParameter(valid_402657816, JString,
                                      required = false, default = nil)
  if valid_402657816 != nil:
    section.add "X-Amz-Credential", valid_402657816
  var valid_402657817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657817 = validateParameter(valid_402657817, JString,
                                      required = false, default = nil)
  if valid_402657817 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657817
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657819: Call_PutVoiceConnectorLoggingConfiguration_402657807;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
                                                                                         ## 
  let valid = call_402657819.validator(path, query, header, formData, body, _)
  let scheme = call_402657819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657819.makeUrl(scheme.get, call_402657819.host, call_402657819.base,
                                   call_402657819.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657819, uri, valid, _)

proc call*(call_402657820: Call_PutVoiceConnectorLoggingConfiguration_402657807;
           body: JsonNode; voiceConnectorId: string): Recallable =
  ## putVoiceConnectorLoggingConfiguration
  ## Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
  ##   
                                                                                                                                                                                                 ## body: JObject (required)
  ##   
                                                                                                                                                                                                                            ## voiceConnectorId: string (required)
                                                                                                                                                                                                                            ##                   
                                                                                                                                                                                                                            ## : 
                                                                                                                                                                                                                            ## The 
                                                                                                                                                                                                                            ## Amazon 
                                                                                                                                                                                                                            ## Chime 
                                                                                                                                                                                                                            ## Voice 
                                                                                                                                                                                                                            ## Connector 
                                                                                                                                                                                                                            ## ID.
  var path_402657821 = newJObject()
  var body_402657822 = newJObject()
  if body != nil:
    body_402657822 = body
  add(path_402657821, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657820.call(path_402657821, nil, nil, nil, body_402657822)

var putVoiceConnectorLoggingConfiguration* = Call_PutVoiceConnectorLoggingConfiguration_402657807(
    name: "putVoiceConnectorLoggingConfiguration", meth: HttpMethod.HttpPut,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/logging-configuration",
    validator: validate_PutVoiceConnectorLoggingConfiguration_402657808,
    base: "/", makeUrl: url_PutVoiceConnectorLoggingConfiguration_402657809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorLoggingConfiguration_402657793 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorLoggingConfiguration_402657795(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/logging-configuration")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorLoggingConfiguration_402657794(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657796 = path.getOrDefault("voiceConnectorId")
  valid_402657796 = validateParameter(valid_402657796, JString, required = true,
                                      default = nil)
  if valid_402657796 != nil:
    section.add "voiceConnectorId", valid_402657796
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657797 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657797 = validateParameter(valid_402657797, JString,
                                      required = false, default = nil)
  if valid_402657797 != nil:
    section.add "X-Amz-Security-Token", valid_402657797
  var valid_402657798 = header.getOrDefault("X-Amz-Signature")
  valid_402657798 = validateParameter(valid_402657798, JString,
                                      required = false, default = nil)
  if valid_402657798 != nil:
    section.add "X-Amz-Signature", valid_402657798
  var valid_402657799 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657799 = validateParameter(valid_402657799, JString,
                                      required = false, default = nil)
  if valid_402657799 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657799
  var valid_402657800 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657800 = validateParameter(valid_402657800, JString,
                                      required = false, default = nil)
  if valid_402657800 != nil:
    section.add "X-Amz-Algorithm", valid_402657800
  var valid_402657801 = header.getOrDefault("X-Amz-Date")
  valid_402657801 = validateParameter(valid_402657801, JString,
                                      required = false, default = nil)
  if valid_402657801 != nil:
    section.add "X-Amz-Date", valid_402657801
  var valid_402657802 = header.getOrDefault("X-Amz-Credential")
  valid_402657802 = validateParameter(valid_402657802, JString,
                                      required = false, default = nil)
  if valid_402657802 != nil:
    section.add "X-Amz-Credential", valid_402657802
  var valid_402657803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657803 = validateParameter(valid_402657803, JString,
                                      required = false, default = nil)
  if valid_402657803 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657803
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657804: Call_GetVoiceConnectorLoggingConfiguration_402657793;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
                                                                                         ## 
  let valid = call_402657804.validator(path, query, header, formData, body, _)
  let scheme = call_402657804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657804.makeUrl(scheme.get, call_402657804.host, call_402657804.base,
                                   call_402657804.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657804, uri, valid, _)

proc call*(call_402657805: Call_GetVoiceConnectorLoggingConfiguration_402657793;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnectorLoggingConfiguration
  ## Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
  ##   
                                                                                                                                                                                  ## voiceConnectorId: string (required)
                                                                                                                                                                                  ##                   
                                                                                                                                                                                  ## : 
                                                                                                                                                                                  ## The 
                                                                                                                                                                                  ## Amazon 
                                                                                                                                                                                  ## Chime 
                                                                                                                                                                                  ## Voice 
                                                                                                                                                                                  ## Connector 
                                                                                                                                                                                  ## ID.
  var path_402657806 = newJObject()
  add(path_402657806, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657805.call(path_402657806, nil, nil, nil, nil)

var getVoiceConnectorLoggingConfiguration* = Call_GetVoiceConnectorLoggingConfiguration_402657793(
    name: "getVoiceConnectorLoggingConfiguration", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/logging-configuration",
    validator: validate_GetVoiceConnectorLoggingConfiguration_402657794,
    base: "/", makeUrl: url_GetVoiceConnectorLoggingConfiguration_402657795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetVoiceConnectorTerminationHealth_402657823 = ref object of OpenApiRestCall_402656044
proc url_GetVoiceConnectorTerminationHealth_402657825(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/termination/health")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_GetVoiceConnectorTerminationHealth_402657824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657826 = path.getOrDefault("voiceConnectorId")
  valid_402657826 = validateParameter(valid_402657826, JString, required = true,
                                      default = nil)
  if valid_402657826 != nil:
    section.add "voiceConnectorId", valid_402657826
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657827 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657827 = validateParameter(valid_402657827, JString,
                                      required = false, default = nil)
  if valid_402657827 != nil:
    section.add "X-Amz-Security-Token", valid_402657827
  var valid_402657828 = header.getOrDefault("X-Amz-Signature")
  valid_402657828 = validateParameter(valid_402657828, JString,
                                      required = false, default = nil)
  if valid_402657828 != nil:
    section.add "X-Amz-Signature", valid_402657828
  var valid_402657829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657829 = validateParameter(valid_402657829, JString,
                                      required = false, default = nil)
  if valid_402657829 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657829
  var valid_402657830 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657830 = validateParameter(valid_402657830, JString,
                                      required = false, default = nil)
  if valid_402657830 != nil:
    section.add "X-Amz-Algorithm", valid_402657830
  var valid_402657831 = header.getOrDefault("X-Amz-Date")
  valid_402657831 = validateParameter(valid_402657831, JString,
                                      required = false, default = nil)
  if valid_402657831 != nil:
    section.add "X-Amz-Date", valid_402657831
  var valid_402657832 = header.getOrDefault("X-Amz-Credential")
  valid_402657832 = validateParameter(valid_402657832, JString,
                                      required = false, default = nil)
  if valid_402657832 != nil:
    section.add "X-Amz-Credential", valid_402657832
  var valid_402657833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657833 = validateParameter(valid_402657833, JString,
                                      required = false, default = nil)
  if valid_402657833 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657833
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657834: Call_GetVoiceConnectorTerminationHealth_402657823;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657834.validator(path, query, header, formData, body, _)
  let scheme = call_402657834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657834.makeUrl(scheme.get, call_402657834.host, call_402657834.base,
                                   call_402657834.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657834, uri, valid, _)

proc call*(call_402657835: Call_GetVoiceConnectorTerminationHealth_402657823;
           voiceConnectorId: string): Recallable =
  ## getVoiceConnectorTerminationHealth
  ## Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
  ##   
                                                                                                                                                                        ## voiceConnectorId: string (required)
                                                                                                                                                                        ##                   
                                                                                                                                                                        ## : 
                                                                                                                                                                        ## The 
                                                                                                                                                                        ## Amazon 
                                                                                                                                                                        ## Chime 
                                                                                                                                                                        ## Voice 
                                                                                                                                                                        ## Connector 
                                                                                                                                                                        ## ID.
  var path_402657836 = newJObject()
  add(path_402657836, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657835.call(path_402657836, nil, nil, nil, nil)

var getVoiceConnectorTerminationHealth* = Call_GetVoiceConnectorTerminationHealth_402657823(
    name: "getVoiceConnectorTerminationHealth", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/termination/health",
    validator: validate_GetVoiceConnectorTerminationHealth_402657824, base: "/",
    makeUrl: url_GetVoiceConnectorTerminationHealth_402657825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_InviteUsers_402657837 = ref object of OpenApiRestCall_402656044
proc url_InviteUsers_402657839(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users#operation=add")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_InviteUsers_402657838(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime <code>Team</code> account. Only <code>Team</code> account types are currently supported for this action. 
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657840 = path.getOrDefault("accountId")
  valid_402657840 = validateParameter(valid_402657840, JString, required = true,
                                      default = nil)
  if valid_402657840 != nil:
    section.add "accountId", valid_402657840
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657841 = query.getOrDefault("operation")
  valid_402657841 = validateParameter(valid_402657841, JString, required = true,
                                      default = newJString("add"))
  if valid_402657841 != nil:
    section.add "operation", valid_402657841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657842 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657842 = validateParameter(valid_402657842, JString,
                                      required = false, default = nil)
  if valid_402657842 != nil:
    section.add "X-Amz-Security-Token", valid_402657842
  var valid_402657843 = header.getOrDefault("X-Amz-Signature")
  valid_402657843 = validateParameter(valid_402657843, JString,
                                      required = false, default = nil)
  if valid_402657843 != nil:
    section.add "X-Amz-Signature", valid_402657843
  var valid_402657844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657844 = validateParameter(valid_402657844, JString,
                                      required = false, default = nil)
  if valid_402657844 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657844
  var valid_402657845 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657845 = validateParameter(valid_402657845, JString,
                                      required = false, default = nil)
  if valid_402657845 != nil:
    section.add "X-Amz-Algorithm", valid_402657845
  var valid_402657846 = header.getOrDefault("X-Amz-Date")
  valid_402657846 = validateParameter(valid_402657846, JString,
                                      required = false, default = nil)
  if valid_402657846 != nil:
    section.add "X-Amz-Date", valid_402657846
  var valid_402657847 = header.getOrDefault("X-Amz-Credential")
  valid_402657847 = validateParameter(valid_402657847, JString,
                                      required = false, default = nil)
  if valid_402657847 != nil:
    section.add "X-Amz-Credential", valid_402657847
  var valid_402657848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657848 = validateParameter(valid_402657848, JString,
                                      required = false, default = nil)
  if valid_402657848 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657848
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657850: Call_InviteUsers_402657837; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime <code>Team</code> account. Only <code>Team</code> account types are currently supported for this action. 
                                                                                         ## 
  let valid = call_402657850.validator(path, query, header, formData, body, _)
  let scheme = call_402657850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657850.makeUrl(scheme.get, call_402657850.host, call_402657850.base,
                                   call_402657850.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657850, uri, valid, _)

proc call*(call_402657851: Call_InviteUsers_402657837; body: JsonNode;
           accountId: string; operation: string = "add"): Recallable =
  ## inviteUsers
  ## Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime <code>Team</code> account. Only <code>Team</code> account types are currently supported for this action. 
  ##   
                                                                                                                                                                                                ## body: JObject (required)
  ##   
                                                                                                                                                                                                                           ## accountId: string (required)
                                                                                                                                                                                                                           ##            
                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                           ## Amazon 
                                                                                                                                                                                                                           ## Chime 
                                                                                                                                                                                                                           ## account 
                                                                                                                                                                                                                           ## ID.
  ##   
                                                                                                                                                                                                                                 ## operation: string (required)
  var path_402657852 = newJObject()
  var query_402657853 = newJObject()
  var body_402657854 = newJObject()
  if body != nil:
    body_402657854 = body
  add(path_402657852, "accountId", newJString(accountId))
  add(query_402657853, "operation", newJString(operation))
  result = call_402657851.call(path_402657852, query_402657853, nil, nil, body_402657854)

var inviteUsers* = Call_InviteUsers_402657837(name: "inviteUsers",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users#operation=add",
    validator: validate_InviteUsers_402657838, base: "/",
    makeUrl: url_InviteUsers_402657839, schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListPhoneNumbers_402657855 = ref object of OpenApiRestCall_402656044
proc url_ListPhoneNumbers_402657857(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_ListPhoneNumbers_402657856(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
                ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   max-results: JInt
                                  ##              : The maximum number of results to return in a single call.
  ##   
                                                                                                             ## status: JString
                                                                                                             ##         
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## phone 
                                                                                                             ## number 
                                                                                                             ## status.
  ##   
                                                                                                                       ## MaxResults: JString
                                                                                                                       ##             
                                                                                                                       ## : 
                                                                                                                       ## Pagination 
                                                                                                                       ## limit
  ##   
                                                                                                                               ## filter-value: JString
                                                                                                                               ##               
                                                                                                                               ## : 
                                                                                                                               ## The 
                                                                                                                               ## value 
                                                                                                                               ## to 
                                                                                                                               ## use 
                                                                                                                               ## for 
                                                                                                                               ## the 
                                                                                                                               ## filter.
  ##   
                                                                                                                                         ## product-type: JString
                                                                                                                                         ##               
                                                                                                                                         ## : 
                                                                                                                                         ## The 
                                                                                                                                         ## phone 
                                                                                                                                         ## number 
                                                                                                                                         ## product 
                                                                                                                                         ## type.
  ##   
                                                                                                                                                 ## NextToken: JString
                                                                                                                                                 ##            
                                                                                                                                                 ## : 
                                                                                                                                                 ## Pagination 
                                                                                                                                                 ## token
  ##   
                                                                                                                                                         ## filter-name: JString
                                                                                                                                                         ##              
                                                                                                                                                         ## : 
                                                                                                                                                         ## The 
                                                                                                                                                         ## filter 
                                                                                                                                                         ## to 
                                                                                                                                                         ## use 
                                                                                                                                                         ## to 
                                                                                                                                                         ## limit 
                                                                                                                                                         ## the 
                                                                                                                                                         ## number 
                                                                                                                                                         ## of 
                                                                                                                                                         ## results.
  ##   
                                                                                                                                                                    ## next-token: JString
                                                                                                                                                                    ##             
                                                                                                                                                                    ## : 
                                                                                                                                                                    ## The 
                                                                                                                                                                    ## token 
                                                                                                                                                                    ## to 
                                                                                                                                                                    ## use 
                                                                                                                                                                    ## to 
                                                                                                                                                                    ## retrieve 
                                                                                                                                                                    ## the 
                                                                                                                                                                    ## next 
                                                                                                                                                                    ## page 
                                                                                                                                                                    ## of 
                                                                                                                                                                    ## results.
  section = newJObject()
  var valid_402657858 = query.getOrDefault("max-results")
  valid_402657858 = validateParameter(valid_402657858, JInt, required = false,
                                      default = nil)
  if valid_402657858 != nil:
    section.add "max-results", valid_402657858
  var valid_402657859 = query.getOrDefault("status")
  valid_402657859 = validateParameter(valid_402657859, JString,
                                      required = false,
                                      default = newJString("AcquireInProgress"))
  if valid_402657859 != nil:
    section.add "status", valid_402657859
  var valid_402657860 = query.getOrDefault("MaxResults")
  valid_402657860 = validateParameter(valid_402657860, JString,
                                      required = false, default = nil)
  if valid_402657860 != nil:
    section.add "MaxResults", valid_402657860
  var valid_402657861 = query.getOrDefault("filter-value")
  valid_402657861 = validateParameter(valid_402657861, JString,
                                      required = false, default = nil)
  if valid_402657861 != nil:
    section.add "filter-value", valid_402657861
  var valid_402657862 = query.getOrDefault("product-type")
  valid_402657862 = validateParameter(valid_402657862, JString,
                                      required = false,
                                      default = newJString("BusinessCalling"))
  if valid_402657862 != nil:
    section.add "product-type", valid_402657862
  var valid_402657863 = query.getOrDefault("NextToken")
  valid_402657863 = validateParameter(valid_402657863, JString,
                                      required = false, default = nil)
  if valid_402657863 != nil:
    section.add "NextToken", valid_402657863
  var valid_402657864 = query.getOrDefault("filter-name")
  valid_402657864 = validateParameter(valid_402657864, JString,
                                      required = false,
                                      default = newJString("AccountId"))
  if valid_402657864 != nil:
    section.add "filter-name", valid_402657864
  var valid_402657865 = query.getOrDefault("next-token")
  valid_402657865 = validateParameter(valid_402657865, JString,
                                      required = false, default = nil)
  if valid_402657865 != nil:
    section.add "next-token", valid_402657865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657866 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657866 = validateParameter(valid_402657866, JString,
                                      required = false, default = nil)
  if valid_402657866 != nil:
    section.add "X-Amz-Security-Token", valid_402657866
  var valid_402657867 = header.getOrDefault("X-Amz-Signature")
  valid_402657867 = validateParameter(valid_402657867, JString,
                                      required = false, default = nil)
  if valid_402657867 != nil:
    section.add "X-Amz-Signature", valid_402657867
  var valid_402657868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657868 = validateParameter(valid_402657868, JString,
                                      required = false, default = nil)
  if valid_402657868 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657868
  var valid_402657869 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657869 = validateParameter(valid_402657869, JString,
                                      required = false, default = nil)
  if valid_402657869 != nil:
    section.add "X-Amz-Algorithm", valid_402657869
  var valid_402657870 = header.getOrDefault("X-Amz-Date")
  valid_402657870 = validateParameter(valid_402657870, JString,
                                      required = false, default = nil)
  if valid_402657870 != nil:
    section.add "X-Amz-Date", valid_402657870
  var valid_402657871 = header.getOrDefault("X-Amz-Credential")
  valid_402657871 = validateParameter(valid_402657871, JString,
                                      required = false, default = nil)
  if valid_402657871 != nil:
    section.add "X-Amz-Credential", valid_402657871
  var valid_402657872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657872 = validateParameter(valid_402657872, JString,
                                      required = false, default = nil)
  if valid_402657872 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657873: Call_ListPhoneNumbers_402657855;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
                                                                                         ## 
  let valid = call_402657873.validator(path, query, header, formData, body, _)
  let scheme = call_402657873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657873.makeUrl(scheme.get, call_402657873.host, call_402657873.base,
                                   call_402657873.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657873, uri, valid, _)

proc call*(call_402657874: Call_ListPhoneNumbers_402657855; maxResults: int = 0;
           status: string = "AcquireInProgress"; MaxResults: string = "";
           filterValue: string = ""; productType: string = "BusinessCalling";
           NextToken: string = ""; filterName: string = "AccountId";
           nextToken: string = ""): Recallable =
  ## listPhoneNumbers
  ## Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
  ##   
                                                                                                                                                            ## maxResults: int
                                                                                                                                                            ##             
                                                                                                                                                            ## : 
                                                                                                                                                            ## The 
                                                                                                                                                            ## maximum 
                                                                                                                                                            ## number 
                                                                                                                                                            ## of 
                                                                                                                                                            ## results 
                                                                                                                                                            ## to 
                                                                                                                                                            ## return 
                                                                                                                                                            ## in 
                                                                                                                                                            ## a 
                                                                                                                                                            ## single 
                                                                                                                                                            ## call.
  ##   
                                                                                                                                                                    ## status: string
                                                                                                                                                                    ##         
                                                                                                                                                                    ## : 
                                                                                                                                                                    ## The 
                                                                                                                                                                    ## phone 
                                                                                                                                                                    ## number 
                                                                                                                                                                    ## status.
  ##   
                                                                                                                                                                              ## MaxResults: string
                                                                                                                                                                              ##             
                                                                                                                                                                              ## : 
                                                                                                                                                                              ## Pagination 
                                                                                                                                                                              ## limit
  ##   
                                                                                                                                                                                      ## filterValue: string
                                                                                                                                                                                      ##              
                                                                                                                                                                                      ## : 
                                                                                                                                                                                      ## The 
                                                                                                                                                                                      ## value 
                                                                                                                                                                                      ## to 
                                                                                                                                                                                      ## use 
                                                                                                                                                                                      ## for 
                                                                                                                                                                                      ## the 
                                                                                                                                                                                      ## filter.
  ##   
                                                                                                                                                                                                ## productType: string
                                                                                                                                                                                                ##              
                                                                                                                                                                                                ## : 
                                                                                                                                                                                                ## The 
                                                                                                                                                                                                ## phone 
                                                                                                                                                                                                ## number 
                                                                                                                                                                                                ## product 
                                                                                                                                                                                                ## type.
  ##   
                                                                                                                                                                                                        ## NextToken: string
                                                                                                                                                                                                        ##            
                                                                                                                                                                                                        ## : 
                                                                                                                                                                                                        ## Pagination 
                                                                                                                                                                                                        ## token
  ##   
                                                                                                                                                                                                                ## filterName: string
                                                                                                                                                                                                                ##             
                                                                                                                                                                                                                ## : 
                                                                                                                                                                                                                ## The 
                                                                                                                                                                                                                ## filter 
                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                ## use 
                                                                                                                                                                                                                ## to 
                                                                                                                                                                                                                ## limit 
                                                                                                                                                                                                                ## the 
                                                                                                                                                                                                                ## number 
                                                                                                                                                                                                                ## of 
                                                                                                                                                                                                                ## results.
  ##   
                                                                                                                                                                                                                           ## nextToken: string
                                                                                                                                                                                                                           ##            
                                                                                                                                                                                                                           ## : 
                                                                                                                                                                                                                           ## The 
                                                                                                                                                                                                                           ## token 
                                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                                           ## use 
                                                                                                                                                                                                                           ## to 
                                                                                                                                                                                                                           ## retrieve 
                                                                                                                                                                                                                           ## the 
                                                                                                                                                                                                                           ## next 
                                                                                                                                                                                                                           ## page 
                                                                                                                                                                                                                           ## of 
                                                                                                                                                                                                                           ## results.
  var query_402657875 = newJObject()
  add(query_402657875, "max-results", newJInt(maxResults))
  add(query_402657875, "status", newJString(status))
  add(query_402657875, "MaxResults", newJString(MaxResults))
  add(query_402657875, "filter-value", newJString(filterValue))
  add(query_402657875, "product-type", newJString(productType))
  add(query_402657875, "NextToken", newJString(NextToken))
  add(query_402657875, "filter-name", newJString(filterName))
  add(query_402657875, "next-token", newJString(nextToken))
  result = call_402657874.call(nil, query_402657875, nil, nil, nil)

var listPhoneNumbers* = Call_ListPhoneNumbers_402657855(
    name: "listPhoneNumbers", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/phone-numbers",
    validator: validate_ListPhoneNumbers_402657856, base: "/",
    makeUrl: url_ListPhoneNumbers_402657857,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ListVoiceConnectorTerminationCredentials_402657876 = ref object of OpenApiRestCall_402656044
proc url_ListVoiceConnectorTerminationCredentials_402657878(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"),
                 (kind: ConstantSegment, value: "/termination/credentials")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ListVoiceConnectorTerminationCredentials_402657877(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists the SIP credentials for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657879 = path.getOrDefault("voiceConnectorId")
  valid_402657879 = validateParameter(valid_402657879, JString, required = true,
                                      default = nil)
  if valid_402657879 != nil:
    section.add "voiceConnectorId", valid_402657879
  result.add "path", section
  section = newJObject()
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657880 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657880 = validateParameter(valid_402657880, JString,
                                      required = false, default = nil)
  if valid_402657880 != nil:
    section.add "X-Amz-Security-Token", valid_402657880
  var valid_402657881 = header.getOrDefault("X-Amz-Signature")
  valid_402657881 = validateParameter(valid_402657881, JString,
                                      required = false, default = nil)
  if valid_402657881 != nil:
    section.add "X-Amz-Signature", valid_402657881
  var valid_402657882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657882 = validateParameter(valid_402657882, JString,
                                      required = false, default = nil)
  if valid_402657882 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657882
  var valid_402657883 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657883 = validateParameter(valid_402657883, JString,
                                      required = false, default = nil)
  if valid_402657883 != nil:
    section.add "X-Amz-Algorithm", valid_402657883
  var valid_402657884 = header.getOrDefault("X-Amz-Date")
  valid_402657884 = validateParameter(valid_402657884, JString,
                                      required = false, default = nil)
  if valid_402657884 != nil:
    section.add "X-Amz-Date", valid_402657884
  var valid_402657885 = header.getOrDefault("X-Amz-Credential")
  valid_402657885 = validateParameter(valid_402657885, JString,
                                      required = false, default = nil)
  if valid_402657885 != nil:
    section.add "X-Amz-Credential", valid_402657885
  var valid_402657886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657886 = validateParameter(valid_402657886, JString,
                                      required = false, default = nil)
  if valid_402657886 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657886
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657887: Call_ListVoiceConnectorTerminationCredentials_402657876;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the SIP credentials for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657887.validator(path, query, header, formData, body, _)
  let scheme = call_402657887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657887.makeUrl(scheme.get, call_402657887.host, call_402657887.base,
                                   call_402657887.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657887, uri, valid, _)

proc call*(call_402657888: Call_ListVoiceConnectorTerminationCredentials_402657876;
           voiceConnectorId: string): Recallable =
  ## listVoiceConnectorTerminationCredentials
  ## Lists the SIP credentials for the specified Amazon Chime Voice Connector.
  ##   
                                                                              ## voiceConnectorId: string (required)
                                                                              ##                   
                                                                              ## : 
                                                                              ## The 
                                                                              ## Amazon 
                                                                              ## Chime 
                                                                              ## Voice 
                                                                              ## Connector 
                                                                              ## ID.
  var path_402657889 = newJObject()
  add(path_402657889, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657888.call(path_402657889, nil, nil, nil, nil)

var listVoiceConnectorTerminationCredentials* = Call_ListVoiceConnectorTerminationCredentials_402657876(
    name: "listVoiceConnectorTerminationCredentials", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com",
    route: "/voice-connectors/{voiceConnectorId}/termination/credentials",
    validator: validate_ListVoiceConnectorTerminationCredentials_402657877,
    base: "/", makeUrl: url_ListVoiceConnectorTerminationCredentials_402657878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_LogoutUser_402657890 = ref object of OpenApiRestCall_402656044
proc url_LogoutUser_402657892(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"),
                 (kind: ConstantSegment, value: "#operation=logout")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_LogoutUser_402657891(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Logs out the specified user from all of the devices they are currently logged into.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657893 = path.getOrDefault("accountId")
  valid_402657893 = validateParameter(valid_402657893, JString, required = true,
                                      default = nil)
  if valid_402657893 != nil:
    section.add "accountId", valid_402657893
  var valid_402657894 = path.getOrDefault("userId")
  valid_402657894 = validateParameter(valid_402657894, JString, required = true,
                                      default = nil)
  if valid_402657894 != nil:
    section.add "userId", valid_402657894
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657895 = query.getOrDefault("operation")
  valid_402657895 = validateParameter(valid_402657895, JString, required = true,
                                      default = newJString("logout"))
  if valid_402657895 != nil:
    section.add "operation", valid_402657895
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657896 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657896 = validateParameter(valid_402657896, JString,
                                      required = false, default = nil)
  if valid_402657896 != nil:
    section.add "X-Amz-Security-Token", valid_402657896
  var valid_402657897 = header.getOrDefault("X-Amz-Signature")
  valid_402657897 = validateParameter(valid_402657897, JString,
                                      required = false, default = nil)
  if valid_402657897 != nil:
    section.add "X-Amz-Signature", valid_402657897
  var valid_402657898 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657898 = validateParameter(valid_402657898, JString,
                                      required = false, default = nil)
  if valid_402657898 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657898
  var valid_402657899 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657899 = validateParameter(valid_402657899, JString,
                                      required = false, default = nil)
  if valid_402657899 != nil:
    section.add "X-Amz-Algorithm", valid_402657899
  var valid_402657900 = header.getOrDefault("X-Amz-Date")
  valid_402657900 = validateParameter(valid_402657900, JString,
                                      required = false, default = nil)
  if valid_402657900 != nil:
    section.add "X-Amz-Date", valid_402657900
  var valid_402657901 = header.getOrDefault("X-Amz-Credential")
  valid_402657901 = validateParameter(valid_402657901, JString,
                                      required = false, default = nil)
  if valid_402657901 != nil:
    section.add "X-Amz-Credential", valid_402657901
  var valid_402657902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657902 = validateParameter(valid_402657902, JString,
                                      required = false, default = nil)
  if valid_402657902 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657902
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657903: Call_LogoutUser_402657890; path: JsonNode = nil;
           query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Logs out the specified user from all of the devices they are currently logged into.
                                                                                         ## 
  let valid = call_402657903.validator(path, query, header, formData, body, _)
  let scheme = call_402657903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657903.makeUrl(scheme.get, call_402657903.host, call_402657903.base,
                                   call_402657903.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657903, uri, valid, _)

proc call*(call_402657904: Call_LogoutUser_402657890; accountId: string;
           userId: string; operation: string = "logout"): Recallable =
  ## logoutUser
  ## Logs out the specified user from all of the devices they are currently logged into.
  ##   
                                                                                        ## accountId: string (required)
                                                                                        ##            
                                                                                        ## : 
                                                                                        ## The 
                                                                                        ## Amazon 
                                                                                        ## Chime 
                                                                                        ## account 
                                                                                        ## ID.
  ##   
                                                                                              ## userId: string (required)
                                                                                              ##         
                                                                                              ## : 
                                                                                              ## The 
                                                                                              ## user 
                                                                                              ## ID.
  ##   
                                                                                                    ## operation: string (required)
  var path_402657905 = newJObject()
  var query_402657906 = newJObject()
  add(path_402657905, "accountId", newJString(accountId))
  add(path_402657905, "userId", newJString(userId))
  add(query_402657906, "operation", newJString(operation))
  result = call_402657904.call(path_402657905, query_402657906, nil, nil, nil)

var logoutUser* = Call_LogoutUser_402657890(name: "logoutUser",
    meth: HttpMethod.HttpPost, host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users/{userId}#operation=logout",
    validator: validate_LogoutUser_402657891, base: "/",
    makeUrl: url_LogoutUser_402657892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PutVoiceConnectorTerminationCredentials_402657907 = ref object of OpenApiRestCall_402656044
proc url_PutVoiceConnectorTerminationCredentials_402657909(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "voiceConnectorId" in path,
         "`voiceConnectorId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/voice-connectors/"),
                 (kind: VariableSegment, value: "voiceConnectorId"), (
        kind: ConstantSegment, value: "/termination/credentials#operation=put")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_PutVoiceConnectorTerminationCredentials_402657908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
                                            ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   voiceConnectorId: JString (required)
                                 ##                   : The Amazon Chime Voice Connector ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `voiceConnectorId` field"
  var valid_402657910 = path.getOrDefault("voiceConnectorId")
  valid_402657910 = validateParameter(valid_402657910, JString, required = true,
                                      default = nil)
  if valid_402657910 != nil:
    section.add "voiceConnectorId", valid_402657910
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657911 = query.getOrDefault("operation")
  valid_402657911 = validateParameter(valid_402657911, JString, required = true,
                                      default = newJString("put"))
  if valid_402657911 != nil:
    section.add "operation", valid_402657911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657912 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657912 = validateParameter(valid_402657912, JString,
                                      required = false, default = nil)
  if valid_402657912 != nil:
    section.add "X-Amz-Security-Token", valid_402657912
  var valid_402657913 = header.getOrDefault("X-Amz-Signature")
  valid_402657913 = validateParameter(valid_402657913, JString,
                                      required = false, default = nil)
  if valid_402657913 != nil:
    section.add "X-Amz-Signature", valid_402657913
  var valid_402657914 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657914 = validateParameter(valid_402657914, JString,
                                      required = false, default = nil)
  if valid_402657914 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657914
  var valid_402657915 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657915 = validateParameter(valid_402657915, JString,
                                      required = false, default = nil)
  if valid_402657915 != nil:
    section.add "X-Amz-Algorithm", valid_402657915
  var valid_402657916 = header.getOrDefault("X-Amz-Date")
  valid_402657916 = validateParameter(valid_402657916, JString,
                                      required = false, default = nil)
  if valid_402657916 != nil:
    section.add "X-Amz-Date", valid_402657916
  var valid_402657917 = header.getOrDefault("X-Amz-Credential")
  valid_402657917 = validateParameter(valid_402657917, JString,
                                      required = false, default = nil)
  if valid_402657917 != nil:
    section.add "X-Amz-Credential", valid_402657917
  var valid_402657918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657918 = validateParameter(valid_402657918, JString,
                                      required = false, default = nil)
  if valid_402657918 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657918
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  ## parameters in `body` object:
  ##   body: JObject (required)
  if `==`(_, ""): assert body != nil, "body argument is necessary"
  if `==`(_, ""):
    section = validateParameter(body, JObject, required = true, default = nil)
  if body != nil:
    result.add "body", body

proc call*(call_402657920: Call_PutVoiceConnectorTerminationCredentials_402657907;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
                                                                                         ## 
  let valid = call_402657920.validator(path, query, header, formData, body, _)
  let scheme = call_402657920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657920.makeUrl(scheme.get, call_402657920.host, call_402657920.base,
                                   call_402657920.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657920, uri, valid, _)

proc call*(call_402657921: Call_PutVoiceConnectorTerminationCredentials_402657907;
           body: JsonNode; voiceConnectorId: string; operation: string = "put"): Recallable =
  ## putVoiceConnectorTerminationCredentials
  ## Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
  ##   
                                                                                     ## body: JObject (required)
  ##   
                                                                                                                ## operation: string (required)
  ##   
                                                                                                                                               ## voiceConnectorId: string (required)
                                                                                                                                               ##                   
                                                                                                                                               ## : 
                                                                                                                                               ## The 
                                                                                                                                               ## Amazon 
                                                                                                                                               ## Chime 
                                                                                                                                               ## Voice 
                                                                                                                                               ## Connector 
                                                                                                                                               ## ID.
  var path_402657922 = newJObject()
  var query_402657923 = newJObject()
  var body_402657924 = newJObject()
  if body != nil:
    body_402657924 = body
  add(query_402657923, "operation", newJString(operation))
  add(path_402657922, "voiceConnectorId", newJString(voiceConnectorId))
  result = call_402657921.call(path_402657922, query_402657923, nil, nil, body_402657924)

var putVoiceConnectorTerminationCredentials* = Call_PutVoiceConnectorTerminationCredentials_402657907(
    name: "putVoiceConnectorTerminationCredentials", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/voice-connectors/{voiceConnectorId}/termination/credentials#operation=put",
    validator: validate_PutVoiceConnectorTerminationCredentials_402657908,
    base: "/", makeUrl: url_PutVoiceConnectorTerminationCredentials_402657909,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RegenerateSecurityToken_402657925 = ref object of OpenApiRestCall_402656044
proc url_RegenerateSecurityToken_402657927(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "botId" in path, "`botId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/bots/"),
                 (kind: VariableSegment, value: "botId"), (
        kind: ConstantSegment, value: "#operation=regenerate-security-token")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_RegenerateSecurityToken_402657926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Regenerates the security token for a bot.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   botId: JString (required)
                                 ##        : The bot ID.
  ##   accountId: JString (required)
                                                        ##            : The Amazon Chime account ID.
  section = newJObject()
  assert path != nil, "path argument is necessary due to required `botId` field"
  var valid_402657928 = path.getOrDefault("botId")
  valid_402657928 = validateParameter(valid_402657928, JString, required = true,
                                      default = nil)
  if valid_402657928 != nil:
    section.add "botId", valid_402657928
  var valid_402657929 = path.getOrDefault("accountId")
  valid_402657929 = validateParameter(valid_402657929, JString, required = true,
                                      default = nil)
  if valid_402657929 != nil:
    section.add "accountId", valid_402657929
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657930 = query.getOrDefault("operation")
  valid_402657930 = validateParameter(valid_402657930, JString, required = true, default = newJString(
      "regenerate-security-token"))
  if valid_402657930 != nil:
    section.add "operation", valid_402657930
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657931 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657931 = validateParameter(valid_402657931, JString,
                                      required = false, default = nil)
  if valid_402657931 != nil:
    section.add "X-Amz-Security-Token", valid_402657931
  var valid_402657932 = header.getOrDefault("X-Amz-Signature")
  valid_402657932 = validateParameter(valid_402657932, JString,
                                      required = false, default = nil)
  if valid_402657932 != nil:
    section.add "X-Amz-Signature", valid_402657932
  var valid_402657933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657933 = validateParameter(valid_402657933, JString,
                                      required = false, default = nil)
  if valid_402657933 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657933
  var valid_402657934 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657934 = validateParameter(valid_402657934, JString,
                                      required = false, default = nil)
  if valid_402657934 != nil:
    section.add "X-Amz-Algorithm", valid_402657934
  var valid_402657935 = header.getOrDefault("X-Amz-Date")
  valid_402657935 = validateParameter(valid_402657935, JString,
                                      required = false, default = nil)
  if valid_402657935 != nil:
    section.add "X-Amz-Date", valid_402657935
  var valid_402657936 = header.getOrDefault("X-Amz-Credential")
  valid_402657936 = validateParameter(valid_402657936, JString,
                                      required = false, default = nil)
  if valid_402657936 != nil:
    section.add "X-Amz-Credential", valid_402657936
  var valid_402657937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657937 = validateParameter(valid_402657937, JString,
                                      required = false, default = nil)
  if valid_402657937 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657937
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657938: Call_RegenerateSecurityToken_402657925;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Regenerates the security token for a bot.
                                                                                         ## 
  let valid = call_402657938.validator(path, query, header, formData, body, _)
  let scheme = call_402657938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657938.makeUrl(scheme.get, call_402657938.host, call_402657938.base,
                                   call_402657938.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657938, uri, valid, _)

proc call*(call_402657939: Call_RegenerateSecurityToken_402657925;
           botId: string; accountId: string;
           operation: string = "regenerate-security-token"): Recallable =
  ## regenerateSecurityToken
  ## Regenerates the security token for a bot.
  ##   botId: string (required)
                                              ##        : The bot ID.
  ##   accountId: string (required)
                                                                     ##            : The Amazon Chime account ID.
  ##   
                                                                                                                 ## operation: string (required)
  var path_402657940 = newJObject()
  var query_402657941 = newJObject()
  add(path_402657940, "botId", newJString(botId))
  add(path_402657940, "accountId", newJString(accountId))
  add(query_402657941, "operation", newJString(operation))
  result = call_402657939.call(path_402657940, query_402657941, nil, nil, nil)

var regenerateSecurityToken* = Call_RegenerateSecurityToken_402657925(
    name: "regenerateSecurityToken", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com", route: "/accounts/{accountId}/bots/{botId}#operation=regenerate-security-token",
    validator: validate_RegenerateSecurityToken_402657926, base: "/",
    makeUrl: url_RegenerateSecurityToken_402657927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_ResetPersonalPIN_402657942 = ref object of OpenApiRestCall_402656044
proc url_ResetPersonalPIN_402657944(protocol: Scheme; host: string;
                                    base: string; route: string; path: JsonNode;
                                    query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "accountId" in path, "`accountId` is a required path parameter"
  assert "userId" in path, "`userId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/accounts/"),
                 (kind: VariableSegment, value: "accountId"),
                 (kind: ConstantSegment, value: "/users/"),
                 (kind: VariableSegment, value: "userId"), (
        kind: ConstantSegment, value: "#operation=reset-personal-pin")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_ResetPersonalPIN_402657943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the <a>User</a> object with the updated personal meeting PIN.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   accountId: JString (required)
                                 ##            : The Amazon Chime account ID.
  ##   
                                                                             ## userId: JString (required)
                                                                             ##         
                                                                             ## : 
                                                                             ## The 
                                                                             ## user 
                                                                             ## ID.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `accountId` field"
  var valid_402657945 = path.getOrDefault("accountId")
  valid_402657945 = validateParameter(valid_402657945, JString, required = true,
                                      default = nil)
  if valid_402657945 != nil:
    section.add "accountId", valid_402657945
  var valid_402657946 = path.getOrDefault("userId")
  valid_402657946 = validateParameter(valid_402657946, JString, required = true,
                                      default = nil)
  if valid_402657946 != nil:
    section.add "userId", valid_402657946
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657947 = query.getOrDefault("operation")
  valid_402657947 = validateParameter(valid_402657947, JString, required = true, default = newJString(
      "reset-personal-pin"))
  if valid_402657947 != nil:
    section.add "operation", valid_402657947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657948 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657948 = validateParameter(valid_402657948, JString,
                                      required = false, default = nil)
  if valid_402657948 != nil:
    section.add "X-Amz-Security-Token", valid_402657948
  var valid_402657949 = header.getOrDefault("X-Amz-Signature")
  valid_402657949 = validateParameter(valid_402657949, JString,
                                      required = false, default = nil)
  if valid_402657949 != nil:
    section.add "X-Amz-Signature", valid_402657949
  var valid_402657950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657950 = validateParameter(valid_402657950, JString,
                                      required = false, default = nil)
  if valid_402657950 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657950
  var valid_402657951 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657951 = validateParameter(valid_402657951, JString,
                                      required = false, default = nil)
  if valid_402657951 != nil:
    section.add "X-Amz-Algorithm", valid_402657951
  var valid_402657952 = header.getOrDefault("X-Amz-Date")
  valid_402657952 = validateParameter(valid_402657952, JString,
                                      required = false, default = nil)
  if valid_402657952 != nil:
    section.add "X-Amz-Date", valid_402657952
  var valid_402657953 = header.getOrDefault("X-Amz-Credential")
  valid_402657953 = validateParameter(valid_402657953, JString,
                                      required = false, default = nil)
  if valid_402657953 != nil:
    section.add "X-Amz-Credential", valid_402657953
  var valid_402657954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657954 = validateParameter(valid_402657954, JString,
                                      required = false, default = nil)
  if valid_402657954 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657954
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657955: Call_ResetPersonalPIN_402657942;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the <a>User</a> object with the updated personal meeting PIN.
                                                                                         ## 
  let valid = call_402657955.validator(path, query, header, formData, body, _)
  let scheme = call_402657955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657955.makeUrl(scheme.get, call_402657955.host, call_402657955.base,
                                   call_402657955.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657955, uri, valid, _)

proc call*(call_402657956: Call_ResetPersonalPIN_402657942; accountId: string;
           userId: string; operation: string = "reset-personal-pin"): Recallable =
  ## resetPersonalPIN
  ## Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the <a>User</a> object with the updated personal meeting PIN.
  ##   
                                                                                                                                                             ## accountId: string (required)
                                                                                                                                                             ##            
                                                                                                                                                             ## : 
                                                                                                                                                             ## The 
                                                                                                                                                             ## Amazon 
                                                                                                                                                             ## Chime 
                                                                                                                                                             ## account 
                                                                                                                                                             ## ID.
  ##   
                                                                                                                                                                   ## userId: string (required)
                                                                                                                                                                   ##         
                                                                                                                                                                   ## : 
                                                                                                                                                                   ## The 
                                                                                                                                                                   ## user 
                                                                                                                                                                   ## ID.
  ##   
                                                                                                                                                                         ## operation: string (required)
  var path_402657957 = newJObject()
  var query_402657958 = newJObject()
  add(path_402657957, "accountId", newJString(accountId))
  add(path_402657957, "userId", newJString(userId))
  add(query_402657958, "operation", newJString(operation))
  result = call_402657956.call(path_402657957, query_402657958, nil, nil, nil)

var resetPersonalPIN* = Call_ResetPersonalPIN_402657942(
    name: "resetPersonalPIN", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/accounts/{accountId}/users/{userId}#operation=reset-personal-pin",
    validator: validate_ResetPersonalPIN_402657943, base: "/",
    makeUrl: url_ResetPersonalPIN_402657944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_RestorePhoneNumber_402657959 = ref object of OpenApiRestCall_402656044
proc url_RestorePhoneNumber_402657961(protocol: Scheme; host: string;
                                      base: string; route: string;
                                      path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  assert path != nil, "path is required to populate template"
  assert "phoneNumberId" in path, "`phoneNumberId` is a required path parameter"
  const
    segments = @[(kind: ConstantSegment, value: "/phone-numbers/"),
                 (kind: VariableSegment, value: "phoneNumberId"),
                 (kind: ConstantSegment, value: "#operation=restore")]
  var hydrated = hydratePath(path, segments)
  if hydrated.isNone:
    raise newException(ValueError, "unable to fully hydrate path")
  if base == "/" and hydrated.get.startsWith "/":
    result.path = hydrated.get
  else:
    result.path = base & hydrated.get

proc validate_RestorePhoneNumber_402657960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Moves a phone number from the <b>Deletion queue</b> back into the phone number <b>Inventory</b>.
                ## 
  var section: JsonNode
  result = newJObject()
  ## parameters in `path` object:
  ##   phoneNumberId: JString (required)
                                 ##                : The phone number.
  section = newJObject()
  assert path != nil,
         "path argument is necessary due to required `phoneNumberId` field"
  var valid_402657962 = path.getOrDefault("phoneNumberId")
  valid_402657962 = validateParameter(valid_402657962, JString, required = true,
                                      default = nil)
  if valid_402657962 != nil:
    section.add "phoneNumberId", valid_402657962
  result.add "path", section
  ## parameters in `query` object:
  ##   operation: JString (required)
  section = newJObject()
  var valid_402657963 = query.getOrDefault("operation")
  valid_402657963 = validateParameter(valid_402657963, JString, required = true,
                                      default = newJString("restore"))
  if valid_402657963 != nil:
    section.add "operation", valid_402657963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657964 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657964 = validateParameter(valid_402657964, JString,
                                      required = false, default = nil)
  if valid_402657964 != nil:
    section.add "X-Amz-Security-Token", valid_402657964
  var valid_402657965 = header.getOrDefault("X-Amz-Signature")
  valid_402657965 = validateParameter(valid_402657965, JString,
                                      required = false, default = nil)
  if valid_402657965 != nil:
    section.add "X-Amz-Signature", valid_402657965
  var valid_402657966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657966 = validateParameter(valid_402657966, JString,
                                      required = false, default = nil)
  if valid_402657966 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657966
  var valid_402657967 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657967 = validateParameter(valid_402657967, JString,
                                      required = false, default = nil)
  if valid_402657967 != nil:
    section.add "X-Amz-Algorithm", valid_402657967
  var valid_402657968 = header.getOrDefault("X-Amz-Date")
  valid_402657968 = validateParameter(valid_402657968, JString,
                                      required = false, default = nil)
  if valid_402657968 != nil:
    section.add "X-Amz-Date", valid_402657968
  var valid_402657969 = header.getOrDefault("X-Amz-Credential")
  valid_402657969 = validateParameter(valid_402657969, JString,
                                      required = false, default = nil)
  if valid_402657969 != nil:
    section.add "X-Amz-Credential", valid_402657969
  var valid_402657970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657970 = validateParameter(valid_402657970, JString,
                                      required = false, default = nil)
  if valid_402657970 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657971: Call_RestorePhoneNumber_402657959;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Moves a phone number from the <b>Deletion queue</b> back into the phone number <b>Inventory</b>.
                                                                                         ## 
  let valid = call_402657971.validator(path, query, header, formData, body, _)
  let scheme = call_402657971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657971.makeUrl(scheme.get, call_402657971.host, call_402657971.base,
                                   call_402657971.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657971, uri, valid, _)

proc call*(call_402657972: Call_RestorePhoneNumber_402657959;
           phoneNumberId: string; operation: string = "restore"): Recallable =
  ## restorePhoneNumber
  ## Moves a phone number from the <b>Deletion queue</b> back into the phone number <b>Inventory</b>.
  ##   
                                                                                                     ## phoneNumberId: string (required)
                                                                                                     ##                
                                                                                                     ## : 
                                                                                                     ## The 
                                                                                                     ## phone 
                                                                                                     ## number.
  ##   
                                                                                                               ## operation: string (required)
  var path_402657973 = newJObject()
  var query_402657974 = newJObject()
  add(path_402657973, "phoneNumberId", newJString(phoneNumberId))
  add(query_402657974, "operation", newJString(operation))
  result = call_402657972.call(path_402657973, query_402657974, nil, nil, nil)

var restorePhoneNumber* = Call_RestorePhoneNumber_402657959(
    name: "restorePhoneNumber", meth: HttpMethod.HttpPost,
    host: "chime.amazonaws.com",
    route: "/phone-numbers/{phoneNumberId}#operation=restore",
    validator: validate_RestorePhoneNumber_402657960, base: "/",
    makeUrl: url_RestorePhoneNumber_402657961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_SearchAvailablePhoneNumbers_402657975 = ref object of OpenApiRestCall_402656044
proc url_SearchAvailablePhoneNumbers_402657977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_SearchAvailablePhoneNumbers_402657976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Searches phone numbers that can be ordered.
                                            ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   state: JString
                                  ##        : The state used to filter results.
  ##   
                                                                               ## country: JString
                                                                               ##          
                                                                               ## : 
                                                                               ## The 
                                                                               ## country 
                                                                               ## used 
                                                                               ## to 
                                                                               ## filter 
                                                                               ## results.
  ##   
                                                                                          ## max-results: JInt
                                                                                          ##              
                                                                                          ## : 
                                                                                          ## The 
                                                                                          ## maximum 
                                                                                          ## number 
                                                                                          ## of 
                                                                                          ## results 
                                                                                          ## to 
                                                                                          ## return 
                                                                                          ## in 
                                                                                          ## a 
                                                                                          ## single 
                                                                                          ## call.
  ##   
                                                                                                  ## area-code: JString
                                                                                                  ##            
                                                                                                  ## : 
                                                                                                  ## The 
                                                                                                  ## area 
                                                                                                  ## code 
                                                                                                  ## used 
                                                                                                  ## to 
                                                                                                  ## filter 
                                                                                                  ## results.
  ##   
                                                                                                             ## toll-free-prefix: JString
                                                                                                             ##                   
                                                                                                             ## : 
                                                                                                             ## The 
                                                                                                             ## toll-free 
                                                                                                             ## prefix 
                                                                                                             ## that 
                                                                                                             ## you 
                                                                                                             ## use 
                                                                                                             ## to 
                                                                                                             ## filter 
                                                                                                             ## results.
  ##   
                                                                                                                        ## city: JString
                                                                                                                        ##       
                                                                                                                        ## : 
                                                                                                                        ## The 
                                                                                                                        ## city 
                                                                                                                        ## used 
                                                                                                                        ## to 
                                                                                                                        ## filter 
                                                                                                                        ## results.
  ##   
                                                                                                                                   ## type: JString (required)
  ##   
                                                                                                                                                              ## next-token: JString
                                                                                                                                                              ##             
                                                                                                                                                              ## : 
                                                                                                                                                              ## The 
                                                                                                                                                              ## token 
                                                                                                                                                              ## to 
                                                                                                                                                              ## use 
                                                                                                                                                              ## to 
                                                                                                                                                              ## retrieve 
                                                                                                                                                              ## the 
                                                                                                                                                              ## next 
                                                                                                                                                              ## page 
                                                                                                                                                              ## of 
                                                                                                                                                              ## results.
  section = newJObject()
  var valid_402657978 = query.getOrDefault("state")
  valid_402657978 = validateParameter(valid_402657978, JString,
                                      required = false, default = nil)
  if valid_402657978 != nil:
    section.add "state", valid_402657978
  var valid_402657979 = query.getOrDefault("country")
  valid_402657979 = validateParameter(valid_402657979, JString,
                                      required = false, default = nil)
  if valid_402657979 != nil:
    section.add "country", valid_402657979
  var valid_402657980 = query.getOrDefault("max-results")
  valid_402657980 = validateParameter(valid_402657980, JInt, required = false,
                                      default = nil)
  if valid_402657980 != nil:
    section.add "max-results", valid_402657980
  var valid_402657981 = query.getOrDefault("area-code")
  valid_402657981 = validateParameter(valid_402657981, JString,
                                      required = false, default = nil)
  if valid_402657981 != nil:
    section.add "area-code", valid_402657981
  var valid_402657982 = query.getOrDefault("toll-free-prefix")
  valid_402657982 = validateParameter(valid_402657982, JString,
                                      required = false, default = nil)
  if valid_402657982 != nil:
    section.add "toll-free-prefix", valid_402657982
  var valid_402657983 = query.getOrDefault("city")
  valid_402657983 = validateParameter(valid_402657983, JString,
                                      required = false, default = nil)
  if valid_402657983 != nil:
    section.add "city", valid_402657983
  var valid_402657984 = query.getOrDefault("type")
  valid_402657984 = validateParameter(valid_402657984, JString, required = true,
                                      default = newJString("phone-numbers"))
  if valid_402657984 != nil:
    section.add "type", valid_402657984
  var valid_402657985 = query.getOrDefault("next-token")
  valid_402657985 = validateParameter(valid_402657985, JString,
                                      required = false, default = nil)
  if valid_402657985 != nil:
    section.add "next-token", valid_402657985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_402657986 = header.getOrDefault("X-Amz-Security-Token")
  valid_402657986 = validateParameter(valid_402657986, JString,
                                      required = false, default = nil)
  if valid_402657986 != nil:
    section.add "X-Amz-Security-Token", valid_402657986
  var valid_402657987 = header.getOrDefault("X-Amz-Signature")
  valid_402657987 = validateParameter(valid_402657987, JString,
                                      required = false, default = nil)
  if valid_402657987 != nil:
    section.add "X-Amz-Signature", valid_402657987
  var valid_402657988 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_402657988 = validateParameter(valid_402657988, JString,
                                      required = false, default = nil)
  if valid_402657988 != nil:
    section.add "X-Amz-Content-Sha256", valid_402657988
  var valid_402657989 = header.getOrDefault("X-Amz-Algorithm")
  valid_402657989 = validateParameter(valid_402657989, JString,
                                      required = false, default = nil)
  if valid_402657989 != nil:
    section.add "X-Amz-Algorithm", valid_402657989
  var valid_402657990 = header.getOrDefault("X-Amz-Date")
  valid_402657990 = validateParameter(valid_402657990, JString,
                                      required = false, default = nil)
  if valid_402657990 != nil:
    section.add "X-Amz-Date", valid_402657990
  var valid_402657991 = header.getOrDefault("X-Amz-Credential")
  valid_402657991 = validateParameter(valid_402657991, JString,
                                      required = false, default = nil)
  if valid_402657991 != nil:
    section.add "X-Amz-Credential", valid_402657991
  var valid_402657992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_402657992 = validateParameter(valid_402657992, JString,
                                      required = false, default = nil)
  if valid_402657992 != nil:
    section.add "X-Amz-SignedHeaders", valid_402657992
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_402657993: Call_SearchAvailablePhoneNumbers_402657975;
           path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
           formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Searches phone numbers that can be ordered.
                                                                                         ## 
  let valid = call_402657993.validator(path, query, header, formData, body, _)
  let scheme = call_402657993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_402657993.makeUrl(scheme.get, call_402657993.host, call_402657993.base,
                                   call_402657993.route,
                                   valid.getOrDefault("path"),
                                   valid.getOrDefault("query"))
  result = atozHook(call_402657993, uri, valid, _)

proc call*(call_402657994: Call_SearchAvailablePhoneNumbers_402657975;
           state: string = ""; country: string = ""; maxResults: int = 0;
           areaCode: string = ""; tollFreePrefix: string = "";
           city: string = ""; `type`: string = "phone-numbers";
           nextToken: string = ""): Recallable =
  ## searchAvailablePhoneNumbers
  ## Searches phone numbers that can be ordered.
  ##   state: string
                                                ##        : The state used to filter results.
  ##   
                                                                                             ## country: string
                                                                                             ##          
                                                                                             ## : 
                                                                                             ## The 
                                                                                             ## country 
                                                                                             ## used 
                                                                                             ## to 
                                                                                             ## filter 
                                                                                             ## results.
  ##   
                                                                                                        ## maxResults: int
                                                                                                        ##             
                                                                                                        ## : 
                                                                                                        ## The 
                                                                                                        ## maximum 
                                                                                                        ## number 
                                                                                                        ## of 
                                                                                                        ## results 
                                                                                                        ## to 
                                                                                                        ## return 
                                                                                                        ## in 
                                                                                                        ## a 
                                                                                                        ## single 
                                                                                                        ## call.
  ##   
                                                                                                                ## areaCode: string
                                                                                                                ##           
                                                                                                                ## : 
                                                                                                                ## The 
                                                                                                                ## area 
                                                                                                                ## code 
                                                                                                                ## used 
                                                                                                                ## to 
                                                                                                                ## filter 
                                                                                                                ## results.
  ##   
                                                                                                                           ## tollFreePrefix: string
                                                                                                                           ##                 
                                                                                                                           ## : 
                                                                                                                           ## The 
                                                                                                                           ## toll-free 
                                                                                                                           ## prefix 
                                                                                                                           ## that 
                                                                                                                           ## you 
                                                                                                                           ## use 
                                                                                                                           ## to 
                                                                                                                           ## filter 
                                                                                                                           ## results.
  ##   
                                                                                                                                      ## city: string
                                                                                                                                      ##       
                                                                                                                                      ## : 
                                                                                                                                      ## The 
                                                                                                                                      ## city 
                                                                                                                                      ## used 
                                                                                                                                      ## to 
                                                                                                                                      ## filter 
                                                                                                                                      ## results.
  ##   
                                                                                                                                                 ## type: string (required)
  ##   
                                                                                                                                                                           ## nextToken: string
                                                                                                                                                                           ##            
                                                                                                                                                                           ## : 
                                                                                                                                                                           ## The 
                                                                                                                                                                           ## token 
                                                                                                                                                                           ## to 
                                                                                                                                                                           ## use 
                                                                                                                                                                           ## to 
                                                                                                                                                                           ## retrieve 
                                                                                                                                                                           ## the 
                                                                                                                                                                           ## next 
                                                                                                                                                                           ## page 
                                                                                                                                                                           ## of 
                                                                                                                                                                           ## results.
  var query_402657995 = newJObject()
  add(query_402657995, "state", newJString(state))
  add(query_402657995, "country", newJString(country))
  add(query_402657995, "max-results", newJInt(maxResults))
  add(query_402657995, "area-code", newJString(areaCode))
  add(query_402657995, "toll-free-prefix", newJString(tollFreePrefix))
  add(query_402657995, "city", newJString(city))
  add(query_402657995, "type", newJString(`type`))
  add(query_402657995, "next-token", newJString(nextToken))
  result = call_402657994.call(nil, query_402657995, nil, nil, nil)

var searchAvailablePhoneNumbers* = Call_SearchAvailablePhoneNumbers_402657975(
    name: "searchAvailablePhoneNumbers", meth: HttpMethod.HttpGet,
    host: "chime.amazonaws.com", route: "/search#type=phone-numbers",
    validator: validate_SearchAvailablePhoneNumbers_402657976, base: "/",
    makeUrl: url_SearchAvailablePhoneNumbers_402657977,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token",
    ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode;
              algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName,
                            date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers,
                               recall.body, normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date,
                                   region = region, service = awsServiceName,
                                   sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}