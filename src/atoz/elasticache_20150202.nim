
import
  json, options, hashes, uri, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_600437 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_600437](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_600437): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_601046 = ref object of OpenApiRestCall_600437
proc url_PostAddTagsToResource_601048(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_601047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601049 = query.getOrDefault("Action")
  valid_601049 = validateParameter(valid_601049, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_601049 != nil:
    section.add "Action", valid_601049
  var valid_601050 = query.getOrDefault("Version")
  valid_601050 = validateParameter(valid_601050, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601050 != nil:
    section.add "Version", valid_601050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601051 = header.getOrDefault("X-Amz-Date")
  valid_601051 = validateParameter(valid_601051, JString, required = false,
                                 default = nil)
  if valid_601051 != nil:
    section.add "X-Amz-Date", valid_601051
  var valid_601052 = header.getOrDefault("X-Amz-Security-Token")
  valid_601052 = validateParameter(valid_601052, JString, required = false,
                                 default = nil)
  if valid_601052 != nil:
    section.add "X-Amz-Security-Token", valid_601052
  var valid_601053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601053 = validateParameter(valid_601053, JString, required = false,
                                 default = nil)
  if valid_601053 != nil:
    section.add "X-Amz-Content-Sha256", valid_601053
  var valid_601054 = header.getOrDefault("X-Amz-Algorithm")
  valid_601054 = validateParameter(valid_601054, JString, required = false,
                                 default = nil)
  if valid_601054 != nil:
    section.add "X-Amz-Algorithm", valid_601054
  var valid_601055 = header.getOrDefault("X-Amz-Signature")
  valid_601055 = validateParameter(valid_601055, JString, required = false,
                                 default = nil)
  if valid_601055 != nil:
    section.add "X-Amz-Signature", valid_601055
  var valid_601056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601056 = validateParameter(valid_601056, JString, required = false,
                                 default = nil)
  if valid_601056 != nil:
    section.add "X-Amz-SignedHeaders", valid_601056
  var valid_601057 = header.getOrDefault("X-Amz-Credential")
  valid_601057 = validateParameter(valid_601057, JString, required = false,
                                 default = nil)
  if valid_601057 != nil:
    section.add "X-Amz-Credential", valid_601057
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_601058 = formData.getOrDefault("Tags")
  valid_601058 = validateParameter(valid_601058, JArray, required = true, default = nil)
  if valid_601058 != nil:
    section.add "Tags", valid_601058
  var valid_601059 = formData.getOrDefault("ResourceName")
  valid_601059 = validateParameter(valid_601059, JString, required = true,
                                 default = nil)
  if valid_601059 != nil:
    section.add "ResourceName", valid_601059
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601060: Call_PostAddTagsToResource_601046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_601060.validator(path, query, header, formData, body)
  let scheme = call_601060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601060.url(scheme.get, call_601060.host, call_601060.base,
                         call_601060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601060, url, valid)

proc call*(call_601061: Call_PostAddTagsToResource_601046; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_601062 = newJObject()
  var formData_601063 = newJObject()
  if Tags != nil:
    formData_601063.add "Tags", Tags
  add(query_601062, "Action", newJString(Action))
  add(formData_601063, "ResourceName", newJString(ResourceName))
  add(query_601062, "Version", newJString(Version))
  result = call_601061.call(nil, query_601062, nil, formData_601063, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_601046(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_601047, base: "/",
    url: url_PostAddTagsToResource_601048, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_600774 = ref object of OpenApiRestCall_600437
proc url_GetAddTagsToResource_600776(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_600775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_600888 = query.getOrDefault("Tags")
  valid_600888 = validateParameter(valid_600888, JArray, required = true, default = nil)
  if valid_600888 != nil:
    section.add "Tags", valid_600888
  var valid_600889 = query.getOrDefault("ResourceName")
  valid_600889 = validateParameter(valid_600889, JString, required = true,
                                 default = nil)
  if valid_600889 != nil:
    section.add "ResourceName", valid_600889
  var valid_600903 = query.getOrDefault("Action")
  valid_600903 = validateParameter(valid_600903, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_600903 != nil:
    section.add "Action", valid_600903
  var valid_600904 = query.getOrDefault("Version")
  valid_600904 = validateParameter(valid_600904, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_600904 != nil:
    section.add "Version", valid_600904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600905 = header.getOrDefault("X-Amz-Date")
  valid_600905 = validateParameter(valid_600905, JString, required = false,
                                 default = nil)
  if valid_600905 != nil:
    section.add "X-Amz-Date", valid_600905
  var valid_600906 = header.getOrDefault("X-Amz-Security-Token")
  valid_600906 = validateParameter(valid_600906, JString, required = false,
                                 default = nil)
  if valid_600906 != nil:
    section.add "X-Amz-Security-Token", valid_600906
  var valid_600907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600907 = validateParameter(valid_600907, JString, required = false,
                                 default = nil)
  if valid_600907 != nil:
    section.add "X-Amz-Content-Sha256", valid_600907
  var valid_600908 = header.getOrDefault("X-Amz-Algorithm")
  valid_600908 = validateParameter(valid_600908, JString, required = false,
                                 default = nil)
  if valid_600908 != nil:
    section.add "X-Amz-Algorithm", valid_600908
  var valid_600909 = header.getOrDefault("X-Amz-Signature")
  valid_600909 = validateParameter(valid_600909, JString, required = false,
                                 default = nil)
  if valid_600909 != nil:
    section.add "X-Amz-Signature", valid_600909
  var valid_600910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600910 = validateParameter(valid_600910, JString, required = false,
                                 default = nil)
  if valid_600910 != nil:
    section.add "X-Amz-SignedHeaders", valid_600910
  var valid_600911 = header.getOrDefault("X-Amz-Credential")
  valid_600911 = validateParameter(valid_600911, JString, required = false,
                                 default = nil)
  if valid_600911 != nil:
    section.add "X-Amz-Credential", valid_600911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600934: Call_GetAddTagsToResource_600774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_600934.validator(path, query, header, formData, body)
  let scheme = call_600934.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600934.url(scheme.get, call_600934.host, call_600934.base,
                         call_600934.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_600934, url, valid)

proc call*(call_601005: Call_GetAddTagsToResource_600774; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601006 = newJObject()
  if Tags != nil:
    query_601006.add "Tags", Tags
  add(query_601006, "ResourceName", newJString(ResourceName))
  add(query_601006, "Action", newJString(Action))
  add(query_601006, "Version", newJString(Version))
  result = call_601005.call(nil, query_601006, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_600774(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_600775, base: "/",
    url: url_GetAddTagsToResource_600776, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_601082 = ref object of OpenApiRestCall_600437
proc url_PostAuthorizeCacheSecurityGroupIngress_601084(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_601083(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601085 = query.getOrDefault("Action")
  valid_601085 = validateParameter(valid_601085, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_601085 != nil:
    section.add "Action", valid_601085
  var valid_601086 = query.getOrDefault("Version")
  valid_601086 = validateParameter(valid_601086, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601086 != nil:
    section.add "Version", valid_601086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601087 = header.getOrDefault("X-Amz-Date")
  valid_601087 = validateParameter(valid_601087, JString, required = false,
                                 default = nil)
  if valid_601087 != nil:
    section.add "X-Amz-Date", valid_601087
  var valid_601088 = header.getOrDefault("X-Amz-Security-Token")
  valid_601088 = validateParameter(valid_601088, JString, required = false,
                                 default = nil)
  if valid_601088 != nil:
    section.add "X-Amz-Security-Token", valid_601088
  var valid_601089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601089 = validateParameter(valid_601089, JString, required = false,
                                 default = nil)
  if valid_601089 != nil:
    section.add "X-Amz-Content-Sha256", valid_601089
  var valid_601090 = header.getOrDefault("X-Amz-Algorithm")
  valid_601090 = validateParameter(valid_601090, JString, required = false,
                                 default = nil)
  if valid_601090 != nil:
    section.add "X-Amz-Algorithm", valid_601090
  var valid_601091 = header.getOrDefault("X-Amz-Signature")
  valid_601091 = validateParameter(valid_601091, JString, required = false,
                                 default = nil)
  if valid_601091 != nil:
    section.add "X-Amz-Signature", valid_601091
  var valid_601092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601092 = validateParameter(valid_601092, JString, required = false,
                                 default = nil)
  if valid_601092 != nil:
    section.add "X-Amz-SignedHeaders", valid_601092
  var valid_601093 = header.getOrDefault("X-Amz-Credential")
  valid_601093 = validateParameter(valid_601093, JString, required = false,
                                 default = nil)
  if valid_601093 != nil:
    section.add "X-Amz-Credential", valid_601093
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601094 = formData.getOrDefault("CacheSecurityGroupName")
  valid_601094 = validateParameter(valid_601094, JString, required = true,
                                 default = nil)
  if valid_601094 != nil:
    section.add "CacheSecurityGroupName", valid_601094
  var valid_601095 = formData.getOrDefault("EC2SecurityGroupName")
  valid_601095 = validateParameter(valid_601095, JString, required = true,
                                 default = nil)
  if valid_601095 != nil:
    section.add "EC2SecurityGroupName", valid_601095
  var valid_601096 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_601096 = validateParameter(valid_601096, JString, required = true,
                                 default = nil)
  if valid_601096 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_601096
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601097: Call_PostAuthorizeCacheSecurityGroupIngress_601082;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_601097.validator(path, query, header, formData, body)
  let scheme = call_601097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601097.url(scheme.get, call_601097.host, call_601097.base,
                         call_601097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601097, url, valid)

proc call*(call_601098: Call_PostAuthorizeCacheSecurityGroupIngress_601082;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  var query_601099 = newJObject()
  var formData_601100 = newJObject()
  add(formData_601100, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_601099, "Action", newJString(Action))
  add(formData_601100, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_601099, "Version", newJString(Version))
  add(formData_601100, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_601098.call(nil, query_601099, nil, formData_601100, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_601082(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_601083, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_601084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_601064 = ref object of OpenApiRestCall_600437
proc url_GetAuthorizeCacheSecurityGroupIngress_601066(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_601065(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601067 = query.getOrDefault("CacheSecurityGroupName")
  valid_601067 = validateParameter(valid_601067, JString, required = true,
                                 default = nil)
  if valid_601067 != nil:
    section.add "CacheSecurityGroupName", valid_601067
  var valid_601068 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_601068 = validateParameter(valid_601068, JString, required = true,
                                 default = nil)
  if valid_601068 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_601068
  var valid_601069 = query.getOrDefault("Action")
  valid_601069 = validateParameter(valid_601069, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_601069 != nil:
    section.add "Action", valid_601069
  var valid_601070 = query.getOrDefault("EC2SecurityGroupName")
  valid_601070 = validateParameter(valid_601070, JString, required = true,
                                 default = nil)
  if valid_601070 != nil:
    section.add "EC2SecurityGroupName", valid_601070
  var valid_601071 = query.getOrDefault("Version")
  valid_601071 = validateParameter(valid_601071, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601071 != nil:
    section.add "Version", valid_601071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601072 = header.getOrDefault("X-Amz-Date")
  valid_601072 = validateParameter(valid_601072, JString, required = false,
                                 default = nil)
  if valid_601072 != nil:
    section.add "X-Amz-Date", valid_601072
  var valid_601073 = header.getOrDefault("X-Amz-Security-Token")
  valid_601073 = validateParameter(valid_601073, JString, required = false,
                                 default = nil)
  if valid_601073 != nil:
    section.add "X-Amz-Security-Token", valid_601073
  var valid_601074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601074 = validateParameter(valid_601074, JString, required = false,
                                 default = nil)
  if valid_601074 != nil:
    section.add "X-Amz-Content-Sha256", valid_601074
  var valid_601075 = header.getOrDefault("X-Amz-Algorithm")
  valid_601075 = validateParameter(valid_601075, JString, required = false,
                                 default = nil)
  if valid_601075 != nil:
    section.add "X-Amz-Algorithm", valid_601075
  var valid_601076 = header.getOrDefault("X-Amz-Signature")
  valid_601076 = validateParameter(valid_601076, JString, required = false,
                                 default = nil)
  if valid_601076 != nil:
    section.add "X-Amz-Signature", valid_601076
  var valid_601077 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601077 = validateParameter(valid_601077, JString, required = false,
                                 default = nil)
  if valid_601077 != nil:
    section.add "X-Amz-SignedHeaders", valid_601077
  var valid_601078 = header.getOrDefault("X-Amz-Credential")
  valid_601078 = validateParameter(valid_601078, JString, required = false,
                                 default = nil)
  if valid_601078 != nil:
    section.add "X-Amz-Credential", valid_601078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601079: Call_GetAuthorizeCacheSecurityGroupIngress_601064;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_601079.validator(path, query, header, formData, body)
  let scheme = call_601079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601079.url(scheme.get, call_601079.host, call_601079.base,
                         call_601079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601079, url, valid)

proc call*(call_601080: Call_GetAuthorizeCacheSecurityGroupIngress_601064;
          CacheSecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          EC2SecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: string (required)
  var query_601081 = newJObject()
  add(query_601081, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_601081, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_601081, "Action", newJString(Action))
  add(query_601081, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_601081, "Version", newJString(Version))
  result = call_601080.call(nil, query_601081, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_601064(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_601065, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_601066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_601118 = ref object of OpenApiRestCall_600437
proc url_PostBatchApplyUpdateAction_601120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchApplyUpdateAction_601119(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601121 = query.getOrDefault("Action")
  valid_601121 = validateParameter(valid_601121, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_601121 != nil:
    section.add "Action", valid_601121
  var valid_601122 = query.getOrDefault("Version")
  valid_601122 = validateParameter(valid_601122, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601122 != nil:
    section.add "Version", valid_601122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601123 = header.getOrDefault("X-Amz-Date")
  valid_601123 = validateParameter(valid_601123, JString, required = false,
                                 default = nil)
  if valid_601123 != nil:
    section.add "X-Amz-Date", valid_601123
  var valid_601124 = header.getOrDefault("X-Amz-Security-Token")
  valid_601124 = validateParameter(valid_601124, JString, required = false,
                                 default = nil)
  if valid_601124 != nil:
    section.add "X-Amz-Security-Token", valid_601124
  var valid_601125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601125 = validateParameter(valid_601125, JString, required = false,
                                 default = nil)
  if valid_601125 != nil:
    section.add "X-Amz-Content-Sha256", valid_601125
  var valid_601126 = header.getOrDefault("X-Amz-Algorithm")
  valid_601126 = validateParameter(valid_601126, JString, required = false,
                                 default = nil)
  if valid_601126 != nil:
    section.add "X-Amz-Algorithm", valid_601126
  var valid_601127 = header.getOrDefault("X-Amz-Signature")
  valid_601127 = validateParameter(valid_601127, JString, required = false,
                                 default = nil)
  if valid_601127 != nil:
    section.add "X-Amz-Signature", valid_601127
  var valid_601128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601128 = validateParameter(valid_601128, JString, required = false,
                                 default = nil)
  if valid_601128 != nil:
    section.add "X-Amz-SignedHeaders", valid_601128
  var valid_601129 = header.getOrDefault("X-Amz-Credential")
  valid_601129 = validateParameter(valid_601129, JString, required = false,
                                 default = nil)
  if valid_601129 != nil:
    section.add "X-Amz-Credential", valid_601129
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupIds` field"
  var valid_601130 = formData.getOrDefault("ReplicationGroupIds")
  valid_601130 = validateParameter(valid_601130, JArray, required = true, default = nil)
  if valid_601130 != nil:
    section.add "ReplicationGroupIds", valid_601130
  var valid_601131 = formData.getOrDefault("ServiceUpdateName")
  valid_601131 = validateParameter(valid_601131, JString, required = true,
                                 default = nil)
  if valid_601131 != nil:
    section.add "ServiceUpdateName", valid_601131
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601132: Call_PostBatchApplyUpdateAction_601118; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_601132.validator(path, query, header, formData, body)
  let scheme = call_601132.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601132.url(scheme.get, call_601132.host, call_601132.base,
                         call_601132.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601132, url, valid)

proc call*(call_601133: Call_PostBatchApplyUpdateAction_601118;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_601134 = newJObject()
  var formData_601135 = newJObject()
  if ReplicationGroupIds != nil:
    formData_601135.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_601134, "Action", newJString(Action))
  add(query_601134, "Version", newJString(Version))
  add(formData_601135, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_601133.call(nil, query_601134, nil, formData_601135, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_601118(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_601119, base: "/",
    url: url_PostBatchApplyUpdateAction_601120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_601101 = ref object of OpenApiRestCall_600437
proc url_GetBatchApplyUpdateAction_601103(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchApplyUpdateAction_601102(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601104 = query.getOrDefault("Action")
  valid_601104 = validateParameter(valid_601104, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_601104 != nil:
    section.add "Action", valid_601104
  var valid_601105 = query.getOrDefault("ReplicationGroupIds")
  valid_601105 = validateParameter(valid_601105, JArray, required = true, default = nil)
  if valid_601105 != nil:
    section.add "ReplicationGroupIds", valid_601105
  var valid_601106 = query.getOrDefault("Version")
  valid_601106 = validateParameter(valid_601106, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601106 != nil:
    section.add "Version", valid_601106
  var valid_601107 = query.getOrDefault("ServiceUpdateName")
  valid_601107 = validateParameter(valid_601107, JString, required = true,
                                 default = nil)
  if valid_601107 != nil:
    section.add "ServiceUpdateName", valid_601107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601108 = header.getOrDefault("X-Amz-Date")
  valid_601108 = validateParameter(valid_601108, JString, required = false,
                                 default = nil)
  if valid_601108 != nil:
    section.add "X-Amz-Date", valid_601108
  var valid_601109 = header.getOrDefault("X-Amz-Security-Token")
  valid_601109 = validateParameter(valid_601109, JString, required = false,
                                 default = nil)
  if valid_601109 != nil:
    section.add "X-Amz-Security-Token", valid_601109
  var valid_601110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601110 = validateParameter(valid_601110, JString, required = false,
                                 default = nil)
  if valid_601110 != nil:
    section.add "X-Amz-Content-Sha256", valid_601110
  var valid_601111 = header.getOrDefault("X-Amz-Algorithm")
  valid_601111 = validateParameter(valid_601111, JString, required = false,
                                 default = nil)
  if valid_601111 != nil:
    section.add "X-Amz-Algorithm", valid_601111
  var valid_601112 = header.getOrDefault("X-Amz-Signature")
  valid_601112 = validateParameter(valid_601112, JString, required = false,
                                 default = nil)
  if valid_601112 != nil:
    section.add "X-Amz-Signature", valid_601112
  var valid_601113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601113 = validateParameter(valid_601113, JString, required = false,
                                 default = nil)
  if valid_601113 != nil:
    section.add "X-Amz-SignedHeaders", valid_601113
  var valid_601114 = header.getOrDefault("X-Amz-Credential")
  valid_601114 = validateParameter(valid_601114, JString, required = false,
                                 default = nil)
  if valid_601114 != nil:
    section.add "X-Amz-Credential", valid_601114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601115: Call_GetBatchApplyUpdateAction_601101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_601115.validator(path, query, header, formData, body)
  let scheme = call_601115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601115.url(scheme.get, call_601115.host, call_601115.base,
                         call_601115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601115, url, valid)

proc call*(call_601116: Call_GetBatchApplyUpdateAction_601101;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_601117 = newJObject()
  add(query_601117, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_601117.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_601117, "Version", newJString(Version))
  add(query_601117, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_601116.call(nil, query_601117, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_601101(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_601102, base: "/",
    url: url_GetBatchApplyUpdateAction_601103,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_601153 = ref object of OpenApiRestCall_600437
proc url_PostBatchStopUpdateAction_601155(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchStopUpdateAction_601154(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601156 = query.getOrDefault("Action")
  valid_601156 = validateParameter(valid_601156, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_601156 != nil:
    section.add "Action", valid_601156
  var valid_601157 = query.getOrDefault("Version")
  valid_601157 = validateParameter(valid_601157, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601157 != nil:
    section.add "Version", valid_601157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601158 = header.getOrDefault("X-Amz-Date")
  valid_601158 = validateParameter(valid_601158, JString, required = false,
                                 default = nil)
  if valid_601158 != nil:
    section.add "X-Amz-Date", valid_601158
  var valid_601159 = header.getOrDefault("X-Amz-Security-Token")
  valid_601159 = validateParameter(valid_601159, JString, required = false,
                                 default = nil)
  if valid_601159 != nil:
    section.add "X-Amz-Security-Token", valid_601159
  var valid_601160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601160 = validateParameter(valid_601160, JString, required = false,
                                 default = nil)
  if valid_601160 != nil:
    section.add "X-Amz-Content-Sha256", valid_601160
  var valid_601161 = header.getOrDefault("X-Amz-Algorithm")
  valid_601161 = validateParameter(valid_601161, JString, required = false,
                                 default = nil)
  if valid_601161 != nil:
    section.add "X-Amz-Algorithm", valid_601161
  var valid_601162 = header.getOrDefault("X-Amz-Signature")
  valid_601162 = validateParameter(valid_601162, JString, required = false,
                                 default = nil)
  if valid_601162 != nil:
    section.add "X-Amz-Signature", valid_601162
  var valid_601163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601163 = validateParameter(valid_601163, JString, required = false,
                                 default = nil)
  if valid_601163 != nil:
    section.add "X-Amz-SignedHeaders", valid_601163
  var valid_601164 = header.getOrDefault("X-Amz-Credential")
  valid_601164 = validateParameter(valid_601164, JString, required = false,
                                 default = nil)
  if valid_601164 != nil:
    section.add "X-Amz-Credential", valid_601164
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupIds` field"
  var valid_601165 = formData.getOrDefault("ReplicationGroupIds")
  valid_601165 = validateParameter(valid_601165, JArray, required = true, default = nil)
  if valid_601165 != nil:
    section.add "ReplicationGroupIds", valid_601165
  var valid_601166 = formData.getOrDefault("ServiceUpdateName")
  valid_601166 = validateParameter(valid_601166, JString, required = true,
                                 default = nil)
  if valid_601166 != nil:
    section.add "ServiceUpdateName", valid_601166
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601167: Call_PostBatchStopUpdateAction_601153; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_601167.validator(path, query, header, formData, body)
  let scheme = call_601167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601167.url(scheme.get, call_601167.host, call_601167.base,
                         call_601167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601167, url, valid)

proc call*(call_601168: Call_PostBatchStopUpdateAction_601153;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_601169 = newJObject()
  var formData_601170 = newJObject()
  if ReplicationGroupIds != nil:
    formData_601170.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_601169, "Action", newJString(Action))
  add(query_601169, "Version", newJString(Version))
  add(formData_601170, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_601168.call(nil, query_601169, nil, formData_601170, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_601153(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_601154, base: "/",
    url: url_PostBatchStopUpdateAction_601155,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_601136 = ref object of OpenApiRestCall_600437
proc url_GetBatchStopUpdateAction_601138(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchStopUpdateAction_601137(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601139 = query.getOrDefault("Action")
  valid_601139 = validateParameter(valid_601139, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_601139 != nil:
    section.add "Action", valid_601139
  var valid_601140 = query.getOrDefault("ReplicationGroupIds")
  valid_601140 = validateParameter(valid_601140, JArray, required = true, default = nil)
  if valid_601140 != nil:
    section.add "ReplicationGroupIds", valid_601140
  var valid_601141 = query.getOrDefault("Version")
  valid_601141 = validateParameter(valid_601141, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601141 != nil:
    section.add "Version", valid_601141
  var valid_601142 = query.getOrDefault("ServiceUpdateName")
  valid_601142 = validateParameter(valid_601142, JString, required = true,
                                 default = nil)
  if valid_601142 != nil:
    section.add "ServiceUpdateName", valid_601142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601143 = header.getOrDefault("X-Amz-Date")
  valid_601143 = validateParameter(valid_601143, JString, required = false,
                                 default = nil)
  if valid_601143 != nil:
    section.add "X-Amz-Date", valid_601143
  var valid_601144 = header.getOrDefault("X-Amz-Security-Token")
  valid_601144 = validateParameter(valid_601144, JString, required = false,
                                 default = nil)
  if valid_601144 != nil:
    section.add "X-Amz-Security-Token", valid_601144
  var valid_601145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601145 = validateParameter(valid_601145, JString, required = false,
                                 default = nil)
  if valid_601145 != nil:
    section.add "X-Amz-Content-Sha256", valid_601145
  var valid_601146 = header.getOrDefault("X-Amz-Algorithm")
  valid_601146 = validateParameter(valid_601146, JString, required = false,
                                 default = nil)
  if valid_601146 != nil:
    section.add "X-Amz-Algorithm", valid_601146
  var valid_601147 = header.getOrDefault("X-Amz-Signature")
  valid_601147 = validateParameter(valid_601147, JString, required = false,
                                 default = nil)
  if valid_601147 != nil:
    section.add "X-Amz-Signature", valid_601147
  var valid_601148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601148 = validateParameter(valid_601148, JString, required = false,
                                 default = nil)
  if valid_601148 != nil:
    section.add "X-Amz-SignedHeaders", valid_601148
  var valid_601149 = header.getOrDefault("X-Amz-Credential")
  valid_601149 = validateParameter(valid_601149, JString, required = false,
                                 default = nil)
  if valid_601149 != nil:
    section.add "X-Amz-Credential", valid_601149
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601150: Call_GetBatchStopUpdateAction_601136; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_601150.validator(path, query, header, formData, body)
  let scheme = call_601150.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601150.url(scheme.get, call_601150.host, call_601150.base,
                         call_601150.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601150, url, valid)

proc call*(call_601151: Call_GetBatchStopUpdateAction_601136;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_601152 = newJObject()
  add(query_601152, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_601152.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_601152, "Version", newJString(Version))
  add(query_601152, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_601151.call(nil, query_601152, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_601136(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_601137, base: "/",
    url: url_GetBatchStopUpdateAction_601138, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_601190 = ref object of OpenApiRestCall_600437
proc url_PostCopySnapshot_601192(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopySnapshot_601191(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601193 = query.getOrDefault("Action")
  valid_601193 = validateParameter(valid_601193, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_601193 != nil:
    section.add "Action", valid_601193
  var valid_601194 = query.getOrDefault("Version")
  valid_601194 = validateParameter(valid_601194, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601194 != nil:
    section.add "Version", valid_601194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601195 = header.getOrDefault("X-Amz-Date")
  valid_601195 = validateParameter(valid_601195, JString, required = false,
                                 default = nil)
  if valid_601195 != nil:
    section.add "X-Amz-Date", valid_601195
  var valid_601196 = header.getOrDefault("X-Amz-Security-Token")
  valid_601196 = validateParameter(valid_601196, JString, required = false,
                                 default = nil)
  if valid_601196 != nil:
    section.add "X-Amz-Security-Token", valid_601196
  var valid_601197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601197 = validateParameter(valid_601197, JString, required = false,
                                 default = nil)
  if valid_601197 != nil:
    section.add "X-Amz-Content-Sha256", valid_601197
  var valid_601198 = header.getOrDefault("X-Amz-Algorithm")
  valid_601198 = validateParameter(valid_601198, JString, required = false,
                                 default = nil)
  if valid_601198 != nil:
    section.add "X-Amz-Algorithm", valid_601198
  var valid_601199 = header.getOrDefault("X-Amz-Signature")
  valid_601199 = validateParameter(valid_601199, JString, required = false,
                                 default = nil)
  if valid_601199 != nil:
    section.add "X-Amz-Signature", valid_601199
  var valid_601200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601200 = validateParameter(valid_601200, JString, required = false,
                                 default = nil)
  if valid_601200 != nil:
    section.add "X-Amz-SignedHeaders", valid_601200
  var valid_601201 = header.getOrDefault("X-Amz-Credential")
  valid_601201 = validateParameter(valid_601201, JString, required = false,
                                 default = nil)
  if valid_601201 != nil:
    section.add "X-Amz-Credential", valid_601201
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetSnapshotName` field"
  var valid_601202 = formData.getOrDefault("TargetSnapshotName")
  valid_601202 = validateParameter(valid_601202, JString, required = true,
                                 default = nil)
  if valid_601202 != nil:
    section.add "TargetSnapshotName", valid_601202
  var valid_601203 = formData.getOrDefault("TargetBucket")
  valid_601203 = validateParameter(valid_601203, JString, required = false,
                                 default = nil)
  if valid_601203 != nil:
    section.add "TargetBucket", valid_601203
  var valid_601204 = formData.getOrDefault("SourceSnapshotName")
  valid_601204 = validateParameter(valid_601204, JString, required = true,
                                 default = nil)
  if valid_601204 != nil:
    section.add "SourceSnapshotName", valid_601204
  var valid_601205 = formData.getOrDefault("KmsKeyId")
  valid_601205 = validateParameter(valid_601205, JString, required = false,
                                 default = nil)
  if valid_601205 != nil:
    section.add "KmsKeyId", valid_601205
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601206: Call_PostCopySnapshot_601190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_601206.validator(path, query, header, formData, body)
  let scheme = call_601206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601206.url(scheme.get, call_601206.host, call_601206.base,
                         call_601206.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601206, url, valid)

proc call*(call_601207: Call_PostCopySnapshot_601190; TargetSnapshotName: string;
          SourceSnapshotName: string; TargetBucket: string = "";
          Action: string = "CopySnapshot"; KmsKeyId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Version: string (required)
  var query_601208 = newJObject()
  var formData_601209 = newJObject()
  add(formData_601209, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(formData_601209, "TargetBucket", newJString(TargetBucket))
  add(formData_601209, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_601208, "Action", newJString(Action))
  add(formData_601209, "KmsKeyId", newJString(KmsKeyId))
  add(query_601208, "Version", newJString(Version))
  result = call_601207.call(nil, query_601208, nil, formData_601209, nil)

var postCopySnapshot* = Call_PostCopySnapshot_601190(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_601191,
    base: "/", url: url_PostCopySnapshot_601192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_601171 = ref object of OpenApiRestCall_600437
proc url_GetCopySnapshot_601173(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopySnapshot_601172(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceSnapshotName` field"
  var valid_601174 = query.getOrDefault("SourceSnapshotName")
  valid_601174 = validateParameter(valid_601174, JString, required = true,
                                 default = nil)
  if valid_601174 != nil:
    section.add "SourceSnapshotName", valid_601174
  var valid_601175 = query.getOrDefault("Action")
  valid_601175 = validateParameter(valid_601175, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_601175 != nil:
    section.add "Action", valid_601175
  var valid_601176 = query.getOrDefault("KmsKeyId")
  valid_601176 = validateParameter(valid_601176, JString, required = false,
                                 default = nil)
  if valid_601176 != nil:
    section.add "KmsKeyId", valid_601176
  var valid_601177 = query.getOrDefault("TargetBucket")
  valid_601177 = validateParameter(valid_601177, JString, required = false,
                                 default = nil)
  if valid_601177 != nil:
    section.add "TargetBucket", valid_601177
  var valid_601178 = query.getOrDefault("TargetSnapshotName")
  valid_601178 = validateParameter(valid_601178, JString, required = true,
                                 default = nil)
  if valid_601178 != nil:
    section.add "TargetSnapshotName", valid_601178
  var valid_601179 = query.getOrDefault("Version")
  valid_601179 = validateParameter(valid_601179, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601179 != nil:
    section.add "Version", valid_601179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601180 = header.getOrDefault("X-Amz-Date")
  valid_601180 = validateParameter(valid_601180, JString, required = false,
                                 default = nil)
  if valid_601180 != nil:
    section.add "X-Amz-Date", valid_601180
  var valid_601181 = header.getOrDefault("X-Amz-Security-Token")
  valid_601181 = validateParameter(valid_601181, JString, required = false,
                                 default = nil)
  if valid_601181 != nil:
    section.add "X-Amz-Security-Token", valid_601181
  var valid_601182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601182 = validateParameter(valid_601182, JString, required = false,
                                 default = nil)
  if valid_601182 != nil:
    section.add "X-Amz-Content-Sha256", valid_601182
  var valid_601183 = header.getOrDefault("X-Amz-Algorithm")
  valid_601183 = validateParameter(valid_601183, JString, required = false,
                                 default = nil)
  if valid_601183 != nil:
    section.add "X-Amz-Algorithm", valid_601183
  var valid_601184 = header.getOrDefault("X-Amz-Signature")
  valid_601184 = validateParameter(valid_601184, JString, required = false,
                                 default = nil)
  if valid_601184 != nil:
    section.add "X-Amz-Signature", valid_601184
  var valid_601185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601185 = validateParameter(valid_601185, JString, required = false,
                                 default = nil)
  if valid_601185 != nil:
    section.add "X-Amz-SignedHeaders", valid_601185
  var valid_601186 = header.getOrDefault("X-Amz-Credential")
  valid_601186 = validateParameter(valid_601186, JString, required = false,
                                 default = nil)
  if valid_601186 != nil:
    section.add "X-Amz-Credential", valid_601186
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601187: Call_GetCopySnapshot_601171; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_601187.validator(path, query, header, formData, body)
  let scheme = call_601187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601187.url(scheme.get, call_601187.host, call_601187.base,
                         call_601187.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601187, url, valid)

proc call*(call_601188: Call_GetCopySnapshot_601171; SourceSnapshotName: string;
          TargetSnapshotName: string; Action: string = "CopySnapshot";
          KmsKeyId: string = ""; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_601189 = newJObject()
  add(query_601189, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_601189, "Action", newJString(Action))
  add(query_601189, "KmsKeyId", newJString(KmsKeyId))
  add(query_601189, "TargetBucket", newJString(TargetBucket))
  add(query_601189, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_601189, "Version", newJString(Version))
  result = call_601188.call(nil, query_601189, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_601171(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_601172,
    base: "/", url: url_GetCopySnapshot_601173, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_601248 = ref object of OpenApiRestCall_600437
proc url_PostCreateCacheCluster_601250(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheCluster_601249(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601251 = query.getOrDefault("Action")
  valid_601251 = validateParameter(valid_601251, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_601251 != nil:
    section.add "Action", valid_601251
  var valid_601252 = query.getOrDefault("Version")
  valid_601252 = validateParameter(valid_601252, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601252 != nil:
    section.add "Version", valid_601252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601253 = header.getOrDefault("X-Amz-Date")
  valid_601253 = validateParameter(valid_601253, JString, required = false,
                                 default = nil)
  if valid_601253 != nil:
    section.add "X-Amz-Date", valid_601253
  var valid_601254 = header.getOrDefault("X-Amz-Security-Token")
  valid_601254 = validateParameter(valid_601254, JString, required = false,
                                 default = nil)
  if valid_601254 != nil:
    section.add "X-Amz-Security-Token", valid_601254
  var valid_601255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601255 = validateParameter(valid_601255, JString, required = false,
                                 default = nil)
  if valid_601255 != nil:
    section.add "X-Amz-Content-Sha256", valid_601255
  var valid_601256 = header.getOrDefault("X-Amz-Algorithm")
  valid_601256 = validateParameter(valid_601256, JString, required = false,
                                 default = nil)
  if valid_601256 != nil:
    section.add "X-Amz-Algorithm", valid_601256
  var valid_601257 = header.getOrDefault("X-Amz-Signature")
  valid_601257 = validateParameter(valid_601257, JString, required = false,
                                 default = nil)
  if valid_601257 != nil:
    section.add "X-Amz-Signature", valid_601257
  var valid_601258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601258 = validateParameter(valid_601258, JString, required = false,
                                 default = nil)
  if valid_601258 != nil:
    section.add "X-Amz-SignedHeaders", valid_601258
  var valid_601259 = header.getOrDefault("X-Amz-Credential")
  valid_601259 = validateParameter(valid_601259, JString, required = false,
                                 default = nil)
  if valid_601259 != nil:
    section.add "X-Amz-Credential", valid_601259
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_601260 = formData.getOrDefault("CacheNodeType")
  valid_601260 = validateParameter(valid_601260, JString, required = false,
                                 default = nil)
  if valid_601260 != nil:
    section.add "CacheNodeType", valid_601260
  var valid_601261 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_601261 = validateParameter(valid_601261, JArray, required = false,
                                 default = nil)
  if valid_601261 != nil:
    section.add "PreferredAvailabilityZones", valid_601261
  var valid_601262 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_601262 = validateParameter(valid_601262, JArray, required = false,
                                 default = nil)
  if valid_601262 != nil:
    section.add "CacheSecurityGroupNames", valid_601262
  var valid_601263 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_601263 = validateParameter(valid_601263, JString, required = false,
                                 default = nil)
  if valid_601263 != nil:
    section.add "PreferredAvailabilityZone", valid_601263
  var valid_601264 = formData.getOrDefault("Port")
  valid_601264 = validateParameter(valid_601264, JInt, required = false, default = nil)
  if valid_601264 != nil:
    section.add "Port", valid_601264
  var valid_601265 = formData.getOrDefault("Engine")
  valid_601265 = validateParameter(valid_601265, JString, required = false,
                                 default = nil)
  if valid_601265 != nil:
    section.add "Engine", valid_601265
  var valid_601266 = formData.getOrDefault("AuthToken")
  valid_601266 = validateParameter(valid_601266, JString, required = false,
                                 default = nil)
  if valid_601266 != nil:
    section.add "AuthToken", valid_601266
  var valid_601267 = formData.getOrDefault("Tags")
  valid_601267 = validateParameter(valid_601267, JArray, required = false,
                                 default = nil)
  if valid_601267 != nil:
    section.add "Tags", valid_601267
  var valid_601268 = formData.getOrDefault("NotificationTopicArn")
  valid_601268 = validateParameter(valid_601268, JString, required = false,
                                 default = nil)
  if valid_601268 != nil:
    section.add "NotificationTopicArn", valid_601268
  var valid_601269 = formData.getOrDefault("SecurityGroupIds")
  valid_601269 = validateParameter(valid_601269, JArray, required = false,
                                 default = nil)
  if valid_601269 != nil:
    section.add "SecurityGroupIds", valid_601269
  var valid_601270 = formData.getOrDefault("ReplicationGroupId")
  valid_601270 = validateParameter(valid_601270, JString, required = false,
                                 default = nil)
  if valid_601270 != nil:
    section.add "ReplicationGroupId", valid_601270
  var valid_601271 = formData.getOrDefault("NumCacheNodes")
  valid_601271 = validateParameter(valid_601271, JInt, required = false, default = nil)
  if valid_601271 != nil:
    section.add "NumCacheNodes", valid_601271
  var valid_601272 = formData.getOrDefault("AZMode")
  valid_601272 = validateParameter(valid_601272, JString, required = false,
                                 default = newJString("single-az"))
  if valid_601272 != nil:
    section.add "AZMode", valid_601272
  var valid_601273 = formData.getOrDefault("SnapshotArns")
  valid_601273 = validateParameter(valid_601273, JArray, required = false,
                                 default = nil)
  if valid_601273 != nil:
    section.add "SnapshotArns", valid_601273
  var valid_601274 = formData.getOrDefault("CacheParameterGroupName")
  valid_601274 = validateParameter(valid_601274, JString, required = false,
                                 default = nil)
  if valid_601274 != nil:
    section.add "CacheParameterGroupName", valid_601274
  var valid_601275 = formData.getOrDefault("CacheSubnetGroupName")
  valid_601275 = validateParameter(valid_601275, JString, required = false,
                                 default = nil)
  if valid_601275 != nil:
    section.add "CacheSubnetGroupName", valid_601275
  var valid_601276 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_601276 = validateParameter(valid_601276, JInt, required = false, default = nil)
  if valid_601276 != nil:
    section.add "SnapshotRetentionLimit", valid_601276
  var valid_601277 = formData.getOrDefault("SnapshotWindow")
  valid_601277 = validateParameter(valid_601277, JString, required = false,
                                 default = nil)
  if valid_601277 != nil:
    section.add "SnapshotWindow", valid_601277
  var valid_601278 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_601278 = validateParameter(valid_601278, JBool, required = false, default = nil)
  if valid_601278 != nil:
    section.add "AutoMinorVersionUpgrade", valid_601278
  var valid_601279 = formData.getOrDefault("EngineVersion")
  valid_601279 = validateParameter(valid_601279, JString, required = false,
                                 default = nil)
  if valid_601279 != nil:
    section.add "EngineVersion", valid_601279
  var valid_601280 = formData.getOrDefault("SnapshotName")
  valid_601280 = validateParameter(valid_601280, JString, required = false,
                                 default = nil)
  if valid_601280 != nil:
    section.add "SnapshotName", valid_601280
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_601281 = formData.getOrDefault("CacheClusterId")
  valid_601281 = validateParameter(valid_601281, JString, required = true,
                                 default = nil)
  if valid_601281 != nil:
    section.add "CacheClusterId", valid_601281
  var valid_601282 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_601282 = validateParameter(valid_601282, JString, required = false,
                                 default = nil)
  if valid_601282 != nil:
    section.add "PreferredMaintenanceWindow", valid_601282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601283: Call_PostCreateCacheCluster_601248; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_601283.validator(path, query, header, formData, body)
  let scheme = call_601283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601283.url(scheme.get, call_601283.host, call_601283.base,
                         call_601283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601283, url, valid)

proc call*(call_601284: Call_PostCreateCacheCluster_601248; CacheClusterId: string;
          CacheNodeType: string = ""; PreferredAvailabilityZones: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil;
          PreferredAvailabilityZone: string = ""; Port: int = 0; Engine: string = "";
          AuthToken: string = ""; Tags: JsonNode = nil;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          ReplicationGroupId: string = ""; NumCacheNodes: int = 0;
          AZMode: string = "single-az"; SnapshotArns: JsonNode = nil;
          Action: string = "CreateCacheCluster";
          CacheParameterGroupName: string = ""; CacheSubnetGroupName: string = "";
          SnapshotRetentionLimit: int = 0; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; EngineVersion: string = "";
          Version: string = "2015-02-02"; SnapshotName: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_601285 = newJObject()
  var formData_601286 = newJObject()
  add(formData_601286, "CacheNodeType", newJString(CacheNodeType))
  if PreferredAvailabilityZones != nil:
    formData_601286.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  if CacheSecurityGroupNames != nil:
    formData_601286.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_601286, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  add(formData_601286, "Port", newJInt(Port))
  add(formData_601286, "Engine", newJString(Engine))
  add(formData_601286, "AuthToken", newJString(AuthToken))
  if Tags != nil:
    formData_601286.add "Tags", Tags
  add(formData_601286, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_601286.add "SecurityGroupIds", SecurityGroupIds
  add(formData_601286, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_601286, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_601286, "AZMode", newJString(AZMode))
  if SnapshotArns != nil:
    formData_601286.add "SnapshotArns", SnapshotArns
  add(query_601285, "Action", newJString(Action))
  add(formData_601286, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_601286, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_601286, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_601286, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_601286, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_601286, "EngineVersion", newJString(EngineVersion))
  add(query_601285, "Version", newJString(Version))
  add(formData_601286, "SnapshotName", newJString(SnapshotName))
  add(formData_601286, "CacheClusterId", newJString(CacheClusterId))
  add(formData_601286, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_601284.call(nil, query_601285, nil, formData_601286, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_601248(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_601249, base: "/",
    url: url_PostCreateCacheCluster_601250, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_601210 = ref object of OpenApiRestCall_600437
proc url_GetCreateCacheCluster_601212(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheCluster_601211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   Action: JString (required)
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Version: JString (required)
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_601213 = query.getOrDefault("AuthToken")
  valid_601213 = validateParameter(valid_601213, JString, required = false,
                                 default = nil)
  if valid_601213 != nil:
    section.add "AuthToken", valid_601213
  var valid_601214 = query.getOrDefault("Engine")
  valid_601214 = validateParameter(valid_601214, JString, required = false,
                                 default = nil)
  if valid_601214 != nil:
    section.add "Engine", valid_601214
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_601215 = query.getOrDefault("CacheClusterId")
  valid_601215 = validateParameter(valid_601215, JString, required = true,
                                 default = nil)
  if valid_601215 != nil:
    section.add "CacheClusterId", valid_601215
  var valid_601216 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_601216 = validateParameter(valid_601216, JString, required = false,
                                 default = nil)
  if valid_601216 != nil:
    section.add "PreferredMaintenanceWindow", valid_601216
  var valid_601217 = query.getOrDefault("SnapshotRetentionLimit")
  valid_601217 = validateParameter(valid_601217, JInt, required = false, default = nil)
  if valid_601217 != nil:
    section.add "SnapshotRetentionLimit", valid_601217
  var valid_601218 = query.getOrDefault("CacheNodeType")
  valid_601218 = validateParameter(valid_601218, JString, required = false,
                                 default = nil)
  if valid_601218 != nil:
    section.add "CacheNodeType", valid_601218
  var valid_601219 = query.getOrDefault("SnapshotName")
  valid_601219 = validateParameter(valid_601219, JString, required = false,
                                 default = nil)
  if valid_601219 != nil:
    section.add "SnapshotName", valid_601219
  var valid_601220 = query.getOrDefault("PreferredAvailabilityZones")
  valid_601220 = validateParameter(valid_601220, JArray, required = false,
                                 default = nil)
  if valid_601220 != nil:
    section.add "PreferredAvailabilityZones", valid_601220
  var valid_601221 = query.getOrDefault("CacheParameterGroupName")
  valid_601221 = validateParameter(valid_601221, JString, required = false,
                                 default = nil)
  if valid_601221 != nil:
    section.add "CacheParameterGroupName", valid_601221
  var valid_601222 = query.getOrDefault("Tags")
  valid_601222 = validateParameter(valid_601222, JArray, required = false,
                                 default = nil)
  if valid_601222 != nil:
    section.add "Tags", valid_601222
  var valid_601223 = query.getOrDefault("Action")
  valid_601223 = validateParameter(valid_601223, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_601223 != nil:
    section.add "Action", valid_601223
  var valid_601224 = query.getOrDefault("AZMode")
  valid_601224 = validateParameter(valid_601224, JString, required = false,
                                 default = newJString("single-az"))
  if valid_601224 != nil:
    section.add "AZMode", valid_601224
  var valid_601225 = query.getOrDefault("NotificationTopicArn")
  valid_601225 = validateParameter(valid_601225, JString, required = false,
                                 default = nil)
  if valid_601225 != nil:
    section.add "NotificationTopicArn", valid_601225
  var valid_601226 = query.getOrDefault("PreferredAvailabilityZone")
  valid_601226 = validateParameter(valid_601226, JString, required = false,
                                 default = nil)
  if valid_601226 != nil:
    section.add "PreferredAvailabilityZone", valid_601226
  var valid_601227 = query.getOrDefault("ReplicationGroupId")
  valid_601227 = validateParameter(valid_601227, JString, required = false,
                                 default = nil)
  if valid_601227 != nil:
    section.add "ReplicationGroupId", valid_601227
  var valid_601228 = query.getOrDefault("EngineVersion")
  valid_601228 = validateParameter(valid_601228, JString, required = false,
                                 default = nil)
  if valid_601228 != nil:
    section.add "EngineVersion", valid_601228
  var valid_601229 = query.getOrDefault("CacheSubnetGroupName")
  valid_601229 = validateParameter(valid_601229, JString, required = false,
                                 default = nil)
  if valid_601229 != nil:
    section.add "CacheSubnetGroupName", valid_601229
  var valid_601230 = query.getOrDefault("SnapshotArns")
  valid_601230 = validateParameter(valid_601230, JArray, required = false,
                                 default = nil)
  if valid_601230 != nil:
    section.add "SnapshotArns", valid_601230
  var valid_601231 = query.getOrDefault("SecurityGroupIds")
  valid_601231 = validateParameter(valid_601231, JArray, required = false,
                                 default = nil)
  if valid_601231 != nil:
    section.add "SecurityGroupIds", valid_601231
  var valid_601232 = query.getOrDefault("Port")
  valid_601232 = validateParameter(valid_601232, JInt, required = false, default = nil)
  if valid_601232 != nil:
    section.add "Port", valid_601232
  var valid_601233 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_601233 = validateParameter(valid_601233, JBool, required = false, default = nil)
  if valid_601233 != nil:
    section.add "AutoMinorVersionUpgrade", valid_601233
  var valid_601234 = query.getOrDefault("CacheSecurityGroupNames")
  valid_601234 = validateParameter(valid_601234, JArray, required = false,
                                 default = nil)
  if valid_601234 != nil:
    section.add "CacheSecurityGroupNames", valid_601234
  var valid_601235 = query.getOrDefault("Version")
  valid_601235 = validateParameter(valid_601235, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601235 != nil:
    section.add "Version", valid_601235
  var valid_601236 = query.getOrDefault("NumCacheNodes")
  valid_601236 = validateParameter(valid_601236, JInt, required = false, default = nil)
  if valid_601236 != nil:
    section.add "NumCacheNodes", valid_601236
  var valid_601237 = query.getOrDefault("SnapshotWindow")
  valid_601237 = validateParameter(valid_601237, JString, required = false,
                                 default = nil)
  if valid_601237 != nil:
    section.add "SnapshotWindow", valid_601237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601238 = header.getOrDefault("X-Amz-Date")
  valid_601238 = validateParameter(valid_601238, JString, required = false,
                                 default = nil)
  if valid_601238 != nil:
    section.add "X-Amz-Date", valid_601238
  var valid_601239 = header.getOrDefault("X-Amz-Security-Token")
  valid_601239 = validateParameter(valid_601239, JString, required = false,
                                 default = nil)
  if valid_601239 != nil:
    section.add "X-Amz-Security-Token", valid_601239
  var valid_601240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601240 = validateParameter(valid_601240, JString, required = false,
                                 default = nil)
  if valid_601240 != nil:
    section.add "X-Amz-Content-Sha256", valid_601240
  var valid_601241 = header.getOrDefault("X-Amz-Algorithm")
  valid_601241 = validateParameter(valid_601241, JString, required = false,
                                 default = nil)
  if valid_601241 != nil:
    section.add "X-Amz-Algorithm", valid_601241
  var valid_601242 = header.getOrDefault("X-Amz-Signature")
  valid_601242 = validateParameter(valid_601242, JString, required = false,
                                 default = nil)
  if valid_601242 != nil:
    section.add "X-Amz-Signature", valid_601242
  var valid_601243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601243 = validateParameter(valid_601243, JString, required = false,
                                 default = nil)
  if valid_601243 != nil:
    section.add "X-Amz-SignedHeaders", valid_601243
  var valid_601244 = header.getOrDefault("X-Amz-Credential")
  valid_601244 = validateParameter(valid_601244, JString, required = false,
                                 default = nil)
  if valid_601244 != nil:
    section.add "X-Amz-Credential", valid_601244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601245: Call_GetCreateCacheCluster_601210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_601245.validator(path, query, header, formData, body)
  let scheme = call_601245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601245.url(scheme.get, call_601245.host, call_601245.base,
                         call_601245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601245, url, valid)

proc call*(call_601246: Call_GetCreateCacheCluster_601210; CacheClusterId: string;
          AuthToken: string = ""; Engine: string = "";
          PreferredMaintenanceWindow: string = ""; SnapshotRetentionLimit: int = 0;
          CacheNodeType: string = ""; SnapshotName: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateCacheCluster"; AZMode: string = "single-az";
          NotificationTopicArn: string = ""; PreferredAvailabilityZone: string = "";
          ReplicationGroupId: string = ""; EngineVersion: string = "";
          CacheSubnetGroupName: string = ""; SnapshotArns: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; Port: int = 0;
          AutoMinorVersionUpgrade: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; Version: string = "2015-02-02";
          NumCacheNodes: int = 0; SnapshotWindow: string = ""): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   Action: string (required)
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Version: string (required)
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_601247 = newJObject()
  add(query_601247, "AuthToken", newJString(AuthToken))
  add(query_601247, "Engine", newJString(Engine))
  add(query_601247, "CacheClusterId", newJString(CacheClusterId))
  add(query_601247, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_601247, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_601247, "CacheNodeType", newJString(CacheNodeType))
  add(query_601247, "SnapshotName", newJString(SnapshotName))
  if PreferredAvailabilityZones != nil:
    query_601247.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_601247, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_601247.add "Tags", Tags
  add(query_601247, "Action", newJString(Action))
  add(query_601247, "AZMode", newJString(AZMode))
  add(query_601247, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_601247, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  add(query_601247, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601247, "EngineVersion", newJString(EngineVersion))
  add(query_601247, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  if SnapshotArns != nil:
    query_601247.add "SnapshotArns", SnapshotArns
  if SecurityGroupIds != nil:
    query_601247.add "SecurityGroupIds", SecurityGroupIds
  add(query_601247, "Port", newJInt(Port))
  add(query_601247, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if CacheSecurityGroupNames != nil:
    query_601247.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_601247, "Version", newJString(Version))
  add(query_601247, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_601247, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_601246.call(nil, query_601247, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_601210(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_601211, base: "/",
    url: url_GetCreateCacheCluster_601212, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_601305 = ref object of OpenApiRestCall_600437
proc url_PostCreateCacheParameterGroup_601307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheParameterGroup_601306(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601308 = query.getOrDefault("Action")
  valid_601308 = validateParameter(valid_601308, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_601308 != nil:
    section.add "Action", valid_601308
  var valid_601309 = query.getOrDefault("Version")
  valid_601309 = validateParameter(valid_601309, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601309 != nil:
    section.add "Version", valid_601309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601310 = header.getOrDefault("X-Amz-Date")
  valid_601310 = validateParameter(valid_601310, JString, required = false,
                                 default = nil)
  if valid_601310 != nil:
    section.add "X-Amz-Date", valid_601310
  var valid_601311 = header.getOrDefault("X-Amz-Security-Token")
  valid_601311 = validateParameter(valid_601311, JString, required = false,
                                 default = nil)
  if valid_601311 != nil:
    section.add "X-Amz-Security-Token", valid_601311
  var valid_601312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601312 = validateParameter(valid_601312, JString, required = false,
                                 default = nil)
  if valid_601312 != nil:
    section.add "X-Amz-Content-Sha256", valid_601312
  var valid_601313 = header.getOrDefault("X-Amz-Algorithm")
  valid_601313 = validateParameter(valid_601313, JString, required = false,
                                 default = nil)
  if valid_601313 != nil:
    section.add "X-Amz-Algorithm", valid_601313
  var valid_601314 = header.getOrDefault("X-Amz-Signature")
  valid_601314 = validateParameter(valid_601314, JString, required = false,
                                 default = nil)
  if valid_601314 != nil:
    section.add "X-Amz-Signature", valid_601314
  var valid_601315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601315 = validateParameter(valid_601315, JString, required = false,
                                 default = nil)
  if valid_601315 != nil:
    section.add "X-Amz-SignedHeaders", valid_601315
  var valid_601316 = header.getOrDefault("X-Amz-Credential")
  valid_601316 = validateParameter(valid_601316, JString, required = false,
                                 default = nil)
  if valid_601316 != nil:
    section.add "X-Amz-Credential", valid_601316
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_601317 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_601317 = validateParameter(valid_601317, JString, required = true,
                                 default = nil)
  if valid_601317 != nil:
    section.add "CacheParameterGroupFamily", valid_601317
  var valid_601318 = formData.getOrDefault("CacheParameterGroupName")
  valid_601318 = validateParameter(valid_601318, JString, required = true,
                                 default = nil)
  if valid_601318 != nil:
    section.add "CacheParameterGroupName", valid_601318
  var valid_601319 = formData.getOrDefault("Description")
  valid_601319 = validateParameter(valid_601319, JString, required = true,
                                 default = nil)
  if valid_601319 != nil:
    section.add "Description", valid_601319
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601320: Call_PostCreateCacheParameterGroup_601305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_601320.validator(path, query, header, formData, body)
  let scheme = call_601320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601320.url(scheme.get, call_601320.host, call_601320.base,
                         call_601320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601320, url, valid)

proc call*(call_601321: Call_PostCreateCacheParameterGroup_601305;
          CacheParameterGroupFamily: string; CacheParameterGroupName: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  var query_601322 = newJObject()
  var formData_601323 = newJObject()
  add(formData_601323, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_601322, "Action", newJString(Action))
  add(formData_601323, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_601322, "Version", newJString(Version))
  add(formData_601323, "Description", newJString(Description))
  result = call_601321.call(nil, query_601322, nil, formData_601323, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_601305(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_601306, base: "/",
    url: url_PostCreateCacheParameterGroup_601307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_601287 = ref object of OpenApiRestCall_600437
proc url_GetCreateCacheParameterGroup_601289(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheParameterGroup_601288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_601290 = query.getOrDefault("Description")
  valid_601290 = validateParameter(valid_601290, JString, required = true,
                                 default = nil)
  if valid_601290 != nil:
    section.add "Description", valid_601290
  var valid_601291 = query.getOrDefault("CacheParameterGroupName")
  valid_601291 = validateParameter(valid_601291, JString, required = true,
                                 default = nil)
  if valid_601291 != nil:
    section.add "CacheParameterGroupName", valid_601291
  var valid_601292 = query.getOrDefault("Action")
  valid_601292 = validateParameter(valid_601292, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_601292 != nil:
    section.add "Action", valid_601292
  var valid_601293 = query.getOrDefault("Version")
  valid_601293 = validateParameter(valid_601293, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601293 != nil:
    section.add "Version", valid_601293
  var valid_601294 = query.getOrDefault("CacheParameterGroupFamily")
  valid_601294 = validateParameter(valid_601294, JString, required = true,
                                 default = nil)
  if valid_601294 != nil:
    section.add "CacheParameterGroupFamily", valid_601294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601295 = header.getOrDefault("X-Amz-Date")
  valid_601295 = validateParameter(valid_601295, JString, required = false,
                                 default = nil)
  if valid_601295 != nil:
    section.add "X-Amz-Date", valid_601295
  var valid_601296 = header.getOrDefault("X-Amz-Security-Token")
  valid_601296 = validateParameter(valid_601296, JString, required = false,
                                 default = nil)
  if valid_601296 != nil:
    section.add "X-Amz-Security-Token", valid_601296
  var valid_601297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601297 = validateParameter(valid_601297, JString, required = false,
                                 default = nil)
  if valid_601297 != nil:
    section.add "X-Amz-Content-Sha256", valid_601297
  var valid_601298 = header.getOrDefault("X-Amz-Algorithm")
  valid_601298 = validateParameter(valid_601298, JString, required = false,
                                 default = nil)
  if valid_601298 != nil:
    section.add "X-Amz-Algorithm", valid_601298
  var valid_601299 = header.getOrDefault("X-Amz-Signature")
  valid_601299 = validateParameter(valid_601299, JString, required = false,
                                 default = nil)
  if valid_601299 != nil:
    section.add "X-Amz-Signature", valid_601299
  var valid_601300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601300 = validateParameter(valid_601300, JString, required = false,
                                 default = nil)
  if valid_601300 != nil:
    section.add "X-Amz-SignedHeaders", valid_601300
  var valid_601301 = header.getOrDefault("X-Amz-Credential")
  valid_601301 = validateParameter(valid_601301, JString, required = false,
                                 default = nil)
  if valid_601301 != nil:
    section.add "X-Amz-Credential", valid_601301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601302: Call_GetCreateCacheParameterGroup_601287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_601302.validator(path, query, header, formData, body)
  let scheme = call_601302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601302.url(scheme.get, call_601302.host, call_601302.base,
                         call_601302.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601302, url, valid)

proc call*(call_601303: Call_GetCreateCacheParameterGroup_601287;
          Description: string; CacheParameterGroupName: string;
          CacheParameterGroupFamily: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  var query_601304 = newJObject()
  add(query_601304, "Description", newJString(Description))
  add(query_601304, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_601304, "Action", newJString(Action))
  add(query_601304, "Version", newJString(Version))
  add(query_601304, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_601303.call(nil, query_601304, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_601287(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_601288, base: "/",
    url: url_GetCreateCacheParameterGroup_601289,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_601341 = ref object of OpenApiRestCall_600437
proc url_PostCreateCacheSecurityGroup_601343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSecurityGroup_601342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601344 = query.getOrDefault("Action")
  valid_601344 = validateParameter(valid_601344, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_601344 != nil:
    section.add "Action", valid_601344
  var valid_601345 = query.getOrDefault("Version")
  valid_601345 = validateParameter(valid_601345, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601345 != nil:
    section.add "Version", valid_601345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601346 = header.getOrDefault("X-Amz-Date")
  valid_601346 = validateParameter(valid_601346, JString, required = false,
                                 default = nil)
  if valid_601346 != nil:
    section.add "X-Amz-Date", valid_601346
  var valid_601347 = header.getOrDefault("X-Amz-Security-Token")
  valid_601347 = validateParameter(valid_601347, JString, required = false,
                                 default = nil)
  if valid_601347 != nil:
    section.add "X-Amz-Security-Token", valid_601347
  var valid_601348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601348 = validateParameter(valid_601348, JString, required = false,
                                 default = nil)
  if valid_601348 != nil:
    section.add "X-Amz-Content-Sha256", valid_601348
  var valid_601349 = header.getOrDefault("X-Amz-Algorithm")
  valid_601349 = validateParameter(valid_601349, JString, required = false,
                                 default = nil)
  if valid_601349 != nil:
    section.add "X-Amz-Algorithm", valid_601349
  var valid_601350 = header.getOrDefault("X-Amz-Signature")
  valid_601350 = validateParameter(valid_601350, JString, required = false,
                                 default = nil)
  if valid_601350 != nil:
    section.add "X-Amz-Signature", valid_601350
  var valid_601351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601351 = validateParameter(valid_601351, JString, required = false,
                                 default = nil)
  if valid_601351 != nil:
    section.add "X-Amz-SignedHeaders", valid_601351
  var valid_601352 = header.getOrDefault("X-Amz-Credential")
  valid_601352 = validateParameter(valid_601352, JString, required = false,
                                 default = nil)
  if valid_601352 != nil:
    section.add "X-Amz-Credential", valid_601352
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601353 = formData.getOrDefault("CacheSecurityGroupName")
  valid_601353 = validateParameter(valid_601353, JString, required = true,
                                 default = nil)
  if valid_601353 != nil:
    section.add "CacheSecurityGroupName", valid_601353
  var valid_601354 = formData.getOrDefault("Description")
  valid_601354 = validateParameter(valid_601354, JString, required = true,
                                 default = nil)
  if valid_601354 != nil:
    section.add "Description", valid_601354
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601355: Call_PostCreateCacheSecurityGroup_601341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_601355.validator(path, query, header, formData, body)
  let scheme = call_601355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601355.url(scheme.get, call_601355.host, call_601355.base,
                         call_601355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601355, url, valid)

proc call*(call_601356: Call_PostCreateCacheSecurityGroup_601341;
          CacheSecurityGroupName: string; Description: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  var query_601357 = newJObject()
  var formData_601358 = newJObject()
  add(formData_601358, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_601357, "Action", newJString(Action))
  add(query_601357, "Version", newJString(Version))
  add(formData_601358, "Description", newJString(Description))
  result = call_601356.call(nil, query_601357, nil, formData_601358, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_601341(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_601342, base: "/",
    url: url_PostCreateCacheSecurityGroup_601343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_601324 = ref object of OpenApiRestCall_600437
proc url_GetCreateCacheSecurityGroup_601326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSecurityGroup_601325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601327 = query.getOrDefault("CacheSecurityGroupName")
  valid_601327 = validateParameter(valid_601327, JString, required = true,
                                 default = nil)
  if valid_601327 != nil:
    section.add "CacheSecurityGroupName", valid_601327
  var valid_601328 = query.getOrDefault("Description")
  valid_601328 = validateParameter(valid_601328, JString, required = true,
                                 default = nil)
  if valid_601328 != nil:
    section.add "Description", valid_601328
  var valid_601329 = query.getOrDefault("Action")
  valid_601329 = validateParameter(valid_601329, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_601329 != nil:
    section.add "Action", valid_601329
  var valid_601330 = query.getOrDefault("Version")
  valid_601330 = validateParameter(valid_601330, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601330 != nil:
    section.add "Version", valid_601330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601331 = header.getOrDefault("X-Amz-Date")
  valid_601331 = validateParameter(valid_601331, JString, required = false,
                                 default = nil)
  if valid_601331 != nil:
    section.add "X-Amz-Date", valid_601331
  var valid_601332 = header.getOrDefault("X-Amz-Security-Token")
  valid_601332 = validateParameter(valid_601332, JString, required = false,
                                 default = nil)
  if valid_601332 != nil:
    section.add "X-Amz-Security-Token", valid_601332
  var valid_601333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601333 = validateParameter(valid_601333, JString, required = false,
                                 default = nil)
  if valid_601333 != nil:
    section.add "X-Amz-Content-Sha256", valid_601333
  var valid_601334 = header.getOrDefault("X-Amz-Algorithm")
  valid_601334 = validateParameter(valid_601334, JString, required = false,
                                 default = nil)
  if valid_601334 != nil:
    section.add "X-Amz-Algorithm", valid_601334
  var valid_601335 = header.getOrDefault("X-Amz-Signature")
  valid_601335 = validateParameter(valid_601335, JString, required = false,
                                 default = nil)
  if valid_601335 != nil:
    section.add "X-Amz-Signature", valid_601335
  var valid_601336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601336 = validateParameter(valid_601336, JString, required = false,
                                 default = nil)
  if valid_601336 != nil:
    section.add "X-Amz-SignedHeaders", valid_601336
  var valid_601337 = header.getOrDefault("X-Amz-Credential")
  valid_601337 = validateParameter(valid_601337, JString, required = false,
                                 default = nil)
  if valid_601337 != nil:
    section.add "X-Amz-Credential", valid_601337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601338: Call_GetCreateCacheSecurityGroup_601324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_601338.validator(path, query, header, formData, body)
  let scheme = call_601338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601338.url(scheme.get, call_601338.host, call_601338.base,
                         call_601338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601338, url, valid)

proc call*(call_601339: Call_GetCreateCacheSecurityGroup_601324;
          CacheSecurityGroupName: string; Description: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601340 = newJObject()
  add(query_601340, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_601340, "Description", newJString(Description))
  add(query_601340, "Action", newJString(Action))
  add(query_601340, "Version", newJString(Version))
  result = call_601339.call(nil, query_601340, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_601324(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_601325, base: "/",
    url: url_GetCreateCacheSecurityGroup_601326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_601377 = ref object of OpenApiRestCall_600437
proc url_PostCreateCacheSubnetGroup_601379(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSubnetGroup_601378(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601380 = query.getOrDefault("Action")
  valid_601380 = validateParameter(valid_601380, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_601380 != nil:
    section.add "Action", valid_601380
  var valid_601381 = query.getOrDefault("Version")
  valid_601381 = validateParameter(valid_601381, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601381 != nil:
    section.add "Version", valid_601381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601382 = header.getOrDefault("X-Amz-Date")
  valid_601382 = validateParameter(valid_601382, JString, required = false,
                                 default = nil)
  if valid_601382 != nil:
    section.add "X-Amz-Date", valid_601382
  var valid_601383 = header.getOrDefault("X-Amz-Security-Token")
  valid_601383 = validateParameter(valid_601383, JString, required = false,
                                 default = nil)
  if valid_601383 != nil:
    section.add "X-Amz-Security-Token", valid_601383
  var valid_601384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601384 = validateParameter(valid_601384, JString, required = false,
                                 default = nil)
  if valid_601384 != nil:
    section.add "X-Amz-Content-Sha256", valid_601384
  var valid_601385 = header.getOrDefault("X-Amz-Algorithm")
  valid_601385 = validateParameter(valid_601385, JString, required = false,
                                 default = nil)
  if valid_601385 != nil:
    section.add "X-Amz-Algorithm", valid_601385
  var valid_601386 = header.getOrDefault("X-Amz-Signature")
  valid_601386 = validateParameter(valid_601386, JString, required = false,
                                 default = nil)
  if valid_601386 != nil:
    section.add "X-Amz-Signature", valid_601386
  var valid_601387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601387 = validateParameter(valid_601387, JString, required = false,
                                 default = nil)
  if valid_601387 != nil:
    section.add "X-Amz-SignedHeaders", valid_601387
  var valid_601388 = header.getOrDefault("X-Amz-Credential")
  valid_601388 = validateParameter(valid_601388, JString, required = false,
                                 default = nil)
  if valid_601388 != nil:
    section.add "X-Amz-Credential", valid_601388
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_601389 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_601389 = validateParameter(valid_601389, JString, required = true,
                                 default = nil)
  if valid_601389 != nil:
    section.add "CacheSubnetGroupDescription", valid_601389
  var valid_601390 = formData.getOrDefault("SubnetIds")
  valid_601390 = validateParameter(valid_601390, JArray, required = true, default = nil)
  if valid_601390 != nil:
    section.add "SubnetIds", valid_601390
  var valid_601391 = formData.getOrDefault("CacheSubnetGroupName")
  valid_601391 = validateParameter(valid_601391, JString, required = true,
                                 default = nil)
  if valid_601391 != nil:
    section.add "CacheSubnetGroupName", valid_601391
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601392: Call_PostCreateCacheSubnetGroup_601377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_601392.validator(path, query, header, formData, body)
  let scheme = call_601392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601392.url(scheme.get, call_601392.host, call_601392.base,
                         call_601392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601392, url, valid)

proc call*(call_601393: Call_PostCreateCacheSubnetGroup_601377;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_601394 = newJObject()
  var formData_601395 = newJObject()
  add(formData_601395, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    formData_601395.add "SubnetIds", SubnetIds
  add(query_601394, "Action", newJString(Action))
  add(formData_601395, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_601394, "Version", newJString(Version))
  result = call_601393.call(nil, query_601394, nil, formData_601395, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_601377(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_601378, base: "/",
    url: url_PostCreateCacheSubnetGroup_601379,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_601359 = ref object of OpenApiRestCall_600437
proc url_GetCreateCacheSubnetGroup_601361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSubnetGroup_601360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   Action: JString (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_601362 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_601362 = validateParameter(valid_601362, JString, required = true,
                                 default = nil)
  if valid_601362 != nil:
    section.add "CacheSubnetGroupDescription", valid_601362
  var valid_601363 = query.getOrDefault("Action")
  valid_601363 = validateParameter(valid_601363, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_601363 != nil:
    section.add "Action", valid_601363
  var valid_601364 = query.getOrDefault("SubnetIds")
  valid_601364 = validateParameter(valid_601364, JArray, required = true, default = nil)
  if valid_601364 != nil:
    section.add "SubnetIds", valid_601364
  var valid_601365 = query.getOrDefault("CacheSubnetGroupName")
  valid_601365 = validateParameter(valid_601365, JString, required = true,
                                 default = nil)
  if valid_601365 != nil:
    section.add "CacheSubnetGroupName", valid_601365
  var valid_601366 = query.getOrDefault("Version")
  valid_601366 = validateParameter(valid_601366, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601366 != nil:
    section.add "Version", valid_601366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601367 = header.getOrDefault("X-Amz-Date")
  valid_601367 = validateParameter(valid_601367, JString, required = false,
                                 default = nil)
  if valid_601367 != nil:
    section.add "X-Amz-Date", valid_601367
  var valid_601368 = header.getOrDefault("X-Amz-Security-Token")
  valid_601368 = validateParameter(valid_601368, JString, required = false,
                                 default = nil)
  if valid_601368 != nil:
    section.add "X-Amz-Security-Token", valid_601368
  var valid_601369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601369 = validateParameter(valid_601369, JString, required = false,
                                 default = nil)
  if valid_601369 != nil:
    section.add "X-Amz-Content-Sha256", valid_601369
  var valid_601370 = header.getOrDefault("X-Amz-Algorithm")
  valid_601370 = validateParameter(valid_601370, JString, required = false,
                                 default = nil)
  if valid_601370 != nil:
    section.add "X-Amz-Algorithm", valid_601370
  var valid_601371 = header.getOrDefault("X-Amz-Signature")
  valid_601371 = validateParameter(valid_601371, JString, required = false,
                                 default = nil)
  if valid_601371 != nil:
    section.add "X-Amz-Signature", valid_601371
  var valid_601372 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601372 = validateParameter(valid_601372, JString, required = false,
                                 default = nil)
  if valid_601372 != nil:
    section.add "X-Amz-SignedHeaders", valid_601372
  var valid_601373 = header.getOrDefault("X-Amz-Credential")
  valid_601373 = validateParameter(valid_601373, JString, required = false,
                                 default = nil)
  if valid_601373 != nil:
    section.add "X-Amz-Credential", valid_601373
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601374: Call_GetCreateCacheSubnetGroup_601359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_601374.validator(path, query, header, formData, body)
  let scheme = call_601374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601374.url(scheme.get, call_601374.host, call_601374.base,
                         call_601374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601374, url, valid)

proc call*(call_601375: Call_GetCreateCacheSubnetGroup_601359;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   Action: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_601376 = newJObject()
  add(query_601376, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(query_601376, "Action", newJString(Action))
  if SubnetIds != nil:
    query_601376.add "SubnetIds", SubnetIds
  add(query_601376, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_601376, "Version", newJString(Version))
  result = call_601375.call(nil, query_601376, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_601359(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_601360, base: "/",
    url: url_GetCreateCacheSubnetGroup_601361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_601440 = ref object of OpenApiRestCall_600437
proc url_PostCreateReplicationGroup_601442(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReplicationGroup_601441(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601443 = query.getOrDefault("Action")
  valid_601443 = validateParameter(valid_601443, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_601443 != nil:
    section.add "Action", valid_601443
  var valid_601444 = query.getOrDefault("Version")
  valid_601444 = validateParameter(valid_601444, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601444 != nil:
    section.add "Version", valid_601444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601445 = header.getOrDefault("X-Amz-Date")
  valid_601445 = validateParameter(valid_601445, JString, required = false,
                                 default = nil)
  if valid_601445 != nil:
    section.add "X-Amz-Date", valid_601445
  var valid_601446 = header.getOrDefault("X-Amz-Security-Token")
  valid_601446 = validateParameter(valid_601446, JString, required = false,
                                 default = nil)
  if valid_601446 != nil:
    section.add "X-Amz-Security-Token", valid_601446
  var valid_601447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601447 = validateParameter(valid_601447, JString, required = false,
                                 default = nil)
  if valid_601447 != nil:
    section.add "X-Amz-Content-Sha256", valid_601447
  var valid_601448 = header.getOrDefault("X-Amz-Algorithm")
  valid_601448 = validateParameter(valid_601448, JString, required = false,
                                 default = nil)
  if valid_601448 != nil:
    section.add "X-Amz-Algorithm", valid_601448
  var valid_601449 = header.getOrDefault("X-Amz-Signature")
  valid_601449 = validateParameter(valid_601449, JString, required = false,
                                 default = nil)
  if valid_601449 != nil:
    section.add "X-Amz-Signature", valid_601449
  var valid_601450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601450 = validateParameter(valid_601450, JString, required = false,
                                 default = nil)
  if valid_601450 != nil:
    section.add "X-Amz-SignedHeaders", valid_601450
  var valid_601451 = header.getOrDefault("X-Amz-Credential")
  valid_601451 = validateParameter(valid_601451, JString, required = false,
                                 default = nil)
  if valid_601451 != nil:
    section.add "X-Amz-Credential", valid_601451
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_601452 = formData.getOrDefault("CacheNodeType")
  valid_601452 = validateParameter(valid_601452, JString, required = false,
                                 default = nil)
  if valid_601452 != nil:
    section.add "CacheNodeType", valid_601452
  var valid_601453 = formData.getOrDefault("PrimaryClusterId")
  valid_601453 = validateParameter(valid_601453, JString, required = false,
                                 default = nil)
  if valid_601453 != nil:
    section.add "PrimaryClusterId", valid_601453
  var valid_601454 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_601454 = validateParameter(valid_601454, JArray, required = false,
                                 default = nil)
  if valid_601454 != nil:
    section.add "CacheSecurityGroupNames", valid_601454
  var valid_601455 = formData.getOrDefault("NumNodeGroups")
  valid_601455 = validateParameter(valid_601455, JInt, required = false, default = nil)
  if valid_601455 != nil:
    section.add "NumNodeGroups", valid_601455
  var valid_601456 = formData.getOrDefault("Port")
  valid_601456 = validateParameter(valid_601456, JInt, required = false, default = nil)
  if valid_601456 != nil:
    section.add "Port", valid_601456
  var valid_601457 = formData.getOrDefault("Engine")
  valid_601457 = validateParameter(valid_601457, JString, required = false,
                                 default = nil)
  if valid_601457 != nil:
    section.add "Engine", valid_601457
  var valid_601458 = formData.getOrDefault("AuthToken")
  valid_601458 = validateParameter(valid_601458, JString, required = false,
                                 default = nil)
  if valid_601458 != nil:
    section.add "AuthToken", valid_601458
  var valid_601459 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_601459 = validateParameter(valid_601459, JBool, required = false, default = nil)
  if valid_601459 != nil:
    section.add "AutomaticFailoverEnabled", valid_601459
  var valid_601460 = formData.getOrDefault("Tags")
  valid_601460 = validateParameter(valid_601460, JArray, required = false,
                                 default = nil)
  if valid_601460 != nil:
    section.add "Tags", valid_601460
  var valid_601461 = formData.getOrDefault("NotificationTopicArn")
  valid_601461 = validateParameter(valid_601461, JString, required = false,
                                 default = nil)
  if valid_601461 != nil:
    section.add "NotificationTopicArn", valid_601461
  var valid_601462 = formData.getOrDefault("SecurityGroupIds")
  valid_601462 = validateParameter(valid_601462, JArray, required = false,
                                 default = nil)
  if valid_601462 != nil:
    section.add "SecurityGroupIds", valid_601462
  var valid_601463 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_601463 = validateParameter(valid_601463, JBool, required = false, default = nil)
  if valid_601463 != nil:
    section.add "AtRestEncryptionEnabled", valid_601463
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_601464 = formData.getOrDefault("ReplicationGroupId")
  valid_601464 = validateParameter(valid_601464, JString, required = true,
                                 default = nil)
  if valid_601464 != nil:
    section.add "ReplicationGroupId", valid_601464
  var valid_601465 = formData.getOrDefault("SnapshotArns")
  valid_601465 = validateParameter(valid_601465, JArray, required = false,
                                 default = nil)
  if valid_601465 != nil:
    section.add "SnapshotArns", valid_601465
  var valid_601466 = formData.getOrDefault("CacheParameterGroupName")
  valid_601466 = validateParameter(valid_601466, JString, required = false,
                                 default = nil)
  if valid_601466 != nil:
    section.add "CacheParameterGroupName", valid_601466
  var valid_601467 = formData.getOrDefault("NodeGroupConfiguration")
  valid_601467 = validateParameter(valid_601467, JArray, required = false,
                                 default = nil)
  if valid_601467 != nil:
    section.add "NodeGroupConfiguration", valid_601467
  var valid_601468 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_601468 = validateParameter(valid_601468, JBool, required = false, default = nil)
  if valid_601468 != nil:
    section.add "TransitEncryptionEnabled", valid_601468
  var valid_601469 = formData.getOrDefault("ReplicationGroupDescription")
  valid_601469 = validateParameter(valid_601469, JString, required = true,
                                 default = nil)
  if valid_601469 != nil:
    section.add "ReplicationGroupDescription", valid_601469
  var valid_601470 = formData.getOrDefault("CacheSubnetGroupName")
  valid_601470 = validateParameter(valid_601470, JString, required = false,
                                 default = nil)
  if valid_601470 != nil:
    section.add "CacheSubnetGroupName", valid_601470
  var valid_601471 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_601471 = validateParameter(valid_601471, JInt, required = false, default = nil)
  if valid_601471 != nil:
    section.add "ReplicasPerNodeGroup", valid_601471
  var valid_601472 = formData.getOrDefault("KmsKeyId")
  valid_601472 = validateParameter(valid_601472, JString, required = false,
                                 default = nil)
  if valid_601472 != nil:
    section.add "KmsKeyId", valid_601472
  var valid_601473 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_601473 = validateParameter(valid_601473, JArray, required = false,
                                 default = nil)
  if valid_601473 != nil:
    section.add "PreferredCacheClusterAZs", valid_601473
  var valid_601474 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_601474 = validateParameter(valid_601474, JInt, required = false, default = nil)
  if valid_601474 != nil:
    section.add "SnapshotRetentionLimit", valid_601474
  var valid_601475 = formData.getOrDefault("SnapshotWindow")
  valid_601475 = validateParameter(valid_601475, JString, required = false,
                                 default = nil)
  if valid_601475 != nil:
    section.add "SnapshotWindow", valid_601475
  var valid_601476 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_601476 = validateParameter(valid_601476, JBool, required = false, default = nil)
  if valid_601476 != nil:
    section.add "AutoMinorVersionUpgrade", valid_601476
  var valid_601477 = formData.getOrDefault("NumCacheClusters")
  valid_601477 = validateParameter(valid_601477, JInt, required = false, default = nil)
  if valid_601477 != nil:
    section.add "NumCacheClusters", valid_601477
  var valid_601478 = formData.getOrDefault("EngineVersion")
  valid_601478 = validateParameter(valid_601478, JString, required = false,
                                 default = nil)
  if valid_601478 != nil:
    section.add "EngineVersion", valid_601478
  var valid_601479 = formData.getOrDefault("SnapshotName")
  valid_601479 = validateParameter(valid_601479, JString, required = false,
                                 default = nil)
  if valid_601479 != nil:
    section.add "SnapshotName", valid_601479
  var valid_601480 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_601480 = validateParameter(valid_601480, JString, required = false,
                                 default = nil)
  if valid_601480 != nil:
    section.add "PreferredMaintenanceWindow", valid_601480
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601481: Call_PostCreateReplicationGroup_601440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601481.validator(path, query, header, formData, body)
  let scheme = call_601481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601481.url(scheme.get, call_601481.host, call_601481.base,
                         call_601481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601481, url, valid)

proc call*(call_601482: Call_PostCreateReplicationGroup_601440;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          CacheNodeType: string = ""; PrimaryClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; NumNodeGroups: int = 0;
          Port: int = 0; Engine: string = ""; AuthToken: string = "";
          AutomaticFailoverEnabled: bool = false; Tags: JsonNode = nil;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          AtRestEncryptionEnabled: bool = false; SnapshotArns: JsonNode = nil;
          Action: string = "CreateReplicationGroup";
          CacheParameterGroupName: string = "";
          NodeGroupConfiguration: JsonNode = nil;
          TransitEncryptionEnabled: bool = false; CacheSubnetGroupName: string = "";
          ReplicasPerNodeGroup: int = 0; KmsKeyId: string = "";
          PreferredCacheClusterAZs: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          NumCacheClusters: int = 0; EngineVersion: string = "";
          Version: string = "2015-02-02"; SnapshotName: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_601483 = newJObject()
  var formData_601484 = newJObject()
  add(formData_601484, "CacheNodeType", newJString(CacheNodeType))
  add(formData_601484, "PrimaryClusterId", newJString(PrimaryClusterId))
  if CacheSecurityGroupNames != nil:
    formData_601484.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_601484, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_601484, "Port", newJInt(Port))
  add(formData_601484, "Engine", newJString(Engine))
  add(formData_601484, "AuthToken", newJString(AuthToken))
  add(formData_601484, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  if Tags != nil:
    formData_601484.add "Tags", Tags
  add(formData_601484, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_601484.add "SecurityGroupIds", SecurityGroupIds
  add(formData_601484, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  add(formData_601484, "ReplicationGroupId", newJString(ReplicationGroupId))
  if SnapshotArns != nil:
    formData_601484.add "SnapshotArns", SnapshotArns
  add(query_601483, "Action", newJString(Action))
  add(formData_601484, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if NodeGroupConfiguration != nil:
    formData_601484.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_601484, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_601484, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(formData_601484, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_601484, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(formData_601484, "KmsKeyId", newJString(KmsKeyId))
  if PreferredCacheClusterAZs != nil:
    formData_601484.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_601484, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_601484, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_601484, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_601484, "NumCacheClusters", newJInt(NumCacheClusters))
  add(formData_601484, "EngineVersion", newJString(EngineVersion))
  add(query_601483, "Version", newJString(Version))
  add(formData_601484, "SnapshotName", newJString(SnapshotName))
  add(formData_601484, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_601482.call(nil, query_601483, nil, formData_601484, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_601440(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_601441, base: "/",
    url: url_PostCreateReplicationGroup_601442,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_601396 = ref object of OpenApiRestCall_600437
proc url_GetCreateReplicationGroup_601398(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReplicationGroup_601397(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Version: JString (required)
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  section = newJObject()
  var valid_601399 = query.getOrDefault("AuthToken")
  valid_601399 = validateParameter(valid_601399, JString, required = false,
                                 default = nil)
  if valid_601399 != nil:
    section.add "AuthToken", valid_601399
  var valid_601400 = query.getOrDefault("Engine")
  valid_601400 = validateParameter(valid_601400, JString, required = false,
                                 default = nil)
  if valid_601400 != nil:
    section.add "Engine", valid_601400
  var valid_601401 = query.getOrDefault("NumNodeGroups")
  valid_601401 = validateParameter(valid_601401, JInt, required = false, default = nil)
  if valid_601401 != nil:
    section.add "NumNodeGroups", valid_601401
  var valid_601402 = query.getOrDefault("SnapshotWindow")
  valid_601402 = validateParameter(valid_601402, JString, required = false,
                                 default = nil)
  if valid_601402 != nil:
    section.add "SnapshotWindow", valid_601402
  var valid_601403 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_601403 = validateParameter(valid_601403, JString, required = false,
                                 default = nil)
  if valid_601403 != nil:
    section.add "PreferredMaintenanceWindow", valid_601403
  var valid_601404 = query.getOrDefault("SnapshotRetentionLimit")
  valid_601404 = validateParameter(valid_601404, JInt, required = false, default = nil)
  if valid_601404 != nil:
    section.add "SnapshotRetentionLimit", valid_601404
  var valid_601405 = query.getOrDefault("CacheNodeType")
  valid_601405 = validateParameter(valid_601405, JString, required = false,
                                 default = nil)
  if valid_601405 != nil:
    section.add "CacheNodeType", valid_601405
  var valid_601406 = query.getOrDefault("TransitEncryptionEnabled")
  valid_601406 = validateParameter(valid_601406, JBool, required = false, default = nil)
  if valid_601406 != nil:
    section.add "TransitEncryptionEnabled", valid_601406
  var valid_601407 = query.getOrDefault("SnapshotName")
  valid_601407 = validateParameter(valid_601407, JString, required = false,
                                 default = nil)
  if valid_601407 != nil:
    section.add "SnapshotName", valid_601407
  var valid_601408 = query.getOrDefault("CacheParameterGroupName")
  valid_601408 = validateParameter(valid_601408, JString, required = false,
                                 default = nil)
  if valid_601408 != nil:
    section.add "CacheParameterGroupName", valid_601408
  var valid_601409 = query.getOrDefault("Tags")
  valid_601409 = validateParameter(valid_601409, JArray, required = false,
                                 default = nil)
  if valid_601409 != nil:
    section.add "Tags", valid_601409
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601410 = query.getOrDefault("Action")
  valid_601410 = validateParameter(valid_601410, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_601410 != nil:
    section.add "Action", valid_601410
  var valid_601411 = query.getOrDefault("NodeGroupConfiguration")
  valid_601411 = validateParameter(valid_601411, JArray, required = false,
                                 default = nil)
  if valid_601411 != nil:
    section.add "NodeGroupConfiguration", valid_601411
  var valid_601412 = query.getOrDefault("NotificationTopicArn")
  valid_601412 = validateParameter(valid_601412, JString, required = false,
                                 default = nil)
  if valid_601412 != nil:
    section.add "NotificationTopicArn", valid_601412
  var valid_601413 = query.getOrDefault("KmsKeyId")
  valid_601413 = validateParameter(valid_601413, JString, required = false,
                                 default = nil)
  if valid_601413 != nil:
    section.add "KmsKeyId", valid_601413
  var valid_601414 = query.getOrDefault("PrimaryClusterId")
  valid_601414 = validateParameter(valid_601414, JString, required = false,
                                 default = nil)
  if valid_601414 != nil:
    section.add "PrimaryClusterId", valid_601414
  var valid_601415 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_601415 = validateParameter(valid_601415, JInt, required = false, default = nil)
  if valid_601415 != nil:
    section.add "ReplicasPerNodeGroup", valid_601415
  var valid_601416 = query.getOrDefault("ReplicationGroupId")
  valid_601416 = validateParameter(valid_601416, JString, required = true,
                                 default = nil)
  if valid_601416 != nil:
    section.add "ReplicationGroupId", valid_601416
  var valid_601417 = query.getOrDefault("EngineVersion")
  valid_601417 = validateParameter(valid_601417, JString, required = false,
                                 default = nil)
  if valid_601417 != nil:
    section.add "EngineVersion", valid_601417
  var valid_601418 = query.getOrDefault("CacheSubnetGroupName")
  valid_601418 = validateParameter(valid_601418, JString, required = false,
                                 default = nil)
  if valid_601418 != nil:
    section.add "CacheSubnetGroupName", valid_601418
  var valid_601419 = query.getOrDefault("SnapshotArns")
  valid_601419 = validateParameter(valid_601419, JArray, required = false,
                                 default = nil)
  if valid_601419 != nil:
    section.add "SnapshotArns", valid_601419
  var valid_601420 = query.getOrDefault("SecurityGroupIds")
  valid_601420 = validateParameter(valid_601420, JArray, required = false,
                                 default = nil)
  if valid_601420 != nil:
    section.add "SecurityGroupIds", valid_601420
  var valid_601421 = query.getOrDefault("Port")
  valid_601421 = validateParameter(valid_601421, JInt, required = false, default = nil)
  if valid_601421 != nil:
    section.add "Port", valid_601421
  var valid_601422 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_601422 = validateParameter(valid_601422, JBool, required = false, default = nil)
  if valid_601422 != nil:
    section.add "AutoMinorVersionUpgrade", valid_601422
  var valid_601423 = query.getOrDefault("ReplicationGroupDescription")
  valid_601423 = validateParameter(valid_601423, JString, required = true,
                                 default = nil)
  if valid_601423 != nil:
    section.add "ReplicationGroupDescription", valid_601423
  var valid_601424 = query.getOrDefault("CacheSecurityGroupNames")
  valid_601424 = validateParameter(valid_601424, JArray, required = false,
                                 default = nil)
  if valid_601424 != nil:
    section.add "CacheSecurityGroupNames", valid_601424
  var valid_601425 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_601425 = validateParameter(valid_601425, JBool, required = false, default = nil)
  if valid_601425 != nil:
    section.add "AutomaticFailoverEnabled", valid_601425
  var valid_601426 = query.getOrDefault("NumCacheClusters")
  valid_601426 = validateParameter(valid_601426, JInt, required = false, default = nil)
  if valid_601426 != nil:
    section.add "NumCacheClusters", valid_601426
  var valid_601427 = query.getOrDefault("Version")
  valid_601427 = validateParameter(valid_601427, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601427 != nil:
    section.add "Version", valid_601427
  var valid_601428 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_601428 = validateParameter(valid_601428, JBool, required = false, default = nil)
  if valid_601428 != nil:
    section.add "AtRestEncryptionEnabled", valid_601428
  var valid_601429 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_601429 = validateParameter(valid_601429, JArray, required = false,
                                 default = nil)
  if valid_601429 != nil:
    section.add "PreferredCacheClusterAZs", valid_601429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601430 = header.getOrDefault("X-Amz-Date")
  valid_601430 = validateParameter(valid_601430, JString, required = false,
                                 default = nil)
  if valid_601430 != nil:
    section.add "X-Amz-Date", valid_601430
  var valid_601431 = header.getOrDefault("X-Amz-Security-Token")
  valid_601431 = validateParameter(valid_601431, JString, required = false,
                                 default = nil)
  if valid_601431 != nil:
    section.add "X-Amz-Security-Token", valid_601431
  var valid_601432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601432 = validateParameter(valid_601432, JString, required = false,
                                 default = nil)
  if valid_601432 != nil:
    section.add "X-Amz-Content-Sha256", valid_601432
  var valid_601433 = header.getOrDefault("X-Amz-Algorithm")
  valid_601433 = validateParameter(valid_601433, JString, required = false,
                                 default = nil)
  if valid_601433 != nil:
    section.add "X-Amz-Algorithm", valid_601433
  var valid_601434 = header.getOrDefault("X-Amz-Signature")
  valid_601434 = validateParameter(valid_601434, JString, required = false,
                                 default = nil)
  if valid_601434 != nil:
    section.add "X-Amz-Signature", valid_601434
  var valid_601435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601435 = validateParameter(valid_601435, JString, required = false,
                                 default = nil)
  if valid_601435 != nil:
    section.add "X-Amz-SignedHeaders", valid_601435
  var valid_601436 = header.getOrDefault("X-Amz-Credential")
  valid_601436 = validateParameter(valid_601436, JString, required = false,
                                 default = nil)
  if valid_601436 != nil:
    section.add "X-Amz-Credential", valid_601436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601437: Call_GetCreateReplicationGroup_601396; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601437.validator(path, query, header, formData, body)
  let scheme = call_601437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601437.url(scheme.get, call_601437.host, call_601437.base,
                         call_601437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601437, url, valid)

proc call*(call_601438: Call_GetCreateReplicationGroup_601396;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          SnapshotWindow: string = ""; PreferredMaintenanceWindow: string = "";
          SnapshotRetentionLimit: int = 0; CacheNodeType: string = "";
          TransitEncryptionEnabled: bool = false; SnapshotName: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; NotificationTopicArn: string = "";
          KmsKeyId: string = ""; PrimaryClusterId: string = "";
          ReplicasPerNodeGroup: int = 0; EngineVersion: string = "";
          CacheSubnetGroupName: string = ""; SnapshotArns: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; Port: int = 0;
          AutoMinorVersionUpgrade: bool = false;
          CacheSecurityGroupNames: JsonNode = nil;
          AutomaticFailoverEnabled: bool = false; NumCacheClusters: int = 0;
          Version: string = "2015-02-02"; AtRestEncryptionEnabled: bool = false;
          PreferredCacheClusterAZs: JsonNode = nil): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Version: string (required)
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  var query_601439 = newJObject()
  add(query_601439, "AuthToken", newJString(AuthToken))
  add(query_601439, "Engine", newJString(Engine))
  add(query_601439, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_601439, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_601439, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_601439, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_601439, "CacheNodeType", newJString(CacheNodeType))
  add(query_601439, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  add(query_601439, "SnapshotName", newJString(SnapshotName))
  add(query_601439, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_601439.add "Tags", Tags
  add(query_601439, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_601439.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_601439, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_601439, "KmsKeyId", newJString(KmsKeyId))
  add(query_601439, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_601439, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_601439, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601439, "EngineVersion", newJString(EngineVersion))
  add(query_601439, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  if SnapshotArns != nil:
    query_601439.add "SnapshotArns", SnapshotArns
  if SecurityGroupIds != nil:
    query_601439.add "SecurityGroupIds", SecurityGroupIds
  add(query_601439, "Port", newJInt(Port))
  add(query_601439, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_601439, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    query_601439.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_601439, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_601439, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_601439, "Version", newJString(Version))
  add(query_601439, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  if PreferredCacheClusterAZs != nil:
    query_601439.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  result = call_601438.call(nil, query_601439, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_601396(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_601397, base: "/",
    url: url_GetCreateReplicationGroup_601398,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_601504 = ref object of OpenApiRestCall_600437
proc url_PostCreateSnapshot_601506(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateSnapshot_601505(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601507 = query.getOrDefault("Action")
  valid_601507 = validateParameter(valid_601507, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_601507 != nil:
    section.add "Action", valid_601507
  var valid_601508 = query.getOrDefault("Version")
  valid_601508 = validateParameter(valid_601508, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601508 != nil:
    section.add "Version", valid_601508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601509 = header.getOrDefault("X-Amz-Date")
  valid_601509 = validateParameter(valid_601509, JString, required = false,
                                 default = nil)
  if valid_601509 != nil:
    section.add "X-Amz-Date", valid_601509
  var valid_601510 = header.getOrDefault("X-Amz-Security-Token")
  valid_601510 = validateParameter(valid_601510, JString, required = false,
                                 default = nil)
  if valid_601510 != nil:
    section.add "X-Amz-Security-Token", valid_601510
  var valid_601511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601511 = validateParameter(valid_601511, JString, required = false,
                                 default = nil)
  if valid_601511 != nil:
    section.add "X-Amz-Content-Sha256", valid_601511
  var valid_601512 = header.getOrDefault("X-Amz-Algorithm")
  valid_601512 = validateParameter(valid_601512, JString, required = false,
                                 default = nil)
  if valid_601512 != nil:
    section.add "X-Amz-Algorithm", valid_601512
  var valid_601513 = header.getOrDefault("X-Amz-Signature")
  valid_601513 = validateParameter(valid_601513, JString, required = false,
                                 default = nil)
  if valid_601513 != nil:
    section.add "X-Amz-Signature", valid_601513
  var valid_601514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601514 = validateParameter(valid_601514, JString, required = false,
                                 default = nil)
  if valid_601514 != nil:
    section.add "X-Amz-SignedHeaders", valid_601514
  var valid_601515 = header.getOrDefault("X-Amz-Credential")
  valid_601515 = validateParameter(valid_601515, JString, required = false,
                                 default = nil)
  if valid_601515 != nil:
    section.add "X-Amz-Credential", valid_601515
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  section = newJObject()
  var valid_601516 = formData.getOrDefault("ReplicationGroupId")
  valid_601516 = validateParameter(valid_601516, JString, required = false,
                                 default = nil)
  if valid_601516 != nil:
    section.add "ReplicationGroupId", valid_601516
  var valid_601517 = formData.getOrDefault("KmsKeyId")
  valid_601517 = validateParameter(valid_601517, JString, required = false,
                                 default = nil)
  if valid_601517 != nil:
    section.add "KmsKeyId", valid_601517
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_601518 = formData.getOrDefault("SnapshotName")
  valid_601518 = validateParameter(valid_601518, JString, required = true,
                                 default = nil)
  if valid_601518 != nil:
    section.add "SnapshotName", valid_601518
  var valid_601519 = formData.getOrDefault("CacheClusterId")
  valid_601519 = validateParameter(valid_601519, JString, required = false,
                                 default = nil)
  if valid_601519 != nil:
    section.add "CacheClusterId", valid_601519
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601520: Call_PostCreateSnapshot_601504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601520.validator(path, query, header, formData, body)
  let scheme = call_601520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601520.url(scheme.get, call_601520.host, call_601520.base,
                         call_601520.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601520, url, valid)

proc call*(call_601521: Call_PostCreateSnapshot_601504; SnapshotName: string;
          ReplicationGroupId: string = ""; Action: string = "CreateSnapshot";
          KmsKeyId: string = ""; Version: string = "2015-02-02";
          CacheClusterId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  var query_601522 = newJObject()
  var formData_601523 = newJObject()
  add(formData_601523, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601522, "Action", newJString(Action))
  add(formData_601523, "KmsKeyId", newJString(KmsKeyId))
  add(query_601522, "Version", newJString(Version))
  add(formData_601523, "SnapshotName", newJString(SnapshotName))
  add(formData_601523, "CacheClusterId", newJString(CacheClusterId))
  result = call_601521.call(nil, query_601522, nil, formData_601523, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_601504(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_601505, base: "/",
    url: url_PostCreateSnapshot_601506, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_601485 = ref object of OpenApiRestCall_600437
proc url_GetCreateSnapshot_601487(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateSnapshot_601486(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601488 = query.getOrDefault("CacheClusterId")
  valid_601488 = validateParameter(valid_601488, JString, required = false,
                                 default = nil)
  if valid_601488 != nil:
    section.add "CacheClusterId", valid_601488
  assert query != nil,
        "query argument is necessary due to required `SnapshotName` field"
  var valid_601489 = query.getOrDefault("SnapshotName")
  valid_601489 = validateParameter(valid_601489, JString, required = true,
                                 default = nil)
  if valid_601489 != nil:
    section.add "SnapshotName", valid_601489
  var valid_601490 = query.getOrDefault("Action")
  valid_601490 = validateParameter(valid_601490, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_601490 != nil:
    section.add "Action", valid_601490
  var valid_601491 = query.getOrDefault("KmsKeyId")
  valid_601491 = validateParameter(valid_601491, JString, required = false,
                                 default = nil)
  if valid_601491 != nil:
    section.add "KmsKeyId", valid_601491
  var valid_601492 = query.getOrDefault("ReplicationGroupId")
  valid_601492 = validateParameter(valid_601492, JString, required = false,
                                 default = nil)
  if valid_601492 != nil:
    section.add "ReplicationGroupId", valid_601492
  var valid_601493 = query.getOrDefault("Version")
  valid_601493 = validateParameter(valid_601493, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601493 != nil:
    section.add "Version", valid_601493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601494 = header.getOrDefault("X-Amz-Date")
  valid_601494 = validateParameter(valid_601494, JString, required = false,
                                 default = nil)
  if valid_601494 != nil:
    section.add "X-Amz-Date", valid_601494
  var valid_601495 = header.getOrDefault("X-Amz-Security-Token")
  valid_601495 = validateParameter(valid_601495, JString, required = false,
                                 default = nil)
  if valid_601495 != nil:
    section.add "X-Amz-Security-Token", valid_601495
  var valid_601496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601496 = validateParameter(valid_601496, JString, required = false,
                                 default = nil)
  if valid_601496 != nil:
    section.add "X-Amz-Content-Sha256", valid_601496
  var valid_601497 = header.getOrDefault("X-Amz-Algorithm")
  valid_601497 = validateParameter(valid_601497, JString, required = false,
                                 default = nil)
  if valid_601497 != nil:
    section.add "X-Amz-Algorithm", valid_601497
  var valid_601498 = header.getOrDefault("X-Amz-Signature")
  valid_601498 = validateParameter(valid_601498, JString, required = false,
                                 default = nil)
  if valid_601498 != nil:
    section.add "X-Amz-Signature", valid_601498
  var valid_601499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601499 = validateParameter(valid_601499, JString, required = false,
                                 default = nil)
  if valid_601499 != nil:
    section.add "X-Amz-SignedHeaders", valid_601499
  var valid_601500 = header.getOrDefault("X-Amz-Credential")
  valid_601500 = validateParameter(valid_601500, JString, required = false,
                                 default = nil)
  if valid_601500 != nil:
    section.add "X-Amz-Credential", valid_601500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601501: Call_GetCreateSnapshot_601485; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601501.validator(path, query, header, formData, body)
  let scheme = call_601501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601501.url(scheme.get, call_601501.host, call_601501.base,
                         call_601501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601501, url, valid)

proc call*(call_601502: Call_GetCreateSnapshot_601485; SnapshotName: string;
          CacheClusterId: string = ""; Action: string = "CreateSnapshot";
          KmsKeyId: string = ""; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  var query_601503 = newJObject()
  add(query_601503, "CacheClusterId", newJString(CacheClusterId))
  add(query_601503, "SnapshotName", newJString(SnapshotName))
  add(query_601503, "Action", newJString(Action))
  add(query_601503, "KmsKeyId", newJString(KmsKeyId))
  add(query_601503, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601503, "Version", newJString(Version))
  result = call_601502.call(nil, query_601503, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_601485(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_601486,
    base: "/", url: url_GetCreateSnapshot_601487,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_601544 = ref object of OpenApiRestCall_600437
proc url_PostDecreaseReplicaCount_601546(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDecreaseReplicaCount_601545(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601547 = query.getOrDefault("Action")
  valid_601547 = validateParameter(valid_601547, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_601547 != nil:
    section.add "Action", valid_601547
  var valid_601548 = query.getOrDefault("Version")
  valid_601548 = validateParameter(valid_601548, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601548 != nil:
    section.add "Version", valid_601548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601549 = header.getOrDefault("X-Amz-Date")
  valid_601549 = validateParameter(valid_601549, JString, required = false,
                                 default = nil)
  if valid_601549 != nil:
    section.add "X-Amz-Date", valid_601549
  var valid_601550 = header.getOrDefault("X-Amz-Security-Token")
  valid_601550 = validateParameter(valid_601550, JString, required = false,
                                 default = nil)
  if valid_601550 != nil:
    section.add "X-Amz-Security-Token", valid_601550
  var valid_601551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601551 = validateParameter(valid_601551, JString, required = false,
                                 default = nil)
  if valid_601551 != nil:
    section.add "X-Amz-Content-Sha256", valid_601551
  var valid_601552 = header.getOrDefault("X-Amz-Algorithm")
  valid_601552 = validateParameter(valid_601552, JString, required = false,
                                 default = nil)
  if valid_601552 != nil:
    section.add "X-Amz-Algorithm", valid_601552
  var valid_601553 = header.getOrDefault("X-Amz-Signature")
  valid_601553 = validateParameter(valid_601553, JString, required = false,
                                 default = nil)
  if valid_601553 != nil:
    section.add "X-Amz-Signature", valid_601553
  var valid_601554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601554 = validateParameter(valid_601554, JString, required = false,
                                 default = nil)
  if valid_601554 != nil:
    section.add "X-Amz-SignedHeaders", valid_601554
  var valid_601555 = header.getOrDefault("X-Amz-Credential")
  valid_601555 = validateParameter(valid_601555, JString, required = false,
                                 default = nil)
  if valid_601555 != nil:
    section.add "X-Amz-Credential", valid_601555
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_601556 = formData.getOrDefault("ApplyImmediately")
  valid_601556 = validateParameter(valid_601556, JBool, required = true, default = nil)
  if valid_601556 != nil:
    section.add "ApplyImmediately", valid_601556
  var valid_601557 = formData.getOrDefault("ReplicationGroupId")
  valid_601557 = validateParameter(valid_601557, JString, required = true,
                                 default = nil)
  if valid_601557 != nil:
    section.add "ReplicationGroupId", valid_601557
  var valid_601558 = formData.getOrDefault("NewReplicaCount")
  valid_601558 = validateParameter(valid_601558, JInt, required = false, default = nil)
  if valid_601558 != nil:
    section.add "NewReplicaCount", valid_601558
  var valid_601559 = formData.getOrDefault("ReplicasToRemove")
  valid_601559 = validateParameter(valid_601559, JArray, required = false,
                                 default = nil)
  if valid_601559 != nil:
    section.add "ReplicasToRemove", valid_601559
  var valid_601560 = formData.getOrDefault("ReplicaConfiguration")
  valid_601560 = validateParameter(valid_601560, JArray, required = false,
                                 default = nil)
  if valid_601560 != nil:
    section.add "ReplicaConfiguration", valid_601560
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601561: Call_PostDecreaseReplicaCount_601544; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_601561.validator(path, query, header, formData, body)
  let scheme = call_601561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601561.url(scheme.get, call_601561.host, call_601561.base,
                         call_601561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601561, url, valid)

proc call*(call_601562: Call_PostDecreaseReplicaCount_601544;
          ApplyImmediately: bool; ReplicationGroupId: string;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          ReplicasToRemove: JsonNode = nil; ReplicaConfiguration: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Version: string (required)
  var query_601563 = newJObject()
  var formData_601564 = newJObject()
  add(formData_601564, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_601564, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601563, "Action", newJString(Action))
  add(formData_601564, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicasToRemove != nil:
    formData_601564.add "ReplicasToRemove", ReplicasToRemove
  if ReplicaConfiguration != nil:
    formData_601564.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_601563, "Version", newJString(Version))
  result = call_601562.call(nil, query_601563, nil, formData_601564, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_601544(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_601545, base: "/",
    url: url_PostDecreaseReplicaCount_601546, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_601524 = ref object of OpenApiRestCall_600437
proc url_GetDecreaseReplicaCount_601526(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDecreaseReplicaCount_601525(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  section = newJObject()
  var valid_601527 = query.getOrDefault("ReplicaConfiguration")
  valid_601527 = validateParameter(valid_601527, JArray, required = false,
                                 default = nil)
  if valid_601527 != nil:
    section.add "ReplicaConfiguration", valid_601527
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601528 = query.getOrDefault("Action")
  valid_601528 = validateParameter(valid_601528, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_601528 != nil:
    section.add "Action", valid_601528
  var valid_601529 = query.getOrDefault("ReplicasToRemove")
  valid_601529 = validateParameter(valid_601529, JArray, required = false,
                                 default = nil)
  if valid_601529 != nil:
    section.add "ReplicasToRemove", valid_601529
  var valid_601530 = query.getOrDefault("NewReplicaCount")
  valid_601530 = validateParameter(valid_601530, JInt, required = false, default = nil)
  if valid_601530 != nil:
    section.add "NewReplicaCount", valid_601530
  var valid_601531 = query.getOrDefault("ReplicationGroupId")
  valid_601531 = validateParameter(valid_601531, JString, required = true,
                                 default = nil)
  if valid_601531 != nil:
    section.add "ReplicationGroupId", valid_601531
  var valid_601532 = query.getOrDefault("Version")
  valid_601532 = validateParameter(valid_601532, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601532 != nil:
    section.add "Version", valid_601532
  var valid_601533 = query.getOrDefault("ApplyImmediately")
  valid_601533 = validateParameter(valid_601533, JBool, required = true, default = nil)
  if valid_601533 != nil:
    section.add "ApplyImmediately", valid_601533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601534 = header.getOrDefault("X-Amz-Date")
  valid_601534 = validateParameter(valid_601534, JString, required = false,
                                 default = nil)
  if valid_601534 != nil:
    section.add "X-Amz-Date", valid_601534
  var valid_601535 = header.getOrDefault("X-Amz-Security-Token")
  valid_601535 = validateParameter(valid_601535, JString, required = false,
                                 default = nil)
  if valid_601535 != nil:
    section.add "X-Amz-Security-Token", valid_601535
  var valid_601536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601536 = validateParameter(valid_601536, JString, required = false,
                                 default = nil)
  if valid_601536 != nil:
    section.add "X-Amz-Content-Sha256", valid_601536
  var valid_601537 = header.getOrDefault("X-Amz-Algorithm")
  valid_601537 = validateParameter(valid_601537, JString, required = false,
                                 default = nil)
  if valid_601537 != nil:
    section.add "X-Amz-Algorithm", valid_601537
  var valid_601538 = header.getOrDefault("X-Amz-Signature")
  valid_601538 = validateParameter(valid_601538, JString, required = false,
                                 default = nil)
  if valid_601538 != nil:
    section.add "X-Amz-Signature", valid_601538
  var valid_601539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601539 = validateParameter(valid_601539, JString, required = false,
                                 default = nil)
  if valid_601539 != nil:
    section.add "X-Amz-SignedHeaders", valid_601539
  var valid_601540 = header.getOrDefault("X-Amz-Credential")
  valid_601540 = validateParameter(valid_601540, JString, required = false,
                                 default = nil)
  if valid_601540 != nil:
    section.add "X-Amz-Credential", valid_601540
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601541: Call_GetDecreaseReplicaCount_601524; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_601541.validator(path, query, header, formData, body)
  let scheme = call_601541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601541.url(scheme.get, call_601541.host, call_601541.base,
                         call_601541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601541, url, valid)

proc call*(call_601542: Call_GetDecreaseReplicaCount_601524;
          ReplicationGroupId: string; ApplyImmediately: bool;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; ReplicasToRemove: JsonNode = nil;
          NewReplicaCount: int = 0; Version: string = "2015-02-02"): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  var query_601543 = newJObject()
  if ReplicaConfiguration != nil:
    query_601543.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_601543, "Action", newJString(Action))
  if ReplicasToRemove != nil:
    query_601543.add "ReplicasToRemove", ReplicasToRemove
  add(query_601543, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_601543, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601543, "Version", newJString(Version))
  add(query_601543, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_601542.call(nil, query_601543, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_601524(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_601525, base: "/",
    url: url_GetDecreaseReplicaCount_601526, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_601582 = ref object of OpenApiRestCall_600437
proc url_PostDeleteCacheCluster_601584(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheCluster_601583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601585 = query.getOrDefault("Action")
  valid_601585 = validateParameter(valid_601585, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_601585 != nil:
    section.add "Action", valid_601585
  var valid_601586 = query.getOrDefault("Version")
  valid_601586 = validateParameter(valid_601586, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601586 != nil:
    section.add "Version", valid_601586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601587 = header.getOrDefault("X-Amz-Date")
  valid_601587 = validateParameter(valid_601587, JString, required = false,
                                 default = nil)
  if valid_601587 != nil:
    section.add "X-Amz-Date", valid_601587
  var valid_601588 = header.getOrDefault("X-Amz-Security-Token")
  valid_601588 = validateParameter(valid_601588, JString, required = false,
                                 default = nil)
  if valid_601588 != nil:
    section.add "X-Amz-Security-Token", valid_601588
  var valid_601589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601589 = validateParameter(valid_601589, JString, required = false,
                                 default = nil)
  if valid_601589 != nil:
    section.add "X-Amz-Content-Sha256", valid_601589
  var valid_601590 = header.getOrDefault("X-Amz-Algorithm")
  valid_601590 = validateParameter(valid_601590, JString, required = false,
                                 default = nil)
  if valid_601590 != nil:
    section.add "X-Amz-Algorithm", valid_601590
  var valid_601591 = header.getOrDefault("X-Amz-Signature")
  valid_601591 = validateParameter(valid_601591, JString, required = false,
                                 default = nil)
  if valid_601591 != nil:
    section.add "X-Amz-Signature", valid_601591
  var valid_601592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601592 = validateParameter(valid_601592, JString, required = false,
                                 default = nil)
  if valid_601592 != nil:
    section.add "X-Amz-SignedHeaders", valid_601592
  var valid_601593 = header.getOrDefault("X-Amz-Credential")
  valid_601593 = validateParameter(valid_601593, JString, required = false,
                                 default = nil)
  if valid_601593 != nil:
    section.add "X-Amz-Credential", valid_601593
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_601594 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_601594 = validateParameter(valid_601594, JString, required = false,
                                 default = nil)
  if valid_601594 != nil:
    section.add "FinalSnapshotIdentifier", valid_601594
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_601595 = formData.getOrDefault("CacheClusterId")
  valid_601595 = validateParameter(valid_601595, JString, required = true,
                                 default = nil)
  if valid_601595 != nil:
    section.add "CacheClusterId", valid_601595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601596: Call_PostDeleteCacheCluster_601582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_601596.validator(path, query, header, formData, body)
  let scheme = call_601596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601596.url(scheme.get, call_601596.host, call_601596.base,
                         call_601596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601596, url, valid)

proc call*(call_601597: Call_PostDeleteCacheCluster_601582; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_601598 = newJObject()
  var formData_601599 = newJObject()
  add(formData_601599, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_601598, "Action", newJString(Action))
  add(query_601598, "Version", newJString(Version))
  add(formData_601599, "CacheClusterId", newJString(CacheClusterId))
  result = call_601597.call(nil, query_601598, nil, formData_601599, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_601582(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_601583, base: "/",
    url: url_PostDeleteCacheCluster_601584, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_601565 = ref object of OpenApiRestCall_600437
proc url_GetDeleteCacheCluster_601567(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheCluster_601566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_601568 = query.getOrDefault("CacheClusterId")
  valid_601568 = validateParameter(valid_601568, JString, required = true,
                                 default = nil)
  if valid_601568 != nil:
    section.add "CacheClusterId", valid_601568
  var valid_601569 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_601569 = validateParameter(valid_601569, JString, required = false,
                                 default = nil)
  if valid_601569 != nil:
    section.add "FinalSnapshotIdentifier", valid_601569
  var valid_601570 = query.getOrDefault("Action")
  valid_601570 = validateParameter(valid_601570, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_601570 != nil:
    section.add "Action", valid_601570
  var valid_601571 = query.getOrDefault("Version")
  valid_601571 = validateParameter(valid_601571, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601571 != nil:
    section.add "Version", valid_601571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601572 = header.getOrDefault("X-Amz-Date")
  valid_601572 = validateParameter(valid_601572, JString, required = false,
                                 default = nil)
  if valid_601572 != nil:
    section.add "X-Amz-Date", valid_601572
  var valid_601573 = header.getOrDefault("X-Amz-Security-Token")
  valid_601573 = validateParameter(valid_601573, JString, required = false,
                                 default = nil)
  if valid_601573 != nil:
    section.add "X-Amz-Security-Token", valid_601573
  var valid_601574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601574 = validateParameter(valid_601574, JString, required = false,
                                 default = nil)
  if valid_601574 != nil:
    section.add "X-Amz-Content-Sha256", valid_601574
  var valid_601575 = header.getOrDefault("X-Amz-Algorithm")
  valid_601575 = validateParameter(valid_601575, JString, required = false,
                                 default = nil)
  if valid_601575 != nil:
    section.add "X-Amz-Algorithm", valid_601575
  var valid_601576 = header.getOrDefault("X-Amz-Signature")
  valid_601576 = validateParameter(valid_601576, JString, required = false,
                                 default = nil)
  if valid_601576 != nil:
    section.add "X-Amz-Signature", valid_601576
  var valid_601577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601577 = validateParameter(valid_601577, JString, required = false,
                                 default = nil)
  if valid_601577 != nil:
    section.add "X-Amz-SignedHeaders", valid_601577
  var valid_601578 = header.getOrDefault("X-Amz-Credential")
  valid_601578 = validateParameter(valid_601578, JString, required = false,
                                 default = nil)
  if valid_601578 != nil:
    section.add "X-Amz-Credential", valid_601578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601579: Call_GetDeleteCacheCluster_601565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_601579.validator(path, query, header, formData, body)
  let scheme = call_601579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601579.url(scheme.get, call_601579.host, call_601579.base,
                         call_601579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601579, url, valid)

proc call*(call_601580: Call_GetDeleteCacheCluster_601565; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601581 = newJObject()
  add(query_601581, "CacheClusterId", newJString(CacheClusterId))
  add(query_601581, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_601581, "Action", newJString(Action))
  add(query_601581, "Version", newJString(Version))
  result = call_601580.call(nil, query_601581, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_601565(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_601566, base: "/",
    url: url_GetDeleteCacheCluster_601567, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_601616 = ref object of OpenApiRestCall_600437
proc url_PostDeleteCacheParameterGroup_601618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheParameterGroup_601617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601619 = query.getOrDefault("Action")
  valid_601619 = validateParameter(valid_601619, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_601619 != nil:
    section.add "Action", valid_601619
  var valid_601620 = query.getOrDefault("Version")
  valid_601620 = validateParameter(valid_601620, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601620 != nil:
    section.add "Version", valid_601620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601621 = header.getOrDefault("X-Amz-Date")
  valid_601621 = validateParameter(valid_601621, JString, required = false,
                                 default = nil)
  if valid_601621 != nil:
    section.add "X-Amz-Date", valid_601621
  var valid_601622 = header.getOrDefault("X-Amz-Security-Token")
  valid_601622 = validateParameter(valid_601622, JString, required = false,
                                 default = nil)
  if valid_601622 != nil:
    section.add "X-Amz-Security-Token", valid_601622
  var valid_601623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601623 = validateParameter(valid_601623, JString, required = false,
                                 default = nil)
  if valid_601623 != nil:
    section.add "X-Amz-Content-Sha256", valid_601623
  var valid_601624 = header.getOrDefault("X-Amz-Algorithm")
  valid_601624 = validateParameter(valid_601624, JString, required = false,
                                 default = nil)
  if valid_601624 != nil:
    section.add "X-Amz-Algorithm", valid_601624
  var valid_601625 = header.getOrDefault("X-Amz-Signature")
  valid_601625 = validateParameter(valid_601625, JString, required = false,
                                 default = nil)
  if valid_601625 != nil:
    section.add "X-Amz-Signature", valid_601625
  var valid_601626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601626 = validateParameter(valid_601626, JString, required = false,
                                 default = nil)
  if valid_601626 != nil:
    section.add "X-Amz-SignedHeaders", valid_601626
  var valid_601627 = header.getOrDefault("X-Amz-Credential")
  valid_601627 = validateParameter(valid_601627, JString, required = false,
                                 default = nil)
  if valid_601627 != nil:
    section.add "X-Amz-Credential", valid_601627
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_601628 = formData.getOrDefault("CacheParameterGroupName")
  valid_601628 = validateParameter(valid_601628, JString, required = true,
                                 default = nil)
  if valid_601628 != nil:
    section.add "CacheParameterGroupName", valid_601628
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601629: Call_PostDeleteCacheParameterGroup_601616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_601629.validator(path, query, header, formData, body)
  let scheme = call_601629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601629.url(scheme.get, call_601629.host, call_601629.base,
                         call_601629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601629, url, valid)

proc call*(call_601630: Call_PostDeleteCacheParameterGroup_601616;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Version: string (required)
  var query_601631 = newJObject()
  var formData_601632 = newJObject()
  add(query_601631, "Action", newJString(Action))
  add(formData_601632, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_601631, "Version", newJString(Version))
  result = call_601630.call(nil, query_601631, nil, formData_601632, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_601616(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_601617, base: "/",
    url: url_PostDeleteCacheParameterGroup_601618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_601600 = ref object of OpenApiRestCall_600437
proc url_GetDeleteCacheParameterGroup_601602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheParameterGroup_601601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_601603 = query.getOrDefault("CacheParameterGroupName")
  valid_601603 = validateParameter(valid_601603, JString, required = true,
                                 default = nil)
  if valid_601603 != nil:
    section.add "CacheParameterGroupName", valid_601603
  var valid_601604 = query.getOrDefault("Action")
  valid_601604 = validateParameter(valid_601604, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_601604 != nil:
    section.add "Action", valid_601604
  var valid_601605 = query.getOrDefault("Version")
  valid_601605 = validateParameter(valid_601605, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601605 != nil:
    section.add "Version", valid_601605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601606 = header.getOrDefault("X-Amz-Date")
  valid_601606 = validateParameter(valid_601606, JString, required = false,
                                 default = nil)
  if valid_601606 != nil:
    section.add "X-Amz-Date", valid_601606
  var valid_601607 = header.getOrDefault("X-Amz-Security-Token")
  valid_601607 = validateParameter(valid_601607, JString, required = false,
                                 default = nil)
  if valid_601607 != nil:
    section.add "X-Amz-Security-Token", valid_601607
  var valid_601608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601608 = validateParameter(valid_601608, JString, required = false,
                                 default = nil)
  if valid_601608 != nil:
    section.add "X-Amz-Content-Sha256", valid_601608
  var valid_601609 = header.getOrDefault("X-Amz-Algorithm")
  valid_601609 = validateParameter(valid_601609, JString, required = false,
                                 default = nil)
  if valid_601609 != nil:
    section.add "X-Amz-Algorithm", valid_601609
  var valid_601610 = header.getOrDefault("X-Amz-Signature")
  valid_601610 = validateParameter(valid_601610, JString, required = false,
                                 default = nil)
  if valid_601610 != nil:
    section.add "X-Amz-Signature", valid_601610
  var valid_601611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601611 = validateParameter(valid_601611, JString, required = false,
                                 default = nil)
  if valid_601611 != nil:
    section.add "X-Amz-SignedHeaders", valid_601611
  var valid_601612 = header.getOrDefault("X-Amz-Credential")
  valid_601612 = validateParameter(valid_601612, JString, required = false,
                                 default = nil)
  if valid_601612 != nil:
    section.add "X-Amz-Credential", valid_601612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601613: Call_GetDeleteCacheParameterGroup_601600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_601613.validator(path, query, header, formData, body)
  let scheme = call_601613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601613.url(scheme.get, call_601613.host, call_601613.base,
                         call_601613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601613, url, valid)

proc call*(call_601614: Call_GetDeleteCacheParameterGroup_601600;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601615 = newJObject()
  add(query_601615, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_601615, "Action", newJString(Action))
  add(query_601615, "Version", newJString(Version))
  result = call_601614.call(nil, query_601615, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_601600(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_601601, base: "/",
    url: url_GetDeleteCacheParameterGroup_601602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_601649 = ref object of OpenApiRestCall_600437
proc url_PostDeleteCacheSecurityGroup_601651(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_601650(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601652 = query.getOrDefault("Action")
  valid_601652 = validateParameter(valid_601652, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_601652 != nil:
    section.add "Action", valid_601652
  var valid_601653 = query.getOrDefault("Version")
  valid_601653 = validateParameter(valid_601653, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601653 != nil:
    section.add "Version", valid_601653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601654 = header.getOrDefault("X-Amz-Date")
  valid_601654 = validateParameter(valid_601654, JString, required = false,
                                 default = nil)
  if valid_601654 != nil:
    section.add "X-Amz-Date", valid_601654
  var valid_601655 = header.getOrDefault("X-Amz-Security-Token")
  valid_601655 = validateParameter(valid_601655, JString, required = false,
                                 default = nil)
  if valid_601655 != nil:
    section.add "X-Amz-Security-Token", valid_601655
  var valid_601656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601656 = validateParameter(valid_601656, JString, required = false,
                                 default = nil)
  if valid_601656 != nil:
    section.add "X-Amz-Content-Sha256", valid_601656
  var valid_601657 = header.getOrDefault("X-Amz-Algorithm")
  valid_601657 = validateParameter(valid_601657, JString, required = false,
                                 default = nil)
  if valid_601657 != nil:
    section.add "X-Amz-Algorithm", valid_601657
  var valid_601658 = header.getOrDefault("X-Amz-Signature")
  valid_601658 = validateParameter(valid_601658, JString, required = false,
                                 default = nil)
  if valid_601658 != nil:
    section.add "X-Amz-Signature", valid_601658
  var valid_601659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601659 = validateParameter(valid_601659, JString, required = false,
                                 default = nil)
  if valid_601659 != nil:
    section.add "X-Amz-SignedHeaders", valid_601659
  var valid_601660 = header.getOrDefault("X-Amz-Credential")
  valid_601660 = validateParameter(valid_601660, JString, required = false,
                                 default = nil)
  if valid_601660 != nil:
    section.add "X-Amz-Credential", valid_601660
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601661 = formData.getOrDefault("CacheSecurityGroupName")
  valid_601661 = validateParameter(valid_601661, JString, required = true,
                                 default = nil)
  if valid_601661 != nil:
    section.add "CacheSecurityGroupName", valid_601661
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601662: Call_PostDeleteCacheSecurityGroup_601649; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_601662.validator(path, query, header, formData, body)
  let scheme = call_601662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601662.url(scheme.get, call_601662.host, call_601662.base,
                         call_601662.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601662, url, valid)

proc call*(call_601663: Call_PostDeleteCacheSecurityGroup_601649;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601664 = newJObject()
  var formData_601665 = newJObject()
  add(formData_601665, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_601664, "Action", newJString(Action))
  add(query_601664, "Version", newJString(Version))
  result = call_601663.call(nil, query_601664, nil, formData_601665, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_601649(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_601650, base: "/",
    url: url_PostDeleteCacheSecurityGroup_601651,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_601633 = ref object of OpenApiRestCall_600437
proc url_GetDeleteCacheSecurityGroup_601635(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_601634(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_601636 = query.getOrDefault("CacheSecurityGroupName")
  valid_601636 = validateParameter(valid_601636, JString, required = true,
                                 default = nil)
  if valid_601636 != nil:
    section.add "CacheSecurityGroupName", valid_601636
  var valid_601637 = query.getOrDefault("Action")
  valid_601637 = validateParameter(valid_601637, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_601637 != nil:
    section.add "Action", valid_601637
  var valid_601638 = query.getOrDefault("Version")
  valid_601638 = validateParameter(valid_601638, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601638 != nil:
    section.add "Version", valid_601638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601639 = header.getOrDefault("X-Amz-Date")
  valid_601639 = validateParameter(valid_601639, JString, required = false,
                                 default = nil)
  if valid_601639 != nil:
    section.add "X-Amz-Date", valid_601639
  var valid_601640 = header.getOrDefault("X-Amz-Security-Token")
  valid_601640 = validateParameter(valid_601640, JString, required = false,
                                 default = nil)
  if valid_601640 != nil:
    section.add "X-Amz-Security-Token", valid_601640
  var valid_601641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601641 = validateParameter(valid_601641, JString, required = false,
                                 default = nil)
  if valid_601641 != nil:
    section.add "X-Amz-Content-Sha256", valid_601641
  var valid_601642 = header.getOrDefault("X-Amz-Algorithm")
  valid_601642 = validateParameter(valid_601642, JString, required = false,
                                 default = nil)
  if valid_601642 != nil:
    section.add "X-Amz-Algorithm", valid_601642
  var valid_601643 = header.getOrDefault("X-Amz-Signature")
  valid_601643 = validateParameter(valid_601643, JString, required = false,
                                 default = nil)
  if valid_601643 != nil:
    section.add "X-Amz-Signature", valid_601643
  var valid_601644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601644 = validateParameter(valid_601644, JString, required = false,
                                 default = nil)
  if valid_601644 != nil:
    section.add "X-Amz-SignedHeaders", valid_601644
  var valid_601645 = header.getOrDefault("X-Amz-Credential")
  valid_601645 = validateParameter(valid_601645, JString, required = false,
                                 default = nil)
  if valid_601645 != nil:
    section.add "X-Amz-Credential", valid_601645
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601646: Call_GetDeleteCacheSecurityGroup_601633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_601646.validator(path, query, header, formData, body)
  let scheme = call_601646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601646.url(scheme.get, call_601646.host, call_601646.base,
                         call_601646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601646, url, valid)

proc call*(call_601647: Call_GetDeleteCacheSecurityGroup_601633;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601648 = newJObject()
  add(query_601648, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_601648, "Action", newJString(Action))
  add(query_601648, "Version", newJString(Version))
  result = call_601647.call(nil, query_601648, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_601633(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_601634, base: "/",
    url: url_GetDeleteCacheSecurityGroup_601635,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_601682 = ref object of OpenApiRestCall_600437
proc url_PostDeleteCacheSubnetGroup_601684(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_601683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601685 = query.getOrDefault("Action")
  valid_601685 = validateParameter(valid_601685, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_601685 != nil:
    section.add "Action", valid_601685
  var valid_601686 = query.getOrDefault("Version")
  valid_601686 = validateParameter(valid_601686, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601686 != nil:
    section.add "Version", valid_601686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601687 = header.getOrDefault("X-Amz-Date")
  valid_601687 = validateParameter(valid_601687, JString, required = false,
                                 default = nil)
  if valid_601687 != nil:
    section.add "X-Amz-Date", valid_601687
  var valid_601688 = header.getOrDefault("X-Amz-Security-Token")
  valid_601688 = validateParameter(valid_601688, JString, required = false,
                                 default = nil)
  if valid_601688 != nil:
    section.add "X-Amz-Security-Token", valid_601688
  var valid_601689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601689 = validateParameter(valid_601689, JString, required = false,
                                 default = nil)
  if valid_601689 != nil:
    section.add "X-Amz-Content-Sha256", valid_601689
  var valid_601690 = header.getOrDefault("X-Amz-Algorithm")
  valid_601690 = validateParameter(valid_601690, JString, required = false,
                                 default = nil)
  if valid_601690 != nil:
    section.add "X-Amz-Algorithm", valid_601690
  var valid_601691 = header.getOrDefault("X-Amz-Signature")
  valid_601691 = validateParameter(valid_601691, JString, required = false,
                                 default = nil)
  if valid_601691 != nil:
    section.add "X-Amz-Signature", valid_601691
  var valid_601692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601692 = validateParameter(valid_601692, JString, required = false,
                                 default = nil)
  if valid_601692 != nil:
    section.add "X-Amz-SignedHeaders", valid_601692
  var valid_601693 = header.getOrDefault("X-Amz-Credential")
  valid_601693 = validateParameter(valid_601693, JString, required = false,
                                 default = nil)
  if valid_601693 != nil:
    section.add "X-Amz-Credential", valid_601693
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_601694 = formData.getOrDefault("CacheSubnetGroupName")
  valid_601694 = validateParameter(valid_601694, JString, required = true,
                                 default = nil)
  if valid_601694 != nil:
    section.add "CacheSubnetGroupName", valid_601694
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601695: Call_PostDeleteCacheSubnetGroup_601682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_601695.validator(path, query, header, formData, body)
  let scheme = call_601695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601695.url(scheme.get, call_601695.host, call_601695.base,
                         call_601695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601695, url, valid)

proc call*(call_601696: Call_PostDeleteCacheSubnetGroup_601682;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_601697 = newJObject()
  var formData_601698 = newJObject()
  add(query_601697, "Action", newJString(Action))
  add(formData_601698, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_601697, "Version", newJString(Version))
  result = call_601696.call(nil, query_601697, nil, formData_601698, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_601682(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_601683, base: "/",
    url: url_PostDeleteCacheSubnetGroup_601684,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_601666 = ref object of OpenApiRestCall_600437
proc url_GetDeleteCacheSubnetGroup_601668(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_601667(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601669 = query.getOrDefault("Action")
  valid_601669 = validateParameter(valid_601669, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_601669 != nil:
    section.add "Action", valid_601669
  var valid_601670 = query.getOrDefault("CacheSubnetGroupName")
  valid_601670 = validateParameter(valid_601670, JString, required = true,
                                 default = nil)
  if valid_601670 != nil:
    section.add "CacheSubnetGroupName", valid_601670
  var valid_601671 = query.getOrDefault("Version")
  valid_601671 = validateParameter(valid_601671, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601671 != nil:
    section.add "Version", valid_601671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601672 = header.getOrDefault("X-Amz-Date")
  valid_601672 = validateParameter(valid_601672, JString, required = false,
                                 default = nil)
  if valid_601672 != nil:
    section.add "X-Amz-Date", valid_601672
  var valid_601673 = header.getOrDefault("X-Amz-Security-Token")
  valid_601673 = validateParameter(valid_601673, JString, required = false,
                                 default = nil)
  if valid_601673 != nil:
    section.add "X-Amz-Security-Token", valid_601673
  var valid_601674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601674 = validateParameter(valid_601674, JString, required = false,
                                 default = nil)
  if valid_601674 != nil:
    section.add "X-Amz-Content-Sha256", valid_601674
  var valid_601675 = header.getOrDefault("X-Amz-Algorithm")
  valid_601675 = validateParameter(valid_601675, JString, required = false,
                                 default = nil)
  if valid_601675 != nil:
    section.add "X-Amz-Algorithm", valid_601675
  var valid_601676 = header.getOrDefault("X-Amz-Signature")
  valid_601676 = validateParameter(valid_601676, JString, required = false,
                                 default = nil)
  if valid_601676 != nil:
    section.add "X-Amz-Signature", valid_601676
  var valid_601677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601677 = validateParameter(valid_601677, JString, required = false,
                                 default = nil)
  if valid_601677 != nil:
    section.add "X-Amz-SignedHeaders", valid_601677
  var valid_601678 = header.getOrDefault("X-Amz-Credential")
  valid_601678 = validateParameter(valid_601678, JString, required = false,
                                 default = nil)
  if valid_601678 != nil:
    section.add "X-Amz-Credential", valid_601678
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601679: Call_GetDeleteCacheSubnetGroup_601666; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_601679.validator(path, query, header, formData, body)
  let scheme = call_601679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601679.url(scheme.get, call_601679.host, call_601679.base,
                         call_601679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601679, url, valid)

proc call*(call_601680: Call_GetDeleteCacheSubnetGroup_601666;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_601681 = newJObject()
  add(query_601681, "Action", newJString(Action))
  add(query_601681, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_601681, "Version", newJString(Version))
  result = call_601680.call(nil, query_601681, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_601666(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_601667, base: "/",
    url: url_GetDeleteCacheSubnetGroup_601668,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_601717 = ref object of OpenApiRestCall_600437
proc url_PostDeleteReplicationGroup_601719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReplicationGroup_601718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601720 = query.getOrDefault("Action")
  valid_601720 = validateParameter(valid_601720, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_601720 != nil:
    section.add "Action", valid_601720
  var valid_601721 = query.getOrDefault("Version")
  valid_601721 = validateParameter(valid_601721, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601721 != nil:
    section.add "Version", valid_601721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601722 = header.getOrDefault("X-Amz-Date")
  valid_601722 = validateParameter(valid_601722, JString, required = false,
                                 default = nil)
  if valid_601722 != nil:
    section.add "X-Amz-Date", valid_601722
  var valid_601723 = header.getOrDefault("X-Amz-Security-Token")
  valid_601723 = validateParameter(valid_601723, JString, required = false,
                                 default = nil)
  if valid_601723 != nil:
    section.add "X-Amz-Security-Token", valid_601723
  var valid_601724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601724 = validateParameter(valid_601724, JString, required = false,
                                 default = nil)
  if valid_601724 != nil:
    section.add "X-Amz-Content-Sha256", valid_601724
  var valid_601725 = header.getOrDefault("X-Amz-Algorithm")
  valid_601725 = validateParameter(valid_601725, JString, required = false,
                                 default = nil)
  if valid_601725 != nil:
    section.add "X-Amz-Algorithm", valid_601725
  var valid_601726 = header.getOrDefault("X-Amz-Signature")
  valid_601726 = validateParameter(valid_601726, JString, required = false,
                                 default = nil)
  if valid_601726 != nil:
    section.add "X-Amz-Signature", valid_601726
  var valid_601727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601727 = validateParameter(valid_601727, JString, required = false,
                                 default = nil)
  if valid_601727 != nil:
    section.add "X-Amz-SignedHeaders", valid_601727
  var valid_601728 = header.getOrDefault("X-Amz-Credential")
  valid_601728 = validateParameter(valid_601728, JString, required = false,
                                 default = nil)
  if valid_601728 != nil:
    section.add "X-Amz-Credential", valid_601728
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_601729 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_601729 = validateParameter(valid_601729, JString, required = false,
                                 default = nil)
  if valid_601729 != nil:
    section.add "FinalSnapshotIdentifier", valid_601729
  var valid_601730 = formData.getOrDefault("RetainPrimaryCluster")
  valid_601730 = validateParameter(valid_601730, JBool, required = false, default = nil)
  if valid_601730 != nil:
    section.add "RetainPrimaryCluster", valid_601730
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_601731 = formData.getOrDefault("ReplicationGroupId")
  valid_601731 = validateParameter(valid_601731, JString, required = true,
                                 default = nil)
  if valid_601731 != nil:
    section.add "ReplicationGroupId", valid_601731
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601732: Call_PostDeleteReplicationGroup_601717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601732.validator(path, query, header, formData, body)
  let scheme = call_601732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601732.url(scheme.get, call_601732.host, call_601732.base,
                         call_601732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601732, url, valid)

proc call*(call_601733: Call_PostDeleteReplicationGroup_601717;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          RetainPrimaryCluster: bool = false;
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601734 = newJObject()
  var formData_601735 = newJObject()
  add(formData_601735, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(formData_601735, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(formData_601735, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601734, "Action", newJString(Action))
  add(query_601734, "Version", newJString(Version))
  result = call_601733.call(nil, query_601734, nil, formData_601735, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_601717(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_601718, base: "/",
    url: url_PostDeleteReplicationGroup_601719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_601699 = ref object of OpenApiRestCall_600437
proc url_GetDeleteReplicationGroup_601701(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReplicationGroup_601700(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601702 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_601702 = validateParameter(valid_601702, JString, required = false,
                                 default = nil)
  if valid_601702 != nil:
    section.add "FinalSnapshotIdentifier", valid_601702
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601703 = query.getOrDefault("Action")
  valid_601703 = validateParameter(valid_601703, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_601703 != nil:
    section.add "Action", valid_601703
  var valid_601704 = query.getOrDefault("ReplicationGroupId")
  valid_601704 = validateParameter(valid_601704, JString, required = true,
                                 default = nil)
  if valid_601704 != nil:
    section.add "ReplicationGroupId", valid_601704
  var valid_601705 = query.getOrDefault("RetainPrimaryCluster")
  valid_601705 = validateParameter(valid_601705, JBool, required = false, default = nil)
  if valid_601705 != nil:
    section.add "RetainPrimaryCluster", valid_601705
  var valid_601706 = query.getOrDefault("Version")
  valid_601706 = validateParameter(valid_601706, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601706 != nil:
    section.add "Version", valid_601706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601707 = header.getOrDefault("X-Amz-Date")
  valid_601707 = validateParameter(valid_601707, JString, required = false,
                                 default = nil)
  if valid_601707 != nil:
    section.add "X-Amz-Date", valid_601707
  var valid_601708 = header.getOrDefault("X-Amz-Security-Token")
  valid_601708 = validateParameter(valid_601708, JString, required = false,
                                 default = nil)
  if valid_601708 != nil:
    section.add "X-Amz-Security-Token", valid_601708
  var valid_601709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601709 = validateParameter(valid_601709, JString, required = false,
                                 default = nil)
  if valid_601709 != nil:
    section.add "X-Amz-Content-Sha256", valid_601709
  var valid_601710 = header.getOrDefault("X-Amz-Algorithm")
  valid_601710 = validateParameter(valid_601710, JString, required = false,
                                 default = nil)
  if valid_601710 != nil:
    section.add "X-Amz-Algorithm", valid_601710
  var valid_601711 = header.getOrDefault("X-Amz-Signature")
  valid_601711 = validateParameter(valid_601711, JString, required = false,
                                 default = nil)
  if valid_601711 != nil:
    section.add "X-Amz-Signature", valid_601711
  var valid_601712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601712 = validateParameter(valid_601712, JString, required = false,
                                 default = nil)
  if valid_601712 != nil:
    section.add "X-Amz-SignedHeaders", valid_601712
  var valid_601713 = header.getOrDefault("X-Amz-Credential")
  valid_601713 = validateParameter(valid_601713, JString, required = false,
                                 default = nil)
  if valid_601713 != nil:
    section.add "X-Amz-Credential", valid_601713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601714: Call_GetDeleteReplicationGroup_601699; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601714.validator(path, query, header, formData, body)
  let scheme = call_601714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601714.url(scheme.get, call_601714.host, call_601714.base,
                         call_601714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601714, url, valid)

proc call*(call_601715: Call_GetDeleteReplicationGroup_601699;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  var query_601716 = newJObject()
  add(query_601716, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_601716, "Action", newJString(Action))
  add(query_601716, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_601716, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_601716, "Version", newJString(Version))
  result = call_601715.call(nil, query_601716, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_601699(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_601700, base: "/",
    url: url_GetDeleteReplicationGroup_601701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_601752 = ref object of OpenApiRestCall_600437
proc url_PostDeleteSnapshot_601754(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSnapshot_601753(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601755 = query.getOrDefault("Action")
  valid_601755 = validateParameter(valid_601755, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_601755 != nil:
    section.add "Action", valid_601755
  var valid_601756 = query.getOrDefault("Version")
  valid_601756 = validateParameter(valid_601756, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601756 != nil:
    section.add "Version", valid_601756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601757 = header.getOrDefault("X-Amz-Date")
  valid_601757 = validateParameter(valid_601757, JString, required = false,
                                 default = nil)
  if valid_601757 != nil:
    section.add "X-Amz-Date", valid_601757
  var valid_601758 = header.getOrDefault("X-Amz-Security-Token")
  valid_601758 = validateParameter(valid_601758, JString, required = false,
                                 default = nil)
  if valid_601758 != nil:
    section.add "X-Amz-Security-Token", valid_601758
  var valid_601759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601759 = validateParameter(valid_601759, JString, required = false,
                                 default = nil)
  if valid_601759 != nil:
    section.add "X-Amz-Content-Sha256", valid_601759
  var valid_601760 = header.getOrDefault("X-Amz-Algorithm")
  valid_601760 = validateParameter(valid_601760, JString, required = false,
                                 default = nil)
  if valid_601760 != nil:
    section.add "X-Amz-Algorithm", valid_601760
  var valid_601761 = header.getOrDefault("X-Amz-Signature")
  valid_601761 = validateParameter(valid_601761, JString, required = false,
                                 default = nil)
  if valid_601761 != nil:
    section.add "X-Amz-Signature", valid_601761
  var valid_601762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601762 = validateParameter(valid_601762, JString, required = false,
                                 default = nil)
  if valid_601762 != nil:
    section.add "X-Amz-SignedHeaders", valid_601762
  var valid_601763 = header.getOrDefault("X-Amz-Credential")
  valid_601763 = validateParameter(valid_601763, JString, required = false,
                                 default = nil)
  if valid_601763 != nil:
    section.add "X-Amz-Credential", valid_601763
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_601764 = formData.getOrDefault("SnapshotName")
  valid_601764 = validateParameter(valid_601764, JString, required = true,
                                 default = nil)
  if valid_601764 != nil:
    section.add "SnapshotName", valid_601764
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601765: Call_PostDeleteSnapshot_601752; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601765.validator(path, query, header, formData, body)
  let scheme = call_601765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601765.url(scheme.get, call_601765.host, call_601765.base,
                         call_601765.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601765, url, valid)

proc call*(call_601766: Call_PostDeleteSnapshot_601752; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_601767 = newJObject()
  var formData_601768 = newJObject()
  add(query_601767, "Action", newJString(Action))
  add(query_601767, "Version", newJString(Version))
  add(formData_601768, "SnapshotName", newJString(SnapshotName))
  result = call_601766.call(nil, query_601767, nil, formData_601768, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_601752(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_601753, base: "/",
    url: url_PostDeleteSnapshot_601754, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_601736 = ref object of OpenApiRestCall_600437
proc url_GetDeleteSnapshot_601738(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSnapshot_601737(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SnapshotName` field"
  var valid_601739 = query.getOrDefault("SnapshotName")
  valid_601739 = validateParameter(valid_601739, JString, required = true,
                                 default = nil)
  if valid_601739 != nil:
    section.add "SnapshotName", valid_601739
  var valid_601740 = query.getOrDefault("Action")
  valid_601740 = validateParameter(valid_601740, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_601740 != nil:
    section.add "Action", valid_601740
  var valid_601741 = query.getOrDefault("Version")
  valid_601741 = validateParameter(valid_601741, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601741 != nil:
    section.add "Version", valid_601741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601742 = header.getOrDefault("X-Amz-Date")
  valid_601742 = validateParameter(valid_601742, JString, required = false,
                                 default = nil)
  if valid_601742 != nil:
    section.add "X-Amz-Date", valid_601742
  var valid_601743 = header.getOrDefault("X-Amz-Security-Token")
  valid_601743 = validateParameter(valid_601743, JString, required = false,
                                 default = nil)
  if valid_601743 != nil:
    section.add "X-Amz-Security-Token", valid_601743
  var valid_601744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601744 = validateParameter(valid_601744, JString, required = false,
                                 default = nil)
  if valid_601744 != nil:
    section.add "X-Amz-Content-Sha256", valid_601744
  var valid_601745 = header.getOrDefault("X-Amz-Algorithm")
  valid_601745 = validateParameter(valid_601745, JString, required = false,
                                 default = nil)
  if valid_601745 != nil:
    section.add "X-Amz-Algorithm", valid_601745
  var valid_601746 = header.getOrDefault("X-Amz-Signature")
  valid_601746 = validateParameter(valid_601746, JString, required = false,
                                 default = nil)
  if valid_601746 != nil:
    section.add "X-Amz-Signature", valid_601746
  var valid_601747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601747 = validateParameter(valid_601747, JString, required = false,
                                 default = nil)
  if valid_601747 != nil:
    section.add "X-Amz-SignedHeaders", valid_601747
  var valid_601748 = header.getOrDefault("X-Amz-Credential")
  valid_601748 = validateParameter(valid_601748, JString, required = false,
                                 default = nil)
  if valid_601748 != nil:
    section.add "X-Amz-Credential", valid_601748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601749: Call_GetDeleteSnapshot_601736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_601749.validator(path, query, header, formData, body)
  let scheme = call_601749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601749.url(scheme.get, call_601749.host, call_601749.base,
                         call_601749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601749, url, valid)

proc call*(call_601750: Call_GetDeleteSnapshot_601736; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601751 = newJObject()
  add(query_601751, "SnapshotName", newJString(SnapshotName))
  add(query_601751, "Action", newJString(Action))
  add(query_601751, "Version", newJString(Version))
  result = call_601750.call(nil, query_601751, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_601736(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_601737,
    base: "/", url: url_GetDeleteSnapshot_601738,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_601789 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheClusters_601791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheClusters_601790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601792 = query.getOrDefault("Action")
  valid_601792 = validateParameter(valid_601792, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_601792 != nil:
    section.add "Action", valid_601792
  var valid_601793 = query.getOrDefault("Version")
  valid_601793 = validateParameter(valid_601793, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601793 != nil:
    section.add "Version", valid_601793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601794 = header.getOrDefault("X-Amz-Date")
  valid_601794 = validateParameter(valid_601794, JString, required = false,
                                 default = nil)
  if valid_601794 != nil:
    section.add "X-Amz-Date", valid_601794
  var valid_601795 = header.getOrDefault("X-Amz-Security-Token")
  valid_601795 = validateParameter(valid_601795, JString, required = false,
                                 default = nil)
  if valid_601795 != nil:
    section.add "X-Amz-Security-Token", valid_601795
  var valid_601796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601796 = validateParameter(valid_601796, JString, required = false,
                                 default = nil)
  if valid_601796 != nil:
    section.add "X-Amz-Content-Sha256", valid_601796
  var valid_601797 = header.getOrDefault("X-Amz-Algorithm")
  valid_601797 = validateParameter(valid_601797, JString, required = false,
                                 default = nil)
  if valid_601797 != nil:
    section.add "X-Amz-Algorithm", valid_601797
  var valid_601798 = header.getOrDefault("X-Amz-Signature")
  valid_601798 = validateParameter(valid_601798, JString, required = false,
                                 default = nil)
  if valid_601798 != nil:
    section.add "X-Amz-Signature", valid_601798
  var valid_601799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601799 = validateParameter(valid_601799, JString, required = false,
                                 default = nil)
  if valid_601799 != nil:
    section.add "X-Amz-SignedHeaders", valid_601799
  var valid_601800 = header.getOrDefault("X-Amz-Credential")
  valid_601800 = validateParameter(valid_601800, JString, required = false,
                                 default = nil)
  if valid_601800 != nil:
    section.add "X-Amz-Credential", valid_601800
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  section = newJObject()
  var valid_601801 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_601801 = validateParameter(valid_601801, JBool, required = false, default = nil)
  if valid_601801 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_601801
  var valid_601802 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_601802 = validateParameter(valid_601802, JBool, required = false, default = nil)
  if valid_601802 != nil:
    section.add "ShowCacheNodeInfo", valid_601802
  var valid_601803 = formData.getOrDefault("Marker")
  valid_601803 = validateParameter(valid_601803, JString, required = false,
                                 default = nil)
  if valid_601803 != nil:
    section.add "Marker", valid_601803
  var valid_601804 = formData.getOrDefault("MaxRecords")
  valid_601804 = validateParameter(valid_601804, JInt, required = false, default = nil)
  if valid_601804 != nil:
    section.add "MaxRecords", valid_601804
  var valid_601805 = formData.getOrDefault("CacheClusterId")
  valid_601805 = validateParameter(valid_601805, JString, required = false,
                                 default = nil)
  if valid_601805 != nil:
    section.add "CacheClusterId", valid_601805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601806: Call_PostDescribeCacheClusters_601789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_601806.validator(path, query, header, formData, body)
  let scheme = call_601806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601806.url(scheme.get, call_601806.host, call_601806.base,
                         call_601806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601806, url, valid)

proc call*(call_601807: Call_PostDescribeCacheClusters_601789;
          ShowCacheClustersNotInReplicationGroups: bool = false;
          ShowCacheNodeInfo: bool = false; Marker: string = "";
          Action: string = "DescribeCacheClusters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; CacheClusterId: string = ""): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  var query_601808 = newJObject()
  var formData_601809 = newJObject()
  add(formData_601809, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(formData_601809, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(formData_601809, "Marker", newJString(Marker))
  add(query_601808, "Action", newJString(Action))
  add(formData_601809, "MaxRecords", newJInt(MaxRecords))
  add(query_601808, "Version", newJString(Version))
  add(formData_601809, "CacheClusterId", newJString(CacheClusterId))
  result = call_601807.call(nil, query_601808, nil, formData_601809, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_601789(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_601790, base: "/",
    url: url_PostDescribeCacheClusters_601791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_601769 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheClusters_601771(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheClusters_601770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601772 = query.getOrDefault("CacheClusterId")
  valid_601772 = validateParameter(valid_601772, JString, required = false,
                                 default = nil)
  if valid_601772 != nil:
    section.add "CacheClusterId", valid_601772
  var valid_601773 = query.getOrDefault("MaxRecords")
  valid_601773 = validateParameter(valid_601773, JInt, required = false, default = nil)
  if valid_601773 != nil:
    section.add "MaxRecords", valid_601773
  var valid_601774 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_601774 = validateParameter(valid_601774, JBool, required = false, default = nil)
  if valid_601774 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_601774
  var valid_601775 = query.getOrDefault("ShowCacheNodeInfo")
  valid_601775 = validateParameter(valid_601775, JBool, required = false, default = nil)
  if valid_601775 != nil:
    section.add "ShowCacheNodeInfo", valid_601775
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601776 = query.getOrDefault("Action")
  valid_601776 = validateParameter(valid_601776, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_601776 != nil:
    section.add "Action", valid_601776
  var valid_601777 = query.getOrDefault("Marker")
  valid_601777 = validateParameter(valid_601777, JString, required = false,
                                 default = nil)
  if valid_601777 != nil:
    section.add "Marker", valid_601777
  var valid_601778 = query.getOrDefault("Version")
  valid_601778 = validateParameter(valid_601778, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601778 != nil:
    section.add "Version", valid_601778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601779 = header.getOrDefault("X-Amz-Date")
  valid_601779 = validateParameter(valid_601779, JString, required = false,
                                 default = nil)
  if valid_601779 != nil:
    section.add "X-Amz-Date", valid_601779
  var valid_601780 = header.getOrDefault("X-Amz-Security-Token")
  valid_601780 = validateParameter(valid_601780, JString, required = false,
                                 default = nil)
  if valid_601780 != nil:
    section.add "X-Amz-Security-Token", valid_601780
  var valid_601781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601781 = validateParameter(valid_601781, JString, required = false,
                                 default = nil)
  if valid_601781 != nil:
    section.add "X-Amz-Content-Sha256", valid_601781
  var valid_601782 = header.getOrDefault("X-Amz-Algorithm")
  valid_601782 = validateParameter(valid_601782, JString, required = false,
                                 default = nil)
  if valid_601782 != nil:
    section.add "X-Amz-Algorithm", valid_601782
  var valid_601783 = header.getOrDefault("X-Amz-Signature")
  valid_601783 = validateParameter(valid_601783, JString, required = false,
                                 default = nil)
  if valid_601783 != nil:
    section.add "X-Amz-Signature", valid_601783
  var valid_601784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601784 = validateParameter(valid_601784, JString, required = false,
                                 default = nil)
  if valid_601784 != nil:
    section.add "X-Amz-SignedHeaders", valid_601784
  var valid_601785 = header.getOrDefault("X-Amz-Credential")
  valid_601785 = validateParameter(valid_601785, JString, required = false,
                                 default = nil)
  if valid_601785 != nil:
    section.add "X-Amz-Credential", valid_601785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601786: Call_GetDescribeCacheClusters_601769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_601786.validator(path, query, header, formData, body)
  let scheme = call_601786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601786.url(scheme.get, call_601786.host, call_601786.base,
                         call_601786.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601786, url, valid)

proc call*(call_601787: Call_GetDescribeCacheClusters_601769;
          CacheClusterId: string = ""; MaxRecords: int = 0;
          ShowCacheClustersNotInReplicationGroups: bool = false;
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Marker: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_601788 = newJObject()
  add(query_601788, "CacheClusterId", newJString(CacheClusterId))
  add(query_601788, "MaxRecords", newJInt(MaxRecords))
  add(query_601788, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_601788, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_601788, "Action", newJString(Action))
  add(query_601788, "Marker", newJString(Marker))
  add(query_601788, "Version", newJString(Version))
  result = call_601787.call(nil, query_601788, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_601769(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_601770, base: "/",
    url: url_GetDescribeCacheClusters_601771, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_601831 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheEngineVersions_601833(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheEngineVersions_601832(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601834 = query.getOrDefault("Action")
  valid_601834 = validateParameter(valid_601834, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_601834 != nil:
    section.add "Action", valid_601834
  var valid_601835 = query.getOrDefault("Version")
  valid_601835 = validateParameter(valid_601835, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601835 != nil:
    section.add "Version", valid_601835
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601836 = header.getOrDefault("X-Amz-Date")
  valid_601836 = validateParameter(valid_601836, JString, required = false,
                                 default = nil)
  if valid_601836 != nil:
    section.add "X-Amz-Date", valid_601836
  var valid_601837 = header.getOrDefault("X-Amz-Security-Token")
  valid_601837 = validateParameter(valid_601837, JString, required = false,
                                 default = nil)
  if valid_601837 != nil:
    section.add "X-Amz-Security-Token", valid_601837
  var valid_601838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601838 = validateParameter(valid_601838, JString, required = false,
                                 default = nil)
  if valid_601838 != nil:
    section.add "X-Amz-Content-Sha256", valid_601838
  var valid_601839 = header.getOrDefault("X-Amz-Algorithm")
  valid_601839 = validateParameter(valid_601839, JString, required = false,
                                 default = nil)
  if valid_601839 != nil:
    section.add "X-Amz-Algorithm", valid_601839
  var valid_601840 = header.getOrDefault("X-Amz-Signature")
  valid_601840 = validateParameter(valid_601840, JString, required = false,
                                 default = nil)
  if valid_601840 != nil:
    section.add "X-Amz-Signature", valid_601840
  var valid_601841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601841 = validateParameter(valid_601841, JString, required = false,
                                 default = nil)
  if valid_601841 != nil:
    section.add "X-Amz-SignedHeaders", valid_601841
  var valid_601842 = header.getOrDefault("X-Amz-Credential")
  valid_601842 = validateParameter(valid_601842, JString, required = false,
                                 default = nil)
  if valid_601842 != nil:
    section.add "X-Amz-Credential", valid_601842
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_601843 = formData.getOrDefault("Engine")
  valid_601843 = validateParameter(valid_601843, JString, required = false,
                                 default = nil)
  if valid_601843 != nil:
    section.add "Engine", valid_601843
  var valid_601844 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_601844 = validateParameter(valid_601844, JString, required = false,
                                 default = nil)
  if valid_601844 != nil:
    section.add "CacheParameterGroupFamily", valid_601844
  var valid_601845 = formData.getOrDefault("Marker")
  valid_601845 = validateParameter(valid_601845, JString, required = false,
                                 default = nil)
  if valid_601845 != nil:
    section.add "Marker", valid_601845
  var valid_601846 = formData.getOrDefault("MaxRecords")
  valid_601846 = validateParameter(valid_601846, JInt, required = false, default = nil)
  if valid_601846 != nil:
    section.add "MaxRecords", valid_601846
  var valid_601847 = formData.getOrDefault("EngineVersion")
  valid_601847 = validateParameter(valid_601847, JString, required = false,
                                 default = nil)
  if valid_601847 != nil:
    section.add "EngineVersion", valid_601847
  var valid_601848 = formData.getOrDefault("DefaultOnly")
  valid_601848 = validateParameter(valid_601848, JBool, required = false, default = nil)
  if valid_601848 != nil:
    section.add "DefaultOnly", valid_601848
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601849: Call_PostDescribeCacheEngineVersions_601831;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_601849.validator(path, query, header, formData, body)
  let scheme = call_601849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601849.url(scheme.get, call_601849.host, call_601849.base,
                         call_601849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601849, url, valid)

proc call*(call_601850: Call_PostDescribeCacheEngineVersions_601831;
          Engine: string = ""; CacheParameterGroupFamily: string = "";
          Marker: string = ""; Action: string = "DescribeCacheEngineVersions";
          MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2015-02-02"; DefaultOnly: bool = false): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_601851 = newJObject()
  var formData_601852 = newJObject()
  add(formData_601852, "Engine", newJString(Engine))
  add(formData_601852, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_601852, "Marker", newJString(Marker))
  add(query_601851, "Action", newJString(Action))
  add(formData_601852, "MaxRecords", newJInt(MaxRecords))
  add(formData_601852, "EngineVersion", newJString(EngineVersion))
  add(query_601851, "Version", newJString(Version))
  add(formData_601852, "DefaultOnly", newJBool(DefaultOnly))
  result = call_601850.call(nil, query_601851, nil, formData_601852, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_601831(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_601832, base: "/",
    url: url_PostDescribeCacheEngineVersions_601833,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_601810 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheEngineVersions_601812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheEngineVersions_601811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  var valid_601813 = query.getOrDefault("Engine")
  valid_601813 = validateParameter(valid_601813, JString, required = false,
                                 default = nil)
  if valid_601813 != nil:
    section.add "Engine", valid_601813
  var valid_601814 = query.getOrDefault("MaxRecords")
  valid_601814 = validateParameter(valid_601814, JInt, required = false, default = nil)
  if valid_601814 != nil:
    section.add "MaxRecords", valid_601814
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601815 = query.getOrDefault("Action")
  valid_601815 = validateParameter(valid_601815, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_601815 != nil:
    section.add "Action", valid_601815
  var valid_601816 = query.getOrDefault("Marker")
  valid_601816 = validateParameter(valid_601816, JString, required = false,
                                 default = nil)
  if valid_601816 != nil:
    section.add "Marker", valid_601816
  var valid_601817 = query.getOrDefault("EngineVersion")
  valid_601817 = validateParameter(valid_601817, JString, required = false,
                                 default = nil)
  if valid_601817 != nil:
    section.add "EngineVersion", valid_601817
  var valid_601818 = query.getOrDefault("DefaultOnly")
  valid_601818 = validateParameter(valid_601818, JBool, required = false, default = nil)
  if valid_601818 != nil:
    section.add "DefaultOnly", valid_601818
  var valid_601819 = query.getOrDefault("Version")
  valid_601819 = validateParameter(valid_601819, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601819 != nil:
    section.add "Version", valid_601819
  var valid_601820 = query.getOrDefault("CacheParameterGroupFamily")
  valid_601820 = validateParameter(valid_601820, JString, required = false,
                                 default = nil)
  if valid_601820 != nil:
    section.add "CacheParameterGroupFamily", valid_601820
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601821 = header.getOrDefault("X-Amz-Date")
  valid_601821 = validateParameter(valid_601821, JString, required = false,
                                 default = nil)
  if valid_601821 != nil:
    section.add "X-Amz-Date", valid_601821
  var valid_601822 = header.getOrDefault("X-Amz-Security-Token")
  valid_601822 = validateParameter(valid_601822, JString, required = false,
                                 default = nil)
  if valid_601822 != nil:
    section.add "X-Amz-Security-Token", valid_601822
  var valid_601823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601823 = validateParameter(valid_601823, JString, required = false,
                                 default = nil)
  if valid_601823 != nil:
    section.add "X-Amz-Content-Sha256", valid_601823
  var valid_601824 = header.getOrDefault("X-Amz-Algorithm")
  valid_601824 = validateParameter(valid_601824, JString, required = false,
                                 default = nil)
  if valid_601824 != nil:
    section.add "X-Amz-Algorithm", valid_601824
  var valid_601825 = header.getOrDefault("X-Amz-Signature")
  valid_601825 = validateParameter(valid_601825, JString, required = false,
                                 default = nil)
  if valid_601825 != nil:
    section.add "X-Amz-Signature", valid_601825
  var valid_601826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601826 = validateParameter(valid_601826, JString, required = false,
                                 default = nil)
  if valid_601826 != nil:
    section.add "X-Amz-SignedHeaders", valid_601826
  var valid_601827 = header.getOrDefault("X-Amz-Credential")
  valid_601827 = validateParameter(valid_601827, JString, required = false,
                                 default = nil)
  if valid_601827 != nil:
    section.add "X-Amz-Credential", valid_601827
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601828: Call_GetDescribeCacheEngineVersions_601810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_601828.validator(path, query, header, formData, body)
  let scheme = call_601828.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601828.url(scheme.get, call_601828.host, call_601828.base,
                         call_601828.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601828, url, valid)

proc call*(call_601829: Call_GetDescribeCacheEngineVersions_601810;
          Engine: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeCacheEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2015-02-02"; CacheParameterGroupFamily: string = ""): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_601830 = newJObject()
  add(query_601830, "Engine", newJString(Engine))
  add(query_601830, "MaxRecords", newJInt(MaxRecords))
  add(query_601830, "Action", newJString(Action))
  add(query_601830, "Marker", newJString(Marker))
  add(query_601830, "EngineVersion", newJString(EngineVersion))
  add(query_601830, "DefaultOnly", newJBool(DefaultOnly))
  add(query_601830, "Version", newJString(Version))
  add(query_601830, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_601829.call(nil, query_601830, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_601810(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_601811, base: "/",
    url: url_GetDescribeCacheEngineVersions_601812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_601871 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheParameterGroups_601873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameterGroups_601872(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601874 = query.getOrDefault("Action")
  valid_601874 = validateParameter(valid_601874, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_601874 != nil:
    section.add "Action", valid_601874
  var valid_601875 = query.getOrDefault("Version")
  valid_601875 = validateParameter(valid_601875, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601875 != nil:
    section.add "Version", valid_601875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601876 = header.getOrDefault("X-Amz-Date")
  valid_601876 = validateParameter(valid_601876, JString, required = false,
                                 default = nil)
  if valid_601876 != nil:
    section.add "X-Amz-Date", valid_601876
  var valid_601877 = header.getOrDefault("X-Amz-Security-Token")
  valid_601877 = validateParameter(valid_601877, JString, required = false,
                                 default = nil)
  if valid_601877 != nil:
    section.add "X-Amz-Security-Token", valid_601877
  var valid_601878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601878 = validateParameter(valid_601878, JString, required = false,
                                 default = nil)
  if valid_601878 != nil:
    section.add "X-Amz-Content-Sha256", valid_601878
  var valid_601879 = header.getOrDefault("X-Amz-Algorithm")
  valid_601879 = validateParameter(valid_601879, JString, required = false,
                                 default = nil)
  if valid_601879 != nil:
    section.add "X-Amz-Algorithm", valid_601879
  var valid_601880 = header.getOrDefault("X-Amz-Signature")
  valid_601880 = validateParameter(valid_601880, JString, required = false,
                                 default = nil)
  if valid_601880 != nil:
    section.add "X-Amz-Signature", valid_601880
  var valid_601881 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601881 = validateParameter(valid_601881, JString, required = false,
                                 default = nil)
  if valid_601881 != nil:
    section.add "X-Amz-SignedHeaders", valid_601881
  var valid_601882 = header.getOrDefault("X-Amz-Credential")
  valid_601882 = validateParameter(valid_601882, JString, required = false,
                                 default = nil)
  if valid_601882 != nil:
    section.add "X-Amz-Credential", valid_601882
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_601883 = formData.getOrDefault("Marker")
  valid_601883 = validateParameter(valid_601883, JString, required = false,
                                 default = nil)
  if valid_601883 != nil:
    section.add "Marker", valid_601883
  var valid_601884 = formData.getOrDefault("CacheParameterGroupName")
  valid_601884 = validateParameter(valid_601884, JString, required = false,
                                 default = nil)
  if valid_601884 != nil:
    section.add "CacheParameterGroupName", valid_601884
  var valid_601885 = formData.getOrDefault("MaxRecords")
  valid_601885 = validateParameter(valid_601885, JInt, required = false, default = nil)
  if valid_601885 != nil:
    section.add "MaxRecords", valid_601885
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601886: Call_PostDescribeCacheParameterGroups_601871;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_601886.validator(path, query, header, formData, body)
  let scheme = call_601886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601886.url(scheme.get, call_601886.host, call_601886.base,
                         call_601886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601886, url, valid)

proc call*(call_601887: Call_PostDescribeCacheParameterGroups_601871;
          Marker: string = ""; Action: string = "DescribeCacheParameterGroups";
          CacheParameterGroupName: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_601888 = newJObject()
  var formData_601889 = newJObject()
  add(formData_601889, "Marker", newJString(Marker))
  add(query_601888, "Action", newJString(Action))
  add(formData_601889, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_601889, "MaxRecords", newJInt(MaxRecords))
  add(query_601888, "Version", newJString(Version))
  result = call_601887.call(nil, query_601888, nil, formData_601889, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_601871(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_601872, base: "/",
    url: url_PostDescribeCacheParameterGroups_601873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_601853 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheParameterGroups_601855(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameterGroups_601854(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601856 = query.getOrDefault("MaxRecords")
  valid_601856 = validateParameter(valid_601856, JInt, required = false, default = nil)
  if valid_601856 != nil:
    section.add "MaxRecords", valid_601856
  var valid_601857 = query.getOrDefault("CacheParameterGroupName")
  valid_601857 = validateParameter(valid_601857, JString, required = false,
                                 default = nil)
  if valid_601857 != nil:
    section.add "CacheParameterGroupName", valid_601857
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601858 = query.getOrDefault("Action")
  valid_601858 = validateParameter(valid_601858, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_601858 != nil:
    section.add "Action", valid_601858
  var valid_601859 = query.getOrDefault("Marker")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "Marker", valid_601859
  var valid_601860 = query.getOrDefault("Version")
  valid_601860 = validateParameter(valid_601860, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601860 != nil:
    section.add "Version", valid_601860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601861 = header.getOrDefault("X-Amz-Date")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-Date", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Security-Token")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Security-Token", valid_601862
  var valid_601863 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601863 = validateParameter(valid_601863, JString, required = false,
                                 default = nil)
  if valid_601863 != nil:
    section.add "X-Amz-Content-Sha256", valid_601863
  var valid_601864 = header.getOrDefault("X-Amz-Algorithm")
  valid_601864 = validateParameter(valid_601864, JString, required = false,
                                 default = nil)
  if valid_601864 != nil:
    section.add "X-Amz-Algorithm", valid_601864
  var valid_601865 = header.getOrDefault("X-Amz-Signature")
  valid_601865 = validateParameter(valid_601865, JString, required = false,
                                 default = nil)
  if valid_601865 != nil:
    section.add "X-Amz-Signature", valid_601865
  var valid_601866 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601866 = validateParameter(valid_601866, JString, required = false,
                                 default = nil)
  if valid_601866 != nil:
    section.add "X-Amz-SignedHeaders", valid_601866
  var valid_601867 = header.getOrDefault("X-Amz-Credential")
  valid_601867 = validateParameter(valid_601867, JString, required = false,
                                 default = nil)
  if valid_601867 != nil:
    section.add "X-Amz-Credential", valid_601867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601868: Call_GetDescribeCacheParameterGroups_601853;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_601868.validator(path, query, header, formData, body)
  let scheme = call_601868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601868.url(scheme.get, call_601868.host, call_601868.base,
                         call_601868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601868, url, valid)

proc call*(call_601869: Call_GetDescribeCacheParameterGroups_601853;
          MaxRecords: int = 0; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_601870 = newJObject()
  add(query_601870, "MaxRecords", newJInt(MaxRecords))
  add(query_601870, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_601870, "Action", newJString(Action))
  add(query_601870, "Marker", newJString(Marker))
  add(query_601870, "Version", newJString(Version))
  result = call_601869.call(nil, query_601870, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_601853(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_601854, base: "/",
    url: url_GetDescribeCacheParameterGroups_601855,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_601909 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheParameters_601911(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameters_601910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601912 = query.getOrDefault("Action")
  valid_601912 = validateParameter(valid_601912, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_601912 != nil:
    section.add "Action", valid_601912
  var valid_601913 = query.getOrDefault("Version")
  valid_601913 = validateParameter(valid_601913, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601913 != nil:
    section.add "Version", valid_601913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601914 = header.getOrDefault("X-Amz-Date")
  valid_601914 = validateParameter(valid_601914, JString, required = false,
                                 default = nil)
  if valid_601914 != nil:
    section.add "X-Amz-Date", valid_601914
  var valid_601915 = header.getOrDefault("X-Amz-Security-Token")
  valid_601915 = validateParameter(valid_601915, JString, required = false,
                                 default = nil)
  if valid_601915 != nil:
    section.add "X-Amz-Security-Token", valid_601915
  var valid_601916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601916 = validateParameter(valid_601916, JString, required = false,
                                 default = nil)
  if valid_601916 != nil:
    section.add "X-Amz-Content-Sha256", valid_601916
  var valid_601917 = header.getOrDefault("X-Amz-Algorithm")
  valid_601917 = validateParameter(valid_601917, JString, required = false,
                                 default = nil)
  if valid_601917 != nil:
    section.add "X-Amz-Algorithm", valid_601917
  var valid_601918 = header.getOrDefault("X-Amz-Signature")
  valid_601918 = validateParameter(valid_601918, JString, required = false,
                                 default = nil)
  if valid_601918 != nil:
    section.add "X-Amz-Signature", valid_601918
  var valid_601919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601919 = validateParameter(valid_601919, JString, required = false,
                                 default = nil)
  if valid_601919 != nil:
    section.add "X-Amz-SignedHeaders", valid_601919
  var valid_601920 = header.getOrDefault("X-Amz-Credential")
  valid_601920 = validateParameter(valid_601920, JString, required = false,
                                 default = nil)
  if valid_601920 != nil:
    section.add "X-Amz-Credential", valid_601920
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  section = newJObject()
  var valid_601921 = formData.getOrDefault("Marker")
  valid_601921 = validateParameter(valid_601921, JString, required = false,
                                 default = nil)
  if valid_601921 != nil:
    section.add "Marker", valid_601921
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_601922 = formData.getOrDefault("CacheParameterGroupName")
  valid_601922 = validateParameter(valid_601922, JString, required = true,
                                 default = nil)
  if valid_601922 != nil:
    section.add "CacheParameterGroupName", valid_601922
  var valid_601923 = formData.getOrDefault("MaxRecords")
  valid_601923 = validateParameter(valid_601923, JInt, required = false, default = nil)
  if valid_601923 != nil:
    section.add "MaxRecords", valid_601923
  var valid_601924 = formData.getOrDefault("Source")
  valid_601924 = validateParameter(valid_601924, JString, required = false,
                                 default = nil)
  if valid_601924 != nil:
    section.add "Source", valid_601924
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601925: Call_PostDescribeCacheParameters_601909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_601925.validator(path, query, header, formData, body)
  let scheme = call_601925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601925.url(scheme.get, call_601925.host, call_601925.base,
                         call_601925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601925, url, valid)

proc call*(call_601926: Call_PostDescribeCacheParameters_601909;
          CacheParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeCacheParameters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; Source: string = ""): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  var query_601927 = newJObject()
  var formData_601928 = newJObject()
  add(formData_601928, "Marker", newJString(Marker))
  add(query_601927, "Action", newJString(Action))
  add(formData_601928, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_601928, "MaxRecords", newJInt(MaxRecords))
  add(query_601927, "Version", newJString(Version))
  add(formData_601928, "Source", newJString(Source))
  result = call_601926.call(nil, query_601927, nil, formData_601928, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_601909(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_601910, base: "/",
    url: url_PostDescribeCacheParameters_601911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_601890 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheParameters_601892(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameters_601891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_601893 = query.getOrDefault("MaxRecords")
  valid_601893 = validateParameter(valid_601893, JInt, required = false, default = nil)
  if valid_601893 != nil:
    section.add "MaxRecords", valid_601893
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_601894 = query.getOrDefault("CacheParameterGroupName")
  valid_601894 = validateParameter(valid_601894, JString, required = true,
                                 default = nil)
  if valid_601894 != nil:
    section.add "CacheParameterGroupName", valid_601894
  var valid_601895 = query.getOrDefault("Action")
  valid_601895 = validateParameter(valid_601895, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_601895 != nil:
    section.add "Action", valid_601895
  var valid_601896 = query.getOrDefault("Marker")
  valid_601896 = validateParameter(valid_601896, JString, required = false,
                                 default = nil)
  if valid_601896 != nil:
    section.add "Marker", valid_601896
  var valid_601897 = query.getOrDefault("Source")
  valid_601897 = validateParameter(valid_601897, JString, required = false,
                                 default = nil)
  if valid_601897 != nil:
    section.add "Source", valid_601897
  var valid_601898 = query.getOrDefault("Version")
  valid_601898 = validateParameter(valid_601898, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601898 != nil:
    section.add "Version", valid_601898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601899 = header.getOrDefault("X-Amz-Date")
  valid_601899 = validateParameter(valid_601899, JString, required = false,
                                 default = nil)
  if valid_601899 != nil:
    section.add "X-Amz-Date", valid_601899
  var valid_601900 = header.getOrDefault("X-Amz-Security-Token")
  valid_601900 = validateParameter(valid_601900, JString, required = false,
                                 default = nil)
  if valid_601900 != nil:
    section.add "X-Amz-Security-Token", valid_601900
  var valid_601901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601901 = validateParameter(valid_601901, JString, required = false,
                                 default = nil)
  if valid_601901 != nil:
    section.add "X-Amz-Content-Sha256", valid_601901
  var valid_601902 = header.getOrDefault("X-Amz-Algorithm")
  valid_601902 = validateParameter(valid_601902, JString, required = false,
                                 default = nil)
  if valid_601902 != nil:
    section.add "X-Amz-Algorithm", valid_601902
  var valid_601903 = header.getOrDefault("X-Amz-Signature")
  valid_601903 = validateParameter(valid_601903, JString, required = false,
                                 default = nil)
  if valid_601903 != nil:
    section.add "X-Amz-Signature", valid_601903
  var valid_601904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601904 = validateParameter(valid_601904, JString, required = false,
                                 default = nil)
  if valid_601904 != nil:
    section.add "X-Amz-SignedHeaders", valid_601904
  var valid_601905 = header.getOrDefault("X-Amz-Credential")
  valid_601905 = validateParameter(valid_601905, JString, required = false,
                                 default = nil)
  if valid_601905 != nil:
    section.add "X-Amz-Credential", valid_601905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601906: Call_GetDescribeCacheParameters_601890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_601906.validator(path, query, header, formData, body)
  let scheme = call_601906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601906.url(scheme.get, call_601906.host, call_601906.base,
                         call_601906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601906, url, valid)

proc call*(call_601907: Call_GetDescribeCacheParameters_601890;
          CacheParameterGroupName: string; MaxRecords: int = 0;
          Action: string = "DescribeCacheParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   Version: string (required)
  var query_601908 = newJObject()
  add(query_601908, "MaxRecords", newJInt(MaxRecords))
  add(query_601908, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_601908, "Action", newJString(Action))
  add(query_601908, "Marker", newJString(Marker))
  add(query_601908, "Source", newJString(Source))
  add(query_601908, "Version", newJString(Version))
  result = call_601907.call(nil, query_601908, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_601890(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_601891, base: "/",
    url: url_GetDescribeCacheParameters_601892,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_601947 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheSecurityGroups_601949(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_601948(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601950 = query.getOrDefault("Action")
  valid_601950 = validateParameter(valid_601950, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_601950 != nil:
    section.add "Action", valid_601950
  var valid_601951 = query.getOrDefault("Version")
  valid_601951 = validateParameter(valid_601951, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601951 != nil:
    section.add "Version", valid_601951
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601952 = header.getOrDefault("X-Amz-Date")
  valid_601952 = validateParameter(valid_601952, JString, required = false,
                                 default = nil)
  if valid_601952 != nil:
    section.add "X-Amz-Date", valid_601952
  var valid_601953 = header.getOrDefault("X-Amz-Security-Token")
  valid_601953 = validateParameter(valid_601953, JString, required = false,
                                 default = nil)
  if valid_601953 != nil:
    section.add "X-Amz-Security-Token", valid_601953
  var valid_601954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601954 = validateParameter(valid_601954, JString, required = false,
                                 default = nil)
  if valid_601954 != nil:
    section.add "X-Amz-Content-Sha256", valid_601954
  var valid_601955 = header.getOrDefault("X-Amz-Algorithm")
  valid_601955 = validateParameter(valid_601955, JString, required = false,
                                 default = nil)
  if valid_601955 != nil:
    section.add "X-Amz-Algorithm", valid_601955
  var valid_601956 = header.getOrDefault("X-Amz-Signature")
  valid_601956 = validateParameter(valid_601956, JString, required = false,
                                 default = nil)
  if valid_601956 != nil:
    section.add "X-Amz-Signature", valid_601956
  var valid_601957 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601957 = validateParameter(valid_601957, JString, required = false,
                                 default = nil)
  if valid_601957 != nil:
    section.add "X-Amz-SignedHeaders", valid_601957
  var valid_601958 = header.getOrDefault("X-Amz-Credential")
  valid_601958 = validateParameter(valid_601958, JString, required = false,
                                 default = nil)
  if valid_601958 != nil:
    section.add "X-Amz-Credential", valid_601958
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_601959 = formData.getOrDefault("CacheSecurityGroupName")
  valid_601959 = validateParameter(valid_601959, JString, required = false,
                                 default = nil)
  if valid_601959 != nil:
    section.add "CacheSecurityGroupName", valid_601959
  var valid_601960 = formData.getOrDefault("Marker")
  valid_601960 = validateParameter(valid_601960, JString, required = false,
                                 default = nil)
  if valid_601960 != nil:
    section.add "Marker", valid_601960
  var valid_601961 = formData.getOrDefault("MaxRecords")
  valid_601961 = validateParameter(valid_601961, JInt, required = false, default = nil)
  if valid_601961 != nil:
    section.add "MaxRecords", valid_601961
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601962: Call_PostDescribeCacheSecurityGroups_601947;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_601962.validator(path, query, header, formData, body)
  let scheme = call_601962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601962.url(scheme.get, call_601962.host, call_601962.base,
                         call_601962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601962, url, valid)

proc call*(call_601963: Call_PostDescribeCacheSecurityGroups_601947;
          CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_601964 = newJObject()
  var formData_601965 = newJObject()
  add(formData_601965, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_601965, "Marker", newJString(Marker))
  add(query_601964, "Action", newJString(Action))
  add(formData_601965, "MaxRecords", newJInt(MaxRecords))
  add(query_601964, "Version", newJString(Version))
  result = call_601963.call(nil, query_601964, nil, formData_601965, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_601947(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_601948, base: "/",
    url: url_PostDescribeCacheSecurityGroups_601949,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_601929 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheSecurityGroups_601931(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_601930(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601932 = query.getOrDefault("CacheSecurityGroupName")
  valid_601932 = validateParameter(valid_601932, JString, required = false,
                                 default = nil)
  if valid_601932 != nil:
    section.add "CacheSecurityGroupName", valid_601932
  var valid_601933 = query.getOrDefault("MaxRecords")
  valid_601933 = validateParameter(valid_601933, JInt, required = false, default = nil)
  if valid_601933 != nil:
    section.add "MaxRecords", valid_601933
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601934 = query.getOrDefault("Action")
  valid_601934 = validateParameter(valid_601934, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_601934 != nil:
    section.add "Action", valid_601934
  var valid_601935 = query.getOrDefault("Marker")
  valid_601935 = validateParameter(valid_601935, JString, required = false,
                                 default = nil)
  if valid_601935 != nil:
    section.add "Marker", valid_601935
  var valid_601936 = query.getOrDefault("Version")
  valid_601936 = validateParameter(valid_601936, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601936 != nil:
    section.add "Version", valid_601936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601937 = header.getOrDefault("X-Amz-Date")
  valid_601937 = validateParameter(valid_601937, JString, required = false,
                                 default = nil)
  if valid_601937 != nil:
    section.add "X-Amz-Date", valid_601937
  var valid_601938 = header.getOrDefault("X-Amz-Security-Token")
  valid_601938 = validateParameter(valid_601938, JString, required = false,
                                 default = nil)
  if valid_601938 != nil:
    section.add "X-Amz-Security-Token", valid_601938
  var valid_601939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601939 = validateParameter(valid_601939, JString, required = false,
                                 default = nil)
  if valid_601939 != nil:
    section.add "X-Amz-Content-Sha256", valid_601939
  var valid_601940 = header.getOrDefault("X-Amz-Algorithm")
  valid_601940 = validateParameter(valid_601940, JString, required = false,
                                 default = nil)
  if valid_601940 != nil:
    section.add "X-Amz-Algorithm", valid_601940
  var valid_601941 = header.getOrDefault("X-Amz-Signature")
  valid_601941 = validateParameter(valid_601941, JString, required = false,
                                 default = nil)
  if valid_601941 != nil:
    section.add "X-Amz-Signature", valid_601941
  var valid_601942 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601942 = validateParameter(valid_601942, JString, required = false,
                                 default = nil)
  if valid_601942 != nil:
    section.add "X-Amz-SignedHeaders", valid_601942
  var valid_601943 = header.getOrDefault("X-Amz-Credential")
  valid_601943 = validateParameter(valid_601943, JString, required = false,
                                 default = nil)
  if valid_601943 != nil:
    section.add "X-Amz-Credential", valid_601943
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601944: Call_GetDescribeCacheSecurityGroups_601929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_601944.validator(path, query, header, formData, body)
  let scheme = call_601944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601944.url(scheme.get, call_601944.host, call_601944.base,
                         call_601944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601944, url, valid)

proc call*(call_601945: Call_GetDescribeCacheSecurityGroups_601929;
          CacheSecurityGroupName: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeCacheSecurityGroups"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_601946 = newJObject()
  add(query_601946, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_601946, "MaxRecords", newJInt(MaxRecords))
  add(query_601946, "Action", newJString(Action))
  add(query_601946, "Marker", newJString(Marker))
  add(query_601946, "Version", newJString(Version))
  result = call_601945.call(nil, query_601946, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_601929(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_601930, base: "/",
    url: url_GetDescribeCacheSecurityGroups_601931,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_601984 = ref object of OpenApiRestCall_600437
proc url_PostDescribeCacheSubnetGroups_601986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_601985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601987 = query.getOrDefault("Action")
  valid_601987 = validateParameter(valid_601987, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_601987 != nil:
    section.add "Action", valid_601987
  var valid_601988 = query.getOrDefault("Version")
  valid_601988 = validateParameter(valid_601988, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601988 != nil:
    section.add "Version", valid_601988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601989 = header.getOrDefault("X-Amz-Date")
  valid_601989 = validateParameter(valid_601989, JString, required = false,
                                 default = nil)
  if valid_601989 != nil:
    section.add "X-Amz-Date", valid_601989
  var valid_601990 = header.getOrDefault("X-Amz-Security-Token")
  valid_601990 = validateParameter(valid_601990, JString, required = false,
                                 default = nil)
  if valid_601990 != nil:
    section.add "X-Amz-Security-Token", valid_601990
  var valid_601991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601991 = validateParameter(valid_601991, JString, required = false,
                                 default = nil)
  if valid_601991 != nil:
    section.add "X-Amz-Content-Sha256", valid_601991
  var valid_601992 = header.getOrDefault("X-Amz-Algorithm")
  valid_601992 = validateParameter(valid_601992, JString, required = false,
                                 default = nil)
  if valid_601992 != nil:
    section.add "X-Amz-Algorithm", valid_601992
  var valid_601993 = header.getOrDefault("X-Amz-Signature")
  valid_601993 = validateParameter(valid_601993, JString, required = false,
                                 default = nil)
  if valid_601993 != nil:
    section.add "X-Amz-Signature", valid_601993
  var valid_601994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601994 = validateParameter(valid_601994, JString, required = false,
                                 default = nil)
  if valid_601994 != nil:
    section.add "X-Amz-SignedHeaders", valid_601994
  var valid_601995 = header.getOrDefault("X-Amz-Credential")
  valid_601995 = validateParameter(valid_601995, JString, required = false,
                                 default = nil)
  if valid_601995 != nil:
    section.add "X-Amz-Credential", valid_601995
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_601996 = formData.getOrDefault("Marker")
  valid_601996 = validateParameter(valid_601996, JString, required = false,
                                 default = nil)
  if valid_601996 != nil:
    section.add "Marker", valid_601996
  var valid_601997 = formData.getOrDefault("CacheSubnetGroupName")
  valid_601997 = validateParameter(valid_601997, JString, required = false,
                                 default = nil)
  if valid_601997 != nil:
    section.add "CacheSubnetGroupName", valid_601997
  var valid_601998 = formData.getOrDefault("MaxRecords")
  valid_601998 = validateParameter(valid_601998, JInt, required = false, default = nil)
  if valid_601998 != nil:
    section.add "MaxRecords", valid_601998
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601999: Call_PostDescribeCacheSubnetGroups_601984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_601999.validator(path, query, header, formData, body)
  let scheme = call_601999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601999.url(scheme.get, call_601999.host, call_601999.base,
                         call_601999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601999, url, valid)

proc call*(call_602000: Call_PostDescribeCacheSubnetGroups_601984;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_602001 = newJObject()
  var formData_602002 = newJObject()
  add(formData_602002, "Marker", newJString(Marker))
  add(query_602001, "Action", newJString(Action))
  add(formData_602002, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_602002, "MaxRecords", newJInt(MaxRecords))
  add(query_602001, "Version", newJString(Version))
  result = call_602000.call(nil, query_602001, nil, formData_602002, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_601984(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_601985, base: "/",
    url: url_PostDescribeCacheSubnetGroups_601986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_601966 = ref object of OpenApiRestCall_600437
proc url_GetDescribeCacheSubnetGroups_601968(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_601967(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601969 = query.getOrDefault("MaxRecords")
  valid_601969 = validateParameter(valid_601969, JInt, required = false, default = nil)
  if valid_601969 != nil:
    section.add "MaxRecords", valid_601969
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601970 = query.getOrDefault("Action")
  valid_601970 = validateParameter(valid_601970, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_601970 != nil:
    section.add "Action", valid_601970
  var valid_601971 = query.getOrDefault("Marker")
  valid_601971 = validateParameter(valid_601971, JString, required = false,
                                 default = nil)
  if valid_601971 != nil:
    section.add "Marker", valid_601971
  var valid_601972 = query.getOrDefault("CacheSubnetGroupName")
  valid_601972 = validateParameter(valid_601972, JString, required = false,
                                 default = nil)
  if valid_601972 != nil:
    section.add "CacheSubnetGroupName", valid_601972
  var valid_601973 = query.getOrDefault("Version")
  valid_601973 = validateParameter(valid_601973, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601973 != nil:
    section.add "Version", valid_601973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601974 = header.getOrDefault("X-Amz-Date")
  valid_601974 = validateParameter(valid_601974, JString, required = false,
                                 default = nil)
  if valid_601974 != nil:
    section.add "X-Amz-Date", valid_601974
  var valid_601975 = header.getOrDefault("X-Amz-Security-Token")
  valid_601975 = validateParameter(valid_601975, JString, required = false,
                                 default = nil)
  if valid_601975 != nil:
    section.add "X-Amz-Security-Token", valid_601975
  var valid_601976 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601976 = validateParameter(valid_601976, JString, required = false,
                                 default = nil)
  if valid_601976 != nil:
    section.add "X-Amz-Content-Sha256", valid_601976
  var valid_601977 = header.getOrDefault("X-Amz-Algorithm")
  valid_601977 = validateParameter(valid_601977, JString, required = false,
                                 default = nil)
  if valid_601977 != nil:
    section.add "X-Amz-Algorithm", valid_601977
  var valid_601978 = header.getOrDefault("X-Amz-Signature")
  valid_601978 = validateParameter(valid_601978, JString, required = false,
                                 default = nil)
  if valid_601978 != nil:
    section.add "X-Amz-Signature", valid_601978
  var valid_601979 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601979 = validateParameter(valid_601979, JString, required = false,
                                 default = nil)
  if valid_601979 != nil:
    section.add "X-Amz-SignedHeaders", valid_601979
  var valid_601980 = header.getOrDefault("X-Amz-Credential")
  valid_601980 = validateParameter(valid_601980, JString, required = false,
                                 default = nil)
  if valid_601980 != nil:
    section.add "X-Amz-Credential", valid_601980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601981: Call_GetDescribeCacheSubnetGroups_601966; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_601981.validator(path, query, header, formData, body)
  let scheme = call_601981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601981.url(scheme.get, call_601981.host, call_601981.base,
                         call_601981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_601981, url, valid)

proc call*(call_601982: Call_GetDescribeCacheSubnetGroups_601966;
          MaxRecords: int = 0; Action: string = "DescribeCacheSubnetGroups";
          Marker: string = ""; CacheSubnetGroupName: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  var query_601983 = newJObject()
  add(query_601983, "MaxRecords", newJInt(MaxRecords))
  add(query_601983, "Action", newJString(Action))
  add(query_601983, "Marker", newJString(Marker))
  add(query_601983, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_601983, "Version", newJString(Version))
  result = call_601982.call(nil, query_601983, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_601966(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_601967, base: "/",
    url: url_GetDescribeCacheSubnetGroups_601968,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_602021 = ref object of OpenApiRestCall_600437
proc url_PostDescribeEngineDefaultParameters_602023(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_602022(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602024 = query.getOrDefault("Action")
  valid_602024 = validateParameter(valid_602024, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_602024 != nil:
    section.add "Action", valid_602024
  var valid_602025 = query.getOrDefault("Version")
  valid_602025 = validateParameter(valid_602025, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602025 != nil:
    section.add "Version", valid_602025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602026 = header.getOrDefault("X-Amz-Date")
  valid_602026 = validateParameter(valid_602026, JString, required = false,
                                 default = nil)
  if valid_602026 != nil:
    section.add "X-Amz-Date", valid_602026
  var valid_602027 = header.getOrDefault("X-Amz-Security-Token")
  valid_602027 = validateParameter(valid_602027, JString, required = false,
                                 default = nil)
  if valid_602027 != nil:
    section.add "X-Amz-Security-Token", valid_602027
  var valid_602028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602028 = validateParameter(valid_602028, JString, required = false,
                                 default = nil)
  if valid_602028 != nil:
    section.add "X-Amz-Content-Sha256", valid_602028
  var valid_602029 = header.getOrDefault("X-Amz-Algorithm")
  valid_602029 = validateParameter(valid_602029, JString, required = false,
                                 default = nil)
  if valid_602029 != nil:
    section.add "X-Amz-Algorithm", valid_602029
  var valid_602030 = header.getOrDefault("X-Amz-Signature")
  valid_602030 = validateParameter(valid_602030, JString, required = false,
                                 default = nil)
  if valid_602030 != nil:
    section.add "X-Amz-Signature", valid_602030
  var valid_602031 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602031 = validateParameter(valid_602031, JString, required = false,
                                 default = nil)
  if valid_602031 != nil:
    section.add "X-Amz-SignedHeaders", valid_602031
  var valid_602032 = header.getOrDefault("X-Amz-Credential")
  valid_602032 = validateParameter(valid_602032, JString, required = false,
                                 default = nil)
  if valid_602032 != nil:
    section.add "X-Amz-Credential", valid_602032
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_602033 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_602033 = validateParameter(valid_602033, JString, required = true,
                                 default = nil)
  if valid_602033 != nil:
    section.add "CacheParameterGroupFamily", valid_602033
  var valid_602034 = formData.getOrDefault("Marker")
  valid_602034 = validateParameter(valid_602034, JString, required = false,
                                 default = nil)
  if valid_602034 != nil:
    section.add "Marker", valid_602034
  var valid_602035 = formData.getOrDefault("MaxRecords")
  valid_602035 = validateParameter(valid_602035, JInt, required = false, default = nil)
  if valid_602035 != nil:
    section.add "MaxRecords", valid_602035
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602036: Call_PostDescribeEngineDefaultParameters_602021;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_602036.validator(path, query, header, formData, body)
  let scheme = call_602036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602036.url(scheme.get, call_602036.host, call_602036.base,
                         call_602036.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602036, url, valid)

proc call*(call_602037: Call_PostDescribeEngineDefaultParameters_602021;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_602038 = newJObject()
  var formData_602039 = newJObject()
  add(formData_602039, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_602039, "Marker", newJString(Marker))
  add(query_602038, "Action", newJString(Action))
  add(formData_602039, "MaxRecords", newJInt(MaxRecords))
  add(query_602038, "Version", newJString(Version))
  result = call_602037.call(nil, query_602038, nil, formData_602039, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_602021(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_602022, base: "/",
    url: url_PostDescribeEngineDefaultParameters_602023,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_602003 = ref object of OpenApiRestCall_600437
proc url_GetDescribeEngineDefaultParameters_602005(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_602004(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  section = newJObject()
  var valid_602006 = query.getOrDefault("MaxRecords")
  valid_602006 = validateParameter(valid_602006, JInt, required = false, default = nil)
  if valid_602006 != nil:
    section.add "MaxRecords", valid_602006
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602007 = query.getOrDefault("Action")
  valid_602007 = validateParameter(valid_602007, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_602007 != nil:
    section.add "Action", valid_602007
  var valid_602008 = query.getOrDefault("Marker")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "Marker", valid_602008
  var valid_602009 = query.getOrDefault("Version")
  valid_602009 = validateParameter(valid_602009, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602009 != nil:
    section.add "Version", valid_602009
  var valid_602010 = query.getOrDefault("CacheParameterGroupFamily")
  valid_602010 = validateParameter(valid_602010, JString, required = true,
                                 default = nil)
  if valid_602010 != nil:
    section.add "CacheParameterGroupFamily", valid_602010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602011 = header.getOrDefault("X-Amz-Date")
  valid_602011 = validateParameter(valid_602011, JString, required = false,
                                 default = nil)
  if valid_602011 != nil:
    section.add "X-Amz-Date", valid_602011
  var valid_602012 = header.getOrDefault("X-Amz-Security-Token")
  valid_602012 = validateParameter(valid_602012, JString, required = false,
                                 default = nil)
  if valid_602012 != nil:
    section.add "X-Amz-Security-Token", valid_602012
  var valid_602013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602013 = validateParameter(valid_602013, JString, required = false,
                                 default = nil)
  if valid_602013 != nil:
    section.add "X-Amz-Content-Sha256", valid_602013
  var valid_602014 = header.getOrDefault("X-Amz-Algorithm")
  valid_602014 = validateParameter(valid_602014, JString, required = false,
                                 default = nil)
  if valid_602014 != nil:
    section.add "X-Amz-Algorithm", valid_602014
  var valid_602015 = header.getOrDefault("X-Amz-Signature")
  valid_602015 = validateParameter(valid_602015, JString, required = false,
                                 default = nil)
  if valid_602015 != nil:
    section.add "X-Amz-Signature", valid_602015
  var valid_602016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602016 = validateParameter(valid_602016, JString, required = false,
                                 default = nil)
  if valid_602016 != nil:
    section.add "X-Amz-SignedHeaders", valid_602016
  var valid_602017 = header.getOrDefault("X-Amz-Credential")
  valid_602017 = validateParameter(valid_602017, JString, required = false,
                                 default = nil)
  if valid_602017 != nil:
    section.add "X-Amz-Credential", valid_602017
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602018: Call_GetDescribeEngineDefaultParameters_602003;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_602018.validator(path, query, header, formData, body)
  let scheme = call_602018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602018.url(scheme.get, call_602018.host, call_602018.base,
                         call_602018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602018, url, valid)

proc call*(call_602019: Call_GetDescribeEngineDefaultParameters_602003;
          CacheParameterGroupFamily: string; MaxRecords: int = 0;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  var query_602020 = newJObject()
  add(query_602020, "MaxRecords", newJInt(MaxRecords))
  add(query_602020, "Action", newJString(Action))
  add(query_602020, "Marker", newJString(Marker))
  add(query_602020, "Version", newJString(Version))
  add(query_602020, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_602019.call(nil, query_602020, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_602003(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_602004, base: "/",
    url: url_GetDescribeEngineDefaultParameters_602005,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_602062 = ref object of OpenApiRestCall_600437
proc url_PostDescribeEvents_602064(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_602063(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602065 = query.getOrDefault("Action")
  valid_602065 = validateParameter(valid_602065, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_602065 != nil:
    section.add "Action", valid_602065
  var valid_602066 = query.getOrDefault("Version")
  valid_602066 = validateParameter(valid_602066, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602066 != nil:
    section.add "Version", valid_602066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602067 = header.getOrDefault("X-Amz-Date")
  valid_602067 = validateParameter(valid_602067, JString, required = false,
                                 default = nil)
  if valid_602067 != nil:
    section.add "X-Amz-Date", valid_602067
  var valid_602068 = header.getOrDefault("X-Amz-Security-Token")
  valid_602068 = validateParameter(valid_602068, JString, required = false,
                                 default = nil)
  if valid_602068 != nil:
    section.add "X-Amz-Security-Token", valid_602068
  var valid_602069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602069 = validateParameter(valid_602069, JString, required = false,
                                 default = nil)
  if valid_602069 != nil:
    section.add "X-Amz-Content-Sha256", valid_602069
  var valid_602070 = header.getOrDefault("X-Amz-Algorithm")
  valid_602070 = validateParameter(valid_602070, JString, required = false,
                                 default = nil)
  if valid_602070 != nil:
    section.add "X-Amz-Algorithm", valid_602070
  var valid_602071 = header.getOrDefault("X-Amz-Signature")
  valid_602071 = validateParameter(valid_602071, JString, required = false,
                                 default = nil)
  if valid_602071 != nil:
    section.add "X-Amz-Signature", valid_602071
  var valid_602072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602072 = validateParameter(valid_602072, JString, required = false,
                                 default = nil)
  if valid_602072 != nil:
    section.add "X-Amz-SignedHeaders", valid_602072
  var valid_602073 = header.getOrDefault("X-Amz-Credential")
  valid_602073 = validateParameter(valid_602073, JString, required = false,
                                 default = nil)
  if valid_602073 != nil:
    section.add "X-Amz-Credential", valid_602073
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_602074 = formData.getOrDefault("SourceIdentifier")
  valid_602074 = validateParameter(valid_602074, JString, required = false,
                                 default = nil)
  if valid_602074 != nil:
    section.add "SourceIdentifier", valid_602074
  var valid_602075 = formData.getOrDefault("Marker")
  valid_602075 = validateParameter(valid_602075, JString, required = false,
                                 default = nil)
  if valid_602075 != nil:
    section.add "Marker", valid_602075
  var valid_602076 = formData.getOrDefault("StartTime")
  valid_602076 = validateParameter(valid_602076, JString, required = false,
                                 default = nil)
  if valid_602076 != nil:
    section.add "StartTime", valid_602076
  var valid_602077 = formData.getOrDefault("Duration")
  valid_602077 = validateParameter(valid_602077, JInt, required = false, default = nil)
  if valid_602077 != nil:
    section.add "Duration", valid_602077
  var valid_602078 = formData.getOrDefault("EndTime")
  valid_602078 = validateParameter(valid_602078, JString, required = false,
                                 default = nil)
  if valid_602078 != nil:
    section.add "EndTime", valid_602078
  var valid_602079 = formData.getOrDefault("MaxRecords")
  valid_602079 = validateParameter(valid_602079, JInt, required = false, default = nil)
  if valid_602079 != nil:
    section.add "MaxRecords", valid_602079
  var valid_602080 = formData.getOrDefault("SourceType")
  valid_602080 = validateParameter(valid_602080, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_602080 != nil:
    section.add "SourceType", valid_602080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602081: Call_PostDescribeEvents_602062; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_602081.validator(path, query, header, formData, body)
  let scheme = call_602081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602081.url(scheme.get, call_602081.host, call_602081.base,
                         call_602081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602081, url, valid)

proc call*(call_602082: Call_PostDescribeEvents_602062;
          SourceIdentifier: string = ""; Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; EndTime: string = "";
          MaxRecords: int = 0; Version: string = "2015-02-02";
          SourceType: string = "cache-cluster"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_602083 = newJObject()
  var formData_602084 = newJObject()
  add(formData_602084, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_602084, "Marker", newJString(Marker))
  add(formData_602084, "StartTime", newJString(StartTime))
  add(query_602083, "Action", newJString(Action))
  add(formData_602084, "Duration", newJInt(Duration))
  add(formData_602084, "EndTime", newJString(EndTime))
  add(formData_602084, "MaxRecords", newJInt(MaxRecords))
  add(query_602083, "Version", newJString(Version))
  add(formData_602084, "SourceType", newJString(SourceType))
  result = call_602082.call(nil, query_602083, nil, formData_602084, nil)

var postDescribeEvents* = Call_PostDescribeEvents_602062(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_602063, base: "/",
    url: url_PostDescribeEvents_602064, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_602040 = ref object of OpenApiRestCall_600437
proc url_GetDescribeEvents_602042(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_602041(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602043 = query.getOrDefault("SourceType")
  valid_602043 = validateParameter(valid_602043, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_602043 != nil:
    section.add "SourceType", valid_602043
  var valid_602044 = query.getOrDefault("MaxRecords")
  valid_602044 = validateParameter(valid_602044, JInt, required = false, default = nil)
  if valid_602044 != nil:
    section.add "MaxRecords", valid_602044
  var valid_602045 = query.getOrDefault("StartTime")
  valid_602045 = validateParameter(valid_602045, JString, required = false,
                                 default = nil)
  if valid_602045 != nil:
    section.add "StartTime", valid_602045
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602046 = query.getOrDefault("Action")
  valid_602046 = validateParameter(valid_602046, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_602046 != nil:
    section.add "Action", valid_602046
  var valid_602047 = query.getOrDefault("SourceIdentifier")
  valid_602047 = validateParameter(valid_602047, JString, required = false,
                                 default = nil)
  if valid_602047 != nil:
    section.add "SourceIdentifier", valid_602047
  var valid_602048 = query.getOrDefault("Marker")
  valid_602048 = validateParameter(valid_602048, JString, required = false,
                                 default = nil)
  if valid_602048 != nil:
    section.add "Marker", valid_602048
  var valid_602049 = query.getOrDefault("Duration")
  valid_602049 = validateParameter(valid_602049, JInt, required = false, default = nil)
  if valid_602049 != nil:
    section.add "Duration", valid_602049
  var valid_602050 = query.getOrDefault("EndTime")
  valid_602050 = validateParameter(valid_602050, JString, required = false,
                                 default = nil)
  if valid_602050 != nil:
    section.add "EndTime", valid_602050
  var valid_602051 = query.getOrDefault("Version")
  valid_602051 = validateParameter(valid_602051, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602051 != nil:
    section.add "Version", valid_602051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602052 = header.getOrDefault("X-Amz-Date")
  valid_602052 = validateParameter(valid_602052, JString, required = false,
                                 default = nil)
  if valid_602052 != nil:
    section.add "X-Amz-Date", valid_602052
  var valid_602053 = header.getOrDefault("X-Amz-Security-Token")
  valid_602053 = validateParameter(valid_602053, JString, required = false,
                                 default = nil)
  if valid_602053 != nil:
    section.add "X-Amz-Security-Token", valid_602053
  var valid_602054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602054 = validateParameter(valid_602054, JString, required = false,
                                 default = nil)
  if valid_602054 != nil:
    section.add "X-Amz-Content-Sha256", valid_602054
  var valid_602055 = header.getOrDefault("X-Amz-Algorithm")
  valid_602055 = validateParameter(valid_602055, JString, required = false,
                                 default = nil)
  if valid_602055 != nil:
    section.add "X-Amz-Algorithm", valid_602055
  var valid_602056 = header.getOrDefault("X-Amz-Signature")
  valid_602056 = validateParameter(valid_602056, JString, required = false,
                                 default = nil)
  if valid_602056 != nil:
    section.add "X-Amz-Signature", valid_602056
  var valid_602057 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602057 = validateParameter(valid_602057, JString, required = false,
                                 default = nil)
  if valid_602057 != nil:
    section.add "X-Amz-SignedHeaders", valid_602057
  var valid_602058 = header.getOrDefault("X-Amz-Credential")
  valid_602058 = validateParameter(valid_602058, JString, required = false,
                                 default = nil)
  if valid_602058 != nil:
    section.add "X-Amz-Credential", valid_602058
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602059: Call_GetDescribeEvents_602040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_602059.validator(path, query, header, formData, body)
  let scheme = call_602059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602059.url(scheme.get, call_602059.host, call_602059.base,
                         call_602059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602059, url, valid)

proc call*(call_602060: Call_GetDescribeEvents_602040;
          SourceType: string = "cache-cluster"; MaxRecords: int = 0;
          StartTime: string = ""; Action: string = "DescribeEvents";
          SourceIdentifier: string = ""; Marker: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  var query_602061 = newJObject()
  add(query_602061, "SourceType", newJString(SourceType))
  add(query_602061, "MaxRecords", newJInt(MaxRecords))
  add(query_602061, "StartTime", newJString(StartTime))
  add(query_602061, "Action", newJString(Action))
  add(query_602061, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_602061, "Marker", newJString(Marker))
  add(query_602061, "Duration", newJInt(Duration))
  add(query_602061, "EndTime", newJString(EndTime))
  add(query_602061, "Version", newJString(Version))
  result = call_602060.call(nil, query_602061, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_602040(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_602041,
    base: "/", url: url_GetDescribeEvents_602042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_602103 = ref object of OpenApiRestCall_600437
proc url_PostDescribeReplicationGroups_602105(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReplicationGroups_602104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602106 = query.getOrDefault("Action")
  valid_602106 = validateParameter(valid_602106, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_602106 != nil:
    section.add "Action", valid_602106
  var valid_602107 = query.getOrDefault("Version")
  valid_602107 = validateParameter(valid_602107, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602107 != nil:
    section.add "Version", valid_602107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602108 = header.getOrDefault("X-Amz-Date")
  valid_602108 = validateParameter(valid_602108, JString, required = false,
                                 default = nil)
  if valid_602108 != nil:
    section.add "X-Amz-Date", valid_602108
  var valid_602109 = header.getOrDefault("X-Amz-Security-Token")
  valid_602109 = validateParameter(valid_602109, JString, required = false,
                                 default = nil)
  if valid_602109 != nil:
    section.add "X-Amz-Security-Token", valid_602109
  var valid_602110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602110 = validateParameter(valid_602110, JString, required = false,
                                 default = nil)
  if valid_602110 != nil:
    section.add "X-Amz-Content-Sha256", valid_602110
  var valid_602111 = header.getOrDefault("X-Amz-Algorithm")
  valid_602111 = validateParameter(valid_602111, JString, required = false,
                                 default = nil)
  if valid_602111 != nil:
    section.add "X-Amz-Algorithm", valid_602111
  var valid_602112 = header.getOrDefault("X-Amz-Signature")
  valid_602112 = validateParameter(valid_602112, JString, required = false,
                                 default = nil)
  if valid_602112 != nil:
    section.add "X-Amz-Signature", valid_602112
  var valid_602113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602113 = validateParameter(valid_602113, JString, required = false,
                                 default = nil)
  if valid_602113 != nil:
    section.add "X-Amz-SignedHeaders", valid_602113
  var valid_602114 = header.getOrDefault("X-Amz-Credential")
  valid_602114 = validateParameter(valid_602114, JString, required = false,
                                 default = nil)
  if valid_602114 != nil:
    section.add "X-Amz-Credential", valid_602114
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602115 = formData.getOrDefault("ReplicationGroupId")
  valid_602115 = validateParameter(valid_602115, JString, required = false,
                                 default = nil)
  if valid_602115 != nil:
    section.add "ReplicationGroupId", valid_602115
  var valid_602116 = formData.getOrDefault("Marker")
  valid_602116 = validateParameter(valid_602116, JString, required = false,
                                 default = nil)
  if valid_602116 != nil:
    section.add "Marker", valid_602116
  var valid_602117 = formData.getOrDefault("MaxRecords")
  valid_602117 = validateParameter(valid_602117, JInt, required = false, default = nil)
  if valid_602117 != nil:
    section.add "MaxRecords", valid_602117
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602118: Call_PostDescribeReplicationGroups_602103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602118.validator(path, query, header, formData, body)
  let scheme = call_602118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602118.url(scheme.get, call_602118.host, call_602118.base,
                         call_602118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602118, url, valid)

proc call*(call_602119: Call_PostDescribeReplicationGroups_602103;
          ReplicationGroupId: string = ""; Marker: string = "";
          Action: string = "DescribeReplicationGroups"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_602120 = newJObject()
  var formData_602121 = newJObject()
  add(formData_602121, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_602121, "Marker", newJString(Marker))
  add(query_602120, "Action", newJString(Action))
  add(formData_602121, "MaxRecords", newJInt(MaxRecords))
  add(query_602120, "Version", newJString(Version))
  result = call_602119.call(nil, query_602120, nil, formData_602121, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_602103(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_602104, base: "/",
    url: url_PostDescribeReplicationGroups_602105,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_602085 = ref object of OpenApiRestCall_600437
proc url_GetDescribeReplicationGroups_602087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReplicationGroups_602086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602088 = query.getOrDefault("MaxRecords")
  valid_602088 = validateParameter(valid_602088, JInt, required = false, default = nil)
  if valid_602088 != nil:
    section.add "MaxRecords", valid_602088
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602089 = query.getOrDefault("Action")
  valid_602089 = validateParameter(valid_602089, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_602089 != nil:
    section.add "Action", valid_602089
  var valid_602090 = query.getOrDefault("Marker")
  valid_602090 = validateParameter(valid_602090, JString, required = false,
                                 default = nil)
  if valid_602090 != nil:
    section.add "Marker", valid_602090
  var valid_602091 = query.getOrDefault("ReplicationGroupId")
  valid_602091 = validateParameter(valid_602091, JString, required = false,
                                 default = nil)
  if valid_602091 != nil:
    section.add "ReplicationGroupId", valid_602091
  var valid_602092 = query.getOrDefault("Version")
  valid_602092 = validateParameter(valid_602092, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602092 != nil:
    section.add "Version", valid_602092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602093 = header.getOrDefault("X-Amz-Date")
  valid_602093 = validateParameter(valid_602093, JString, required = false,
                                 default = nil)
  if valid_602093 != nil:
    section.add "X-Amz-Date", valid_602093
  var valid_602094 = header.getOrDefault("X-Amz-Security-Token")
  valid_602094 = validateParameter(valid_602094, JString, required = false,
                                 default = nil)
  if valid_602094 != nil:
    section.add "X-Amz-Security-Token", valid_602094
  var valid_602095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602095 = validateParameter(valid_602095, JString, required = false,
                                 default = nil)
  if valid_602095 != nil:
    section.add "X-Amz-Content-Sha256", valid_602095
  var valid_602096 = header.getOrDefault("X-Amz-Algorithm")
  valid_602096 = validateParameter(valid_602096, JString, required = false,
                                 default = nil)
  if valid_602096 != nil:
    section.add "X-Amz-Algorithm", valid_602096
  var valid_602097 = header.getOrDefault("X-Amz-Signature")
  valid_602097 = validateParameter(valid_602097, JString, required = false,
                                 default = nil)
  if valid_602097 != nil:
    section.add "X-Amz-Signature", valid_602097
  var valid_602098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602098 = validateParameter(valid_602098, JString, required = false,
                                 default = nil)
  if valid_602098 != nil:
    section.add "X-Amz-SignedHeaders", valid_602098
  var valid_602099 = header.getOrDefault("X-Amz-Credential")
  valid_602099 = validateParameter(valid_602099, JString, required = false,
                                 default = nil)
  if valid_602099 != nil:
    section.add "X-Amz-Credential", valid_602099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602100: Call_GetDescribeReplicationGroups_602085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602100.validator(path, query, header, formData, body)
  let scheme = call_602100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602100.url(scheme.get, call_602100.host, call_602100.base,
                         call_602100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602100, url, valid)

proc call*(call_602101: Call_GetDescribeReplicationGroups_602085;
          MaxRecords: int = 0; Action: string = "DescribeReplicationGroups";
          Marker: string = ""; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  var query_602102 = newJObject()
  add(query_602102, "MaxRecords", newJInt(MaxRecords))
  add(query_602102, "Action", newJString(Action))
  add(query_602102, "Marker", newJString(Marker))
  add(query_602102, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602102, "Version", newJString(Version))
  result = call_602101.call(nil, query_602102, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_602085(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_602086, base: "/",
    url: url_GetDescribeReplicationGroups_602087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_602145 = ref object of OpenApiRestCall_600437
proc url_PostDescribeReservedCacheNodes_602147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodes_602146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602148 = query.getOrDefault("Action")
  valid_602148 = validateParameter(valid_602148, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_602148 != nil:
    section.add "Action", valid_602148
  var valid_602149 = query.getOrDefault("Version")
  valid_602149 = validateParameter(valid_602149, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602149 != nil:
    section.add "Version", valid_602149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602150 = header.getOrDefault("X-Amz-Date")
  valid_602150 = validateParameter(valid_602150, JString, required = false,
                                 default = nil)
  if valid_602150 != nil:
    section.add "X-Amz-Date", valid_602150
  var valid_602151 = header.getOrDefault("X-Amz-Security-Token")
  valid_602151 = validateParameter(valid_602151, JString, required = false,
                                 default = nil)
  if valid_602151 != nil:
    section.add "X-Amz-Security-Token", valid_602151
  var valid_602152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602152 = validateParameter(valid_602152, JString, required = false,
                                 default = nil)
  if valid_602152 != nil:
    section.add "X-Amz-Content-Sha256", valid_602152
  var valid_602153 = header.getOrDefault("X-Amz-Algorithm")
  valid_602153 = validateParameter(valid_602153, JString, required = false,
                                 default = nil)
  if valid_602153 != nil:
    section.add "X-Amz-Algorithm", valid_602153
  var valid_602154 = header.getOrDefault("X-Amz-Signature")
  valid_602154 = validateParameter(valid_602154, JString, required = false,
                                 default = nil)
  if valid_602154 != nil:
    section.add "X-Amz-Signature", valid_602154
  var valid_602155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602155 = validateParameter(valid_602155, JString, required = false,
                                 default = nil)
  if valid_602155 != nil:
    section.add "X-Amz-SignedHeaders", valid_602155
  var valid_602156 = header.getOrDefault("X-Amz-Credential")
  valid_602156 = validateParameter(valid_602156, JString, required = false,
                                 default = nil)
  if valid_602156 != nil:
    section.add "X-Amz-Credential", valid_602156
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602157 = formData.getOrDefault("CacheNodeType")
  valid_602157 = validateParameter(valid_602157, JString, required = false,
                                 default = nil)
  if valid_602157 != nil:
    section.add "CacheNodeType", valid_602157
  var valid_602158 = formData.getOrDefault("OfferingType")
  valid_602158 = validateParameter(valid_602158, JString, required = false,
                                 default = nil)
  if valid_602158 != nil:
    section.add "OfferingType", valid_602158
  var valid_602159 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602159 = validateParameter(valid_602159, JString, required = false,
                                 default = nil)
  if valid_602159 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602159
  var valid_602160 = formData.getOrDefault("ReservedCacheNodeId")
  valid_602160 = validateParameter(valid_602160, JString, required = false,
                                 default = nil)
  if valid_602160 != nil:
    section.add "ReservedCacheNodeId", valid_602160
  var valid_602161 = formData.getOrDefault("Marker")
  valid_602161 = validateParameter(valid_602161, JString, required = false,
                                 default = nil)
  if valid_602161 != nil:
    section.add "Marker", valid_602161
  var valid_602162 = formData.getOrDefault("Duration")
  valid_602162 = validateParameter(valid_602162, JString, required = false,
                                 default = nil)
  if valid_602162 != nil:
    section.add "Duration", valid_602162
  var valid_602163 = formData.getOrDefault("ProductDescription")
  valid_602163 = validateParameter(valid_602163, JString, required = false,
                                 default = nil)
  if valid_602163 != nil:
    section.add "ProductDescription", valid_602163
  var valid_602164 = formData.getOrDefault("MaxRecords")
  valid_602164 = validateParameter(valid_602164, JInt, required = false, default = nil)
  if valid_602164 != nil:
    section.add "MaxRecords", valid_602164
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602165: Call_PostDescribeReservedCacheNodes_602145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_602165.validator(path, query, header, formData, body)
  let scheme = call_602165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602165.url(scheme.get, call_602165.host, call_602165.base,
                         call_602165.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602165, url, valid)

proc call*(call_602166: Call_PostDescribeReservedCacheNodes_602145;
          CacheNodeType: string = ""; OfferingType: string = "";
          ReservedCacheNodesOfferingId: string = "";
          ReservedCacheNodeId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ProductDescription: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_602167 = newJObject()
  var formData_602168 = newJObject()
  add(formData_602168, "CacheNodeType", newJString(CacheNodeType))
  add(formData_602168, "OfferingType", newJString(OfferingType))
  add(formData_602168, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_602168, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_602168, "Marker", newJString(Marker))
  add(query_602167, "Action", newJString(Action))
  add(formData_602168, "Duration", newJString(Duration))
  add(formData_602168, "ProductDescription", newJString(ProductDescription))
  add(formData_602168, "MaxRecords", newJInt(MaxRecords))
  add(query_602167, "Version", newJString(Version))
  result = call_602166.call(nil, query_602167, nil, formData_602168, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_602145(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_602146, base: "/",
    url: url_PostDescribeReservedCacheNodes_602147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_602122 = ref object of OpenApiRestCall_600437
proc url_GetDescribeReservedCacheNodes_602124(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodes_602123(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602125 = query.getOrDefault("ProductDescription")
  valid_602125 = validateParameter(valid_602125, JString, required = false,
                                 default = nil)
  if valid_602125 != nil:
    section.add "ProductDescription", valid_602125
  var valid_602126 = query.getOrDefault("CacheNodeType")
  valid_602126 = validateParameter(valid_602126, JString, required = false,
                                 default = nil)
  if valid_602126 != nil:
    section.add "CacheNodeType", valid_602126
  var valid_602127 = query.getOrDefault("MaxRecords")
  valid_602127 = validateParameter(valid_602127, JInt, required = false, default = nil)
  if valid_602127 != nil:
    section.add "MaxRecords", valid_602127
  var valid_602128 = query.getOrDefault("OfferingType")
  valid_602128 = validateParameter(valid_602128, JString, required = false,
                                 default = nil)
  if valid_602128 != nil:
    section.add "OfferingType", valid_602128
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602129 = query.getOrDefault("Action")
  valid_602129 = validateParameter(valid_602129, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_602129 != nil:
    section.add "Action", valid_602129
  var valid_602130 = query.getOrDefault("Marker")
  valid_602130 = validateParameter(valid_602130, JString, required = false,
                                 default = nil)
  if valid_602130 != nil:
    section.add "Marker", valid_602130
  var valid_602131 = query.getOrDefault("Duration")
  valid_602131 = validateParameter(valid_602131, JString, required = false,
                                 default = nil)
  if valid_602131 != nil:
    section.add "Duration", valid_602131
  var valid_602132 = query.getOrDefault("ReservedCacheNodeId")
  valid_602132 = validateParameter(valid_602132, JString, required = false,
                                 default = nil)
  if valid_602132 != nil:
    section.add "ReservedCacheNodeId", valid_602132
  var valid_602133 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602133 = validateParameter(valid_602133, JString, required = false,
                                 default = nil)
  if valid_602133 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602133
  var valid_602134 = query.getOrDefault("Version")
  valid_602134 = validateParameter(valid_602134, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602134 != nil:
    section.add "Version", valid_602134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602135 = header.getOrDefault("X-Amz-Date")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-Date", valid_602135
  var valid_602136 = header.getOrDefault("X-Amz-Security-Token")
  valid_602136 = validateParameter(valid_602136, JString, required = false,
                                 default = nil)
  if valid_602136 != nil:
    section.add "X-Amz-Security-Token", valid_602136
  var valid_602137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602137 = validateParameter(valid_602137, JString, required = false,
                                 default = nil)
  if valid_602137 != nil:
    section.add "X-Amz-Content-Sha256", valid_602137
  var valid_602138 = header.getOrDefault("X-Amz-Algorithm")
  valid_602138 = validateParameter(valid_602138, JString, required = false,
                                 default = nil)
  if valid_602138 != nil:
    section.add "X-Amz-Algorithm", valid_602138
  var valid_602139 = header.getOrDefault("X-Amz-Signature")
  valid_602139 = validateParameter(valid_602139, JString, required = false,
                                 default = nil)
  if valid_602139 != nil:
    section.add "X-Amz-Signature", valid_602139
  var valid_602140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602140 = validateParameter(valid_602140, JString, required = false,
                                 default = nil)
  if valid_602140 != nil:
    section.add "X-Amz-SignedHeaders", valid_602140
  var valid_602141 = header.getOrDefault("X-Amz-Credential")
  valid_602141 = validateParameter(valid_602141, JString, required = false,
                                 default = nil)
  if valid_602141 != nil:
    section.add "X-Amz-Credential", valid_602141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602142: Call_GetDescribeReservedCacheNodes_602122; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_602142.validator(path, query, header, formData, body)
  let scheme = call_602142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602142.url(scheme.get, call_602142.host, call_602142.base,
                         call_602142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602142, url, valid)

proc call*(call_602143: Call_GetDescribeReservedCacheNodes_602122;
          ProductDescription: string = ""; CacheNodeType: string = "";
          MaxRecords: int = 0; OfferingType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Marker: string = "";
          Duration: string = ""; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_602144 = newJObject()
  add(query_602144, "ProductDescription", newJString(ProductDescription))
  add(query_602144, "CacheNodeType", newJString(CacheNodeType))
  add(query_602144, "MaxRecords", newJInt(MaxRecords))
  add(query_602144, "OfferingType", newJString(OfferingType))
  add(query_602144, "Action", newJString(Action))
  add(query_602144, "Marker", newJString(Marker))
  add(query_602144, "Duration", newJString(Duration))
  add(query_602144, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_602144, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_602144, "Version", newJString(Version))
  result = call_602143.call(nil, query_602144, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_602122(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_602123, base: "/",
    url: url_GetDescribeReservedCacheNodes_602124,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_602191 = ref object of OpenApiRestCall_600437
proc url_PostDescribeReservedCacheNodesOfferings_602193(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_602192(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602194 = query.getOrDefault("Action")
  valid_602194 = validateParameter(valid_602194, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_602194 != nil:
    section.add "Action", valid_602194
  var valid_602195 = query.getOrDefault("Version")
  valid_602195 = validateParameter(valid_602195, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602195 != nil:
    section.add "Version", valid_602195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602196 = header.getOrDefault("X-Amz-Date")
  valid_602196 = validateParameter(valid_602196, JString, required = false,
                                 default = nil)
  if valid_602196 != nil:
    section.add "X-Amz-Date", valid_602196
  var valid_602197 = header.getOrDefault("X-Amz-Security-Token")
  valid_602197 = validateParameter(valid_602197, JString, required = false,
                                 default = nil)
  if valid_602197 != nil:
    section.add "X-Amz-Security-Token", valid_602197
  var valid_602198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602198 = validateParameter(valid_602198, JString, required = false,
                                 default = nil)
  if valid_602198 != nil:
    section.add "X-Amz-Content-Sha256", valid_602198
  var valid_602199 = header.getOrDefault("X-Amz-Algorithm")
  valid_602199 = validateParameter(valid_602199, JString, required = false,
                                 default = nil)
  if valid_602199 != nil:
    section.add "X-Amz-Algorithm", valid_602199
  var valid_602200 = header.getOrDefault("X-Amz-Signature")
  valid_602200 = validateParameter(valid_602200, JString, required = false,
                                 default = nil)
  if valid_602200 != nil:
    section.add "X-Amz-Signature", valid_602200
  var valid_602201 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602201 = validateParameter(valid_602201, JString, required = false,
                                 default = nil)
  if valid_602201 != nil:
    section.add "X-Amz-SignedHeaders", valid_602201
  var valid_602202 = header.getOrDefault("X-Amz-Credential")
  valid_602202 = validateParameter(valid_602202, JString, required = false,
                                 default = nil)
  if valid_602202 != nil:
    section.add "X-Amz-Credential", valid_602202
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602203 = formData.getOrDefault("CacheNodeType")
  valid_602203 = validateParameter(valid_602203, JString, required = false,
                                 default = nil)
  if valid_602203 != nil:
    section.add "CacheNodeType", valid_602203
  var valid_602204 = formData.getOrDefault("OfferingType")
  valid_602204 = validateParameter(valid_602204, JString, required = false,
                                 default = nil)
  if valid_602204 != nil:
    section.add "OfferingType", valid_602204
  var valid_602205 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602205 = validateParameter(valid_602205, JString, required = false,
                                 default = nil)
  if valid_602205 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602205
  var valid_602206 = formData.getOrDefault("Marker")
  valid_602206 = validateParameter(valid_602206, JString, required = false,
                                 default = nil)
  if valid_602206 != nil:
    section.add "Marker", valid_602206
  var valid_602207 = formData.getOrDefault("Duration")
  valid_602207 = validateParameter(valid_602207, JString, required = false,
                                 default = nil)
  if valid_602207 != nil:
    section.add "Duration", valid_602207
  var valid_602208 = formData.getOrDefault("ProductDescription")
  valid_602208 = validateParameter(valid_602208, JString, required = false,
                                 default = nil)
  if valid_602208 != nil:
    section.add "ProductDescription", valid_602208
  var valid_602209 = formData.getOrDefault("MaxRecords")
  valid_602209 = validateParameter(valid_602209, JInt, required = false, default = nil)
  if valid_602209 != nil:
    section.add "MaxRecords", valid_602209
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602210: Call_PostDescribeReservedCacheNodesOfferings_602191;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_602210.validator(path, query, header, formData, body)
  let scheme = call_602210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602210.url(scheme.get, call_602210.host, call_602210.base,
                         call_602210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602210, url, valid)

proc call*(call_602211: Call_PostDescribeReservedCacheNodesOfferings_602191;
          CacheNodeType: string = ""; OfferingType: string = "";
          ReservedCacheNodesOfferingId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; ProductDescription: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_602212 = newJObject()
  var formData_602213 = newJObject()
  add(formData_602213, "CacheNodeType", newJString(CacheNodeType))
  add(formData_602213, "OfferingType", newJString(OfferingType))
  add(formData_602213, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_602213, "Marker", newJString(Marker))
  add(query_602212, "Action", newJString(Action))
  add(formData_602213, "Duration", newJString(Duration))
  add(formData_602213, "ProductDescription", newJString(ProductDescription))
  add(formData_602213, "MaxRecords", newJInt(MaxRecords))
  add(query_602212, "Version", newJString(Version))
  result = call_602211.call(nil, query_602212, nil, formData_602213, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_602191(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_602192, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_602193,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_602169 = ref object of OpenApiRestCall_600437
proc url_GetDescribeReservedCacheNodesOfferings_602171(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_602170(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602172 = query.getOrDefault("ProductDescription")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "ProductDescription", valid_602172
  var valid_602173 = query.getOrDefault("CacheNodeType")
  valid_602173 = validateParameter(valid_602173, JString, required = false,
                                 default = nil)
  if valid_602173 != nil:
    section.add "CacheNodeType", valid_602173
  var valid_602174 = query.getOrDefault("MaxRecords")
  valid_602174 = validateParameter(valid_602174, JInt, required = false, default = nil)
  if valid_602174 != nil:
    section.add "MaxRecords", valid_602174
  var valid_602175 = query.getOrDefault("OfferingType")
  valid_602175 = validateParameter(valid_602175, JString, required = false,
                                 default = nil)
  if valid_602175 != nil:
    section.add "OfferingType", valid_602175
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602176 = query.getOrDefault("Action")
  valid_602176 = validateParameter(valid_602176, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_602176 != nil:
    section.add "Action", valid_602176
  var valid_602177 = query.getOrDefault("Marker")
  valid_602177 = validateParameter(valid_602177, JString, required = false,
                                 default = nil)
  if valid_602177 != nil:
    section.add "Marker", valid_602177
  var valid_602178 = query.getOrDefault("Duration")
  valid_602178 = validateParameter(valid_602178, JString, required = false,
                                 default = nil)
  if valid_602178 != nil:
    section.add "Duration", valid_602178
  var valid_602179 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602179 = validateParameter(valid_602179, JString, required = false,
                                 default = nil)
  if valid_602179 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602179
  var valid_602180 = query.getOrDefault("Version")
  valid_602180 = validateParameter(valid_602180, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602180 != nil:
    section.add "Version", valid_602180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602181 = header.getOrDefault("X-Amz-Date")
  valid_602181 = validateParameter(valid_602181, JString, required = false,
                                 default = nil)
  if valid_602181 != nil:
    section.add "X-Amz-Date", valid_602181
  var valid_602182 = header.getOrDefault("X-Amz-Security-Token")
  valid_602182 = validateParameter(valid_602182, JString, required = false,
                                 default = nil)
  if valid_602182 != nil:
    section.add "X-Amz-Security-Token", valid_602182
  var valid_602183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602183 = validateParameter(valid_602183, JString, required = false,
                                 default = nil)
  if valid_602183 != nil:
    section.add "X-Amz-Content-Sha256", valid_602183
  var valid_602184 = header.getOrDefault("X-Amz-Algorithm")
  valid_602184 = validateParameter(valid_602184, JString, required = false,
                                 default = nil)
  if valid_602184 != nil:
    section.add "X-Amz-Algorithm", valid_602184
  var valid_602185 = header.getOrDefault("X-Amz-Signature")
  valid_602185 = validateParameter(valid_602185, JString, required = false,
                                 default = nil)
  if valid_602185 != nil:
    section.add "X-Amz-Signature", valid_602185
  var valid_602186 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602186 = validateParameter(valid_602186, JString, required = false,
                                 default = nil)
  if valid_602186 != nil:
    section.add "X-Amz-SignedHeaders", valid_602186
  var valid_602187 = header.getOrDefault("X-Amz-Credential")
  valid_602187 = validateParameter(valid_602187, JString, required = false,
                                 default = nil)
  if valid_602187 != nil:
    section.add "X-Amz-Credential", valid_602187
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602188: Call_GetDescribeReservedCacheNodesOfferings_602169;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_602188.validator(path, query, header, formData, body)
  let scheme = call_602188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602188.url(scheme.get, call_602188.host, call_602188.base,
                         call_602188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602188, url, valid)

proc call*(call_602189: Call_GetDescribeReservedCacheNodesOfferings_602169;
          ProductDescription: string = ""; CacheNodeType: string = "";
          MaxRecords: int = 0; OfferingType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Marker: string = ""; Duration: string = "";
          ReservedCacheNodesOfferingId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_602190 = newJObject()
  add(query_602190, "ProductDescription", newJString(ProductDescription))
  add(query_602190, "CacheNodeType", newJString(CacheNodeType))
  add(query_602190, "MaxRecords", newJInt(MaxRecords))
  add(query_602190, "OfferingType", newJString(OfferingType))
  add(query_602190, "Action", newJString(Action))
  add(query_602190, "Marker", newJString(Marker))
  add(query_602190, "Duration", newJString(Duration))
  add(query_602190, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_602190, "Version", newJString(Version))
  result = call_602189.call(nil, query_602190, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_602169(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_602170, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_602171,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_602233 = ref object of OpenApiRestCall_600437
proc url_PostDescribeServiceUpdates_602235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeServiceUpdates_602234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602236 = query.getOrDefault("Action")
  valid_602236 = validateParameter(valid_602236, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_602236 != nil:
    section.add "Action", valid_602236
  var valid_602237 = query.getOrDefault("Version")
  valid_602237 = validateParameter(valid_602237, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602237 != nil:
    section.add "Version", valid_602237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602238 = header.getOrDefault("X-Amz-Date")
  valid_602238 = validateParameter(valid_602238, JString, required = false,
                                 default = nil)
  if valid_602238 != nil:
    section.add "X-Amz-Date", valid_602238
  var valid_602239 = header.getOrDefault("X-Amz-Security-Token")
  valid_602239 = validateParameter(valid_602239, JString, required = false,
                                 default = nil)
  if valid_602239 != nil:
    section.add "X-Amz-Security-Token", valid_602239
  var valid_602240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602240 = validateParameter(valid_602240, JString, required = false,
                                 default = nil)
  if valid_602240 != nil:
    section.add "X-Amz-Content-Sha256", valid_602240
  var valid_602241 = header.getOrDefault("X-Amz-Algorithm")
  valid_602241 = validateParameter(valid_602241, JString, required = false,
                                 default = nil)
  if valid_602241 != nil:
    section.add "X-Amz-Algorithm", valid_602241
  var valid_602242 = header.getOrDefault("X-Amz-Signature")
  valid_602242 = validateParameter(valid_602242, JString, required = false,
                                 default = nil)
  if valid_602242 != nil:
    section.add "X-Amz-Signature", valid_602242
  var valid_602243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602243 = validateParameter(valid_602243, JString, required = false,
                                 default = nil)
  if valid_602243 != nil:
    section.add "X-Amz-SignedHeaders", valid_602243
  var valid_602244 = header.getOrDefault("X-Amz-Credential")
  valid_602244 = validateParameter(valid_602244, JString, required = false,
                                 default = nil)
  if valid_602244 != nil:
    section.add "X-Amz-Credential", valid_602244
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_602245 = formData.getOrDefault("ServiceUpdateStatus")
  valid_602245 = validateParameter(valid_602245, JArray, required = false,
                                 default = nil)
  if valid_602245 != nil:
    section.add "ServiceUpdateStatus", valid_602245
  var valid_602246 = formData.getOrDefault("Marker")
  valid_602246 = validateParameter(valid_602246, JString, required = false,
                                 default = nil)
  if valid_602246 != nil:
    section.add "Marker", valid_602246
  var valid_602247 = formData.getOrDefault("MaxRecords")
  valid_602247 = validateParameter(valid_602247, JInt, required = false, default = nil)
  if valid_602247 != nil:
    section.add "MaxRecords", valid_602247
  var valid_602248 = formData.getOrDefault("ServiceUpdateName")
  valid_602248 = validateParameter(valid_602248, JString, required = false,
                                 default = nil)
  if valid_602248 != nil:
    section.add "ServiceUpdateName", valid_602248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602249: Call_PostDescribeServiceUpdates_602233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_602249.validator(path, query, header, formData, body)
  let scheme = call_602249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602249.url(scheme.get, call_602249.host, call_602249.base,
                         call_602249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602249, url, valid)

proc call*(call_602250: Call_PostDescribeServiceUpdates_602233;
          ServiceUpdateStatus: JsonNode = nil; Marker: string = "";
          Action: string = "DescribeServiceUpdates"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; ServiceUpdateName: string = ""): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_602251 = newJObject()
  var formData_602252 = newJObject()
  if ServiceUpdateStatus != nil:
    formData_602252.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(formData_602252, "Marker", newJString(Marker))
  add(query_602251, "Action", newJString(Action))
  add(formData_602252, "MaxRecords", newJInt(MaxRecords))
  add(query_602251, "Version", newJString(Version))
  add(formData_602252, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_602250.call(nil, query_602251, nil, formData_602252, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_602233(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_602234, base: "/",
    url: url_PostDescribeServiceUpdates_602235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_602214 = ref object of OpenApiRestCall_600437
proc url_GetDescribeServiceUpdates_602216(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeServiceUpdates_602215(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_602217 = query.getOrDefault("MaxRecords")
  valid_602217 = validateParameter(valid_602217, JInt, required = false, default = nil)
  if valid_602217 != nil:
    section.add "MaxRecords", valid_602217
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602218 = query.getOrDefault("Action")
  valid_602218 = validateParameter(valid_602218, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_602218 != nil:
    section.add "Action", valid_602218
  var valid_602219 = query.getOrDefault("Marker")
  valid_602219 = validateParameter(valid_602219, JString, required = false,
                                 default = nil)
  if valid_602219 != nil:
    section.add "Marker", valid_602219
  var valid_602220 = query.getOrDefault("ServiceUpdateStatus")
  valid_602220 = validateParameter(valid_602220, JArray, required = false,
                                 default = nil)
  if valid_602220 != nil:
    section.add "ServiceUpdateStatus", valid_602220
  var valid_602221 = query.getOrDefault("Version")
  valid_602221 = validateParameter(valid_602221, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602221 != nil:
    section.add "Version", valid_602221
  var valid_602222 = query.getOrDefault("ServiceUpdateName")
  valid_602222 = validateParameter(valid_602222, JString, required = false,
                                 default = nil)
  if valid_602222 != nil:
    section.add "ServiceUpdateName", valid_602222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602223 = header.getOrDefault("X-Amz-Date")
  valid_602223 = validateParameter(valid_602223, JString, required = false,
                                 default = nil)
  if valid_602223 != nil:
    section.add "X-Amz-Date", valid_602223
  var valid_602224 = header.getOrDefault("X-Amz-Security-Token")
  valid_602224 = validateParameter(valid_602224, JString, required = false,
                                 default = nil)
  if valid_602224 != nil:
    section.add "X-Amz-Security-Token", valid_602224
  var valid_602225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602225 = validateParameter(valid_602225, JString, required = false,
                                 default = nil)
  if valid_602225 != nil:
    section.add "X-Amz-Content-Sha256", valid_602225
  var valid_602226 = header.getOrDefault("X-Amz-Algorithm")
  valid_602226 = validateParameter(valid_602226, JString, required = false,
                                 default = nil)
  if valid_602226 != nil:
    section.add "X-Amz-Algorithm", valid_602226
  var valid_602227 = header.getOrDefault("X-Amz-Signature")
  valid_602227 = validateParameter(valid_602227, JString, required = false,
                                 default = nil)
  if valid_602227 != nil:
    section.add "X-Amz-Signature", valid_602227
  var valid_602228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602228 = validateParameter(valid_602228, JString, required = false,
                                 default = nil)
  if valid_602228 != nil:
    section.add "X-Amz-SignedHeaders", valid_602228
  var valid_602229 = header.getOrDefault("X-Amz-Credential")
  valid_602229 = validateParameter(valid_602229, JString, required = false,
                                 default = nil)
  if valid_602229 != nil:
    section.add "X-Amz-Credential", valid_602229
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602230: Call_GetDescribeServiceUpdates_602214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_602230.validator(path, query, header, formData, body)
  let scheme = call_602230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602230.url(scheme.get, call_602230.host, call_602230.base,
                         call_602230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602230, url, valid)

proc call*(call_602231: Call_GetDescribeServiceUpdates_602214; MaxRecords: int = 0;
          Action: string = "DescribeServiceUpdates"; Marker: string = "";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          ServiceUpdateName: string = ""): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_602232 = newJObject()
  add(query_602232, "MaxRecords", newJInt(MaxRecords))
  add(query_602232, "Action", newJString(Action))
  add(query_602232, "Marker", newJString(Marker))
  if ServiceUpdateStatus != nil:
    query_602232.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_602232, "Version", newJString(Version))
  add(query_602232, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_602231.call(nil, query_602232, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_602214(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_602215, base: "/",
    url: url_GetDescribeServiceUpdates_602216,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_602275 = ref object of OpenApiRestCall_600437
proc url_PostDescribeSnapshots_602277(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSnapshots_602276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602278 = query.getOrDefault("Action")
  valid_602278 = validateParameter(valid_602278, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_602278 != nil:
    section.add "Action", valid_602278
  var valid_602279 = query.getOrDefault("Version")
  valid_602279 = validateParameter(valid_602279, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602279 != nil:
    section.add "Version", valid_602279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602280 = header.getOrDefault("X-Amz-Date")
  valid_602280 = validateParameter(valid_602280, JString, required = false,
                                 default = nil)
  if valid_602280 != nil:
    section.add "X-Amz-Date", valid_602280
  var valid_602281 = header.getOrDefault("X-Amz-Security-Token")
  valid_602281 = validateParameter(valid_602281, JString, required = false,
                                 default = nil)
  if valid_602281 != nil:
    section.add "X-Amz-Security-Token", valid_602281
  var valid_602282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602282 = validateParameter(valid_602282, JString, required = false,
                                 default = nil)
  if valid_602282 != nil:
    section.add "X-Amz-Content-Sha256", valid_602282
  var valid_602283 = header.getOrDefault("X-Amz-Algorithm")
  valid_602283 = validateParameter(valid_602283, JString, required = false,
                                 default = nil)
  if valid_602283 != nil:
    section.add "X-Amz-Algorithm", valid_602283
  var valid_602284 = header.getOrDefault("X-Amz-Signature")
  valid_602284 = validateParameter(valid_602284, JString, required = false,
                                 default = nil)
  if valid_602284 != nil:
    section.add "X-Amz-Signature", valid_602284
  var valid_602285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602285 = validateParameter(valid_602285, JString, required = false,
                                 default = nil)
  if valid_602285 != nil:
    section.add "X-Amz-SignedHeaders", valid_602285
  var valid_602286 = header.getOrDefault("X-Amz-Credential")
  valid_602286 = validateParameter(valid_602286, JString, required = false,
                                 default = nil)
  if valid_602286 != nil:
    section.add "X-Amz-Credential", valid_602286
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  section = newJObject()
  var valid_602287 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_602287 = validateParameter(valid_602287, JBool, required = false, default = nil)
  if valid_602287 != nil:
    section.add "ShowNodeGroupConfig", valid_602287
  var valid_602288 = formData.getOrDefault("ReplicationGroupId")
  valid_602288 = validateParameter(valid_602288, JString, required = false,
                                 default = nil)
  if valid_602288 != nil:
    section.add "ReplicationGroupId", valid_602288
  var valid_602289 = formData.getOrDefault("Marker")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "Marker", valid_602289
  var valid_602290 = formData.getOrDefault("MaxRecords")
  valid_602290 = validateParameter(valid_602290, JInt, required = false, default = nil)
  if valid_602290 != nil:
    section.add "MaxRecords", valid_602290
  var valid_602291 = formData.getOrDefault("SnapshotName")
  valid_602291 = validateParameter(valid_602291, JString, required = false,
                                 default = nil)
  if valid_602291 != nil:
    section.add "SnapshotName", valid_602291
  var valid_602292 = formData.getOrDefault("CacheClusterId")
  valid_602292 = validateParameter(valid_602292, JString, required = false,
                                 default = nil)
  if valid_602292 != nil:
    section.add "CacheClusterId", valid_602292
  var valid_602293 = formData.getOrDefault("SnapshotSource")
  valid_602293 = validateParameter(valid_602293, JString, required = false,
                                 default = nil)
  if valid_602293 != nil:
    section.add "SnapshotSource", valid_602293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602294: Call_PostDescribeSnapshots_602275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602294.validator(path, query, header, formData, body)
  let scheme = call_602294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602294.url(scheme.get, call_602294.host, call_602294.base,
                         call_602294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602294, url, valid)

proc call*(call_602295: Call_PostDescribeSnapshots_602275;
          ShowNodeGroupConfig: bool = false; ReplicationGroupId: string = "";
          Marker: string = ""; Action: string = "DescribeSnapshots";
          MaxRecords: int = 0; Version: string = "2015-02-02";
          SnapshotName: string = ""; CacheClusterId: string = "";
          SnapshotSource: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  var query_602296 = newJObject()
  var formData_602297 = newJObject()
  add(formData_602297, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(formData_602297, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_602297, "Marker", newJString(Marker))
  add(query_602296, "Action", newJString(Action))
  add(formData_602297, "MaxRecords", newJInt(MaxRecords))
  add(query_602296, "Version", newJString(Version))
  add(formData_602297, "SnapshotName", newJString(SnapshotName))
  add(formData_602297, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602297, "SnapshotSource", newJString(SnapshotSource))
  result = call_602295.call(nil, query_602296, nil, formData_602297, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_602275(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_602276, base: "/",
    url: url_PostDescribeSnapshots_602277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_602253 = ref object of OpenApiRestCall_600437
proc url_GetDescribeSnapshots_602255(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSnapshots_602254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  section = newJObject()
  var valid_602256 = query.getOrDefault("CacheClusterId")
  valid_602256 = validateParameter(valid_602256, JString, required = false,
                                 default = nil)
  if valid_602256 != nil:
    section.add "CacheClusterId", valid_602256
  var valid_602257 = query.getOrDefault("MaxRecords")
  valid_602257 = validateParameter(valid_602257, JInt, required = false, default = nil)
  if valid_602257 != nil:
    section.add "MaxRecords", valid_602257
  var valid_602258 = query.getOrDefault("ShowNodeGroupConfig")
  valid_602258 = validateParameter(valid_602258, JBool, required = false, default = nil)
  if valid_602258 != nil:
    section.add "ShowNodeGroupConfig", valid_602258
  var valid_602259 = query.getOrDefault("SnapshotName")
  valid_602259 = validateParameter(valid_602259, JString, required = false,
                                 default = nil)
  if valid_602259 != nil:
    section.add "SnapshotName", valid_602259
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602260 = query.getOrDefault("Action")
  valid_602260 = validateParameter(valid_602260, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_602260 != nil:
    section.add "Action", valid_602260
  var valid_602261 = query.getOrDefault("Marker")
  valid_602261 = validateParameter(valid_602261, JString, required = false,
                                 default = nil)
  if valid_602261 != nil:
    section.add "Marker", valid_602261
  var valid_602262 = query.getOrDefault("ReplicationGroupId")
  valid_602262 = validateParameter(valid_602262, JString, required = false,
                                 default = nil)
  if valid_602262 != nil:
    section.add "ReplicationGroupId", valid_602262
  var valid_602263 = query.getOrDefault("Version")
  valid_602263 = validateParameter(valid_602263, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602263 != nil:
    section.add "Version", valid_602263
  var valid_602264 = query.getOrDefault("SnapshotSource")
  valid_602264 = validateParameter(valid_602264, JString, required = false,
                                 default = nil)
  if valid_602264 != nil:
    section.add "SnapshotSource", valid_602264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602265 = header.getOrDefault("X-Amz-Date")
  valid_602265 = validateParameter(valid_602265, JString, required = false,
                                 default = nil)
  if valid_602265 != nil:
    section.add "X-Amz-Date", valid_602265
  var valid_602266 = header.getOrDefault("X-Amz-Security-Token")
  valid_602266 = validateParameter(valid_602266, JString, required = false,
                                 default = nil)
  if valid_602266 != nil:
    section.add "X-Amz-Security-Token", valid_602266
  var valid_602267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602267 = validateParameter(valid_602267, JString, required = false,
                                 default = nil)
  if valid_602267 != nil:
    section.add "X-Amz-Content-Sha256", valid_602267
  var valid_602268 = header.getOrDefault("X-Amz-Algorithm")
  valid_602268 = validateParameter(valid_602268, JString, required = false,
                                 default = nil)
  if valid_602268 != nil:
    section.add "X-Amz-Algorithm", valid_602268
  var valid_602269 = header.getOrDefault("X-Amz-Signature")
  valid_602269 = validateParameter(valid_602269, JString, required = false,
                                 default = nil)
  if valid_602269 != nil:
    section.add "X-Amz-Signature", valid_602269
  var valid_602270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602270 = validateParameter(valid_602270, JString, required = false,
                                 default = nil)
  if valid_602270 != nil:
    section.add "X-Amz-SignedHeaders", valid_602270
  var valid_602271 = header.getOrDefault("X-Amz-Credential")
  valid_602271 = validateParameter(valid_602271, JString, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "X-Amz-Credential", valid_602271
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602272: Call_GetDescribeSnapshots_602253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602272.validator(path, query, header, formData, body)
  let scheme = call_602272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602272.url(scheme.get, call_602272.host, call_602272.base,
                         call_602272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602272, url, valid)

proc call*(call_602273: Call_GetDescribeSnapshots_602253;
          CacheClusterId: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false; SnapshotName: string = "";
          Action: string = "DescribeSnapshots"; Marker: string = "";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotSource: string = ""): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  var query_602274 = newJObject()
  add(query_602274, "CacheClusterId", newJString(CacheClusterId))
  add(query_602274, "MaxRecords", newJInt(MaxRecords))
  add(query_602274, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_602274, "SnapshotName", newJString(SnapshotName))
  add(query_602274, "Action", newJString(Action))
  add(query_602274, "Marker", newJString(Marker))
  add(query_602274, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602274, "Version", newJString(Version))
  add(query_602274, "SnapshotSource", newJString(SnapshotSource))
  result = call_602273.call(nil, query_602274, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_602253(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_602254, base: "/",
    url: url_GetDescribeSnapshots_602255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_602322 = ref object of OpenApiRestCall_600437
proc url_PostDescribeUpdateActions_602324(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeUpdateActions_602323(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602325 = query.getOrDefault("Action")
  valid_602325 = validateParameter(valid_602325, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_602325 != nil:
    section.add "Action", valid_602325
  var valid_602326 = query.getOrDefault("Version")
  valid_602326 = validateParameter(valid_602326, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602326 != nil:
    section.add "Version", valid_602326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602327 = header.getOrDefault("X-Amz-Date")
  valid_602327 = validateParameter(valid_602327, JString, required = false,
                                 default = nil)
  if valid_602327 != nil:
    section.add "X-Amz-Date", valid_602327
  var valid_602328 = header.getOrDefault("X-Amz-Security-Token")
  valid_602328 = validateParameter(valid_602328, JString, required = false,
                                 default = nil)
  if valid_602328 != nil:
    section.add "X-Amz-Security-Token", valid_602328
  var valid_602329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602329 = validateParameter(valid_602329, JString, required = false,
                                 default = nil)
  if valid_602329 != nil:
    section.add "X-Amz-Content-Sha256", valid_602329
  var valid_602330 = header.getOrDefault("X-Amz-Algorithm")
  valid_602330 = validateParameter(valid_602330, JString, required = false,
                                 default = nil)
  if valid_602330 != nil:
    section.add "X-Amz-Algorithm", valid_602330
  var valid_602331 = header.getOrDefault("X-Amz-Signature")
  valid_602331 = validateParameter(valid_602331, JString, required = false,
                                 default = nil)
  if valid_602331 != nil:
    section.add "X-Amz-Signature", valid_602331
  var valid_602332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602332 = validateParameter(valid_602332, JString, required = false,
                                 default = nil)
  if valid_602332 != nil:
    section.add "X-Amz-SignedHeaders", valid_602332
  var valid_602333 = header.getOrDefault("X-Amz-Credential")
  valid_602333 = validateParameter(valid_602333, JString, required = false,
                                 default = nil)
  if valid_602333 != nil:
    section.add "X-Amz-Credential", valid_602333
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  section = newJObject()
  var valid_602334 = formData.getOrDefault("ReplicationGroupIds")
  valid_602334 = validateParameter(valid_602334, JArray, required = false,
                                 default = nil)
  if valid_602334 != nil:
    section.add "ReplicationGroupIds", valid_602334
  var valid_602335 = formData.getOrDefault("ServiceUpdateStatus")
  valid_602335 = validateParameter(valid_602335, JArray, required = false,
                                 default = nil)
  if valid_602335 != nil:
    section.add "ServiceUpdateStatus", valid_602335
  var valid_602336 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_602336 = validateParameter(valid_602336, JBool, required = false, default = nil)
  if valid_602336 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_602336
  var valid_602337 = formData.getOrDefault("UpdateActionStatus")
  valid_602337 = validateParameter(valid_602337, JArray, required = false,
                                 default = nil)
  if valid_602337 != nil:
    section.add "UpdateActionStatus", valid_602337
  var valid_602338 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_602338 = validateParameter(valid_602338, JString, required = false,
                                 default = nil)
  if valid_602338 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_602338
  var valid_602339 = formData.getOrDefault("Marker")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "Marker", valid_602339
  var valid_602340 = formData.getOrDefault("MaxRecords")
  valid_602340 = validateParameter(valid_602340, JInt, required = false, default = nil)
  if valid_602340 != nil:
    section.add "MaxRecords", valid_602340
  var valid_602341 = formData.getOrDefault("ServiceUpdateName")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "ServiceUpdateName", valid_602341
  var valid_602342 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_602342 = validateParameter(valid_602342, JString, required = false,
                                 default = nil)
  if valid_602342 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_602342
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602343: Call_PostDescribeUpdateActions_602322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_602343.validator(path, query, header, formData, body)
  let scheme = call_602343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602343.url(scheme.get, call_602343.host, call_602343.base,
                         call_602343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602343, url, valid)

proc call*(call_602344: Call_PostDescribeUpdateActions_602322;
          ReplicationGroupIds: JsonNode = nil; ServiceUpdateStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          ServiceUpdateTimeRangeEndTime: string = ""; Marker: string = "";
          Action: string = "DescribeUpdateActions"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; ServiceUpdateName: string = "";
          ServiceUpdateTimeRangeStartTime: string = ""): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  var query_602345 = newJObject()
  var formData_602346 = newJObject()
  if ReplicationGroupIds != nil:
    formData_602346.add "ReplicationGroupIds", ReplicationGroupIds
  if ServiceUpdateStatus != nil:
    formData_602346.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(formData_602346, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    formData_602346.add "UpdateActionStatus", UpdateActionStatus
  add(formData_602346, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_602346, "Marker", newJString(Marker))
  add(query_602345, "Action", newJString(Action))
  add(formData_602346, "MaxRecords", newJInt(MaxRecords))
  add(query_602345, "Version", newJString(Version))
  add(formData_602346, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_602346, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  result = call_602344.call(nil, query_602345, nil, formData_602346, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_602322(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_602323, base: "/",
    url: url_PostDescribeUpdateActions_602324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_602298 = ref object of OpenApiRestCall_600437
proc url_GetDescribeUpdateActions_602300(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeUpdateActions_602299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_602301 = query.getOrDefault("MaxRecords")
  valid_602301 = validateParameter(valid_602301, JInt, required = false, default = nil)
  if valid_602301 != nil:
    section.add "MaxRecords", valid_602301
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602302 = query.getOrDefault("Action")
  valid_602302 = validateParameter(valid_602302, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_602302 != nil:
    section.add "Action", valid_602302
  var valid_602303 = query.getOrDefault("Marker")
  valid_602303 = validateParameter(valid_602303, JString, required = false,
                                 default = nil)
  if valid_602303 != nil:
    section.add "Marker", valid_602303
  var valid_602304 = query.getOrDefault("UpdateActionStatus")
  valid_602304 = validateParameter(valid_602304, JArray, required = false,
                                 default = nil)
  if valid_602304 != nil:
    section.add "UpdateActionStatus", valid_602304
  var valid_602305 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_602305 = validateParameter(valid_602305, JBool, required = false, default = nil)
  if valid_602305 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_602305
  var valid_602306 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_602306 = validateParameter(valid_602306, JString, required = false,
                                 default = nil)
  if valid_602306 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_602306
  var valid_602307 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_602307 = validateParameter(valid_602307, JString, required = false,
                                 default = nil)
  if valid_602307 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_602307
  var valid_602308 = query.getOrDefault("ReplicationGroupIds")
  valid_602308 = validateParameter(valid_602308, JArray, required = false,
                                 default = nil)
  if valid_602308 != nil:
    section.add "ReplicationGroupIds", valid_602308
  var valid_602309 = query.getOrDefault("ServiceUpdateStatus")
  valid_602309 = validateParameter(valid_602309, JArray, required = false,
                                 default = nil)
  if valid_602309 != nil:
    section.add "ServiceUpdateStatus", valid_602309
  var valid_602310 = query.getOrDefault("Version")
  valid_602310 = validateParameter(valid_602310, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602310 != nil:
    section.add "Version", valid_602310
  var valid_602311 = query.getOrDefault("ServiceUpdateName")
  valid_602311 = validateParameter(valid_602311, JString, required = false,
                                 default = nil)
  if valid_602311 != nil:
    section.add "ServiceUpdateName", valid_602311
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602312 = header.getOrDefault("X-Amz-Date")
  valid_602312 = validateParameter(valid_602312, JString, required = false,
                                 default = nil)
  if valid_602312 != nil:
    section.add "X-Amz-Date", valid_602312
  var valid_602313 = header.getOrDefault("X-Amz-Security-Token")
  valid_602313 = validateParameter(valid_602313, JString, required = false,
                                 default = nil)
  if valid_602313 != nil:
    section.add "X-Amz-Security-Token", valid_602313
  var valid_602314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602314 = validateParameter(valid_602314, JString, required = false,
                                 default = nil)
  if valid_602314 != nil:
    section.add "X-Amz-Content-Sha256", valid_602314
  var valid_602315 = header.getOrDefault("X-Amz-Algorithm")
  valid_602315 = validateParameter(valid_602315, JString, required = false,
                                 default = nil)
  if valid_602315 != nil:
    section.add "X-Amz-Algorithm", valid_602315
  var valid_602316 = header.getOrDefault("X-Amz-Signature")
  valid_602316 = validateParameter(valid_602316, JString, required = false,
                                 default = nil)
  if valid_602316 != nil:
    section.add "X-Amz-Signature", valid_602316
  var valid_602317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602317 = validateParameter(valid_602317, JString, required = false,
                                 default = nil)
  if valid_602317 != nil:
    section.add "X-Amz-SignedHeaders", valid_602317
  var valid_602318 = header.getOrDefault("X-Amz-Credential")
  valid_602318 = validateParameter(valid_602318, JString, required = false,
                                 default = nil)
  if valid_602318 != nil:
    section.add "X-Amz-Credential", valid_602318
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602319: Call_GetDescribeUpdateActions_602298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_602319.validator(path, query, header, formData, body)
  let scheme = call_602319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602319.url(scheme.get, call_602319.host, call_602319.base,
                         call_602319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602319, url, valid)

proc call*(call_602320: Call_GetDescribeUpdateActions_602298; MaxRecords: int = 0;
          Action: string = "DescribeUpdateActions"; Marker: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          ServiceUpdateTimeRangeStartTime: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ReplicationGroupIds: JsonNode = nil; ServiceUpdateStatus: JsonNode = nil;
          Version: string = "2015-02-02"; ServiceUpdateName: string = ""): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_602321 = newJObject()
  add(query_602321, "MaxRecords", newJInt(MaxRecords))
  add(query_602321, "Action", newJString(Action))
  add(query_602321, "Marker", newJString(Marker))
  if UpdateActionStatus != nil:
    query_602321.add "UpdateActionStatus", UpdateActionStatus
  add(query_602321, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_602321, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_602321, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  if ReplicationGroupIds != nil:
    query_602321.add "ReplicationGroupIds", ReplicationGroupIds
  if ServiceUpdateStatus != nil:
    query_602321.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_602321, "Version", newJString(Version))
  add(query_602321, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_602320.call(nil, query_602321, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_602298(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_602299, base: "/",
    url: url_GetDescribeUpdateActions_602300, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_602366 = ref object of OpenApiRestCall_600437
proc url_PostIncreaseReplicaCount_602368(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostIncreaseReplicaCount_602367(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602369 = query.getOrDefault("Action")
  valid_602369 = validateParameter(valid_602369, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_602369 != nil:
    section.add "Action", valid_602369
  var valid_602370 = query.getOrDefault("Version")
  valid_602370 = validateParameter(valid_602370, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602370 != nil:
    section.add "Version", valid_602370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602371 = header.getOrDefault("X-Amz-Date")
  valid_602371 = validateParameter(valid_602371, JString, required = false,
                                 default = nil)
  if valid_602371 != nil:
    section.add "X-Amz-Date", valid_602371
  var valid_602372 = header.getOrDefault("X-Amz-Security-Token")
  valid_602372 = validateParameter(valid_602372, JString, required = false,
                                 default = nil)
  if valid_602372 != nil:
    section.add "X-Amz-Security-Token", valid_602372
  var valid_602373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602373 = validateParameter(valid_602373, JString, required = false,
                                 default = nil)
  if valid_602373 != nil:
    section.add "X-Amz-Content-Sha256", valid_602373
  var valid_602374 = header.getOrDefault("X-Amz-Algorithm")
  valid_602374 = validateParameter(valid_602374, JString, required = false,
                                 default = nil)
  if valid_602374 != nil:
    section.add "X-Amz-Algorithm", valid_602374
  var valid_602375 = header.getOrDefault("X-Amz-Signature")
  valid_602375 = validateParameter(valid_602375, JString, required = false,
                                 default = nil)
  if valid_602375 != nil:
    section.add "X-Amz-Signature", valid_602375
  var valid_602376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602376 = validateParameter(valid_602376, JString, required = false,
                                 default = nil)
  if valid_602376 != nil:
    section.add "X-Amz-SignedHeaders", valid_602376
  var valid_602377 = header.getOrDefault("X-Amz-Credential")
  valid_602377 = validateParameter(valid_602377, JString, required = false,
                                 default = nil)
  if valid_602377 != nil:
    section.add "X-Amz-Credential", valid_602377
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_602378 = formData.getOrDefault("ApplyImmediately")
  valid_602378 = validateParameter(valid_602378, JBool, required = true, default = nil)
  if valid_602378 != nil:
    section.add "ApplyImmediately", valid_602378
  var valid_602379 = formData.getOrDefault("ReplicationGroupId")
  valid_602379 = validateParameter(valid_602379, JString, required = true,
                                 default = nil)
  if valid_602379 != nil:
    section.add "ReplicationGroupId", valid_602379
  var valid_602380 = formData.getOrDefault("NewReplicaCount")
  valid_602380 = validateParameter(valid_602380, JInt, required = false, default = nil)
  if valid_602380 != nil:
    section.add "NewReplicaCount", valid_602380
  var valid_602381 = formData.getOrDefault("ReplicaConfiguration")
  valid_602381 = validateParameter(valid_602381, JArray, required = false,
                                 default = nil)
  if valid_602381 != nil:
    section.add "ReplicaConfiguration", valid_602381
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602382: Call_PostIncreaseReplicaCount_602366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_602382.validator(path, query, header, formData, body)
  let scheme = call_602382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602382.url(scheme.get, call_602382.host, call_602382.base,
                         call_602382.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602382, url, valid)

proc call*(call_602383: Call_PostIncreaseReplicaCount_602366;
          ApplyImmediately: bool; ReplicationGroupId: string;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          ReplicaConfiguration: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Version: string (required)
  var query_602384 = newJObject()
  var formData_602385 = newJObject()
  add(formData_602385, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_602385, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602384, "Action", newJString(Action))
  add(formData_602385, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    formData_602385.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_602384, "Version", newJString(Version))
  result = call_602383.call(nil, query_602384, nil, formData_602385, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_602366(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_602367, base: "/",
    url: url_PostIncreaseReplicaCount_602368, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_602347 = ref object of OpenApiRestCall_600437
proc url_GetIncreaseReplicaCount_602349(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetIncreaseReplicaCount_602348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  section = newJObject()
  var valid_602350 = query.getOrDefault("ReplicaConfiguration")
  valid_602350 = validateParameter(valid_602350, JArray, required = false,
                                 default = nil)
  if valid_602350 != nil:
    section.add "ReplicaConfiguration", valid_602350
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602351 = query.getOrDefault("Action")
  valid_602351 = validateParameter(valid_602351, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_602351 != nil:
    section.add "Action", valid_602351
  var valid_602352 = query.getOrDefault("NewReplicaCount")
  valid_602352 = validateParameter(valid_602352, JInt, required = false, default = nil)
  if valid_602352 != nil:
    section.add "NewReplicaCount", valid_602352
  var valid_602353 = query.getOrDefault("ReplicationGroupId")
  valid_602353 = validateParameter(valid_602353, JString, required = true,
                                 default = nil)
  if valid_602353 != nil:
    section.add "ReplicationGroupId", valid_602353
  var valid_602354 = query.getOrDefault("Version")
  valid_602354 = validateParameter(valid_602354, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602354 != nil:
    section.add "Version", valid_602354
  var valid_602355 = query.getOrDefault("ApplyImmediately")
  valid_602355 = validateParameter(valid_602355, JBool, required = true, default = nil)
  if valid_602355 != nil:
    section.add "ApplyImmediately", valid_602355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602356 = header.getOrDefault("X-Amz-Date")
  valid_602356 = validateParameter(valid_602356, JString, required = false,
                                 default = nil)
  if valid_602356 != nil:
    section.add "X-Amz-Date", valid_602356
  var valid_602357 = header.getOrDefault("X-Amz-Security-Token")
  valid_602357 = validateParameter(valid_602357, JString, required = false,
                                 default = nil)
  if valid_602357 != nil:
    section.add "X-Amz-Security-Token", valid_602357
  var valid_602358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602358 = validateParameter(valid_602358, JString, required = false,
                                 default = nil)
  if valid_602358 != nil:
    section.add "X-Amz-Content-Sha256", valid_602358
  var valid_602359 = header.getOrDefault("X-Amz-Algorithm")
  valid_602359 = validateParameter(valid_602359, JString, required = false,
                                 default = nil)
  if valid_602359 != nil:
    section.add "X-Amz-Algorithm", valid_602359
  var valid_602360 = header.getOrDefault("X-Amz-Signature")
  valid_602360 = validateParameter(valid_602360, JString, required = false,
                                 default = nil)
  if valid_602360 != nil:
    section.add "X-Amz-Signature", valid_602360
  var valid_602361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602361 = validateParameter(valid_602361, JString, required = false,
                                 default = nil)
  if valid_602361 != nil:
    section.add "X-Amz-SignedHeaders", valid_602361
  var valid_602362 = header.getOrDefault("X-Amz-Credential")
  valid_602362 = validateParameter(valid_602362, JString, required = false,
                                 default = nil)
  if valid_602362 != nil:
    section.add "X-Amz-Credential", valid_602362
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602363: Call_GetIncreaseReplicaCount_602347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_602363.validator(path, query, header, formData, body)
  let scheme = call_602363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602363.url(scheme.get, call_602363.host, call_602363.base,
                         call_602363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602363, url, valid)

proc call*(call_602364: Call_GetIncreaseReplicaCount_602347;
          ReplicationGroupId: string; ApplyImmediately: bool;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  var query_602365 = newJObject()
  if ReplicaConfiguration != nil:
    query_602365.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_602365, "Action", newJString(Action))
  add(query_602365, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_602365, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602365, "Version", newJString(Version))
  add(query_602365, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_602364.call(nil, query_602365, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_602347(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_602348, base: "/",
    url: url_GetIncreaseReplicaCount_602349, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_602403 = ref object of OpenApiRestCall_600437
proc url_PostListAllowedNodeTypeModifications_602405(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_602404(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602406 = query.getOrDefault("Action")
  valid_602406 = validateParameter(valid_602406, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_602406 != nil:
    section.add "Action", valid_602406
  var valid_602407 = query.getOrDefault("Version")
  valid_602407 = validateParameter(valid_602407, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602407 != nil:
    section.add "Version", valid_602407
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602408 = header.getOrDefault("X-Amz-Date")
  valid_602408 = validateParameter(valid_602408, JString, required = false,
                                 default = nil)
  if valid_602408 != nil:
    section.add "X-Amz-Date", valid_602408
  var valid_602409 = header.getOrDefault("X-Amz-Security-Token")
  valid_602409 = validateParameter(valid_602409, JString, required = false,
                                 default = nil)
  if valid_602409 != nil:
    section.add "X-Amz-Security-Token", valid_602409
  var valid_602410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602410 = validateParameter(valid_602410, JString, required = false,
                                 default = nil)
  if valid_602410 != nil:
    section.add "X-Amz-Content-Sha256", valid_602410
  var valid_602411 = header.getOrDefault("X-Amz-Algorithm")
  valid_602411 = validateParameter(valid_602411, JString, required = false,
                                 default = nil)
  if valid_602411 != nil:
    section.add "X-Amz-Algorithm", valid_602411
  var valid_602412 = header.getOrDefault("X-Amz-Signature")
  valid_602412 = validateParameter(valid_602412, JString, required = false,
                                 default = nil)
  if valid_602412 != nil:
    section.add "X-Amz-Signature", valid_602412
  var valid_602413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602413 = validateParameter(valid_602413, JString, required = false,
                                 default = nil)
  if valid_602413 != nil:
    section.add "X-Amz-SignedHeaders", valid_602413
  var valid_602414 = header.getOrDefault("X-Amz-Credential")
  valid_602414 = validateParameter(valid_602414, JString, required = false,
                                 default = nil)
  if valid_602414 != nil:
    section.add "X-Amz-Credential", valid_602414
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_602415 = formData.getOrDefault("ReplicationGroupId")
  valid_602415 = validateParameter(valid_602415, JString, required = false,
                                 default = nil)
  if valid_602415 != nil:
    section.add "ReplicationGroupId", valid_602415
  var valid_602416 = formData.getOrDefault("CacheClusterId")
  valid_602416 = validateParameter(valid_602416, JString, required = false,
                                 default = nil)
  if valid_602416 != nil:
    section.add "CacheClusterId", valid_602416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602417: Call_PostListAllowedNodeTypeModifications_602403;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_602417.validator(path, query, header, formData, body)
  let scheme = call_602417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602417.url(scheme.get, call_602417.host, call_602417.base,
                         call_602417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602417, url, valid)

proc call*(call_602418: Call_PostListAllowedNodeTypeModifications_602403;
          ReplicationGroupId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; CacheClusterId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_602419 = newJObject()
  var formData_602420 = newJObject()
  add(formData_602420, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602419, "Action", newJString(Action))
  add(query_602419, "Version", newJString(Version))
  add(formData_602420, "CacheClusterId", newJString(CacheClusterId))
  result = call_602418.call(nil, query_602419, nil, formData_602420, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_602403(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_602404, base: "/",
    url: url_PostListAllowedNodeTypeModifications_602405,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_602386 = ref object of OpenApiRestCall_600437
proc url_GetListAllowedNodeTypeModifications_602388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_602387(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602389 = query.getOrDefault("CacheClusterId")
  valid_602389 = validateParameter(valid_602389, JString, required = false,
                                 default = nil)
  if valid_602389 != nil:
    section.add "CacheClusterId", valid_602389
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602390 = query.getOrDefault("Action")
  valid_602390 = validateParameter(valid_602390, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_602390 != nil:
    section.add "Action", valid_602390
  var valid_602391 = query.getOrDefault("ReplicationGroupId")
  valid_602391 = validateParameter(valid_602391, JString, required = false,
                                 default = nil)
  if valid_602391 != nil:
    section.add "ReplicationGroupId", valid_602391
  var valid_602392 = query.getOrDefault("Version")
  valid_602392 = validateParameter(valid_602392, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602392 != nil:
    section.add "Version", valid_602392
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602393 = header.getOrDefault("X-Amz-Date")
  valid_602393 = validateParameter(valid_602393, JString, required = false,
                                 default = nil)
  if valid_602393 != nil:
    section.add "X-Amz-Date", valid_602393
  var valid_602394 = header.getOrDefault("X-Amz-Security-Token")
  valid_602394 = validateParameter(valid_602394, JString, required = false,
                                 default = nil)
  if valid_602394 != nil:
    section.add "X-Amz-Security-Token", valid_602394
  var valid_602395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602395 = validateParameter(valid_602395, JString, required = false,
                                 default = nil)
  if valid_602395 != nil:
    section.add "X-Amz-Content-Sha256", valid_602395
  var valid_602396 = header.getOrDefault("X-Amz-Algorithm")
  valid_602396 = validateParameter(valid_602396, JString, required = false,
                                 default = nil)
  if valid_602396 != nil:
    section.add "X-Amz-Algorithm", valid_602396
  var valid_602397 = header.getOrDefault("X-Amz-Signature")
  valid_602397 = validateParameter(valid_602397, JString, required = false,
                                 default = nil)
  if valid_602397 != nil:
    section.add "X-Amz-Signature", valid_602397
  var valid_602398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602398 = validateParameter(valid_602398, JString, required = false,
                                 default = nil)
  if valid_602398 != nil:
    section.add "X-Amz-SignedHeaders", valid_602398
  var valid_602399 = header.getOrDefault("X-Amz-Credential")
  valid_602399 = validateParameter(valid_602399, JString, required = false,
                                 default = nil)
  if valid_602399 != nil:
    section.add "X-Amz-Credential", valid_602399
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602400: Call_GetListAllowedNodeTypeModifications_602386;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_602400.validator(path, query, header, formData, body)
  let scheme = call_602400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602400.url(scheme.get, call_602400.host, call_602400.base,
                         call_602400.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602400, url, valid)

proc call*(call_602401: Call_GetListAllowedNodeTypeModifications_602386;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_602402 = newJObject()
  add(query_602402, "CacheClusterId", newJString(CacheClusterId))
  add(query_602402, "Action", newJString(Action))
  add(query_602402, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602402, "Version", newJString(Version))
  result = call_602401.call(nil, query_602402, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_602386(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_602387, base: "/",
    url: url_GetListAllowedNodeTypeModifications_602388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_602437 = ref object of OpenApiRestCall_600437
proc url_PostListTagsForResource_602439(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_602438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602440 = query.getOrDefault("Action")
  valid_602440 = validateParameter(valid_602440, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_602440 != nil:
    section.add "Action", valid_602440
  var valid_602441 = query.getOrDefault("Version")
  valid_602441 = validateParameter(valid_602441, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602441 != nil:
    section.add "Version", valid_602441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602442 = header.getOrDefault("X-Amz-Date")
  valid_602442 = validateParameter(valid_602442, JString, required = false,
                                 default = nil)
  if valid_602442 != nil:
    section.add "X-Amz-Date", valid_602442
  var valid_602443 = header.getOrDefault("X-Amz-Security-Token")
  valid_602443 = validateParameter(valid_602443, JString, required = false,
                                 default = nil)
  if valid_602443 != nil:
    section.add "X-Amz-Security-Token", valid_602443
  var valid_602444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602444 = validateParameter(valid_602444, JString, required = false,
                                 default = nil)
  if valid_602444 != nil:
    section.add "X-Amz-Content-Sha256", valid_602444
  var valid_602445 = header.getOrDefault("X-Amz-Algorithm")
  valid_602445 = validateParameter(valid_602445, JString, required = false,
                                 default = nil)
  if valid_602445 != nil:
    section.add "X-Amz-Algorithm", valid_602445
  var valid_602446 = header.getOrDefault("X-Amz-Signature")
  valid_602446 = validateParameter(valid_602446, JString, required = false,
                                 default = nil)
  if valid_602446 != nil:
    section.add "X-Amz-Signature", valid_602446
  var valid_602447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602447 = validateParameter(valid_602447, JString, required = false,
                                 default = nil)
  if valid_602447 != nil:
    section.add "X-Amz-SignedHeaders", valid_602447
  var valid_602448 = header.getOrDefault("X-Amz-Credential")
  valid_602448 = validateParameter(valid_602448, JString, required = false,
                                 default = nil)
  if valid_602448 != nil:
    section.add "X-Amz-Credential", valid_602448
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_602449 = formData.getOrDefault("ResourceName")
  valid_602449 = validateParameter(valid_602449, JString, required = true,
                                 default = nil)
  if valid_602449 != nil:
    section.add "ResourceName", valid_602449
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602450: Call_PostListTagsForResource_602437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_602450.validator(path, query, header, formData, body)
  let scheme = call_602450.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602450.url(scheme.get, call_602450.host, call_602450.base,
                         call_602450.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602450, url, valid)

proc call*(call_602451: Call_PostListTagsForResource_602437; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_602452 = newJObject()
  var formData_602453 = newJObject()
  add(query_602452, "Action", newJString(Action))
  add(formData_602453, "ResourceName", newJString(ResourceName))
  add(query_602452, "Version", newJString(Version))
  result = call_602451.call(nil, query_602452, nil, formData_602453, nil)

var postListTagsForResource* = Call_PostListTagsForResource_602437(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_602438, base: "/",
    url: url_PostListTagsForResource_602439, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_602421 = ref object of OpenApiRestCall_600437
proc url_GetListTagsForResource_602423(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_602422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_602424 = query.getOrDefault("ResourceName")
  valid_602424 = validateParameter(valid_602424, JString, required = true,
                                 default = nil)
  if valid_602424 != nil:
    section.add "ResourceName", valid_602424
  var valid_602425 = query.getOrDefault("Action")
  valid_602425 = validateParameter(valid_602425, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_602425 != nil:
    section.add "Action", valid_602425
  var valid_602426 = query.getOrDefault("Version")
  valid_602426 = validateParameter(valid_602426, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602426 != nil:
    section.add "Version", valid_602426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602427 = header.getOrDefault("X-Amz-Date")
  valid_602427 = validateParameter(valid_602427, JString, required = false,
                                 default = nil)
  if valid_602427 != nil:
    section.add "X-Amz-Date", valid_602427
  var valid_602428 = header.getOrDefault("X-Amz-Security-Token")
  valid_602428 = validateParameter(valid_602428, JString, required = false,
                                 default = nil)
  if valid_602428 != nil:
    section.add "X-Amz-Security-Token", valid_602428
  var valid_602429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602429 = validateParameter(valid_602429, JString, required = false,
                                 default = nil)
  if valid_602429 != nil:
    section.add "X-Amz-Content-Sha256", valid_602429
  var valid_602430 = header.getOrDefault("X-Amz-Algorithm")
  valid_602430 = validateParameter(valid_602430, JString, required = false,
                                 default = nil)
  if valid_602430 != nil:
    section.add "X-Amz-Algorithm", valid_602430
  var valid_602431 = header.getOrDefault("X-Amz-Signature")
  valid_602431 = validateParameter(valid_602431, JString, required = false,
                                 default = nil)
  if valid_602431 != nil:
    section.add "X-Amz-Signature", valid_602431
  var valid_602432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602432 = validateParameter(valid_602432, JString, required = false,
                                 default = nil)
  if valid_602432 != nil:
    section.add "X-Amz-SignedHeaders", valid_602432
  var valid_602433 = header.getOrDefault("X-Amz-Credential")
  valid_602433 = validateParameter(valid_602433, JString, required = false,
                                 default = nil)
  if valid_602433 != nil:
    section.add "X-Amz-Credential", valid_602433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602434: Call_GetListTagsForResource_602421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_602434.validator(path, query, header, formData, body)
  let scheme = call_602434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602434.url(scheme.get, call_602434.host, call_602434.base,
                         call_602434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602434, url, valid)

proc call*(call_602435: Call_GetListTagsForResource_602421; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602436 = newJObject()
  add(query_602436, "ResourceName", newJString(ResourceName))
  add(query_602436, "Action", newJString(Action))
  add(query_602436, "Version", newJString(Version))
  result = call_602435.call(nil, query_602436, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_602421(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_602422, base: "/",
    url: url_GetListTagsForResource_602423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_602486 = ref object of OpenApiRestCall_600437
proc url_PostModifyCacheCluster_602488(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheCluster_602487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602489 = query.getOrDefault("Action")
  valid_602489 = validateParameter(valid_602489, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_602489 != nil:
    section.add "Action", valid_602489
  var valid_602490 = query.getOrDefault("Version")
  valid_602490 = validateParameter(valid_602490, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602490 != nil:
    section.add "Version", valid_602490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602491 = header.getOrDefault("X-Amz-Date")
  valid_602491 = validateParameter(valid_602491, JString, required = false,
                                 default = nil)
  if valid_602491 != nil:
    section.add "X-Amz-Date", valid_602491
  var valid_602492 = header.getOrDefault("X-Amz-Security-Token")
  valid_602492 = validateParameter(valid_602492, JString, required = false,
                                 default = nil)
  if valid_602492 != nil:
    section.add "X-Amz-Security-Token", valid_602492
  var valid_602493 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602493 = validateParameter(valid_602493, JString, required = false,
                                 default = nil)
  if valid_602493 != nil:
    section.add "X-Amz-Content-Sha256", valid_602493
  var valid_602494 = header.getOrDefault("X-Amz-Algorithm")
  valid_602494 = validateParameter(valid_602494, JString, required = false,
                                 default = nil)
  if valid_602494 != nil:
    section.add "X-Amz-Algorithm", valid_602494
  var valid_602495 = header.getOrDefault("X-Amz-Signature")
  valid_602495 = validateParameter(valid_602495, JString, required = false,
                                 default = nil)
  if valid_602495 != nil:
    section.add "X-Amz-Signature", valid_602495
  var valid_602496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602496 = validateParameter(valid_602496, JString, required = false,
                                 default = nil)
  if valid_602496 != nil:
    section.add "X-Amz-SignedHeaders", valid_602496
  var valid_602497 = header.getOrDefault("X-Amz-Credential")
  valid_602497 = validateParameter(valid_602497, JString, required = false,
                                 default = nil)
  if valid_602497 != nil:
    section.add "X-Amz-Credential", valid_602497
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_602498 = formData.getOrDefault("CacheNodeType")
  valid_602498 = validateParameter(valid_602498, JString, required = false,
                                 default = nil)
  if valid_602498 != nil:
    section.add "CacheNodeType", valid_602498
  var valid_602499 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_602499 = validateParameter(valid_602499, JArray, required = false,
                                 default = nil)
  if valid_602499 != nil:
    section.add "CacheNodeIdsToRemove", valid_602499
  var valid_602500 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_602500 = validateParameter(valid_602500, JArray, required = false,
                                 default = nil)
  if valid_602500 != nil:
    section.add "CacheSecurityGroupNames", valid_602500
  var valid_602501 = formData.getOrDefault("ApplyImmediately")
  valid_602501 = validateParameter(valid_602501, JBool, required = false, default = nil)
  if valid_602501 != nil:
    section.add "ApplyImmediately", valid_602501
  var valid_602502 = formData.getOrDefault("NotificationTopicArn")
  valid_602502 = validateParameter(valid_602502, JString, required = false,
                                 default = nil)
  if valid_602502 != nil:
    section.add "NotificationTopicArn", valid_602502
  var valid_602503 = formData.getOrDefault("SecurityGroupIds")
  valid_602503 = validateParameter(valid_602503, JArray, required = false,
                                 default = nil)
  if valid_602503 != nil:
    section.add "SecurityGroupIds", valid_602503
  var valid_602504 = formData.getOrDefault("NumCacheNodes")
  valid_602504 = validateParameter(valid_602504, JInt, required = false, default = nil)
  if valid_602504 != nil:
    section.add "NumCacheNodes", valid_602504
  var valid_602505 = formData.getOrDefault("AZMode")
  valid_602505 = validateParameter(valid_602505, JString, required = false,
                                 default = newJString("single-az"))
  if valid_602505 != nil:
    section.add "AZMode", valid_602505
  var valid_602506 = formData.getOrDefault("CacheParameterGroupName")
  valid_602506 = validateParameter(valid_602506, JString, required = false,
                                 default = nil)
  if valid_602506 != nil:
    section.add "CacheParameterGroupName", valid_602506
  var valid_602507 = formData.getOrDefault("NewAvailabilityZones")
  valid_602507 = validateParameter(valid_602507, JArray, required = false,
                                 default = nil)
  if valid_602507 != nil:
    section.add "NewAvailabilityZones", valid_602507
  var valid_602508 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_602508 = validateParameter(valid_602508, JInt, required = false, default = nil)
  if valid_602508 != nil:
    section.add "SnapshotRetentionLimit", valid_602508
  var valid_602509 = formData.getOrDefault("SnapshotWindow")
  valid_602509 = validateParameter(valid_602509, JString, required = false,
                                 default = nil)
  if valid_602509 != nil:
    section.add "SnapshotWindow", valid_602509
  var valid_602510 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602510 = validateParameter(valid_602510, JBool, required = false, default = nil)
  if valid_602510 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602510
  var valid_602511 = formData.getOrDefault("EngineVersion")
  valid_602511 = validateParameter(valid_602511, JString, required = false,
                                 default = nil)
  if valid_602511 != nil:
    section.add "EngineVersion", valid_602511
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_602512 = formData.getOrDefault("CacheClusterId")
  valid_602512 = validateParameter(valid_602512, JString, required = true,
                                 default = nil)
  if valid_602512 != nil:
    section.add "CacheClusterId", valid_602512
  var valid_602513 = formData.getOrDefault("NotificationTopicStatus")
  valid_602513 = validateParameter(valid_602513, JString, required = false,
                                 default = nil)
  if valid_602513 != nil:
    section.add "NotificationTopicStatus", valid_602513
  var valid_602514 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602514 = validateParameter(valid_602514, JString, required = false,
                                 default = nil)
  if valid_602514 != nil:
    section.add "PreferredMaintenanceWindow", valid_602514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602515: Call_PostModifyCacheCluster_602486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_602515.validator(path, query, header, formData, body)
  let scheme = call_602515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602515.url(scheme.get, call_602515.host, call_602515.base,
                         call_602515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602515, url, valid)

proc call*(call_602516: Call_PostModifyCacheCluster_602486; CacheClusterId: string;
          CacheNodeType: string = ""; CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          NumCacheNodes: int = 0; AZMode: string = "single-az";
          Action: string = "ModifyCacheCluster";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2015-02-02";
          NotificationTopicStatus: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_602517 = newJObject()
  var formData_602518 = newJObject()
  add(formData_602518, "CacheNodeType", newJString(CacheNodeType))
  if CacheNodeIdsToRemove != nil:
    formData_602518.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    formData_602518.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_602518, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_602518, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_602518.add "SecurityGroupIds", SecurityGroupIds
  add(formData_602518, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_602518, "AZMode", newJString(AZMode))
  add(query_602517, "Action", newJString(Action))
  add(formData_602518, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    formData_602518.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_602518, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_602518, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_602518, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602518, "EngineVersion", newJString(EngineVersion))
  add(query_602517, "Version", newJString(Version))
  add(formData_602518, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602518, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_602518, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_602516.call(nil, query_602517, nil, formData_602518, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_602486(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_602487, base: "/",
    url: url_PostModifyCacheCluster_602488, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_602454 = ref object of OpenApiRestCall_600437
proc url_GetModifyCacheCluster_602456(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheCluster_602455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: JString (required)
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   Version: JString (required)
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_602457 = query.getOrDefault("CacheClusterId")
  valid_602457 = validateParameter(valid_602457, JString, required = true,
                                 default = nil)
  if valid_602457 != nil:
    section.add "CacheClusterId", valid_602457
  var valid_602458 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602458 = validateParameter(valid_602458, JString, required = false,
                                 default = nil)
  if valid_602458 != nil:
    section.add "PreferredMaintenanceWindow", valid_602458
  var valid_602459 = query.getOrDefault("SnapshotRetentionLimit")
  valid_602459 = validateParameter(valid_602459, JInt, required = false, default = nil)
  if valid_602459 != nil:
    section.add "SnapshotRetentionLimit", valid_602459
  var valid_602460 = query.getOrDefault("CacheNodeType")
  valid_602460 = validateParameter(valid_602460, JString, required = false,
                                 default = nil)
  if valid_602460 != nil:
    section.add "CacheNodeType", valid_602460
  var valid_602461 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_602461 = validateParameter(valid_602461, JArray, required = false,
                                 default = nil)
  if valid_602461 != nil:
    section.add "CacheNodeIdsToRemove", valid_602461
  var valid_602462 = query.getOrDefault("NotificationTopicStatus")
  valid_602462 = validateParameter(valid_602462, JString, required = false,
                                 default = nil)
  if valid_602462 != nil:
    section.add "NotificationTopicStatus", valid_602462
  var valid_602463 = query.getOrDefault("CacheParameterGroupName")
  valid_602463 = validateParameter(valid_602463, JString, required = false,
                                 default = nil)
  if valid_602463 != nil:
    section.add "CacheParameterGroupName", valid_602463
  var valid_602464 = query.getOrDefault("Action")
  valid_602464 = validateParameter(valid_602464, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_602464 != nil:
    section.add "Action", valid_602464
  var valid_602465 = query.getOrDefault("AZMode")
  valid_602465 = validateParameter(valid_602465, JString, required = false,
                                 default = newJString("single-az"))
  if valid_602465 != nil:
    section.add "AZMode", valid_602465
  var valid_602466 = query.getOrDefault("NotificationTopicArn")
  valid_602466 = validateParameter(valid_602466, JString, required = false,
                                 default = nil)
  if valid_602466 != nil:
    section.add "NotificationTopicArn", valid_602466
  var valid_602467 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602467 = validateParameter(valid_602467, JBool, required = false, default = nil)
  if valid_602467 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602467
  var valid_602468 = query.getOrDefault("EngineVersion")
  valid_602468 = validateParameter(valid_602468, JString, required = false,
                                 default = nil)
  if valid_602468 != nil:
    section.add "EngineVersion", valid_602468
  var valid_602469 = query.getOrDefault("NewAvailabilityZones")
  valid_602469 = validateParameter(valid_602469, JArray, required = false,
                                 default = nil)
  if valid_602469 != nil:
    section.add "NewAvailabilityZones", valid_602469
  var valid_602470 = query.getOrDefault("SecurityGroupIds")
  valid_602470 = validateParameter(valid_602470, JArray, required = false,
                                 default = nil)
  if valid_602470 != nil:
    section.add "SecurityGroupIds", valid_602470
  var valid_602471 = query.getOrDefault("CacheSecurityGroupNames")
  valid_602471 = validateParameter(valid_602471, JArray, required = false,
                                 default = nil)
  if valid_602471 != nil:
    section.add "CacheSecurityGroupNames", valid_602471
  var valid_602472 = query.getOrDefault("Version")
  valid_602472 = validateParameter(valid_602472, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602472 != nil:
    section.add "Version", valid_602472
  var valid_602473 = query.getOrDefault("NumCacheNodes")
  valid_602473 = validateParameter(valid_602473, JInt, required = false, default = nil)
  if valid_602473 != nil:
    section.add "NumCacheNodes", valid_602473
  var valid_602474 = query.getOrDefault("ApplyImmediately")
  valid_602474 = validateParameter(valid_602474, JBool, required = false, default = nil)
  if valid_602474 != nil:
    section.add "ApplyImmediately", valid_602474
  var valid_602475 = query.getOrDefault("SnapshotWindow")
  valid_602475 = validateParameter(valid_602475, JString, required = false,
                                 default = nil)
  if valid_602475 != nil:
    section.add "SnapshotWindow", valid_602475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602476 = header.getOrDefault("X-Amz-Date")
  valid_602476 = validateParameter(valid_602476, JString, required = false,
                                 default = nil)
  if valid_602476 != nil:
    section.add "X-Amz-Date", valid_602476
  var valid_602477 = header.getOrDefault("X-Amz-Security-Token")
  valid_602477 = validateParameter(valid_602477, JString, required = false,
                                 default = nil)
  if valid_602477 != nil:
    section.add "X-Amz-Security-Token", valid_602477
  var valid_602478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602478 = validateParameter(valid_602478, JString, required = false,
                                 default = nil)
  if valid_602478 != nil:
    section.add "X-Amz-Content-Sha256", valid_602478
  var valid_602479 = header.getOrDefault("X-Amz-Algorithm")
  valid_602479 = validateParameter(valid_602479, JString, required = false,
                                 default = nil)
  if valid_602479 != nil:
    section.add "X-Amz-Algorithm", valid_602479
  var valid_602480 = header.getOrDefault("X-Amz-Signature")
  valid_602480 = validateParameter(valid_602480, JString, required = false,
                                 default = nil)
  if valid_602480 != nil:
    section.add "X-Amz-Signature", valid_602480
  var valid_602481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602481 = validateParameter(valid_602481, JString, required = false,
                                 default = nil)
  if valid_602481 != nil:
    section.add "X-Amz-SignedHeaders", valid_602481
  var valid_602482 = header.getOrDefault("X-Amz-Credential")
  valid_602482 = validateParameter(valid_602482, JString, required = false,
                                 default = nil)
  if valid_602482 != nil:
    section.add "X-Amz-Credential", valid_602482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602483: Call_GetModifyCacheCluster_602454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_602483.validator(path, query, header, formData, body)
  let scheme = call_602483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602483.url(scheme.get, call_602483.host, call_602483.base,
                         call_602483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602483, url, valid)

proc call*(call_602484: Call_GetModifyCacheCluster_602454; CacheClusterId: string;
          PreferredMaintenanceWindow: string = ""; SnapshotRetentionLimit: int = 0;
          CacheNodeType: string = ""; CacheNodeIdsToRemove: JsonNode = nil;
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "ModifyCacheCluster"; AZMode: string = "single-az";
          NotificationTopicArn: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; NewAvailabilityZones: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; CacheSecurityGroupNames: JsonNode = nil;
          Version: string = "2015-02-02"; NumCacheNodes: int = 0;
          ApplyImmediately: bool = false; SnapshotWindow: string = ""): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: string (required)
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   Version: string (required)
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  var query_602485 = newJObject()
  add(query_602485, "CacheClusterId", newJString(CacheClusterId))
  add(query_602485, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602485, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_602485, "CacheNodeType", newJString(CacheNodeType))
  if CacheNodeIdsToRemove != nil:
    query_602485.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_602485, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_602485, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602485, "Action", newJString(Action))
  add(query_602485, "AZMode", newJString(AZMode))
  add(query_602485, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_602485, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_602485, "EngineVersion", newJString(EngineVersion))
  if NewAvailabilityZones != nil:
    query_602485.add "NewAvailabilityZones", NewAvailabilityZones
  if SecurityGroupIds != nil:
    query_602485.add "SecurityGroupIds", SecurityGroupIds
  if CacheSecurityGroupNames != nil:
    query_602485.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_602485, "Version", newJString(Version))
  add(query_602485, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_602485, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_602485, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_602484.call(nil, query_602485, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_602454(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_602455, base: "/",
    url: url_GetModifyCacheCluster_602456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_602536 = ref object of OpenApiRestCall_600437
proc url_PostModifyCacheParameterGroup_602538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheParameterGroup_602537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602539 = query.getOrDefault("Action")
  valid_602539 = validateParameter(valid_602539, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_602539 != nil:
    section.add "Action", valid_602539
  var valid_602540 = query.getOrDefault("Version")
  valid_602540 = validateParameter(valid_602540, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602540 != nil:
    section.add "Version", valid_602540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602541 = header.getOrDefault("X-Amz-Date")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "X-Amz-Date", valid_602541
  var valid_602542 = header.getOrDefault("X-Amz-Security-Token")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "X-Amz-Security-Token", valid_602542
  var valid_602543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "X-Amz-Content-Sha256", valid_602543
  var valid_602544 = header.getOrDefault("X-Amz-Algorithm")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "X-Amz-Algorithm", valid_602544
  var valid_602545 = header.getOrDefault("X-Amz-Signature")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "X-Amz-Signature", valid_602545
  var valid_602546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "X-Amz-SignedHeaders", valid_602546
  var valid_602547 = header.getOrDefault("X-Amz-Credential")
  valid_602547 = validateParameter(valid_602547, JString, required = false,
                                 default = nil)
  if valid_602547 != nil:
    section.add "X-Amz-Credential", valid_602547
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602548 = formData.getOrDefault("CacheParameterGroupName")
  valid_602548 = validateParameter(valid_602548, JString, required = true,
                                 default = nil)
  if valid_602548 != nil:
    section.add "CacheParameterGroupName", valid_602548
  var valid_602549 = formData.getOrDefault("ParameterNameValues")
  valid_602549 = validateParameter(valid_602549, JArray, required = true, default = nil)
  if valid_602549 != nil:
    section.add "ParameterNameValues", valid_602549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602550: Call_PostModifyCacheParameterGroup_602536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_602550.validator(path, query, header, formData, body)
  let scheme = call_602550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602550.url(scheme.get, call_602550.host, call_602550.base,
                         call_602550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602550, url, valid)

proc call*(call_602551: Call_PostModifyCacheParameterGroup_602536;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Version: string (required)
  var query_602552 = newJObject()
  var formData_602553 = newJObject()
  add(query_602552, "Action", newJString(Action))
  add(formData_602553, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    formData_602553.add "ParameterNameValues", ParameterNameValues
  add(query_602552, "Version", newJString(Version))
  result = call_602551.call(nil, query_602552, nil, formData_602553, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_602536(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_602537, base: "/",
    url: url_PostModifyCacheParameterGroup_602538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_602519 = ref object of OpenApiRestCall_600437
proc url_GetModifyCacheParameterGroup_602521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheParameterGroup_602520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ParameterNameValues` field"
  var valid_602522 = query.getOrDefault("ParameterNameValues")
  valid_602522 = validateParameter(valid_602522, JArray, required = true, default = nil)
  if valid_602522 != nil:
    section.add "ParameterNameValues", valid_602522
  var valid_602523 = query.getOrDefault("CacheParameterGroupName")
  valid_602523 = validateParameter(valid_602523, JString, required = true,
                                 default = nil)
  if valid_602523 != nil:
    section.add "CacheParameterGroupName", valid_602523
  var valid_602524 = query.getOrDefault("Action")
  valid_602524 = validateParameter(valid_602524, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_602524 != nil:
    section.add "Action", valid_602524
  var valid_602525 = query.getOrDefault("Version")
  valid_602525 = validateParameter(valid_602525, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602525 != nil:
    section.add "Version", valid_602525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602526 = header.getOrDefault("X-Amz-Date")
  valid_602526 = validateParameter(valid_602526, JString, required = false,
                                 default = nil)
  if valid_602526 != nil:
    section.add "X-Amz-Date", valid_602526
  var valid_602527 = header.getOrDefault("X-Amz-Security-Token")
  valid_602527 = validateParameter(valid_602527, JString, required = false,
                                 default = nil)
  if valid_602527 != nil:
    section.add "X-Amz-Security-Token", valid_602527
  var valid_602528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602528 = validateParameter(valid_602528, JString, required = false,
                                 default = nil)
  if valid_602528 != nil:
    section.add "X-Amz-Content-Sha256", valid_602528
  var valid_602529 = header.getOrDefault("X-Amz-Algorithm")
  valid_602529 = validateParameter(valid_602529, JString, required = false,
                                 default = nil)
  if valid_602529 != nil:
    section.add "X-Amz-Algorithm", valid_602529
  var valid_602530 = header.getOrDefault("X-Amz-Signature")
  valid_602530 = validateParameter(valid_602530, JString, required = false,
                                 default = nil)
  if valid_602530 != nil:
    section.add "X-Amz-Signature", valid_602530
  var valid_602531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602531 = validateParameter(valid_602531, JString, required = false,
                                 default = nil)
  if valid_602531 != nil:
    section.add "X-Amz-SignedHeaders", valid_602531
  var valid_602532 = header.getOrDefault("X-Amz-Credential")
  valid_602532 = validateParameter(valid_602532, JString, required = false,
                                 default = nil)
  if valid_602532 != nil:
    section.add "X-Amz-Credential", valid_602532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602533: Call_GetModifyCacheParameterGroup_602519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_602533.validator(path, query, header, formData, body)
  let scheme = call_602533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602533.url(scheme.get, call_602533.host, call_602533.base,
                         call_602533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602533, url, valid)

proc call*(call_602534: Call_GetModifyCacheParameterGroup_602519;
          ParameterNameValues: JsonNode; CacheParameterGroupName: string;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602535 = newJObject()
  if ParameterNameValues != nil:
    query_602535.add "ParameterNameValues", ParameterNameValues
  add(query_602535, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602535, "Action", newJString(Action))
  add(query_602535, "Version", newJString(Version))
  result = call_602534.call(nil, query_602535, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_602519(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_602520, base: "/",
    url: url_GetModifyCacheParameterGroup_602521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_602572 = ref object of OpenApiRestCall_600437
proc url_PostModifyCacheSubnetGroup_602574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheSubnetGroup_602573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602575 = query.getOrDefault("Action")
  valid_602575 = validateParameter(valid_602575, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_602575 != nil:
    section.add "Action", valid_602575
  var valid_602576 = query.getOrDefault("Version")
  valid_602576 = validateParameter(valid_602576, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602576 != nil:
    section.add "Version", valid_602576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602577 = header.getOrDefault("X-Amz-Date")
  valid_602577 = validateParameter(valid_602577, JString, required = false,
                                 default = nil)
  if valid_602577 != nil:
    section.add "X-Amz-Date", valid_602577
  var valid_602578 = header.getOrDefault("X-Amz-Security-Token")
  valid_602578 = validateParameter(valid_602578, JString, required = false,
                                 default = nil)
  if valid_602578 != nil:
    section.add "X-Amz-Security-Token", valid_602578
  var valid_602579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602579 = validateParameter(valid_602579, JString, required = false,
                                 default = nil)
  if valid_602579 != nil:
    section.add "X-Amz-Content-Sha256", valid_602579
  var valid_602580 = header.getOrDefault("X-Amz-Algorithm")
  valid_602580 = validateParameter(valid_602580, JString, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "X-Amz-Algorithm", valid_602580
  var valid_602581 = header.getOrDefault("X-Amz-Signature")
  valid_602581 = validateParameter(valid_602581, JString, required = false,
                                 default = nil)
  if valid_602581 != nil:
    section.add "X-Amz-Signature", valid_602581
  var valid_602582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602582 = validateParameter(valid_602582, JString, required = false,
                                 default = nil)
  if valid_602582 != nil:
    section.add "X-Amz-SignedHeaders", valid_602582
  var valid_602583 = header.getOrDefault("X-Amz-Credential")
  valid_602583 = validateParameter(valid_602583, JString, required = false,
                                 default = nil)
  if valid_602583 != nil:
    section.add "X-Amz-Credential", valid_602583
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  section = newJObject()
  var valid_602584 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_602584 = validateParameter(valid_602584, JString, required = false,
                                 default = nil)
  if valid_602584 != nil:
    section.add "CacheSubnetGroupDescription", valid_602584
  var valid_602585 = formData.getOrDefault("SubnetIds")
  valid_602585 = validateParameter(valid_602585, JArray, required = false,
                                 default = nil)
  if valid_602585 != nil:
    section.add "SubnetIds", valid_602585
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_602586 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602586 = validateParameter(valid_602586, JString, required = true,
                                 default = nil)
  if valid_602586 != nil:
    section.add "CacheSubnetGroupName", valid_602586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602587: Call_PostModifyCacheSubnetGroup_602572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_602587.validator(path, query, header, formData, body)
  let scheme = call_602587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602587.url(scheme.get, call_602587.host, call_602587.base,
                         call_602587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602587, url, valid)

proc call*(call_602588: Call_PostModifyCacheSubnetGroup_602572;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_602589 = newJObject()
  var formData_602590 = newJObject()
  add(formData_602590, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    formData_602590.add "SubnetIds", SubnetIds
  add(query_602589, "Action", newJString(Action))
  add(formData_602590, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602589, "Version", newJString(Version))
  result = call_602588.call(nil, query_602589, nil, formData_602590, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_602572(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_602573, base: "/",
    url: url_PostModifyCacheSubnetGroup_602574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_602554 = ref object of OpenApiRestCall_600437
proc url_GetModifyCacheSubnetGroup_602556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheSubnetGroup_602555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   Action: JString (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602557 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_602557 = validateParameter(valid_602557, JString, required = false,
                                 default = nil)
  if valid_602557 != nil:
    section.add "CacheSubnetGroupDescription", valid_602557
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602558 = query.getOrDefault("Action")
  valid_602558 = validateParameter(valid_602558, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_602558 != nil:
    section.add "Action", valid_602558
  var valid_602559 = query.getOrDefault("SubnetIds")
  valid_602559 = validateParameter(valid_602559, JArray, required = false,
                                 default = nil)
  if valid_602559 != nil:
    section.add "SubnetIds", valid_602559
  var valid_602560 = query.getOrDefault("CacheSubnetGroupName")
  valid_602560 = validateParameter(valid_602560, JString, required = true,
                                 default = nil)
  if valid_602560 != nil:
    section.add "CacheSubnetGroupName", valid_602560
  var valid_602561 = query.getOrDefault("Version")
  valid_602561 = validateParameter(valid_602561, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602561 != nil:
    section.add "Version", valid_602561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602562 = header.getOrDefault("X-Amz-Date")
  valid_602562 = validateParameter(valid_602562, JString, required = false,
                                 default = nil)
  if valid_602562 != nil:
    section.add "X-Amz-Date", valid_602562
  var valid_602563 = header.getOrDefault("X-Amz-Security-Token")
  valid_602563 = validateParameter(valid_602563, JString, required = false,
                                 default = nil)
  if valid_602563 != nil:
    section.add "X-Amz-Security-Token", valid_602563
  var valid_602564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602564 = validateParameter(valid_602564, JString, required = false,
                                 default = nil)
  if valid_602564 != nil:
    section.add "X-Amz-Content-Sha256", valid_602564
  var valid_602565 = header.getOrDefault("X-Amz-Algorithm")
  valid_602565 = validateParameter(valid_602565, JString, required = false,
                                 default = nil)
  if valid_602565 != nil:
    section.add "X-Amz-Algorithm", valid_602565
  var valid_602566 = header.getOrDefault("X-Amz-Signature")
  valid_602566 = validateParameter(valid_602566, JString, required = false,
                                 default = nil)
  if valid_602566 != nil:
    section.add "X-Amz-Signature", valid_602566
  var valid_602567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602567 = validateParameter(valid_602567, JString, required = false,
                                 default = nil)
  if valid_602567 != nil:
    section.add "X-Amz-SignedHeaders", valid_602567
  var valid_602568 = header.getOrDefault("X-Amz-Credential")
  valid_602568 = validateParameter(valid_602568, JString, required = false,
                                 default = nil)
  if valid_602568 != nil:
    section.add "X-Amz-Credential", valid_602568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602569: Call_GetModifyCacheSubnetGroup_602554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_602569.validator(path, query, header, formData, body)
  let scheme = call_602569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602569.url(scheme.get, call_602569.host, call_602569.base,
                         call_602569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602569, url, valid)

proc call*(call_602570: Call_GetModifyCacheSubnetGroup_602554;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; SubnetIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   Action: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_602571 = newJObject()
  add(query_602571, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(query_602571, "Action", newJString(Action))
  if SubnetIds != nil:
    query_602571.add "SubnetIds", SubnetIds
  add(query_602571, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602571, "Version", newJString(Version))
  result = call_602570.call(nil, query_602571, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_602554(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_602555, base: "/",
    url: url_GetModifyCacheSubnetGroup_602556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_602624 = ref object of OpenApiRestCall_600437
proc url_PostModifyReplicationGroup_602626(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroup_602625(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602627 = query.getOrDefault("Action")
  valid_602627 = validateParameter(valid_602627, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_602627 != nil:
    section.add "Action", valid_602627
  var valid_602628 = query.getOrDefault("Version")
  valid_602628 = validateParameter(valid_602628, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602628 != nil:
    section.add "Version", valid_602628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602629 = header.getOrDefault("X-Amz-Date")
  valid_602629 = validateParameter(valid_602629, JString, required = false,
                                 default = nil)
  if valid_602629 != nil:
    section.add "X-Amz-Date", valid_602629
  var valid_602630 = header.getOrDefault("X-Amz-Security-Token")
  valid_602630 = validateParameter(valid_602630, JString, required = false,
                                 default = nil)
  if valid_602630 != nil:
    section.add "X-Amz-Security-Token", valid_602630
  var valid_602631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602631 = validateParameter(valid_602631, JString, required = false,
                                 default = nil)
  if valid_602631 != nil:
    section.add "X-Amz-Content-Sha256", valid_602631
  var valid_602632 = header.getOrDefault("X-Amz-Algorithm")
  valid_602632 = validateParameter(valid_602632, JString, required = false,
                                 default = nil)
  if valid_602632 != nil:
    section.add "X-Amz-Algorithm", valid_602632
  var valid_602633 = header.getOrDefault("X-Amz-Signature")
  valid_602633 = validateParameter(valid_602633, JString, required = false,
                                 default = nil)
  if valid_602633 != nil:
    section.add "X-Amz-Signature", valid_602633
  var valid_602634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602634 = validateParameter(valid_602634, JString, required = false,
                                 default = nil)
  if valid_602634 != nil:
    section.add "X-Amz-SignedHeaders", valid_602634
  var valid_602635 = header.getOrDefault("X-Amz-Credential")
  valid_602635 = validateParameter(valid_602635, JString, required = false,
                                 default = nil)
  if valid_602635 != nil:
    section.add "X-Amz-Credential", valid_602635
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_602636 = formData.getOrDefault("NodeGroupId")
  valid_602636 = validateParameter(valid_602636, JString, required = false,
                                 default = nil)
  if valid_602636 != nil:
    section.add "NodeGroupId", valid_602636
  var valid_602637 = formData.getOrDefault("CacheNodeType")
  valid_602637 = validateParameter(valid_602637, JString, required = false,
                                 default = nil)
  if valid_602637 != nil:
    section.add "CacheNodeType", valid_602637
  var valid_602638 = formData.getOrDefault("PrimaryClusterId")
  valid_602638 = validateParameter(valid_602638, JString, required = false,
                                 default = nil)
  if valid_602638 != nil:
    section.add "PrimaryClusterId", valid_602638
  var valid_602639 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_602639 = validateParameter(valid_602639, JArray, required = false,
                                 default = nil)
  if valid_602639 != nil:
    section.add "CacheSecurityGroupNames", valid_602639
  var valid_602640 = formData.getOrDefault("ApplyImmediately")
  valid_602640 = validateParameter(valid_602640, JBool, required = false, default = nil)
  if valid_602640 != nil:
    section.add "ApplyImmediately", valid_602640
  var valid_602641 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_602641 = validateParameter(valid_602641, JBool, required = false, default = nil)
  if valid_602641 != nil:
    section.add "AutomaticFailoverEnabled", valid_602641
  var valid_602642 = formData.getOrDefault("NotificationTopicArn")
  valid_602642 = validateParameter(valid_602642, JString, required = false,
                                 default = nil)
  if valid_602642 != nil:
    section.add "NotificationTopicArn", valid_602642
  var valid_602643 = formData.getOrDefault("SecurityGroupIds")
  valid_602643 = validateParameter(valid_602643, JArray, required = false,
                                 default = nil)
  if valid_602643 != nil:
    section.add "SecurityGroupIds", valid_602643
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_602644 = formData.getOrDefault("ReplicationGroupId")
  valid_602644 = validateParameter(valid_602644, JString, required = true,
                                 default = nil)
  if valid_602644 != nil:
    section.add "ReplicationGroupId", valid_602644
  var valid_602645 = formData.getOrDefault("SnapshottingClusterId")
  valid_602645 = validateParameter(valid_602645, JString, required = false,
                                 default = nil)
  if valid_602645 != nil:
    section.add "SnapshottingClusterId", valid_602645
  var valid_602646 = formData.getOrDefault("CacheParameterGroupName")
  valid_602646 = validateParameter(valid_602646, JString, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "CacheParameterGroupName", valid_602646
  var valid_602647 = formData.getOrDefault("ReplicationGroupDescription")
  valid_602647 = validateParameter(valid_602647, JString, required = false,
                                 default = nil)
  if valid_602647 != nil:
    section.add "ReplicationGroupDescription", valid_602647
  var valid_602648 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_602648 = validateParameter(valid_602648, JInt, required = false, default = nil)
  if valid_602648 != nil:
    section.add "SnapshotRetentionLimit", valid_602648
  var valid_602649 = formData.getOrDefault("SnapshotWindow")
  valid_602649 = validateParameter(valid_602649, JString, required = false,
                                 default = nil)
  if valid_602649 != nil:
    section.add "SnapshotWindow", valid_602649
  var valid_602650 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602650 = validateParameter(valid_602650, JBool, required = false, default = nil)
  if valid_602650 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602650
  var valid_602651 = formData.getOrDefault("EngineVersion")
  valid_602651 = validateParameter(valid_602651, JString, required = false,
                                 default = nil)
  if valid_602651 != nil:
    section.add "EngineVersion", valid_602651
  var valid_602652 = formData.getOrDefault("NotificationTopicStatus")
  valid_602652 = validateParameter(valid_602652, JString, required = false,
                                 default = nil)
  if valid_602652 != nil:
    section.add "NotificationTopicStatus", valid_602652
  var valid_602653 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602653 = validateParameter(valid_602653, JString, required = false,
                                 default = nil)
  if valid_602653 != nil:
    section.add "PreferredMaintenanceWindow", valid_602653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602654: Call_PostModifyReplicationGroup_602624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602654.validator(path, query, header, formData, body)
  let scheme = call_602654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602654.url(scheme.get, call_602654.host, call_602654.base,
                         call_602654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602654, url, valid)

proc call*(call_602655: Call_PostModifyReplicationGroup_602624;
          ReplicationGroupId: string; NodeGroupId: string = "";
          CacheNodeType: string = ""; PrimaryClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; ApplyImmediately: bool = false;
          AutomaticFailoverEnabled: bool = false; NotificationTopicArn: string = "";
          SecurityGroupIds: JsonNode = nil; SnapshottingClusterId: string = "";
          Action: string = "ModifyReplicationGroup";
          CacheParameterGroupName: string = "";
          ReplicationGroupDescription: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2015-02-02";
          NotificationTopicStatus: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_602656 = newJObject()
  var formData_602657 = newJObject()
  add(formData_602657, "NodeGroupId", newJString(NodeGroupId))
  add(formData_602657, "CacheNodeType", newJString(CacheNodeType))
  add(formData_602657, "PrimaryClusterId", newJString(PrimaryClusterId))
  if CacheSecurityGroupNames != nil:
    formData_602657.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_602657, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_602657, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_602657, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_602657.add "SecurityGroupIds", SecurityGroupIds
  add(formData_602657, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_602657, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(query_602656, "Action", newJString(Action))
  add(formData_602657, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_602657, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(formData_602657, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_602657, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_602657, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602657, "EngineVersion", newJString(EngineVersion))
  add(query_602656, "Version", newJString(Version))
  add(formData_602657, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_602657, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_602655.call(nil, query_602656, nil, formData_602657, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_602624(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_602625, base: "/",
    url: url_PostModifyReplicationGroup_602626,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_602591 = ref object of OpenApiRestCall_600437
proc url_GetModifyReplicationGroup_602593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroup_602592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: JString (required)
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  section = newJObject()
  var valid_602594 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602594 = validateParameter(valid_602594, JString, required = false,
                                 default = nil)
  if valid_602594 != nil:
    section.add "PreferredMaintenanceWindow", valid_602594
  var valid_602595 = query.getOrDefault("SnapshotRetentionLimit")
  valid_602595 = validateParameter(valid_602595, JInt, required = false, default = nil)
  if valid_602595 != nil:
    section.add "SnapshotRetentionLimit", valid_602595
  var valid_602596 = query.getOrDefault("CacheNodeType")
  valid_602596 = validateParameter(valid_602596, JString, required = false,
                                 default = nil)
  if valid_602596 != nil:
    section.add "CacheNodeType", valid_602596
  var valid_602597 = query.getOrDefault("NodeGroupId")
  valid_602597 = validateParameter(valid_602597, JString, required = false,
                                 default = nil)
  if valid_602597 != nil:
    section.add "NodeGroupId", valid_602597
  var valid_602598 = query.getOrDefault("NotificationTopicStatus")
  valid_602598 = validateParameter(valid_602598, JString, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "NotificationTopicStatus", valid_602598
  var valid_602599 = query.getOrDefault("CacheParameterGroupName")
  valid_602599 = validateParameter(valid_602599, JString, required = false,
                                 default = nil)
  if valid_602599 != nil:
    section.add "CacheParameterGroupName", valid_602599
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602600 = query.getOrDefault("Action")
  valid_602600 = validateParameter(valid_602600, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_602600 != nil:
    section.add "Action", valid_602600
  var valid_602601 = query.getOrDefault("NotificationTopicArn")
  valid_602601 = validateParameter(valid_602601, JString, required = false,
                                 default = nil)
  if valid_602601 != nil:
    section.add "NotificationTopicArn", valid_602601
  var valid_602602 = query.getOrDefault("PrimaryClusterId")
  valid_602602 = validateParameter(valid_602602, JString, required = false,
                                 default = nil)
  if valid_602602 != nil:
    section.add "PrimaryClusterId", valid_602602
  var valid_602603 = query.getOrDefault("SnapshottingClusterId")
  valid_602603 = validateParameter(valid_602603, JString, required = false,
                                 default = nil)
  if valid_602603 != nil:
    section.add "SnapshottingClusterId", valid_602603
  var valid_602604 = query.getOrDefault("ReplicationGroupId")
  valid_602604 = validateParameter(valid_602604, JString, required = true,
                                 default = nil)
  if valid_602604 != nil:
    section.add "ReplicationGroupId", valid_602604
  var valid_602605 = query.getOrDefault("EngineVersion")
  valid_602605 = validateParameter(valid_602605, JString, required = false,
                                 default = nil)
  if valid_602605 != nil:
    section.add "EngineVersion", valid_602605
  var valid_602606 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602606 = validateParameter(valid_602606, JBool, required = false, default = nil)
  if valid_602606 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602606
  var valid_602607 = query.getOrDefault("SecurityGroupIds")
  valid_602607 = validateParameter(valid_602607, JArray, required = false,
                                 default = nil)
  if valid_602607 != nil:
    section.add "SecurityGroupIds", valid_602607
  var valid_602608 = query.getOrDefault("ReplicationGroupDescription")
  valid_602608 = validateParameter(valid_602608, JString, required = false,
                                 default = nil)
  if valid_602608 != nil:
    section.add "ReplicationGroupDescription", valid_602608
  var valid_602609 = query.getOrDefault("CacheSecurityGroupNames")
  valid_602609 = validateParameter(valid_602609, JArray, required = false,
                                 default = nil)
  if valid_602609 != nil:
    section.add "CacheSecurityGroupNames", valid_602609
  var valid_602610 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_602610 = validateParameter(valid_602610, JBool, required = false, default = nil)
  if valid_602610 != nil:
    section.add "AutomaticFailoverEnabled", valid_602610
  var valid_602611 = query.getOrDefault("Version")
  valid_602611 = validateParameter(valid_602611, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602611 != nil:
    section.add "Version", valid_602611
  var valid_602612 = query.getOrDefault("ApplyImmediately")
  valid_602612 = validateParameter(valid_602612, JBool, required = false, default = nil)
  if valid_602612 != nil:
    section.add "ApplyImmediately", valid_602612
  var valid_602613 = query.getOrDefault("SnapshotWindow")
  valid_602613 = validateParameter(valid_602613, JString, required = false,
                                 default = nil)
  if valid_602613 != nil:
    section.add "SnapshotWindow", valid_602613
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602614 = header.getOrDefault("X-Amz-Date")
  valid_602614 = validateParameter(valid_602614, JString, required = false,
                                 default = nil)
  if valid_602614 != nil:
    section.add "X-Amz-Date", valid_602614
  var valid_602615 = header.getOrDefault("X-Amz-Security-Token")
  valid_602615 = validateParameter(valid_602615, JString, required = false,
                                 default = nil)
  if valid_602615 != nil:
    section.add "X-Amz-Security-Token", valid_602615
  var valid_602616 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602616 = validateParameter(valid_602616, JString, required = false,
                                 default = nil)
  if valid_602616 != nil:
    section.add "X-Amz-Content-Sha256", valid_602616
  var valid_602617 = header.getOrDefault("X-Amz-Algorithm")
  valid_602617 = validateParameter(valid_602617, JString, required = false,
                                 default = nil)
  if valid_602617 != nil:
    section.add "X-Amz-Algorithm", valid_602617
  var valid_602618 = header.getOrDefault("X-Amz-Signature")
  valid_602618 = validateParameter(valid_602618, JString, required = false,
                                 default = nil)
  if valid_602618 != nil:
    section.add "X-Amz-Signature", valid_602618
  var valid_602619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602619 = validateParameter(valid_602619, JString, required = false,
                                 default = nil)
  if valid_602619 != nil:
    section.add "X-Amz-SignedHeaders", valid_602619
  var valid_602620 = header.getOrDefault("X-Amz-Credential")
  valid_602620 = validateParameter(valid_602620, JString, required = false,
                                 default = nil)
  if valid_602620 != nil:
    section.add "X-Amz-Credential", valid_602620
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602621: Call_GetModifyReplicationGroup_602591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602621.validator(path, query, header, formData, body)
  let scheme = call_602621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602621.url(scheme.get, call_602621.host, call_602621.base,
                         call_602621.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602621, url, valid)

proc call*(call_602622: Call_GetModifyReplicationGroup_602591;
          ReplicationGroupId: string; PreferredMaintenanceWindow: string = "";
          SnapshotRetentionLimit: int = 0; CacheNodeType: string = "";
          NodeGroupId: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "ModifyReplicationGroup";
          NotificationTopicArn: string = ""; PrimaryClusterId: string = "";
          SnapshottingClusterId: string = ""; EngineVersion: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil;
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil;
          AutomaticFailoverEnabled: bool = false; Version: string = "2015-02-02";
          ApplyImmediately: bool = false; SnapshotWindow: string = ""): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: string (required)
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  var query_602623 = newJObject()
  add(query_602623, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602623, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_602623, "CacheNodeType", newJString(CacheNodeType))
  add(query_602623, "NodeGroupId", newJString(NodeGroupId))
  add(query_602623, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_602623, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602623, "Action", newJString(Action))
  add(query_602623, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_602623, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_602623, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(query_602623, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602623, "EngineVersion", newJString(EngineVersion))
  add(query_602623, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_602623.add "SecurityGroupIds", SecurityGroupIds
  add(query_602623, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    query_602623.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_602623, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_602623, "Version", newJString(Version))
  add(query_602623, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_602623, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_602622.call(nil, query_602623, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_602591(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_602592, base: "/",
    url: url_GetModifyReplicationGroup_602593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_602679 = ref object of OpenApiRestCall_600437
proc url_PostModifyReplicationGroupShardConfiguration_602681(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_602680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602682 = query.getOrDefault("Action")
  valid_602682 = validateParameter(valid_602682, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_602682 != nil:
    section.add "Action", valid_602682
  var valid_602683 = query.getOrDefault("Version")
  valid_602683 = validateParameter(valid_602683, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602683 != nil:
    section.add "Version", valid_602683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602684 = header.getOrDefault("X-Amz-Date")
  valid_602684 = validateParameter(valid_602684, JString, required = false,
                                 default = nil)
  if valid_602684 != nil:
    section.add "X-Amz-Date", valid_602684
  var valid_602685 = header.getOrDefault("X-Amz-Security-Token")
  valid_602685 = validateParameter(valid_602685, JString, required = false,
                                 default = nil)
  if valid_602685 != nil:
    section.add "X-Amz-Security-Token", valid_602685
  var valid_602686 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602686 = validateParameter(valid_602686, JString, required = false,
                                 default = nil)
  if valid_602686 != nil:
    section.add "X-Amz-Content-Sha256", valid_602686
  var valid_602687 = header.getOrDefault("X-Amz-Algorithm")
  valid_602687 = validateParameter(valid_602687, JString, required = false,
                                 default = nil)
  if valid_602687 != nil:
    section.add "X-Amz-Algorithm", valid_602687
  var valid_602688 = header.getOrDefault("X-Amz-Signature")
  valid_602688 = validateParameter(valid_602688, JString, required = false,
                                 default = nil)
  if valid_602688 != nil:
    section.add "X-Amz-Signature", valid_602688
  var valid_602689 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602689 = validateParameter(valid_602689, JString, required = false,
                                 default = nil)
  if valid_602689 != nil:
    section.add "X-Amz-SignedHeaders", valid_602689
  var valid_602690 = header.getOrDefault("X-Amz-Credential")
  valid_602690 = validateParameter(valid_602690, JString, required = false,
                                 default = nil)
  if valid_602690 != nil:
    section.add "X-Amz-Credential", valid_602690
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  section = newJObject()
  var valid_602691 = formData.getOrDefault("ReshardingConfiguration")
  valid_602691 = validateParameter(valid_602691, JArray, required = false,
                                 default = nil)
  if valid_602691 != nil:
    section.add "ReshardingConfiguration", valid_602691
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_602692 = formData.getOrDefault("ApplyImmediately")
  valid_602692 = validateParameter(valid_602692, JBool, required = true, default = nil)
  if valid_602692 != nil:
    section.add "ApplyImmediately", valid_602692
  var valid_602693 = formData.getOrDefault("NodeGroupCount")
  valid_602693 = validateParameter(valid_602693, JInt, required = true, default = nil)
  if valid_602693 != nil:
    section.add "NodeGroupCount", valid_602693
  var valid_602694 = formData.getOrDefault("ReplicationGroupId")
  valid_602694 = validateParameter(valid_602694, JString, required = true,
                                 default = nil)
  if valid_602694 != nil:
    section.add "ReplicationGroupId", valid_602694
  var valid_602695 = formData.getOrDefault("NodeGroupsToRetain")
  valid_602695 = validateParameter(valid_602695, JArray, required = false,
                                 default = nil)
  if valid_602695 != nil:
    section.add "NodeGroupsToRetain", valid_602695
  var valid_602696 = formData.getOrDefault("NodeGroupsToRemove")
  valid_602696 = validateParameter(valid_602696, JArray, required = false,
                                 default = nil)
  if valid_602696 != nil:
    section.add "NodeGroupsToRemove", valid_602696
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602697: Call_PostModifyReplicationGroupShardConfiguration_602679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_602697.validator(path, query, header, formData, body)
  let scheme = call_602697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602697.url(scheme.get, call_602697.host, call_602697.base,
                         call_602697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602697, url, valid)

proc call*(call_602698: Call_PostModifyReplicationGroupShardConfiguration_602679;
          ApplyImmediately: bool; NodeGroupCount: int; ReplicationGroupId: string;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRetain: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRemove: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Action: string (required)
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Version: string (required)
  var query_602699 = newJObject()
  var formData_602700 = newJObject()
  if ReshardingConfiguration != nil:
    formData_602700.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_602700, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_602700, "NodeGroupCount", newJInt(NodeGroupCount))
  add(formData_602700, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    formData_602700.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_602699, "Action", newJString(Action))
  if NodeGroupsToRemove != nil:
    formData_602700.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_602699, "Version", newJString(Version))
  result = call_602698.call(nil, query_602699, nil, formData_602700, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_602679(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_602680,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_602681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_602658 = ref object of OpenApiRestCall_600437
proc url_GetModifyReplicationGroupShardConfiguration_602660(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_602659(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NodeGroupCount` field"
  var valid_602661 = query.getOrDefault("NodeGroupCount")
  valid_602661 = validateParameter(valid_602661, JInt, required = true, default = nil)
  if valid_602661 != nil:
    section.add "NodeGroupCount", valid_602661
  var valid_602662 = query.getOrDefault("NodeGroupsToRetain")
  valid_602662 = validateParameter(valid_602662, JArray, required = false,
                                 default = nil)
  if valid_602662 != nil:
    section.add "NodeGroupsToRetain", valid_602662
  var valid_602663 = query.getOrDefault("ReshardingConfiguration")
  valid_602663 = validateParameter(valid_602663, JArray, required = false,
                                 default = nil)
  if valid_602663 != nil:
    section.add "ReshardingConfiguration", valid_602663
  var valid_602664 = query.getOrDefault("NodeGroupsToRemove")
  valid_602664 = validateParameter(valid_602664, JArray, required = false,
                                 default = nil)
  if valid_602664 != nil:
    section.add "NodeGroupsToRemove", valid_602664
  var valid_602665 = query.getOrDefault("Action")
  valid_602665 = validateParameter(valid_602665, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_602665 != nil:
    section.add "Action", valid_602665
  var valid_602666 = query.getOrDefault("ReplicationGroupId")
  valid_602666 = validateParameter(valid_602666, JString, required = true,
                                 default = nil)
  if valid_602666 != nil:
    section.add "ReplicationGroupId", valid_602666
  var valid_602667 = query.getOrDefault("Version")
  valid_602667 = validateParameter(valid_602667, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602667 != nil:
    section.add "Version", valid_602667
  var valid_602668 = query.getOrDefault("ApplyImmediately")
  valid_602668 = validateParameter(valid_602668, JBool, required = true, default = nil)
  if valid_602668 != nil:
    section.add "ApplyImmediately", valid_602668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602669 = header.getOrDefault("X-Amz-Date")
  valid_602669 = validateParameter(valid_602669, JString, required = false,
                                 default = nil)
  if valid_602669 != nil:
    section.add "X-Amz-Date", valid_602669
  var valid_602670 = header.getOrDefault("X-Amz-Security-Token")
  valid_602670 = validateParameter(valid_602670, JString, required = false,
                                 default = nil)
  if valid_602670 != nil:
    section.add "X-Amz-Security-Token", valid_602670
  var valid_602671 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602671 = validateParameter(valid_602671, JString, required = false,
                                 default = nil)
  if valid_602671 != nil:
    section.add "X-Amz-Content-Sha256", valid_602671
  var valid_602672 = header.getOrDefault("X-Amz-Algorithm")
  valid_602672 = validateParameter(valid_602672, JString, required = false,
                                 default = nil)
  if valid_602672 != nil:
    section.add "X-Amz-Algorithm", valid_602672
  var valid_602673 = header.getOrDefault("X-Amz-Signature")
  valid_602673 = validateParameter(valid_602673, JString, required = false,
                                 default = nil)
  if valid_602673 != nil:
    section.add "X-Amz-Signature", valid_602673
  var valid_602674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602674 = validateParameter(valid_602674, JString, required = false,
                                 default = nil)
  if valid_602674 != nil:
    section.add "X-Amz-SignedHeaders", valid_602674
  var valid_602675 = header.getOrDefault("X-Amz-Credential")
  valid_602675 = validateParameter(valid_602675, JString, required = false,
                                 default = nil)
  if valid_602675 != nil:
    section.add "X-Amz-Credential", valid_602675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602676: Call_GetModifyReplicationGroupShardConfiguration_602658;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_602676.validator(path, query, header, formData, body)
  let scheme = call_602676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602676.url(scheme.get, call_602676.host, call_602676.base,
                         call_602676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602676, url, valid)

proc call*(call_602677: Call_GetModifyReplicationGroupShardConfiguration_602658;
          NodeGroupCount: int; ReplicationGroupId: string; ApplyImmediately: bool;
          NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  var query_602678 = newJObject()
  add(query_602678, "NodeGroupCount", newJInt(NodeGroupCount))
  if NodeGroupsToRetain != nil:
    query_602678.add "NodeGroupsToRetain", NodeGroupsToRetain
  if ReshardingConfiguration != nil:
    query_602678.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_602678.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_602678, "Action", newJString(Action))
  add(query_602678, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602678, "Version", newJString(Version))
  add(query_602678, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_602677.call(nil, query_602678, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_602658(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_602659,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_602660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_602719 = ref object of OpenApiRestCall_600437
proc url_PostPurchaseReservedCacheNodesOffering_602721(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_602720(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602722 = query.getOrDefault("Action")
  valid_602722 = validateParameter(valid_602722, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_602722 != nil:
    section.add "Action", valid_602722
  var valid_602723 = query.getOrDefault("Version")
  valid_602723 = validateParameter(valid_602723, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602723 != nil:
    section.add "Version", valid_602723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602724 = header.getOrDefault("X-Amz-Date")
  valid_602724 = validateParameter(valid_602724, JString, required = false,
                                 default = nil)
  if valid_602724 != nil:
    section.add "X-Amz-Date", valid_602724
  var valid_602725 = header.getOrDefault("X-Amz-Security-Token")
  valid_602725 = validateParameter(valid_602725, JString, required = false,
                                 default = nil)
  if valid_602725 != nil:
    section.add "X-Amz-Security-Token", valid_602725
  var valid_602726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602726 = validateParameter(valid_602726, JString, required = false,
                                 default = nil)
  if valid_602726 != nil:
    section.add "X-Amz-Content-Sha256", valid_602726
  var valid_602727 = header.getOrDefault("X-Amz-Algorithm")
  valid_602727 = validateParameter(valid_602727, JString, required = false,
                                 default = nil)
  if valid_602727 != nil:
    section.add "X-Amz-Algorithm", valid_602727
  var valid_602728 = header.getOrDefault("X-Amz-Signature")
  valid_602728 = validateParameter(valid_602728, JString, required = false,
                                 default = nil)
  if valid_602728 != nil:
    section.add "X-Amz-Signature", valid_602728
  var valid_602729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602729 = validateParameter(valid_602729, JString, required = false,
                                 default = nil)
  if valid_602729 != nil:
    section.add "X-Amz-SignedHeaders", valid_602729
  var valid_602730 = header.getOrDefault("X-Amz-Credential")
  valid_602730 = validateParameter(valid_602730, JString, required = false,
                                 default = nil)
  if valid_602730 != nil:
    section.add "X-Amz-Credential", valid_602730
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_602731 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602731 = validateParameter(valid_602731, JString, required = true,
                                 default = nil)
  if valid_602731 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602731
  var valid_602732 = formData.getOrDefault("ReservedCacheNodeId")
  valid_602732 = validateParameter(valid_602732, JString, required = false,
                                 default = nil)
  if valid_602732 != nil:
    section.add "ReservedCacheNodeId", valid_602732
  var valid_602733 = formData.getOrDefault("CacheNodeCount")
  valid_602733 = validateParameter(valid_602733, JInt, required = false, default = nil)
  if valid_602733 != nil:
    section.add "CacheNodeCount", valid_602733
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602734: Call_PostPurchaseReservedCacheNodesOffering_602719;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_602734.validator(path, query, header, formData, body)
  let scheme = call_602734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602734.url(scheme.get, call_602734.host, call_602734.base,
                         call_602734.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602734, url, valid)

proc call*(call_602735: Call_PostPurchaseReservedCacheNodesOffering_602719;
          ReservedCacheNodesOfferingId: string; ReservedCacheNodeId: string = "";
          Action: string = "PurchaseReservedCacheNodesOffering";
          CacheNodeCount: int = 0; Version: string = "2015-02-02"): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Version: string (required)
  var query_602736 = newJObject()
  var formData_602737 = newJObject()
  add(formData_602737, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_602737, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_602736, "Action", newJString(Action))
  add(formData_602737, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_602736, "Version", newJString(Version))
  result = call_602735.call(nil, query_602736, nil, formData_602737, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_602719(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_602720, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_602721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_602701 = ref object of OpenApiRestCall_600437
proc url_GetPurchaseReservedCacheNodesOffering_602703(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_602702(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602704 = query.getOrDefault("CacheNodeCount")
  valid_602704 = validateParameter(valid_602704, JInt, required = false, default = nil)
  if valid_602704 != nil:
    section.add "CacheNodeCount", valid_602704
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602705 = query.getOrDefault("Action")
  valid_602705 = validateParameter(valid_602705, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_602705 != nil:
    section.add "Action", valid_602705
  var valid_602706 = query.getOrDefault("ReservedCacheNodeId")
  valid_602706 = validateParameter(valid_602706, JString, required = false,
                                 default = nil)
  if valid_602706 != nil:
    section.add "ReservedCacheNodeId", valid_602706
  var valid_602707 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_602707 = validateParameter(valid_602707, JString, required = true,
                                 default = nil)
  if valid_602707 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_602707
  var valid_602708 = query.getOrDefault("Version")
  valid_602708 = validateParameter(valid_602708, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602708 != nil:
    section.add "Version", valid_602708
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602709 = header.getOrDefault("X-Amz-Date")
  valid_602709 = validateParameter(valid_602709, JString, required = false,
                                 default = nil)
  if valid_602709 != nil:
    section.add "X-Amz-Date", valid_602709
  var valid_602710 = header.getOrDefault("X-Amz-Security-Token")
  valid_602710 = validateParameter(valid_602710, JString, required = false,
                                 default = nil)
  if valid_602710 != nil:
    section.add "X-Amz-Security-Token", valid_602710
  var valid_602711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602711 = validateParameter(valid_602711, JString, required = false,
                                 default = nil)
  if valid_602711 != nil:
    section.add "X-Amz-Content-Sha256", valid_602711
  var valid_602712 = header.getOrDefault("X-Amz-Algorithm")
  valid_602712 = validateParameter(valid_602712, JString, required = false,
                                 default = nil)
  if valid_602712 != nil:
    section.add "X-Amz-Algorithm", valid_602712
  var valid_602713 = header.getOrDefault("X-Amz-Signature")
  valid_602713 = validateParameter(valid_602713, JString, required = false,
                                 default = nil)
  if valid_602713 != nil:
    section.add "X-Amz-Signature", valid_602713
  var valid_602714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602714 = validateParameter(valid_602714, JString, required = false,
                                 default = nil)
  if valid_602714 != nil:
    section.add "X-Amz-SignedHeaders", valid_602714
  var valid_602715 = header.getOrDefault("X-Amz-Credential")
  valid_602715 = validateParameter(valid_602715, JString, required = false,
                                 default = nil)
  if valid_602715 != nil:
    section.add "X-Amz-Credential", valid_602715
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602716: Call_GetPurchaseReservedCacheNodesOffering_602701;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_602716.validator(path, query, header, formData, body)
  let scheme = call_602716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602716.url(scheme.get, call_602716.host, call_602716.base,
                         call_602716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602716, url, valid)

proc call*(call_602717: Call_GetPurchaseReservedCacheNodesOffering_602701;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_602718 = newJObject()
  add(query_602718, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_602718, "Action", newJString(Action))
  add(query_602718, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_602718, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_602718, "Version", newJString(Version))
  result = call_602717.call(nil, query_602718, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_602701(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_602702, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_602703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_602755 = ref object of OpenApiRestCall_600437
proc url_PostRebootCacheCluster_602757(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootCacheCluster_602756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602758 = query.getOrDefault("Action")
  valid_602758 = validateParameter(valid_602758, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_602758 != nil:
    section.add "Action", valid_602758
  var valid_602759 = query.getOrDefault("Version")
  valid_602759 = validateParameter(valid_602759, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602759 != nil:
    section.add "Version", valid_602759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602760 = header.getOrDefault("X-Amz-Date")
  valid_602760 = validateParameter(valid_602760, JString, required = false,
                                 default = nil)
  if valid_602760 != nil:
    section.add "X-Amz-Date", valid_602760
  var valid_602761 = header.getOrDefault("X-Amz-Security-Token")
  valid_602761 = validateParameter(valid_602761, JString, required = false,
                                 default = nil)
  if valid_602761 != nil:
    section.add "X-Amz-Security-Token", valid_602761
  var valid_602762 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602762 = validateParameter(valid_602762, JString, required = false,
                                 default = nil)
  if valid_602762 != nil:
    section.add "X-Amz-Content-Sha256", valid_602762
  var valid_602763 = header.getOrDefault("X-Amz-Algorithm")
  valid_602763 = validateParameter(valid_602763, JString, required = false,
                                 default = nil)
  if valid_602763 != nil:
    section.add "X-Amz-Algorithm", valid_602763
  var valid_602764 = header.getOrDefault("X-Amz-Signature")
  valid_602764 = validateParameter(valid_602764, JString, required = false,
                                 default = nil)
  if valid_602764 != nil:
    section.add "X-Amz-Signature", valid_602764
  var valid_602765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602765 = validateParameter(valid_602765, JString, required = false,
                                 default = nil)
  if valid_602765 != nil:
    section.add "X-Amz-SignedHeaders", valid_602765
  var valid_602766 = header.getOrDefault("X-Amz-Credential")
  valid_602766 = validateParameter(valid_602766, JString, required = false,
                                 default = nil)
  if valid_602766 != nil:
    section.add "X-Amz-Credential", valid_602766
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_602767 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_602767 = validateParameter(valid_602767, JArray, required = true, default = nil)
  if valid_602767 != nil:
    section.add "CacheNodeIdsToReboot", valid_602767
  var valid_602768 = formData.getOrDefault("CacheClusterId")
  valid_602768 = validateParameter(valid_602768, JString, required = true,
                                 default = nil)
  if valid_602768 != nil:
    section.add "CacheClusterId", valid_602768
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602769: Call_PostRebootCacheCluster_602755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_602769.validator(path, query, header, formData, body)
  let scheme = call_602769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602769.url(scheme.get, call_602769.host, call_602769.base,
                         call_602769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602769, url, valid)

proc call*(call_602770: Call_PostRebootCacheCluster_602755;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  var query_602771 = newJObject()
  var formData_602772 = newJObject()
  add(query_602771, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_602772.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_602771, "Version", newJString(Version))
  add(formData_602772, "CacheClusterId", newJString(CacheClusterId))
  result = call_602770.call(nil, query_602771, nil, formData_602772, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_602755(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_602756, base: "/",
    url: url_PostRebootCacheCluster_602757, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_602738 = ref object of OpenApiRestCall_600437
proc url_GetRebootCacheCluster_602740(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootCacheCluster_602739(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_602741 = query.getOrDefault("CacheClusterId")
  valid_602741 = validateParameter(valid_602741, JString, required = true,
                                 default = nil)
  if valid_602741 != nil:
    section.add "CacheClusterId", valid_602741
  var valid_602742 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_602742 = validateParameter(valid_602742, JArray, required = true, default = nil)
  if valid_602742 != nil:
    section.add "CacheNodeIdsToReboot", valid_602742
  var valid_602743 = query.getOrDefault("Action")
  valid_602743 = validateParameter(valid_602743, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_602743 != nil:
    section.add "Action", valid_602743
  var valid_602744 = query.getOrDefault("Version")
  valid_602744 = validateParameter(valid_602744, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602744 != nil:
    section.add "Version", valid_602744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602745 = header.getOrDefault("X-Amz-Date")
  valid_602745 = validateParameter(valid_602745, JString, required = false,
                                 default = nil)
  if valid_602745 != nil:
    section.add "X-Amz-Date", valid_602745
  var valid_602746 = header.getOrDefault("X-Amz-Security-Token")
  valid_602746 = validateParameter(valid_602746, JString, required = false,
                                 default = nil)
  if valid_602746 != nil:
    section.add "X-Amz-Security-Token", valid_602746
  var valid_602747 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602747 = validateParameter(valid_602747, JString, required = false,
                                 default = nil)
  if valid_602747 != nil:
    section.add "X-Amz-Content-Sha256", valid_602747
  var valid_602748 = header.getOrDefault("X-Amz-Algorithm")
  valid_602748 = validateParameter(valid_602748, JString, required = false,
                                 default = nil)
  if valid_602748 != nil:
    section.add "X-Amz-Algorithm", valid_602748
  var valid_602749 = header.getOrDefault("X-Amz-Signature")
  valid_602749 = validateParameter(valid_602749, JString, required = false,
                                 default = nil)
  if valid_602749 != nil:
    section.add "X-Amz-Signature", valid_602749
  var valid_602750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602750 = validateParameter(valid_602750, JString, required = false,
                                 default = nil)
  if valid_602750 != nil:
    section.add "X-Amz-SignedHeaders", valid_602750
  var valid_602751 = header.getOrDefault("X-Amz-Credential")
  valid_602751 = validateParameter(valid_602751, JString, required = false,
                                 default = nil)
  if valid_602751 != nil:
    section.add "X-Amz-Credential", valid_602751
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602752: Call_GetRebootCacheCluster_602738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_602752.validator(path, query, header, formData, body)
  let scheme = call_602752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602752.url(scheme.get, call_602752.host, call_602752.base,
                         call_602752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602752, url, valid)

proc call*(call_602753: Call_GetRebootCacheCluster_602738; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602754 = newJObject()
  add(query_602754, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToReboot != nil:
    query_602754.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_602754, "Action", newJString(Action))
  add(query_602754, "Version", newJString(Version))
  result = call_602753.call(nil, query_602754, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_602738(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_602739, base: "/",
    url: url_GetRebootCacheCluster_602740, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_602790 = ref object of OpenApiRestCall_600437
proc url_PostRemoveTagsFromResource_602792(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_602791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602793 = query.getOrDefault("Action")
  valid_602793 = validateParameter(valid_602793, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_602793 != nil:
    section.add "Action", valid_602793
  var valid_602794 = query.getOrDefault("Version")
  valid_602794 = validateParameter(valid_602794, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602794 != nil:
    section.add "Version", valid_602794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602795 = header.getOrDefault("X-Amz-Date")
  valid_602795 = validateParameter(valid_602795, JString, required = false,
                                 default = nil)
  if valid_602795 != nil:
    section.add "X-Amz-Date", valid_602795
  var valid_602796 = header.getOrDefault("X-Amz-Security-Token")
  valid_602796 = validateParameter(valid_602796, JString, required = false,
                                 default = nil)
  if valid_602796 != nil:
    section.add "X-Amz-Security-Token", valid_602796
  var valid_602797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602797 = validateParameter(valid_602797, JString, required = false,
                                 default = nil)
  if valid_602797 != nil:
    section.add "X-Amz-Content-Sha256", valid_602797
  var valid_602798 = header.getOrDefault("X-Amz-Algorithm")
  valid_602798 = validateParameter(valid_602798, JString, required = false,
                                 default = nil)
  if valid_602798 != nil:
    section.add "X-Amz-Algorithm", valid_602798
  var valid_602799 = header.getOrDefault("X-Amz-Signature")
  valid_602799 = validateParameter(valid_602799, JString, required = false,
                                 default = nil)
  if valid_602799 != nil:
    section.add "X-Amz-Signature", valid_602799
  var valid_602800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602800 = validateParameter(valid_602800, JString, required = false,
                                 default = nil)
  if valid_602800 != nil:
    section.add "X-Amz-SignedHeaders", valid_602800
  var valid_602801 = header.getOrDefault("X-Amz-Credential")
  valid_602801 = validateParameter(valid_602801, JString, required = false,
                                 default = nil)
  if valid_602801 != nil:
    section.add "X-Amz-Credential", valid_602801
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_602802 = formData.getOrDefault("TagKeys")
  valid_602802 = validateParameter(valid_602802, JArray, required = true, default = nil)
  if valid_602802 != nil:
    section.add "TagKeys", valid_602802
  var valid_602803 = formData.getOrDefault("ResourceName")
  valid_602803 = validateParameter(valid_602803, JString, required = true,
                                 default = nil)
  if valid_602803 != nil:
    section.add "ResourceName", valid_602803
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602804: Call_PostRemoveTagsFromResource_602790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_602804.validator(path, query, header, formData, body)
  let scheme = call_602804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602804.url(scheme.get, call_602804.host, call_602804.base,
                         call_602804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602804, url, valid)

proc call*(call_602805: Call_PostRemoveTagsFromResource_602790; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_602806 = newJObject()
  var formData_602807 = newJObject()
  add(query_602806, "Action", newJString(Action))
  if TagKeys != nil:
    formData_602807.add "TagKeys", TagKeys
  add(formData_602807, "ResourceName", newJString(ResourceName))
  add(query_602806, "Version", newJString(Version))
  result = call_602805.call(nil, query_602806, nil, formData_602807, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_602790(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_602791, base: "/",
    url: url_PostRemoveTagsFromResource_602792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_602773 = ref object of OpenApiRestCall_600437
proc url_GetRemoveTagsFromResource_602775(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_602774(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_602776 = query.getOrDefault("ResourceName")
  valid_602776 = validateParameter(valid_602776, JString, required = true,
                                 default = nil)
  if valid_602776 != nil:
    section.add "ResourceName", valid_602776
  var valid_602777 = query.getOrDefault("Action")
  valid_602777 = validateParameter(valid_602777, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_602777 != nil:
    section.add "Action", valid_602777
  var valid_602778 = query.getOrDefault("TagKeys")
  valid_602778 = validateParameter(valid_602778, JArray, required = true, default = nil)
  if valid_602778 != nil:
    section.add "TagKeys", valid_602778
  var valid_602779 = query.getOrDefault("Version")
  valid_602779 = validateParameter(valid_602779, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602779 != nil:
    section.add "Version", valid_602779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602780 = header.getOrDefault("X-Amz-Date")
  valid_602780 = validateParameter(valid_602780, JString, required = false,
                                 default = nil)
  if valid_602780 != nil:
    section.add "X-Amz-Date", valid_602780
  var valid_602781 = header.getOrDefault("X-Amz-Security-Token")
  valid_602781 = validateParameter(valid_602781, JString, required = false,
                                 default = nil)
  if valid_602781 != nil:
    section.add "X-Amz-Security-Token", valid_602781
  var valid_602782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602782 = validateParameter(valid_602782, JString, required = false,
                                 default = nil)
  if valid_602782 != nil:
    section.add "X-Amz-Content-Sha256", valid_602782
  var valid_602783 = header.getOrDefault("X-Amz-Algorithm")
  valid_602783 = validateParameter(valid_602783, JString, required = false,
                                 default = nil)
  if valid_602783 != nil:
    section.add "X-Amz-Algorithm", valid_602783
  var valid_602784 = header.getOrDefault("X-Amz-Signature")
  valid_602784 = validateParameter(valid_602784, JString, required = false,
                                 default = nil)
  if valid_602784 != nil:
    section.add "X-Amz-Signature", valid_602784
  var valid_602785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602785 = validateParameter(valid_602785, JString, required = false,
                                 default = nil)
  if valid_602785 != nil:
    section.add "X-Amz-SignedHeaders", valid_602785
  var valid_602786 = header.getOrDefault("X-Amz-Credential")
  valid_602786 = validateParameter(valid_602786, JString, required = false,
                                 default = nil)
  if valid_602786 != nil:
    section.add "X-Amz-Credential", valid_602786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602787: Call_GetRemoveTagsFromResource_602773; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_602787.validator(path, query, header, formData, body)
  let scheme = call_602787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602787.url(scheme.get, call_602787.host, call_602787.base,
                         call_602787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602787, url, valid)

proc call*(call_602788: Call_GetRemoveTagsFromResource_602773;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Version: string (required)
  var query_602789 = newJObject()
  add(query_602789, "ResourceName", newJString(ResourceName))
  add(query_602789, "Action", newJString(Action))
  if TagKeys != nil:
    query_602789.add "TagKeys", TagKeys
  add(query_602789, "Version", newJString(Version))
  result = call_602788.call(nil, query_602789, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_602773(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_602774, base: "/",
    url: url_GetRemoveTagsFromResource_602775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_602826 = ref object of OpenApiRestCall_600437
proc url_PostResetCacheParameterGroup_602828(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetCacheParameterGroup_602827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602829 = query.getOrDefault("Action")
  valid_602829 = validateParameter(valid_602829, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_602829 != nil:
    section.add "Action", valid_602829
  var valid_602830 = query.getOrDefault("Version")
  valid_602830 = validateParameter(valid_602830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602830 != nil:
    section.add "Version", valid_602830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602831 = header.getOrDefault("X-Amz-Date")
  valid_602831 = validateParameter(valid_602831, JString, required = false,
                                 default = nil)
  if valid_602831 != nil:
    section.add "X-Amz-Date", valid_602831
  var valid_602832 = header.getOrDefault("X-Amz-Security-Token")
  valid_602832 = validateParameter(valid_602832, JString, required = false,
                                 default = nil)
  if valid_602832 != nil:
    section.add "X-Amz-Security-Token", valid_602832
  var valid_602833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602833 = validateParameter(valid_602833, JString, required = false,
                                 default = nil)
  if valid_602833 != nil:
    section.add "X-Amz-Content-Sha256", valid_602833
  var valid_602834 = header.getOrDefault("X-Amz-Algorithm")
  valid_602834 = validateParameter(valid_602834, JString, required = false,
                                 default = nil)
  if valid_602834 != nil:
    section.add "X-Amz-Algorithm", valid_602834
  var valid_602835 = header.getOrDefault("X-Amz-Signature")
  valid_602835 = validateParameter(valid_602835, JString, required = false,
                                 default = nil)
  if valid_602835 != nil:
    section.add "X-Amz-Signature", valid_602835
  var valid_602836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602836 = validateParameter(valid_602836, JString, required = false,
                                 default = nil)
  if valid_602836 != nil:
    section.add "X-Amz-SignedHeaders", valid_602836
  var valid_602837 = header.getOrDefault("X-Amz-Credential")
  valid_602837 = validateParameter(valid_602837, JString, required = false,
                                 default = nil)
  if valid_602837 != nil:
    section.add "X-Amz-Credential", valid_602837
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602838 = formData.getOrDefault("CacheParameterGroupName")
  valid_602838 = validateParameter(valid_602838, JString, required = true,
                                 default = nil)
  if valid_602838 != nil:
    section.add "CacheParameterGroupName", valid_602838
  var valid_602839 = formData.getOrDefault("ResetAllParameters")
  valid_602839 = validateParameter(valid_602839, JBool, required = false, default = nil)
  if valid_602839 != nil:
    section.add "ResetAllParameters", valid_602839
  var valid_602840 = formData.getOrDefault("ParameterNameValues")
  valid_602840 = validateParameter(valid_602840, JArray, required = false,
                                 default = nil)
  if valid_602840 != nil:
    section.add "ParameterNameValues", valid_602840
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602841: Call_PostResetCacheParameterGroup_602826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_602841.validator(path, query, header, formData, body)
  let scheme = call_602841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602841.url(scheme.get, call_602841.host, call_602841.base,
                         call_602841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602841, url, valid)

proc call*(call_602842: Call_PostResetCacheParameterGroup_602826;
          CacheParameterGroupName: string;
          Action: string = "ResetCacheParameterGroup";
          ResetAllParameters: bool = false; ParameterNameValues: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Version: string (required)
  var query_602843 = newJObject()
  var formData_602844 = newJObject()
  add(query_602843, "Action", newJString(Action))
  add(formData_602844, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_602844, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    formData_602844.add "ParameterNameValues", ParameterNameValues
  add(query_602843, "Version", newJString(Version))
  result = call_602842.call(nil, query_602843, nil, formData_602844, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_602826(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_602827, base: "/",
    url: url_PostResetCacheParameterGroup_602828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_602808 = ref object of OpenApiRestCall_600437
proc url_GetResetCacheParameterGroup_602810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetCacheParameterGroup_602809(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602811 = query.getOrDefault("ParameterNameValues")
  valid_602811 = validateParameter(valid_602811, JArray, required = false,
                                 default = nil)
  if valid_602811 != nil:
    section.add "ParameterNameValues", valid_602811
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602812 = query.getOrDefault("CacheParameterGroupName")
  valid_602812 = validateParameter(valid_602812, JString, required = true,
                                 default = nil)
  if valid_602812 != nil:
    section.add "CacheParameterGroupName", valid_602812
  var valid_602813 = query.getOrDefault("Action")
  valid_602813 = validateParameter(valid_602813, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_602813 != nil:
    section.add "Action", valid_602813
  var valid_602814 = query.getOrDefault("ResetAllParameters")
  valid_602814 = validateParameter(valid_602814, JBool, required = false, default = nil)
  if valid_602814 != nil:
    section.add "ResetAllParameters", valid_602814
  var valid_602815 = query.getOrDefault("Version")
  valid_602815 = validateParameter(valid_602815, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602815 != nil:
    section.add "Version", valid_602815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602816 = header.getOrDefault("X-Amz-Date")
  valid_602816 = validateParameter(valid_602816, JString, required = false,
                                 default = nil)
  if valid_602816 != nil:
    section.add "X-Amz-Date", valid_602816
  var valid_602817 = header.getOrDefault("X-Amz-Security-Token")
  valid_602817 = validateParameter(valid_602817, JString, required = false,
                                 default = nil)
  if valid_602817 != nil:
    section.add "X-Amz-Security-Token", valid_602817
  var valid_602818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602818 = validateParameter(valid_602818, JString, required = false,
                                 default = nil)
  if valid_602818 != nil:
    section.add "X-Amz-Content-Sha256", valid_602818
  var valid_602819 = header.getOrDefault("X-Amz-Algorithm")
  valid_602819 = validateParameter(valid_602819, JString, required = false,
                                 default = nil)
  if valid_602819 != nil:
    section.add "X-Amz-Algorithm", valid_602819
  var valid_602820 = header.getOrDefault("X-Amz-Signature")
  valid_602820 = validateParameter(valid_602820, JString, required = false,
                                 default = nil)
  if valid_602820 != nil:
    section.add "X-Amz-Signature", valid_602820
  var valid_602821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602821 = validateParameter(valid_602821, JString, required = false,
                                 default = nil)
  if valid_602821 != nil:
    section.add "X-Amz-SignedHeaders", valid_602821
  var valid_602822 = header.getOrDefault("X-Amz-Credential")
  valid_602822 = validateParameter(valid_602822, JString, required = false,
                                 default = nil)
  if valid_602822 != nil:
    section.add "X-Amz-Credential", valid_602822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602823: Call_GetResetCacheParameterGroup_602808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_602823.validator(path, query, header, formData, body)
  let scheme = call_602823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602823.url(scheme.get, call_602823.host, call_602823.base,
                         call_602823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602823, url, valid)

proc call*(call_602824: Call_GetResetCacheParameterGroup_602808;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   Version: string (required)
  var query_602825 = newJObject()
  if ParameterNameValues != nil:
    query_602825.add "ParameterNameValues", ParameterNameValues
  add(query_602825, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602825, "Action", newJString(Action))
  add(query_602825, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_602825, "Version", newJString(Version))
  result = call_602824.call(nil, query_602825, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_602808(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_602809, base: "/",
    url: url_GetResetCacheParameterGroup_602810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_602863 = ref object of OpenApiRestCall_600437
proc url_PostRevokeCacheSecurityGroupIngress_602865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_602864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602866 = query.getOrDefault("Action")
  valid_602866 = validateParameter(valid_602866, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_602866 != nil:
    section.add "Action", valid_602866
  var valid_602867 = query.getOrDefault("Version")
  valid_602867 = validateParameter(valid_602867, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602867 != nil:
    section.add "Version", valid_602867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602868 = header.getOrDefault("X-Amz-Date")
  valid_602868 = validateParameter(valid_602868, JString, required = false,
                                 default = nil)
  if valid_602868 != nil:
    section.add "X-Amz-Date", valid_602868
  var valid_602869 = header.getOrDefault("X-Amz-Security-Token")
  valid_602869 = validateParameter(valid_602869, JString, required = false,
                                 default = nil)
  if valid_602869 != nil:
    section.add "X-Amz-Security-Token", valid_602869
  var valid_602870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602870 = validateParameter(valid_602870, JString, required = false,
                                 default = nil)
  if valid_602870 != nil:
    section.add "X-Amz-Content-Sha256", valid_602870
  var valid_602871 = header.getOrDefault("X-Amz-Algorithm")
  valid_602871 = validateParameter(valid_602871, JString, required = false,
                                 default = nil)
  if valid_602871 != nil:
    section.add "X-Amz-Algorithm", valid_602871
  var valid_602872 = header.getOrDefault("X-Amz-Signature")
  valid_602872 = validateParameter(valid_602872, JString, required = false,
                                 default = nil)
  if valid_602872 != nil:
    section.add "X-Amz-Signature", valid_602872
  var valid_602873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602873 = validateParameter(valid_602873, JString, required = false,
                                 default = nil)
  if valid_602873 != nil:
    section.add "X-Amz-SignedHeaders", valid_602873
  var valid_602874 = header.getOrDefault("X-Amz-Credential")
  valid_602874 = validateParameter(valid_602874, JString, required = false,
                                 default = nil)
  if valid_602874 != nil:
    section.add "X-Amz-Credential", valid_602874
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_602875 = formData.getOrDefault("CacheSecurityGroupName")
  valid_602875 = validateParameter(valid_602875, JString, required = true,
                                 default = nil)
  if valid_602875 != nil:
    section.add "CacheSecurityGroupName", valid_602875
  var valid_602876 = formData.getOrDefault("EC2SecurityGroupName")
  valid_602876 = validateParameter(valid_602876, JString, required = true,
                                 default = nil)
  if valid_602876 != nil:
    section.add "EC2SecurityGroupName", valid_602876
  var valid_602877 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602877 = validateParameter(valid_602877, JString, required = true,
                                 default = nil)
  if valid_602877 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602877
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602878: Call_PostRevokeCacheSecurityGroupIngress_602863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_602878.validator(path, query, header, formData, body)
  let scheme = call_602878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602878.url(scheme.get, call_602878.host, call_602878.base,
                         call_602878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602878, url, valid)

proc call*(call_602879: Call_PostRevokeCacheSecurityGroupIngress_602863;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  var query_602880 = newJObject()
  var formData_602881 = newJObject()
  add(formData_602881, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_602880, "Action", newJString(Action))
  add(formData_602881, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_602880, "Version", newJString(Version))
  add(formData_602881, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_602879.call(nil, query_602880, nil, formData_602881, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_602863(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_602864, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_602865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_602845 = ref object of OpenApiRestCall_600437
proc url_GetRevokeCacheSecurityGroupIngress_602847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_602846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_602848 = query.getOrDefault("CacheSecurityGroupName")
  valid_602848 = validateParameter(valid_602848, JString, required = true,
                                 default = nil)
  if valid_602848 != nil:
    section.add "CacheSecurityGroupName", valid_602848
  var valid_602849 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602849 = validateParameter(valid_602849, JString, required = true,
                                 default = nil)
  if valid_602849 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602849
  var valid_602850 = query.getOrDefault("Action")
  valid_602850 = validateParameter(valid_602850, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_602850 != nil:
    section.add "Action", valid_602850
  var valid_602851 = query.getOrDefault("EC2SecurityGroupName")
  valid_602851 = validateParameter(valid_602851, JString, required = true,
                                 default = nil)
  if valid_602851 != nil:
    section.add "EC2SecurityGroupName", valid_602851
  var valid_602852 = query.getOrDefault("Version")
  valid_602852 = validateParameter(valid_602852, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602852 != nil:
    section.add "Version", valid_602852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602853 = header.getOrDefault("X-Amz-Date")
  valid_602853 = validateParameter(valid_602853, JString, required = false,
                                 default = nil)
  if valid_602853 != nil:
    section.add "X-Amz-Date", valid_602853
  var valid_602854 = header.getOrDefault("X-Amz-Security-Token")
  valid_602854 = validateParameter(valid_602854, JString, required = false,
                                 default = nil)
  if valid_602854 != nil:
    section.add "X-Amz-Security-Token", valid_602854
  var valid_602855 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602855 = validateParameter(valid_602855, JString, required = false,
                                 default = nil)
  if valid_602855 != nil:
    section.add "X-Amz-Content-Sha256", valid_602855
  var valid_602856 = header.getOrDefault("X-Amz-Algorithm")
  valid_602856 = validateParameter(valid_602856, JString, required = false,
                                 default = nil)
  if valid_602856 != nil:
    section.add "X-Amz-Algorithm", valid_602856
  var valid_602857 = header.getOrDefault("X-Amz-Signature")
  valid_602857 = validateParameter(valid_602857, JString, required = false,
                                 default = nil)
  if valid_602857 != nil:
    section.add "X-Amz-Signature", valid_602857
  var valid_602858 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602858 = validateParameter(valid_602858, JString, required = false,
                                 default = nil)
  if valid_602858 != nil:
    section.add "X-Amz-SignedHeaders", valid_602858
  var valid_602859 = header.getOrDefault("X-Amz-Credential")
  valid_602859 = validateParameter(valid_602859, JString, required = false,
                                 default = nil)
  if valid_602859 != nil:
    section.add "X-Amz-Credential", valid_602859
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602860: Call_GetRevokeCacheSecurityGroupIngress_602845;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_602860.validator(path, query, header, formData, body)
  let scheme = call_602860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602860.url(scheme.get, call_602860.host, call_602860.base,
                         call_602860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602860, url, valid)

proc call*(call_602861: Call_GetRevokeCacheSecurityGroupIngress_602845;
          CacheSecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          EC2SecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: string (required)
  var query_602862 = newJObject()
  add(query_602862, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_602862, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_602862, "Action", newJString(Action))
  add(query_602862, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_602862, "Version", newJString(Version))
  result = call_602861.call(nil, query_602862, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_602845(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_602846, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_602847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_602899 = ref object of OpenApiRestCall_600437
proc url_PostTestFailover_602901(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTestFailover_602900(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602902 = query.getOrDefault("Action")
  valid_602902 = validateParameter(valid_602902, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_602902 != nil:
    section.add "Action", valid_602902
  var valid_602903 = query.getOrDefault("Version")
  valid_602903 = validateParameter(valid_602903, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602903 != nil:
    section.add "Version", valid_602903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602904 = header.getOrDefault("X-Amz-Date")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Date", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Security-Token")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Security-Token", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-Content-Sha256", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Algorithm")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Algorithm", valid_602907
  var valid_602908 = header.getOrDefault("X-Amz-Signature")
  valid_602908 = validateParameter(valid_602908, JString, required = false,
                                 default = nil)
  if valid_602908 != nil:
    section.add "X-Amz-Signature", valid_602908
  var valid_602909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-SignedHeaders", valid_602909
  var valid_602910 = header.getOrDefault("X-Amz-Credential")
  valid_602910 = validateParameter(valid_602910, JString, required = false,
                                 default = nil)
  if valid_602910 != nil:
    section.add "X-Amz-Credential", valid_602910
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_602911 = formData.getOrDefault("NodeGroupId")
  valid_602911 = validateParameter(valid_602911, JString, required = true,
                                 default = nil)
  if valid_602911 != nil:
    section.add "NodeGroupId", valid_602911
  var valid_602912 = formData.getOrDefault("ReplicationGroupId")
  valid_602912 = validateParameter(valid_602912, JString, required = true,
                                 default = nil)
  if valid_602912 != nil:
    section.add "ReplicationGroupId", valid_602912
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602913: Call_PostTestFailover_602899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_602913.validator(path, query, header, formData, body)
  let scheme = call_602913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602913.url(scheme.get, call_602913.host, call_602913.base,
                         call_602913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602913, url, valid)

proc call*(call_602914: Call_PostTestFailover_602899; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602915 = newJObject()
  var formData_602916 = newJObject()
  add(formData_602916, "NodeGroupId", newJString(NodeGroupId))
  add(formData_602916, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602915, "Action", newJString(Action))
  add(query_602915, "Version", newJString(Version))
  result = call_602914.call(nil, query_602915, nil, formData_602916, nil)

var postTestFailover* = Call_PostTestFailover_602899(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_602900,
    base: "/", url: url_PostTestFailover_602901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_602882 = ref object of OpenApiRestCall_600437
proc url_GetTestFailover_602884(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTestFailover_602883(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NodeGroupId` field"
  var valid_602885 = query.getOrDefault("NodeGroupId")
  valid_602885 = validateParameter(valid_602885, JString, required = true,
                                 default = nil)
  if valid_602885 != nil:
    section.add "NodeGroupId", valid_602885
  var valid_602886 = query.getOrDefault("Action")
  valid_602886 = validateParameter(valid_602886, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_602886 != nil:
    section.add "Action", valid_602886
  var valid_602887 = query.getOrDefault("ReplicationGroupId")
  valid_602887 = validateParameter(valid_602887, JString, required = true,
                                 default = nil)
  if valid_602887 != nil:
    section.add "ReplicationGroupId", valid_602887
  var valid_602888 = query.getOrDefault("Version")
  valid_602888 = validateParameter(valid_602888, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602888 != nil:
    section.add "Version", valid_602888
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602889 = header.getOrDefault("X-Amz-Date")
  valid_602889 = validateParameter(valid_602889, JString, required = false,
                                 default = nil)
  if valid_602889 != nil:
    section.add "X-Amz-Date", valid_602889
  var valid_602890 = header.getOrDefault("X-Amz-Security-Token")
  valid_602890 = validateParameter(valid_602890, JString, required = false,
                                 default = nil)
  if valid_602890 != nil:
    section.add "X-Amz-Security-Token", valid_602890
  var valid_602891 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602891 = validateParameter(valid_602891, JString, required = false,
                                 default = nil)
  if valid_602891 != nil:
    section.add "X-Amz-Content-Sha256", valid_602891
  var valid_602892 = header.getOrDefault("X-Amz-Algorithm")
  valid_602892 = validateParameter(valid_602892, JString, required = false,
                                 default = nil)
  if valid_602892 != nil:
    section.add "X-Amz-Algorithm", valid_602892
  var valid_602893 = header.getOrDefault("X-Amz-Signature")
  valid_602893 = validateParameter(valid_602893, JString, required = false,
                                 default = nil)
  if valid_602893 != nil:
    section.add "X-Amz-Signature", valid_602893
  var valid_602894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602894 = validateParameter(valid_602894, JString, required = false,
                                 default = nil)
  if valid_602894 != nil:
    section.add "X-Amz-SignedHeaders", valid_602894
  var valid_602895 = header.getOrDefault("X-Amz-Credential")
  valid_602895 = validateParameter(valid_602895, JString, required = false,
                                 default = nil)
  if valid_602895 != nil:
    section.add "X-Amz-Credential", valid_602895
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602896: Call_GetTestFailover_602882; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_602896.validator(path, query, header, formData, body)
  let scheme = call_602896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602896.url(scheme.get, call_602896.host, call_602896.base,
                         call_602896.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602896, url, valid)

proc call*(call_602897: Call_GetTestFailover_602882; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  var query_602898 = newJObject()
  add(query_602898, "NodeGroupId", newJString(NodeGroupId))
  add(query_602898, "Action", newJString(Action))
  add(query_602898, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602898, "Version", newJString(Version))
  result = call_602897.call(nil, query_602898, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_602882(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_602883,
    base: "/", url: url_GetTestFailover_602884, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
