
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_601389 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_601389](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_601389): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_601999 = ref object of OpenApiRestCall_601389
proc url_PostAddTagsToResource_602001(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_602000(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602002 = query.getOrDefault("Action")
  valid_602002 = validateParameter(valid_602002, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_602002 != nil:
    section.add "Action", valid_602002
  var valid_602003 = query.getOrDefault("Version")
  valid_602003 = validateParameter(valid_602003, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602003 != nil:
    section.add "Version", valid_602003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602004 = header.getOrDefault("X-Amz-Signature")
  valid_602004 = validateParameter(valid_602004, JString, required = false,
                                 default = nil)
  if valid_602004 != nil:
    section.add "X-Amz-Signature", valid_602004
  var valid_602005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602005 = validateParameter(valid_602005, JString, required = false,
                                 default = nil)
  if valid_602005 != nil:
    section.add "X-Amz-Content-Sha256", valid_602005
  var valid_602006 = header.getOrDefault("X-Amz-Date")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Date", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-Credential")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-Credential", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Security-Token")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Security-Token", valid_602008
  var valid_602009 = header.getOrDefault("X-Amz-Algorithm")
  valid_602009 = validateParameter(valid_602009, JString, required = false,
                                 default = nil)
  if valid_602009 != nil:
    section.add "X-Amz-Algorithm", valid_602009
  var valid_602010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602010 = validateParameter(valid_602010, JString, required = false,
                                 default = nil)
  if valid_602010 != nil:
    section.add "X-Amz-SignedHeaders", valid_602010
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_602011 = formData.getOrDefault("Tags")
  valid_602011 = validateParameter(valid_602011, JArray, required = true, default = nil)
  if valid_602011 != nil:
    section.add "Tags", valid_602011
  var valid_602012 = formData.getOrDefault("ResourceName")
  valid_602012 = validateParameter(valid_602012, JString, required = true,
                                 default = nil)
  if valid_602012 != nil:
    section.add "ResourceName", valid_602012
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602013: Call_PostAddTagsToResource_601999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_602013.validator(path, query, header, formData, body)
  let scheme = call_602013.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602013.url(scheme.get, call_602013.host, call_602013.base,
                         call_602013.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602013, url, valid)

proc call*(call_602014: Call_PostAddTagsToResource_601999; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_602015 = newJObject()
  var formData_602016 = newJObject()
  add(query_602015, "Action", newJString(Action))
  if Tags != nil:
    formData_602016.add "Tags", Tags
  add(query_602015, "Version", newJString(Version))
  add(formData_602016, "ResourceName", newJString(ResourceName))
  result = call_602014.call(nil, query_602015, nil, formData_602016, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_601999(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_602000, base: "/",
    url: url_PostAddTagsToResource_602001, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_601727 = ref object of OpenApiRestCall_601389
proc url_GetAddTagsToResource_601729(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_601728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_601841 = query.getOrDefault("Tags")
  valid_601841 = validateParameter(valid_601841, JArray, required = true, default = nil)
  if valid_601841 != nil:
    section.add "Tags", valid_601841
  var valid_601842 = query.getOrDefault("ResourceName")
  valid_601842 = validateParameter(valid_601842, JString, required = true,
                                 default = nil)
  if valid_601842 != nil:
    section.add "ResourceName", valid_601842
  var valid_601856 = query.getOrDefault("Action")
  valid_601856 = validateParameter(valid_601856, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_601856 != nil:
    section.add "Action", valid_601856
  var valid_601857 = query.getOrDefault("Version")
  valid_601857 = validateParameter(valid_601857, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_601857 != nil:
    section.add "Version", valid_601857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_601858 = header.getOrDefault("X-Amz-Signature")
  valid_601858 = validateParameter(valid_601858, JString, required = false,
                                 default = nil)
  if valid_601858 != nil:
    section.add "X-Amz-Signature", valid_601858
  var valid_601859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "X-Amz-Content-Sha256", valid_601859
  var valid_601860 = header.getOrDefault("X-Amz-Date")
  valid_601860 = validateParameter(valid_601860, JString, required = false,
                                 default = nil)
  if valid_601860 != nil:
    section.add "X-Amz-Date", valid_601860
  var valid_601861 = header.getOrDefault("X-Amz-Credential")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-Credential", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Security-Token")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Security-Token", valid_601862
  var valid_601863 = header.getOrDefault("X-Amz-Algorithm")
  valid_601863 = validateParameter(valid_601863, JString, required = false,
                                 default = nil)
  if valid_601863 != nil:
    section.add "X-Amz-Algorithm", valid_601863
  var valid_601864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601864 = validateParameter(valid_601864, JString, required = false,
                                 default = nil)
  if valid_601864 != nil:
    section.add "X-Amz-SignedHeaders", valid_601864
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601887: Call_GetAddTagsToResource_601727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_601887.validator(path, query, header, formData, body)
  let scheme = call_601887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601887.url(scheme.get, call_601887.host, call_601887.base,
                         call_601887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601887, url, valid)

proc call*(call_601958: Call_GetAddTagsToResource_601727; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601959 = newJObject()
  if Tags != nil:
    query_601959.add "Tags", Tags
  add(query_601959, "ResourceName", newJString(ResourceName))
  add(query_601959, "Action", newJString(Action))
  add(query_601959, "Version", newJString(Version))
  result = call_601958.call(nil, query_601959, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_601727(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_601728, base: "/",
    url: url_GetAddTagsToResource_601729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_602035 = ref object of OpenApiRestCall_601389
proc url_PostAuthorizeCacheSecurityGroupIngress_602037(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_602036(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602038 = query.getOrDefault("Action")
  valid_602038 = validateParameter(valid_602038, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_602038 != nil:
    section.add "Action", valid_602038
  var valid_602039 = query.getOrDefault("Version")
  valid_602039 = validateParameter(valid_602039, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602039 != nil:
    section.add "Version", valid_602039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602040 = header.getOrDefault("X-Amz-Signature")
  valid_602040 = validateParameter(valid_602040, JString, required = false,
                                 default = nil)
  if valid_602040 != nil:
    section.add "X-Amz-Signature", valid_602040
  var valid_602041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602041 = validateParameter(valid_602041, JString, required = false,
                                 default = nil)
  if valid_602041 != nil:
    section.add "X-Amz-Content-Sha256", valid_602041
  var valid_602042 = header.getOrDefault("X-Amz-Date")
  valid_602042 = validateParameter(valid_602042, JString, required = false,
                                 default = nil)
  if valid_602042 != nil:
    section.add "X-Amz-Date", valid_602042
  var valid_602043 = header.getOrDefault("X-Amz-Credential")
  valid_602043 = validateParameter(valid_602043, JString, required = false,
                                 default = nil)
  if valid_602043 != nil:
    section.add "X-Amz-Credential", valid_602043
  var valid_602044 = header.getOrDefault("X-Amz-Security-Token")
  valid_602044 = validateParameter(valid_602044, JString, required = false,
                                 default = nil)
  if valid_602044 != nil:
    section.add "X-Amz-Security-Token", valid_602044
  var valid_602045 = header.getOrDefault("X-Amz-Algorithm")
  valid_602045 = validateParameter(valid_602045, JString, required = false,
                                 default = nil)
  if valid_602045 != nil:
    section.add "X-Amz-Algorithm", valid_602045
  var valid_602046 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602046 = validateParameter(valid_602046, JString, required = false,
                                 default = nil)
  if valid_602046 != nil:
    section.add "X-Amz-SignedHeaders", valid_602046
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_602047 = formData.getOrDefault("CacheSecurityGroupName")
  valid_602047 = validateParameter(valid_602047, JString, required = true,
                                 default = nil)
  if valid_602047 != nil:
    section.add "CacheSecurityGroupName", valid_602047
  var valid_602048 = formData.getOrDefault("EC2SecurityGroupName")
  valid_602048 = validateParameter(valid_602048, JString, required = true,
                                 default = nil)
  if valid_602048 != nil:
    section.add "EC2SecurityGroupName", valid_602048
  var valid_602049 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602049 = validateParameter(valid_602049, JString, required = true,
                                 default = nil)
  if valid_602049 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602049
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602050: Call_PostAuthorizeCacheSecurityGroupIngress_602035;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_602050.validator(path, query, header, formData, body)
  let scheme = call_602050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602050.url(scheme.get, call_602050.host, call_602050.base,
                         call_602050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602050, url, valid)

proc call*(call_602051: Call_PostAuthorizeCacheSecurityGroupIngress_602035;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602052 = newJObject()
  var formData_602053 = newJObject()
  add(formData_602053, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_602053, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_602053, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_602052, "Action", newJString(Action))
  add(query_602052, "Version", newJString(Version))
  result = call_602051.call(nil, query_602052, nil, formData_602053, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_602035(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_602036, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_602037,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_602017 = ref object of OpenApiRestCall_601389
proc url_GetAuthorizeCacheSecurityGroupIngress_602019(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_602018(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_602020 = query.getOrDefault("EC2SecurityGroupName")
  valid_602020 = validateParameter(valid_602020, JString, required = true,
                                 default = nil)
  if valid_602020 != nil:
    section.add "EC2SecurityGroupName", valid_602020
  var valid_602021 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602021 = validateParameter(valid_602021, JString, required = true,
                                 default = nil)
  if valid_602021 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602021
  var valid_602022 = query.getOrDefault("Action")
  valid_602022 = validateParameter(valid_602022, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_602022 != nil:
    section.add "Action", valid_602022
  var valid_602023 = query.getOrDefault("CacheSecurityGroupName")
  valid_602023 = validateParameter(valid_602023, JString, required = true,
                                 default = nil)
  if valid_602023 != nil:
    section.add "CacheSecurityGroupName", valid_602023
  var valid_602024 = query.getOrDefault("Version")
  valid_602024 = validateParameter(valid_602024, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602024 != nil:
    section.add "Version", valid_602024
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602025 = header.getOrDefault("X-Amz-Signature")
  valid_602025 = validateParameter(valid_602025, JString, required = false,
                                 default = nil)
  if valid_602025 != nil:
    section.add "X-Amz-Signature", valid_602025
  var valid_602026 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602026 = validateParameter(valid_602026, JString, required = false,
                                 default = nil)
  if valid_602026 != nil:
    section.add "X-Amz-Content-Sha256", valid_602026
  var valid_602027 = header.getOrDefault("X-Amz-Date")
  valid_602027 = validateParameter(valid_602027, JString, required = false,
                                 default = nil)
  if valid_602027 != nil:
    section.add "X-Amz-Date", valid_602027
  var valid_602028 = header.getOrDefault("X-Amz-Credential")
  valid_602028 = validateParameter(valid_602028, JString, required = false,
                                 default = nil)
  if valid_602028 != nil:
    section.add "X-Amz-Credential", valid_602028
  var valid_602029 = header.getOrDefault("X-Amz-Security-Token")
  valid_602029 = validateParameter(valid_602029, JString, required = false,
                                 default = nil)
  if valid_602029 != nil:
    section.add "X-Amz-Security-Token", valid_602029
  var valid_602030 = header.getOrDefault("X-Amz-Algorithm")
  valid_602030 = validateParameter(valid_602030, JString, required = false,
                                 default = nil)
  if valid_602030 != nil:
    section.add "X-Amz-Algorithm", valid_602030
  var valid_602031 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602031 = validateParameter(valid_602031, JString, required = false,
                                 default = nil)
  if valid_602031 != nil:
    section.add "X-Amz-SignedHeaders", valid_602031
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602032: Call_GetAuthorizeCacheSecurityGroupIngress_602017;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_602032.validator(path, query, header, formData, body)
  let scheme = call_602032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602032.url(scheme.get, call_602032.host, call_602032.base,
                         call_602032.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602032, url, valid)

proc call*(call_602033: Call_GetAuthorizeCacheSecurityGroupIngress_602017;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_602034 = newJObject()
  add(query_602034, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_602034, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_602034, "Action", newJString(Action))
  add(query_602034, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_602034, "Version", newJString(Version))
  result = call_602033.call(nil, query_602034, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_602017(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_602018, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_602019,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_602072 = ref object of OpenApiRestCall_601389
proc url_PostBatchApplyUpdateAction_602074(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchApplyUpdateAction_602073(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602075 = query.getOrDefault("Action")
  valid_602075 = validateParameter(valid_602075, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_602075 != nil:
    section.add "Action", valid_602075
  var valid_602076 = query.getOrDefault("Version")
  valid_602076 = validateParameter(valid_602076, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602076 != nil:
    section.add "Version", valid_602076
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602077 = header.getOrDefault("X-Amz-Signature")
  valid_602077 = validateParameter(valid_602077, JString, required = false,
                                 default = nil)
  if valid_602077 != nil:
    section.add "X-Amz-Signature", valid_602077
  var valid_602078 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602078 = validateParameter(valid_602078, JString, required = false,
                                 default = nil)
  if valid_602078 != nil:
    section.add "X-Amz-Content-Sha256", valid_602078
  var valid_602079 = header.getOrDefault("X-Amz-Date")
  valid_602079 = validateParameter(valid_602079, JString, required = false,
                                 default = nil)
  if valid_602079 != nil:
    section.add "X-Amz-Date", valid_602079
  var valid_602080 = header.getOrDefault("X-Amz-Credential")
  valid_602080 = validateParameter(valid_602080, JString, required = false,
                                 default = nil)
  if valid_602080 != nil:
    section.add "X-Amz-Credential", valid_602080
  var valid_602081 = header.getOrDefault("X-Amz-Security-Token")
  valid_602081 = validateParameter(valid_602081, JString, required = false,
                                 default = nil)
  if valid_602081 != nil:
    section.add "X-Amz-Security-Token", valid_602081
  var valid_602082 = header.getOrDefault("X-Amz-Algorithm")
  valid_602082 = validateParameter(valid_602082, JString, required = false,
                                 default = nil)
  if valid_602082 != nil:
    section.add "X-Amz-Algorithm", valid_602082
  var valid_602083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602083 = validateParameter(valid_602083, JString, required = false,
                                 default = nil)
  if valid_602083 != nil:
    section.add "X-Amz-SignedHeaders", valid_602083
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_602084 = formData.getOrDefault("ServiceUpdateName")
  valid_602084 = validateParameter(valid_602084, JString, required = true,
                                 default = nil)
  if valid_602084 != nil:
    section.add "ServiceUpdateName", valid_602084
  var valid_602085 = formData.getOrDefault("ReplicationGroupIds")
  valid_602085 = validateParameter(valid_602085, JArray, required = false,
                                 default = nil)
  if valid_602085 != nil:
    section.add "ReplicationGroupIds", valid_602085
  var valid_602086 = formData.getOrDefault("CacheClusterIds")
  valid_602086 = validateParameter(valid_602086, JArray, required = false,
                                 default = nil)
  if valid_602086 != nil:
    section.add "CacheClusterIds", valid_602086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602087: Call_PostBatchApplyUpdateAction_602072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_602087.validator(path, query, header, formData, body)
  let scheme = call_602087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602087.url(scheme.get, call_602087.host, call_602087.base,
                         call_602087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602087, url, valid)

proc call*(call_602088: Call_PostBatchApplyUpdateAction_602072;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602089 = newJObject()
  var formData_602090 = newJObject()
  add(formData_602090, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_602090.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_602090.add "CacheClusterIds", CacheClusterIds
  add(query_602089, "Action", newJString(Action))
  add(query_602089, "Version", newJString(Version))
  result = call_602088.call(nil, query_602089, nil, formData_602090, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_602072(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_602073, base: "/",
    url: url_PostBatchApplyUpdateAction_602074,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_602054 = ref object of OpenApiRestCall_601389
proc url_GetBatchApplyUpdateAction_602056(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchApplyUpdateAction_602055(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_602057 = query.getOrDefault("ServiceUpdateName")
  valid_602057 = validateParameter(valid_602057, JString, required = true,
                                 default = nil)
  if valid_602057 != nil:
    section.add "ServiceUpdateName", valid_602057
  var valid_602058 = query.getOrDefault("Action")
  valid_602058 = validateParameter(valid_602058, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_602058 != nil:
    section.add "Action", valid_602058
  var valid_602059 = query.getOrDefault("CacheClusterIds")
  valid_602059 = validateParameter(valid_602059, JArray, required = false,
                                 default = nil)
  if valid_602059 != nil:
    section.add "CacheClusterIds", valid_602059
  var valid_602060 = query.getOrDefault("ReplicationGroupIds")
  valid_602060 = validateParameter(valid_602060, JArray, required = false,
                                 default = nil)
  if valid_602060 != nil:
    section.add "ReplicationGroupIds", valid_602060
  var valid_602061 = query.getOrDefault("Version")
  valid_602061 = validateParameter(valid_602061, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602061 != nil:
    section.add "Version", valid_602061
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602062 = header.getOrDefault("X-Amz-Signature")
  valid_602062 = validateParameter(valid_602062, JString, required = false,
                                 default = nil)
  if valid_602062 != nil:
    section.add "X-Amz-Signature", valid_602062
  var valid_602063 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602063 = validateParameter(valid_602063, JString, required = false,
                                 default = nil)
  if valid_602063 != nil:
    section.add "X-Amz-Content-Sha256", valid_602063
  var valid_602064 = header.getOrDefault("X-Amz-Date")
  valid_602064 = validateParameter(valid_602064, JString, required = false,
                                 default = nil)
  if valid_602064 != nil:
    section.add "X-Amz-Date", valid_602064
  var valid_602065 = header.getOrDefault("X-Amz-Credential")
  valid_602065 = validateParameter(valid_602065, JString, required = false,
                                 default = nil)
  if valid_602065 != nil:
    section.add "X-Amz-Credential", valid_602065
  var valid_602066 = header.getOrDefault("X-Amz-Security-Token")
  valid_602066 = validateParameter(valid_602066, JString, required = false,
                                 default = nil)
  if valid_602066 != nil:
    section.add "X-Amz-Security-Token", valid_602066
  var valid_602067 = header.getOrDefault("X-Amz-Algorithm")
  valid_602067 = validateParameter(valid_602067, JString, required = false,
                                 default = nil)
  if valid_602067 != nil:
    section.add "X-Amz-Algorithm", valid_602067
  var valid_602068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602068 = validateParameter(valid_602068, JString, required = false,
                                 default = nil)
  if valid_602068 != nil:
    section.add "X-Amz-SignedHeaders", valid_602068
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602069: Call_GetBatchApplyUpdateAction_602054; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_602069.validator(path, query, header, formData, body)
  let scheme = call_602069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602069.url(scheme.get, call_602069.host, call_602069.base,
                         call_602069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602069, url, valid)

proc call*(call_602070: Call_GetBatchApplyUpdateAction_602054;
          ServiceUpdateName: string; Action: string = "BatchApplyUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_602071 = newJObject()
  add(query_602071, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_602071, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_602071.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_602071.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_602071, "Version", newJString(Version))
  result = call_602070.call(nil, query_602071, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_602054(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_602055, base: "/",
    url: url_GetBatchApplyUpdateAction_602056,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_602109 = ref object of OpenApiRestCall_601389
proc url_PostBatchStopUpdateAction_602111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchStopUpdateAction_602110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602112 = query.getOrDefault("Action")
  valid_602112 = validateParameter(valid_602112, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_602112 != nil:
    section.add "Action", valid_602112
  var valid_602113 = query.getOrDefault("Version")
  valid_602113 = validateParameter(valid_602113, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602113 != nil:
    section.add "Version", valid_602113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602114 = header.getOrDefault("X-Amz-Signature")
  valid_602114 = validateParameter(valid_602114, JString, required = false,
                                 default = nil)
  if valid_602114 != nil:
    section.add "X-Amz-Signature", valid_602114
  var valid_602115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602115 = validateParameter(valid_602115, JString, required = false,
                                 default = nil)
  if valid_602115 != nil:
    section.add "X-Amz-Content-Sha256", valid_602115
  var valid_602116 = header.getOrDefault("X-Amz-Date")
  valid_602116 = validateParameter(valid_602116, JString, required = false,
                                 default = nil)
  if valid_602116 != nil:
    section.add "X-Amz-Date", valid_602116
  var valid_602117 = header.getOrDefault("X-Amz-Credential")
  valid_602117 = validateParameter(valid_602117, JString, required = false,
                                 default = nil)
  if valid_602117 != nil:
    section.add "X-Amz-Credential", valid_602117
  var valid_602118 = header.getOrDefault("X-Amz-Security-Token")
  valid_602118 = validateParameter(valid_602118, JString, required = false,
                                 default = nil)
  if valid_602118 != nil:
    section.add "X-Amz-Security-Token", valid_602118
  var valid_602119 = header.getOrDefault("X-Amz-Algorithm")
  valid_602119 = validateParameter(valid_602119, JString, required = false,
                                 default = nil)
  if valid_602119 != nil:
    section.add "X-Amz-Algorithm", valid_602119
  var valid_602120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602120 = validateParameter(valid_602120, JString, required = false,
                                 default = nil)
  if valid_602120 != nil:
    section.add "X-Amz-SignedHeaders", valid_602120
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_602121 = formData.getOrDefault("ServiceUpdateName")
  valid_602121 = validateParameter(valid_602121, JString, required = true,
                                 default = nil)
  if valid_602121 != nil:
    section.add "ServiceUpdateName", valid_602121
  var valid_602122 = formData.getOrDefault("ReplicationGroupIds")
  valid_602122 = validateParameter(valid_602122, JArray, required = false,
                                 default = nil)
  if valid_602122 != nil:
    section.add "ReplicationGroupIds", valid_602122
  var valid_602123 = formData.getOrDefault("CacheClusterIds")
  valid_602123 = validateParameter(valid_602123, JArray, required = false,
                                 default = nil)
  if valid_602123 != nil:
    section.add "CacheClusterIds", valid_602123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602124: Call_PostBatchStopUpdateAction_602109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_602124.validator(path, query, header, formData, body)
  let scheme = call_602124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602124.url(scheme.get, call_602124.host, call_602124.base,
                         call_602124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602124, url, valid)

proc call*(call_602125: Call_PostBatchStopUpdateAction_602109;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil; Action: string = "BatchStopUpdateAction";
          Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602126 = newJObject()
  var formData_602127 = newJObject()
  add(formData_602127, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_602127.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_602127.add "CacheClusterIds", CacheClusterIds
  add(query_602126, "Action", newJString(Action))
  add(query_602126, "Version", newJString(Version))
  result = call_602125.call(nil, query_602126, nil, formData_602127, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_602109(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_602110, base: "/",
    url: url_PostBatchStopUpdateAction_602111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_602091 = ref object of OpenApiRestCall_601389
proc url_GetBatchStopUpdateAction_602093(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchStopUpdateAction_602092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_602094 = query.getOrDefault("ServiceUpdateName")
  valid_602094 = validateParameter(valid_602094, JString, required = true,
                                 default = nil)
  if valid_602094 != nil:
    section.add "ServiceUpdateName", valid_602094
  var valid_602095 = query.getOrDefault("Action")
  valid_602095 = validateParameter(valid_602095, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_602095 != nil:
    section.add "Action", valid_602095
  var valid_602096 = query.getOrDefault("CacheClusterIds")
  valid_602096 = validateParameter(valid_602096, JArray, required = false,
                                 default = nil)
  if valid_602096 != nil:
    section.add "CacheClusterIds", valid_602096
  var valid_602097 = query.getOrDefault("ReplicationGroupIds")
  valid_602097 = validateParameter(valid_602097, JArray, required = false,
                                 default = nil)
  if valid_602097 != nil:
    section.add "ReplicationGroupIds", valid_602097
  var valid_602098 = query.getOrDefault("Version")
  valid_602098 = validateParameter(valid_602098, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602098 != nil:
    section.add "Version", valid_602098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602099 = header.getOrDefault("X-Amz-Signature")
  valid_602099 = validateParameter(valid_602099, JString, required = false,
                                 default = nil)
  if valid_602099 != nil:
    section.add "X-Amz-Signature", valid_602099
  var valid_602100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602100 = validateParameter(valid_602100, JString, required = false,
                                 default = nil)
  if valid_602100 != nil:
    section.add "X-Amz-Content-Sha256", valid_602100
  var valid_602101 = header.getOrDefault("X-Amz-Date")
  valid_602101 = validateParameter(valid_602101, JString, required = false,
                                 default = nil)
  if valid_602101 != nil:
    section.add "X-Amz-Date", valid_602101
  var valid_602102 = header.getOrDefault("X-Amz-Credential")
  valid_602102 = validateParameter(valid_602102, JString, required = false,
                                 default = nil)
  if valid_602102 != nil:
    section.add "X-Amz-Credential", valid_602102
  var valid_602103 = header.getOrDefault("X-Amz-Security-Token")
  valid_602103 = validateParameter(valid_602103, JString, required = false,
                                 default = nil)
  if valid_602103 != nil:
    section.add "X-Amz-Security-Token", valid_602103
  var valid_602104 = header.getOrDefault("X-Amz-Algorithm")
  valid_602104 = validateParameter(valid_602104, JString, required = false,
                                 default = nil)
  if valid_602104 != nil:
    section.add "X-Amz-Algorithm", valid_602104
  var valid_602105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602105 = validateParameter(valid_602105, JString, required = false,
                                 default = nil)
  if valid_602105 != nil:
    section.add "X-Amz-SignedHeaders", valid_602105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602106: Call_GetBatchStopUpdateAction_602091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_602106.validator(path, query, header, formData, body)
  let scheme = call_602106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602106.url(scheme.get, call_602106.host, call_602106.base,
                         call_602106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602106, url, valid)

proc call*(call_602107: Call_GetBatchStopUpdateAction_602091;
          ServiceUpdateName: string; Action: string = "BatchStopUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_602108 = newJObject()
  add(query_602108, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_602108, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_602108.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_602108.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_602108, "Version", newJString(Version))
  result = call_602107.call(nil, query_602108, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_602091(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_602092, base: "/",
    url: url_GetBatchStopUpdateAction_602093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteMigration_602145 = ref object of OpenApiRestCall_601389
proc url_PostCompleteMigration_602147(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteMigration_602146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602148 = query.getOrDefault("Action")
  valid_602148 = validateParameter(valid_602148, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_602148 != nil:
    section.add "Action", valid_602148
  var valid_602149 = query.getOrDefault("Version")
  valid_602149 = validateParameter(valid_602149, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602149 != nil:
    section.add "Version", valid_602149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602150 = header.getOrDefault("X-Amz-Signature")
  valid_602150 = validateParameter(valid_602150, JString, required = false,
                                 default = nil)
  if valid_602150 != nil:
    section.add "X-Amz-Signature", valid_602150
  var valid_602151 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602151 = validateParameter(valid_602151, JString, required = false,
                                 default = nil)
  if valid_602151 != nil:
    section.add "X-Amz-Content-Sha256", valid_602151
  var valid_602152 = header.getOrDefault("X-Amz-Date")
  valid_602152 = validateParameter(valid_602152, JString, required = false,
                                 default = nil)
  if valid_602152 != nil:
    section.add "X-Amz-Date", valid_602152
  var valid_602153 = header.getOrDefault("X-Amz-Credential")
  valid_602153 = validateParameter(valid_602153, JString, required = false,
                                 default = nil)
  if valid_602153 != nil:
    section.add "X-Amz-Credential", valid_602153
  var valid_602154 = header.getOrDefault("X-Amz-Security-Token")
  valid_602154 = validateParameter(valid_602154, JString, required = false,
                                 default = nil)
  if valid_602154 != nil:
    section.add "X-Amz-Security-Token", valid_602154
  var valid_602155 = header.getOrDefault("X-Amz-Algorithm")
  valid_602155 = validateParameter(valid_602155, JString, required = false,
                                 default = nil)
  if valid_602155 != nil:
    section.add "X-Amz-Algorithm", valid_602155
  var valid_602156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602156 = validateParameter(valid_602156, JString, required = false,
                                 default = nil)
  if valid_602156 != nil:
    section.add "X-Amz-SignedHeaders", valid_602156
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  section = newJObject()
  var valid_602157 = formData.getOrDefault("Force")
  valid_602157 = validateParameter(valid_602157, JBool, required = false, default = nil)
  if valid_602157 != nil:
    section.add "Force", valid_602157
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_602158 = formData.getOrDefault("ReplicationGroupId")
  valid_602158 = validateParameter(valid_602158, JString, required = true,
                                 default = nil)
  if valid_602158 != nil:
    section.add "ReplicationGroupId", valid_602158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602159: Call_PostCompleteMigration_602145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_602159.validator(path, query, header, formData, body)
  let scheme = call_602159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602159.url(scheme.get, call_602159.host, call_602159.base,
                         call_602159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602159, url, valid)

proc call*(call_602160: Call_PostCompleteMigration_602145;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## postCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  var query_602161 = newJObject()
  var formData_602162 = newJObject()
  add(formData_602162, "Force", newJBool(Force))
  add(query_602161, "Action", newJString(Action))
  add(query_602161, "Version", newJString(Version))
  add(formData_602162, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_602160.call(nil, query_602161, nil, formData_602162, nil)

var postCompleteMigration* = Call_PostCompleteMigration_602145(
    name: "postCompleteMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_PostCompleteMigration_602146, base: "/",
    url: url_PostCompleteMigration_602147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteMigration_602128 = ref object of OpenApiRestCall_601389
proc url_GetCompleteMigration_602130(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteMigration_602129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602131 = query.getOrDefault("Force")
  valid_602131 = validateParameter(valid_602131, JBool, required = false, default = nil)
  if valid_602131 != nil:
    section.add "Force", valid_602131
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602132 = query.getOrDefault("Action")
  valid_602132 = validateParameter(valid_602132, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_602132 != nil:
    section.add "Action", valid_602132
  var valid_602133 = query.getOrDefault("ReplicationGroupId")
  valid_602133 = validateParameter(valid_602133, JString, required = true,
                                 default = nil)
  if valid_602133 != nil:
    section.add "ReplicationGroupId", valid_602133
  var valid_602134 = query.getOrDefault("Version")
  valid_602134 = validateParameter(valid_602134, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602134 != nil:
    section.add "Version", valid_602134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602135 = header.getOrDefault("X-Amz-Signature")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-Signature", valid_602135
  var valid_602136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602136 = validateParameter(valid_602136, JString, required = false,
                                 default = nil)
  if valid_602136 != nil:
    section.add "X-Amz-Content-Sha256", valid_602136
  var valid_602137 = header.getOrDefault("X-Amz-Date")
  valid_602137 = validateParameter(valid_602137, JString, required = false,
                                 default = nil)
  if valid_602137 != nil:
    section.add "X-Amz-Date", valid_602137
  var valid_602138 = header.getOrDefault("X-Amz-Credential")
  valid_602138 = validateParameter(valid_602138, JString, required = false,
                                 default = nil)
  if valid_602138 != nil:
    section.add "X-Amz-Credential", valid_602138
  var valid_602139 = header.getOrDefault("X-Amz-Security-Token")
  valid_602139 = validateParameter(valid_602139, JString, required = false,
                                 default = nil)
  if valid_602139 != nil:
    section.add "X-Amz-Security-Token", valid_602139
  var valid_602140 = header.getOrDefault("X-Amz-Algorithm")
  valid_602140 = validateParameter(valid_602140, JString, required = false,
                                 default = nil)
  if valid_602140 != nil:
    section.add "X-Amz-Algorithm", valid_602140
  var valid_602141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602141 = validateParameter(valid_602141, JString, required = false,
                                 default = nil)
  if valid_602141 != nil:
    section.add "X-Amz-SignedHeaders", valid_602141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602142: Call_GetCompleteMigration_602128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_602142.validator(path, query, header, formData, body)
  let scheme = call_602142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602142.url(scheme.get, call_602142.host, call_602142.base,
                         call_602142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602142, url, valid)

proc call*(call_602143: Call_GetCompleteMigration_602128;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## getCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: string (required)
  var query_602144 = newJObject()
  add(query_602144, "Force", newJBool(Force))
  add(query_602144, "Action", newJString(Action))
  add(query_602144, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602144, "Version", newJString(Version))
  result = call_602143.call(nil, query_602144, nil, nil, nil)

var getCompleteMigration* = Call_GetCompleteMigration_602128(
    name: "getCompleteMigration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_GetCompleteMigration_602129, base: "/",
    url: url_GetCompleteMigration_602130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_602182 = ref object of OpenApiRestCall_601389
proc url_PostCopySnapshot_602184(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopySnapshot_602183(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602185 = query.getOrDefault("Action")
  valid_602185 = validateParameter(valid_602185, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_602185 != nil:
    section.add "Action", valid_602185
  var valid_602186 = query.getOrDefault("Version")
  valid_602186 = validateParameter(valid_602186, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602186 != nil:
    section.add "Version", valid_602186
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602187 = header.getOrDefault("X-Amz-Signature")
  valid_602187 = validateParameter(valid_602187, JString, required = false,
                                 default = nil)
  if valid_602187 != nil:
    section.add "X-Amz-Signature", valid_602187
  var valid_602188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602188 = validateParameter(valid_602188, JString, required = false,
                                 default = nil)
  if valid_602188 != nil:
    section.add "X-Amz-Content-Sha256", valid_602188
  var valid_602189 = header.getOrDefault("X-Amz-Date")
  valid_602189 = validateParameter(valid_602189, JString, required = false,
                                 default = nil)
  if valid_602189 != nil:
    section.add "X-Amz-Date", valid_602189
  var valid_602190 = header.getOrDefault("X-Amz-Credential")
  valid_602190 = validateParameter(valid_602190, JString, required = false,
                                 default = nil)
  if valid_602190 != nil:
    section.add "X-Amz-Credential", valid_602190
  var valid_602191 = header.getOrDefault("X-Amz-Security-Token")
  valid_602191 = validateParameter(valid_602191, JString, required = false,
                                 default = nil)
  if valid_602191 != nil:
    section.add "X-Amz-Security-Token", valid_602191
  var valid_602192 = header.getOrDefault("X-Amz-Algorithm")
  valid_602192 = validateParameter(valid_602192, JString, required = false,
                                 default = nil)
  if valid_602192 != nil:
    section.add "X-Amz-Algorithm", valid_602192
  var valid_602193 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602193 = validateParameter(valid_602193, JString, required = false,
                                 default = nil)
  if valid_602193 != nil:
    section.add "X-Amz-SignedHeaders", valid_602193
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_602194 = formData.getOrDefault("KmsKeyId")
  valid_602194 = validateParameter(valid_602194, JString, required = false,
                                 default = nil)
  if valid_602194 != nil:
    section.add "KmsKeyId", valid_602194
  var valid_602195 = formData.getOrDefault("TargetBucket")
  valid_602195 = validateParameter(valid_602195, JString, required = false,
                                 default = nil)
  if valid_602195 != nil:
    section.add "TargetBucket", valid_602195
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_602196 = formData.getOrDefault("SourceSnapshotName")
  valid_602196 = validateParameter(valid_602196, JString, required = true,
                                 default = nil)
  if valid_602196 != nil:
    section.add "SourceSnapshotName", valid_602196
  var valid_602197 = formData.getOrDefault("TargetSnapshotName")
  valid_602197 = validateParameter(valid_602197, JString, required = true,
                                 default = nil)
  if valid_602197 != nil:
    section.add "TargetSnapshotName", valid_602197
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602198: Call_PostCopySnapshot_602182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_602198.validator(path, query, header, formData, body)
  let scheme = call_602198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602198.url(scheme.get, call_602198.host, call_602198.base,
                         call_602198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602198, url, valid)

proc call*(call_602199: Call_PostCopySnapshot_602182; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_602200 = newJObject()
  var formData_602201 = newJObject()
  add(formData_602201, "KmsKeyId", newJString(KmsKeyId))
  add(query_602200, "Action", newJString(Action))
  add(formData_602201, "TargetBucket", newJString(TargetBucket))
  add(formData_602201, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_602201, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_602200, "Version", newJString(Version))
  result = call_602199.call(nil, query_602200, nil, formData_602201, nil)

var postCopySnapshot* = Call_PostCopySnapshot_602182(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_602183,
    base: "/", url: url_PostCopySnapshot_602184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_602163 = ref object of OpenApiRestCall_601389
proc url_GetCopySnapshot_602165(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopySnapshot_602164(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602166 = query.getOrDefault("KmsKeyId")
  valid_602166 = validateParameter(valid_602166, JString, required = false,
                                 default = nil)
  if valid_602166 != nil:
    section.add "KmsKeyId", valid_602166
  var valid_602167 = query.getOrDefault("TargetBucket")
  valid_602167 = validateParameter(valid_602167, JString, required = false,
                                 default = nil)
  if valid_602167 != nil:
    section.add "TargetBucket", valid_602167
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602168 = query.getOrDefault("Action")
  valid_602168 = validateParameter(valid_602168, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_602168 != nil:
    section.add "Action", valid_602168
  var valid_602169 = query.getOrDefault("TargetSnapshotName")
  valid_602169 = validateParameter(valid_602169, JString, required = true,
                                 default = nil)
  if valid_602169 != nil:
    section.add "TargetSnapshotName", valid_602169
  var valid_602170 = query.getOrDefault("SourceSnapshotName")
  valid_602170 = validateParameter(valid_602170, JString, required = true,
                                 default = nil)
  if valid_602170 != nil:
    section.add "SourceSnapshotName", valid_602170
  var valid_602171 = query.getOrDefault("Version")
  valid_602171 = validateParameter(valid_602171, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602171 != nil:
    section.add "Version", valid_602171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602172 = header.getOrDefault("X-Amz-Signature")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "X-Amz-Signature", valid_602172
  var valid_602173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602173 = validateParameter(valid_602173, JString, required = false,
                                 default = nil)
  if valid_602173 != nil:
    section.add "X-Amz-Content-Sha256", valid_602173
  var valid_602174 = header.getOrDefault("X-Amz-Date")
  valid_602174 = validateParameter(valid_602174, JString, required = false,
                                 default = nil)
  if valid_602174 != nil:
    section.add "X-Amz-Date", valid_602174
  var valid_602175 = header.getOrDefault("X-Amz-Credential")
  valid_602175 = validateParameter(valid_602175, JString, required = false,
                                 default = nil)
  if valid_602175 != nil:
    section.add "X-Amz-Credential", valid_602175
  var valid_602176 = header.getOrDefault("X-Amz-Security-Token")
  valid_602176 = validateParameter(valid_602176, JString, required = false,
                                 default = nil)
  if valid_602176 != nil:
    section.add "X-Amz-Security-Token", valid_602176
  var valid_602177 = header.getOrDefault("X-Amz-Algorithm")
  valid_602177 = validateParameter(valid_602177, JString, required = false,
                                 default = nil)
  if valid_602177 != nil:
    section.add "X-Amz-Algorithm", valid_602177
  var valid_602178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602178 = validateParameter(valid_602178, JString, required = false,
                                 default = nil)
  if valid_602178 != nil:
    section.add "X-Amz-SignedHeaders", valid_602178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602179: Call_GetCopySnapshot_602163; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_602179.validator(path, query, header, formData, body)
  let scheme = call_602179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602179.url(scheme.get, call_602179.host, call_602179.base,
                         call_602179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602179, url, valid)

proc call*(call_602180: Call_GetCopySnapshot_602163; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_602181 = newJObject()
  add(query_602181, "KmsKeyId", newJString(KmsKeyId))
  add(query_602181, "TargetBucket", newJString(TargetBucket))
  add(query_602181, "Action", newJString(Action))
  add(query_602181, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_602181, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_602181, "Version", newJString(Version))
  result = call_602180.call(nil, query_602181, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_602163(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_602164,
    base: "/", url: url_GetCopySnapshot_602165, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_602240 = ref object of OpenApiRestCall_601389
proc url_PostCreateCacheCluster_602242(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheCluster_602241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602243 = query.getOrDefault("Action")
  valid_602243 = validateParameter(valid_602243, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_602243 != nil:
    section.add "Action", valid_602243
  var valid_602244 = query.getOrDefault("Version")
  valid_602244 = validateParameter(valid_602244, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602244 != nil:
    section.add "Version", valid_602244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602245 = header.getOrDefault("X-Amz-Signature")
  valid_602245 = validateParameter(valid_602245, JString, required = false,
                                 default = nil)
  if valid_602245 != nil:
    section.add "X-Amz-Signature", valid_602245
  var valid_602246 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602246 = validateParameter(valid_602246, JString, required = false,
                                 default = nil)
  if valid_602246 != nil:
    section.add "X-Amz-Content-Sha256", valid_602246
  var valid_602247 = header.getOrDefault("X-Amz-Date")
  valid_602247 = validateParameter(valid_602247, JString, required = false,
                                 default = nil)
  if valid_602247 != nil:
    section.add "X-Amz-Date", valid_602247
  var valid_602248 = header.getOrDefault("X-Amz-Credential")
  valid_602248 = validateParameter(valid_602248, JString, required = false,
                                 default = nil)
  if valid_602248 != nil:
    section.add "X-Amz-Credential", valid_602248
  var valid_602249 = header.getOrDefault("X-Amz-Security-Token")
  valid_602249 = validateParameter(valid_602249, JString, required = false,
                                 default = nil)
  if valid_602249 != nil:
    section.add "X-Amz-Security-Token", valid_602249
  var valid_602250 = header.getOrDefault("X-Amz-Algorithm")
  valid_602250 = validateParameter(valid_602250, JString, required = false,
                                 default = nil)
  if valid_602250 != nil:
    section.add "X-Amz-Algorithm", valid_602250
  var valid_602251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602251 = validateParameter(valid_602251, JString, required = false,
                                 default = nil)
  if valid_602251 != nil:
    section.add "X-Amz-SignedHeaders", valid_602251
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_602252 = formData.getOrDefault("SecurityGroupIds")
  valid_602252 = validateParameter(valid_602252, JArray, required = false,
                                 default = nil)
  if valid_602252 != nil:
    section.add "SecurityGroupIds", valid_602252
  var valid_602253 = formData.getOrDefault("ReplicationGroupId")
  valid_602253 = validateParameter(valid_602253, JString, required = false,
                                 default = nil)
  if valid_602253 != nil:
    section.add "ReplicationGroupId", valid_602253
  var valid_602254 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602254 = validateParameter(valid_602254, JString, required = false,
                                 default = nil)
  if valid_602254 != nil:
    section.add "PreferredMaintenanceWindow", valid_602254
  var valid_602255 = formData.getOrDefault("Port")
  valid_602255 = validateParameter(valid_602255, JInt, required = false, default = nil)
  if valid_602255 != nil:
    section.add "Port", valid_602255
  var valid_602256 = formData.getOrDefault("NumCacheNodes")
  valid_602256 = validateParameter(valid_602256, JInt, required = false, default = nil)
  if valid_602256 != nil:
    section.add "NumCacheNodes", valid_602256
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_602257 = formData.getOrDefault("CacheClusterId")
  valid_602257 = validateParameter(valid_602257, JString, required = true,
                                 default = nil)
  if valid_602257 != nil:
    section.add "CacheClusterId", valid_602257
  var valid_602258 = formData.getOrDefault("NotificationTopicArn")
  valid_602258 = validateParameter(valid_602258, JString, required = false,
                                 default = nil)
  if valid_602258 != nil:
    section.add "NotificationTopicArn", valid_602258
  var valid_602259 = formData.getOrDefault("EngineVersion")
  valid_602259 = validateParameter(valid_602259, JString, required = false,
                                 default = nil)
  if valid_602259 != nil:
    section.add "EngineVersion", valid_602259
  var valid_602260 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_602260 = validateParameter(valid_602260, JString, required = false,
                                 default = nil)
  if valid_602260 != nil:
    section.add "PreferredAvailabilityZone", valid_602260
  var valid_602261 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_602261 = validateParameter(valid_602261, JArray, required = false,
                                 default = nil)
  if valid_602261 != nil:
    section.add "PreferredAvailabilityZones", valid_602261
  var valid_602262 = formData.getOrDefault("AZMode")
  valid_602262 = validateParameter(valid_602262, JString, required = false,
                                 default = newJString("single-az"))
  if valid_602262 != nil:
    section.add "AZMode", valid_602262
  var valid_602263 = formData.getOrDefault("Engine")
  valid_602263 = validateParameter(valid_602263, JString, required = false,
                                 default = nil)
  if valid_602263 != nil:
    section.add "Engine", valid_602263
  var valid_602264 = formData.getOrDefault("CacheParameterGroupName")
  valid_602264 = validateParameter(valid_602264, JString, required = false,
                                 default = nil)
  if valid_602264 != nil:
    section.add "CacheParameterGroupName", valid_602264
  var valid_602265 = formData.getOrDefault("SnapshotName")
  valid_602265 = validateParameter(valid_602265, JString, required = false,
                                 default = nil)
  if valid_602265 != nil:
    section.add "SnapshotName", valid_602265
  var valid_602266 = formData.getOrDefault("SnapshotArns")
  valid_602266 = validateParameter(valid_602266, JArray, required = false,
                                 default = nil)
  if valid_602266 != nil:
    section.add "SnapshotArns", valid_602266
  var valid_602267 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602267 = validateParameter(valid_602267, JBool, required = false, default = nil)
  if valid_602267 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602267
  var valid_602268 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602268 = validateParameter(valid_602268, JString, required = false,
                                 default = nil)
  if valid_602268 != nil:
    section.add "CacheSubnetGroupName", valid_602268
  var valid_602269 = formData.getOrDefault("AuthToken")
  valid_602269 = validateParameter(valid_602269, JString, required = false,
                                 default = nil)
  if valid_602269 != nil:
    section.add "AuthToken", valid_602269
  var valid_602270 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_602270 = validateParameter(valid_602270, JArray, required = false,
                                 default = nil)
  if valid_602270 != nil:
    section.add "CacheSecurityGroupNames", valid_602270
  var valid_602271 = formData.getOrDefault("Tags")
  valid_602271 = validateParameter(valid_602271, JArray, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "Tags", valid_602271
  var valid_602272 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_602272 = validateParameter(valid_602272, JInt, required = false, default = nil)
  if valid_602272 != nil:
    section.add "SnapshotRetentionLimit", valid_602272
  var valid_602273 = formData.getOrDefault("CacheNodeType")
  valid_602273 = validateParameter(valid_602273, JString, required = false,
                                 default = nil)
  if valid_602273 != nil:
    section.add "CacheNodeType", valid_602273
  var valid_602274 = formData.getOrDefault("SnapshotWindow")
  valid_602274 = validateParameter(valid_602274, JString, required = false,
                                 default = nil)
  if valid_602274 != nil:
    section.add "SnapshotWindow", valid_602274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602275: Call_PostCreateCacheCluster_602240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_602275.validator(path, query, header, formData, body)
  let scheme = call_602275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602275.url(scheme.get, call_602275.host, call_602275.base,
                         call_602275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602275, url, valid)

proc call*(call_602276: Call_PostCreateCacheCluster_602240; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_602277 = newJObject()
  var formData_602278 = newJObject()
  if SecurityGroupIds != nil:
    formData_602278.add "SecurityGroupIds", SecurityGroupIds
  add(formData_602278, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_602278, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_602278, "Port", newJInt(Port))
  add(formData_602278, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_602278, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602278, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_602278, "EngineVersion", newJString(EngineVersion))
  add(formData_602278, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_602278.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_602278, "AZMode", newJString(AZMode))
  add(formData_602278, "Engine", newJString(Engine))
  add(formData_602278, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_602278, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_602278.add "SnapshotArns", SnapshotArns
  add(formData_602278, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602278, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602277, "Action", newJString(Action))
  add(formData_602278, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_602278.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_602278.add "Tags", Tags
  add(formData_602278, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_602277, "Version", newJString(Version))
  add(formData_602278, "CacheNodeType", newJString(CacheNodeType))
  add(formData_602278, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_602276.call(nil, query_602277, nil, formData_602278, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_602240(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_602241, base: "/",
    url: url_PostCreateCacheCluster_602242, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_602202 = ref object of OpenApiRestCall_601389
proc url_GetCreateCacheCluster_602204(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheCluster_602203(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_602205 = query.getOrDefault("SnapshotArns")
  valid_602205 = validateParameter(valid_602205, JArray, required = false,
                                 default = nil)
  if valid_602205 != nil:
    section.add "SnapshotArns", valid_602205
  var valid_602206 = query.getOrDefault("AuthToken")
  valid_602206 = validateParameter(valid_602206, JString, required = false,
                                 default = nil)
  if valid_602206 != nil:
    section.add "AuthToken", valid_602206
  var valid_602207 = query.getOrDefault("Engine")
  valid_602207 = validateParameter(valid_602207, JString, required = false,
                                 default = nil)
  if valid_602207 != nil:
    section.add "Engine", valid_602207
  var valid_602208 = query.getOrDefault("CacheParameterGroupName")
  valid_602208 = validateParameter(valid_602208, JString, required = false,
                                 default = nil)
  if valid_602208 != nil:
    section.add "CacheParameterGroupName", valid_602208
  var valid_602209 = query.getOrDefault("Tags")
  valid_602209 = validateParameter(valid_602209, JArray, required = false,
                                 default = nil)
  if valid_602209 != nil:
    section.add "Tags", valid_602209
  var valid_602210 = query.getOrDefault("AZMode")
  valid_602210 = validateParameter(valid_602210, JString, required = false,
                                 default = newJString("single-az"))
  if valid_602210 != nil:
    section.add "AZMode", valid_602210
  var valid_602211 = query.getOrDefault("NumCacheNodes")
  valid_602211 = validateParameter(valid_602211, JInt, required = false, default = nil)
  if valid_602211 != nil:
    section.add "NumCacheNodes", valid_602211
  var valid_602212 = query.getOrDefault("SnapshotRetentionLimit")
  valid_602212 = validateParameter(valid_602212, JInt, required = false, default = nil)
  if valid_602212 != nil:
    section.add "SnapshotRetentionLimit", valid_602212
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_602213 = query.getOrDefault("CacheClusterId")
  valid_602213 = validateParameter(valid_602213, JString, required = true,
                                 default = nil)
  if valid_602213 != nil:
    section.add "CacheClusterId", valid_602213
  var valid_602214 = query.getOrDefault("PreferredAvailabilityZone")
  valid_602214 = validateParameter(valid_602214, JString, required = false,
                                 default = nil)
  if valid_602214 != nil:
    section.add "PreferredAvailabilityZone", valid_602214
  var valid_602215 = query.getOrDefault("CacheSecurityGroupNames")
  valid_602215 = validateParameter(valid_602215, JArray, required = false,
                                 default = nil)
  if valid_602215 != nil:
    section.add "CacheSecurityGroupNames", valid_602215
  var valid_602216 = query.getOrDefault("CacheNodeType")
  valid_602216 = validateParameter(valid_602216, JString, required = false,
                                 default = nil)
  if valid_602216 != nil:
    section.add "CacheNodeType", valid_602216
  var valid_602217 = query.getOrDefault("EngineVersion")
  valid_602217 = validateParameter(valid_602217, JString, required = false,
                                 default = nil)
  if valid_602217 != nil:
    section.add "EngineVersion", valid_602217
  var valid_602218 = query.getOrDefault("Action")
  valid_602218 = validateParameter(valid_602218, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_602218 != nil:
    section.add "Action", valid_602218
  var valid_602219 = query.getOrDefault("Port")
  valid_602219 = validateParameter(valid_602219, JInt, required = false, default = nil)
  if valid_602219 != nil:
    section.add "Port", valid_602219
  var valid_602220 = query.getOrDefault("ReplicationGroupId")
  valid_602220 = validateParameter(valid_602220, JString, required = false,
                                 default = nil)
  if valid_602220 != nil:
    section.add "ReplicationGroupId", valid_602220
  var valid_602221 = query.getOrDefault("CacheSubnetGroupName")
  valid_602221 = validateParameter(valid_602221, JString, required = false,
                                 default = nil)
  if valid_602221 != nil:
    section.add "CacheSubnetGroupName", valid_602221
  var valid_602222 = query.getOrDefault("NotificationTopicArn")
  valid_602222 = validateParameter(valid_602222, JString, required = false,
                                 default = nil)
  if valid_602222 != nil:
    section.add "NotificationTopicArn", valid_602222
  var valid_602223 = query.getOrDefault("PreferredAvailabilityZones")
  valid_602223 = validateParameter(valid_602223, JArray, required = false,
                                 default = nil)
  if valid_602223 != nil:
    section.add "PreferredAvailabilityZones", valid_602223
  var valid_602224 = query.getOrDefault("Version")
  valid_602224 = validateParameter(valid_602224, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602224 != nil:
    section.add "Version", valid_602224
  var valid_602225 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602225 = validateParameter(valid_602225, JString, required = false,
                                 default = nil)
  if valid_602225 != nil:
    section.add "PreferredMaintenanceWindow", valid_602225
  var valid_602226 = query.getOrDefault("SnapshotName")
  valid_602226 = validateParameter(valid_602226, JString, required = false,
                                 default = nil)
  if valid_602226 != nil:
    section.add "SnapshotName", valid_602226
  var valid_602227 = query.getOrDefault("SnapshotWindow")
  valid_602227 = validateParameter(valid_602227, JString, required = false,
                                 default = nil)
  if valid_602227 != nil:
    section.add "SnapshotWindow", valid_602227
  var valid_602228 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602228 = validateParameter(valid_602228, JBool, required = false, default = nil)
  if valid_602228 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602228
  var valid_602229 = query.getOrDefault("SecurityGroupIds")
  valid_602229 = validateParameter(valid_602229, JArray, required = false,
                                 default = nil)
  if valid_602229 != nil:
    section.add "SecurityGroupIds", valid_602229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602230 = header.getOrDefault("X-Amz-Signature")
  valid_602230 = validateParameter(valid_602230, JString, required = false,
                                 default = nil)
  if valid_602230 != nil:
    section.add "X-Amz-Signature", valid_602230
  var valid_602231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602231 = validateParameter(valid_602231, JString, required = false,
                                 default = nil)
  if valid_602231 != nil:
    section.add "X-Amz-Content-Sha256", valid_602231
  var valid_602232 = header.getOrDefault("X-Amz-Date")
  valid_602232 = validateParameter(valid_602232, JString, required = false,
                                 default = nil)
  if valid_602232 != nil:
    section.add "X-Amz-Date", valid_602232
  var valid_602233 = header.getOrDefault("X-Amz-Credential")
  valid_602233 = validateParameter(valid_602233, JString, required = false,
                                 default = nil)
  if valid_602233 != nil:
    section.add "X-Amz-Credential", valid_602233
  var valid_602234 = header.getOrDefault("X-Amz-Security-Token")
  valid_602234 = validateParameter(valid_602234, JString, required = false,
                                 default = nil)
  if valid_602234 != nil:
    section.add "X-Amz-Security-Token", valid_602234
  var valid_602235 = header.getOrDefault("X-Amz-Algorithm")
  valid_602235 = validateParameter(valid_602235, JString, required = false,
                                 default = nil)
  if valid_602235 != nil:
    section.add "X-Amz-Algorithm", valid_602235
  var valid_602236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602236 = validateParameter(valid_602236, JString, required = false,
                                 default = nil)
  if valid_602236 != nil:
    section.add "X-Amz-SignedHeaders", valid_602236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602237: Call_GetCreateCacheCluster_602202; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_602237.validator(path, query, header, formData, body)
  let scheme = call_602237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602237.url(scheme.get, call_602237.host, call_602237.base,
                         call_602237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602237, url, valid)

proc call*(call_602238: Call_GetCreateCacheCluster_602202; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_602239 = newJObject()
  if SnapshotArns != nil:
    query_602239.add "SnapshotArns", SnapshotArns
  add(query_602239, "AuthToken", newJString(AuthToken))
  add(query_602239, "Engine", newJString(Engine))
  add(query_602239, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_602239.add "Tags", Tags
  add(query_602239, "AZMode", newJString(AZMode))
  add(query_602239, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_602239, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_602239, "CacheClusterId", newJString(CacheClusterId))
  add(query_602239, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_602239.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_602239, "CacheNodeType", newJString(CacheNodeType))
  add(query_602239, "EngineVersion", newJString(EngineVersion))
  add(query_602239, "Action", newJString(Action))
  add(query_602239, "Port", newJInt(Port))
  add(query_602239, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602239, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602239, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_602239.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_602239, "Version", newJString(Version))
  add(query_602239, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602239, "SnapshotName", newJString(SnapshotName))
  add(query_602239, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_602239, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_602239.add "SecurityGroupIds", SecurityGroupIds
  result = call_602238.call(nil, query_602239, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_602202(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_602203, base: "/",
    url: url_GetCreateCacheCluster_602204, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_602297 = ref object of OpenApiRestCall_601389
proc url_PostCreateCacheParameterGroup_602299(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheParameterGroup_602298(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602300 = query.getOrDefault("Action")
  valid_602300 = validateParameter(valid_602300, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_602300 != nil:
    section.add "Action", valid_602300
  var valid_602301 = query.getOrDefault("Version")
  valid_602301 = validateParameter(valid_602301, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602301 != nil:
    section.add "Version", valid_602301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602302 = header.getOrDefault("X-Amz-Signature")
  valid_602302 = validateParameter(valid_602302, JString, required = false,
                                 default = nil)
  if valid_602302 != nil:
    section.add "X-Amz-Signature", valid_602302
  var valid_602303 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602303 = validateParameter(valid_602303, JString, required = false,
                                 default = nil)
  if valid_602303 != nil:
    section.add "X-Amz-Content-Sha256", valid_602303
  var valid_602304 = header.getOrDefault("X-Amz-Date")
  valid_602304 = validateParameter(valid_602304, JString, required = false,
                                 default = nil)
  if valid_602304 != nil:
    section.add "X-Amz-Date", valid_602304
  var valid_602305 = header.getOrDefault("X-Amz-Credential")
  valid_602305 = validateParameter(valid_602305, JString, required = false,
                                 default = nil)
  if valid_602305 != nil:
    section.add "X-Amz-Credential", valid_602305
  var valid_602306 = header.getOrDefault("X-Amz-Security-Token")
  valid_602306 = validateParameter(valid_602306, JString, required = false,
                                 default = nil)
  if valid_602306 != nil:
    section.add "X-Amz-Security-Token", valid_602306
  var valid_602307 = header.getOrDefault("X-Amz-Algorithm")
  valid_602307 = validateParameter(valid_602307, JString, required = false,
                                 default = nil)
  if valid_602307 != nil:
    section.add "X-Amz-Algorithm", valid_602307
  var valid_602308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602308 = validateParameter(valid_602308, JString, required = false,
                                 default = nil)
  if valid_602308 != nil:
    section.add "X-Amz-SignedHeaders", valid_602308
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_602309 = formData.getOrDefault("Description")
  valid_602309 = validateParameter(valid_602309, JString, required = true,
                                 default = nil)
  if valid_602309 != nil:
    section.add "Description", valid_602309
  var valid_602310 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_602310 = validateParameter(valid_602310, JString, required = true,
                                 default = nil)
  if valid_602310 != nil:
    section.add "CacheParameterGroupFamily", valid_602310
  var valid_602311 = formData.getOrDefault("CacheParameterGroupName")
  valid_602311 = validateParameter(valid_602311, JString, required = true,
                                 default = nil)
  if valid_602311 != nil:
    section.add "CacheParameterGroupName", valid_602311
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602312: Call_PostCreateCacheParameterGroup_602297; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_602312.validator(path, query, header, formData, body)
  let scheme = call_602312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602312.url(scheme.get, call_602312.host, call_602312.base,
                         call_602312.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602312, url, valid)

proc call*(call_602313: Call_PostCreateCacheParameterGroup_602297;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602314 = newJObject()
  var formData_602315 = newJObject()
  add(formData_602315, "Description", newJString(Description))
  add(formData_602315, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_602315, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_602314, "Action", newJString(Action))
  add(query_602314, "Version", newJString(Version))
  result = call_602313.call(nil, query_602314, nil, formData_602315, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_602297(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_602298, base: "/",
    url: url_PostCreateCacheParameterGroup_602299,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_602279 = ref object of OpenApiRestCall_601389
proc url_GetCreateCacheParameterGroup_602281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheParameterGroup_602280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602282 = query.getOrDefault("CacheParameterGroupName")
  valid_602282 = validateParameter(valid_602282, JString, required = true,
                                 default = nil)
  if valid_602282 != nil:
    section.add "CacheParameterGroupName", valid_602282
  var valid_602283 = query.getOrDefault("CacheParameterGroupFamily")
  valid_602283 = validateParameter(valid_602283, JString, required = true,
                                 default = nil)
  if valid_602283 != nil:
    section.add "CacheParameterGroupFamily", valid_602283
  var valid_602284 = query.getOrDefault("Action")
  valid_602284 = validateParameter(valid_602284, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_602284 != nil:
    section.add "Action", valid_602284
  var valid_602285 = query.getOrDefault("Description")
  valid_602285 = validateParameter(valid_602285, JString, required = true,
                                 default = nil)
  if valid_602285 != nil:
    section.add "Description", valid_602285
  var valid_602286 = query.getOrDefault("Version")
  valid_602286 = validateParameter(valid_602286, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602286 != nil:
    section.add "Version", valid_602286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602287 = header.getOrDefault("X-Amz-Signature")
  valid_602287 = validateParameter(valid_602287, JString, required = false,
                                 default = nil)
  if valid_602287 != nil:
    section.add "X-Amz-Signature", valid_602287
  var valid_602288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602288 = validateParameter(valid_602288, JString, required = false,
                                 default = nil)
  if valid_602288 != nil:
    section.add "X-Amz-Content-Sha256", valid_602288
  var valid_602289 = header.getOrDefault("X-Amz-Date")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "X-Amz-Date", valid_602289
  var valid_602290 = header.getOrDefault("X-Amz-Credential")
  valid_602290 = validateParameter(valid_602290, JString, required = false,
                                 default = nil)
  if valid_602290 != nil:
    section.add "X-Amz-Credential", valid_602290
  var valid_602291 = header.getOrDefault("X-Amz-Security-Token")
  valid_602291 = validateParameter(valid_602291, JString, required = false,
                                 default = nil)
  if valid_602291 != nil:
    section.add "X-Amz-Security-Token", valid_602291
  var valid_602292 = header.getOrDefault("X-Amz-Algorithm")
  valid_602292 = validateParameter(valid_602292, JString, required = false,
                                 default = nil)
  if valid_602292 != nil:
    section.add "X-Amz-Algorithm", valid_602292
  var valid_602293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602293 = validateParameter(valid_602293, JString, required = false,
                                 default = nil)
  if valid_602293 != nil:
    section.add "X-Amz-SignedHeaders", valid_602293
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602294: Call_GetCreateCacheParameterGroup_602279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_602294.validator(path, query, header, formData, body)
  let scheme = call_602294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602294.url(scheme.get, call_602294.host, call_602294.base,
                         call_602294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602294, url, valid)

proc call*(call_602295: Call_GetCreateCacheParameterGroup_602279;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_602296 = newJObject()
  add(query_602296, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602296, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_602296, "Action", newJString(Action))
  add(query_602296, "Description", newJString(Description))
  add(query_602296, "Version", newJString(Version))
  result = call_602295.call(nil, query_602296, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_602279(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_602280, base: "/",
    url: url_GetCreateCacheParameterGroup_602281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_602333 = ref object of OpenApiRestCall_601389
proc url_PostCreateCacheSecurityGroup_602335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSecurityGroup_602334(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602336 = query.getOrDefault("Action")
  valid_602336 = validateParameter(valid_602336, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_602336 != nil:
    section.add "Action", valid_602336
  var valid_602337 = query.getOrDefault("Version")
  valid_602337 = validateParameter(valid_602337, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602337 != nil:
    section.add "Version", valid_602337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602338 = header.getOrDefault("X-Amz-Signature")
  valid_602338 = validateParameter(valid_602338, JString, required = false,
                                 default = nil)
  if valid_602338 != nil:
    section.add "X-Amz-Signature", valid_602338
  var valid_602339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "X-Amz-Content-Sha256", valid_602339
  var valid_602340 = header.getOrDefault("X-Amz-Date")
  valid_602340 = validateParameter(valid_602340, JString, required = false,
                                 default = nil)
  if valid_602340 != nil:
    section.add "X-Amz-Date", valid_602340
  var valid_602341 = header.getOrDefault("X-Amz-Credential")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "X-Amz-Credential", valid_602341
  var valid_602342 = header.getOrDefault("X-Amz-Security-Token")
  valid_602342 = validateParameter(valid_602342, JString, required = false,
                                 default = nil)
  if valid_602342 != nil:
    section.add "X-Amz-Security-Token", valid_602342
  var valid_602343 = header.getOrDefault("X-Amz-Algorithm")
  valid_602343 = validateParameter(valid_602343, JString, required = false,
                                 default = nil)
  if valid_602343 != nil:
    section.add "X-Amz-Algorithm", valid_602343
  var valid_602344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602344 = validateParameter(valid_602344, JString, required = false,
                                 default = nil)
  if valid_602344 != nil:
    section.add "X-Amz-SignedHeaders", valid_602344
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_602345 = formData.getOrDefault("Description")
  valid_602345 = validateParameter(valid_602345, JString, required = true,
                                 default = nil)
  if valid_602345 != nil:
    section.add "Description", valid_602345
  var valid_602346 = formData.getOrDefault("CacheSecurityGroupName")
  valid_602346 = validateParameter(valid_602346, JString, required = true,
                                 default = nil)
  if valid_602346 != nil:
    section.add "CacheSecurityGroupName", valid_602346
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602347: Call_PostCreateCacheSecurityGroup_602333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_602347.validator(path, query, header, formData, body)
  let scheme = call_602347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602347.url(scheme.get, call_602347.host, call_602347.base,
                         call_602347.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602347, url, valid)

proc call*(call_602348: Call_PostCreateCacheSecurityGroup_602333;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602349 = newJObject()
  var formData_602350 = newJObject()
  add(formData_602350, "Description", newJString(Description))
  add(formData_602350, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_602349, "Action", newJString(Action))
  add(query_602349, "Version", newJString(Version))
  result = call_602348.call(nil, query_602349, nil, formData_602350, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_602333(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_602334, base: "/",
    url: url_PostCreateCacheSecurityGroup_602335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_602316 = ref object of OpenApiRestCall_601389
proc url_GetCreateCacheSecurityGroup_602318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSecurityGroup_602317(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602319 = query.getOrDefault("Action")
  valid_602319 = validateParameter(valid_602319, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_602319 != nil:
    section.add "Action", valid_602319
  var valid_602320 = query.getOrDefault("Description")
  valid_602320 = validateParameter(valid_602320, JString, required = true,
                                 default = nil)
  if valid_602320 != nil:
    section.add "Description", valid_602320
  var valid_602321 = query.getOrDefault("CacheSecurityGroupName")
  valid_602321 = validateParameter(valid_602321, JString, required = true,
                                 default = nil)
  if valid_602321 != nil:
    section.add "CacheSecurityGroupName", valid_602321
  var valid_602322 = query.getOrDefault("Version")
  valid_602322 = validateParameter(valid_602322, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602322 != nil:
    section.add "Version", valid_602322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602323 = header.getOrDefault("X-Amz-Signature")
  valid_602323 = validateParameter(valid_602323, JString, required = false,
                                 default = nil)
  if valid_602323 != nil:
    section.add "X-Amz-Signature", valid_602323
  var valid_602324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602324 = validateParameter(valid_602324, JString, required = false,
                                 default = nil)
  if valid_602324 != nil:
    section.add "X-Amz-Content-Sha256", valid_602324
  var valid_602325 = header.getOrDefault("X-Amz-Date")
  valid_602325 = validateParameter(valid_602325, JString, required = false,
                                 default = nil)
  if valid_602325 != nil:
    section.add "X-Amz-Date", valid_602325
  var valid_602326 = header.getOrDefault("X-Amz-Credential")
  valid_602326 = validateParameter(valid_602326, JString, required = false,
                                 default = nil)
  if valid_602326 != nil:
    section.add "X-Amz-Credential", valid_602326
  var valid_602327 = header.getOrDefault("X-Amz-Security-Token")
  valid_602327 = validateParameter(valid_602327, JString, required = false,
                                 default = nil)
  if valid_602327 != nil:
    section.add "X-Amz-Security-Token", valid_602327
  var valid_602328 = header.getOrDefault("X-Amz-Algorithm")
  valid_602328 = validateParameter(valid_602328, JString, required = false,
                                 default = nil)
  if valid_602328 != nil:
    section.add "X-Amz-Algorithm", valid_602328
  var valid_602329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602329 = validateParameter(valid_602329, JString, required = false,
                                 default = nil)
  if valid_602329 != nil:
    section.add "X-Amz-SignedHeaders", valid_602329
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602330: Call_GetCreateCacheSecurityGroup_602316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_602330.validator(path, query, header, formData, body)
  let scheme = call_602330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602330.url(scheme.get, call_602330.host, call_602330.base,
                         call_602330.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602330, url, valid)

proc call*(call_602331: Call_GetCreateCacheSecurityGroup_602316;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_602332 = newJObject()
  add(query_602332, "Action", newJString(Action))
  add(query_602332, "Description", newJString(Description))
  add(query_602332, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_602332, "Version", newJString(Version))
  result = call_602331.call(nil, query_602332, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_602316(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_602317, base: "/",
    url: url_GetCreateCacheSecurityGroup_602318,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_602369 = ref object of OpenApiRestCall_601389
proc url_PostCreateCacheSubnetGroup_602371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSubnetGroup_602370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602372 = query.getOrDefault("Action")
  valid_602372 = validateParameter(valid_602372, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_602372 != nil:
    section.add "Action", valid_602372
  var valid_602373 = query.getOrDefault("Version")
  valid_602373 = validateParameter(valid_602373, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602373 != nil:
    section.add "Version", valid_602373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602374 = header.getOrDefault("X-Amz-Signature")
  valid_602374 = validateParameter(valid_602374, JString, required = false,
                                 default = nil)
  if valid_602374 != nil:
    section.add "X-Amz-Signature", valid_602374
  var valid_602375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602375 = validateParameter(valid_602375, JString, required = false,
                                 default = nil)
  if valid_602375 != nil:
    section.add "X-Amz-Content-Sha256", valid_602375
  var valid_602376 = header.getOrDefault("X-Amz-Date")
  valid_602376 = validateParameter(valid_602376, JString, required = false,
                                 default = nil)
  if valid_602376 != nil:
    section.add "X-Amz-Date", valid_602376
  var valid_602377 = header.getOrDefault("X-Amz-Credential")
  valid_602377 = validateParameter(valid_602377, JString, required = false,
                                 default = nil)
  if valid_602377 != nil:
    section.add "X-Amz-Credential", valid_602377
  var valid_602378 = header.getOrDefault("X-Amz-Security-Token")
  valid_602378 = validateParameter(valid_602378, JString, required = false,
                                 default = nil)
  if valid_602378 != nil:
    section.add "X-Amz-Security-Token", valid_602378
  var valid_602379 = header.getOrDefault("X-Amz-Algorithm")
  valid_602379 = validateParameter(valid_602379, JString, required = false,
                                 default = nil)
  if valid_602379 != nil:
    section.add "X-Amz-Algorithm", valid_602379
  var valid_602380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602380 = validateParameter(valid_602380, JString, required = false,
                                 default = nil)
  if valid_602380 != nil:
    section.add "X-Amz-SignedHeaders", valid_602380
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_602381 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_602381 = validateParameter(valid_602381, JString, required = true,
                                 default = nil)
  if valid_602381 != nil:
    section.add "CacheSubnetGroupDescription", valid_602381
  var valid_602382 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602382 = validateParameter(valid_602382, JString, required = true,
                                 default = nil)
  if valid_602382 != nil:
    section.add "CacheSubnetGroupName", valid_602382
  var valid_602383 = formData.getOrDefault("SubnetIds")
  valid_602383 = validateParameter(valid_602383, JArray, required = true, default = nil)
  if valid_602383 != nil:
    section.add "SubnetIds", valid_602383
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602384: Call_PostCreateCacheSubnetGroup_602369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_602384.validator(path, query, header, formData, body)
  let scheme = call_602384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602384.url(scheme.get, call_602384.host, call_602384.base,
                         call_602384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602384, url, valid)

proc call*(call_602385: Call_PostCreateCacheSubnetGroup_602369;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_602386 = newJObject()
  var formData_602387 = newJObject()
  add(formData_602387, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_602387, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602386, "Action", newJString(Action))
  add(query_602386, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_602387.add "SubnetIds", SubnetIds
  result = call_602385.call(nil, query_602386, nil, formData_602387, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_602369(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_602370, base: "/",
    url: url_PostCreateCacheSubnetGroup_602371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_602351 = ref object of OpenApiRestCall_601389
proc url_GetCreateCacheSubnetGroup_602353(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSubnetGroup_602352(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_602354 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_602354 = validateParameter(valid_602354, JString, required = true,
                                 default = nil)
  if valid_602354 != nil:
    section.add "CacheSubnetGroupDescription", valid_602354
  var valid_602355 = query.getOrDefault("SubnetIds")
  valid_602355 = validateParameter(valid_602355, JArray, required = true, default = nil)
  if valid_602355 != nil:
    section.add "SubnetIds", valid_602355
  var valid_602356 = query.getOrDefault("Action")
  valid_602356 = validateParameter(valid_602356, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_602356 != nil:
    section.add "Action", valid_602356
  var valid_602357 = query.getOrDefault("CacheSubnetGroupName")
  valid_602357 = validateParameter(valid_602357, JString, required = true,
                                 default = nil)
  if valid_602357 != nil:
    section.add "CacheSubnetGroupName", valid_602357
  var valid_602358 = query.getOrDefault("Version")
  valid_602358 = validateParameter(valid_602358, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602358 != nil:
    section.add "Version", valid_602358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602359 = header.getOrDefault("X-Amz-Signature")
  valid_602359 = validateParameter(valid_602359, JString, required = false,
                                 default = nil)
  if valid_602359 != nil:
    section.add "X-Amz-Signature", valid_602359
  var valid_602360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602360 = validateParameter(valid_602360, JString, required = false,
                                 default = nil)
  if valid_602360 != nil:
    section.add "X-Amz-Content-Sha256", valid_602360
  var valid_602361 = header.getOrDefault("X-Amz-Date")
  valid_602361 = validateParameter(valid_602361, JString, required = false,
                                 default = nil)
  if valid_602361 != nil:
    section.add "X-Amz-Date", valid_602361
  var valid_602362 = header.getOrDefault("X-Amz-Credential")
  valid_602362 = validateParameter(valid_602362, JString, required = false,
                                 default = nil)
  if valid_602362 != nil:
    section.add "X-Amz-Credential", valid_602362
  var valid_602363 = header.getOrDefault("X-Amz-Security-Token")
  valid_602363 = validateParameter(valid_602363, JString, required = false,
                                 default = nil)
  if valid_602363 != nil:
    section.add "X-Amz-Security-Token", valid_602363
  var valid_602364 = header.getOrDefault("X-Amz-Algorithm")
  valid_602364 = validateParameter(valid_602364, JString, required = false,
                                 default = nil)
  if valid_602364 != nil:
    section.add "X-Amz-Algorithm", valid_602364
  var valid_602365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602365 = validateParameter(valid_602365, JString, required = false,
                                 default = nil)
  if valid_602365 != nil:
    section.add "X-Amz-SignedHeaders", valid_602365
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602366: Call_GetCreateCacheSubnetGroup_602351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_602366.validator(path, query, header, formData, body)
  let scheme = call_602366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602366.url(scheme.get, call_602366.host, call_602366.base,
                         call_602366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602366, url, valid)

proc call*(call_602367: Call_GetCreateCacheSubnetGroup_602351;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_602368 = newJObject()
  add(query_602368, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_602368.add "SubnetIds", SubnetIds
  add(query_602368, "Action", newJString(Action))
  add(query_602368, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602368, "Version", newJString(Version))
  result = call_602367.call(nil, query_602368, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_602351(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_602352, base: "/",
    url: url_GetCreateCacheSubnetGroup_602353,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_602432 = ref object of OpenApiRestCall_601389
proc url_PostCreateReplicationGroup_602434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReplicationGroup_602433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602435 = query.getOrDefault("Action")
  valid_602435 = validateParameter(valid_602435, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_602435 != nil:
    section.add "Action", valid_602435
  var valid_602436 = query.getOrDefault("Version")
  valid_602436 = validateParameter(valid_602436, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602436 != nil:
    section.add "Version", valid_602436
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602437 = header.getOrDefault("X-Amz-Signature")
  valid_602437 = validateParameter(valid_602437, JString, required = false,
                                 default = nil)
  if valid_602437 != nil:
    section.add "X-Amz-Signature", valid_602437
  var valid_602438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602438 = validateParameter(valid_602438, JString, required = false,
                                 default = nil)
  if valid_602438 != nil:
    section.add "X-Amz-Content-Sha256", valid_602438
  var valid_602439 = header.getOrDefault("X-Amz-Date")
  valid_602439 = validateParameter(valid_602439, JString, required = false,
                                 default = nil)
  if valid_602439 != nil:
    section.add "X-Amz-Date", valid_602439
  var valid_602440 = header.getOrDefault("X-Amz-Credential")
  valid_602440 = validateParameter(valid_602440, JString, required = false,
                                 default = nil)
  if valid_602440 != nil:
    section.add "X-Amz-Credential", valid_602440
  var valid_602441 = header.getOrDefault("X-Amz-Security-Token")
  valid_602441 = validateParameter(valid_602441, JString, required = false,
                                 default = nil)
  if valid_602441 != nil:
    section.add "X-Amz-Security-Token", valid_602441
  var valid_602442 = header.getOrDefault("X-Amz-Algorithm")
  valid_602442 = validateParameter(valid_602442, JString, required = false,
                                 default = nil)
  if valid_602442 != nil:
    section.add "X-Amz-Algorithm", valid_602442
  var valid_602443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602443 = validateParameter(valid_602443, JString, required = false,
                                 default = nil)
  if valid_602443 != nil:
    section.add "X-Amz-SignedHeaders", valid_602443
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_602444 = formData.getOrDefault("SecurityGroupIds")
  valid_602444 = validateParameter(valid_602444, JArray, required = false,
                                 default = nil)
  if valid_602444 != nil:
    section.add "SecurityGroupIds", valid_602444
  var valid_602445 = formData.getOrDefault("SnapshotWindow")
  valid_602445 = validateParameter(valid_602445, JString, required = false,
                                 default = nil)
  if valid_602445 != nil:
    section.add "SnapshotWindow", valid_602445
  var valid_602446 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602446 = validateParameter(valid_602446, JString, required = false,
                                 default = nil)
  if valid_602446 != nil:
    section.add "PreferredMaintenanceWindow", valid_602446
  var valid_602447 = formData.getOrDefault("Port")
  valid_602447 = validateParameter(valid_602447, JInt, required = false, default = nil)
  if valid_602447 != nil:
    section.add "Port", valid_602447
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_602448 = formData.getOrDefault("ReplicationGroupId")
  valid_602448 = validateParameter(valid_602448, JString, required = true,
                                 default = nil)
  if valid_602448 != nil:
    section.add "ReplicationGroupId", valid_602448
  var valid_602449 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_602449 = validateParameter(valid_602449, JArray, required = false,
                                 default = nil)
  if valid_602449 != nil:
    section.add "PreferredCacheClusterAZs", valid_602449
  var valid_602450 = formData.getOrDefault("PrimaryClusterId")
  valid_602450 = validateParameter(valid_602450, JString, required = false,
                                 default = nil)
  if valid_602450 != nil:
    section.add "PrimaryClusterId", valid_602450
  var valid_602451 = formData.getOrDefault("NotificationTopicArn")
  valid_602451 = validateParameter(valid_602451, JString, required = false,
                                 default = nil)
  if valid_602451 != nil:
    section.add "NotificationTopicArn", valid_602451
  var valid_602452 = formData.getOrDefault("EngineVersion")
  valid_602452 = validateParameter(valid_602452, JString, required = false,
                                 default = nil)
  if valid_602452 != nil:
    section.add "EngineVersion", valid_602452
  var valid_602453 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_602453 = validateParameter(valid_602453, JBool, required = false, default = nil)
  if valid_602453 != nil:
    section.add "TransitEncryptionEnabled", valid_602453
  var valid_602454 = formData.getOrDefault("KmsKeyId")
  valid_602454 = validateParameter(valid_602454, JString, required = false,
                                 default = nil)
  if valid_602454 != nil:
    section.add "KmsKeyId", valid_602454
  var valid_602455 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_602455 = validateParameter(valid_602455, JBool, required = false, default = nil)
  if valid_602455 != nil:
    section.add "AutomaticFailoverEnabled", valid_602455
  var valid_602456 = formData.getOrDefault("Engine")
  valid_602456 = validateParameter(valid_602456, JString, required = false,
                                 default = nil)
  if valid_602456 != nil:
    section.add "Engine", valid_602456
  var valid_602457 = formData.getOrDefault("NumNodeGroups")
  valid_602457 = validateParameter(valid_602457, JInt, required = false, default = nil)
  if valid_602457 != nil:
    section.add "NumNodeGroups", valid_602457
  var valid_602458 = formData.getOrDefault("CacheParameterGroupName")
  valid_602458 = validateParameter(valid_602458, JString, required = false,
                                 default = nil)
  if valid_602458 != nil:
    section.add "CacheParameterGroupName", valid_602458
  var valid_602459 = formData.getOrDefault("SnapshotArns")
  valid_602459 = validateParameter(valid_602459, JArray, required = false,
                                 default = nil)
  if valid_602459 != nil:
    section.add "SnapshotArns", valid_602459
  var valid_602460 = formData.getOrDefault("SnapshotName")
  valid_602460 = validateParameter(valid_602460, JString, required = false,
                                 default = nil)
  if valid_602460 != nil:
    section.add "SnapshotName", valid_602460
  var valid_602461 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602461 = validateParameter(valid_602461, JBool, required = false, default = nil)
  if valid_602461 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602461
  var valid_602462 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_602462 = validateParameter(valid_602462, JBool, required = false, default = nil)
  if valid_602462 != nil:
    section.add "AtRestEncryptionEnabled", valid_602462
  var valid_602463 = formData.getOrDefault("NodeGroupConfiguration")
  valid_602463 = validateParameter(valid_602463, JArray, required = false,
                                 default = nil)
  if valid_602463 != nil:
    section.add "NodeGroupConfiguration", valid_602463
  var valid_602464 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602464 = validateParameter(valid_602464, JString, required = false,
                                 default = nil)
  if valid_602464 != nil:
    section.add "CacheSubnetGroupName", valid_602464
  var valid_602465 = formData.getOrDefault("AuthToken")
  valid_602465 = validateParameter(valid_602465, JString, required = false,
                                 default = nil)
  if valid_602465 != nil:
    section.add "AuthToken", valid_602465
  var valid_602466 = formData.getOrDefault("ReplicationGroupDescription")
  valid_602466 = validateParameter(valid_602466, JString, required = true,
                                 default = nil)
  if valid_602466 != nil:
    section.add "ReplicationGroupDescription", valid_602466
  var valid_602467 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_602467 = validateParameter(valid_602467, JArray, required = false,
                                 default = nil)
  if valid_602467 != nil:
    section.add "CacheSecurityGroupNames", valid_602467
  var valid_602468 = formData.getOrDefault("Tags")
  valid_602468 = validateParameter(valid_602468, JArray, required = false,
                                 default = nil)
  if valid_602468 != nil:
    section.add "Tags", valid_602468
  var valid_602469 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_602469 = validateParameter(valid_602469, JInt, required = false, default = nil)
  if valid_602469 != nil:
    section.add "SnapshotRetentionLimit", valid_602469
  var valid_602470 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_602470 = validateParameter(valid_602470, JInt, required = false, default = nil)
  if valid_602470 != nil:
    section.add "ReplicasPerNodeGroup", valid_602470
  var valid_602471 = formData.getOrDefault("CacheNodeType")
  valid_602471 = validateParameter(valid_602471, JString, required = false,
                                 default = nil)
  if valid_602471 != nil:
    section.add "CacheNodeType", valid_602471
  var valid_602472 = formData.getOrDefault("NumCacheClusters")
  valid_602472 = validateParameter(valid_602472, JInt, required = false, default = nil)
  if valid_602472 != nil:
    section.add "NumCacheClusters", valid_602472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602473: Call_PostCreateReplicationGroup_602432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602473.validator(path, query, header, formData, body)
  let scheme = call_602473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602473.url(scheme.get, call_602473.host, call_602473.base,
                         call_602473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602473, url, valid)

proc call*(call_602474: Call_PostCreateReplicationGroup_602432;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_602475 = newJObject()
  var formData_602476 = newJObject()
  if SecurityGroupIds != nil:
    formData_602476.add "SecurityGroupIds", SecurityGroupIds
  add(formData_602476, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_602476, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_602476, "Port", newJInt(Port))
  add(formData_602476, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_602476.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_602476, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_602476, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_602476, "EngineVersion", newJString(EngineVersion))
  add(formData_602476, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_602476, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602476, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_602476, "Engine", newJString(Engine))
  add(formData_602476, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_602476, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_602476.add "SnapshotArns", SnapshotArns
  add(formData_602476, "SnapshotName", newJString(SnapshotName))
  add(formData_602476, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602476, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_602476.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_602476, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602475, "Action", newJString(Action))
  add(formData_602476, "AuthToken", newJString(AuthToken))
  add(formData_602476, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_602476.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_602476.add "Tags", Tags
  add(formData_602476, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_602476, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_602475, "Version", newJString(Version))
  add(formData_602476, "CacheNodeType", newJString(CacheNodeType))
  add(formData_602476, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_602474.call(nil, query_602475, nil, formData_602476, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_602432(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_602433, base: "/",
    url: url_PostCreateReplicationGroup_602434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_602388 = ref object of OpenApiRestCall_601389
proc url_GetCreateReplicationGroup_602390(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReplicationGroup_602389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_602391 = query.getOrDefault("SnapshotArns")
  valid_602391 = validateParameter(valid_602391, JArray, required = false,
                                 default = nil)
  if valid_602391 != nil:
    section.add "SnapshotArns", valid_602391
  var valid_602392 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_602392 = validateParameter(valid_602392, JArray, required = false,
                                 default = nil)
  if valid_602392 != nil:
    section.add "PreferredCacheClusterAZs", valid_602392
  var valid_602393 = query.getOrDefault("AuthToken")
  valid_602393 = validateParameter(valid_602393, JString, required = false,
                                 default = nil)
  if valid_602393 != nil:
    section.add "AuthToken", valid_602393
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_602394 = query.getOrDefault("ReplicationGroupDescription")
  valid_602394 = validateParameter(valid_602394, JString, required = true,
                                 default = nil)
  if valid_602394 != nil:
    section.add "ReplicationGroupDescription", valid_602394
  var valid_602395 = query.getOrDefault("Engine")
  valid_602395 = validateParameter(valid_602395, JString, required = false,
                                 default = nil)
  if valid_602395 != nil:
    section.add "Engine", valid_602395
  var valid_602396 = query.getOrDefault("NumNodeGroups")
  valid_602396 = validateParameter(valid_602396, JInt, required = false, default = nil)
  if valid_602396 != nil:
    section.add "NumNodeGroups", valid_602396
  var valid_602397 = query.getOrDefault("CacheParameterGroupName")
  valid_602397 = validateParameter(valid_602397, JString, required = false,
                                 default = nil)
  if valid_602397 != nil:
    section.add "CacheParameterGroupName", valid_602397
  var valid_602398 = query.getOrDefault("Tags")
  valid_602398 = validateParameter(valid_602398, JArray, required = false,
                                 default = nil)
  if valid_602398 != nil:
    section.add "Tags", valid_602398
  var valid_602399 = query.getOrDefault("KmsKeyId")
  valid_602399 = validateParameter(valid_602399, JString, required = false,
                                 default = nil)
  if valid_602399 != nil:
    section.add "KmsKeyId", valid_602399
  var valid_602400 = query.getOrDefault("SnapshotRetentionLimit")
  valid_602400 = validateParameter(valid_602400, JInt, required = false, default = nil)
  if valid_602400 != nil:
    section.add "SnapshotRetentionLimit", valid_602400
  var valid_602401 = query.getOrDefault("TransitEncryptionEnabled")
  valid_602401 = validateParameter(valid_602401, JBool, required = false, default = nil)
  if valid_602401 != nil:
    section.add "TransitEncryptionEnabled", valid_602401
  var valid_602402 = query.getOrDefault("CacheSecurityGroupNames")
  valid_602402 = validateParameter(valid_602402, JArray, required = false,
                                 default = nil)
  if valid_602402 != nil:
    section.add "CacheSecurityGroupNames", valid_602402
  var valid_602403 = query.getOrDefault("PrimaryClusterId")
  valid_602403 = validateParameter(valid_602403, JString, required = false,
                                 default = nil)
  if valid_602403 != nil:
    section.add "PrimaryClusterId", valid_602403
  var valid_602404 = query.getOrDefault("CacheNodeType")
  valid_602404 = validateParameter(valid_602404, JString, required = false,
                                 default = nil)
  if valid_602404 != nil:
    section.add "CacheNodeType", valid_602404
  var valid_602405 = query.getOrDefault("EngineVersion")
  valid_602405 = validateParameter(valid_602405, JString, required = false,
                                 default = nil)
  if valid_602405 != nil:
    section.add "EngineVersion", valid_602405
  var valid_602406 = query.getOrDefault("NumCacheClusters")
  valid_602406 = validateParameter(valid_602406, JInt, required = false, default = nil)
  if valid_602406 != nil:
    section.add "NumCacheClusters", valid_602406
  var valid_602407 = query.getOrDefault("Action")
  valid_602407 = validateParameter(valid_602407, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_602407 != nil:
    section.add "Action", valid_602407
  var valid_602408 = query.getOrDefault("NodeGroupConfiguration")
  valid_602408 = validateParameter(valid_602408, JArray, required = false,
                                 default = nil)
  if valid_602408 != nil:
    section.add "NodeGroupConfiguration", valid_602408
  var valid_602409 = query.getOrDefault("Port")
  valid_602409 = validateParameter(valid_602409, JInt, required = false, default = nil)
  if valid_602409 != nil:
    section.add "Port", valid_602409
  var valid_602410 = query.getOrDefault("ReplicationGroupId")
  valid_602410 = validateParameter(valid_602410, JString, required = true,
                                 default = nil)
  if valid_602410 != nil:
    section.add "ReplicationGroupId", valid_602410
  var valid_602411 = query.getOrDefault("CacheSubnetGroupName")
  valid_602411 = validateParameter(valid_602411, JString, required = false,
                                 default = nil)
  if valid_602411 != nil:
    section.add "CacheSubnetGroupName", valid_602411
  var valid_602412 = query.getOrDefault("NotificationTopicArn")
  valid_602412 = validateParameter(valid_602412, JString, required = false,
                                 default = nil)
  if valid_602412 != nil:
    section.add "NotificationTopicArn", valid_602412
  var valid_602413 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_602413 = validateParameter(valid_602413, JBool, required = false, default = nil)
  if valid_602413 != nil:
    section.add "AutomaticFailoverEnabled", valid_602413
  var valid_602414 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_602414 = validateParameter(valid_602414, JBool, required = false, default = nil)
  if valid_602414 != nil:
    section.add "AtRestEncryptionEnabled", valid_602414
  var valid_602415 = query.getOrDefault("Version")
  valid_602415 = validateParameter(valid_602415, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602415 != nil:
    section.add "Version", valid_602415
  var valid_602416 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602416 = validateParameter(valid_602416, JString, required = false,
                                 default = nil)
  if valid_602416 != nil:
    section.add "PreferredMaintenanceWindow", valid_602416
  var valid_602417 = query.getOrDefault("SnapshotName")
  valid_602417 = validateParameter(valid_602417, JString, required = false,
                                 default = nil)
  if valid_602417 != nil:
    section.add "SnapshotName", valid_602417
  var valid_602418 = query.getOrDefault("SnapshotWindow")
  valid_602418 = validateParameter(valid_602418, JString, required = false,
                                 default = nil)
  if valid_602418 != nil:
    section.add "SnapshotWindow", valid_602418
  var valid_602419 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_602419 = validateParameter(valid_602419, JInt, required = false, default = nil)
  if valid_602419 != nil:
    section.add "ReplicasPerNodeGroup", valid_602419
  var valid_602420 = query.getOrDefault("SecurityGroupIds")
  valid_602420 = validateParameter(valid_602420, JArray, required = false,
                                 default = nil)
  if valid_602420 != nil:
    section.add "SecurityGroupIds", valid_602420
  var valid_602421 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602421 = validateParameter(valid_602421, JBool, required = false, default = nil)
  if valid_602421 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602422 = header.getOrDefault("X-Amz-Signature")
  valid_602422 = validateParameter(valid_602422, JString, required = false,
                                 default = nil)
  if valid_602422 != nil:
    section.add "X-Amz-Signature", valid_602422
  var valid_602423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602423 = validateParameter(valid_602423, JString, required = false,
                                 default = nil)
  if valid_602423 != nil:
    section.add "X-Amz-Content-Sha256", valid_602423
  var valid_602424 = header.getOrDefault("X-Amz-Date")
  valid_602424 = validateParameter(valid_602424, JString, required = false,
                                 default = nil)
  if valid_602424 != nil:
    section.add "X-Amz-Date", valid_602424
  var valid_602425 = header.getOrDefault("X-Amz-Credential")
  valid_602425 = validateParameter(valid_602425, JString, required = false,
                                 default = nil)
  if valid_602425 != nil:
    section.add "X-Amz-Credential", valid_602425
  var valid_602426 = header.getOrDefault("X-Amz-Security-Token")
  valid_602426 = validateParameter(valid_602426, JString, required = false,
                                 default = nil)
  if valid_602426 != nil:
    section.add "X-Amz-Security-Token", valid_602426
  var valid_602427 = header.getOrDefault("X-Amz-Algorithm")
  valid_602427 = validateParameter(valid_602427, JString, required = false,
                                 default = nil)
  if valid_602427 != nil:
    section.add "X-Amz-Algorithm", valid_602427
  var valid_602428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602428 = validateParameter(valid_602428, JString, required = false,
                                 default = nil)
  if valid_602428 != nil:
    section.add "X-Amz-SignedHeaders", valid_602428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602429: Call_GetCreateReplicationGroup_602388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602429.validator(path, query, header, formData, body)
  let scheme = call_602429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602429.url(scheme.get, call_602429.host, call_602429.base,
                         call_602429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602429, url, valid)

proc call*(call_602430: Call_GetCreateReplicationGroup_602388;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_602431 = newJObject()
  if SnapshotArns != nil:
    query_602431.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_602431.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_602431, "AuthToken", newJString(AuthToken))
  add(query_602431, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_602431, "Engine", newJString(Engine))
  add(query_602431, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_602431, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_602431.add "Tags", Tags
  add(query_602431, "KmsKeyId", newJString(KmsKeyId))
  add(query_602431, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_602431, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_602431.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_602431, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_602431, "CacheNodeType", newJString(CacheNodeType))
  add(query_602431, "EngineVersion", newJString(EngineVersion))
  add(query_602431, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_602431, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_602431.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_602431, "Port", newJInt(Port))
  add(query_602431, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602431, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602431, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_602431, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_602431, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_602431, "Version", newJString(Version))
  add(query_602431, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602431, "SnapshotName", newJString(SnapshotName))
  add(query_602431, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_602431, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_602431.add "SecurityGroupIds", SecurityGroupIds
  add(query_602431, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_602430.call(nil, query_602431, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_602388(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_602389, base: "/",
    url: url_GetCreateReplicationGroup_602390,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_602496 = ref object of OpenApiRestCall_601389
proc url_PostCreateSnapshot_602498(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSnapshot_602497(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602499 = query.getOrDefault("Action")
  valid_602499 = validateParameter(valid_602499, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_602499 != nil:
    section.add "Action", valid_602499
  var valid_602500 = query.getOrDefault("Version")
  valid_602500 = validateParameter(valid_602500, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602500 != nil:
    section.add "Version", valid_602500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602501 = header.getOrDefault("X-Amz-Signature")
  valid_602501 = validateParameter(valid_602501, JString, required = false,
                                 default = nil)
  if valid_602501 != nil:
    section.add "X-Amz-Signature", valid_602501
  var valid_602502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602502 = validateParameter(valid_602502, JString, required = false,
                                 default = nil)
  if valid_602502 != nil:
    section.add "X-Amz-Content-Sha256", valid_602502
  var valid_602503 = header.getOrDefault("X-Amz-Date")
  valid_602503 = validateParameter(valid_602503, JString, required = false,
                                 default = nil)
  if valid_602503 != nil:
    section.add "X-Amz-Date", valid_602503
  var valid_602504 = header.getOrDefault("X-Amz-Credential")
  valid_602504 = validateParameter(valid_602504, JString, required = false,
                                 default = nil)
  if valid_602504 != nil:
    section.add "X-Amz-Credential", valid_602504
  var valid_602505 = header.getOrDefault("X-Amz-Security-Token")
  valid_602505 = validateParameter(valid_602505, JString, required = false,
                                 default = nil)
  if valid_602505 != nil:
    section.add "X-Amz-Security-Token", valid_602505
  var valid_602506 = header.getOrDefault("X-Amz-Algorithm")
  valid_602506 = validateParameter(valid_602506, JString, required = false,
                                 default = nil)
  if valid_602506 != nil:
    section.add "X-Amz-Algorithm", valid_602506
  var valid_602507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602507 = validateParameter(valid_602507, JString, required = false,
                                 default = nil)
  if valid_602507 != nil:
    section.add "X-Amz-SignedHeaders", valid_602507
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_602508 = formData.getOrDefault("CacheClusterId")
  valid_602508 = validateParameter(valid_602508, JString, required = false,
                                 default = nil)
  if valid_602508 != nil:
    section.add "CacheClusterId", valid_602508
  var valid_602509 = formData.getOrDefault("KmsKeyId")
  valid_602509 = validateParameter(valid_602509, JString, required = false,
                                 default = nil)
  if valid_602509 != nil:
    section.add "KmsKeyId", valid_602509
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_602510 = formData.getOrDefault("SnapshotName")
  valid_602510 = validateParameter(valid_602510, JString, required = true,
                                 default = nil)
  if valid_602510 != nil:
    section.add "SnapshotName", valid_602510
  var valid_602511 = formData.getOrDefault("ReplicationGroupId")
  valid_602511 = validateParameter(valid_602511, JString, required = false,
                                 default = nil)
  if valid_602511 != nil:
    section.add "ReplicationGroupId", valid_602511
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602512: Call_PostCreateSnapshot_602496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602512.validator(path, query, header, formData, body)
  let scheme = call_602512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602512.url(scheme.get, call_602512.host, call_602512.base,
                         call_602512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602512, url, valid)

proc call*(call_602513: Call_PostCreateSnapshot_602496; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_602514 = newJObject()
  var formData_602515 = newJObject()
  add(formData_602515, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602515, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602515, "SnapshotName", newJString(SnapshotName))
  add(query_602514, "Action", newJString(Action))
  add(query_602514, "Version", newJString(Version))
  add(formData_602515, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_602513.call(nil, query_602514, nil, formData_602515, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_602496(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_602497, base: "/",
    url: url_PostCreateSnapshot_602498, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_602477 = ref object of OpenApiRestCall_601389
proc url_GetCreateSnapshot_602479(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSnapshot_602478(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_602480 = query.getOrDefault("KmsKeyId")
  valid_602480 = validateParameter(valid_602480, JString, required = false,
                                 default = nil)
  if valid_602480 != nil:
    section.add "KmsKeyId", valid_602480
  var valid_602481 = query.getOrDefault("CacheClusterId")
  valid_602481 = validateParameter(valid_602481, JString, required = false,
                                 default = nil)
  if valid_602481 != nil:
    section.add "CacheClusterId", valid_602481
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602482 = query.getOrDefault("Action")
  valid_602482 = validateParameter(valid_602482, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_602482 != nil:
    section.add "Action", valid_602482
  var valid_602483 = query.getOrDefault("ReplicationGroupId")
  valid_602483 = validateParameter(valid_602483, JString, required = false,
                                 default = nil)
  if valid_602483 != nil:
    section.add "ReplicationGroupId", valid_602483
  var valid_602484 = query.getOrDefault("Version")
  valid_602484 = validateParameter(valid_602484, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602484 != nil:
    section.add "Version", valid_602484
  var valid_602485 = query.getOrDefault("SnapshotName")
  valid_602485 = validateParameter(valid_602485, JString, required = true,
                                 default = nil)
  if valid_602485 != nil:
    section.add "SnapshotName", valid_602485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602486 = header.getOrDefault("X-Amz-Signature")
  valid_602486 = validateParameter(valid_602486, JString, required = false,
                                 default = nil)
  if valid_602486 != nil:
    section.add "X-Amz-Signature", valid_602486
  var valid_602487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602487 = validateParameter(valid_602487, JString, required = false,
                                 default = nil)
  if valid_602487 != nil:
    section.add "X-Amz-Content-Sha256", valid_602487
  var valid_602488 = header.getOrDefault("X-Amz-Date")
  valid_602488 = validateParameter(valid_602488, JString, required = false,
                                 default = nil)
  if valid_602488 != nil:
    section.add "X-Amz-Date", valid_602488
  var valid_602489 = header.getOrDefault("X-Amz-Credential")
  valid_602489 = validateParameter(valid_602489, JString, required = false,
                                 default = nil)
  if valid_602489 != nil:
    section.add "X-Amz-Credential", valid_602489
  var valid_602490 = header.getOrDefault("X-Amz-Security-Token")
  valid_602490 = validateParameter(valid_602490, JString, required = false,
                                 default = nil)
  if valid_602490 != nil:
    section.add "X-Amz-Security-Token", valid_602490
  var valid_602491 = header.getOrDefault("X-Amz-Algorithm")
  valid_602491 = validateParameter(valid_602491, JString, required = false,
                                 default = nil)
  if valid_602491 != nil:
    section.add "X-Amz-Algorithm", valid_602491
  var valid_602492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602492 = validateParameter(valid_602492, JString, required = false,
                                 default = nil)
  if valid_602492 != nil:
    section.add "X-Amz-SignedHeaders", valid_602492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602493: Call_GetCreateSnapshot_602477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602493.validator(path, query, header, formData, body)
  let scheme = call_602493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602493.url(scheme.get, call_602493.host, call_602493.base,
                         call_602493.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602493, url, valid)

proc call*(call_602494: Call_GetCreateSnapshot_602477; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_602495 = newJObject()
  add(query_602495, "KmsKeyId", newJString(KmsKeyId))
  add(query_602495, "CacheClusterId", newJString(CacheClusterId))
  add(query_602495, "Action", newJString(Action))
  add(query_602495, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602495, "Version", newJString(Version))
  add(query_602495, "SnapshotName", newJString(SnapshotName))
  result = call_602494.call(nil, query_602495, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_602477(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_602478,
    base: "/", url: url_GetCreateSnapshot_602479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_602536 = ref object of OpenApiRestCall_601389
proc url_PostDecreaseReplicaCount_602538(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDecreaseReplicaCount_602537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602539 = query.getOrDefault("Action")
  valid_602539 = validateParameter(valid_602539, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_602539 != nil:
    section.add "Action", valid_602539
  var valid_602540 = query.getOrDefault("Version")
  valid_602540 = validateParameter(valid_602540, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602540 != nil:
    section.add "Version", valid_602540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602541 = header.getOrDefault("X-Amz-Signature")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "X-Amz-Signature", valid_602541
  var valid_602542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "X-Amz-Content-Sha256", valid_602542
  var valid_602543 = header.getOrDefault("X-Amz-Date")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "X-Amz-Date", valid_602543
  var valid_602544 = header.getOrDefault("X-Amz-Credential")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "X-Amz-Credential", valid_602544
  var valid_602545 = header.getOrDefault("X-Amz-Security-Token")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "X-Amz-Security-Token", valid_602545
  var valid_602546 = header.getOrDefault("X-Amz-Algorithm")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "X-Amz-Algorithm", valid_602546
  var valid_602547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602547 = validateParameter(valid_602547, JString, required = false,
                                 default = nil)
  if valid_602547 != nil:
    section.add "X-Amz-SignedHeaders", valid_602547
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_602548 = formData.getOrDefault("ReplicaConfiguration")
  valid_602548 = validateParameter(valid_602548, JArray, required = false,
                                 default = nil)
  if valid_602548 != nil:
    section.add "ReplicaConfiguration", valid_602548
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_602549 = formData.getOrDefault("ApplyImmediately")
  valid_602549 = validateParameter(valid_602549, JBool, required = true, default = nil)
  if valid_602549 != nil:
    section.add "ApplyImmediately", valid_602549
  var valid_602550 = formData.getOrDefault("ReplicasToRemove")
  valid_602550 = validateParameter(valid_602550, JArray, required = false,
                                 default = nil)
  if valid_602550 != nil:
    section.add "ReplicasToRemove", valid_602550
  var valid_602551 = formData.getOrDefault("NewReplicaCount")
  valid_602551 = validateParameter(valid_602551, JInt, required = false, default = nil)
  if valid_602551 != nil:
    section.add "NewReplicaCount", valid_602551
  var valid_602552 = formData.getOrDefault("ReplicationGroupId")
  valid_602552 = validateParameter(valid_602552, JString, required = true,
                                 default = nil)
  if valid_602552 != nil:
    section.add "ReplicationGroupId", valid_602552
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602553: Call_PostDecreaseReplicaCount_602536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_602553.validator(path, query, header, formData, body)
  let scheme = call_602553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602553.url(scheme.get, call_602553.host, call_602553.base,
                         call_602553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602553, url, valid)

proc call*(call_602554: Call_PostDecreaseReplicaCount_602536;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_602555 = newJObject()
  var formData_602556 = newJObject()
  if ReplicaConfiguration != nil:
    formData_602556.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_602556, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_602556.add "ReplicasToRemove", ReplicasToRemove
  add(query_602555, "Action", newJString(Action))
  add(formData_602556, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_602555, "Version", newJString(Version))
  add(formData_602556, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_602554.call(nil, query_602555, nil, formData_602556, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_602536(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_602537, base: "/",
    url: url_PostDecreaseReplicaCount_602538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_602516 = ref object of OpenApiRestCall_601389
proc url_GetDecreaseReplicaCount_602518(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDecreaseReplicaCount_602517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_602519 = query.getOrDefault("NewReplicaCount")
  valid_602519 = validateParameter(valid_602519, JInt, required = false, default = nil)
  if valid_602519 != nil:
    section.add "NewReplicaCount", valid_602519
  var valid_602520 = query.getOrDefault("ReplicaConfiguration")
  valid_602520 = validateParameter(valid_602520, JArray, required = false,
                                 default = nil)
  if valid_602520 != nil:
    section.add "ReplicaConfiguration", valid_602520
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602521 = query.getOrDefault("Action")
  valid_602521 = validateParameter(valid_602521, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_602521 != nil:
    section.add "Action", valid_602521
  var valid_602522 = query.getOrDefault("ApplyImmediately")
  valid_602522 = validateParameter(valid_602522, JBool, required = true, default = nil)
  if valid_602522 != nil:
    section.add "ApplyImmediately", valid_602522
  var valid_602523 = query.getOrDefault("ReplicationGroupId")
  valid_602523 = validateParameter(valid_602523, JString, required = true,
                                 default = nil)
  if valid_602523 != nil:
    section.add "ReplicationGroupId", valid_602523
  var valid_602524 = query.getOrDefault("Version")
  valid_602524 = validateParameter(valid_602524, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602524 != nil:
    section.add "Version", valid_602524
  var valid_602525 = query.getOrDefault("ReplicasToRemove")
  valid_602525 = validateParameter(valid_602525, JArray, required = false,
                                 default = nil)
  if valid_602525 != nil:
    section.add "ReplicasToRemove", valid_602525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602526 = header.getOrDefault("X-Amz-Signature")
  valid_602526 = validateParameter(valid_602526, JString, required = false,
                                 default = nil)
  if valid_602526 != nil:
    section.add "X-Amz-Signature", valid_602526
  var valid_602527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602527 = validateParameter(valid_602527, JString, required = false,
                                 default = nil)
  if valid_602527 != nil:
    section.add "X-Amz-Content-Sha256", valid_602527
  var valid_602528 = header.getOrDefault("X-Amz-Date")
  valid_602528 = validateParameter(valid_602528, JString, required = false,
                                 default = nil)
  if valid_602528 != nil:
    section.add "X-Amz-Date", valid_602528
  var valid_602529 = header.getOrDefault("X-Amz-Credential")
  valid_602529 = validateParameter(valid_602529, JString, required = false,
                                 default = nil)
  if valid_602529 != nil:
    section.add "X-Amz-Credential", valid_602529
  var valid_602530 = header.getOrDefault("X-Amz-Security-Token")
  valid_602530 = validateParameter(valid_602530, JString, required = false,
                                 default = nil)
  if valid_602530 != nil:
    section.add "X-Amz-Security-Token", valid_602530
  var valid_602531 = header.getOrDefault("X-Amz-Algorithm")
  valid_602531 = validateParameter(valid_602531, JString, required = false,
                                 default = nil)
  if valid_602531 != nil:
    section.add "X-Amz-Algorithm", valid_602531
  var valid_602532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602532 = validateParameter(valid_602532, JString, required = false,
                                 default = nil)
  if valid_602532 != nil:
    section.add "X-Amz-SignedHeaders", valid_602532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602533: Call_GetDecreaseReplicaCount_602516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_602533.validator(path, query, header, formData, body)
  let scheme = call_602533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602533.url(scheme.get, call_602533.host, call_602533.base,
                         call_602533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602533, url, valid)

proc call*(call_602534: Call_GetDecreaseReplicaCount_602516;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_602535 = newJObject()
  add(query_602535, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_602535.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_602535, "Action", newJString(Action))
  add(query_602535, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_602535, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602535, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_602535.add "ReplicasToRemove", ReplicasToRemove
  result = call_602534.call(nil, query_602535, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_602516(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_602517, base: "/",
    url: url_GetDecreaseReplicaCount_602518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_602574 = ref object of OpenApiRestCall_601389
proc url_PostDeleteCacheCluster_602576(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheCluster_602575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602577 = query.getOrDefault("Action")
  valid_602577 = validateParameter(valid_602577, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_602577 != nil:
    section.add "Action", valid_602577
  var valid_602578 = query.getOrDefault("Version")
  valid_602578 = validateParameter(valid_602578, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602578 != nil:
    section.add "Version", valid_602578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602579 = header.getOrDefault("X-Amz-Signature")
  valid_602579 = validateParameter(valid_602579, JString, required = false,
                                 default = nil)
  if valid_602579 != nil:
    section.add "X-Amz-Signature", valid_602579
  var valid_602580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602580 = validateParameter(valid_602580, JString, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "X-Amz-Content-Sha256", valid_602580
  var valid_602581 = header.getOrDefault("X-Amz-Date")
  valid_602581 = validateParameter(valid_602581, JString, required = false,
                                 default = nil)
  if valid_602581 != nil:
    section.add "X-Amz-Date", valid_602581
  var valid_602582 = header.getOrDefault("X-Amz-Credential")
  valid_602582 = validateParameter(valid_602582, JString, required = false,
                                 default = nil)
  if valid_602582 != nil:
    section.add "X-Amz-Credential", valid_602582
  var valid_602583 = header.getOrDefault("X-Amz-Security-Token")
  valid_602583 = validateParameter(valid_602583, JString, required = false,
                                 default = nil)
  if valid_602583 != nil:
    section.add "X-Amz-Security-Token", valid_602583
  var valid_602584 = header.getOrDefault("X-Amz-Algorithm")
  valid_602584 = validateParameter(valid_602584, JString, required = false,
                                 default = nil)
  if valid_602584 != nil:
    section.add "X-Amz-Algorithm", valid_602584
  var valid_602585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602585 = validateParameter(valid_602585, JString, required = false,
                                 default = nil)
  if valid_602585 != nil:
    section.add "X-Amz-SignedHeaders", valid_602585
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_602586 = formData.getOrDefault("CacheClusterId")
  valid_602586 = validateParameter(valid_602586, JString, required = true,
                                 default = nil)
  if valid_602586 != nil:
    section.add "CacheClusterId", valid_602586
  var valid_602587 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_602587 = validateParameter(valid_602587, JString, required = false,
                                 default = nil)
  if valid_602587 != nil:
    section.add "FinalSnapshotIdentifier", valid_602587
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602588: Call_PostDeleteCacheCluster_602574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_602588.validator(path, query, header, formData, body)
  let scheme = call_602588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602588.url(scheme.get, call_602588.host, call_602588.base,
                         call_602588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602588, url, valid)

proc call*(call_602589: Call_PostDeleteCacheCluster_602574; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602590 = newJObject()
  var formData_602591 = newJObject()
  add(formData_602591, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602591, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_602590, "Action", newJString(Action))
  add(query_602590, "Version", newJString(Version))
  result = call_602589.call(nil, query_602590, nil, formData_602591, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_602574(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_602575, base: "/",
    url: url_PostDeleteCacheCluster_602576, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_602557 = ref object of OpenApiRestCall_601389
proc url_GetDeleteCacheCluster_602559(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheCluster_602558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602560 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_602560 = validateParameter(valid_602560, JString, required = false,
                                 default = nil)
  if valid_602560 != nil:
    section.add "FinalSnapshotIdentifier", valid_602560
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_602561 = query.getOrDefault("CacheClusterId")
  valid_602561 = validateParameter(valid_602561, JString, required = true,
                                 default = nil)
  if valid_602561 != nil:
    section.add "CacheClusterId", valid_602561
  var valid_602562 = query.getOrDefault("Action")
  valid_602562 = validateParameter(valid_602562, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_602562 != nil:
    section.add "Action", valid_602562
  var valid_602563 = query.getOrDefault("Version")
  valid_602563 = validateParameter(valid_602563, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602563 != nil:
    section.add "Version", valid_602563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602564 = header.getOrDefault("X-Amz-Signature")
  valid_602564 = validateParameter(valid_602564, JString, required = false,
                                 default = nil)
  if valid_602564 != nil:
    section.add "X-Amz-Signature", valid_602564
  var valid_602565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602565 = validateParameter(valid_602565, JString, required = false,
                                 default = nil)
  if valid_602565 != nil:
    section.add "X-Amz-Content-Sha256", valid_602565
  var valid_602566 = header.getOrDefault("X-Amz-Date")
  valid_602566 = validateParameter(valid_602566, JString, required = false,
                                 default = nil)
  if valid_602566 != nil:
    section.add "X-Amz-Date", valid_602566
  var valid_602567 = header.getOrDefault("X-Amz-Credential")
  valid_602567 = validateParameter(valid_602567, JString, required = false,
                                 default = nil)
  if valid_602567 != nil:
    section.add "X-Amz-Credential", valid_602567
  var valid_602568 = header.getOrDefault("X-Amz-Security-Token")
  valid_602568 = validateParameter(valid_602568, JString, required = false,
                                 default = nil)
  if valid_602568 != nil:
    section.add "X-Amz-Security-Token", valid_602568
  var valid_602569 = header.getOrDefault("X-Amz-Algorithm")
  valid_602569 = validateParameter(valid_602569, JString, required = false,
                                 default = nil)
  if valid_602569 != nil:
    section.add "X-Amz-Algorithm", valid_602569
  var valid_602570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602570 = validateParameter(valid_602570, JString, required = false,
                                 default = nil)
  if valid_602570 != nil:
    section.add "X-Amz-SignedHeaders", valid_602570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602571: Call_GetDeleteCacheCluster_602557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_602571.validator(path, query, header, formData, body)
  let scheme = call_602571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602571.url(scheme.get, call_602571.host, call_602571.base,
                         call_602571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602571, url, valid)

proc call*(call_602572: Call_GetDeleteCacheCluster_602557; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602573 = newJObject()
  add(query_602573, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_602573, "CacheClusterId", newJString(CacheClusterId))
  add(query_602573, "Action", newJString(Action))
  add(query_602573, "Version", newJString(Version))
  result = call_602572.call(nil, query_602573, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_602557(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_602558, base: "/",
    url: url_GetDeleteCacheCluster_602559, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_602608 = ref object of OpenApiRestCall_601389
proc url_PostDeleteCacheParameterGroup_602610(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheParameterGroup_602609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602611 = query.getOrDefault("Action")
  valid_602611 = validateParameter(valid_602611, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_602611 != nil:
    section.add "Action", valid_602611
  var valid_602612 = query.getOrDefault("Version")
  valid_602612 = validateParameter(valid_602612, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602612 != nil:
    section.add "Version", valid_602612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602613 = header.getOrDefault("X-Amz-Signature")
  valid_602613 = validateParameter(valid_602613, JString, required = false,
                                 default = nil)
  if valid_602613 != nil:
    section.add "X-Amz-Signature", valid_602613
  var valid_602614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602614 = validateParameter(valid_602614, JString, required = false,
                                 default = nil)
  if valid_602614 != nil:
    section.add "X-Amz-Content-Sha256", valid_602614
  var valid_602615 = header.getOrDefault("X-Amz-Date")
  valid_602615 = validateParameter(valid_602615, JString, required = false,
                                 default = nil)
  if valid_602615 != nil:
    section.add "X-Amz-Date", valid_602615
  var valid_602616 = header.getOrDefault("X-Amz-Credential")
  valid_602616 = validateParameter(valid_602616, JString, required = false,
                                 default = nil)
  if valid_602616 != nil:
    section.add "X-Amz-Credential", valid_602616
  var valid_602617 = header.getOrDefault("X-Amz-Security-Token")
  valid_602617 = validateParameter(valid_602617, JString, required = false,
                                 default = nil)
  if valid_602617 != nil:
    section.add "X-Amz-Security-Token", valid_602617
  var valid_602618 = header.getOrDefault("X-Amz-Algorithm")
  valid_602618 = validateParameter(valid_602618, JString, required = false,
                                 default = nil)
  if valid_602618 != nil:
    section.add "X-Amz-Algorithm", valid_602618
  var valid_602619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602619 = validateParameter(valid_602619, JString, required = false,
                                 default = nil)
  if valid_602619 != nil:
    section.add "X-Amz-SignedHeaders", valid_602619
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602620 = formData.getOrDefault("CacheParameterGroupName")
  valid_602620 = validateParameter(valid_602620, JString, required = true,
                                 default = nil)
  if valid_602620 != nil:
    section.add "CacheParameterGroupName", valid_602620
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602621: Call_PostDeleteCacheParameterGroup_602608; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_602621.validator(path, query, header, formData, body)
  let scheme = call_602621.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602621.url(scheme.get, call_602621.host, call_602621.base,
                         call_602621.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602621, url, valid)

proc call*(call_602622: Call_PostDeleteCacheParameterGroup_602608;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602623 = newJObject()
  var formData_602624 = newJObject()
  add(formData_602624, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_602623, "Action", newJString(Action))
  add(query_602623, "Version", newJString(Version))
  result = call_602622.call(nil, query_602623, nil, formData_602624, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_602608(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_602609, base: "/",
    url: url_PostDeleteCacheParameterGroup_602610,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_602592 = ref object of OpenApiRestCall_601389
proc url_GetDeleteCacheParameterGroup_602594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheParameterGroup_602593(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602595 = query.getOrDefault("CacheParameterGroupName")
  valid_602595 = validateParameter(valid_602595, JString, required = true,
                                 default = nil)
  if valid_602595 != nil:
    section.add "CacheParameterGroupName", valid_602595
  var valid_602596 = query.getOrDefault("Action")
  valid_602596 = validateParameter(valid_602596, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_602596 != nil:
    section.add "Action", valid_602596
  var valid_602597 = query.getOrDefault("Version")
  valid_602597 = validateParameter(valid_602597, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602597 != nil:
    section.add "Version", valid_602597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602598 = header.getOrDefault("X-Amz-Signature")
  valid_602598 = validateParameter(valid_602598, JString, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "X-Amz-Signature", valid_602598
  var valid_602599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602599 = validateParameter(valid_602599, JString, required = false,
                                 default = nil)
  if valid_602599 != nil:
    section.add "X-Amz-Content-Sha256", valid_602599
  var valid_602600 = header.getOrDefault("X-Amz-Date")
  valid_602600 = validateParameter(valid_602600, JString, required = false,
                                 default = nil)
  if valid_602600 != nil:
    section.add "X-Amz-Date", valid_602600
  var valid_602601 = header.getOrDefault("X-Amz-Credential")
  valid_602601 = validateParameter(valid_602601, JString, required = false,
                                 default = nil)
  if valid_602601 != nil:
    section.add "X-Amz-Credential", valid_602601
  var valid_602602 = header.getOrDefault("X-Amz-Security-Token")
  valid_602602 = validateParameter(valid_602602, JString, required = false,
                                 default = nil)
  if valid_602602 != nil:
    section.add "X-Amz-Security-Token", valid_602602
  var valid_602603 = header.getOrDefault("X-Amz-Algorithm")
  valid_602603 = validateParameter(valid_602603, JString, required = false,
                                 default = nil)
  if valid_602603 != nil:
    section.add "X-Amz-Algorithm", valid_602603
  var valid_602604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602604 = validateParameter(valid_602604, JString, required = false,
                                 default = nil)
  if valid_602604 != nil:
    section.add "X-Amz-SignedHeaders", valid_602604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602605: Call_GetDeleteCacheParameterGroup_602592; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_602605.validator(path, query, header, formData, body)
  let scheme = call_602605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602605.url(scheme.get, call_602605.host, call_602605.base,
                         call_602605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602605, url, valid)

proc call*(call_602606: Call_GetDeleteCacheParameterGroup_602592;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602607 = newJObject()
  add(query_602607, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602607, "Action", newJString(Action))
  add(query_602607, "Version", newJString(Version))
  result = call_602606.call(nil, query_602607, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_602592(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_602593, base: "/",
    url: url_GetDeleteCacheParameterGroup_602594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_602641 = ref object of OpenApiRestCall_601389
proc url_PostDeleteCacheSecurityGroup_602643(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_602642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602644 = query.getOrDefault("Action")
  valid_602644 = validateParameter(valid_602644, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_602644 != nil:
    section.add "Action", valid_602644
  var valid_602645 = query.getOrDefault("Version")
  valid_602645 = validateParameter(valid_602645, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602645 != nil:
    section.add "Version", valid_602645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602646 = header.getOrDefault("X-Amz-Signature")
  valid_602646 = validateParameter(valid_602646, JString, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "X-Amz-Signature", valid_602646
  var valid_602647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602647 = validateParameter(valid_602647, JString, required = false,
                                 default = nil)
  if valid_602647 != nil:
    section.add "X-Amz-Content-Sha256", valid_602647
  var valid_602648 = header.getOrDefault("X-Amz-Date")
  valid_602648 = validateParameter(valid_602648, JString, required = false,
                                 default = nil)
  if valid_602648 != nil:
    section.add "X-Amz-Date", valid_602648
  var valid_602649 = header.getOrDefault("X-Amz-Credential")
  valid_602649 = validateParameter(valid_602649, JString, required = false,
                                 default = nil)
  if valid_602649 != nil:
    section.add "X-Amz-Credential", valid_602649
  var valid_602650 = header.getOrDefault("X-Amz-Security-Token")
  valid_602650 = validateParameter(valid_602650, JString, required = false,
                                 default = nil)
  if valid_602650 != nil:
    section.add "X-Amz-Security-Token", valid_602650
  var valid_602651 = header.getOrDefault("X-Amz-Algorithm")
  valid_602651 = validateParameter(valid_602651, JString, required = false,
                                 default = nil)
  if valid_602651 != nil:
    section.add "X-Amz-Algorithm", valid_602651
  var valid_602652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602652 = validateParameter(valid_602652, JString, required = false,
                                 default = nil)
  if valid_602652 != nil:
    section.add "X-Amz-SignedHeaders", valid_602652
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_602653 = formData.getOrDefault("CacheSecurityGroupName")
  valid_602653 = validateParameter(valid_602653, JString, required = true,
                                 default = nil)
  if valid_602653 != nil:
    section.add "CacheSecurityGroupName", valid_602653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602654: Call_PostDeleteCacheSecurityGroup_602641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_602654.validator(path, query, header, formData, body)
  let scheme = call_602654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602654.url(scheme.get, call_602654.host, call_602654.base,
                         call_602654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602654, url, valid)

proc call*(call_602655: Call_PostDeleteCacheSecurityGroup_602641;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602656 = newJObject()
  var formData_602657 = newJObject()
  add(formData_602657, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_602656, "Action", newJString(Action))
  add(query_602656, "Version", newJString(Version))
  result = call_602655.call(nil, query_602656, nil, formData_602657, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_602641(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_602642, base: "/",
    url: url_PostDeleteCacheSecurityGroup_602643,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_602625 = ref object of OpenApiRestCall_601389
proc url_GetDeleteCacheSecurityGroup_602627(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_602626(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602628 = query.getOrDefault("Action")
  valid_602628 = validateParameter(valid_602628, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_602628 != nil:
    section.add "Action", valid_602628
  var valid_602629 = query.getOrDefault("CacheSecurityGroupName")
  valid_602629 = validateParameter(valid_602629, JString, required = true,
                                 default = nil)
  if valid_602629 != nil:
    section.add "CacheSecurityGroupName", valid_602629
  var valid_602630 = query.getOrDefault("Version")
  valid_602630 = validateParameter(valid_602630, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602630 != nil:
    section.add "Version", valid_602630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602631 = header.getOrDefault("X-Amz-Signature")
  valid_602631 = validateParameter(valid_602631, JString, required = false,
                                 default = nil)
  if valid_602631 != nil:
    section.add "X-Amz-Signature", valid_602631
  var valid_602632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602632 = validateParameter(valid_602632, JString, required = false,
                                 default = nil)
  if valid_602632 != nil:
    section.add "X-Amz-Content-Sha256", valid_602632
  var valid_602633 = header.getOrDefault("X-Amz-Date")
  valid_602633 = validateParameter(valid_602633, JString, required = false,
                                 default = nil)
  if valid_602633 != nil:
    section.add "X-Amz-Date", valid_602633
  var valid_602634 = header.getOrDefault("X-Amz-Credential")
  valid_602634 = validateParameter(valid_602634, JString, required = false,
                                 default = nil)
  if valid_602634 != nil:
    section.add "X-Amz-Credential", valid_602634
  var valid_602635 = header.getOrDefault("X-Amz-Security-Token")
  valid_602635 = validateParameter(valid_602635, JString, required = false,
                                 default = nil)
  if valid_602635 != nil:
    section.add "X-Amz-Security-Token", valid_602635
  var valid_602636 = header.getOrDefault("X-Amz-Algorithm")
  valid_602636 = validateParameter(valid_602636, JString, required = false,
                                 default = nil)
  if valid_602636 != nil:
    section.add "X-Amz-Algorithm", valid_602636
  var valid_602637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602637 = validateParameter(valid_602637, JString, required = false,
                                 default = nil)
  if valid_602637 != nil:
    section.add "X-Amz-SignedHeaders", valid_602637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602638: Call_GetDeleteCacheSecurityGroup_602625; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_602638.validator(path, query, header, formData, body)
  let scheme = call_602638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602638.url(scheme.get, call_602638.host, call_602638.base,
                         call_602638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602638, url, valid)

proc call*(call_602639: Call_GetDeleteCacheSecurityGroup_602625;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_602640 = newJObject()
  add(query_602640, "Action", newJString(Action))
  add(query_602640, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_602640, "Version", newJString(Version))
  result = call_602639.call(nil, query_602640, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_602625(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_602626, base: "/",
    url: url_GetDeleteCacheSecurityGroup_602627,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_602674 = ref object of OpenApiRestCall_601389
proc url_PostDeleteCacheSubnetGroup_602676(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_602675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602677 = query.getOrDefault("Action")
  valid_602677 = validateParameter(valid_602677, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_602677 != nil:
    section.add "Action", valid_602677
  var valid_602678 = query.getOrDefault("Version")
  valid_602678 = validateParameter(valid_602678, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602678 != nil:
    section.add "Version", valid_602678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602679 = header.getOrDefault("X-Amz-Signature")
  valid_602679 = validateParameter(valid_602679, JString, required = false,
                                 default = nil)
  if valid_602679 != nil:
    section.add "X-Amz-Signature", valid_602679
  var valid_602680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602680 = validateParameter(valid_602680, JString, required = false,
                                 default = nil)
  if valid_602680 != nil:
    section.add "X-Amz-Content-Sha256", valid_602680
  var valid_602681 = header.getOrDefault("X-Amz-Date")
  valid_602681 = validateParameter(valid_602681, JString, required = false,
                                 default = nil)
  if valid_602681 != nil:
    section.add "X-Amz-Date", valid_602681
  var valid_602682 = header.getOrDefault("X-Amz-Credential")
  valid_602682 = validateParameter(valid_602682, JString, required = false,
                                 default = nil)
  if valid_602682 != nil:
    section.add "X-Amz-Credential", valid_602682
  var valid_602683 = header.getOrDefault("X-Amz-Security-Token")
  valid_602683 = validateParameter(valid_602683, JString, required = false,
                                 default = nil)
  if valid_602683 != nil:
    section.add "X-Amz-Security-Token", valid_602683
  var valid_602684 = header.getOrDefault("X-Amz-Algorithm")
  valid_602684 = validateParameter(valid_602684, JString, required = false,
                                 default = nil)
  if valid_602684 != nil:
    section.add "X-Amz-Algorithm", valid_602684
  var valid_602685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602685 = validateParameter(valid_602685, JString, required = false,
                                 default = nil)
  if valid_602685 != nil:
    section.add "X-Amz-SignedHeaders", valid_602685
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_602686 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602686 = validateParameter(valid_602686, JString, required = true,
                                 default = nil)
  if valid_602686 != nil:
    section.add "CacheSubnetGroupName", valid_602686
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602687: Call_PostDeleteCacheSubnetGroup_602674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_602687.validator(path, query, header, formData, body)
  let scheme = call_602687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602687.url(scheme.get, call_602687.host, call_602687.base,
                         call_602687.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602687, url, valid)

proc call*(call_602688: Call_PostDeleteCacheSubnetGroup_602674;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602689 = newJObject()
  var formData_602690 = newJObject()
  add(formData_602690, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602689, "Action", newJString(Action))
  add(query_602689, "Version", newJString(Version))
  result = call_602688.call(nil, query_602689, nil, formData_602690, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_602674(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_602675, base: "/",
    url: url_PostDeleteCacheSubnetGroup_602676,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_602658 = ref object of OpenApiRestCall_601389
proc url_GetDeleteCacheSubnetGroup_602660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_602659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602661 = query.getOrDefault("Action")
  valid_602661 = validateParameter(valid_602661, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_602661 != nil:
    section.add "Action", valid_602661
  var valid_602662 = query.getOrDefault("CacheSubnetGroupName")
  valid_602662 = validateParameter(valid_602662, JString, required = true,
                                 default = nil)
  if valid_602662 != nil:
    section.add "CacheSubnetGroupName", valid_602662
  var valid_602663 = query.getOrDefault("Version")
  valid_602663 = validateParameter(valid_602663, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602663 != nil:
    section.add "Version", valid_602663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602664 = header.getOrDefault("X-Amz-Signature")
  valid_602664 = validateParameter(valid_602664, JString, required = false,
                                 default = nil)
  if valid_602664 != nil:
    section.add "X-Amz-Signature", valid_602664
  var valid_602665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602665 = validateParameter(valid_602665, JString, required = false,
                                 default = nil)
  if valid_602665 != nil:
    section.add "X-Amz-Content-Sha256", valid_602665
  var valid_602666 = header.getOrDefault("X-Amz-Date")
  valid_602666 = validateParameter(valid_602666, JString, required = false,
                                 default = nil)
  if valid_602666 != nil:
    section.add "X-Amz-Date", valid_602666
  var valid_602667 = header.getOrDefault("X-Amz-Credential")
  valid_602667 = validateParameter(valid_602667, JString, required = false,
                                 default = nil)
  if valid_602667 != nil:
    section.add "X-Amz-Credential", valid_602667
  var valid_602668 = header.getOrDefault("X-Amz-Security-Token")
  valid_602668 = validateParameter(valid_602668, JString, required = false,
                                 default = nil)
  if valid_602668 != nil:
    section.add "X-Amz-Security-Token", valid_602668
  var valid_602669 = header.getOrDefault("X-Amz-Algorithm")
  valid_602669 = validateParameter(valid_602669, JString, required = false,
                                 default = nil)
  if valid_602669 != nil:
    section.add "X-Amz-Algorithm", valid_602669
  var valid_602670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602670 = validateParameter(valid_602670, JString, required = false,
                                 default = nil)
  if valid_602670 != nil:
    section.add "X-Amz-SignedHeaders", valid_602670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602671: Call_GetDeleteCacheSubnetGroup_602658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_602671.validator(path, query, header, formData, body)
  let scheme = call_602671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602671.url(scheme.get, call_602671.host, call_602671.base,
                         call_602671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602671, url, valid)

proc call*(call_602672: Call_GetDeleteCacheSubnetGroup_602658;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_602673 = newJObject()
  add(query_602673, "Action", newJString(Action))
  add(query_602673, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602673, "Version", newJString(Version))
  result = call_602672.call(nil, query_602673, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_602658(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_602659, base: "/",
    url: url_GetDeleteCacheSubnetGroup_602660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_602709 = ref object of OpenApiRestCall_601389
proc url_PostDeleteReplicationGroup_602711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReplicationGroup_602710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602712 = query.getOrDefault("Action")
  valid_602712 = validateParameter(valid_602712, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_602712 != nil:
    section.add "Action", valid_602712
  var valid_602713 = query.getOrDefault("Version")
  valid_602713 = validateParameter(valid_602713, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602713 != nil:
    section.add "Version", valid_602713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602714 = header.getOrDefault("X-Amz-Signature")
  valid_602714 = validateParameter(valid_602714, JString, required = false,
                                 default = nil)
  if valid_602714 != nil:
    section.add "X-Amz-Signature", valid_602714
  var valid_602715 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602715 = validateParameter(valid_602715, JString, required = false,
                                 default = nil)
  if valid_602715 != nil:
    section.add "X-Amz-Content-Sha256", valid_602715
  var valid_602716 = header.getOrDefault("X-Amz-Date")
  valid_602716 = validateParameter(valid_602716, JString, required = false,
                                 default = nil)
  if valid_602716 != nil:
    section.add "X-Amz-Date", valid_602716
  var valid_602717 = header.getOrDefault("X-Amz-Credential")
  valid_602717 = validateParameter(valid_602717, JString, required = false,
                                 default = nil)
  if valid_602717 != nil:
    section.add "X-Amz-Credential", valid_602717
  var valid_602718 = header.getOrDefault("X-Amz-Security-Token")
  valid_602718 = validateParameter(valid_602718, JString, required = false,
                                 default = nil)
  if valid_602718 != nil:
    section.add "X-Amz-Security-Token", valid_602718
  var valid_602719 = header.getOrDefault("X-Amz-Algorithm")
  valid_602719 = validateParameter(valid_602719, JString, required = false,
                                 default = nil)
  if valid_602719 != nil:
    section.add "X-Amz-Algorithm", valid_602719
  var valid_602720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602720 = validateParameter(valid_602720, JString, required = false,
                                 default = nil)
  if valid_602720 != nil:
    section.add "X-Amz-SignedHeaders", valid_602720
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_602721 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_602721 = validateParameter(valid_602721, JString, required = false,
                                 default = nil)
  if valid_602721 != nil:
    section.add "FinalSnapshotIdentifier", valid_602721
  var valid_602722 = formData.getOrDefault("RetainPrimaryCluster")
  valid_602722 = validateParameter(valid_602722, JBool, required = false, default = nil)
  if valid_602722 != nil:
    section.add "RetainPrimaryCluster", valid_602722
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_602723 = formData.getOrDefault("ReplicationGroupId")
  valid_602723 = validateParameter(valid_602723, JString, required = true,
                                 default = nil)
  if valid_602723 != nil:
    section.add "ReplicationGroupId", valid_602723
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602724: Call_PostDeleteReplicationGroup_602709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602724.validator(path, query, header, formData, body)
  let scheme = call_602724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602724.url(scheme.get, call_602724.host, call_602724.base,
                         call_602724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602724, url, valid)

proc call*(call_602725: Call_PostDeleteReplicationGroup_602709;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_602726 = newJObject()
  var formData_602727 = newJObject()
  add(formData_602727, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_602726, "Action", newJString(Action))
  add(formData_602727, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_602726, "Version", newJString(Version))
  add(formData_602727, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_602725.call(nil, query_602726, nil, formData_602727, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_602709(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_602710, base: "/",
    url: url_PostDeleteReplicationGroup_602711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_602691 = ref object of OpenApiRestCall_601389
proc url_GetDeleteReplicationGroup_602693(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReplicationGroup_602692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_602694 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_602694 = validateParameter(valid_602694, JString, required = false,
                                 default = nil)
  if valid_602694 != nil:
    section.add "FinalSnapshotIdentifier", valid_602694
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602695 = query.getOrDefault("Action")
  valid_602695 = validateParameter(valid_602695, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_602695 != nil:
    section.add "Action", valid_602695
  var valid_602696 = query.getOrDefault("ReplicationGroupId")
  valid_602696 = validateParameter(valid_602696, JString, required = true,
                                 default = nil)
  if valid_602696 != nil:
    section.add "ReplicationGroupId", valid_602696
  var valid_602697 = query.getOrDefault("Version")
  valid_602697 = validateParameter(valid_602697, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602697 != nil:
    section.add "Version", valid_602697
  var valid_602698 = query.getOrDefault("RetainPrimaryCluster")
  valid_602698 = validateParameter(valid_602698, JBool, required = false, default = nil)
  if valid_602698 != nil:
    section.add "RetainPrimaryCluster", valid_602698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602699 = header.getOrDefault("X-Amz-Signature")
  valid_602699 = validateParameter(valid_602699, JString, required = false,
                                 default = nil)
  if valid_602699 != nil:
    section.add "X-Amz-Signature", valid_602699
  var valid_602700 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602700 = validateParameter(valid_602700, JString, required = false,
                                 default = nil)
  if valid_602700 != nil:
    section.add "X-Amz-Content-Sha256", valid_602700
  var valid_602701 = header.getOrDefault("X-Amz-Date")
  valid_602701 = validateParameter(valid_602701, JString, required = false,
                                 default = nil)
  if valid_602701 != nil:
    section.add "X-Amz-Date", valid_602701
  var valid_602702 = header.getOrDefault("X-Amz-Credential")
  valid_602702 = validateParameter(valid_602702, JString, required = false,
                                 default = nil)
  if valid_602702 != nil:
    section.add "X-Amz-Credential", valid_602702
  var valid_602703 = header.getOrDefault("X-Amz-Security-Token")
  valid_602703 = validateParameter(valid_602703, JString, required = false,
                                 default = nil)
  if valid_602703 != nil:
    section.add "X-Amz-Security-Token", valid_602703
  var valid_602704 = header.getOrDefault("X-Amz-Algorithm")
  valid_602704 = validateParameter(valid_602704, JString, required = false,
                                 default = nil)
  if valid_602704 != nil:
    section.add "X-Amz-Algorithm", valid_602704
  var valid_602705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602705 = validateParameter(valid_602705, JString, required = false,
                                 default = nil)
  if valid_602705 != nil:
    section.add "X-Amz-SignedHeaders", valid_602705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602706: Call_GetDeleteReplicationGroup_602691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602706.validator(path, query, header, formData, body)
  let scheme = call_602706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602706.url(scheme.get, call_602706.host, call_602706.base,
                         call_602706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602706, url, valid)

proc call*(call_602707: Call_GetDeleteReplicationGroup_602691;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_602708 = newJObject()
  add(query_602708, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_602708, "Action", newJString(Action))
  add(query_602708, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_602708, "Version", newJString(Version))
  add(query_602708, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_602707.call(nil, query_602708, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_602691(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_602692, base: "/",
    url: url_GetDeleteReplicationGroup_602693,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_602744 = ref object of OpenApiRestCall_601389
proc url_PostDeleteSnapshot_602746(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSnapshot_602745(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602747 = query.getOrDefault("Action")
  valid_602747 = validateParameter(valid_602747, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_602747 != nil:
    section.add "Action", valid_602747
  var valid_602748 = query.getOrDefault("Version")
  valid_602748 = validateParameter(valid_602748, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602748 != nil:
    section.add "Version", valid_602748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602749 = header.getOrDefault("X-Amz-Signature")
  valid_602749 = validateParameter(valid_602749, JString, required = false,
                                 default = nil)
  if valid_602749 != nil:
    section.add "X-Amz-Signature", valid_602749
  var valid_602750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602750 = validateParameter(valid_602750, JString, required = false,
                                 default = nil)
  if valid_602750 != nil:
    section.add "X-Amz-Content-Sha256", valid_602750
  var valid_602751 = header.getOrDefault("X-Amz-Date")
  valid_602751 = validateParameter(valid_602751, JString, required = false,
                                 default = nil)
  if valid_602751 != nil:
    section.add "X-Amz-Date", valid_602751
  var valid_602752 = header.getOrDefault("X-Amz-Credential")
  valid_602752 = validateParameter(valid_602752, JString, required = false,
                                 default = nil)
  if valid_602752 != nil:
    section.add "X-Amz-Credential", valid_602752
  var valid_602753 = header.getOrDefault("X-Amz-Security-Token")
  valid_602753 = validateParameter(valid_602753, JString, required = false,
                                 default = nil)
  if valid_602753 != nil:
    section.add "X-Amz-Security-Token", valid_602753
  var valid_602754 = header.getOrDefault("X-Amz-Algorithm")
  valid_602754 = validateParameter(valid_602754, JString, required = false,
                                 default = nil)
  if valid_602754 != nil:
    section.add "X-Amz-Algorithm", valid_602754
  var valid_602755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602755 = validateParameter(valid_602755, JString, required = false,
                                 default = nil)
  if valid_602755 != nil:
    section.add "X-Amz-SignedHeaders", valid_602755
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_602756 = formData.getOrDefault("SnapshotName")
  valid_602756 = validateParameter(valid_602756, JString, required = true,
                                 default = nil)
  if valid_602756 != nil:
    section.add "SnapshotName", valid_602756
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602757: Call_PostDeleteSnapshot_602744; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602757.validator(path, query, header, formData, body)
  let scheme = call_602757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602757.url(scheme.get, call_602757.host, call_602757.base,
                         call_602757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602757, url, valid)

proc call*(call_602758: Call_PostDeleteSnapshot_602744; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602759 = newJObject()
  var formData_602760 = newJObject()
  add(formData_602760, "SnapshotName", newJString(SnapshotName))
  add(query_602759, "Action", newJString(Action))
  add(query_602759, "Version", newJString(Version))
  result = call_602758.call(nil, query_602759, nil, formData_602760, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_602744(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_602745, base: "/",
    url: url_PostDeleteSnapshot_602746, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_602728 = ref object of OpenApiRestCall_601389
proc url_GetDeleteSnapshot_602730(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSnapshot_602729(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602731 = query.getOrDefault("Action")
  valid_602731 = validateParameter(valid_602731, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_602731 != nil:
    section.add "Action", valid_602731
  var valid_602732 = query.getOrDefault("Version")
  valid_602732 = validateParameter(valid_602732, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602732 != nil:
    section.add "Version", valid_602732
  var valid_602733 = query.getOrDefault("SnapshotName")
  valid_602733 = validateParameter(valid_602733, JString, required = true,
                                 default = nil)
  if valid_602733 != nil:
    section.add "SnapshotName", valid_602733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602734 = header.getOrDefault("X-Amz-Signature")
  valid_602734 = validateParameter(valid_602734, JString, required = false,
                                 default = nil)
  if valid_602734 != nil:
    section.add "X-Amz-Signature", valid_602734
  var valid_602735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602735 = validateParameter(valid_602735, JString, required = false,
                                 default = nil)
  if valid_602735 != nil:
    section.add "X-Amz-Content-Sha256", valid_602735
  var valid_602736 = header.getOrDefault("X-Amz-Date")
  valid_602736 = validateParameter(valid_602736, JString, required = false,
                                 default = nil)
  if valid_602736 != nil:
    section.add "X-Amz-Date", valid_602736
  var valid_602737 = header.getOrDefault("X-Amz-Credential")
  valid_602737 = validateParameter(valid_602737, JString, required = false,
                                 default = nil)
  if valid_602737 != nil:
    section.add "X-Amz-Credential", valid_602737
  var valid_602738 = header.getOrDefault("X-Amz-Security-Token")
  valid_602738 = validateParameter(valid_602738, JString, required = false,
                                 default = nil)
  if valid_602738 != nil:
    section.add "X-Amz-Security-Token", valid_602738
  var valid_602739 = header.getOrDefault("X-Amz-Algorithm")
  valid_602739 = validateParameter(valid_602739, JString, required = false,
                                 default = nil)
  if valid_602739 != nil:
    section.add "X-Amz-Algorithm", valid_602739
  var valid_602740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602740 = validateParameter(valid_602740, JString, required = false,
                                 default = nil)
  if valid_602740 != nil:
    section.add "X-Amz-SignedHeaders", valid_602740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602741: Call_GetDeleteSnapshot_602728; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_602741.validator(path, query, header, formData, body)
  let scheme = call_602741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602741.url(scheme.get, call_602741.host, call_602741.base,
                         call_602741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602741, url, valid)

proc call*(call_602742: Call_GetDeleteSnapshot_602728; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_602743 = newJObject()
  add(query_602743, "Action", newJString(Action))
  add(query_602743, "Version", newJString(Version))
  add(query_602743, "SnapshotName", newJString(SnapshotName))
  result = call_602742.call(nil, query_602743, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_602728(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_602729,
    base: "/", url: url_GetDeleteSnapshot_602730,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_602781 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheClusters_602783(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheClusters_602782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602784 = query.getOrDefault("Action")
  valid_602784 = validateParameter(valid_602784, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_602784 != nil:
    section.add "Action", valid_602784
  var valid_602785 = query.getOrDefault("Version")
  valid_602785 = validateParameter(valid_602785, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602785 != nil:
    section.add "Version", valid_602785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602786 = header.getOrDefault("X-Amz-Signature")
  valid_602786 = validateParameter(valid_602786, JString, required = false,
                                 default = nil)
  if valid_602786 != nil:
    section.add "X-Amz-Signature", valid_602786
  var valid_602787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602787 = validateParameter(valid_602787, JString, required = false,
                                 default = nil)
  if valid_602787 != nil:
    section.add "X-Amz-Content-Sha256", valid_602787
  var valid_602788 = header.getOrDefault("X-Amz-Date")
  valid_602788 = validateParameter(valid_602788, JString, required = false,
                                 default = nil)
  if valid_602788 != nil:
    section.add "X-Amz-Date", valid_602788
  var valid_602789 = header.getOrDefault("X-Amz-Credential")
  valid_602789 = validateParameter(valid_602789, JString, required = false,
                                 default = nil)
  if valid_602789 != nil:
    section.add "X-Amz-Credential", valid_602789
  var valid_602790 = header.getOrDefault("X-Amz-Security-Token")
  valid_602790 = validateParameter(valid_602790, JString, required = false,
                                 default = nil)
  if valid_602790 != nil:
    section.add "X-Amz-Security-Token", valid_602790
  var valid_602791 = header.getOrDefault("X-Amz-Algorithm")
  valid_602791 = validateParameter(valid_602791, JString, required = false,
                                 default = nil)
  if valid_602791 != nil:
    section.add "X-Amz-Algorithm", valid_602791
  var valid_602792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602792 = validateParameter(valid_602792, JString, required = false,
                                 default = nil)
  if valid_602792 != nil:
    section.add "X-Amz-SignedHeaders", valid_602792
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_602793 = formData.getOrDefault("CacheClusterId")
  valid_602793 = validateParameter(valid_602793, JString, required = false,
                                 default = nil)
  if valid_602793 != nil:
    section.add "CacheClusterId", valid_602793
  var valid_602794 = formData.getOrDefault("MaxRecords")
  valid_602794 = validateParameter(valid_602794, JInt, required = false, default = nil)
  if valid_602794 != nil:
    section.add "MaxRecords", valid_602794
  var valid_602795 = formData.getOrDefault("Marker")
  valid_602795 = validateParameter(valid_602795, JString, required = false,
                                 default = nil)
  if valid_602795 != nil:
    section.add "Marker", valid_602795
  var valid_602796 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_602796 = validateParameter(valid_602796, JBool, required = false, default = nil)
  if valid_602796 != nil:
    section.add "ShowCacheNodeInfo", valid_602796
  var valid_602797 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_602797 = validateParameter(valid_602797, JBool, required = false, default = nil)
  if valid_602797 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_602797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602798: Call_PostDescribeCacheClusters_602781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_602798.validator(path, query, header, formData, body)
  let scheme = call_602798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602798.url(scheme.get, call_602798.host, call_602798.base,
                         call_602798.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602798, url, valid)

proc call*(call_602799: Call_PostDescribeCacheClusters_602781;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_602800 = newJObject()
  var formData_602801 = newJObject()
  add(formData_602801, "CacheClusterId", newJString(CacheClusterId))
  add(formData_602801, "MaxRecords", newJInt(MaxRecords))
  add(formData_602801, "Marker", newJString(Marker))
  add(formData_602801, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_602800, "Action", newJString(Action))
  add(query_602800, "Version", newJString(Version))
  add(formData_602801, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_602799.call(nil, query_602800, nil, formData_602801, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_602781(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_602782, base: "/",
    url: url_PostDescribeCacheClusters_602783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_602761 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheClusters_602763(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheClusters_602762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602764 = query.getOrDefault("Marker")
  valid_602764 = validateParameter(valid_602764, JString, required = false,
                                 default = nil)
  if valid_602764 != nil:
    section.add "Marker", valid_602764
  var valid_602765 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_602765 = validateParameter(valid_602765, JBool, required = false, default = nil)
  if valid_602765 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_602765
  var valid_602766 = query.getOrDefault("CacheClusterId")
  valid_602766 = validateParameter(valid_602766, JString, required = false,
                                 default = nil)
  if valid_602766 != nil:
    section.add "CacheClusterId", valid_602766
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602767 = query.getOrDefault("Action")
  valid_602767 = validateParameter(valid_602767, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_602767 != nil:
    section.add "Action", valid_602767
  var valid_602768 = query.getOrDefault("ShowCacheNodeInfo")
  valid_602768 = validateParameter(valid_602768, JBool, required = false, default = nil)
  if valid_602768 != nil:
    section.add "ShowCacheNodeInfo", valid_602768
  var valid_602769 = query.getOrDefault("Version")
  valid_602769 = validateParameter(valid_602769, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602769 != nil:
    section.add "Version", valid_602769
  var valid_602770 = query.getOrDefault("MaxRecords")
  valid_602770 = validateParameter(valid_602770, JInt, required = false, default = nil)
  if valid_602770 != nil:
    section.add "MaxRecords", valid_602770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602771 = header.getOrDefault("X-Amz-Signature")
  valid_602771 = validateParameter(valid_602771, JString, required = false,
                                 default = nil)
  if valid_602771 != nil:
    section.add "X-Amz-Signature", valid_602771
  var valid_602772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602772 = validateParameter(valid_602772, JString, required = false,
                                 default = nil)
  if valid_602772 != nil:
    section.add "X-Amz-Content-Sha256", valid_602772
  var valid_602773 = header.getOrDefault("X-Amz-Date")
  valid_602773 = validateParameter(valid_602773, JString, required = false,
                                 default = nil)
  if valid_602773 != nil:
    section.add "X-Amz-Date", valid_602773
  var valid_602774 = header.getOrDefault("X-Amz-Credential")
  valid_602774 = validateParameter(valid_602774, JString, required = false,
                                 default = nil)
  if valid_602774 != nil:
    section.add "X-Amz-Credential", valid_602774
  var valid_602775 = header.getOrDefault("X-Amz-Security-Token")
  valid_602775 = validateParameter(valid_602775, JString, required = false,
                                 default = nil)
  if valid_602775 != nil:
    section.add "X-Amz-Security-Token", valid_602775
  var valid_602776 = header.getOrDefault("X-Amz-Algorithm")
  valid_602776 = validateParameter(valid_602776, JString, required = false,
                                 default = nil)
  if valid_602776 != nil:
    section.add "X-Amz-Algorithm", valid_602776
  var valid_602777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602777 = validateParameter(valid_602777, JString, required = false,
                                 default = nil)
  if valid_602777 != nil:
    section.add "X-Amz-SignedHeaders", valid_602777
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602778: Call_GetDescribeCacheClusters_602761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_602778.validator(path, query, header, formData, body)
  let scheme = call_602778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602778.url(scheme.get, call_602778.host, call_602778.base,
                         call_602778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602778, url, valid)

proc call*(call_602779: Call_GetDescribeCacheClusters_602761; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_602780 = newJObject()
  add(query_602780, "Marker", newJString(Marker))
  add(query_602780, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_602780, "CacheClusterId", newJString(CacheClusterId))
  add(query_602780, "Action", newJString(Action))
  add(query_602780, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_602780, "Version", newJString(Version))
  add(query_602780, "MaxRecords", newJInt(MaxRecords))
  result = call_602779.call(nil, query_602780, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_602761(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_602762, base: "/",
    url: url_GetDescribeCacheClusters_602763, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_602823 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheEngineVersions_602825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheEngineVersions_602824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602826 = query.getOrDefault("Action")
  valid_602826 = validateParameter(valid_602826, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_602826 != nil:
    section.add "Action", valid_602826
  var valid_602827 = query.getOrDefault("Version")
  valid_602827 = validateParameter(valid_602827, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602827 != nil:
    section.add "Version", valid_602827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602828 = header.getOrDefault("X-Amz-Signature")
  valid_602828 = validateParameter(valid_602828, JString, required = false,
                                 default = nil)
  if valid_602828 != nil:
    section.add "X-Amz-Signature", valid_602828
  var valid_602829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602829 = validateParameter(valid_602829, JString, required = false,
                                 default = nil)
  if valid_602829 != nil:
    section.add "X-Amz-Content-Sha256", valid_602829
  var valid_602830 = header.getOrDefault("X-Amz-Date")
  valid_602830 = validateParameter(valid_602830, JString, required = false,
                                 default = nil)
  if valid_602830 != nil:
    section.add "X-Amz-Date", valid_602830
  var valid_602831 = header.getOrDefault("X-Amz-Credential")
  valid_602831 = validateParameter(valid_602831, JString, required = false,
                                 default = nil)
  if valid_602831 != nil:
    section.add "X-Amz-Credential", valid_602831
  var valid_602832 = header.getOrDefault("X-Amz-Security-Token")
  valid_602832 = validateParameter(valid_602832, JString, required = false,
                                 default = nil)
  if valid_602832 != nil:
    section.add "X-Amz-Security-Token", valid_602832
  var valid_602833 = header.getOrDefault("X-Amz-Algorithm")
  valid_602833 = validateParameter(valid_602833, JString, required = false,
                                 default = nil)
  if valid_602833 != nil:
    section.add "X-Amz-Algorithm", valid_602833
  var valid_602834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602834 = validateParameter(valid_602834, JString, required = false,
                                 default = nil)
  if valid_602834 != nil:
    section.add "X-Amz-SignedHeaders", valid_602834
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_602835 = formData.getOrDefault("DefaultOnly")
  valid_602835 = validateParameter(valid_602835, JBool, required = false, default = nil)
  if valid_602835 != nil:
    section.add "DefaultOnly", valid_602835
  var valid_602836 = formData.getOrDefault("MaxRecords")
  valid_602836 = validateParameter(valid_602836, JInt, required = false, default = nil)
  if valid_602836 != nil:
    section.add "MaxRecords", valid_602836
  var valid_602837 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_602837 = validateParameter(valid_602837, JString, required = false,
                                 default = nil)
  if valid_602837 != nil:
    section.add "CacheParameterGroupFamily", valid_602837
  var valid_602838 = formData.getOrDefault("EngineVersion")
  valid_602838 = validateParameter(valid_602838, JString, required = false,
                                 default = nil)
  if valid_602838 != nil:
    section.add "EngineVersion", valid_602838
  var valid_602839 = formData.getOrDefault("Marker")
  valid_602839 = validateParameter(valid_602839, JString, required = false,
                                 default = nil)
  if valid_602839 != nil:
    section.add "Marker", valid_602839
  var valid_602840 = formData.getOrDefault("Engine")
  valid_602840 = validateParameter(valid_602840, JString, required = false,
                                 default = nil)
  if valid_602840 != nil:
    section.add "Engine", valid_602840
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602841: Call_PostDescribeCacheEngineVersions_602823;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_602841.validator(path, query, header, formData, body)
  let scheme = call_602841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602841.url(scheme.get, call_602841.host, call_602841.base,
                         call_602841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602841, url, valid)

proc call*(call_602842: Call_PostDescribeCacheEngineVersions_602823;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602843 = newJObject()
  var formData_602844 = newJObject()
  add(formData_602844, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_602844, "MaxRecords", newJInt(MaxRecords))
  add(formData_602844, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_602844, "EngineVersion", newJString(EngineVersion))
  add(formData_602844, "Marker", newJString(Marker))
  add(formData_602844, "Engine", newJString(Engine))
  add(query_602843, "Action", newJString(Action))
  add(query_602843, "Version", newJString(Version))
  result = call_602842.call(nil, query_602843, nil, formData_602844, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_602823(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_602824, base: "/",
    url: url_PostDescribeCacheEngineVersions_602825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_602802 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheEngineVersions_602804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheEngineVersions_602803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_602805 = query.getOrDefault("Marker")
  valid_602805 = validateParameter(valid_602805, JString, required = false,
                                 default = nil)
  if valid_602805 != nil:
    section.add "Marker", valid_602805
  var valid_602806 = query.getOrDefault("Engine")
  valid_602806 = validateParameter(valid_602806, JString, required = false,
                                 default = nil)
  if valid_602806 != nil:
    section.add "Engine", valid_602806
  var valid_602807 = query.getOrDefault("CacheParameterGroupFamily")
  valid_602807 = validateParameter(valid_602807, JString, required = false,
                                 default = nil)
  if valid_602807 != nil:
    section.add "CacheParameterGroupFamily", valid_602807
  var valid_602808 = query.getOrDefault("EngineVersion")
  valid_602808 = validateParameter(valid_602808, JString, required = false,
                                 default = nil)
  if valid_602808 != nil:
    section.add "EngineVersion", valid_602808
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602809 = query.getOrDefault("Action")
  valid_602809 = validateParameter(valid_602809, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_602809 != nil:
    section.add "Action", valid_602809
  var valid_602810 = query.getOrDefault("Version")
  valid_602810 = validateParameter(valid_602810, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602810 != nil:
    section.add "Version", valid_602810
  var valid_602811 = query.getOrDefault("MaxRecords")
  valid_602811 = validateParameter(valid_602811, JInt, required = false, default = nil)
  if valid_602811 != nil:
    section.add "MaxRecords", valid_602811
  var valid_602812 = query.getOrDefault("DefaultOnly")
  valid_602812 = validateParameter(valid_602812, JBool, required = false, default = nil)
  if valid_602812 != nil:
    section.add "DefaultOnly", valid_602812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602813 = header.getOrDefault("X-Amz-Signature")
  valid_602813 = validateParameter(valid_602813, JString, required = false,
                                 default = nil)
  if valid_602813 != nil:
    section.add "X-Amz-Signature", valid_602813
  var valid_602814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602814 = validateParameter(valid_602814, JString, required = false,
                                 default = nil)
  if valid_602814 != nil:
    section.add "X-Amz-Content-Sha256", valid_602814
  var valid_602815 = header.getOrDefault("X-Amz-Date")
  valid_602815 = validateParameter(valid_602815, JString, required = false,
                                 default = nil)
  if valid_602815 != nil:
    section.add "X-Amz-Date", valid_602815
  var valid_602816 = header.getOrDefault("X-Amz-Credential")
  valid_602816 = validateParameter(valid_602816, JString, required = false,
                                 default = nil)
  if valid_602816 != nil:
    section.add "X-Amz-Credential", valid_602816
  var valid_602817 = header.getOrDefault("X-Amz-Security-Token")
  valid_602817 = validateParameter(valid_602817, JString, required = false,
                                 default = nil)
  if valid_602817 != nil:
    section.add "X-Amz-Security-Token", valid_602817
  var valid_602818 = header.getOrDefault("X-Amz-Algorithm")
  valid_602818 = validateParameter(valid_602818, JString, required = false,
                                 default = nil)
  if valid_602818 != nil:
    section.add "X-Amz-Algorithm", valid_602818
  var valid_602819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602819 = validateParameter(valid_602819, JString, required = false,
                                 default = nil)
  if valid_602819 != nil:
    section.add "X-Amz-SignedHeaders", valid_602819
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602820: Call_GetDescribeCacheEngineVersions_602802; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_602820.validator(path, query, header, formData, body)
  let scheme = call_602820.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602820.url(scheme.get, call_602820.host, call_602820.base,
                         call_602820.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602820, url, valid)

proc call*(call_602821: Call_GetDescribeCacheEngineVersions_602802;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_602822 = newJObject()
  add(query_602822, "Marker", newJString(Marker))
  add(query_602822, "Engine", newJString(Engine))
  add(query_602822, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_602822, "EngineVersion", newJString(EngineVersion))
  add(query_602822, "Action", newJString(Action))
  add(query_602822, "Version", newJString(Version))
  add(query_602822, "MaxRecords", newJInt(MaxRecords))
  add(query_602822, "DefaultOnly", newJBool(DefaultOnly))
  result = call_602821.call(nil, query_602822, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_602802(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_602803, base: "/",
    url: url_GetDescribeCacheEngineVersions_602804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_602863 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheParameterGroups_602865(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameterGroups_602864(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602866 = query.getOrDefault("Action")
  valid_602866 = validateParameter(valid_602866, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_602866 != nil:
    section.add "Action", valid_602866
  var valid_602867 = query.getOrDefault("Version")
  valid_602867 = validateParameter(valid_602867, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602867 != nil:
    section.add "Version", valid_602867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602868 = header.getOrDefault("X-Amz-Signature")
  valid_602868 = validateParameter(valid_602868, JString, required = false,
                                 default = nil)
  if valid_602868 != nil:
    section.add "X-Amz-Signature", valid_602868
  var valid_602869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602869 = validateParameter(valid_602869, JString, required = false,
                                 default = nil)
  if valid_602869 != nil:
    section.add "X-Amz-Content-Sha256", valid_602869
  var valid_602870 = header.getOrDefault("X-Amz-Date")
  valid_602870 = validateParameter(valid_602870, JString, required = false,
                                 default = nil)
  if valid_602870 != nil:
    section.add "X-Amz-Date", valid_602870
  var valid_602871 = header.getOrDefault("X-Amz-Credential")
  valid_602871 = validateParameter(valid_602871, JString, required = false,
                                 default = nil)
  if valid_602871 != nil:
    section.add "X-Amz-Credential", valid_602871
  var valid_602872 = header.getOrDefault("X-Amz-Security-Token")
  valid_602872 = validateParameter(valid_602872, JString, required = false,
                                 default = nil)
  if valid_602872 != nil:
    section.add "X-Amz-Security-Token", valid_602872
  var valid_602873 = header.getOrDefault("X-Amz-Algorithm")
  valid_602873 = validateParameter(valid_602873, JString, required = false,
                                 default = nil)
  if valid_602873 != nil:
    section.add "X-Amz-Algorithm", valid_602873
  var valid_602874 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602874 = validateParameter(valid_602874, JString, required = false,
                                 default = nil)
  if valid_602874 != nil:
    section.add "X-Amz-SignedHeaders", valid_602874
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_602875 = formData.getOrDefault("MaxRecords")
  valid_602875 = validateParameter(valid_602875, JInt, required = false, default = nil)
  if valid_602875 != nil:
    section.add "MaxRecords", valid_602875
  var valid_602876 = formData.getOrDefault("Marker")
  valid_602876 = validateParameter(valid_602876, JString, required = false,
                                 default = nil)
  if valid_602876 != nil:
    section.add "Marker", valid_602876
  var valid_602877 = formData.getOrDefault("CacheParameterGroupName")
  valid_602877 = validateParameter(valid_602877, JString, required = false,
                                 default = nil)
  if valid_602877 != nil:
    section.add "CacheParameterGroupName", valid_602877
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602878: Call_PostDescribeCacheParameterGroups_602863;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_602878.validator(path, query, header, formData, body)
  let scheme = call_602878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602878.url(scheme.get, call_602878.host, call_602878.base,
                         call_602878.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602878, url, valid)

proc call*(call_602879: Call_PostDescribeCacheParameterGroups_602863;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602880 = newJObject()
  var formData_602881 = newJObject()
  add(formData_602881, "MaxRecords", newJInt(MaxRecords))
  add(formData_602881, "Marker", newJString(Marker))
  add(formData_602881, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_602880, "Action", newJString(Action))
  add(query_602880, "Version", newJString(Version))
  result = call_602879.call(nil, query_602880, nil, formData_602881, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_602863(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_602864, base: "/",
    url: url_PostDescribeCacheParameterGroups_602865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_602845 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheParameterGroups_602847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameterGroups_602846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602848 = query.getOrDefault("Marker")
  valid_602848 = validateParameter(valid_602848, JString, required = false,
                                 default = nil)
  if valid_602848 != nil:
    section.add "Marker", valid_602848
  var valid_602849 = query.getOrDefault("CacheParameterGroupName")
  valid_602849 = validateParameter(valid_602849, JString, required = false,
                                 default = nil)
  if valid_602849 != nil:
    section.add "CacheParameterGroupName", valid_602849
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602850 = query.getOrDefault("Action")
  valid_602850 = validateParameter(valid_602850, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_602850 != nil:
    section.add "Action", valid_602850
  var valid_602851 = query.getOrDefault("Version")
  valid_602851 = validateParameter(valid_602851, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602851 != nil:
    section.add "Version", valid_602851
  var valid_602852 = query.getOrDefault("MaxRecords")
  valid_602852 = validateParameter(valid_602852, JInt, required = false, default = nil)
  if valid_602852 != nil:
    section.add "MaxRecords", valid_602852
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602853 = header.getOrDefault("X-Amz-Signature")
  valid_602853 = validateParameter(valid_602853, JString, required = false,
                                 default = nil)
  if valid_602853 != nil:
    section.add "X-Amz-Signature", valid_602853
  var valid_602854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602854 = validateParameter(valid_602854, JString, required = false,
                                 default = nil)
  if valid_602854 != nil:
    section.add "X-Amz-Content-Sha256", valid_602854
  var valid_602855 = header.getOrDefault("X-Amz-Date")
  valid_602855 = validateParameter(valid_602855, JString, required = false,
                                 default = nil)
  if valid_602855 != nil:
    section.add "X-Amz-Date", valid_602855
  var valid_602856 = header.getOrDefault("X-Amz-Credential")
  valid_602856 = validateParameter(valid_602856, JString, required = false,
                                 default = nil)
  if valid_602856 != nil:
    section.add "X-Amz-Credential", valid_602856
  var valid_602857 = header.getOrDefault("X-Amz-Security-Token")
  valid_602857 = validateParameter(valid_602857, JString, required = false,
                                 default = nil)
  if valid_602857 != nil:
    section.add "X-Amz-Security-Token", valid_602857
  var valid_602858 = header.getOrDefault("X-Amz-Algorithm")
  valid_602858 = validateParameter(valid_602858, JString, required = false,
                                 default = nil)
  if valid_602858 != nil:
    section.add "X-Amz-Algorithm", valid_602858
  var valid_602859 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602859 = validateParameter(valid_602859, JString, required = false,
                                 default = nil)
  if valid_602859 != nil:
    section.add "X-Amz-SignedHeaders", valid_602859
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602860: Call_GetDescribeCacheParameterGroups_602845;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_602860.validator(path, query, header, formData, body)
  let scheme = call_602860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602860.url(scheme.get, call_602860.host, call_602860.base,
                         call_602860.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602860, url, valid)

proc call*(call_602861: Call_GetDescribeCacheParameterGroups_602845;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_602862 = newJObject()
  add(query_602862, "Marker", newJString(Marker))
  add(query_602862, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602862, "Action", newJString(Action))
  add(query_602862, "Version", newJString(Version))
  add(query_602862, "MaxRecords", newJInt(MaxRecords))
  result = call_602861.call(nil, query_602862, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_602845(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_602846, base: "/",
    url: url_GetDescribeCacheParameterGroups_602847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_602901 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheParameters_602903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameters_602902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602904 = query.getOrDefault("Action")
  valid_602904 = validateParameter(valid_602904, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_602904 != nil:
    section.add "Action", valid_602904
  var valid_602905 = query.getOrDefault("Version")
  valid_602905 = validateParameter(valid_602905, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602905 != nil:
    section.add "Version", valid_602905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602906 = header.getOrDefault("X-Amz-Signature")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-Signature", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Content-Sha256", valid_602907
  var valid_602908 = header.getOrDefault("X-Amz-Date")
  valid_602908 = validateParameter(valid_602908, JString, required = false,
                                 default = nil)
  if valid_602908 != nil:
    section.add "X-Amz-Date", valid_602908
  var valid_602909 = header.getOrDefault("X-Amz-Credential")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-Credential", valid_602909
  var valid_602910 = header.getOrDefault("X-Amz-Security-Token")
  valid_602910 = validateParameter(valid_602910, JString, required = false,
                                 default = nil)
  if valid_602910 != nil:
    section.add "X-Amz-Security-Token", valid_602910
  var valid_602911 = header.getOrDefault("X-Amz-Algorithm")
  valid_602911 = validateParameter(valid_602911, JString, required = false,
                                 default = nil)
  if valid_602911 != nil:
    section.add "X-Amz-Algorithm", valid_602911
  var valid_602912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602912 = validateParameter(valid_602912, JString, required = false,
                                 default = nil)
  if valid_602912 != nil:
    section.add "X-Amz-SignedHeaders", valid_602912
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_602913 = formData.getOrDefault("Source")
  valid_602913 = validateParameter(valid_602913, JString, required = false,
                                 default = nil)
  if valid_602913 != nil:
    section.add "Source", valid_602913
  var valid_602914 = formData.getOrDefault("MaxRecords")
  valid_602914 = validateParameter(valid_602914, JInt, required = false, default = nil)
  if valid_602914 != nil:
    section.add "MaxRecords", valid_602914
  var valid_602915 = formData.getOrDefault("Marker")
  valid_602915 = validateParameter(valid_602915, JString, required = false,
                                 default = nil)
  if valid_602915 != nil:
    section.add "Marker", valid_602915
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602916 = formData.getOrDefault("CacheParameterGroupName")
  valid_602916 = validateParameter(valid_602916, JString, required = true,
                                 default = nil)
  if valid_602916 != nil:
    section.add "CacheParameterGroupName", valid_602916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602917: Call_PostDescribeCacheParameters_602901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_602917.validator(path, query, header, formData, body)
  let scheme = call_602917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602917.url(scheme.get, call_602917.host, call_602917.base,
                         call_602917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602917, url, valid)

proc call*(call_602918: Call_PostDescribeCacheParameters_602901;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602919 = newJObject()
  var formData_602920 = newJObject()
  add(formData_602920, "Source", newJString(Source))
  add(formData_602920, "MaxRecords", newJInt(MaxRecords))
  add(formData_602920, "Marker", newJString(Marker))
  add(formData_602920, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_602919, "Action", newJString(Action))
  add(query_602919, "Version", newJString(Version))
  result = call_602918.call(nil, query_602919, nil, formData_602920, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_602901(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_602902, base: "/",
    url: url_PostDescribeCacheParameters_602903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_602882 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheParameters_602884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameters_602883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602885 = query.getOrDefault("Marker")
  valid_602885 = validateParameter(valid_602885, JString, required = false,
                                 default = nil)
  if valid_602885 != nil:
    section.add "Marker", valid_602885
  var valid_602886 = query.getOrDefault("Source")
  valid_602886 = validateParameter(valid_602886, JString, required = false,
                                 default = nil)
  if valid_602886 != nil:
    section.add "Source", valid_602886
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_602887 = query.getOrDefault("CacheParameterGroupName")
  valid_602887 = validateParameter(valid_602887, JString, required = true,
                                 default = nil)
  if valid_602887 != nil:
    section.add "CacheParameterGroupName", valid_602887
  var valid_602888 = query.getOrDefault("Action")
  valid_602888 = validateParameter(valid_602888, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_602888 != nil:
    section.add "Action", valid_602888
  var valid_602889 = query.getOrDefault("Version")
  valid_602889 = validateParameter(valid_602889, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602889 != nil:
    section.add "Version", valid_602889
  var valid_602890 = query.getOrDefault("MaxRecords")
  valid_602890 = validateParameter(valid_602890, JInt, required = false, default = nil)
  if valid_602890 != nil:
    section.add "MaxRecords", valid_602890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602891 = header.getOrDefault("X-Amz-Signature")
  valid_602891 = validateParameter(valid_602891, JString, required = false,
                                 default = nil)
  if valid_602891 != nil:
    section.add "X-Amz-Signature", valid_602891
  var valid_602892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602892 = validateParameter(valid_602892, JString, required = false,
                                 default = nil)
  if valid_602892 != nil:
    section.add "X-Amz-Content-Sha256", valid_602892
  var valid_602893 = header.getOrDefault("X-Amz-Date")
  valid_602893 = validateParameter(valid_602893, JString, required = false,
                                 default = nil)
  if valid_602893 != nil:
    section.add "X-Amz-Date", valid_602893
  var valid_602894 = header.getOrDefault("X-Amz-Credential")
  valid_602894 = validateParameter(valid_602894, JString, required = false,
                                 default = nil)
  if valid_602894 != nil:
    section.add "X-Amz-Credential", valid_602894
  var valid_602895 = header.getOrDefault("X-Amz-Security-Token")
  valid_602895 = validateParameter(valid_602895, JString, required = false,
                                 default = nil)
  if valid_602895 != nil:
    section.add "X-Amz-Security-Token", valid_602895
  var valid_602896 = header.getOrDefault("X-Amz-Algorithm")
  valid_602896 = validateParameter(valid_602896, JString, required = false,
                                 default = nil)
  if valid_602896 != nil:
    section.add "X-Amz-Algorithm", valid_602896
  var valid_602897 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602897 = validateParameter(valid_602897, JString, required = false,
                                 default = nil)
  if valid_602897 != nil:
    section.add "X-Amz-SignedHeaders", valid_602897
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602898: Call_GetDescribeCacheParameters_602882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_602898.validator(path, query, header, formData, body)
  let scheme = call_602898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602898.url(scheme.get, call_602898.host, call_602898.base,
                         call_602898.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602898, url, valid)

proc call*(call_602899: Call_GetDescribeCacheParameters_602882;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_602900 = newJObject()
  add(query_602900, "Marker", newJString(Marker))
  add(query_602900, "Source", newJString(Source))
  add(query_602900, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_602900, "Action", newJString(Action))
  add(query_602900, "Version", newJString(Version))
  add(query_602900, "MaxRecords", newJInt(MaxRecords))
  result = call_602899.call(nil, query_602900, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_602882(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_602883, base: "/",
    url: url_GetDescribeCacheParameters_602884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_602939 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheSecurityGroups_602941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_602940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602942 = query.getOrDefault("Action")
  valid_602942 = validateParameter(valid_602942, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_602942 != nil:
    section.add "Action", valid_602942
  var valid_602943 = query.getOrDefault("Version")
  valid_602943 = validateParameter(valid_602943, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602943 != nil:
    section.add "Version", valid_602943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602944 = header.getOrDefault("X-Amz-Signature")
  valid_602944 = validateParameter(valid_602944, JString, required = false,
                                 default = nil)
  if valid_602944 != nil:
    section.add "X-Amz-Signature", valid_602944
  var valid_602945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602945 = validateParameter(valid_602945, JString, required = false,
                                 default = nil)
  if valid_602945 != nil:
    section.add "X-Amz-Content-Sha256", valid_602945
  var valid_602946 = header.getOrDefault("X-Amz-Date")
  valid_602946 = validateParameter(valid_602946, JString, required = false,
                                 default = nil)
  if valid_602946 != nil:
    section.add "X-Amz-Date", valid_602946
  var valid_602947 = header.getOrDefault("X-Amz-Credential")
  valid_602947 = validateParameter(valid_602947, JString, required = false,
                                 default = nil)
  if valid_602947 != nil:
    section.add "X-Amz-Credential", valid_602947
  var valid_602948 = header.getOrDefault("X-Amz-Security-Token")
  valid_602948 = validateParameter(valid_602948, JString, required = false,
                                 default = nil)
  if valid_602948 != nil:
    section.add "X-Amz-Security-Token", valid_602948
  var valid_602949 = header.getOrDefault("X-Amz-Algorithm")
  valid_602949 = validateParameter(valid_602949, JString, required = false,
                                 default = nil)
  if valid_602949 != nil:
    section.add "X-Amz-Algorithm", valid_602949
  var valid_602950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602950 = validateParameter(valid_602950, JString, required = false,
                                 default = nil)
  if valid_602950 != nil:
    section.add "X-Amz-SignedHeaders", valid_602950
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_602951 = formData.getOrDefault("MaxRecords")
  valid_602951 = validateParameter(valid_602951, JInt, required = false, default = nil)
  if valid_602951 != nil:
    section.add "MaxRecords", valid_602951
  var valid_602952 = formData.getOrDefault("CacheSecurityGroupName")
  valid_602952 = validateParameter(valid_602952, JString, required = false,
                                 default = nil)
  if valid_602952 != nil:
    section.add "CacheSecurityGroupName", valid_602952
  var valid_602953 = formData.getOrDefault("Marker")
  valid_602953 = validateParameter(valid_602953, JString, required = false,
                                 default = nil)
  if valid_602953 != nil:
    section.add "Marker", valid_602953
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602954: Call_PostDescribeCacheSecurityGroups_602939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_602954.validator(path, query, header, formData, body)
  let scheme = call_602954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602954.url(scheme.get, call_602954.host, call_602954.base,
                         call_602954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602954, url, valid)

proc call*(call_602955: Call_PostDescribeCacheSecurityGroups_602939;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602956 = newJObject()
  var formData_602957 = newJObject()
  add(formData_602957, "MaxRecords", newJInt(MaxRecords))
  add(formData_602957, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_602957, "Marker", newJString(Marker))
  add(query_602956, "Action", newJString(Action))
  add(query_602956, "Version", newJString(Version))
  result = call_602955.call(nil, query_602956, nil, formData_602957, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_602939(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_602940, base: "/",
    url: url_PostDescribeCacheSecurityGroups_602941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_602921 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheSecurityGroups_602923(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_602922(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602924 = query.getOrDefault("Marker")
  valid_602924 = validateParameter(valid_602924, JString, required = false,
                                 default = nil)
  if valid_602924 != nil:
    section.add "Marker", valid_602924
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602925 = query.getOrDefault("Action")
  valid_602925 = validateParameter(valid_602925, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_602925 != nil:
    section.add "Action", valid_602925
  var valid_602926 = query.getOrDefault("CacheSecurityGroupName")
  valid_602926 = validateParameter(valid_602926, JString, required = false,
                                 default = nil)
  if valid_602926 != nil:
    section.add "CacheSecurityGroupName", valid_602926
  var valid_602927 = query.getOrDefault("Version")
  valid_602927 = validateParameter(valid_602927, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602927 != nil:
    section.add "Version", valid_602927
  var valid_602928 = query.getOrDefault("MaxRecords")
  valid_602928 = validateParameter(valid_602928, JInt, required = false, default = nil)
  if valid_602928 != nil:
    section.add "MaxRecords", valid_602928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602929 = header.getOrDefault("X-Amz-Signature")
  valid_602929 = validateParameter(valid_602929, JString, required = false,
                                 default = nil)
  if valid_602929 != nil:
    section.add "X-Amz-Signature", valid_602929
  var valid_602930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602930 = validateParameter(valid_602930, JString, required = false,
                                 default = nil)
  if valid_602930 != nil:
    section.add "X-Amz-Content-Sha256", valid_602930
  var valid_602931 = header.getOrDefault("X-Amz-Date")
  valid_602931 = validateParameter(valid_602931, JString, required = false,
                                 default = nil)
  if valid_602931 != nil:
    section.add "X-Amz-Date", valid_602931
  var valid_602932 = header.getOrDefault("X-Amz-Credential")
  valid_602932 = validateParameter(valid_602932, JString, required = false,
                                 default = nil)
  if valid_602932 != nil:
    section.add "X-Amz-Credential", valid_602932
  var valid_602933 = header.getOrDefault("X-Amz-Security-Token")
  valid_602933 = validateParameter(valid_602933, JString, required = false,
                                 default = nil)
  if valid_602933 != nil:
    section.add "X-Amz-Security-Token", valid_602933
  var valid_602934 = header.getOrDefault("X-Amz-Algorithm")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "X-Amz-Algorithm", valid_602934
  var valid_602935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "X-Amz-SignedHeaders", valid_602935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602936: Call_GetDescribeCacheSecurityGroups_602921; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_602936.validator(path, query, header, formData, body)
  let scheme = call_602936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602936.url(scheme.get, call_602936.host, call_602936.base,
                         call_602936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602936, url, valid)

proc call*(call_602937: Call_GetDescribeCacheSecurityGroups_602921;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_602938 = newJObject()
  add(query_602938, "Marker", newJString(Marker))
  add(query_602938, "Action", newJString(Action))
  add(query_602938, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_602938, "Version", newJString(Version))
  add(query_602938, "MaxRecords", newJInt(MaxRecords))
  result = call_602937.call(nil, query_602938, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_602921(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_602922, base: "/",
    url: url_GetDescribeCacheSecurityGroups_602923,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_602976 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCacheSubnetGroups_602978(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_602977(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602979 = query.getOrDefault("Action")
  valid_602979 = validateParameter(valid_602979, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_602979 != nil:
    section.add "Action", valid_602979
  var valid_602980 = query.getOrDefault("Version")
  valid_602980 = validateParameter(valid_602980, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602980 != nil:
    section.add "Version", valid_602980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602981 = header.getOrDefault("X-Amz-Signature")
  valid_602981 = validateParameter(valid_602981, JString, required = false,
                                 default = nil)
  if valid_602981 != nil:
    section.add "X-Amz-Signature", valid_602981
  var valid_602982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602982 = validateParameter(valid_602982, JString, required = false,
                                 default = nil)
  if valid_602982 != nil:
    section.add "X-Amz-Content-Sha256", valid_602982
  var valid_602983 = header.getOrDefault("X-Amz-Date")
  valid_602983 = validateParameter(valid_602983, JString, required = false,
                                 default = nil)
  if valid_602983 != nil:
    section.add "X-Amz-Date", valid_602983
  var valid_602984 = header.getOrDefault("X-Amz-Credential")
  valid_602984 = validateParameter(valid_602984, JString, required = false,
                                 default = nil)
  if valid_602984 != nil:
    section.add "X-Amz-Credential", valid_602984
  var valid_602985 = header.getOrDefault("X-Amz-Security-Token")
  valid_602985 = validateParameter(valid_602985, JString, required = false,
                                 default = nil)
  if valid_602985 != nil:
    section.add "X-Amz-Security-Token", valid_602985
  var valid_602986 = header.getOrDefault("X-Amz-Algorithm")
  valid_602986 = validateParameter(valid_602986, JString, required = false,
                                 default = nil)
  if valid_602986 != nil:
    section.add "X-Amz-Algorithm", valid_602986
  var valid_602987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602987 = validateParameter(valid_602987, JString, required = false,
                                 default = nil)
  if valid_602987 != nil:
    section.add "X-Amz-SignedHeaders", valid_602987
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_602988 = formData.getOrDefault("MaxRecords")
  valid_602988 = validateParameter(valid_602988, JInt, required = false, default = nil)
  if valid_602988 != nil:
    section.add "MaxRecords", valid_602988
  var valid_602989 = formData.getOrDefault("Marker")
  valid_602989 = validateParameter(valid_602989, JString, required = false,
                                 default = nil)
  if valid_602989 != nil:
    section.add "Marker", valid_602989
  var valid_602990 = formData.getOrDefault("CacheSubnetGroupName")
  valid_602990 = validateParameter(valid_602990, JString, required = false,
                                 default = nil)
  if valid_602990 != nil:
    section.add "CacheSubnetGroupName", valid_602990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602991: Call_PostDescribeCacheSubnetGroups_602976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_602991.validator(path, query, header, formData, body)
  let scheme = call_602991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602991.url(scheme.get, call_602991.host, call_602991.base,
                         call_602991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602991, url, valid)

proc call*(call_602992: Call_PostDescribeCacheSubnetGroups_602976;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602993 = newJObject()
  var formData_602994 = newJObject()
  add(formData_602994, "MaxRecords", newJInt(MaxRecords))
  add(formData_602994, "Marker", newJString(Marker))
  add(formData_602994, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602993, "Action", newJString(Action))
  add(query_602993, "Version", newJString(Version))
  result = call_602992.call(nil, query_602993, nil, formData_602994, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_602976(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_602977, base: "/",
    url: url_PostDescribeCacheSubnetGroups_602978,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_602958 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCacheSubnetGroups_602960(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_602959(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602961 = query.getOrDefault("Marker")
  valid_602961 = validateParameter(valid_602961, JString, required = false,
                                 default = nil)
  if valid_602961 != nil:
    section.add "Marker", valid_602961
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602962 = query.getOrDefault("Action")
  valid_602962 = validateParameter(valid_602962, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_602962 != nil:
    section.add "Action", valid_602962
  var valid_602963 = query.getOrDefault("CacheSubnetGroupName")
  valid_602963 = validateParameter(valid_602963, JString, required = false,
                                 default = nil)
  if valid_602963 != nil:
    section.add "CacheSubnetGroupName", valid_602963
  var valid_602964 = query.getOrDefault("Version")
  valid_602964 = validateParameter(valid_602964, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_602964 != nil:
    section.add "Version", valid_602964
  var valid_602965 = query.getOrDefault("MaxRecords")
  valid_602965 = validateParameter(valid_602965, JInt, required = false, default = nil)
  if valid_602965 != nil:
    section.add "MaxRecords", valid_602965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602966 = header.getOrDefault("X-Amz-Signature")
  valid_602966 = validateParameter(valid_602966, JString, required = false,
                                 default = nil)
  if valid_602966 != nil:
    section.add "X-Amz-Signature", valid_602966
  var valid_602967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602967 = validateParameter(valid_602967, JString, required = false,
                                 default = nil)
  if valid_602967 != nil:
    section.add "X-Amz-Content-Sha256", valid_602967
  var valid_602968 = header.getOrDefault("X-Amz-Date")
  valid_602968 = validateParameter(valid_602968, JString, required = false,
                                 default = nil)
  if valid_602968 != nil:
    section.add "X-Amz-Date", valid_602968
  var valid_602969 = header.getOrDefault("X-Amz-Credential")
  valid_602969 = validateParameter(valid_602969, JString, required = false,
                                 default = nil)
  if valid_602969 != nil:
    section.add "X-Amz-Credential", valid_602969
  var valid_602970 = header.getOrDefault("X-Amz-Security-Token")
  valid_602970 = validateParameter(valid_602970, JString, required = false,
                                 default = nil)
  if valid_602970 != nil:
    section.add "X-Amz-Security-Token", valid_602970
  var valid_602971 = header.getOrDefault("X-Amz-Algorithm")
  valid_602971 = validateParameter(valid_602971, JString, required = false,
                                 default = nil)
  if valid_602971 != nil:
    section.add "X-Amz-Algorithm", valid_602971
  var valid_602972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602972 = validateParameter(valid_602972, JString, required = false,
                                 default = nil)
  if valid_602972 != nil:
    section.add "X-Amz-SignedHeaders", valid_602972
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602973: Call_GetDescribeCacheSubnetGroups_602958; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_602973.validator(path, query, header, formData, body)
  let scheme = call_602973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602973.url(scheme.get, call_602973.host, call_602973.base,
                         call_602973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602973, url, valid)

proc call*(call_602974: Call_GetDescribeCacheSubnetGroups_602958;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_602975 = newJObject()
  add(query_602975, "Marker", newJString(Marker))
  add(query_602975, "Action", newJString(Action))
  add(query_602975, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_602975, "Version", newJString(Version))
  add(query_602975, "MaxRecords", newJInt(MaxRecords))
  result = call_602974.call(nil, query_602975, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_602958(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_602959, base: "/",
    url: url_GetDescribeCacheSubnetGroups_602960,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_603013 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEngineDefaultParameters_603015(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_603014(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603016 = query.getOrDefault("Action")
  valid_603016 = validateParameter(valid_603016, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_603016 != nil:
    section.add "Action", valid_603016
  var valid_603017 = query.getOrDefault("Version")
  valid_603017 = validateParameter(valid_603017, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603017 != nil:
    section.add "Version", valid_603017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603018 = header.getOrDefault("X-Amz-Signature")
  valid_603018 = validateParameter(valid_603018, JString, required = false,
                                 default = nil)
  if valid_603018 != nil:
    section.add "X-Amz-Signature", valid_603018
  var valid_603019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603019 = validateParameter(valid_603019, JString, required = false,
                                 default = nil)
  if valid_603019 != nil:
    section.add "X-Amz-Content-Sha256", valid_603019
  var valid_603020 = header.getOrDefault("X-Amz-Date")
  valid_603020 = validateParameter(valid_603020, JString, required = false,
                                 default = nil)
  if valid_603020 != nil:
    section.add "X-Amz-Date", valid_603020
  var valid_603021 = header.getOrDefault("X-Amz-Credential")
  valid_603021 = validateParameter(valid_603021, JString, required = false,
                                 default = nil)
  if valid_603021 != nil:
    section.add "X-Amz-Credential", valid_603021
  var valid_603022 = header.getOrDefault("X-Amz-Security-Token")
  valid_603022 = validateParameter(valid_603022, JString, required = false,
                                 default = nil)
  if valid_603022 != nil:
    section.add "X-Amz-Security-Token", valid_603022
  var valid_603023 = header.getOrDefault("X-Amz-Algorithm")
  valid_603023 = validateParameter(valid_603023, JString, required = false,
                                 default = nil)
  if valid_603023 != nil:
    section.add "X-Amz-Algorithm", valid_603023
  var valid_603024 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603024 = validateParameter(valid_603024, JString, required = false,
                                 default = nil)
  if valid_603024 != nil:
    section.add "X-Amz-SignedHeaders", valid_603024
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_603025 = formData.getOrDefault("MaxRecords")
  valid_603025 = validateParameter(valid_603025, JInt, required = false, default = nil)
  if valid_603025 != nil:
    section.add "MaxRecords", valid_603025
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_603026 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_603026 = validateParameter(valid_603026, JString, required = true,
                                 default = nil)
  if valid_603026 != nil:
    section.add "CacheParameterGroupFamily", valid_603026
  var valid_603027 = formData.getOrDefault("Marker")
  valid_603027 = validateParameter(valid_603027, JString, required = false,
                                 default = nil)
  if valid_603027 != nil:
    section.add "Marker", valid_603027
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603028: Call_PostDescribeEngineDefaultParameters_603013;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_603028.validator(path, query, header, formData, body)
  let scheme = call_603028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603028.url(scheme.get, call_603028.host, call_603028.base,
                         call_603028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603028, url, valid)

proc call*(call_603029: Call_PostDescribeEngineDefaultParameters_603013;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603030 = newJObject()
  var formData_603031 = newJObject()
  add(formData_603031, "MaxRecords", newJInt(MaxRecords))
  add(formData_603031, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_603031, "Marker", newJString(Marker))
  add(query_603030, "Action", newJString(Action))
  add(query_603030, "Version", newJString(Version))
  result = call_603029.call(nil, query_603030, nil, formData_603031, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_603013(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_603014, base: "/",
    url: url_PostDescribeEngineDefaultParameters_603015,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_602995 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEngineDefaultParameters_602997(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_602996(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_602998 = query.getOrDefault("Marker")
  valid_602998 = validateParameter(valid_602998, JString, required = false,
                                 default = nil)
  if valid_602998 != nil:
    section.add "Marker", valid_602998
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_602999 = query.getOrDefault("CacheParameterGroupFamily")
  valid_602999 = validateParameter(valid_602999, JString, required = true,
                                 default = nil)
  if valid_602999 != nil:
    section.add "CacheParameterGroupFamily", valid_602999
  var valid_603000 = query.getOrDefault("Action")
  valid_603000 = validateParameter(valid_603000, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_603000 != nil:
    section.add "Action", valid_603000
  var valid_603001 = query.getOrDefault("Version")
  valid_603001 = validateParameter(valid_603001, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603001 != nil:
    section.add "Version", valid_603001
  var valid_603002 = query.getOrDefault("MaxRecords")
  valid_603002 = validateParameter(valid_603002, JInt, required = false, default = nil)
  if valid_603002 != nil:
    section.add "MaxRecords", valid_603002
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603003 = header.getOrDefault("X-Amz-Signature")
  valid_603003 = validateParameter(valid_603003, JString, required = false,
                                 default = nil)
  if valid_603003 != nil:
    section.add "X-Amz-Signature", valid_603003
  var valid_603004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603004 = validateParameter(valid_603004, JString, required = false,
                                 default = nil)
  if valid_603004 != nil:
    section.add "X-Amz-Content-Sha256", valid_603004
  var valid_603005 = header.getOrDefault("X-Amz-Date")
  valid_603005 = validateParameter(valid_603005, JString, required = false,
                                 default = nil)
  if valid_603005 != nil:
    section.add "X-Amz-Date", valid_603005
  var valid_603006 = header.getOrDefault("X-Amz-Credential")
  valid_603006 = validateParameter(valid_603006, JString, required = false,
                                 default = nil)
  if valid_603006 != nil:
    section.add "X-Amz-Credential", valid_603006
  var valid_603007 = header.getOrDefault("X-Amz-Security-Token")
  valid_603007 = validateParameter(valid_603007, JString, required = false,
                                 default = nil)
  if valid_603007 != nil:
    section.add "X-Amz-Security-Token", valid_603007
  var valid_603008 = header.getOrDefault("X-Amz-Algorithm")
  valid_603008 = validateParameter(valid_603008, JString, required = false,
                                 default = nil)
  if valid_603008 != nil:
    section.add "X-Amz-Algorithm", valid_603008
  var valid_603009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603009 = validateParameter(valid_603009, JString, required = false,
                                 default = nil)
  if valid_603009 != nil:
    section.add "X-Amz-SignedHeaders", valid_603009
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603010: Call_GetDescribeEngineDefaultParameters_602995;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_603010.validator(path, query, header, formData, body)
  let scheme = call_603010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603010.url(scheme.get, call_603010.host, call_603010.base,
                         call_603010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603010, url, valid)

proc call*(call_603011: Call_GetDescribeEngineDefaultParameters_602995;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_603012 = newJObject()
  add(query_603012, "Marker", newJString(Marker))
  add(query_603012, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_603012, "Action", newJString(Action))
  add(query_603012, "Version", newJString(Version))
  add(query_603012, "MaxRecords", newJInt(MaxRecords))
  result = call_603011.call(nil, query_603012, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_602995(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_602996, base: "/",
    url: url_GetDescribeEngineDefaultParameters_602997,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_603054 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEvents_603056(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_603055(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603057 = query.getOrDefault("Action")
  valid_603057 = validateParameter(valid_603057, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_603057 != nil:
    section.add "Action", valid_603057
  var valid_603058 = query.getOrDefault("Version")
  valid_603058 = validateParameter(valid_603058, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603058 != nil:
    section.add "Version", valid_603058
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603059 = header.getOrDefault("X-Amz-Signature")
  valid_603059 = validateParameter(valid_603059, JString, required = false,
                                 default = nil)
  if valid_603059 != nil:
    section.add "X-Amz-Signature", valid_603059
  var valid_603060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603060 = validateParameter(valid_603060, JString, required = false,
                                 default = nil)
  if valid_603060 != nil:
    section.add "X-Amz-Content-Sha256", valid_603060
  var valid_603061 = header.getOrDefault("X-Amz-Date")
  valid_603061 = validateParameter(valid_603061, JString, required = false,
                                 default = nil)
  if valid_603061 != nil:
    section.add "X-Amz-Date", valid_603061
  var valid_603062 = header.getOrDefault("X-Amz-Credential")
  valid_603062 = validateParameter(valid_603062, JString, required = false,
                                 default = nil)
  if valid_603062 != nil:
    section.add "X-Amz-Credential", valid_603062
  var valid_603063 = header.getOrDefault("X-Amz-Security-Token")
  valid_603063 = validateParameter(valid_603063, JString, required = false,
                                 default = nil)
  if valid_603063 != nil:
    section.add "X-Amz-Security-Token", valid_603063
  var valid_603064 = header.getOrDefault("X-Amz-Algorithm")
  valid_603064 = validateParameter(valid_603064, JString, required = false,
                                 default = nil)
  if valid_603064 != nil:
    section.add "X-Amz-Algorithm", valid_603064
  var valid_603065 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603065 = validateParameter(valid_603065, JString, required = false,
                                 default = nil)
  if valid_603065 != nil:
    section.add "X-Amz-SignedHeaders", valid_603065
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_603066 = formData.getOrDefault("MaxRecords")
  valid_603066 = validateParameter(valid_603066, JInt, required = false, default = nil)
  if valid_603066 != nil:
    section.add "MaxRecords", valid_603066
  var valid_603067 = formData.getOrDefault("Marker")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "Marker", valid_603067
  var valid_603068 = formData.getOrDefault("SourceIdentifier")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "SourceIdentifier", valid_603068
  var valid_603069 = formData.getOrDefault("SourceType")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_603069 != nil:
    section.add "SourceType", valid_603069
  var valid_603070 = formData.getOrDefault("Duration")
  valid_603070 = validateParameter(valid_603070, JInt, required = false, default = nil)
  if valid_603070 != nil:
    section.add "Duration", valid_603070
  var valid_603071 = formData.getOrDefault("EndTime")
  valid_603071 = validateParameter(valid_603071, JString, required = false,
                                 default = nil)
  if valid_603071 != nil:
    section.add "EndTime", valid_603071
  var valid_603072 = formData.getOrDefault("StartTime")
  valid_603072 = validateParameter(valid_603072, JString, required = false,
                                 default = nil)
  if valid_603072 != nil:
    section.add "StartTime", valid_603072
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603073: Call_PostDescribeEvents_603054; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_603073.validator(path, query, header, formData, body)
  let scheme = call_603073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603073.url(scheme.get, call_603073.host, call_603073.base,
                         call_603073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603073, url, valid)

proc call*(call_603074: Call_PostDescribeEvents_603054; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603075 = newJObject()
  var formData_603076 = newJObject()
  add(formData_603076, "MaxRecords", newJInt(MaxRecords))
  add(formData_603076, "Marker", newJString(Marker))
  add(formData_603076, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_603076, "SourceType", newJString(SourceType))
  add(formData_603076, "Duration", newJInt(Duration))
  add(formData_603076, "EndTime", newJString(EndTime))
  add(formData_603076, "StartTime", newJString(StartTime))
  add(query_603075, "Action", newJString(Action))
  add(query_603075, "Version", newJString(Version))
  result = call_603074.call(nil, query_603075, nil, formData_603076, nil)

var postDescribeEvents* = Call_PostDescribeEvents_603054(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_603055, base: "/",
    url: url_PostDescribeEvents_603056, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_603032 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEvents_603034(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_603033(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_603035 = query.getOrDefault("Marker")
  valid_603035 = validateParameter(valid_603035, JString, required = false,
                                 default = nil)
  if valid_603035 != nil:
    section.add "Marker", valid_603035
  var valid_603036 = query.getOrDefault("SourceType")
  valid_603036 = validateParameter(valid_603036, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_603036 != nil:
    section.add "SourceType", valid_603036
  var valid_603037 = query.getOrDefault("SourceIdentifier")
  valid_603037 = validateParameter(valid_603037, JString, required = false,
                                 default = nil)
  if valid_603037 != nil:
    section.add "SourceIdentifier", valid_603037
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603038 = query.getOrDefault("Action")
  valid_603038 = validateParameter(valid_603038, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_603038 != nil:
    section.add "Action", valid_603038
  var valid_603039 = query.getOrDefault("StartTime")
  valid_603039 = validateParameter(valid_603039, JString, required = false,
                                 default = nil)
  if valid_603039 != nil:
    section.add "StartTime", valid_603039
  var valid_603040 = query.getOrDefault("Duration")
  valid_603040 = validateParameter(valid_603040, JInt, required = false, default = nil)
  if valid_603040 != nil:
    section.add "Duration", valid_603040
  var valid_603041 = query.getOrDefault("EndTime")
  valid_603041 = validateParameter(valid_603041, JString, required = false,
                                 default = nil)
  if valid_603041 != nil:
    section.add "EndTime", valid_603041
  var valid_603042 = query.getOrDefault("Version")
  valid_603042 = validateParameter(valid_603042, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603042 != nil:
    section.add "Version", valid_603042
  var valid_603043 = query.getOrDefault("MaxRecords")
  valid_603043 = validateParameter(valid_603043, JInt, required = false, default = nil)
  if valid_603043 != nil:
    section.add "MaxRecords", valid_603043
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603044 = header.getOrDefault("X-Amz-Signature")
  valid_603044 = validateParameter(valid_603044, JString, required = false,
                                 default = nil)
  if valid_603044 != nil:
    section.add "X-Amz-Signature", valid_603044
  var valid_603045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603045 = validateParameter(valid_603045, JString, required = false,
                                 default = nil)
  if valid_603045 != nil:
    section.add "X-Amz-Content-Sha256", valid_603045
  var valid_603046 = header.getOrDefault("X-Amz-Date")
  valid_603046 = validateParameter(valid_603046, JString, required = false,
                                 default = nil)
  if valid_603046 != nil:
    section.add "X-Amz-Date", valid_603046
  var valid_603047 = header.getOrDefault("X-Amz-Credential")
  valid_603047 = validateParameter(valid_603047, JString, required = false,
                                 default = nil)
  if valid_603047 != nil:
    section.add "X-Amz-Credential", valid_603047
  var valid_603048 = header.getOrDefault("X-Amz-Security-Token")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "X-Amz-Security-Token", valid_603048
  var valid_603049 = header.getOrDefault("X-Amz-Algorithm")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-Algorithm", valid_603049
  var valid_603050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603050 = validateParameter(valid_603050, JString, required = false,
                                 default = nil)
  if valid_603050 != nil:
    section.add "X-Amz-SignedHeaders", valid_603050
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603051: Call_GetDescribeEvents_603032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_603051.validator(path, query, header, formData, body)
  let scheme = call_603051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603051.url(scheme.get, call_603051.host, call_603051.base,
                         call_603051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603051, url, valid)

proc call*(call_603052: Call_GetDescribeEvents_603032; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_603053 = newJObject()
  add(query_603053, "Marker", newJString(Marker))
  add(query_603053, "SourceType", newJString(SourceType))
  add(query_603053, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_603053, "Action", newJString(Action))
  add(query_603053, "StartTime", newJString(StartTime))
  add(query_603053, "Duration", newJInt(Duration))
  add(query_603053, "EndTime", newJString(EndTime))
  add(query_603053, "Version", newJString(Version))
  add(query_603053, "MaxRecords", newJInt(MaxRecords))
  result = call_603052.call(nil, query_603053, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_603032(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_603033,
    base: "/", url: url_GetDescribeEvents_603034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_603095 = ref object of OpenApiRestCall_601389
proc url_PostDescribeReplicationGroups_603097(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReplicationGroups_603096(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603098 = query.getOrDefault("Action")
  valid_603098 = validateParameter(valid_603098, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_603098 != nil:
    section.add "Action", valid_603098
  var valid_603099 = query.getOrDefault("Version")
  valid_603099 = validateParameter(valid_603099, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603099 != nil:
    section.add "Version", valid_603099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603100 = header.getOrDefault("X-Amz-Signature")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "X-Amz-Signature", valid_603100
  var valid_603101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Content-Sha256", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Date")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Date", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Credential")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Credential", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-Security-Token")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-Security-Token", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Algorithm")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Algorithm", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-SignedHeaders", valid_603106
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_603107 = formData.getOrDefault("MaxRecords")
  valid_603107 = validateParameter(valid_603107, JInt, required = false, default = nil)
  if valid_603107 != nil:
    section.add "MaxRecords", valid_603107
  var valid_603108 = formData.getOrDefault("Marker")
  valid_603108 = validateParameter(valid_603108, JString, required = false,
                                 default = nil)
  if valid_603108 != nil:
    section.add "Marker", valid_603108
  var valid_603109 = formData.getOrDefault("ReplicationGroupId")
  valid_603109 = validateParameter(valid_603109, JString, required = false,
                                 default = nil)
  if valid_603109 != nil:
    section.add "ReplicationGroupId", valid_603109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603110: Call_PostDescribeReplicationGroups_603095; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603110.validator(path, query, header, formData, body)
  let scheme = call_603110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603110.url(scheme.get, call_603110.host, call_603110.base,
                         call_603110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603110, url, valid)

proc call*(call_603111: Call_PostDescribeReplicationGroups_603095;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_603112 = newJObject()
  var formData_603113 = newJObject()
  add(formData_603113, "MaxRecords", newJInt(MaxRecords))
  add(formData_603113, "Marker", newJString(Marker))
  add(query_603112, "Action", newJString(Action))
  add(query_603112, "Version", newJString(Version))
  add(formData_603113, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603111.call(nil, query_603112, nil, formData_603113, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_603095(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_603096, base: "/",
    url: url_PostDescribeReplicationGroups_603097,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_603077 = ref object of OpenApiRestCall_601389
proc url_GetDescribeReplicationGroups_603079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReplicationGroups_603078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_603080 = query.getOrDefault("Marker")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "Marker", valid_603080
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603081 = query.getOrDefault("Action")
  valid_603081 = validateParameter(valid_603081, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_603081 != nil:
    section.add "Action", valid_603081
  var valid_603082 = query.getOrDefault("ReplicationGroupId")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "ReplicationGroupId", valid_603082
  var valid_603083 = query.getOrDefault("Version")
  valid_603083 = validateParameter(valid_603083, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603083 != nil:
    section.add "Version", valid_603083
  var valid_603084 = query.getOrDefault("MaxRecords")
  valid_603084 = validateParameter(valid_603084, JInt, required = false, default = nil)
  if valid_603084 != nil:
    section.add "MaxRecords", valid_603084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603085 = header.getOrDefault("X-Amz-Signature")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-Signature", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Content-Sha256", valid_603086
  var valid_603087 = header.getOrDefault("X-Amz-Date")
  valid_603087 = validateParameter(valid_603087, JString, required = false,
                                 default = nil)
  if valid_603087 != nil:
    section.add "X-Amz-Date", valid_603087
  var valid_603088 = header.getOrDefault("X-Amz-Credential")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "X-Amz-Credential", valid_603088
  var valid_603089 = header.getOrDefault("X-Amz-Security-Token")
  valid_603089 = validateParameter(valid_603089, JString, required = false,
                                 default = nil)
  if valid_603089 != nil:
    section.add "X-Amz-Security-Token", valid_603089
  var valid_603090 = header.getOrDefault("X-Amz-Algorithm")
  valid_603090 = validateParameter(valid_603090, JString, required = false,
                                 default = nil)
  if valid_603090 != nil:
    section.add "X-Amz-Algorithm", valid_603090
  var valid_603091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603091 = validateParameter(valid_603091, JString, required = false,
                                 default = nil)
  if valid_603091 != nil:
    section.add "X-Amz-SignedHeaders", valid_603091
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603092: Call_GetDescribeReplicationGroups_603077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603092.validator(path, query, header, formData, body)
  let scheme = call_603092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603092.url(scheme.get, call_603092.host, call_603092.base,
                         call_603092.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603092, url, valid)

proc call*(call_603093: Call_GetDescribeReplicationGroups_603077;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_603094 = newJObject()
  add(query_603094, "Marker", newJString(Marker))
  add(query_603094, "Action", newJString(Action))
  add(query_603094, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603094, "Version", newJString(Version))
  add(query_603094, "MaxRecords", newJInt(MaxRecords))
  result = call_603093.call(nil, query_603094, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_603077(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_603078, base: "/",
    url: url_GetDescribeReplicationGroups_603079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_603137 = ref object of OpenApiRestCall_601389
proc url_PostDescribeReservedCacheNodes_603139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodes_603138(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603140 = query.getOrDefault("Action")
  valid_603140 = validateParameter(valid_603140, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_603140 != nil:
    section.add "Action", valid_603140
  var valid_603141 = query.getOrDefault("Version")
  valid_603141 = validateParameter(valid_603141, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603141 != nil:
    section.add "Version", valid_603141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603142 = header.getOrDefault("X-Amz-Signature")
  valid_603142 = validateParameter(valid_603142, JString, required = false,
                                 default = nil)
  if valid_603142 != nil:
    section.add "X-Amz-Signature", valid_603142
  var valid_603143 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603143 = validateParameter(valid_603143, JString, required = false,
                                 default = nil)
  if valid_603143 != nil:
    section.add "X-Amz-Content-Sha256", valid_603143
  var valid_603144 = header.getOrDefault("X-Amz-Date")
  valid_603144 = validateParameter(valid_603144, JString, required = false,
                                 default = nil)
  if valid_603144 != nil:
    section.add "X-Amz-Date", valid_603144
  var valid_603145 = header.getOrDefault("X-Amz-Credential")
  valid_603145 = validateParameter(valid_603145, JString, required = false,
                                 default = nil)
  if valid_603145 != nil:
    section.add "X-Amz-Credential", valid_603145
  var valid_603146 = header.getOrDefault("X-Amz-Security-Token")
  valid_603146 = validateParameter(valid_603146, JString, required = false,
                                 default = nil)
  if valid_603146 != nil:
    section.add "X-Amz-Security-Token", valid_603146
  var valid_603147 = header.getOrDefault("X-Amz-Algorithm")
  valid_603147 = validateParameter(valid_603147, JString, required = false,
                                 default = nil)
  if valid_603147 != nil:
    section.add "X-Amz-Algorithm", valid_603147
  var valid_603148 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603148 = validateParameter(valid_603148, JString, required = false,
                                 default = nil)
  if valid_603148 != nil:
    section.add "X-Amz-SignedHeaders", valid_603148
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_603149 = formData.getOrDefault("MaxRecords")
  valid_603149 = validateParameter(valid_603149, JInt, required = false, default = nil)
  if valid_603149 != nil:
    section.add "MaxRecords", valid_603149
  var valid_603150 = formData.getOrDefault("Marker")
  valid_603150 = validateParameter(valid_603150, JString, required = false,
                                 default = nil)
  if valid_603150 != nil:
    section.add "Marker", valid_603150
  var valid_603151 = formData.getOrDefault("Duration")
  valid_603151 = validateParameter(valid_603151, JString, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "Duration", valid_603151
  var valid_603152 = formData.getOrDefault("OfferingType")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "OfferingType", valid_603152
  var valid_603153 = formData.getOrDefault("ProductDescription")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "ProductDescription", valid_603153
  var valid_603154 = formData.getOrDefault("ReservedCacheNodeId")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "ReservedCacheNodeId", valid_603154
  var valid_603155 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603155
  var valid_603156 = formData.getOrDefault("CacheNodeType")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "CacheNodeType", valid_603156
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603157: Call_PostDescribeReservedCacheNodes_603137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_603157.validator(path, query, header, formData, body)
  let scheme = call_603157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603157.url(scheme.get, call_603157.host, call_603157.base,
                         call_603157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603157, url, valid)

proc call*(call_603158: Call_PostDescribeReservedCacheNodes_603137;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_603159 = newJObject()
  var formData_603160 = newJObject()
  add(formData_603160, "MaxRecords", newJInt(MaxRecords))
  add(formData_603160, "Marker", newJString(Marker))
  add(formData_603160, "Duration", newJString(Duration))
  add(formData_603160, "OfferingType", newJString(OfferingType))
  add(formData_603160, "ProductDescription", newJString(ProductDescription))
  add(query_603159, "Action", newJString(Action))
  add(query_603159, "Version", newJString(Version))
  add(formData_603160, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_603160, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_603160, "CacheNodeType", newJString(CacheNodeType))
  result = call_603158.call(nil, query_603159, nil, formData_603160, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_603137(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_603138, base: "/",
    url: url_PostDescribeReservedCacheNodes_603139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_603114 = ref object of OpenApiRestCall_601389
proc url_GetDescribeReservedCacheNodes_603116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodes_603115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_603117 = query.getOrDefault("Marker")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "Marker", valid_603117
  var valid_603118 = query.getOrDefault("ProductDescription")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "ProductDescription", valid_603118
  var valid_603119 = query.getOrDefault("OfferingType")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "OfferingType", valid_603119
  var valid_603120 = query.getOrDefault("CacheNodeType")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "CacheNodeType", valid_603120
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603121 = query.getOrDefault("Action")
  valid_603121 = validateParameter(valid_603121, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_603121 != nil:
    section.add "Action", valid_603121
  var valid_603122 = query.getOrDefault("Duration")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "Duration", valid_603122
  var valid_603123 = query.getOrDefault("ReservedCacheNodeId")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "ReservedCacheNodeId", valid_603123
  var valid_603124 = query.getOrDefault("Version")
  valid_603124 = validateParameter(valid_603124, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603124 != nil:
    section.add "Version", valid_603124
  var valid_603125 = query.getOrDefault("MaxRecords")
  valid_603125 = validateParameter(valid_603125, JInt, required = false, default = nil)
  if valid_603125 != nil:
    section.add "MaxRecords", valid_603125
  var valid_603126 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603126 = validateParameter(valid_603126, JString, required = false,
                                 default = nil)
  if valid_603126 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603127 = header.getOrDefault("X-Amz-Signature")
  valid_603127 = validateParameter(valid_603127, JString, required = false,
                                 default = nil)
  if valid_603127 != nil:
    section.add "X-Amz-Signature", valid_603127
  var valid_603128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603128 = validateParameter(valid_603128, JString, required = false,
                                 default = nil)
  if valid_603128 != nil:
    section.add "X-Amz-Content-Sha256", valid_603128
  var valid_603129 = header.getOrDefault("X-Amz-Date")
  valid_603129 = validateParameter(valid_603129, JString, required = false,
                                 default = nil)
  if valid_603129 != nil:
    section.add "X-Amz-Date", valid_603129
  var valid_603130 = header.getOrDefault("X-Amz-Credential")
  valid_603130 = validateParameter(valid_603130, JString, required = false,
                                 default = nil)
  if valid_603130 != nil:
    section.add "X-Amz-Credential", valid_603130
  var valid_603131 = header.getOrDefault("X-Amz-Security-Token")
  valid_603131 = validateParameter(valid_603131, JString, required = false,
                                 default = nil)
  if valid_603131 != nil:
    section.add "X-Amz-Security-Token", valid_603131
  var valid_603132 = header.getOrDefault("X-Amz-Algorithm")
  valid_603132 = validateParameter(valid_603132, JString, required = false,
                                 default = nil)
  if valid_603132 != nil:
    section.add "X-Amz-Algorithm", valid_603132
  var valid_603133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603133 = validateParameter(valid_603133, JString, required = false,
                                 default = nil)
  if valid_603133 != nil:
    section.add "X-Amz-SignedHeaders", valid_603133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603134: Call_GetDescribeReservedCacheNodes_603114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_603134.validator(path, query, header, formData, body)
  let scheme = call_603134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603134.url(scheme.get, call_603134.host, call_603134.base,
                         call_603134.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603134, url, valid)

proc call*(call_603135: Call_GetDescribeReservedCacheNodes_603114;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_603136 = newJObject()
  add(query_603136, "Marker", newJString(Marker))
  add(query_603136, "ProductDescription", newJString(ProductDescription))
  add(query_603136, "OfferingType", newJString(OfferingType))
  add(query_603136, "CacheNodeType", newJString(CacheNodeType))
  add(query_603136, "Action", newJString(Action))
  add(query_603136, "Duration", newJString(Duration))
  add(query_603136, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_603136, "Version", newJString(Version))
  add(query_603136, "MaxRecords", newJInt(MaxRecords))
  add(query_603136, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_603135.call(nil, query_603136, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_603114(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_603115, base: "/",
    url: url_GetDescribeReservedCacheNodes_603116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_603183 = ref object of OpenApiRestCall_601389
proc url_PostDescribeReservedCacheNodesOfferings_603185(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_603184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603186 = query.getOrDefault("Action")
  valid_603186 = validateParameter(valid_603186, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_603186 != nil:
    section.add "Action", valid_603186
  var valid_603187 = query.getOrDefault("Version")
  valid_603187 = validateParameter(valid_603187, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603187 != nil:
    section.add "Version", valid_603187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603188 = header.getOrDefault("X-Amz-Signature")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-Signature", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-Content-Sha256", valid_603189
  var valid_603190 = header.getOrDefault("X-Amz-Date")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "X-Amz-Date", valid_603190
  var valid_603191 = header.getOrDefault("X-Amz-Credential")
  valid_603191 = validateParameter(valid_603191, JString, required = false,
                                 default = nil)
  if valid_603191 != nil:
    section.add "X-Amz-Credential", valid_603191
  var valid_603192 = header.getOrDefault("X-Amz-Security-Token")
  valid_603192 = validateParameter(valid_603192, JString, required = false,
                                 default = nil)
  if valid_603192 != nil:
    section.add "X-Amz-Security-Token", valid_603192
  var valid_603193 = header.getOrDefault("X-Amz-Algorithm")
  valid_603193 = validateParameter(valid_603193, JString, required = false,
                                 default = nil)
  if valid_603193 != nil:
    section.add "X-Amz-Algorithm", valid_603193
  var valid_603194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603194 = validateParameter(valid_603194, JString, required = false,
                                 default = nil)
  if valid_603194 != nil:
    section.add "X-Amz-SignedHeaders", valid_603194
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_603195 = formData.getOrDefault("MaxRecords")
  valid_603195 = validateParameter(valid_603195, JInt, required = false, default = nil)
  if valid_603195 != nil:
    section.add "MaxRecords", valid_603195
  var valid_603196 = formData.getOrDefault("Marker")
  valid_603196 = validateParameter(valid_603196, JString, required = false,
                                 default = nil)
  if valid_603196 != nil:
    section.add "Marker", valid_603196
  var valid_603197 = formData.getOrDefault("Duration")
  valid_603197 = validateParameter(valid_603197, JString, required = false,
                                 default = nil)
  if valid_603197 != nil:
    section.add "Duration", valid_603197
  var valid_603198 = formData.getOrDefault("OfferingType")
  valid_603198 = validateParameter(valid_603198, JString, required = false,
                                 default = nil)
  if valid_603198 != nil:
    section.add "OfferingType", valid_603198
  var valid_603199 = formData.getOrDefault("ProductDescription")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "ProductDescription", valid_603199
  var valid_603200 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603200 = validateParameter(valid_603200, JString, required = false,
                                 default = nil)
  if valid_603200 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603200
  var valid_603201 = formData.getOrDefault("CacheNodeType")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "CacheNodeType", valid_603201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603202: Call_PostDescribeReservedCacheNodesOfferings_603183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_603202.validator(path, query, header, formData, body)
  let scheme = call_603202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603202.url(scheme.get, call_603202.host, call_603202.base,
                         call_603202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603202, url, valid)

proc call*(call_603203: Call_PostDescribeReservedCacheNodesOfferings_603183;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_603204 = newJObject()
  var formData_603205 = newJObject()
  add(formData_603205, "MaxRecords", newJInt(MaxRecords))
  add(formData_603205, "Marker", newJString(Marker))
  add(formData_603205, "Duration", newJString(Duration))
  add(formData_603205, "OfferingType", newJString(OfferingType))
  add(formData_603205, "ProductDescription", newJString(ProductDescription))
  add(query_603204, "Action", newJString(Action))
  add(query_603204, "Version", newJString(Version))
  add(formData_603205, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_603205, "CacheNodeType", newJString(CacheNodeType))
  result = call_603203.call(nil, query_603204, nil, formData_603205, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_603183(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_603184, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_603185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_603161 = ref object of OpenApiRestCall_601389
proc url_GetDescribeReservedCacheNodesOfferings_603163(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_603162(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_603164 = query.getOrDefault("Marker")
  valid_603164 = validateParameter(valid_603164, JString, required = false,
                                 default = nil)
  if valid_603164 != nil:
    section.add "Marker", valid_603164
  var valid_603165 = query.getOrDefault("ProductDescription")
  valid_603165 = validateParameter(valid_603165, JString, required = false,
                                 default = nil)
  if valid_603165 != nil:
    section.add "ProductDescription", valid_603165
  var valid_603166 = query.getOrDefault("OfferingType")
  valid_603166 = validateParameter(valid_603166, JString, required = false,
                                 default = nil)
  if valid_603166 != nil:
    section.add "OfferingType", valid_603166
  var valid_603167 = query.getOrDefault("CacheNodeType")
  valid_603167 = validateParameter(valid_603167, JString, required = false,
                                 default = nil)
  if valid_603167 != nil:
    section.add "CacheNodeType", valid_603167
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603168 = query.getOrDefault("Action")
  valid_603168 = validateParameter(valid_603168, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_603168 != nil:
    section.add "Action", valid_603168
  var valid_603169 = query.getOrDefault("Duration")
  valid_603169 = validateParameter(valid_603169, JString, required = false,
                                 default = nil)
  if valid_603169 != nil:
    section.add "Duration", valid_603169
  var valid_603170 = query.getOrDefault("Version")
  valid_603170 = validateParameter(valid_603170, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603170 != nil:
    section.add "Version", valid_603170
  var valid_603171 = query.getOrDefault("MaxRecords")
  valid_603171 = validateParameter(valid_603171, JInt, required = false, default = nil)
  if valid_603171 != nil:
    section.add "MaxRecords", valid_603171
  var valid_603172 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603173 = header.getOrDefault("X-Amz-Signature")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-Signature", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Content-Sha256", valid_603174
  var valid_603175 = header.getOrDefault("X-Amz-Date")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-Date", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-Credential")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-Credential", valid_603176
  var valid_603177 = header.getOrDefault("X-Amz-Security-Token")
  valid_603177 = validateParameter(valid_603177, JString, required = false,
                                 default = nil)
  if valid_603177 != nil:
    section.add "X-Amz-Security-Token", valid_603177
  var valid_603178 = header.getOrDefault("X-Amz-Algorithm")
  valid_603178 = validateParameter(valid_603178, JString, required = false,
                                 default = nil)
  if valid_603178 != nil:
    section.add "X-Amz-Algorithm", valid_603178
  var valid_603179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603179 = validateParameter(valid_603179, JString, required = false,
                                 default = nil)
  if valid_603179 != nil:
    section.add "X-Amz-SignedHeaders", valid_603179
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603180: Call_GetDescribeReservedCacheNodesOfferings_603161;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_603180.validator(path, query, header, formData, body)
  let scheme = call_603180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603180.url(scheme.get, call_603180.host, call_603180.base,
                         call_603180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603180, url, valid)

proc call*(call_603181: Call_GetDescribeReservedCacheNodesOfferings_603161;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_603182 = newJObject()
  add(query_603182, "Marker", newJString(Marker))
  add(query_603182, "ProductDescription", newJString(ProductDescription))
  add(query_603182, "OfferingType", newJString(OfferingType))
  add(query_603182, "CacheNodeType", newJString(CacheNodeType))
  add(query_603182, "Action", newJString(Action))
  add(query_603182, "Duration", newJString(Duration))
  add(query_603182, "Version", newJString(Version))
  add(query_603182, "MaxRecords", newJInt(MaxRecords))
  add(query_603182, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_603181.call(nil, query_603182, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_603161(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_603162, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_603163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_603225 = ref object of OpenApiRestCall_601389
proc url_PostDescribeServiceUpdates_603227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeServiceUpdates_603226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603228 = query.getOrDefault("Action")
  valid_603228 = validateParameter(valid_603228, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_603228 != nil:
    section.add "Action", valid_603228
  var valid_603229 = query.getOrDefault("Version")
  valid_603229 = validateParameter(valid_603229, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603229 != nil:
    section.add "Version", valid_603229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603230 = header.getOrDefault("X-Amz-Signature")
  valid_603230 = validateParameter(valid_603230, JString, required = false,
                                 default = nil)
  if valid_603230 != nil:
    section.add "X-Amz-Signature", valid_603230
  var valid_603231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603231 = validateParameter(valid_603231, JString, required = false,
                                 default = nil)
  if valid_603231 != nil:
    section.add "X-Amz-Content-Sha256", valid_603231
  var valid_603232 = header.getOrDefault("X-Amz-Date")
  valid_603232 = validateParameter(valid_603232, JString, required = false,
                                 default = nil)
  if valid_603232 != nil:
    section.add "X-Amz-Date", valid_603232
  var valid_603233 = header.getOrDefault("X-Amz-Credential")
  valid_603233 = validateParameter(valid_603233, JString, required = false,
                                 default = nil)
  if valid_603233 != nil:
    section.add "X-Amz-Credential", valid_603233
  var valid_603234 = header.getOrDefault("X-Amz-Security-Token")
  valid_603234 = validateParameter(valid_603234, JString, required = false,
                                 default = nil)
  if valid_603234 != nil:
    section.add "X-Amz-Security-Token", valid_603234
  var valid_603235 = header.getOrDefault("X-Amz-Algorithm")
  valid_603235 = validateParameter(valid_603235, JString, required = false,
                                 default = nil)
  if valid_603235 != nil:
    section.add "X-Amz-Algorithm", valid_603235
  var valid_603236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603236 = validateParameter(valid_603236, JString, required = false,
                                 default = nil)
  if valid_603236 != nil:
    section.add "X-Amz-SignedHeaders", valid_603236
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_603237 = formData.getOrDefault("MaxRecords")
  valid_603237 = validateParameter(valid_603237, JInt, required = false, default = nil)
  if valid_603237 != nil:
    section.add "MaxRecords", valid_603237
  var valid_603238 = formData.getOrDefault("ServiceUpdateName")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "ServiceUpdateName", valid_603238
  var valid_603239 = formData.getOrDefault("Marker")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "Marker", valid_603239
  var valid_603240 = formData.getOrDefault("ServiceUpdateStatus")
  valid_603240 = validateParameter(valid_603240, JArray, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "ServiceUpdateStatus", valid_603240
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603241: Call_PostDescribeServiceUpdates_603225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_603241.validator(path, query, header, formData, body)
  let scheme = call_603241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603241.url(scheme.get, call_603241.host, call_603241.base,
                         call_603241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603241, url, valid)

proc call*(call_603242: Call_PostDescribeServiceUpdates_603225;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_603243 = newJObject()
  var formData_603244 = newJObject()
  add(formData_603244, "MaxRecords", newJInt(MaxRecords))
  add(formData_603244, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_603244, "Marker", newJString(Marker))
  add(query_603243, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_603244.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_603243, "Version", newJString(Version))
  result = call_603242.call(nil, query_603243, nil, formData_603244, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_603225(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_603226, base: "/",
    url: url_PostDescribeServiceUpdates_603227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_603206 = ref object of OpenApiRestCall_601389
proc url_GetDescribeServiceUpdates_603208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeServiceUpdates_603207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_603209 = query.getOrDefault("Marker")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "Marker", valid_603209
  var valid_603210 = query.getOrDefault("ServiceUpdateName")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "ServiceUpdateName", valid_603210
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603211 = query.getOrDefault("Action")
  valid_603211 = validateParameter(valid_603211, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_603211 != nil:
    section.add "Action", valid_603211
  var valid_603212 = query.getOrDefault("ServiceUpdateStatus")
  valid_603212 = validateParameter(valid_603212, JArray, required = false,
                                 default = nil)
  if valid_603212 != nil:
    section.add "ServiceUpdateStatus", valid_603212
  var valid_603213 = query.getOrDefault("Version")
  valid_603213 = validateParameter(valid_603213, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603213 != nil:
    section.add "Version", valid_603213
  var valid_603214 = query.getOrDefault("MaxRecords")
  valid_603214 = validateParameter(valid_603214, JInt, required = false, default = nil)
  if valid_603214 != nil:
    section.add "MaxRecords", valid_603214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603215 = header.getOrDefault("X-Amz-Signature")
  valid_603215 = validateParameter(valid_603215, JString, required = false,
                                 default = nil)
  if valid_603215 != nil:
    section.add "X-Amz-Signature", valid_603215
  var valid_603216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603216 = validateParameter(valid_603216, JString, required = false,
                                 default = nil)
  if valid_603216 != nil:
    section.add "X-Amz-Content-Sha256", valid_603216
  var valid_603217 = header.getOrDefault("X-Amz-Date")
  valid_603217 = validateParameter(valid_603217, JString, required = false,
                                 default = nil)
  if valid_603217 != nil:
    section.add "X-Amz-Date", valid_603217
  var valid_603218 = header.getOrDefault("X-Amz-Credential")
  valid_603218 = validateParameter(valid_603218, JString, required = false,
                                 default = nil)
  if valid_603218 != nil:
    section.add "X-Amz-Credential", valid_603218
  var valid_603219 = header.getOrDefault("X-Amz-Security-Token")
  valid_603219 = validateParameter(valid_603219, JString, required = false,
                                 default = nil)
  if valid_603219 != nil:
    section.add "X-Amz-Security-Token", valid_603219
  var valid_603220 = header.getOrDefault("X-Amz-Algorithm")
  valid_603220 = validateParameter(valid_603220, JString, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "X-Amz-Algorithm", valid_603220
  var valid_603221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "X-Amz-SignedHeaders", valid_603221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603222: Call_GetDescribeServiceUpdates_603206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_603222.validator(path, query, header, formData, body)
  let scheme = call_603222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603222.url(scheme.get, call_603222.host, call_603222.base,
                         call_603222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603222, url, valid)

proc call*(call_603223: Call_GetDescribeServiceUpdates_603206; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_603224 = newJObject()
  add(query_603224, "Marker", newJString(Marker))
  add(query_603224, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_603224, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_603224.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_603224, "Version", newJString(Version))
  add(query_603224, "MaxRecords", newJInt(MaxRecords))
  result = call_603223.call(nil, query_603224, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_603206(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_603207, base: "/",
    url: url_GetDescribeServiceUpdates_603208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_603267 = ref object of OpenApiRestCall_601389
proc url_PostDescribeSnapshots_603269(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSnapshots_603268(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603270 = query.getOrDefault("Action")
  valid_603270 = validateParameter(valid_603270, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_603270 != nil:
    section.add "Action", valid_603270
  var valid_603271 = query.getOrDefault("Version")
  valid_603271 = validateParameter(valid_603271, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603271 != nil:
    section.add "Version", valid_603271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603272 = header.getOrDefault("X-Amz-Signature")
  valid_603272 = validateParameter(valid_603272, JString, required = false,
                                 default = nil)
  if valid_603272 != nil:
    section.add "X-Amz-Signature", valid_603272
  var valid_603273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "X-Amz-Content-Sha256", valid_603273
  var valid_603274 = header.getOrDefault("X-Amz-Date")
  valid_603274 = validateParameter(valid_603274, JString, required = false,
                                 default = nil)
  if valid_603274 != nil:
    section.add "X-Amz-Date", valid_603274
  var valid_603275 = header.getOrDefault("X-Amz-Credential")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-Credential", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-Security-Token")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-Security-Token", valid_603276
  var valid_603277 = header.getOrDefault("X-Amz-Algorithm")
  valid_603277 = validateParameter(valid_603277, JString, required = false,
                                 default = nil)
  if valid_603277 != nil:
    section.add "X-Amz-Algorithm", valid_603277
  var valid_603278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603278 = validateParameter(valid_603278, JString, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "X-Amz-SignedHeaders", valid_603278
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_603279 = formData.getOrDefault("CacheClusterId")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "CacheClusterId", valid_603279
  var valid_603280 = formData.getOrDefault("MaxRecords")
  valid_603280 = validateParameter(valid_603280, JInt, required = false, default = nil)
  if valid_603280 != nil:
    section.add "MaxRecords", valid_603280
  var valid_603281 = formData.getOrDefault("Marker")
  valid_603281 = validateParameter(valid_603281, JString, required = false,
                                 default = nil)
  if valid_603281 != nil:
    section.add "Marker", valid_603281
  var valid_603282 = formData.getOrDefault("SnapshotName")
  valid_603282 = validateParameter(valid_603282, JString, required = false,
                                 default = nil)
  if valid_603282 != nil:
    section.add "SnapshotName", valid_603282
  var valid_603283 = formData.getOrDefault("SnapshotSource")
  valid_603283 = validateParameter(valid_603283, JString, required = false,
                                 default = nil)
  if valid_603283 != nil:
    section.add "SnapshotSource", valid_603283
  var valid_603284 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_603284 = validateParameter(valid_603284, JBool, required = false, default = nil)
  if valid_603284 != nil:
    section.add "ShowNodeGroupConfig", valid_603284
  var valid_603285 = formData.getOrDefault("ReplicationGroupId")
  valid_603285 = validateParameter(valid_603285, JString, required = false,
                                 default = nil)
  if valid_603285 != nil:
    section.add "ReplicationGroupId", valid_603285
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603286: Call_PostDescribeSnapshots_603267; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603286.validator(path, query, header, formData, body)
  let scheme = call_603286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603286.url(scheme.get, call_603286.host, call_603286.base,
                         call_603286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603286, url, valid)

proc call*(call_603287: Call_PostDescribeSnapshots_603267;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_603288 = newJObject()
  var formData_603289 = newJObject()
  add(formData_603289, "CacheClusterId", newJString(CacheClusterId))
  add(formData_603289, "MaxRecords", newJInt(MaxRecords))
  add(formData_603289, "Marker", newJString(Marker))
  add(formData_603289, "SnapshotName", newJString(SnapshotName))
  add(formData_603289, "SnapshotSource", newJString(SnapshotSource))
  add(query_603288, "Action", newJString(Action))
  add(formData_603289, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_603288, "Version", newJString(Version))
  add(formData_603289, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603287.call(nil, query_603288, nil, formData_603289, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_603267(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_603268, base: "/",
    url: url_PostDescribeSnapshots_603269, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_603245 = ref object of OpenApiRestCall_601389
proc url_GetDescribeSnapshots_603247(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSnapshots_603246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_603248 = query.getOrDefault("Marker")
  valid_603248 = validateParameter(valid_603248, JString, required = false,
                                 default = nil)
  if valid_603248 != nil:
    section.add "Marker", valid_603248
  var valid_603249 = query.getOrDefault("CacheClusterId")
  valid_603249 = validateParameter(valid_603249, JString, required = false,
                                 default = nil)
  if valid_603249 != nil:
    section.add "CacheClusterId", valid_603249
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603250 = query.getOrDefault("Action")
  valid_603250 = validateParameter(valid_603250, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_603250 != nil:
    section.add "Action", valid_603250
  var valid_603251 = query.getOrDefault("ReplicationGroupId")
  valid_603251 = validateParameter(valid_603251, JString, required = false,
                                 default = nil)
  if valid_603251 != nil:
    section.add "ReplicationGroupId", valid_603251
  var valid_603252 = query.getOrDefault("Version")
  valid_603252 = validateParameter(valid_603252, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603252 != nil:
    section.add "Version", valid_603252
  var valid_603253 = query.getOrDefault("SnapshotName")
  valid_603253 = validateParameter(valid_603253, JString, required = false,
                                 default = nil)
  if valid_603253 != nil:
    section.add "SnapshotName", valid_603253
  var valid_603254 = query.getOrDefault("SnapshotSource")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "SnapshotSource", valid_603254
  var valid_603255 = query.getOrDefault("MaxRecords")
  valid_603255 = validateParameter(valid_603255, JInt, required = false, default = nil)
  if valid_603255 != nil:
    section.add "MaxRecords", valid_603255
  var valid_603256 = query.getOrDefault("ShowNodeGroupConfig")
  valid_603256 = validateParameter(valid_603256, JBool, required = false, default = nil)
  if valid_603256 != nil:
    section.add "ShowNodeGroupConfig", valid_603256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603257 = header.getOrDefault("X-Amz-Signature")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "X-Amz-Signature", valid_603257
  var valid_603258 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Content-Sha256", valid_603258
  var valid_603259 = header.getOrDefault("X-Amz-Date")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "X-Amz-Date", valid_603259
  var valid_603260 = header.getOrDefault("X-Amz-Credential")
  valid_603260 = validateParameter(valid_603260, JString, required = false,
                                 default = nil)
  if valid_603260 != nil:
    section.add "X-Amz-Credential", valid_603260
  var valid_603261 = header.getOrDefault("X-Amz-Security-Token")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "X-Amz-Security-Token", valid_603261
  var valid_603262 = header.getOrDefault("X-Amz-Algorithm")
  valid_603262 = validateParameter(valid_603262, JString, required = false,
                                 default = nil)
  if valid_603262 != nil:
    section.add "X-Amz-Algorithm", valid_603262
  var valid_603263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603263 = validateParameter(valid_603263, JString, required = false,
                                 default = nil)
  if valid_603263 != nil:
    section.add "X-Amz-SignedHeaders", valid_603263
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603264: Call_GetDescribeSnapshots_603245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603264.validator(path, query, header, formData, body)
  let scheme = call_603264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603264.url(scheme.get, call_603264.host, call_603264.base,
                         call_603264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603264, url, valid)

proc call*(call_603265: Call_GetDescribeSnapshots_603245; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_603266 = newJObject()
  add(query_603266, "Marker", newJString(Marker))
  add(query_603266, "CacheClusterId", newJString(CacheClusterId))
  add(query_603266, "Action", newJString(Action))
  add(query_603266, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603266, "Version", newJString(Version))
  add(query_603266, "SnapshotName", newJString(SnapshotName))
  add(query_603266, "SnapshotSource", newJString(SnapshotSource))
  add(query_603266, "MaxRecords", newJInt(MaxRecords))
  add(query_603266, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_603265.call(nil, query_603266, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_603245(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_603246, base: "/",
    url: url_GetDescribeSnapshots_603247, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_603316 = ref object of OpenApiRestCall_601389
proc url_PostDescribeUpdateActions_603318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeUpdateActions_603317(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603319 = query.getOrDefault("Action")
  valid_603319 = validateParameter(valid_603319, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_603319 != nil:
    section.add "Action", valid_603319
  var valid_603320 = query.getOrDefault("Version")
  valid_603320 = validateParameter(valid_603320, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603320 != nil:
    section.add "Version", valid_603320
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603321 = header.getOrDefault("X-Amz-Signature")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "X-Amz-Signature", valid_603321
  var valid_603322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Content-Sha256", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-Date")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-Date", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-Credential")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Credential", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-Security-Token")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-Security-Token", valid_603325
  var valid_603326 = header.getOrDefault("X-Amz-Algorithm")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-Algorithm", valid_603326
  var valid_603327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "X-Amz-SignedHeaders", valid_603327
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_603328 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_603328
  var valid_603329 = formData.getOrDefault("MaxRecords")
  valid_603329 = validateParameter(valid_603329, JInt, required = false, default = nil)
  if valid_603329 != nil:
    section.add "MaxRecords", valid_603329
  var valid_603330 = formData.getOrDefault("ServiceUpdateName")
  valid_603330 = validateParameter(valid_603330, JString, required = false,
                                 default = nil)
  if valid_603330 != nil:
    section.add "ServiceUpdateName", valid_603330
  var valid_603331 = formData.getOrDefault("ReplicationGroupIds")
  valid_603331 = validateParameter(valid_603331, JArray, required = false,
                                 default = nil)
  if valid_603331 != nil:
    section.add "ReplicationGroupIds", valid_603331
  var valid_603332 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_603332 = validateParameter(valid_603332, JString, required = false,
                                 default = nil)
  if valid_603332 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_603332
  var valid_603333 = formData.getOrDefault("Marker")
  valid_603333 = validateParameter(valid_603333, JString, required = false,
                                 default = nil)
  if valid_603333 != nil:
    section.add "Marker", valid_603333
  var valid_603334 = formData.getOrDefault("CacheClusterIds")
  valid_603334 = validateParameter(valid_603334, JArray, required = false,
                                 default = nil)
  if valid_603334 != nil:
    section.add "CacheClusterIds", valid_603334
  var valid_603335 = formData.getOrDefault("Engine")
  valid_603335 = validateParameter(valid_603335, JString, required = false,
                                 default = nil)
  if valid_603335 != nil:
    section.add "Engine", valid_603335
  var valid_603336 = formData.getOrDefault("UpdateActionStatus")
  valid_603336 = validateParameter(valid_603336, JArray, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "UpdateActionStatus", valid_603336
  var valid_603337 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_603337 = validateParameter(valid_603337, JBool, required = false, default = nil)
  if valid_603337 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_603337
  var valid_603338 = formData.getOrDefault("ServiceUpdateStatus")
  valid_603338 = validateParameter(valid_603338, JArray, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "ServiceUpdateStatus", valid_603338
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603339: Call_PostDescribeUpdateActions_603316; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_603339.validator(path, query, header, formData, body)
  let scheme = call_603339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603339.url(scheme.get, call_603339.host, call_603339.base,
                         call_603339.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603339, url, valid)

proc call*(call_603340: Call_PostDescribeUpdateActions_603316;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          CacheClusterIds: JsonNode = nil; Engine: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_603341 = newJObject()
  var formData_603342 = newJObject()
  add(formData_603342, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_603342, "MaxRecords", newJInt(MaxRecords))
  add(formData_603342, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_603342.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_603342, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_603342, "Marker", newJString(Marker))
  if CacheClusterIds != nil:
    formData_603342.add "CacheClusterIds", CacheClusterIds
  add(formData_603342, "Engine", newJString(Engine))
  if UpdateActionStatus != nil:
    formData_603342.add "UpdateActionStatus", UpdateActionStatus
  add(formData_603342, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_603341, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_603342.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_603341, "Version", newJString(Version))
  result = call_603340.call(nil, query_603341, nil, formData_603342, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_603316(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_603317, base: "/",
    url: url_PostDescribeUpdateActions_603318,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_603290 = ref object of OpenApiRestCall_601389
proc url_GetDescribeUpdateActions_603292(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeUpdateActions_603291(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_603293 = query.getOrDefault("Marker")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "Marker", valid_603293
  var valid_603294 = query.getOrDefault("ServiceUpdateName")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "ServiceUpdateName", valid_603294
  var valid_603295 = query.getOrDefault("Engine")
  valid_603295 = validateParameter(valid_603295, JString, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "Engine", valid_603295
  var valid_603296 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_603296 = validateParameter(valid_603296, JString, required = false,
                                 default = nil)
  if valid_603296 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_603296
  var valid_603297 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_603297 = validateParameter(valid_603297, JBool, required = false, default = nil)
  if valid_603297 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_603297
  var valid_603298 = query.getOrDefault("UpdateActionStatus")
  valid_603298 = validateParameter(valid_603298, JArray, required = false,
                                 default = nil)
  if valid_603298 != nil:
    section.add "UpdateActionStatus", valid_603298
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603299 = query.getOrDefault("Action")
  valid_603299 = validateParameter(valid_603299, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_603299 != nil:
    section.add "Action", valid_603299
  var valid_603300 = query.getOrDefault("CacheClusterIds")
  valid_603300 = validateParameter(valid_603300, JArray, required = false,
                                 default = nil)
  if valid_603300 != nil:
    section.add "CacheClusterIds", valid_603300
  var valid_603301 = query.getOrDefault("ServiceUpdateStatus")
  valid_603301 = validateParameter(valid_603301, JArray, required = false,
                                 default = nil)
  if valid_603301 != nil:
    section.add "ServiceUpdateStatus", valid_603301
  var valid_603302 = query.getOrDefault("ReplicationGroupIds")
  valid_603302 = validateParameter(valid_603302, JArray, required = false,
                                 default = nil)
  if valid_603302 != nil:
    section.add "ReplicationGroupIds", valid_603302
  var valid_603303 = query.getOrDefault("Version")
  valid_603303 = validateParameter(valid_603303, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603303 != nil:
    section.add "Version", valid_603303
  var valid_603304 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_603304 = validateParameter(valid_603304, JString, required = false,
                                 default = nil)
  if valid_603304 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_603304
  var valid_603305 = query.getOrDefault("MaxRecords")
  valid_603305 = validateParameter(valid_603305, JInt, required = false, default = nil)
  if valid_603305 != nil:
    section.add "MaxRecords", valid_603305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603306 = header.getOrDefault("X-Amz-Signature")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-Signature", valid_603306
  var valid_603307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Content-Sha256", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-Date")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-Date", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-Credential")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Credential", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-Security-Token")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-Security-Token", valid_603310
  var valid_603311 = header.getOrDefault("X-Amz-Algorithm")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "X-Amz-Algorithm", valid_603311
  var valid_603312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603312 = validateParameter(valid_603312, JString, required = false,
                                 default = nil)
  if valid_603312 != nil:
    section.add "X-Amz-SignedHeaders", valid_603312
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603313: Call_GetDescribeUpdateActions_603290; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_603313.validator(path, query, header, formData, body)
  let scheme = call_603313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603313.url(scheme.get, call_603313.host, call_603313.base,
                         call_603313.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603313, url, valid)

proc call*(call_603314: Call_GetDescribeUpdateActions_603290; Marker: string = "";
          ServiceUpdateName: string = ""; Engine: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions"; CacheClusterIds: JsonNode = nil;
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_603315 = newJObject()
  add(query_603315, "Marker", newJString(Marker))
  add(query_603315, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_603315, "Engine", newJString(Engine))
  add(query_603315, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_603315, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_603315.add "UpdateActionStatus", UpdateActionStatus
  add(query_603315, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_603315.add "CacheClusterIds", CacheClusterIds
  if ServiceUpdateStatus != nil:
    query_603315.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_603315.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_603315, "Version", newJString(Version))
  add(query_603315, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_603315, "MaxRecords", newJInt(MaxRecords))
  result = call_603314.call(nil, query_603315, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_603290(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_603291, base: "/",
    url: url_GetDescribeUpdateActions_603292, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_603362 = ref object of OpenApiRestCall_601389
proc url_PostIncreaseReplicaCount_603364(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostIncreaseReplicaCount_603363(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603365 = query.getOrDefault("Action")
  valid_603365 = validateParameter(valid_603365, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_603365 != nil:
    section.add "Action", valid_603365
  var valid_603366 = query.getOrDefault("Version")
  valid_603366 = validateParameter(valid_603366, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603366 != nil:
    section.add "Version", valid_603366
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603367 = header.getOrDefault("X-Amz-Signature")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "X-Amz-Signature", valid_603367
  var valid_603368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603368 = validateParameter(valid_603368, JString, required = false,
                                 default = nil)
  if valid_603368 != nil:
    section.add "X-Amz-Content-Sha256", valid_603368
  var valid_603369 = header.getOrDefault("X-Amz-Date")
  valid_603369 = validateParameter(valid_603369, JString, required = false,
                                 default = nil)
  if valid_603369 != nil:
    section.add "X-Amz-Date", valid_603369
  var valid_603370 = header.getOrDefault("X-Amz-Credential")
  valid_603370 = validateParameter(valid_603370, JString, required = false,
                                 default = nil)
  if valid_603370 != nil:
    section.add "X-Amz-Credential", valid_603370
  var valid_603371 = header.getOrDefault("X-Amz-Security-Token")
  valid_603371 = validateParameter(valid_603371, JString, required = false,
                                 default = nil)
  if valid_603371 != nil:
    section.add "X-Amz-Security-Token", valid_603371
  var valid_603372 = header.getOrDefault("X-Amz-Algorithm")
  valid_603372 = validateParameter(valid_603372, JString, required = false,
                                 default = nil)
  if valid_603372 != nil:
    section.add "X-Amz-Algorithm", valid_603372
  var valid_603373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603373 = validateParameter(valid_603373, JString, required = false,
                                 default = nil)
  if valid_603373 != nil:
    section.add "X-Amz-SignedHeaders", valid_603373
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_603374 = formData.getOrDefault("ReplicaConfiguration")
  valid_603374 = validateParameter(valid_603374, JArray, required = false,
                                 default = nil)
  if valid_603374 != nil:
    section.add "ReplicaConfiguration", valid_603374
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_603375 = formData.getOrDefault("ApplyImmediately")
  valid_603375 = validateParameter(valid_603375, JBool, required = true, default = nil)
  if valid_603375 != nil:
    section.add "ApplyImmediately", valid_603375
  var valid_603376 = formData.getOrDefault("NewReplicaCount")
  valid_603376 = validateParameter(valid_603376, JInt, required = false, default = nil)
  if valid_603376 != nil:
    section.add "NewReplicaCount", valid_603376
  var valid_603377 = formData.getOrDefault("ReplicationGroupId")
  valid_603377 = validateParameter(valid_603377, JString, required = true,
                                 default = nil)
  if valid_603377 != nil:
    section.add "ReplicationGroupId", valid_603377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603378: Call_PostIncreaseReplicaCount_603362; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_603378.validator(path, query, header, formData, body)
  let scheme = call_603378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603378.url(scheme.get, call_603378.host, call_603378.base,
                         call_603378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603378, url, valid)

proc call*(call_603379: Call_PostIncreaseReplicaCount_603362;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_603380 = newJObject()
  var formData_603381 = newJObject()
  if ReplicaConfiguration != nil:
    formData_603381.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_603381, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603380, "Action", newJString(Action))
  add(formData_603381, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_603380, "Version", newJString(Version))
  add(formData_603381, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603379.call(nil, query_603380, nil, formData_603381, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_603362(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_603363, base: "/",
    url: url_PostIncreaseReplicaCount_603364, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_603343 = ref object of OpenApiRestCall_601389
proc url_GetIncreaseReplicaCount_603345(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetIncreaseReplicaCount_603344(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603346 = query.getOrDefault("NewReplicaCount")
  valid_603346 = validateParameter(valid_603346, JInt, required = false, default = nil)
  if valid_603346 != nil:
    section.add "NewReplicaCount", valid_603346
  var valid_603347 = query.getOrDefault("ReplicaConfiguration")
  valid_603347 = validateParameter(valid_603347, JArray, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "ReplicaConfiguration", valid_603347
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603348 = query.getOrDefault("Action")
  valid_603348 = validateParameter(valid_603348, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_603348 != nil:
    section.add "Action", valid_603348
  var valid_603349 = query.getOrDefault("ApplyImmediately")
  valid_603349 = validateParameter(valid_603349, JBool, required = true, default = nil)
  if valid_603349 != nil:
    section.add "ApplyImmediately", valid_603349
  var valid_603350 = query.getOrDefault("ReplicationGroupId")
  valid_603350 = validateParameter(valid_603350, JString, required = true,
                                 default = nil)
  if valid_603350 != nil:
    section.add "ReplicationGroupId", valid_603350
  var valid_603351 = query.getOrDefault("Version")
  valid_603351 = validateParameter(valid_603351, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603351 != nil:
    section.add "Version", valid_603351
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603352 = header.getOrDefault("X-Amz-Signature")
  valid_603352 = validateParameter(valid_603352, JString, required = false,
                                 default = nil)
  if valid_603352 != nil:
    section.add "X-Amz-Signature", valid_603352
  var valid_603353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603353 = validateParameter(valid_603353, JString, required = false,
                                 default = nil)
  if valid_603353 != nil:
    section.add "X-Amz-Content-Sha256", valid_603353
  var valid_603354 = header.getOrDefault("X-Amz-Date")
  valid_603354 = validateParameter(valid_603354, JString, required = false,
                                 default = nil)
  if valid_603354 != nil:
    section.add "X-Amz-Date", valid_603354
  var valid_603355 = header.getOrDefault("X-Amz-Credential")
  valid_603355 = validateParameter(valid_603355, JString, required = false,
                                 default = nil)
  if valid_603355 != nil:
    section.add "X-Amz-Credential", valid_603355
  var valid_603356 = header.getOrDefault("X-Amz-Security-Token")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "X-Amz-Security-Token", valid_603356
  var valid_603357 = header.getOrDefault("X-Amz-Algorithm")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "X-Amz-Algorithm", valid_603357
  var valid_603358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-SignedHeaders", valid_603358
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603359: Call_GetIncreaseReplicaCount_603343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_603359.validator(path, query, header, formData, body)
  let scheme = call_603359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603359.url(scheme.get, call_603359.host, call_603359.base,
                         call_603359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603359, url, valid)

proc call*(call_603360: Call_GetIncreaseReplicaCount_603343;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_603361 = newJObject()
  add(query_603361, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_603361.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_603361, "Action", newJString(Action))
  add(query_603361, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603361, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603361, "Version", newJString(Version))
  result = call_603360.call(nil, query_603361, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_603343(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_603344, base: "/",
    url: url_GetIncreaseReplicaCount_603345, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_603399 = ref object of OpenApiRestCall_601389
proc url_PostListAllowedNodeTypeModifications_603401(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_603400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603402 = query.getOrDefault("Action")
  valid_603402 = validateParameter(valid_603402, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_603402 != nil:
    section.add "Action", valid_603402
  var valid_603403 = query.getOrDefault("Version")
  valid_603403 = validateParameter(valid_603403, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603403 != nil:
    section.add "Version", valid_603403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603404 = header.getOrDefault("X-Amz-Signature")
  valid_603404 = validateParameter(valid_603404, JString, required = false,
                                 default = nil)
  if valid_603404 != nil:
    section.add "X-Amz-Signature", valid_603404
  var valid_603405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603405 = validateParameter(valid_603405, JString, required = false,
                                 default = nil)
  if valid_603405 != nil:
    section.add "X-Amz-Content-Sha256", valid_603405
  var valid_603406 = header.getOrDefault("X-Amz-Date")
  valid_603406 = validateParameter(valid_603406, JString, required = false,
                                 default = nil)
  if valid_603406 != nil:
    section.add "X-Amz-Date", valid_603406
  var valid_603407 = header.getOrDefault("X-Amz-Credential")
  valid_603407 = validateParameter(valid_603407, JString, required = false,
                                 default = nil)
  if valid_603407 != nil:
    section.add "X-Amz-Credential", valid_603407
  var valid_603408 = header.getOrDefault("X-Amz-Security-Token")
  valid_603408 = validateParameter(valid_603408, JString, required = false,
                                 default = nil)
  if valid_603408 != nil:
    section.add "X-Amz-Security-Token", valid_603408
  var valid_603409 = header.getOrDefault("X-Amz-Algorithm")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-Algorithm", valid_603409
  var valid_603410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "X-Amz-SignedHeaders", valid_603410
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_603411 = formData.getOrDefault("CacheClusterId")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "CacheClusterId", valid_603411
  var valid_603412 = formData.getOrDefault("ReplicationGroupId")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "ReplicationGroupId", valid_603412
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603413: Call_PostListAllowedNodeTypeModifications_603399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_603413.validator(path, query, header, formData, body)
  let scheme = call_603413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603413.url(scheme.get, call_603413.host, call_603413.base,
                         call_603413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603413, url, valid)

proc call*(call_603414: Call_PostListAllowedNodeTypeModifications_603399;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_603415 = newJObject()
  var formData_603416 = newJObject()
  add(formData_603416, "CacheClusterId", newJString(CacheClusterId))
  add(query_603415, "Action", newJString(Action))
  add(query_603415, "Version", newJString(Version))
  add(formData_603416, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603414.call(nil, query_603415, nil, formData_603416, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_603399(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_603400, base: "/",
    url: url_PostListAllowedNodeTypeModifications_603401,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_603382 = ref object of OpenApiRestCall_601389
proc url_GetListAllowedNodeTypeModifications_603384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_603383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603385 = query.getOrDefault("CacheClusterId")
  valid_603385 = validateParameter(valid_603385, JString, required = false,
                                 default = nil)
  if valid_603385 != nil:
    section.add "CacheClusterId", valid_603385
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603386 = query.getOrDefault("Action")
  valid_603386 = validateParameter(valid_603386, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_603386 != nil:
    section.add "Action", valid_603386
  var valid_603387 = query.getOrDefault("ReplicationGroupId")
  valid_603387 = validateParameter(valid_603387, JString, required = false,
                                 default = nil)
  if valid_603387 != nil:
    section.add "ReplicationGroupId", valid_603387
  var valid_603388 = query.getOrDefault("Version")
  valid_603388 = validateParameter(valid_603388, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603388 != nil:
    section.add "Version", valid_603388
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603389 = header.getOrDefault("X-Amz-Signature")
  valid_603389 = validateParameter(valid_603389, JString, required = false,
                                 default = nil)
  if valid_603389 != nil:
    section.add "X-Amz-Signature", valid_603389
  var valid_603390 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603390 = validateParameter(valid_603390, JString, required = false,
                                 default = nil)
  if valid_603390 != nil:
    section.add "X-Amz-Content-Sha256", valid_603390
  var valid_603391 = header.getOrDefault("X-Amz-Date")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Date", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Credential")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Credential", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Security-Token")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Security-Token", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Algorithm")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Algorithm", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-SignedHeaders", valid_603395
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603396: Call_GetListAllowedNodeTypeModifications_603382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_603396.validator(path, query, header, formData, body)
  let scheme = call_603396.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603396.url(scheme.get, call_603396.host, call_603396.base,
                         call_603396.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603396, url, valid)

proc call*(call_603397: Call_GetListAllowedNodeTypeModifications_603382;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_603398 = newJObject()
  add(query_603398, "CacheClusterId", newJString(CacheClusterId))
  add(query_603398, "Action", newJString(Action))
  add(query_603398, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603398, "Version", newJString(Version))
  result = call_603397.call(nil, query_603398, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_603382(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_603383, base: "/",
    url: url_GetListAllowedNodeTypeModifications_603384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_603433 = ref object of OpenApiRestCall_601389
proc url_PostListTagsForResource_603435(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_603434(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603436 = query.getOrDefault("Action")
  valid_603436 = validateParameter(valid_603436, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_603436 != nil:
    section.add "Action", valid_603436
  var valid_603437 = query.getOrDefault("Version")
  valid_603437 = validateParameter(valid_603437, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603437 != nil:
    section.add "Version", valid_603437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603438 = header.getOrDefault("X-Amz-Signature")
  valid_603438 = validateParameter(valid_603438, JString, required = false,
                                 default = nil)
  if valid_603438 != nil:
    section.add "X-Amz-Signature", valid_603438
  var valid_603439 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603439 = validateParameter(valid_603439, JString, required = false,
                                 default = nil)
  if valid_603439 != nil:
    section.add "X-Amz-Content-Sha256", valid_603439
  var valid_603440 = header.getOrDefault("X-Amz-Date")
  valid_603440 = validateParameter(valid_603440, JString, required = false,
                                 default = nil)
  if valid_603440 != nil:
    section.add "X-Amz-Date", valid_603440
  var valid_603441 = header.getOrDefault("X-Amz-Credential")
  valid_603441 = validateParameter(valid_603441, JString, required = false,
                                 default = nil)
  if valid_603441 != nil:
    section.add "X-Amz-Credential", valid_603441
  var valid_603442 = header.getOrDefault("X-Amz-Security-Token")
  valid_603442 = validateParameter(valid_603442, JString, required = false,
                                 default = nil)
  if valid_603442 != nil:
    section.add "X-Amz-Security-Token", valid_603442
  var valid_603443 = header.getOrDefault("X-Amz-Algorithm")
  valid_603443 = validateParameter(valid_603443, JString, required = false,
                                 default = nil)
  if valid_603443 != nil:
    section.add "X-Amz-Algorithm", valid_603443
  var valid_603444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-SignedHeaders", valid_603444
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_603445 = formData.getOrDefault("ResourceName")
  valid_603445 = validateParameter(valid_603445, JString, required = true,
                                 default = nil)
  if valid_603445 != nil:
    section.add "ResourceName", valid_603445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603446: Call_PostListTagsForResource_603433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_603446.validator(path, query, header, formData, body)
  let scheme = call_603446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603446.url(scheme.get, call_603446.host, call_603446.base,
                         call_603446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603446, url, valid)

proc call*(call_603447: Call_PostListTagsForResource_603433; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_603448 = newJObject()
  var formData_603449 = newJObject()
  add(query_603448, "Action", newJString(Action))
  add(query_603448, "Version", newJString(Version))
  add(formData_603449, "ResourceName", newJString(ResourceName))
  result = call_603447.call(nil, query_603448, nil, formData_603449, nil)

var postListTagsForResource* = Call_PostListTagsForResource_603433(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_603434, base: "/",
    url: url_PostListTagsForResource_603435, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_603417 = ref object of OpenApiRestCall_601389
proc url_GetListTagsForResource_603419(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_603418(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_603420 = query.getOrDefault("ResourceName")
  valid_603420 = validateParameter(valid_603420, JString, required = true,
                                 default = nil)
  if valid_603420 != nil:
    section.add "ResourceName", valid_603420
  var valid_603421 = query.getOrDefault("Action")
  valid_603421 = validateParameter(valid_603421, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_603421 != nil:
    section.add "Action", valid_603421
  var valid_603422 = query.getOrDefault("Version")
  valid_603422 = validateParameter(valid_603422, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603422 != nil:
    section.add "Version", valid_603422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603423 = header.getOrDefault("X-Amz-Signature")
  valid_603423 = validateParameter(valid_603423, JString, required = false,
                                 default = nil)
  if valid_603423 != nil:
    section.add "X-Amz-Signature", valid_603423
  var valid_603424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603424 = validateParameter(valid_603424, JString, required = false,
                                 default = nil)
  if valid_603424 != nil:
    section.add "X-Amz-Content-Sha256", valid_603424
  var valid_603425 = header.getOrDefault("X-Amz-Date")
  valid_603425 = validateParameter(valid_603425, JString, required = false,
                                 default = nil)
  if valid_603425 != nil:
    section.add "X-Amz-Date", valid_603425
  var valid_603426 = header.getOrDefault("X-Amz-Credential")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Credential", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-Security-Token")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-Security-Token", valid_603427
  var valid_603428 = header.getOrDefault("X-Amz-Algorithm")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "X-Amz-Algorithm", valid_603428
  var valid_603429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-SignedHeaders", valid_603429
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603430: Call_GetListTagsForResource_603417; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_603430.validator(path, query, header, formData, body)
  let scheme = call_603430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603430.url(scheme.get, call_603430.host, call_603430.base,
                         call_603430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603430, url, valid)

proc call*(call_603431: Call_GetListTagsForResource_603417; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603432 = newJObject()
  add(query_603432, "ResourceName", newJString(ResourceName))
  add(query_603432, "Action", newJString(Action))
  add(query_603432, "Version", newJString(Version))
  result = call_603431.call(nil, query_603432, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_603417(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_603418, base: "/",
    url: url_GetListTagsForResource_603419, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_603484 = ref object of OpenApiRestCall_601389
proc url_PostModifyCacheCluster_603486(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheCluster_603485(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603487 = query.getOrDefault("Action")
  valid_603487 = validateParameter(valid_603487, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_603487 != nil:
    section.add "Action", valid_603487
  var valid_603488 = query.getOrDefault("Version")
  valid_603488 = validateParameter(valid_603488, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603488 != nil:
    section.add "Version", valid_603488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603489 = header.getOrDefault("X-Amz-Signature")
  valid_603489 = validateParameter(valid_603489, JString, required = false,
                                 default = nil)
  if valid_603489 != nil:
    section.add "X-Amz-Signature", valid_603489
  var valid_603490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603490 = validateParameter(valid_603490, JString, required = false,
                                 default = nil)
  if valid_603490 != nil:
    section.add "X-Amz-Content-Sha256", valid_603490
  var valid_603491 = header.getOrDefault("X-Amz-Date")
  valid_603491 = validateParameter(valid_603491, JString, required = false,
                                 default = nil)
  if valid_603491 != nil:
    section.add "X-Amz-Date", valid_603491
  var valid_603492 = header.getOrDefault("X-Amz-Credential")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "X-Amz-Credential", valid_603492
  var valid_603493 = header.getOrDefault("X-Amz-Security-Token")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Security-Token", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-Algorithm")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Algorithm", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-SignedHeaders", valid_603495
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_603496 = formData.getOrDefault("SecurityGroupIds")
  valid_603496 = validateParameter(valid_603496, JArray, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "SecurityGroupIds", valid_603496
  var valid_603497 = formData.getOrDefault("NewAvailabilityZones")
  valid_603497 = validateParameter(valid_603497, JArray, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "NewAvailabilityZones", valid_603497
  var valid_603498 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "PreferredMaintenanceWindow", valid_603498
  var valid_603499 = formData.getOrDefault("NumCacheNodes")
  valid_603499 = validateParameter(valid_603499, JInt, required = false, default = nil)
  if valid_603499 != nil:
    section.add "NumCacheNodes", valid_603499
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_603500 = formData.getOrDefault("CacheClusterId")
  valid_603500 = validateParameter(valid_603500, JString, required = true,
                                 default = nil)
  if valid_603500 != nil:
    section.add "CacheClusterId", valid_603500
  var valid_603501 = formData.getOrDefault("NotificationTopicStatus")
  valid_603501 = validateParameter(valid_603501, JString, required = false,
                                 default = nil)
  if valid_603501 != nil:
    section.add "NotificationTopicStatus", valid_603501
  var valid_603502 = formData.getOrDefault("NotificationTopicArn")
  valid_603502 = validateParameter(valid_603502, JString, required = false,
                                 default = nil)
  if valid_603502 != nil:
    section.add "NotificationTopicArn", valid_603502
  var valid_603503 = formData.getOrDefault("EngineVersion")
  valid_603503 = validateParameter(valid_603503, JString, required = false,
                                 default = nil)
  if valid_603503 != nil:
    section.add "EngineVersion", valid_603503
  var valid_603504 = formData.getOrDefault("AZMode")
  valid_603504 = validateParameter(valid_603504, JString, required = false,
                                 default = newJString("single-az"))
  if valid_603504 != nil:
    section.add "AZMode", valid_603504
  var valid_603505 = formData.getOrDefault("CacheParameterGroupName")
  valid_603505 = validateParameter(valid_603505, JString, required = false,
                                 default = nil)
  if valid_603505 != nil:
    section.add "CacheParameterGroupName", valid_603505
  var valid_603506 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_603506 = validateParameter(valid_603506, JBool, required = false, default = nil)
  if valid_603506 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603506
  var valid_603507 = formData.getOrDefault("ApplyImmediately")
  valid_603507 = validateParameter(valid_603507, JBool, required = false, default = nil)
  if valid_603507 != nil:
    section.add "ApplyImmediately", valid_603507
  var valid_603508 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_603508 = validateParameter(valid_603508, JArray, required = false,
                                 default = nil)
  if valid_603508 != nil:
    section.add "CacheNodeIdsToRemove", valid_603508
  var valid_603509 = formData.getOrDefault("AuthToken")
  valid_603509 = validateParameter(valid_603509, JString, required = false,
                                 default = nil)
  if valid_603509 != nil:
    section.add "AuthToken", valid_603509
  var valid_603510 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_603510 = validateParameter(valid_603510, JArray, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "CacheSecurityGroupNames", valid_603510
  var valid_603511 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_603511 = validateParameter(valid_603511, JInt, required = false, default = nil)
  if valid_603511 != nil:
    section.add "SnapshotRetentionLimit", valid_603511
  var valid_603512 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = newJString("SET"))
  if valid_603512 != nil:
    section.add "AuthTokenUpdateStrategy", valid_603512
  var valid_603513 = formData.getOrDefault("SnapshotWindow")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "SnapshotWindow", valid_603513
  var valid_603514 = formData.getOrDefault("CacheNodeType")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "CacheNodeType", valid_603514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603515: Call_PostModifyCacheCluster_603484; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_603515.validator(path, query, header, formData, body)
  let scheme = call_603515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603515.url(scheme.get, call_603515.host, call_603515.base,
                         call_603515.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603515, url, valid)

proc call*(call_603516: Call_PostModifyCacheCluster_603484; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_603517 = newJObject()
  var formData_603518 = newJObject()
  if SecurityGroupIds != nil:
    formData_603518.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_603518.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_603518, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_603518, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_603518, "CacheClusterId", newJString(CacheClusterId))
  add(formData_603518, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_603518, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_603518, "EngineVersion", newJString(EngineVersion))
  add(formData_603518, "AZMode", newJString(AZMode))
  add(formData_603518, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_603518, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_603518, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_603518.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_603517, "Action", newJString(Action))
  add(formData_603518, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_603518.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_603518, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_603518, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_603517, "Version", newJString(Version))
  add(formData_603518, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_603518, "CacheNodeType", newJString(CacheNodeType))
  result = call_603516.call(nil, query_603517, nil, formData_603518, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_603484(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_603485, base: "/",
    url: url_PostModifyCacheCluster_603486, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_603450 = ref object of OpenApiRestCall_601389
proc url_GetModifyCacheCluster_603452(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheCluster_603451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_603453 = query.getOrDefault("AuthToken")
  valid_603453 = validateParameter(valid_603453, JString, required = false,
                                 default = nil)
  if valid_603453 != nil:
    section.add "AuthToken", valid_603453
  var valid_603454 = query.getOrDefault("NotificationTopicStatus")
  valid_603454 = validateParameter(valid_603454, JString, required = false,
                                 default = nil)
  if valid_603454 != nil:
    section.add "NotificationTopicStatus", valid_603454
  var valid_603455 = query.getOrDefault("CacheParameterGroupName")
  valid_603455 = validateParameter(valid_603455, JString, required = false,
                                 default = nil)
  if valid_603455 != nil:
    section.add "CacheParameterGroupName", valid_603455
  var valid_603456 = query.getOrDefault("NewAvailabilityZones")
  valid_603456 = validateParameter(valid_603456, JArray, required = false,
                                 default = nil)
  if valid_603456 != nil:
    section.add "NewAvailabilityZones", valid_603456
  var valid_603457 = query.getOrDefault("AZMode")
  valid_603457 = validateParameter(valid_603457, JString, required = false,
                                 default = newJString("single-az"))
  if valid_603457 != nil:
    section.add "AZMode", valid_603457
  var valid_603458 = query.getOrDefault("NumCacheNodes")
  valid_603458 = validateParameter(valid_603458, JInt, required = false, default = nil)
  if valid_603458 != nil:
    section.add "NumCacheNodes", valid_603458
  var valid_603459 = query.getOrDefault("SnapshotRetentionLimit")
  valid_603459 = validateParameter(valid_603459, JInt, required = false, default = nil)
  if valid_603459 != nil:
    section.add "SnapshotRetentionLimit", valid_603459
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_603460 = query.getOrDefault("CacheClusterId")
  valid_603460 = validateParameter(valid_603460, JString, required = true,
                                 default = nil)
  if valid_603460 != nil:
    section.add "CacheClusterId", valid_603460
  var valid_603461 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_603461 = validateParameter(valid_603461, JArray, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "CacheNodeIdsToRemove", valid_603461
  var valid_603462 = query.getOrDefault("CacheSecurityGroupNames")
  valid_603462 = validateParameter(valid_603462, JArray, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "CacheSecurityGroupNames", valid_603462
  var valid_603463 = query.getOrDefault("CacheNodeType")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "CacheNodeType", valid_603463
  var valid_603464 = query.getOrDefault("EngineVersion")
  valid_603464 = validateParameter(valid_603464, JString, required = false,
                                 default = nil)
  if valid_603464 != nil:
    section.add "EngineVersion", valid_603464
  var valid_603465 = query.getOrDefault("Action")
  valid_603465 = validateParameter(valid_603465, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_603465 != nil:
    section.add "Action", valid_603465
  var valid_603466 = query.getOrDefault("ApplyImmediately")
  valid_603466 = validateParameter(valid_603466, JBool, required = false, default = nil)
  if valid_603466 != nil:
    section.add "ApplyImmediately", valid_603466
  var valid_603467 = query.getOrDefault("NotificationTopicArn")
  valid_603467 = validateParameter(valid_603467, JString, required = false,
                                 default = nil)
  if valid_603467 != nil:
    section.add "NotificationTopicArn", valid_603467
  var valid_603468 = query.getOrDefault("Version")
  valid_603468 = validateParameter(valid_603468, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603468 != nil:
    section.add "Version", valid_603468
  var valid_603469 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_603469 = validateParameter(valid_603469, JString, required = false,
                                 default = nil)
  if valid_603469 != nil:
    section.add "PreferredMaintenanceWindow", valid_603469
  var valid_603470 = query.getOrDefault("SnapshotWindow")
  valid_603470 = validateParameter(valid_603470, JString, required = false,
                                 default = nil)
  if valid_603470 != nil:
    section.add "SnapshotWindow", valid_603470
  var valid_603471 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_603471 = validateParameter(valid_603471, JBool, required = false, default = nil)
  if valid_603471 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603471
  var valid_603472 = query.getOrDefault("SecurityGroupIds")
  valid_603472 = validateParameter(valid_603472, JArray, required = false,
                                 default = nil)
  if valid_603472 != nil:
    section.add "SecurityGroupIds", valid_603472
  var valid_603473 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_603473 = validateParameter(valid_603473, JString, required = false,
                                 default = newJString("SET"))
  if valid_603473 != nil:
    section.add "AuthTokenUpdateStrategy", valid_603473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603474 = header.getOrDefault("X-Amz-Signature")
  valid_603474 = validateParameter(valid_603474, JString, required = false,
                                 default = nil)
  if valid_603474 != nil:
    section.add "X-Amz-Signature", valid_603474
  var valid_603475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603475 = validateParameter(valid_603475, JString, required = false,
                                 default = nil)
  if valid_603475 != nil:
    section.add "X-Amz-Content-Sha256", valid_603475
  var valid_603476 = header.getOrDefault("X-Amz-Date")
  valid_603476 = validateParameter(valid_603476, JString, required = false,
                                 default = nil)
  if valid_603476 != nil:
    section.add "X-Amz-Date", valid_603476
  var valid_603477 = header.getOrDefault("X-Amz-Credential")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Credential", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-Security-Token")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-Security-Token", valid_603478
  var valid_603479 = header.getOrDefault("X-Amz-Algorithm")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-Algorithm", valid_603479
  var valid_603480 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603480 = validateParameter(valid_603480, JString, required = false,
                                 default = nil)
  if valid_603480 != nil:
    section.add "X-Amz-SignedHeaders", valid_603480
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603481: Call_GetModifyCacheCluster_603450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_603481.validator(path, query, header, formData, body)
  let scheme = call_603481.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603481.url(scheme.get, call_603481.host, call_603481.base,
                         call_603481.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603481, url, valid)

proc call*(call_603482: Call_GetModifyCacheCluster_603450; CacheClusterId: string;
          AuthToken: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_603483 = newJObject()
  add(query_603483, "AuthToken", newJString(AuthToken))
  add(query_603483, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_603483, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_603483.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_603483, "AZMode", newJString(AZMode))
  add(query_603483, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_603483, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_603483, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_603483.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_603483.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_603483, "CacheNodeType", newJString(CacheNodeType))
  add(query_603483, "EngineVersion", newJString(EngineVersion))
  add(query_603483, "Action", newJString(Action))
  add(query_603483, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603483, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_603483, "Version", newJString(Version))
  add(query_603483, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_603483, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_603483, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_603483.add "SecurityGroupIds", SecurityGroupIds
  add(query_603483, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_603482.call(nil, query_603483, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_603450(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_603451, base: "/",
    url: url_GetModifyCacheCluster_603452, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_603536 = ref object of OpenApiRestCall_601389
proc url_PostModifyCacheParameterGroup_603538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheParameterGroup_603537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603539 = query.getOrDefault("Action")
  valid_603539 = validateParameter(valid_603539, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_603539 != nil:
    section.add "Action", valid_603539
  var valid_603540 = query.getOrDefault("Version")
  valid_603540 = validateParameter(valid_603540, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603540 != nil:
    section.add "Version", valid_603540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603541 = header.getOrDefault("X-Amz-Signature")
  valid_603541 = validateParameter(valid_603541, JString, required = false,
                                 default = nil)
  if valid_603541 != nil:
    section.add "X-Amz-Signature", valid_603541
  var valid_603542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603542 = validateParameter(valid_603542, JString, required = false,
                                 default = nil)
  if valid_603542 != nil:
    section.add "X-Amz-Content-Sha256", valid_603542
  var valid_603543 = header.getOrDefault("X-Amz-Date")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-Date", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Credential")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Credential", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Security-Token")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Security-Token", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Algorithm")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Algorithm", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-SignedHeaders", valid_603547
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_603548 = formData.getOrDefault("CacheParameterGroupName")
  valid_603548 = validateParameter(valid_603548, JString, required = true,
                                 default = nil)
  if valid_603548 != nil:
    section.add "CacheParameterGroupName", valid_603548
  var valid_603549 = formData.getOrDefault("ParameterNameValues")
  valid_603549 = validateParameter(valid_603549, JArray, required = true, default = nil)
  if valid_603549 != nil:
    section.add "ParameterNameValues", valid_603549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603550: Call_PostModifyCacheParameterGroup_603536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_603550.validator(path, query, header, formData, body)
  let scheme = call_603550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603550.url(scheme.get, call_603550.host, call_603550.base,
                         call_603550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603550, url, valid)

proc call*(call_603551: Call_PostModifyCacheParameterGroup_603536;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_603552 = newJObject()
  var formData_603553 = newJObject()
  add(formData_603553, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_603552, "Action", newJString(Action))
  add(query_603552, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_603553.add "ParameterNameValues", ParameterNameValues
  result = call_603551.call(nil, query_603552, nil, formData_603553, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_603536(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_603537, base: "/",
    url: url_PostModifyCacheParameterGroup_603538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_603519 = ref object of OpenApiRestCall_601389
proc url_GetModifyCacheParameterGroup_603521(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheParameterGroup_603520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_603522 = query.getOrDefault("CacheParameterGroupName")
  valid_603522 = validateParameter(valid_603522, JString, required = true,
                                 default = nil)
  if valid_603522 != nil:
    section.add "CacheParameterGroupName", valid_603522
  var valid_603523 = query.getOrDefault("ParameterNameValues")
  valid_603523 = validateParameter(valid_603523, JArray, required = true, default = nil)
  if valid_603523 != nil:
    section.add "ParameterNameValues", valid_603523
  var valid_603524 = query.getOrDefault("Action")
  valid_603524 = validateParameter(valid_603524, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_603524 != nil:
    section.add "Action", valid_603524
  var valid_603525 = query.getOrDefault("Version")
  valid_603525 = validateParameter(valid_603525, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603525 != nil:
    section.add "Version", valid_603525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603526 = header.getOrDefault("X-Amz-Signature")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Signature", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Content-Sha256", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Date")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Date", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Credential")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Credential", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Security-Token")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Security-Token", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Algorithm")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Algorithm", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-SignedHeaders", valid_603532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603533: Call_GetModifyCacheParameterGroup_603519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_603533.validator(path, query, header, formData, body)
  let scheme = call_603533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603533.url(scheme.get, call_603533.host, call_603533.base,
                         call_603533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603533, url, valid)

proc call*(call_603534: Call_GetModifyCacheParameterGroup_603519;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603535 = newJObject()
  add(query_603535, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_603535.add "ParameterNameValues", ParameterNameValues
  add(query_603535, "Action", newJString(Action))
  add(query_603535, "Version", newJString(Version))
  result = call_603534.call(nil, query_603535, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_603519(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_603520, base: "/",
    url: url_GetModifyCacheParameterGroup_603521,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_603572 = ref object of OpenApiRestCall_601389
proc url_PostModifyCacheSubnetGroup_603574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheSubnetGroup_603573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603575 = query.getOrDefault("Action")
  valid_603575 = validateParameter(valid_603575, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_603575 != nil:
    section.add "Action", valid_603575
  var valid_603576 = query.getOrDefault("Version")
  valid_603576 = validateParameter(valid_603576, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603576 != nil:
    section.add "Version", valid_603576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603577 = header.getOrDefault("X-Amz-Signature")
  valid_603577 = validateParameter(valid_603577, JString, required = false,
                                 default = nil)
  if valid_603577 != nil:
    section.add "X-Amz-Signature", valid_603577
  var valid_603578 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "X-Amz-Content-Sha256", valid_603578
  var valid_603579 = header.getOrDefault("X-Amz-Date")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "X-Amz-Date", valid_603579
  var valid_603580 = header.getOrDefault("X-Amz-Credential")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-Credential", valid_603580
  var valid_603581 = header.getOrDefault("X-Amz-Security-Token")
  valid_603581 = validateParameter(valid_603581, JString, required = false,
                                 default = nil)
  if valid_603581 != nil:
    section.add "X-Amz-Security-Token", valid_603581
  var valid_603582 = header.getOrDefault("X-Amz-Algorithm")
  valid_603582 = validateParameter(valid_603582, JString, required = false,
                                 default = nil)
  if valid_603582 != nil:
    section.add "X-Amz-Algorithm", valid_603582
  var valid_603583 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-SignedHeaders", valid_603583
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_603584 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_603584 = validateParameter(valid_603584, JString, required = false,
                                 default = nil)
  if valid_603584 != nil:
    section.add "CacheSubnetGroupDescription", valid_603584
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_603585 = formData.getOrDefault("CacheSubnetGroupName")
  valid_603585 = validateParameter(valid_603585, JString, required = true,
                                 default = nil)
  if valid_603585 != nil:
    section.add "CacheSubnetGroupName", valid_603585
  var valid_603586 = formData.getOrDefault("SubnetIds")
  valid_603586 = validateParameter(valid_603586, JArray, required = false,
                                 default = nil)
  if valid_603586 != nil:
    section.add "SubnetIds", valid_603586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603587: Call_PostModifyCacheSubnetGroup_603572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_603587.validator(path, query, header, formData, body)
  let scheme = call_603587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603587.url(scheme.get, call_603587.host, call_603587.base,
                         call_603587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603587, url, valid)

proc call*(call_603588: Call_PostModifyCacheSubnetGroup_603572;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_603589 = newJObject()
  var formData_603590 = newJObject()
  add(formData_603590, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_603590, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_603589, "Action", newJString(Action))
  add(query_603589, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_603590.add "SubnetIds", SubnetIds
  result = call_603588.call(nil, query_603589, nil, formData_603590, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_603572(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_603573, base: "/",
    url: url_PostModifyCacheSubnetGroup_603574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_603554 = ref object of OpenApiRestCall_601389
proc url_GetModifyCacheSubnetGroup_603556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheSubnetGroup_603555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603557 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_603557 = validateParameter(valid_603557, JString, required = false,
                                 default = nil)
  if valid_603557 != nil:
    section.add "CacheSubnetGroupDescription", valid_603557
  var valid_603558 = query.getOrDefault("SubnetIds")
  valid_603558 = validateParameter(valid_603558, JArray, required = false,
                                 default = nil)
  if valid_603558 != nil:
    section.add "SubnetIds", valid_603558
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603559 = query.getOrDefault("Action")
  valid_603559 = validateParameter(valid_603559, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_603559 != nil:
    section.add "Action", valid_603559
  var valid_603560 = query.getOrDefault("CacheSubnetGroupName")
  valid_603560 = validateParameter(valid_603560, JString, required = true,
                                 default = nil)
  if valid_603560 != nil:
    section.add "CacheSubnetGroupName", valid_603560
  var valid_603561 = query.getOrDefault("Version")
  valid_603561 = validateParameter(valid_603561, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603561 != nil:
    section.add "Version", valid_603561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603562 = header.getOrDefault("X-Amz-Signature")
  valid_603562 = validateParameter(valid_603562, JString, required = false,
                                 default = nil)
  if valid_603562 != nil:
    section.add "X-Amz-Signature", valid_603562
  var valid_603563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "X-Amz-Content-Sha256", valid_603563
  var valid_603564 = header.getOrDefault("X-Amz-Date")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "X-Amz-Date", valid_603564
  var valid_603565 = header.getOrDefault("X-Amz-Credential")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "X-Amz-Credential", valid_603565
  var valid_603566 = header.getOrDefault("X-Amz-Security-Token")
  valid_603566 = validateParameter(valid_603566, JString, required = false,
                                 default = nil)
  if valid_603566 != nil:
    section.add "X-Amz-Security-Token", valid_603566
  var valid_603567 = header.getOrDefault("X-Amz-Algorithm")
  valid_603567 = validateParameter(valid_603567, JString, required = false,
                                 default = nil)
  if valid_603567 != nil:
    section.add "X-Amz-Algorithm", valid_603567
  var valid_603568 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-SignedHeaders", valid_603568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603569: Call_GetModifyCacheSubnetGroup_603554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_603569.validator(path, query, header, formData, body)
  let scheme = call_603569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603569.url(scheme.get, call_603569.host, call_603569.base,
                         call_603569.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603569, url, valid)

proc call*(call_603570: Call_GetModifyCacheSubnetGroup_603554;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_603571 = newJObject()
  add(query_603571, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_603571.add "SubnetIds", SubnetIds
  add(query_603571, "Action", newJString(Action))
  add(query_603571, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_603571, "Version", newJString(Version))
  result = call_603570.call(nil, query_603571, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_603554(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_603555, base: "/",
    url: url_GetModifyCacheSubnetGroup_603556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_603626 = ref object of OpenApiRestCall_601389
proc url_PostModifyReplicationGroup_603628(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroup_603627(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603629 = query.getOrDefault("Action")
  valid_603629 = validateParameter(valid_603629, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_603629 != nil:
    section.add "Action", valid_603629
  var valid_603630 = query.getOrDefault("Version")
  valid_603630 = validateParameter(valid_603630, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603630 != nil:
    section.add "Version", valid_603630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603631 = header.getOrDefault("X-Amz-Signature")
  valid_603631 = validateParameter(valid_603631, JString, required = false,
                                 default = nil)
  if valid_603631 != nil:
    section.add "X-Amz-Signature", valid_603631
  var valid_603632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603632 = validateParameter(valid_603632, JString, required = false,
                                 default = nil)
  if valid_603632 != nil:
    section.add "X-Amz-Content-Sha256", valid_603632
  var valid_603633 = header.getOrDefault("X-Amz-Date")
  valid_603633 = validateParameter(valid_603633, JString, required = false,
                                 default = nil)
  if valid_603633 != nil:
    section.add "X-Amz-Date", valid_603633
  var valid_603634 = header.getOrDefault("X-Amz-Credential")
  valid_603634 = validateParameter(valid_603634, JString, required = false,
                                 default = nil)
  if valid_603634 != nil:
    section.add "X-Amz-Credential", valid_603634
  var valid_603635 = header.getOrDefault("X-Amz-Security-Token")
  valid_603635 = validateParameter(valid_603635, JString, required = false,
                                 default = nil)
  if valid_603635 != nil:
    section.add "X-Amz-Security-Token", valid_603635
  var valid_603636 = header.getOrDefault("X-Amz-Algorithm")
  valid_603636 = validateParameter(valid_603636, JString, required = false,
                                 default = nil)
  if valid_603636 != nil:
    section.add "X-Amz-Algorithm", valid_603636
  var valid_603637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603637 = validateParameter(valid_603637, JString, required = false,
                                 default = nil)
  if valid_603637 != nil:
    section.add "X-Amz-SignedHeaders", valid_603637
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_603638 = formData.getOrDefault("SecurityGroupIds")
  valid_603638 = validateParameter(valid_603638, JArray, required = false,
                                 default = nil)
  if valid_603638 != nil:
    section.add "SecurityGroupIds", valid_603638
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_603639 = formData.getOrDefault("ReplicationGroupId")
  valid_603639 = validateParameter(valid_603639, JString, required = true,
                                 default = nil)
  if valid_603639 != nil:
    section.add "ReplicationGroupId", valid_603639
  var valid_603640 = formData.getOrDefault("NodeGroupId")
  valid_603640 = validateParameter(valid_603640, JString, required = false,
                                 default = nil)
  if valid_603640 != nil:
    section.add "NodeGroupId", valid_603640
  var valid_603641 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_603641 = validateParameter(valid_603641, JString, required = false,
                                 default = nil)
  if valid_603641 != nil:
    section.add "PreferredMaintenanceWindow", valid_603641
  var valid_603642 = formData.getOrDefault("PrimaryClusterId")
  valid_603642 = validateParameter(valid_603642, JString, required = false,
                                 default = nil)
  if valid_603642 != nil:
    section.add "PrimaryClusterId", valid_603642
  var valid_603643 = formData.getOrDefault("NotificationTopicStatus")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "NotificationTopicStatus", valid_603643
  var valid_603644 = formData.getOrDefault("NotificationTopicArn")
  valid_603644 = validateParameter(valid_603644, JString, required = false,
                                 default = nil)
  if valid_603644 != nil:
    section.add "NotificationTopicArn", valid_603644
  var valid_603645 = formData.getOrDefault("EngineVersion")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "EngineVersion", valid_603645
  var valid_603646 = formData.getOrDefault("SnapshottingClusterId")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "SnapshottingClusterId", valid_603646
  var valid_603647 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_603647 = validateParameter(valid_603647, JBool, required = false, default = nil)
  if valid_603647 != nil:
    section.add "AutomaticFailoverEnabled", valid_603647
  var valid_603648 = formData.getOrDefault("CacheParameterGroupName")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "CacheParameterGroupName", valid_603648
  var valid_603649 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_603649 = validateParameter(valid_603649, JBool, required = false, default = nil)
  if valid_603649 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603649
  var valid_603650 = formData.getOrDefault("ApplyImmediately")
  valid_603650 = validateParameter(valid_603650, JBool, required = false, default = nil)
  if valid_603650 != nil:
    section.add "ApplyImmediately", valid_603650
  var valid_603651 = formData.getOrDefault("AuthToken")
  valid_603651 = validateParameter(valid_603651, JString, required = false,
                                 default = nil)
  if valid_603651 != nil:
    section.add "AuthToken", valid_603651
  var valid_603652 = formData.getOrDefault("ReplicationGroupDescription")
  valid_603652 = validateParameter(valid_603652, JString, required = false,
                                 default = nil)
  if valid_603652 != nil:
    section.add "ReplicationGroupDescription", valid_603652
  var valid_603653 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_603653 = validateParameter(valid_603653, JArray, required = false,
                                 default = nil)
  if valid_603653 != nil:
    section.add "CacheSecurityGroupNames", valid_603653
  var valid_603654 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_603654 = validateParameter(valid_603654, JInt, required = false, default = nil)
  if valid_603654 != nil:
    section.add "SnapshotRetentionLimit", valid_603654
  var valid_603655 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_603655 = validateParameter(valid_603655, JString, required = false,
                                 default = newJString("SET"))
  if valid_603655 != nil:
    section.add "AuthTokenUpdateStrategy", valid_603655
  var valid_603656 = formData.getOrDefault("SnapshotWindow")
  valid_603656 = validateParameter(valid_603656, JString, required = false,
                                 default = nil)
  if valid_603656 != nil:
    section.add "SnapshotWindow", valid_603656
  var valid_603657 = formData.getOrDefault("CacheNodeType")
  valid_603657 = validateParameter(valid_603657, JString, required = false,
                                 default = nil)
  if valid_603657 != nil:
    section.add "CacheNodeType", valid_603657
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603658: Call_PostModifyReplicationGroup_603626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603658.validator(path, query, header, formData, body)
  let scheme = call_603658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603658.url(scheme.get, call_603658.host, call_603658.base,
                         call_603658.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603658, url, valid)

proc call*(call_603659: Call_PostModifyReplicationGroup_603626;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          NodeGroupId: string = ""; PreferredMaintenanceWindow: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup"; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_603660 = newJObject()
  var formData_603661 = newJObject()
  if SecurityGroupIds != nil:
    formData_603661.add "SecurityGroupIds", SecurityGroupIds
  add(formData_603661, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_603661, "NodeGroupId", newJString(NodeGroupId))
  add(formData_603661, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_603661, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_603661, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_603661, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_603661, "EngineVersion", newJString(EngineVersion))
  add(formData_603661, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_603661, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_603661, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_603661, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_603661, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603660, "Action", newJString(Action))
  add(formData_603661, "AuthToken", newJString(AuthToken))
  add(formData_603661, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_603661.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_603661, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_603661, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_603660, "Version", newJString(Version))
  add(formData_603661, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_603661, "CacheNodeType", newJString(CacheNodeType))
  result = call_603659.call(nil, query_603660, nil, formData_603661, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_603626(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_603627, base: "/",
    url: url_PostModifyReplicationGroup_603628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_603591 = ref object of OpenApiRestCall_601389
proc url_GetModifyReplicationGroup_603593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroup_603592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_603594 = query.getOrDefault("AuthToken")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "AuthToken", valid_603594
  var valid_603595 = query.getOrDefault("ReplicationGroupDescription")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "ReplicationGroupDescription", valid_603595
  var valid_603596 = query.getOrDefault("NotificationTopicStatus")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "NotificationTopicStatus", valid_603596
  var valid_603597 = query.getOrDefault("CacheParameterGroupName")
  valid_603597 = validateParameter(valid_603597, JString, required = false,
                                 default = nil)
  if valid_603597 != nil:
    section.add "CacheParameterGroupName", valid_603597
  var valid_603598 = query.getOrDefault("SnapshotRetentionLimit")
  valid_603598 = validateParameter(valid_603598, JInt, required = false, default = nil)
  if valid_603598 != nil:
    section.add "SnapshotRetentionLimit", valid_603598
  var valid_603599 = query.getOrDefault("SnapshottingClusterId")
  valid_603599 = validateParameter(valid_603599, JString, required = false,
                                 default = nil)
  if valid_603599 != nil:
    section.add "SnapshottingClusterId", valid_603599
  var valid_603600 = query.getOrDefault("CacheSecurityGroupNames")
  valid_603600 = validateParameter(valid_603600, JArray, required = false,
                                 default = nil)
  if valid_603600 != nil:
    section.add "CacheSecurityGroupNames", valid_603600
  var valid_603601 = query.getOrDefault("PrimaryClusterId")
  valid_603601 = validateParameter(valid_603601, JString, required = false,
                                 default = nil)
  if valid_603601 != nil:
    section.add "PrimaryClusterId", valid_603601
  var valid_603602 = query.getOrDefault("CacheNodeType")
  valid_603602 = validateParameter(valid_603602, JString, required = false,
                                 default = nil)
  if valid_603602 != nil:
    section.add "CacheNodeType", valid_603602
  var valid_603603 = query.getOrDefault("EngineVersion")
  valid_603603 = validateParameter(valid_603603, JString, required = false,
                                 default = nil)
  if valid_603603 != nil:
    section.add "EngineVersion", valid_603603
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603604 = query.getOrDefault("Action")
  valid_603604 = validateParameter(valid_603604, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_603604 != nil:
    section.add "Action", valid_603604
  var valid_603605 = query.getOrDefault("ApplyImmediately")
  valid_603605 = validateParameter(valid_603605, JBool, required = false, default = nil)
  if valid_603605 != nil:
    section.add "ApplyImmediately", valid_603605
  var valid_603606 = query.getOrDefault("ReplicationGroupId")
  valid_603606 = validateParameter(valid_603606, JString, required = true,
                                 default = nil)
  if valid_603606 != nil:
    section.add "ReplicationGroupId", valid_603606
  var valid_603607 = query.getOrDefault("NotificationTopicArn")
  valid_603607 = validateParameter(valid_603607, JString, required = false,
                                 default = nil)
  if valid_603607 != nil:
    section.add "NotificationTopicArn", valid_603607
  var valid_603608 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_603608 = validateParameter(valid_603608, JBool, required = false, default = nil)
  if valid_603608 != nil:
    section.add "AutomaticFailoverEnabled", valid_603608
  var valid_603609 = query.getOrDefault("Version")
  valid_603609 = validateParameter(valid_603609, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603609 != nil:
    section.add "Version", valid_603609
  var valid_603610 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_603610 = validateParameter(valid_603610, JString, required = false,
                                 default = nil)
  if valid_603610 != nil:
    section.add "PreferredMaintenanceWindow", valid_603610
  var valid_603611 = query.getOrDefault("SnapshotWindow")
  valid_603611 = validateParameter(valid_603611, JString, required = false,
                                 default = nil)
  if valid_603611 != nil:
    section.add "SnapshotWindow", valid_603611
  var valid_603612 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_603612 = validateParameter(valid_603612, JBool, required = false, default = nil)
  if valid_603612 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603612
  var valid_603613 = query.getOrDefault("SecurityGroupIds")
  valid_603613 = validateParameter(valid_603613, JArray, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "SecurityGroupIds", valid_603613
  var valid_603614 = query.getOrDefault("NodeGroupId")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "NodeGroupId", valid_603614
  var valid_603615 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = newJString("SET"))
  if valid_603615 != nil:
    section.add "AuthTokenUpdateStrategy", valid_603615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603616 = header.getOrDefault("X-Amz-Signature")
  valid_603616 = validateParameter(valid_603616, JString, required = false,
                                 default = nil)
  if valid_603616 != nil:
    section.add "X-Amz-Signature", valid_603616
  var valid_603617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603617 = validateParameter(valid_603617, JString, required = false,
                                 default = nil)
  if valid_603617 != nil:
    section.add "X-Amz-Content-Sha256", valid_603617
  var valid_603618 = header.getOrDefault("X-Amz-Date")
  valid_603618 = validateParameter(valid_603618, JString, required = false,
                                 default = nil)
  if valid_603618 != nil:
    section.add "X-Amz-Date", valid_603618
  var valid_603619 = header.getOrDefault("X-Amz-Credential")
  valid_603619 = validateParameter(valid_603619, JString, required = false,
                                 default = nil)
  if valid_603619 != nil:
    section.add "X-Amz-Credential", valid_603619
  var valid_603620 = header.getOrDefault("X-Amz-Security-Token")
  valid_603620 = validateParameter(valid_603620, JString, required = false,
                                 default = nil)
  if valid_603620 != nil:
    section.add "X-Amz-Security-Token", valid_603620
  var valid_603621 = header.getOrDefault("X-Amz-Algorithm")
  valid_603621 = validateParameter(valid_603621, JString, required = false,
                                 default = nil)
  if valid_603621 != nil:
    section.add "X-Amz-Algorithm", valid_603621
  var valid_603622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603622 = validateParameter(valid_603622, JString, required = false,
                                 default = nil)
  if valid_603622 != nil:
    section.add "X-Amz-SignedHeaders", valid_603622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603623: Call_GetModifyReplicationGroup_603591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_603623.validator(path, query, header, formData, body)
  let scheme = call_603623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603623.url(scheme.get, call_603623.host, call_603623.base,
                         call_603623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603623, url, valid)

proc call*(call_603624: Call_GetModifyReplicationGroup_603591;
          ReplicationGroupId: string; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = "";
          AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_603625 = newJObject()
  add(query_603625, "AuthToken", newJString(AuthToken))
  add(query_603625, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_603625, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_603625, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_603625, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_603625, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_603625.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_603625, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_603625, "CacheNodeType", newJString(CacheNodeType))
  add(query_603625, "EngineVersion", newJString(EngineVersion))
  add(query_603625, "Action", newJString(Action))
  add(query_603625, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603625, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603625, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_603625, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_603625, "Version", newJString(Version))
  add(query_603625, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_603625, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_603625, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_603625.add "SecurityGroupIds", SecurityGroupIds
  add(query_603625, "NodeGroupId", newJString(NodeGroupId))
  add(query_603625, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_603624.call(nil, query_603625, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_603591(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_603592, base: "/",
    url: url_GetModifyReplicationGroup_603593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_603683 = ref object of OpenApiRestCall_601389
proc url_PostModifyReplicationGroupShardConfiguration_603685(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_603684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603686 = query.getOrDefault("Action")
  valid_603686 = validateParameter(valid_603686, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_603686 != nil:
    section.add "Action", valid_603686
  var valid_603687 = query.getOrDefault("Version")
  valid_603687 = validateParameter(valid_603687, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603687 != nil:
    section.add "Version", valid_603687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603688 = header.getOrDefault("X-Amz-Signature")
  valid_603688 = validateParameter(valid_603688, JString, required = false,
                                 default = nil)
  if valid_603688 != nil:
    section.add "X-Amz-Signature", valid_603688
  var valid_603689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603689 = validateParameter(valid_603689, JString, required = false,
                                 default = nil)
  if valid_603689 != nil:
    section.add "X-Amz-Content-Sha256", valid_603689
  var valid_603690 = header.getOrDefault("X-Amz-Date")
  valid_603690 = validateParameter(valid_603690, JString, required = false,
                                 default = nil)
  if valid_603690 != nil:
    section.add "X-Amz-Date", valid_603690
  var valid_603691 = header.getOrDefault("X-Amz-Credential")
  valid_603691 = validateParameter(valid_603691, JString, required = false,
                                 default = nil)
  if valid_603691 != nil:
    section.add "X-Amz-Credential", valid_603691
  var valid_603692 = header.getOrDefault("X-Amz-Security-Token")
  valid_603692 = validateParameter(valid_603692, JString, required = false,
                                 default = nil)
  if valid_603692 != nil:
    section.add "X-Amz-Security-Token", valid_603692
  var valid_603693 = header.getOrDefault("X-Amz-Algorithm")
  valid_603693 = validateParameter(valid_603693, JString, required = false,
                                 default = nil)
  if valid_603693 != nil:
    section.add "X-Amz-Algorithm", valid_603693
  var valid_603694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603694 = validateParameter(valid_603694, JString, required = false,
                                 default = nil)
  if valid_603694 != nil:
    section.add "X-Amz-SignedHeaders", valid_603694
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_603695 = formData.getOrDefault("NodeGroupsToRemove")
  valid_603695 = validateParameter(valid_603695, JArray, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "NodeGroupsToRemove", valid_603695
  var valid_603696 = formData.getOrDefault("NodeGroupsToRetain")
  valid_603696 = validateParameter(valid_603696, JArray, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "NodeGroupsToRetain", valid_603696
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_603697 = formData.getOrDefault("NodeGroupCount")
  valid_603697 = validateParameter(valid_603697, JInt, required = true, default = nil)
  if valid_603697 != nil:
    section.add "NodeGroupCount", valid_603697
  var valid_603698 = formData.getOrDefault("ReshardingConfiguration")
  valid_603698 = validateParameter(valid_603698, JArray, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "ReshardingConfiguration", valid_603698
  var valid_603699 = formData.getOrDefault("ApplyImmediately")
  valid_603699 = validateParameter(valid_603699, JBool, required = true, default = nil)
  if valid_603699 != nil:
    section.add "ApplyImmediately", valid_603699
  var valid_603700 = formData.getOrDefault("ReplicationGroupId")
  valid_603700 = validateParameter(valid_603700, JString, required = true,
                                 default = nil)
  if valid_603700 != nil:
    section.add "ReplicationGroupId", valid_603700
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603701: Call_PostModifyReplicationGroupShardConfiguration_603683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_603701.validator(path, query, header, formData, body)
  let scheme = call_603701.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603701.url(scheme.get, call_603701.host, call_603701.base,
                         call_603701.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603701, url, valid)

proc call*(call_603702: Call_PostModifyReplicationGroupShardConfiguration_603683;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_603703 = newJObject()
  var formData_603704 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_603704.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_603704.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_603704, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_603704.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_603704, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603703, "Action", newJString(Action))
  add(query_603703, "Version", newJString(Version))
  add(formData_603704, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603702.call(nil, query_603703, nil, formData_603704, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_603683(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_603684,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_603685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_603662 = ref object of OpenApiRestCall_601389
proc url_GetModifyReplicationGroupShardConfiguration_603664(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_603663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_603665 = query.getOrDefault("ReshardingConfiguration")
  valid_603665 = validateParameter(valid_603665, JArray, required = false,
                                 default = nil)
  if valid_603665 != nil:
    section.add "ReshardingConfiguration", valid_603665
  var valid_603666 = query.getOrDefault("NodeGroupsToRemove")
  valid_603666 = validateParameter(valid_603666, JArray, required = false,
                                 default = nil)
  if valid_603666 != nil:
    section.add "NodeGroupsToRemove", valid_603666
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603667 = query.getOrDefault("Action")
  valid_603667 = validateParameter(valid_603667, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_603667 != nil:
    section.add "Action", valid_603667
  var valid_603668 = query.getOrDefault("ApplyImmediately")
  valid_603668 = validateParameter(valid_603668, JBool, required = true, default = nil)
  if valid_603668 != nil:
    section.add "ApplyImmediately", valid_603668
  var valid_603669 = query.getOrDefault("ReplicationGroupId")
  valid_603669 = validateParameter(valid_603669, JString, required = true,
                                 default = nil)
  if valid_603669 != nil:
    section.add "ReplicationGroupId", valid_603669
  var valid_603670 = query.getOrDefault("NodeGroupsToRetain")
  valid_603670 = validateParameter(valid_603670, JArray, required = false,
                                 default = nil)
  if valid_603670 != nil:
    section.add "NodeGroupsToRetain", valid_603670
  var valid_603671 = query.getOrDefault("Version")
  valid_603671 = validateParameter(valid_603671, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603671 != nil:
    section.add "Version", valid_603671
  var valid_603672 = query.getOrDefault("NodeGroupCount")
  valid_603672 = validateParameter(valid_603672, JInt, required = true, default = nil)
  if valid_603672 != nil:
    section.add "NodeGroupCount", valid_603672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603673 = header.getOrDefault("X-Amz-Signature")
  valid_603673 = validateParameter(valid_603673, JString, required = false,
                                 default = nil)
  if valid_603673 != nil:
    section.add "X-Amz-Signature", valid_603673
  var valid_603674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603674 = validateParameter(valid_603674, JString, required = false,
                                 default = nil)
  if valid_603674 != nil:
    section.add "X-Amz-Content-Sha256", valid_603674
  var valid_603675 = header.getOrDefault("X-Amz-Date")
  valid_603675 = validateParameter(valid_603675, JString, required = false,
                                 default = nil)
  if valid_603675 != nil:
    section.add "X-Amz-Date", valid_603675
  var valid_603676 = header.getOrDefault("X-Amz-Credential")
  valid_603676 = validateParameter(valid_603676, JString, required = false,
                                 default = nil)
  if valid_603676 != nil:
    section.add "X-Amz-Credential", valid_603676
  var valid_603677 = header.getOrDefault("X-Amz-Security-Token")
  valid_603677 = validateParameter(valid_603677, JString, required = false,
                                 default = nil)
  if valid_603677 != nil:
    section.add "X-Amz-Security-Token", valid_603677
  var valid_603678 = header.getOrDefault("X-Amz-Algorithm")
  valid_603678 = validateParameter(valid_603678, JString, required = false,
                                 default = nil)
  if valid_603678 != nil:
    section.add "X-Amz-Algorithm", valid_603678
  var valid_603679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603679 = validateParameter(valid_603679, JString, required = false,
                                 default = nil)
  if valid_603679 != nil:
    section.add "X-Amz-SignedHeaders", valid_603679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603680: Call_GetModifyReplicationGroupShardConfiguration_603662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_603680.validator(path, query, header, formData, body)
  let scheme = call_603680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603680.url(scheme.get, call_603680.host, call_603680.base,
                         call_603680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603680, url, valid)

proc call*(call_603681: Call_GetModifyReplicationGroupShardConfiguration_603662;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_603682 = newJObject()
  if ReshardingConfiguration != nil:
    query_603682.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_603682.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_603682, "Action", newJString(Action))
  add(query_603682, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_603682, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_603682.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_603682, "Version", newJString(Version))
  add(query_603682, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_603681.call(nil, query_603682, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_603662(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_603663,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_603664,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_603723 = ref object of OpenApiRestCall_601389
proc url_PostPurchaseReservedCacheNodesOffering_603725(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_603724(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603726 = query.getOrDefault("Action")
  valid_603726 = validateParameter(valid_603726, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_603726 != nil:
    section.add "Action", valid_603726
  var valid_603727 = query.getOrDefault("Version")
  valid_603727 = validateParameter(valid_603727, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603727 != nil:
    section.add "Version", valid_603727
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603728 = header.getOrDefault("X-Amz-Signature")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Signature", valid_603728
  var valid_603729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Content-Sha256", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-Date")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-Date", valid_603730
  var valid_603731 = header.getOrDefault("X-Amz-Credential")
  valid_603731 = validateParameter(valid_603731, JString, required = false,
                                 default = nil)
  if valid_603731 != nil:
    section.add "X-Amz-Credential", valid_603731
  var valid_603732 = header.getOrDefault("X-Amz-Security-Token")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-Security-Token", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Algorithm")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Algorithm", valid_603733
  var valid_603734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603734 = validateParameter(valid_603734, JString, required = false,
                                 default = nil)
  if valid_603734 != nil:
    section.add "X-Amz-SignedHeaders", valid_603734
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_603735 = formData.getOrDefault("CacheNodeCount")
  valid_603735 = validateParameter(valid_603735, JInt, required = false, default = nil)
  if valid_603735 != nil:
    section.add "CacheNodeCount", valid_603735
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_603736 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603736 = validateParameter(valid_603736, JString, required = true,
                                 default = nil)
  if valid_603736 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603736
  var valid_603737 = formData.getOrDefault("ReservedCacheNodeId")
  valid_603737 = validateParameter(valid_603737, JString, required = false,
                                 default = nil)
  if valid_603737 != nil:
    section.add "ReservedCacheNodeId", valid_603737
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603738: Call_PostPurchaseReservedCacheNodesOffering_603723;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_603738.validator(path, query, header, formData, body)
  let scheme = call_603738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603738.url(scheme.get, call_603738.host, call_603738.base,
                         call_603738.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603738, url, valid)

proc call*(call_603739: Call_PostPurchaseReservedCacheNodesOffering_603723;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_603740 = newJObject()
  var formData_603741 = newJObject()
  add(formData_603741, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_603740, "Action", newJString(Action))
  add(query_603740, "Version", newJString(Version))
  add(formData_603741, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_603741, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_603739.call(nil, query_603740, nil, formData_603741, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_603723(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_603724, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_603725,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_603705 = ref object of OpenApiRestCall_601389
proc url_GetPurchaseReservedCacheNodesOffering_603707(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_603706(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_603708 = query.getOrDefault("CacheNodeCount")
  valid_603708 = validateParameter(valid_603708, JInt, required = false, default = nil)
  if valid_603708 != nil:
    section.add "CacheNodeCount", valid_603708
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603709 = query.getOrDefault("Action")
  valid_603709 = validateParameter(valid_603709, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_603709 != nil:
    section.add "Action", valid_603709
  var valid_603710 = query.getOrDefault("ReservedCacheNodeId")
  valid_603710 = validateParameter(valid_603710, JString, required = false,
                                 default = nil)
  if valid_603710 != nil:
    section.add "ReservedCacheNodeId", valid_603710
  var valid_603711 = query.getOrDefault("Version")
  valid_603711 = validateParameter(valid_603711, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603711 != nil:
    section.add "Version", valid_603711
  var valid_603712 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_603712 = validateParameter(valid_603712, JString, required = true,
                                 default = nil)
  if valid_603712 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_603712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603713 = header.getOrDefault("X-Amz-Signature")
  valid_603713 = validateParameter(valid_603713, JString, required = false,
                                 default = nil)
  if valid_603713 != nil:
    section.add "X-Amz-Signature", valid_603713
  var valid_603714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "X-Amz-Content-Sha256", valid_603714
  var valid_603715 = header.getOrDefault("X-Amz-Date")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "X-Amz-Date", valid_603715
  var valid_603716 = header.getOrDefault("X-Amz-Credential")
  valid_603716 = validateParameter(valid_603716, JString, required = false,
                                 default = nil)
  if valid_603716 != nil:
    section.add "X-Amz-Credential", valid_603716
  var valid_603717 = header.getOrDefault("X-Amz-Security-Token")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-Security-Token", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Algorithm")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Algorithm", valid_603718
  var valid_603719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603719 = validateParameter(valid_603719, JString, required = false,
                                 default = nil)
  if valid_603719 != nil:
    section.add "X-Amz-SignedHeaders", valid_603719
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603720: Call_GetPurchaseReservedCacheNodesOffering_603705;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_603720.validator(path, query, header, formData, body)
  let scheme = call_603720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603720.url(scheme.get, call_603720.host, call_603720.base,
                         call_603720.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603720, url, valid)

proc call*(call_603721: Call_GetPurchaseReservedCacheNodesOffering_603705;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_603722 = newJObject()
  add(query_603722, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_603722, "Action", newJString(Action))
  add(query_603722, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_603722, "Version", newJString(Version))
  add(query_603722, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_603721.call(nil, query_603722, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_603705(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_603706, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_603707,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_603759 = ref object of OpenApiRestCall_601389
proc url_PostRebootCacheCluster_603761(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootCacheCluster_603760(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603762 = query.getOrDefault("Action")
  valid_603762 = validateParameter(valid_603762, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_603762 != nil:
    section.add "Action", valid_603762
  var valid_603763 = query.getOrDefault("Version")
  valid_603763 = validateParameter(valid_603763, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603763 != nil:
    section.add "Version", valid_603763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603764 = header.getOrDefault("X-Amz-Signature")
  valid_603764 = validateParameter(valid_603764, JString, required = false,
                                 default = nil)
  if valid_603764 != nil:
    section.add "X-Amz-Signature", valid_603764
  var valid_603765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603765 = validateParameter(valid_603765, JString, required = false,
                                 default = nil)
  if valid_603765 != nil:
    section.add "X-Amz-Content-Sha256", valid_603765
  var valid_603766 = header.getOrDefault("X-Amz-Date")
  valid_603766 = validateParameter(valid_603766, JString, required = false,
                                 default = nil)
  if valid_603766 != nil:
    section.add "X-Amz-Date", valid_603766
  var valid_603767 = header.getOrDefault("X-Amz-Credential")
  valid_603767 = validateParameter(valid_603767, JString, required = false,
                                 default = nil)
  if valid_603767 != nil:
    section.add "X-Amz-Credential", valid_603767
  var valid_603768 = header.getOrDefault("X-Amz-Security-Token")
  valid_603768 = validateParameter(valid_603768, JString, required = false,
                                 default = nil)
  if valid_603768 != nil:
    section.add "X-Amz-Security-Token", valid_603768
  var valid_603769 = header.getOrDefault("X-Amz-Algorithm")
  valid_603769 = validateParameter(valid_603769, JString, required = false,
                                 default = nil)
  if valid_603769 != nil:
    section.add "X-Amz-Algorithm", valid_603769
  var valid_603770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603770 = validateParameter(valid_603770, JString, required = false,
                                 default = nil)
  if valid_603770 != nil:
    section.add "X-Amz-SignedHeaders", valid_603770
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_603771 = formData.getOrDefault("CacheClusterId")
  valid_603771 = validateParameter(valid_603771, JString, required = true,
                                 default = nil)
  if valid_603771 != nil:
    section.add "CacheClusterId", valid_603771
  var valid_603772 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_603772 = validateParameter(valid_603772, JArray, required = true, default = nil)
  if valid_603772 != nil:
    section.add "CacheNodeIdsToReboot", valid_603772
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603773: Call_PostRebootCacheCluster_603759; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_603773.validator(path, query, header, formData, body)
  let scheme = call_603773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603773.url(scheme.get, call_603773.host, call_603773.base,
                         call_603773.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603773, url, valid)

proc call*(call_603774: Call_PostRebootCacheCluster_603759; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_603775 = newJObject()
  var formData_603776 = newJObject()
  add(formData_603776, "CacheClusterId", newJString(CacheClusterId))
  add(query_603775, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_603776.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_603775, "Version", newJString(Version))
  result = call_603774.call(nil, query_603775, nil, formData_603776, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_603759(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_603760, base: "/",
    url: url_PostRebootCacheCluster_603761, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_603742 = ref object of OpenApiRestCall_601389
proc url_GetRebootCacheCluster_603744(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootCacheCluster_603743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_603745 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_603745 = validateParameter(valid_603745, JArray, required = true, default = nil)
  if valid_603745 != nil:
    section.add "CacheNodeIdsToReboot", valid_603745
  var valid_603746 = query.getOrDefault("CacheClusterId")
  valid_603746 = validateParameter(valid_603746, JString, required = true,
                                 default = nil)
  if valid_603746 != nil:
    section.add "CacheClusterId", valid_603746
  var valid_603747 = query.getOrDefault("Action")
  valid_603747 = validateParameter(valid_603747, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_603747 != nil:
    section.add "Action", valid_603747
  var valid_603748 = query.getOrDefault("Version")
  valid_603748 = validateParameter(valid_603748, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603748 != nil:
    section.add "Version", valid_603748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603749 = header.getOrDefault("X-Amz-Signature")
  valid_603749 = validateParameter(valid_603749, JString, required = false,
                                 default = nil)
  if valid_603749 != nil:
    section.add "X-Amz-Signature", valid_603749
  var valid_603750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603750 = validateParameter(valid_603750, JString, required = false,
                                 default = nil)
  if valid_603750 != nil:
    section.add "X-Amz-Content-Sha256", valid_603750
  var valid_603751 = header.getOrDefault("X-Amz-Date")
  valid_603751 = validateParameter(valid_603751, JString, required = false,
                                 default = nil)
  if valid_603751 != nil:
    section.add "X-Amz-Date", valid_603751
  var valid_603752 = header.getOrDefault("X-Amz-Credential")
  valid_603752 = validateParameter(valid_603752, JString, required = false,
                                 default = nil)
  if valid_603752 != nil:
    section.add "X-Amz-Credential", valid_603752
  var valid_603753 = header.getOrDefault("X-Amz-Security-Token")
  valid_603753 = validateParameter(valid_603753, JString, required = false,
                                 default = nil)
  if valid_603753 != nil:
    section.add "X-Amz-Security-Token", valid_603753
  var valid_603754 = header.getOrDefault("X-Amz-Algorithm")
  valid_603754 = validateParameter(valid_603754, JString, required = false,
                                 default = nil)
  if valid_603754 != nil:
    section.add "X-Amz-Algorithm", valid_603754
  var valid_603755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603755 = validateParameter(valid_603755, JString, required = false,
                                 default = nil)
  if valid_603755 != nil:
    section.add "X-Amz-SignedHeaders", valid_603755
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603756: Call_GetRebootCacheCluster_603742; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_603756.validator(path, query, header, formData, body)
  let scheme = call_603756.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603756.url(scheme.get, call_603756.host, call_603756.base,
                         call_603756.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603756, url, valid)

proc call*(call_603757: Call_GetRebootCacheCluster_603742;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603758 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_603758.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_603758, "CacheClusterId", newJString(CacheClusterId))
  add(query_603758, "Action", newJString(Action))
  add(query_603758, "Version", newJString(Version))
  result = call_603757.call(nil, query_603758, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_603742(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_603743, base: "/",
    url: url_GetRebootCacheCluster_603744, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_603794 = ref object of OpenApiRestCall_601389
proc url_PostRemoveTagsFromResource_603796(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_603795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603797 = query.getOrDefault("Action")
  valid_603797 = validateParameter(valid_603797, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_603797 != nil:
    section.add "Action", valid_603797
  var valid_603798 = query.getOrDefault("Version")
  valid_603798 = validateParameter(valid_603798, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603798 != nil:
    section.add "Version", valid_603798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603799 = header.getOrDefault("X-Amz-Signature")
  valid_603799 = validateParameter(valid_603799, JString, required = false,
                                 default = nil)
  if valid_603799 != nil:
    section.add "X-Amz-Signature", valid_603799
  var valid_603800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603800 = validateParameter(valid_603800, JString, required = false,
                                 default = nil)
  if valid_603800 != nil:
    section.add "X-Amz-Content-Sha256", valid_603800
  var valid_603801 = header.getOrDefault("X-Amz-Date")
  valid_603801 = validateParameter(valid_603801, JString, required = false,
                                 default = nil)
  if valid_603801 != nil:
    section.add "X-Amz-Date", valid_603801
  var valid_603802 = header.getOrDefault("X-Amz-Credential")
  valid_603802 = validateParameter(valid_603802, JString, required = false,
                                 default = nil)
  if valid_603802 != nil:
    section.add "X-Amz-Credential", valid_603802
  var valid_603803 = header.getOrDefault("X-Amz-Security-Token")
  valid_603803 = validateParameter(valid_603803, JString, required = false,
                                 default = nil)
  if valid_603803 != nil:
    section.add "X-Amz-Security-Token", valid_603803
  var valid_603804 = header.getOrDefault("X-Amz-Algorithm")
  valid_603804 = validateParameter(valid_603804, JString, required = false,
                                 default = nil)
  if valid_603804 != nil:
    section.add "X-Amz-Algorithm", valid_603804
  var valid_603805 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-SignedHeaders", valid_603805
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_603806 = formData.getOrDefault("TagKeys")
  valid_603806 = validateParameter(valid_603806, JArray, required = true, default = nil)
  if valid_603806 != nil:
    section.add "TagKeys", valid_603806
  var valid_603807 = formData.getOrDefault("ResourceName")
  valid_603807 = validateParameter(valid_603807, JString, required = true,
                                 default = nil)
  if valid_603807 != nil:
    section.add "ResourceName", valid_603807
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603808: Call_PostRemoveTagsFromResource_603794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_603808.validator(path, query, header, formData, body)
  let scheme = call_603808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603808.url(scheme.get, call_603808.host, call_603808.base,
                         call_603808.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603808, url, valid)

proc call*(call_603809: Call_PostRemoveTagsFromResource_603794; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_603810 = newJObject()
  var formData_603811 = newJObject()
  if TagKeys != nil:
    formData_603811.add "TagKeys", TagKeys
  add(query_603810, "Action", newJString(Action))
  add(query_603810, "Version", newJString(Version))
  add(formData_603811, "ResourceName", newJString(ResourceName))
  result = call_603809.call(nil, query_603810, nil, formData_603811, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_603794(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_603795, base: "/",
    url: url_PostRemoveTagsFromResource_603796,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_603777 = ref object of OpenApiRestCall_601389
proc url_GetRemoveTagsFromResource_603779(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_603778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_603780 = query.getOrDefault("ResourceName")
  valid_603780 = validateParameter(valid_603780, JString, required = true,
                                 default = nil)
  if valid_603780 != nil:
    section.add "ResourceName", valid_603780
  var valid_603781 = query.getOrDefault("TagKeys")
  valid_603781 = validateParameter(valid_603781, JArray, required = true, default = nil)
  if valid_603781 != nil:
    section.add "TagKeys", valid_603781
  var valid_603782 = query.getOrDefault("Action")
  valid_603782 = validateParameter(valid_603782, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_603782 != nil:
    section.add "Action", valid_603782
  var valid_603783 = query.getOrDefault("Version")
  valid_603783 = validateParameter(valid_603783, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603783 != nil:
    section.add "Version", valid_603783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603784 = header.getOrDefault("X-Amz-Signature")
  valid_603784 = validateParameter(valid_603784, JString, required = false,
                                 default = nil)
  if valid_603784 != nil:
    section.add "X-Amz-Signature", valid_603784
  var valid_603785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603785 = validateParameter(valid_603785, JString, required = false,
                                 default = nil)
  if valid_603785 != nil:
    section.add "X-Amz-Content-Sha256", valid_603785
  var valid_603786 = header.getOrDefault("X-Amz-Date")
  valid_603786 = validateParameter(valid_603786, JString, required = false,
                                 default = nil)
  if valid_603786 != nil:
    section.add "X-Amz-Date", valid_603786
  var valid_603787 = header.getOrDefault("X-Amz-Credential")
  valid_603787 = validateParameter(valid_603787, JString, required = false,
                                 default = nil)
  if valid_603787 != nil:
    section.add "X-Amz-Credential", valid_603787
  var valid_603788 = header.getOrDefault("X-Amz-Security-Token")
  valid_603788 = validateParameter(valid_603788, JString, required = false,
                                 default = nil)
  if valid_603788 != nil:
    section.add "X-Amz-Security-Token", valid_603788
  var valid_603789 = header.getOrDefault("X-Amz-Algorithm")
  valid_603789 = validateParameter(valid_603789, JString, required = false,
                                 default = nil)
  if valid_603789 != nil:
    section.add "X-Amz-Algorithm", valid_603789
  var valid_603790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603790 = validateParameter(valid_603790, JString, required = false,
                                 default = nil)
  if valid_603790 != nil:
    section.add "X-Amz-SignedHeaders", valid_603790
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603791: Call_GetRemoveTagsFromResource_603777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_603791.validator(path, query, header, formData, body)
  let scheme = call_603791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603791.url(scheme.get, call_603791.host, call_603791.base,
                         call_603791.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603791, url, valid)

proc call*(call_603792: Call_GetRemoveTagsFromResource_603777;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603793 = newJObject()
  add(query_603793, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_603793.add "TagKeys", TagKeys
  add(query_603793, "Action", newJString(Action))
  add(query_603793, "Version", newJString(Version))
  result = call_603792.call(nil, query_603793, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_603777(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_603778, base: "/",
    url: url_GetRemoveTagsFromResource_603779,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_603830 = ref object of OpenApiRestCall_601389
proc url_PostResetCacheParameterGroup_603832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetCacheParameterGroup_603831(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603833 = query.getOrDefault("Action")
  valid_603833 = validateParameter(valid_603833, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_603833 != nil:
    section.add "Action", valid_603833
  var valid_603834 = query.getOrDefault("Version")
  valid_603834 = validateParameter(valid_603834, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603834 != nil:
    section.add "Version", valid_603834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603835 = header.getOrDefault("X-Amz-Signature")
  valid_603835 = validateParameter(valid_603835, JString, required = false,
                                 default = nil)
  if valid_603835 != nil:
    section.add "X-Amz-Signature", valid_603835
  var valid_603836 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603836 = validateParameter(valid_603836, JString, required = false,
                                 default = nil)
  if valid_603836 != nil:
    section.add "X-Amz-Content-Sha256", valid_603836
  var valid_603837 = header.getOrDefault("X-Amz-Date")
  valid_603837 = validateParameter(valid_603837, JString, required = false,
                                 default = nil)
  if valid_603837 != nil:
    section.add "X-Amz-Date", valid_603837
  var valid_603838 = header.getOrDefault("X-Amz-Credential")
  valid_603838 = validateParameter(valid_603838, JString, required = false,
                                 default = nil)
  if valid_603838 != nil:
    section.add "X-Amz-Credential", valid_603838
  var valid_603839 = header.getOrDefault("X-Amz-Security-Token")
  valid_603839 = validateParameter(valid_603839, JString, required = false,
                                 default = nil)
  if valid_603839 != nil:
    section.add "X-Amz-Security-Token", valid_603839
  var valid_603840 = header.getOrDefault("X-Amz-Algorithm")
  valid_603840 = validateParameter(valid_603840, JString, required = false,
                                 default = nil)
  if valid_603840 != nil:
    section.add "X-Amz-Algorithm", valid_603840
  var valid_603841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603841 = validateParameter(valid_603841, JString, required = false,
                                 default = nil)
  if valid_603841 != nil:
    section.add "X-Amz-SignedHeaders", valid_603841
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_603842 = formData.getOrDefault("ResetAllParameters")
  valid_603842 = validateParameter(valid_603842, JBool, required = false, default = nil)
  if valid_603842 != nil:
    section.add "ResetAllParameters", valid_603842
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_603843 = formData.getOrDefault("CacheParameterGroupName")
  valid_603843 = validateParameter(valid_603843, JString, required = true,
                                 default = nil)
  if valid_603843 != nil:
    section.add "CacheParameterGroupName", valid_603843
  var valid_603844 = formData.getOrDefault("ParameterNameValues")
  valid_603844 = validateParameter(valid_603844, JArray, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "ParameterNameValues", valid_603844
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603845: Call_PostResetCacheParameterGroup_603830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_603845.validator(path, query, header, formData, body)
  let scheme = call_603845.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603845.url(scheme.get, call_603845.host, call_603845.base,
                         call_603845.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603845, url, valid)

proc call*(call_603846: Call_PostResetCacheParameterGroup_603830;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_603847 = newJObject()
  var formData_603848 = newJObject()
  add(formData_603848, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_603848, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_603847, "Action", newJString(Action))
  add(query_603847, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_603848.add "ParameterNameValues", ParameterNameValues
  result = call_603846.call(nil, query_603847, nil, formData_603848, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_603830(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_603831, base: "/",
    url: url_PostResetCacheParameterGroup_603832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_603812 = ref object of OpenApiRestCall_601389
proc url_GetResetCacheParameterGroup_603814(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetCacheParameterGroup_603813(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_603815 = query.getOrDefault("CacheParameterGroupName")
  valid_603815 = validateParameter(valid_603815, JString, required = true,
                                 default = nil)
  if valid_603815 != nil:
    section.add "CacheParameterGroupName", valid_603815
  var valid_603816 = query.getOrDefault("ResetAllParameters")
  valid_603816 = validateParameter(valid_603816, JBool, required = false, default = nil)
  if valid_603816 != nil:
    section.add "ResetAllParameters", valid_603816
  var valid_603817 = query.getOrDefault("ParameterNameValues")
  valid_603817 = validateParameter(valid_603817, JArray, required = false,
                                 default = nil)
  if valid_603817 != nil:
    section.add "ParameterNameValues", valid_603817
  var valid_603818 = query.getOrDefault("Action")
  valid_603818 = validateParameter(valid_603818, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_603818 != nil:
    section.add "Action", valid_603818
  var valid_603819 = query.getOrDefault("Version")
  valid_603819 = validateParameter(valid_603819, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603819 != nil:
    section.add "Version", valid_603819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603820 = header.getOrDefault("X-Amz-Signature")
  valid_603820 = validateParameter(valid_603820, JString, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "X-Amz-Signature", valid_603820
  var valid_603821 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603821 = validateParameter(valid_603821, JString, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "X-Amz-Content-Sha256", valid_603821
  var valid_603822 = header.getOrDefault("X-Amz-Date")
  valid_603822 = validateParameter(valid_603822, JString, required = false,
                                 default = nil)
  if valid_603822 != nil:
    section.add "X-Amz-Date", valid_603822
  var valid_603823 = header.getOrDefault("X-Amz-Credential")
  valid_603823 = validateParameter(valid_603823, JString, required = false,
                                 default = nil)
  if valid_603823 != nil:
    section.add "X-Amz-Credential", valid_603823
  var valid_603824 = header.getOrDefault("X-Amz-Security-Token")
  valid_603824 = validateParameter(valid_603824, JString, required = false,
                                 default = nil)
  if valid_603824 != nil:
    section.add "X-Amz-Security-Token", valid_603824
  var valid_603825 = header.getOrDefault("X-Amz-Algorithm")
  valid_603825 = validateParameter(valid_603825, JString, required = false,
                                 default = nil)
  if valid_603825 != nil:
    section.add "X-Amz-Algorithm", valid_603825
  var valid_603826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-SignedHeaders", valid_603826
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603827: Call_GetResetCacheParameterGroup_603812; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_603827.validator(path, query, header, formData, body)
  let scheme = call_603827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603827.url(scheme.get, call_603827.host, call_603827.base,
                         call_603827.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603827, url, valid)

proc call*(call_603828: Call_GetResetCacheParameterGroup_603812;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603829 = newJObject()
  add(query_603829, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_603829, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_603829.add "ParameterNameValues", ParameterNameValues
  add(query_603829, "Action", newJString(Action))
  add(query_603829, "Version", newJString(Version))
  result = call_603828.call(nil, query_603829, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_603812(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_603813, base: "/",
    url: url_GetResetCacheParameterGroup_603814,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_603867 = ref object of OpenApiRestCall_601389
proc url_PostRevokeCacheSecurityGroupIngress_603869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_603868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603870 = query.getOrDefault("Action")
  valid_603870 = validateParameter(valid_603870, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_603870 != nil:
    section.add "Action", valid_603870
  var valid_603871 = query.getOrDefault("Version")
  valid_603871 = validateParameter(valid_603871, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603871 != nil:
    section.add "Version", valid_603871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603872 = header.getOrDefault("X-Amz-Signature")
  valid_603872 = validateParameter(valid_603872, JString, required = false,
                                 default = nil)
  if valid_603872 != nil:
    section.add "X-Amz-Signature", valid_603872
  var valid_603873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603873 = validateParameter(valid_603873, JString, required = false,
                                 default = nil)
  if valid_603873 != nil:
    section.add "X-Amz-Content-Sha256", valid_603873
  var valid_603874 = header.getOrDefault("X-Amz-Date")
  valid_603874 = validateParameter(valid_603874, JString, required = false,
                                 default = nil)
  if valid_603874 != nil:
    section.add "X-Amz-Date", valid_603874
  var valid_603875 = header.getOrDefault("X-Amz-Credential")
  valid_603875 = validateParameter(valid_603875, JString, required = false,
                                 default = nil)
  if valid_603875 != nil:
    section.add "X-Amz-Credential", valid_603875
  var valid_603876 = header.getOrDefault("X-Amz-Security-Token")
  valid_603876 = validateParameter(valid_603876, JString, required = false,
                                 default = nil)
  if valid_603876 != nil:
    section.add "X-Amz-Security-Token", valid_603876
  var valid_603877 = header.getOrDefault("X-Amz-Algorithm")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = nil)
  if valid_603877 != nil:
    section.add "X-Amz-Algorithm", valid_603877
  var valid_603878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-SignedHeaders", valid_603878
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_603879 = formData.getOrDefault("CacheSecurityGroupName")
  valid_603879 = validateParameter(valid_603879, JString, required = true,
                                 default = nil)
  if valid_603879 != nil:
    section.add "CacheSecurityGroupName", valid_603879
  var valid_603880 = formData.getOrDefault("EC2SecurityGroupName")
  valid_603880 = validateParameter(valid_603880, JString, required = true,
                                 default = nil)
  if valid_603880 != nil:
    section.add "EC2SecurityGroupName", valid_603880
  var valid_603881 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_603881 = validateParameter(valid_603881, JString, required = true,
                                 default = nil)
  if valid_603881 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_603881
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603882: Call_PostRevokeCacheSecurityGroupIngress_603867;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_603882.validator(path, query, header, formData, body)
  let scheme = call_603882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603882.url(scheme.get, call_603882.host, call_603882.base,
                         call_603882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603882, url, valid)

proc call*(call_603883: Call_PostRevokeCacheSecurityGroupIngress_603867;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603884 = newJObject()
  var formData_603885 = newJObject()
  add(formData_603885, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_603885, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_603885, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_603884, "Action", newJString(Action))
  add(query_603884, "Version", newJString(Version))
  result = call_603883.call(nil, query_603884, nil, formData_603885, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_603867(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_603868, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_603869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_603849 = ref object of OpenApiRestCall_601389
proc url_GetRevokeCacheSecurityGroupIngress_603851(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_603850(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_603852 = query.getOrDefault("EC2SecurityGroupName")
  valid_603852 = validateParameter(valid_603852, JString, required = true,
                                 default = nil)
  if valid_603852 != nil:
    section.add "EC2SecurityGroupName", valid_603852
  var valid_603853 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_603853 = validateParameter(valid_603853, JString, required = true,
                                 default = nil)
  if valid_603853 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_603853
  var valid_603854 = query.getOrDefault("Action")
  valid_603854 = validateParameter(valid_603854, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_603854 != nil:
    section.add "Action", valid_603854
  var valid_603855 = query.getOrDefault("CacheSecurityGroupName")
  valid_603855 = validateParameter(valid_603855, JString, required = true,
                                 default = nil)
  if valid_603855 != nil:
    section.add "CacheSecurityGroupName", valid_603855
  var valid_603856 = query.getOrDefault("Version")
  valid_603856 = validateParameter(valid_603856, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603856 != nil:
    section.add "Version", valid_603856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603857 = header.getOrDefault("X-Amz-Signature")
  valid_603857 = validateParameter(valid_603857, JString, required = false,
                                 default = nil)
  if valid_603857 != nil:
    section.add "X-Amz-Signature", valid_603857
  var valid_603858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603858 = validateParameter(valid_603858, JString, required = false,
                                 default = nil)
  if valid_603858 != nil:
    section.add "X-Amz-Content-Sha256", valid_603858
  var valid_603859 = header.getOrDefault("X-Amz-Date")
  valid_603859 = validateParameter(valid_603859, JString, required = false,
                                 default = nil)
  if valid_603859 != nil:
    section.add "X-Amz-Date", valid_603859
  var valid_603860 = header.getOrDefault("X-Amz-Credential")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Credential", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Security-Token")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Security-Token", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Algorithm")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Algorithm", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-SignedHeaders", valid_603863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603864: Call_GetRevokeCacheSecurityGroupIngress_603849;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_603864.validator(path, query, header, formData, body)
  let scheme = call_603864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603864.url(scheme.get, call_603864.host, call_603864.base,
                         call_603864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603864, url, valid)

proc call*(call_603865: Call_GetRevokeCacheSecurityGroupIngress_603849;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_603866 = newJObject()
  add(query_603866, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_603866, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_603866, "Action", newJString(Action))
  add(query_603866, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_603866, "Version", newJString(Version))
  result = call_603865.call(nil, query_603866, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_603849(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_603850, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_603851,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartMigration_603903 = ref object of OpenApiRestCall_601389
proc url_PostStartMigration_603905(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartMigration_603904(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603906 = query.getOrDefault("Action")
  valid_603906 = validateParameter(valid_603906, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_603906 != nil:
    section.add "Action", valid_603906
  var valid_603907 = query.getOrDefault("Version")
  valid_603907 = validateParameter(valid_603907, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603907 != nil:
    section.add "Version", valid_603907
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603908 = header.getOrDefault("X-Amz-Signature")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "X-Amz-Signature", valid_603908
  var valid_603909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = nil)
  if valid_603909 != nil:
    section.add "X-Amz-Content-Sha256", valid_603909
  var valid_603910 = header.getOrDefault("X-Amz-Date")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-Date", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Credential")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Credential", valid_603911
  var valid_603912 = header.getOrDefault("X-Amz-Security-Token")
  valid_603912 = validateParameter(valid_603912, JString, required = false,
                                 default = nil)
  if valid_603912 != nil:
    section.add "X-Amz-Security-Token", valid_603912
  var valid_603913 = header.getOrDefault("X-Amz-Algorithm")
  valid_603913 = validateParameter(valid_603913, JString, required = false,
                                 default = nil)
  if valid_603913 != nil:
    section.add "X-Amz-Algorithm", valid_603913
  var valid_603914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603914 = validateParameter(valid_603914, JString, required = false,
                                 default = nil)
  if valid_603914 != nil:
    section.add "X-Amz-SignedHeaders", valid_603914
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_603915 = formData.getOrDefault("CustomerNodeEndpointList")
  valid_603915 = validateParameter(valid_603915, JArray, required = true, default = nil)
  if valid_603915 != nil:
    section.add "CustomerNodeEndpointList", valid_603915
  var valid_603916 = formData.getOrDefault("ReplicationGroupId")
  valid_603916 = validateParameter(valid_603916, JString, required = true,
                                 default = nil)
  if valid_603916 != nil:
    section.add "ReplicationGroupId", valid_603916
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603917: Call_PostStartMigration_603903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_603917.validator(path, query, header, formData, body)
  let scheme = call_603917.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603917.url(scheme.get, call_603917.host, call_603917.base,
                         call_603917.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603917, url, valid)

proc call*(call_603918: Call_PostStartMigration_603903;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## postStartMigration
  ## Start the migration of data.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  var query_603919 = newJObject()
  var formData_603920 = newJObject()
  add(query_603919, "Action", newJString(Action))
  add(query_603919, "Version", newJString(Version))
  if CustomerNodeEndpointList != nil:
    formData_603920.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(formData_603920, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603918.call(nil, query_603919, nil, formData_603920, nil)

var postStartMigration* = Call_PostStartMigration_603903(
    name: "postStartMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=StartMigration",
    validator: validate_PostStartMigration_603904, base: "/",
    url: url_PostStartMigration_603905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartMigration_603886 = ref object of OpenApiRestCall_601389
proc url_GetStartMigration_603888(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartMigration_603887(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_603889 = query.getOrDefault("CustomerNodeEndpointList")
  valid_603889 = validateParameter(valid_603889, JArray, required = true, default = nil)
  if valid_603889 != nil:
    section.add "CustomerNodeEndpointList", valid_603889
  var valid_603890 = query.getOrDefault("Action")
  valid_603890 = validateParameter(valid_603890, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_603890 != nil:
    section.add "Action", valid_603890
  var valid_603891 = query.getOrDefault("ReplicationGroupId")
  valid_603891 = validateParameter(valid_603891, JString, required = true,
                                 default = nil)
  if valid_603891 != nil:
    section.add "ReplicationGroupId", valid_603891
  var valid_603892 = query.getOrDefault("Version")
  valid_603892 = validateParameter(valid_603892, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603892 != nil:
    section.add "Version", valid_603892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603893 = header.getOrDefault("X-Amz-Signature")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Signature", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Content-Sha256", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-Date")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-Date", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Credential")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Credential", valid_603896
  var valid_603897 = header.getOrDefault("X-Amz-Security-Token")
  valid_603897 = validateParameter(valid_603897, JString, required = false,
                                 default = nil)
  if valid_603897 != nil:
    section.add "X-Amz-Security-Token", valid_603897
  var valid_603898 = header.getOrDefault("X-Amz-Algorithm")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-Algorithm", valid_603898
  var valid_603899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603899 = validateParameter(valid_603899, JString, required = false,
                                 default = nil)
  if valid_603899 != nil:
    section.add "X-Amz-SignedHeaders", valid_603899
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603900: Call_GetStartMigration_603886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_603900.validator(path, query, header, formData, body)
  let scheme = call_603900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603900.url(scheme.get, call_603900.host, call_603900.base,
                         call_603900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603900, url, valid)

proc call*(call_603901: Call_GetStartMigration_603886;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## getStartMigration
  ## Start the migration of data.
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: string (required)
  var query_603902 = newJObject()
  if CustomerNodeEndpointList != nil:
    query_603902.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(query_603902, "Action", newJString(Action))
  add(query_603902, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603902, "Version", newJString(Version))
  result = call_603901.call(nil, query_603902, nil, nil, nil)

var getStartMigration* = Call_GetStartMigration_603886(name: "getStartMigration",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=StartMigration", validator: validate_GetStartMigration_603887,
    base: "/", url: url_GetStartMigration_603888,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_603938 = ref object of OpenApiRestCall_601389
proc url_PostTestFailover_603940(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestFailover_603939(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603941 = query.getOrDefault("Action")
  valid_603941 = validateParameter(valid_603941, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_603941 != nil:
    section.add "Action", valid_603941
  var valid_603942 = query.getOrDefault("Version")
  valid_603942 = validateParameter(valid_603942, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603942 != nil:
    section.add "Version", valid_603942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603943 = header.getOrDefault("X-Amz-Signature")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-Signature", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Content-Sha256", valid_603944
  var valid_603945 = header.getOrDefault("X-Amz-Date")
  valid_603945 = validateParameter(valid_603945, JString, required = false,
                                 default = nil)
  if valid_603945 != nil:
    section.add "X-Amz-Date", valid_603945
  var valid_603946 = header.getOrDefault("X-Amz-Credential")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "X-Amz-Credential", valid_603946
  var valid_603947 = header.getOrDefault("X-Amz-Security-Token")
  valid_603947 = validateParameter(valid_603947, JString, required = false,
                                 default = nil)
  if valid_603947 != nil:
    section.add "X-Amz-Security-Token", valid_603947
  var valid_603948 = header.getOrDefault("X-Amz-Algorithm")
  valid_603948 = validateParameter(valid_603948, JString, required = false,
                                 default = nil)
  if valid_603948 != nil:
    section.add "X-Amz-Algorithm", valid_603948
  var valid_603949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603949 = validateParameter(valid_603949, JString, required = false,
                                 default = nil)
  if valid_603949 != nil:
    section.add "X-Amz-SignedHeaders", valid_603949
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_603950 = formData.getOrDefault("NodeGroupId")
  valid_603950 = validateParameter(valid_603950, JString, required = true,
                                 default = nil)
  if valid_603950 != nil:
    section.add "NodeGroupId", valid_603950
  var valid_603951 = formData.getOrDefault("ReplicationGroupId")
  valid_603951 = validateParameter(valid_603951, JString, required = true,
                                 default = nil)
  if valid_603951 != nil:
    section.add "ReplicationGroupId", valid_603951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603952: Call_PostTestFailover_603938; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_603952.validator(path, query, header, formData, body)
  let scheme = call_603952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603952.url(scheme.get, call_603952.host, call_603952.base,
                         call_603952.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603952, url, valid)

proc call*(call_603953: Call_PostTestFailover_603938; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_603954 = newJObject()
  var formData_603955 = newJObject()
  add(formData_603955, "NodeGroupId", newJString(NodeGroupId))
  add(query_603954, "Action", newJString(Action))
  add(query_603954, "Version", newJString(Version))
  add(formData_603955, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_603953.call(nil, query_603954, nil, formData_603955, nil)

var postTestFailover* = Call_PostTestFailover_603938(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_603939,
    base: "/", url: url_PostTestFailover_603940,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_603921 = ref object of OpenApiRestCall_601389
proc url_GetTestFailover_603923(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestFailover_603922(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603924 = query.getOrDefault("Action")
  valid_603924 = validateParameter(valid_603924, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_603924 != nil:
    section.add "Action", valid_603924
  var valid_603925 = query.getOrDefault("ReplicationGroupId")
  valid_603925 = validateParameter(valid_603925, JString, required = true,
                                 default = nil)
  if valid_603925 != nil:
    section.add "ReplicationGroupId", valid_603925
  var valid_603926 = query.getOrDefault("Version")
  valid_603926 = validateParameter(valid_603926, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_603926 != nil:
    section.add "Version", valid_603926
  var valid_603927 = query.getOrDefault("NodeGroupId")
  valid_603927 = validateParameter(valid_603927, JString, required = true,
                                 default = nil)
  if valid_603927 != nil:
    section.add "NodeGroupId", valid_603927
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603928 = header.getOrDefault("X-Amz-Signature")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-Signature", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Content-Sha256", valid_603929
  var valid_603930 = header.getOrDefault("X-Amz-Date")
  valid_603930 = validateParameter(valid_603930, JString, required = false,
                                 default = nil)
  if valid_603930 != nil:
    section.add "X-Amz-Date", valid_603930
  var valid_603931 = header.getOrDefault("X-Amz-Credential")
  valid_603931 = validateParameter(valid_603931, JString, required = false,
                                 default = nil)
  if valid_603931 != nil:
    section.add "X-Amz-Credential", valid_603931
  var valid_603932 = header.getOrDefault("X-Amz-Security-Token")
  valid_603932 = validateParameter(valid_603932, JString, required = false,
                                 default = nil)
  if valid_603932 != nil:
    section.add "X-Amz-Security-Token", valid_603932
  var valid_603933 = header.getOrDefault("X-Amz-Algorithm")
  valid_603933 = validateParameter(valid_603933, JString, required = false,
                                 default = nil)
  if valid_603933 != nil:
    section.add "X-Amz-Algorithm", valid_603933
  var valid_603934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603934 = validateParameter(valid_603934, JString, required = false,
                                 default = nil)
  if valid_603934 != nil:
    section.add "X-Amz-SignedHeaders", valid_603934
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603935: Call_GetTestFailover_603921; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_603935.validator(path, query, header, formData, body)
  let scheme = call_603935.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603935.url(scheme.get, call_603935.host, call_603935.base,
                         call_603935.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603935, url, valid)

proc call*(call_603936: Call_GetTestFailover_603921; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_603937 = newJObject()
  add(query_603937, "Action", newJString(Action))
  add(query_603937, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_603937, "Version", newJString(Version))
  add(query_603937, "NodeGroupId", newJString(NodeGroupId))
  result = call_603936.call(nil, query_603937, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_603921(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_603922,
    base: "/", url: url_GetTestFailover_603923, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.atozSign(input.getOrDefault("query"), SHA256)
