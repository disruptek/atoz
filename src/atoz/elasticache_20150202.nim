
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_591364 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_591364](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_591364): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_591975 = ref object of OpenApiRestCall_591364
proc url_PostAddTagsToResource_591977(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_591976(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591978 = query.getOrDefault("Action")
  valid_591978 = validateParameter(valid_591978, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_591978 != nil:
    section.add "Action", valid_591978
  var valid_591979 = query.getOrDefault("Version")
  valid_591979 = validateParameter(valid_591979, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591979 != nil:
    section.add "Version", valid_591979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591980 = header.getOrDefault("X-Amz-Signature")
  valid_591980 = validateParameter(valid_591980, JString, required = false,
                                 default = nil)
  if valid_591980 != nil:
    section.add "X-Amz-Signature", valid_591980
  var valid_591981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591981 = validateParameter(valid_591981, JString, required = false,
                                 default = nil)
  if valid_591981 != nil:
    section.add "X-Amz-Content-Sha256", valid_591981
  var valid_591982 = header.getOrDefault("X-Amz-Date")
  valid_591982 = validateParameter(valid_591982, JString, required = false,
                                 default = nil)
  if valid_591982 != nil:
    section.add "X-Amz-Date", valid_591982
  var valid_591983 = header.getOrDefault("X-Amz-Credential")
  valid_591983 = validateParameter(valid_591983, JString, required = false,
                                 default = nil)
  if valid_591983 != nil:
    section.add "X-Amz-Credential", valid_591983
  var valid_591984 = header.getOrDefault("X-Amz-Security-Token")
  valid_591984 = validateParameter(valid_591984, JString, required = false,
                                 default = nil)
  if valid_591984 != nil:
    section.add "X-Amz-Security-Token", valid_591984
  var valid_591985 = header.getOrDefault("X-Amz-Algorithm")
  valid_591985 = validateParameter(valid_591985, JString, required = false,
                                 default = nil)
  if valid_591985 != nil:
    section.add "X-Amz-Algorithm", valid_591985
  var valid_591986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591986 = validateParameter(valid_591986, JString, required = false,
                                 default = nil)
  if valid_591986 != nil:
    section.add "X-Amz-SignedHeaders", valid_591986
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_591987 = formData.getOrDefault("Tags")
  valid_591987 = validateParameter(valid_591987, JArray, required = true, default = nil)
  if valid_591987 != nil:
    section.add "Tags", valid_591987
  var valid_591988 = formData.getOrDefault("ResourceName")
  valid_591988 = validateParameter(valid_591988, JString, required = true,
                                 default = nil)
  if valid_591988 != nil:
    section.add "ResourceName", valid_591988
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591989: Call_PostAddTagsToResource_591975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_591989.validator(path, query, header, formData, body)
  let scheme = call_591989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591989.url(scheme.get, call_591989.host, call_591989.base,
                         call_591989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591989, url, valid)

proc call*(call_591990: Call_PostAddTagsToResource_591975; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_591991 = newJObject()
  var formData_591992 = newJObject()
  add(query_591991, "Action", newJString(Action))
  if Tags != nil:
    formData_591992.add "Tags", Tags
  add(query_591991, "Version", newJString(Version))
  add(formData_591992, "ResourceName", newJString(ResourceName))
  result = call_591990.call(nil, query_591991, nil, formData_591992, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_591975(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_591976, base: "/",
    url: url_PostAddTagsToResource_591977, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_591703 = ref object of OpenApiRestCall_591364
proc url_GetAddTagsToResource_591705(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_591704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_591817 = query.getOrDefault("Tags")
  valid_591817 = validateParameter(valid_591817, JArray, required = true, default = nil)
  if valid_591817 != nil:
    section.add "Tags", valid_591817
  var valid_591818 = query.getOrDefault("ResourceName")
  valid_591818 = validateParameter(valid_591818, JString, required = true,
                                 default = nil)
  if valid_591818 != nil:
    section.add "ResourceName", valid_591818
  var valid_591832 = query.getOrDefault("Action")
  valid_591832 = validateParameter(valid_591832, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_591832 != nil:
    section.add "Action", valid_591832
  var valid_591833 = query.getOrDefault("Version")
  valid_591833 = validateParameter(valid_591833, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591833 != nil:
    section.add "Version", valid_591833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591834 = header.getOrDefault("X-Amz-Signature")
  valid_591834 = validateParameter(valid_591834, JString, required = false,
                                 default = nil)
  if valid_591834 != nil:
    section.add "X-Amz-Signature", valid_591834
  var valid_591835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591835 = validateParameter(valid_591835, JString, required = false,
                                 default = nil)
  if valid_591835 != nil:
    section.add "X-Amz-Content-Sha256", valid_591835
  var valid_591836 = header.getOrDefault("X-Amz-Date")
  valid_591836 = validateParameter(valid_591836, JString, required = false,
                                 default = nil)
  if valid_591836 != nil:
    section.add "X-Amz-Date", valid_591836
  var valid_591837 = header.getOrDefault("X-Amz-Credential")
  valid_591837 = validateParameter(valid_591837, JString, required = false,
                                 default = nil)
  if valid_591837 != nil:
    section.add "X-Amz-Credential", valid_591837
  var valid_591838 = header.getOrDefault("X-Amz-Security-Token")
  valid_591838 = validateParameter(valid_591838, JString, required = false,
                                 default = nil)
  if valid_591838 != nil:
    section.add "X-Amz-Security-Token", valid_591838
  var valid_591839 = header.getOrDefault("X-Amz-Algorithm")
  valid_591839 = validateParameter(valid_591839, JString, required = false,
                                 default = nil)
  if valid_591839 != nil:
    section.add "X-Amz-Algorithm", valid_591839
  var valid_591840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591840 = validateParameter(valid_591840, JString, required = false,
                                 default = nil)
  if valid_591840 != nil:
    section.add "X-Amz-SignedHeaders", valid_591840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591863: Call_GetAddTagsToResource_591703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_591863.validator(path, query, header, formData, body)
  let scheme = call_591863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591863.url(scheme.get, call_591863.host, call_591863.base,
                         call_591863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591863, url, valid)

proc call*(call_591934: Call_GetAddTagsToResource_591703; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591935 = newJObject()
  if Tags != nil:
    query_591935.add "Tags", Tags
  add(query_591935, "ResourceName", newJString(ResourceName))
  add(query_591935, "Action", newJString(Action))
  add(query_591935, "Version", newJString(Version))
  result = call_591934.call(nil, query_591935, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_591703(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_591704, base: "/",
    url: url_GetAddTagsToResource_591705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_592011 = ref object of OpenApiRestCall_591364
proc url_PostAuthorizeCacheSecurityGroupIngress_592013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_592012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592014 = query.getOrDefault("Action")
  valid_592014 = validateParameter(valid_592014, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_592014 != nil:
    section.add "Action", valid_592014
  var valid_592015 = query.getOrDefault("Version")
  valid_592015 = validateParameter(valid_592015, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592015 != nil:
    section.add "Version", valid_592015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592016 = header.getOrDefault("X-Amz-Signature")
  valid_592016 = validateParameter(valid_592016, JString, required = false,
                                 default = nil)
  if valid_592016 != nil:
    section.add "X-Amz-Signature", valid_592016
  var valid_592017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592017 = validateParameter(valid_592017, JString, required = false,
                                 default = nil)
  if valid_592017 != nil:
    section.add "X-Amz-Content-Sha256", valid_592017
  var valid_592018 = header.getOrDefault("X-Amz-Date")
  valid_592018 = validateParameter(valid_592018, JString, required = false,
                                 default = nil)
  if valid_592018 != nil:
    section.add "X-Amz-Date", valid_592018
  var valid_592019 = header.getOrDefault("X-Amz-Credential")
  valid_592019 = validateParameter(valid_592019, JString, required = false,
                                 default = nil)
  if valid_592019 != nil:
    section.add "X-Amz-Credential", valid_592019
  var valid_592020 = header.getOrDefault("X-Amz-Security-Token")
  valid_592020 = validateParameter(valid_592020, JString, required = false,
                                 default = nil)
  if valid_592020 != nil:
    section.add "X-Amz-Security-Token", valid_592020
  var valid_592021 = header.getOrDefault("X-Amz-Algorithm")
  valid_592021 = validateParameter(valid_592021, JString, required = false,
                                 default = nil)
  if valid_592021 != nil:
    section.add "X-Amz-Algorithm", valid_592021
  var valid_592022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592022 = validateParameter(valid_592022, JString, required = false,
                                 default = nil)
  if valid_592022 != nil:
    section.add "X-Amz-SignedHeaders", valid_592022
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_592023 = formData.getOrDefault("CacheSecurityGroupName")
  valid_592023 = validateParameter(valid_592023, JString, required = true,
                                 default = nil)
  if valid_592023 != nil:
    section.add "CacheSecurityGroupName", valid_592023
  var valid_592024 = formData.getOrDefault("EC2SecurityGroupName")
  valid_592024 = validateParameter(valid_592024, JString, required = true,
                                 default = nil)
  if valid_592024 != nil:
    section.add "EC2SecurityGroupName", valid_592024
  var valid_592025 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_592025 = validateParameter(valid_592025, JString, required = true,
                                 default = nil)
  if valid_592025 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_592025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592026: Call_PostAuthorizeCacheSecurityGroupIngress_592011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_592026.validator(path, query, header, formData, body)
  let scheme = call_592026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592026.url(scheme.get, call_592026.host, call_592026.base,
                         call_592026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592026, url, valid)

proc call*(call_592027: Call_PostAuthorizeCacheSecurityGroupIngress_592011;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592028 = newJObject()
  var formData_592029 = newJObject()
  add(formData_592029, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_592029, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_592029, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_592028, "Action", newJString(Action))
  add(query_592028, "Version", newJString(Version))
  result = call_592027.call(nil, query_592028, nil, formData_592029, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_592011(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_592012, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_592013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_591993 = ref object of OpenApiRestCall_591364
proc url_GetAuthorizeCacheSecurityGroupIngress_591995(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_591994(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_591996 = query.getOrDefault("EC2SecurityGroupName")
  valid_591996 = validateParameter(valid_591996, JString, required = true,
                                 default = nil)
  if valid_591996 != nil:
    section.add "EC2SecurityGroupName", valid_591996
  var valid_591997 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_591997 = validateParameter(valid_591997, JString, required = true,
                                 default = nil)
  if valid_591997 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_591997
  var valid_591998 = query.getOrDefault("Action")
  valid_591998 = validateParameter(valid_591998, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_591998 != nil:
    section.add "Action", valid_591998
  var valid_591999 = query.getOrDefault("CacheSecurityGroupName")
  valid_591999 = validateParameter(valid_591999, JString, required = true,
                                 default = nil)
  if valid_591999 != nil:
    section.add "CacheSecurityGroupName", valid_591999
  var valid_592000 = query.getOrDefault("Version")
  valid_592000 = validateParameter(valid_592000, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592000 != nil:
    section.add "Version", valid_592000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592001 = header.getOrDefault("X-Amz-Signature")
  valid_592001 = validateParameter(valid_592001, JString, required = false,
                                 default = nil)
  if valid_592001 != nil:
    section.add "X-Amz-Signature", valid_592001
  var valid_592002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592002 = validateParameter(valid_592002, JString, required = false,
                                 default = nil)
  if valid_592002 != nil:
    section.add "X-Amz-Content-Sha256", valid_592002
  var valid_592003 = header.getOrDefault("X-Amz-Date")
  valid_592003 = validateParameter(valid_592003, JString, required = false,
                                 default = nil)
  if valid_592003 != nil:
    section.add "X-Amz-Date", valid_592003
  var valid_592004 = header.getOrDefault("X-Amz-Credential")
  valid_592004 = validateParameter(valid_592004, JString, required = false,
                                 default = nil)
  if valid_592004 != nil:
    section.add "X-Amz-Credential", valid_592004
  var valid_592005 = header.getOrDefault("X-Amz-Security-Token")
  valid_592005 = validateParameter(valid_592005, JString, required = false,
                                 default = nil)
  if valid_592005 != nil:
    section.add "X-Amz-Security-Token", valid_592005
  var valid_592006 = header.getOrDefault("X-Amz-Algorithm")
  valid_592006 = validateParameter(valid_592006, JString, required = false,
                                 default = nil)
  if valid_592006 != nil:
    section.add "X-Amz-Algorithm", valid_592006
  var valid_592007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592007 = validateParameter(valid_592007, JString, required = false,
                                 default = nil)
  if valid_592007 != nil:
    section.add "X-Amz-SignedHeaders", valid_592007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592008: Call_GetAuthorizeCacheSecurityGroupIngress_591993;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_592008.validator(path, query, header, formData, body)
  let scheme = call_592008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592008.url(scheme.get, call_592008.host, call_592008.base,
                         call_592008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592008, url, valid)

proc call*(call_592009: Call_GetAuthorizeCacheSecurityGroupIngress_591993;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_592010 = newJObject()
  add(query_592010, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_592010, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_592010, "Action", newJString(Action))
  add(query_592010, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_592010, "Version", newJString(Version))
  result = call_592009.call(nil, query_592010, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_591993(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_591994, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_591995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_592048 = ref object of OpenApiRestCall_591364
proc url_PostBatchApplyUpdateAction_592050(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchApplyUpdateAction_592049(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592051 = query.getOrDefault("Action")
  valid_592051 = validateParameter(valid_592051, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_592051 != nil:
    section.add "Action", valid_592051
  var valid_592052 = query.getOrDefault("Version")
  valid_592052 = validateParameter(valid_592052, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592052 != nil:
    section.add "Version", valid_592052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592053 = header.getOrDefault("X-Amz-Signature")
  valid_592053 = validateParameter(valid_592053, JString, required = false,
                                 default = nil)
  if valid_592053 != nil:
    section.add "X-Amz-Signature", valid_592053
  var valid_592054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592054 = validateParameter(valid_592054, JString, required = false,
                                 default = nil)
  if valid_592054 != nil:
    section.add "X-Amz-Content-Sha256", valid_592054
  var valid_592055 = header.getOrDefault("X-Amz-Date")
  valid_592055 = validateParameter(valid_592055, JString, required = false,
                                 default = nil)
  if valid_592055 != nil:
    section.add "X-Amz-Date", valid_592055
  var valid_592056 = header.getOrDefault("X-Amz-Credential")
  valid_592056 = validateParameter(valid_592056, JString, required = false,
                                 default = nil)
  if valid_592056 != nil:
    section.add "X-Amz-Credential", valid_592056
  var valid_592057 = header.getOrDefault("X-Amz-Security-Token")
  valid_592057 = validateParameter(valid_592057, JString, required = false,
                                 default = nil)
  if valid_592057 != nil:
    section.add "X-Amz-Security-Token", valid_592057
  var valid_592058 = header.getOrDefault("X-Amz-Algorithm")
  valid_592058 = validateParameter(valid_592058, JString, required = false,
                                 default = nil)
  if valid_592058 != nil:
    section.add "X-Amz-Algorithm", valid_592058
  var valid_592059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592059 = validateParameter(valid_592059, JString, required = false,
                                 default = nil)
  if valid_592059 != nil:
    section.add "X-Amz-SignedHeaders", valid_592059
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_592060 = formData.getOrDefault("ServiceUpdateName")
  valid_592060 = validateParameter(valid_592060, JString, required = true,
                                 default = nil)
  if valid_592060 != nil:
    section.add "ServiceUpdateName", valid_592060
  var valid_592061 = formData.getOrDefault("ReplicationGroupIds")
  valid_592061 = validateParameter(valid_592061, JArray, required = false,
                                 default = nil)
  if valid_592061 != nil:
    section.add "ReplicationGroupIds", valid_592061
  var valid_592062 = formData.getOrDefault("CacheClusterIds")
  valid_592062 = validateParameter(valid_592062, JArray, required = false,
                                 default = nil)
  if valid_592062 != nil:
    section.add "CacheClusterIds", valid_592062
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592063: Call_PostBatchApplyUpdateAction_592048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_592063.validator(path, query, header, formData, body)
  let scheme = call_592063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592063.url(scheme.get, call_592063.host, call_592063.base,
                         call_592063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592063, url, valid)

proc call*(call_592064: Call_PostBatchApplyUpdateAction_592048;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592065 = newJObject()
  var formData_592066 = newJObject()
  add(formData_592066, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_592066.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_592066.add "CacheClusterIds", CacheClusterIds
  add(query_592065, "Action", newJString(Action))
  add(query_592065, "Version", newJString(Version))
  result = call_592064.call(nil, query_592065, nil, formData_592066, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_592048(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_592049, base: "/",
    url: url_PostBatchApplyUpdateAction_592050,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_592030 = ref object of OpenApiRestCall_591364
proc url_GetBatchApplyUpdateAction_592032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchApplyUpdateAction_592031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_592033 = query.getOrDefault("ServiceUpdateName")
  valid_592033 = validateParameter(valid_592033, JString, required = true,
                                 default = nil)
  if valid_592033 != nil:
    section.add "ServiceUpdateName", valid_592033
  var valid_592034 = query.getOrDefault("Action")
  valid_592034 = validateParameter(valid_592034, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_592034 != nil:
    section.add "Action", valid_592034
  var valid_592035 = query.getOrDefault("CacheClusterIds")
  valid_592035 = validateParameter(valid_592035, JArray, required = false,
                                 default = nil)
  if valid_592035 != nil:
    section.add "CacheClusterIds", valid_592035
  var valid_592036 = query.getOrDefault("ReplicationGroupIds")
  valid_592036 = validateParameter(valid_592036, JArray, required = false,
                                 default = nil)
  if valid_592036 != nil:
    section.add "ReplicationGroupIds", valid_592036
  var valid_592037 = query.getOrDefault("Version")
  valid_592037 = validateParameter(valid_592037, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592037 != nil:
    section.add "Version", valid_592037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592038 = header.getOrDefault("X-Amz-Signature")
  valid_592038 = validateParameter(valid_592038, JString, required = false,
                                 default = nil)
  if valid_592038 != nil:
    section.add "X-Amz-Signature", valid_592038
  var valid_592039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592039 = validateParameter(valid_592039, JString, required = false,
                                 default = nil)
  if valid_592039 != nil:
    section.add "X-Amz-Content-Sha256", valid_592039
  var valid_592040 = header.getOrDefault("X-Amz-Date")
  valid_592040 = validateParameter(valid_592040, JString, required = false,
                                 default = nil)
  if valid_592040 != nil:
    section.add "X-Amz-Date", valid_592040
  var valid_592041 = header.getOrDefault("X-Amz-Credential")
  valid_592041 = validateParameter(valid_592041, JString, required = false,
                                 default = nil)
  if valid_592041 != nil:
    section.add "X-Amz-Credential", valid_592041
  var valid_592042 = header.getOrDefault("X-Amz-Security-Token")
  valid_592042 = validateParameter(valid_592042, JString, required = false,
                                 default = nil)
  if valid_592042 != nil:
    section.add "X-Amz-Security-Token", valid_592042
  var valid_592043 = header.getOrDefault("X-Amz-Algorithm")
  valid_592043 = validateParameter(valid_592043, JString, required = false,
                                 default = nil)
  if valid_592043 != nil:
    section.add "X-Amz-Algorithm", valid_592043
  var valid_592044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592044 = validateParameter(valid_592044, JString, required = false,
                                 default = nil)
  if valid_592044 != nil:
    section.add "X-Amz-SignedHeaders", valid_592044
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592045: Call_GetBatchApplyUpdateAction_592030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_592045.validator(path, query, header, formData, body)
  let scheme = call_592045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592045.url(scheme.get, call_592045.host, call_592045.base,
                         call_592045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592045, url, valid)

proc call*(call_592046: Call_GetBatchApplyUpdateAction_592030;
          ServiceUpdateName: string; Action: string = "BatchApplyUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_592047 = newJObject()
  add(query_592047, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_592047, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_592047.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_592047.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_592047, "Version", newJString(Version))
  result = call_592046.call(nil, query_592047, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_592030(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_592031, base: "/",
    url: url_GetBatchApplyUpdateAction_592032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_592085 = ref object of OpenApiRestCall_591364
proc url_PostBatchStopUpdateAction_592087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchStopUpdateAction_592086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592088 = query.getOrDefault("Action")
  valid_592088 = validateParameter(valid_592088, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_592088 != nil:
    section.add "Action", valid_592088
  var valid_592089 = query.getOrDefault("Version")
  valid_592089 = validateParameter(valid_592089, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592089 != nil:
    section.add "Version", valid_592089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592090 = header.getOrDefault("X-Amz-Signature")
  valid_592090 = validateParameter(valid_592090, JString, required = false,
                                 default = nil)
  if valid_592090 != nil:
    section.add "X-Amz-Signature", valid_592090
  var valid_592091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592091 = validateParameter(valid_592091, JString, required = false,
                                 default = nil)
  if valid_592091 != nil:
    section.add "X-Amz-Content-Sha256", valid_592091
  var valid_592092 = header.getOrDefault("X-Amz-Date")
  valid_592092 = validateParameter(valid_592092, JString, required = false,
                                 default = nil)
  if valid_592092 != nil:
    section.add "X-Amz-Date", valid_592092
  var valid_592093 = header.getOrDefault("X-Amz-Credential")
  valid_592093 = validateParameter(valid_592093, JString, required = false,
                                 default = nil)
  if valid_592093 != nil:
    section.add "X-Amz-Credential", valid_592093
  var valid_592094 = header.getOrDefault("X-Amz-Security-Token")
  valid_592094 = validateParameter(valid_592094, JString, required = false,
                                 default = nil)
  if valid_592094 != nil:
    section.add "X-Amz-Security-Token", valid_592094
  var valid_592095 = header.getOrDefault("X-Amz-Algorithm")
  valid_592095 = validateParameter(valid_592095, JString, required = false,
                                 default = nil)
  if valid_592095 != nil:
    section.add "X-Amz-Algorithm", valid_592095
  var valid_592096 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592096 = validateParameter(valid_592096, JString, required = false,
                                 default = nil)
  if valid_592096 != nil:
    section.add "X-Amz-SignedHeaders", valid_592096
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_592097 = formData.getOrDefault("ServiceUpdateName")
  valid_592097 = validateParameter(valid_592097, JString, required = true,
                                 default = nil)
  if valid_592097 != nil:
    section.add "ServiceUpdateName", valid_592097
  var valid_592098 = formData.getOrDefault("ReplicationGroupIds")
  valid_592098 = validateParameter(valid_592098, JArray, required = false,
                                 default = nil)
  if valid_592098 != nil:
    section.add "ReplicationGroupIds", valid_592098
  var valid_592099 = formData.getOrDefault("CacheClusterIds")
  valid_592099 = validateParameter(valid_592099, JArray, required = false,
                                 default = nil)
  if valid_592099 != nil:
    section.add "CacheClusterIds", valid_592099
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592100: Call_PostBatchStopUpdateAction_592085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_592100.validator(path, query, header, formData, body)
  let scheme = call_592100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592100.url(scheme.get, call_592100.host, call_592100.base,
                         call_592100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592100, url, valid)

proc call*(call_592101: Call_PostBatchStopUpdateAction_592085;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil; Action: string = "BatchStopUpdateAction";
          Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592102 = newJObject()
  var formData_592103 = newJObject()
  add(formData_592103, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_592103.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_592103.add "CacheClusterIds", CacheClusterIds
  add(query_592102, "Action", newJString(Action))
  add(query_592102, "Version", newJString(Version))
  result = call_592101.call(nil, query_592102, nil, formData_592103, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_592085(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_592086, base: "/",
    url: url_PostBatchStopUpdateAction_592087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_592067 = ref object of OpenApiRestCall_591364
proc url_GetBatchStopUpdateAction_592069(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchStopUpdateAction_592068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_592070 = query.getOrDefault("ServiceUpdateName")
  valid_592070 = validateParameter(valid_592070, JString, required = true,
                                 default = nil)
  if valid_592070 != nil:
    section.add "ServiceUpdateName", valid_592070
  var valid_592071 = query.getOrDefault("Action")
  valid_592071 = validateParameter(valid_592071, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_592071 != nil:
    section.add "Action", valid_592071
  var valid_592072 = query.getOrDefault("CacheClusterIds")
  valid_592072 = validateParameter(valid_592072, JArray, required = false,
                                 default = nil)
  if valid_592072 != nil:
    section.add "CacheClusterIds", valid_592072
  var valid_592073 = query.getOrDefault("ReplicationGroupIds")
  valid_592073 = validateParameter(valid_592073, JArray, required = false,
                                 default = nil)
  if valid_592073 != nil:
    section.add "ReplicationGroupIds", valid_592073
  var valid_592074 = query.getOrDefault("Version")
  valid_592074 = validateParameter(valid_592074, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592074 != nil:
    section.add "Version", valid_592074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592075 = header.getOrDefault("X-Amz-Signature")
  valid_592075 = validateParameter(valid_592075, JString, required = false,
                                 default = nil)
  if valid_592075 != nil:
    section.add "X-Amz-Signature", valid_592075
  var valid_592076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592076 = validateParameter(valid_592076, JString, required = false,
                                 default = nil)
  if valid_592076 != nil:
    section.add "X-Amz-Content-Sha256", valid_592076
  var valid_592077 = header.getOrDefault("X-Amz-Date")
  valid_592077 = validateParameter(valid_592077, JString, required = false,
                                 default = nil)
  if valid_592077 != nil:
    section.add "X-Amz-Date", valid_592077
  var valid_592078 = header.getOrDefault("X-Amz-Credential")
  valid_592078 = validateParameter(valid_592078, JString, required = false,
                                 default = nil)
  if valid_592078 != nil:
    section.add "X-Amz-Credential", valid_592078
  var valid_592079 = header.getOrDefault("X-Amz-Security-Token")
  valid_592079 = validateParameter(valid_592079, JString, required = false,
                                 default = nil)
  if valid_592079 != nil:
    section.add "X-Amz-Security-Token", valid_592079
  var valid_592080 = header.getOrDefault("X-Amz-Algorithm")
  valid_592080 = validateParameter(valid_592080, JString, required = false,
                                 default = nil)
  if valid_592080 != nil:
    section.add "X-Amz-Algorithm", valid_592080
  var valid_592081 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592081 = validateParameter(valid_592081, JString, required = false,
                                 default = nil)
  if valid_592081 != nil:
    section.add "X-Amz-SignedHeaders", valid_592081
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592082: Call_GetBatchStopUpdateAction_592067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_592082.validator(path, query, header, formData, body)
  let scheme = call_592082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592082.url(scheme.get, call_592082.host, call_592082.base,
                         call_592082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592082, url, valid)

proc call*(call_592083: Call_GetBatchStopUpdateAction_592067;
          ServiceUpdateName: string; Action: string = "BatchStopUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_592084 = newJObject()
  add(query_592084, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_592084, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_592084.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_592084.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_592084, "Version", newJString(Version))
  result = call_592083.call(nil, query_592084, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_592067(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_592068, base: "/",
    url: url_GetBatchStopUpdateAction_592069, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteMigration_592121 = ref object of OpenApiRestCall_591364
proc url_PostCompleteMigration_592123(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCompleteMigration_592122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592124 = query.getOrDefault("Action")
  valid_592124 = validateParameter(valid_592124, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_592124 != nil:
    section.add "Action", valid_592124
  var valid_592125 = query.getOrDefault("Version")
  valid_592125 = validateParameter(valid_592125, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592125 != nil:
    section.add "Version", valid_592125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592126 = header.getOrDefault("X-Amz-Signature")
  valid_592126 = validateParameter(valid_592126, JString, required = false,
                                 default = nil)
  if valid_592126 != nil:
    section.add "X-Amz-Signature", valid_592126
  var valid_592127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592127 = validateParameter(valid_592127, JString, required = false,
                                 default = nil)
  if valid_592127 != nil:
    section.add "X-Amz-Content-Sha256", valid_592127
  var valid_592128 = header.getOrDefault("X-Amz-Date")
  valid_592128 = validateParameter(valid_592128, JString, required = false,
                                 default = nil)
  if valid_592128 != nil:
    section.add "X-Amz-Date", valid_592128
  var valid_592129 = header.getOrDefault("X-Amz-Credential")
  valid_592129 = validateParameter(valid_592129, JString, required = false,
                                 default = nil)
  if valid_592129 != nil:
    section.add "X-Amz-Credential", valid_592129
  var valid_592130 = header.getOrDefault("X-Amz-Security-Token")
  valid_592130 = validateParameter(valid_592130, JString, required = false,
                                 default = nil)
  if valid_592130 != nil:
    section.add "X-Amz-Security-Token", valid_592130
  var valid_592131 = header.getOrDefault("X-Amz-Algorithm")
  valid_592131 = validateParameter(valid_592131, JString, required = false,
                                 default = nil)
  if valid_592131 != nil:
    section.add "X-Amz-Algorithm", valid_592131
  var valid_592132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592132 = validateParameter(valid_592132, JString, required = false,
                                 default = nil)
  if valid_592132 != nil:
    section.add "X-Amz-SignedHeaders", valid_592132
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  section = newJObject()
  var valid_592133 = formData.getOrDefault("Force")
  valid_592133 = validateParameter(valid_592133, JBool, required = false, default = nil)
  if valid_592133 != nil:
    section.add "Force", valid_592133
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_592134 = formData.getOrDefault("ReplicationGroupId")
  valid_592134 = validateParameter(valid_592134, JString, required = true,
                                 default = nil)
  if valid_592134 != nil:
    section.add "ReplicationGroupId", valid_592134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592135: Call_PostCompleteMigration_592121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_592135.validator(path, query, header, formData, body)
  let scheme = call_592135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592135.url(scheme.get, call_592135.host, call_592135.base,
                         call_592135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592135, url, valid)

proc call*(call_592136: Call_PostCompleteMigration_592121;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## postCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  var query_592137 = newJObject()
  var formData_592138 = newJObject()
  add(formData_592138, "Force", newJBool(Force))
  add(query_592137, "Action", newJString(Action))
  add(query_592137, "Version", newJString(Version))
  add(formData_592138, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592136.call(nil, query_592137, nil, formData_592138, nil)

var postCompleteMigration* = Call_PostCompleteMigration_592121(
    name: "postCompleteMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_PostCompleteMigration_592122, base: "/",
    url: url_PostCompleteMigration_592123, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteMigration_592104 = ref object of OpenApiRestCall_591364
proc url_GetCompleteMigration_592106(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCompleteMigration_592105(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: JString (required)
  section = newJObject()
  var valid_592107 = query.getOrDefault("Force")
  valid_592107 = validateParameter(valid_592107, JBool, required = false, default = nil)
  if valid_592107 != nil:
    section.add "Force", valid_592107
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592108 = query.getOrDefault("Action")
  valid_592108 = validateParameter(valid_592108, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_592108 != nil:
    section.add "Action", valid_592108
  var valid_592109 = query.getOrDefault("ReplicationGroupId")
  valid_592109 = validateParameter(valid_592109, JString, required = true,
                                 default = nil)
  if valid_592109 != nil:
    section.add "ReplicationGroupId", valid_592109
  var valid_592110 = query.getOrDefault("Version")
  valid_592110 = validateParameter(valid_592110, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592110 != nil:
    section.add "Version", valid_592110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592111 = header.getOrDefault("X-Amz-Signature")
  valid_592111 = validateParameter(valid_592111, JString, required = false,
                                 default = nil)
  if valid_592111 != nil:
    section.add "X-Amz-Signature", valid_592111
  var valid_592112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592112 = validateParameter(valid_592112, JString, required = false,
                                 default = nil)
  if valid_592112 != nil:
    section.add "X-Amz-Content-Sha256", valid_592112
  var valid_592113 = header.getOrDefault("X-Amz-Date")
  valid_592113 = validateParameter(valid_592113, JString, required = false,
                                 default = nil)
  if valid_592113 != nil:
    section.add "X-Amz-Date", valid_592113
  var valid_592114 = header.getOrDefault("X-Amz-Credential")
  valid_592114 = validateParameter(valid_592114, JString, required = false,
                                 default = nil)
  if valid_592114 != nil:
    section.add "X-Amz-Credential", valid_592114
  var valid_592115 = header.getOrDefault("X-Amz-Security-Token")
  valid_592115 = validateParameter(valid_592115, JString, required = false,
                                 default = nil)
  if valid_592115 != nil:
    section.add "X-Amz-Security-Token", valid_592115
  var valid_592116 = header.getOrDefault("X-Amz-Algorithm")
  valid_592116 = validateParameter(valid_592116, JString, required = false,
                                 default = nil)
  if valid_592116 != nil:
    section.add "X-Amz-Algorithm", valid_592116
  var valid_592117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592117 = validateParameter(valid_592117, JString, required = false,
                                 default = nil)
  if valid_592117 != nil:
    section.add "X-Amz-SignedHeaders", valid_592117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592118: Call_GetCompleteMigration_592104; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_592118.validator(path, query, header, formData, body)
  let scheme = call_592118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592118.url(scheme.get, call_592118.host, call_592118.base,
                         call_592118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592118, url, valid)

proc call*(call_592119: Call_GetCompleteMigration_592104;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## getCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: string (required)
  var query_592120 = newJObject()
  add(query_592120, "Force", newJBool(Force))
  add(query_592120, "Action", newJString(Action))
  add(query_592120, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592120, "Version", newJString(Version))
  result = call_592119.call(nil, query_592120, nil, nil, nil)

var getCompleteMigration* = Call_GetCompleteMigration_592104(
    name: "getCompleteMigration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_GetCompleteMigration_592105, base: "/",
    url: url_GetCompleteMigration_592106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_592158 = ref object of OpenApiRestCall_591364
proc url_PostCopySnapshot_592160(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopySnapshot_592159(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592161 = query.getOrDefault("Action")
  valid_592161 = validateParameter(valid_592161, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_592161 != nil:
    section.add "Action", valid_592161
  var valid_592162 = query.getOrDefault("Version")
  valid_592162 = validateParameter(valid_592162, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592162 != nil:
    section.add "Version", valid_592162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592163 = header.getOrDefault("X-Amz-Signature")
  valid_592163 = validateParameter(valid_592163, JString, required = false,
                                 default = nil)
  if valid_592163 != nil:
    section.add "X-Amz-Signature", valid_592163
  var valid_592164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592164 = validateParameter(valid_592164, JString, required = false,
                                 default = nil)
  if valid_592164 != nil:
    section.add "X-Amz-Content-Sha256", valid_592164
  var valid_592165 = header.getOrDefault("X-Amz-Date")
  valid_592165 = validateParameter(valid_592165, JString, required = false,
                                 default = nil)
  if valid_592165 != nil:
    section.add "X-Amz-Date", valid_592165
  var valid_592166 = header.getOrDefault("X-Amz-Credential")
  valid_592166 = validateParameter(valid_592166, JString, required = false,
                                 default = nil)
  if valid_592166 != nil:
    section.add "X-Amz-Credential", valid_592166
  var valid_592167 = header.getOrDefault("X-Amz-Security-Token")
  valid_592167 = validateParameter(valid_592167, JString, required = false,
                                 default = nil)
  if valid_592167 != nil:
    section.add "X-Amz-Security-Token", valid_592167
  var valid_592168 = header.getOrDefault("X-Amz-Algorithm")
  valid_592168 = validateParameter(valid_592168, JString, required = false,
                                 default = nil)
  if valid_592168 != nil:
    section.add "X-Amz-Algorithm", valid_592168
  var valid_592169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592169 = validateParameter(valid_592169, JString, required = false,
                                 default = nil)
  if valid_592169 != nil:
    section.add "X-Amz-SignedHeaders", valid_592169
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_592170 = formData.getOrDefault("KmsKeyId")
  valid_592170 = validateParameter(valid_592170, JString, required = false,
                                 default = nil)
  if valid_592170 != nil:
    section.add "KmsKeyId", valid_592170
  var valid_592171 = formData.getOrDefault("TargetBucket")
  valid_592171 = validateParameter(valid_592171, JString, required = false,
                                 default = nil)
  if valid_592171 != nil:
    section.add "TargetBucket", valid_592171
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_592172 = formData.getOrDefault("SourceSnapshotName")
  valid_592172 = validateParameter(valid_592172, JString, required = true,
                                 default = nil)
  if valid_592172 != nil:
    section.add "SourceSnapshotName", valid_592172
  var valid_592173 = formData.getOrDefault("TargetSnapshotName")
  valid_592173 = validateParameter(valid_592173, JString, required = true,
                                 default = nil)
  if valid_592173 != nil:
    section.add "TargetSnapshotName", valid_592173
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592174: Call_PostCopySnapshot_592158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_592174.validator(path, query, header, formData, body)
  let scheme = call_592174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592174.url(scheme.get, call_592174.host, call_592174.base,
                         call_592174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592174, url, valid)

proc call*(call_592175: Call_PostCopySnapshot_592158; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_592176 = newJObject()
  var formData_592177 = newJObject()
  add(formData_592177, "KmsKeyId", newJString(KmsKeyId))
  add(query_592176, "Action", newJString(Action))
  add(formData_592177, "TargetBucket", newJString(TargetBucket))
  add(formData_592177, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_592177, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_592176, "Version", newJString(Version))
  result = call_592175.call(nil, query_592176, nil, formData_592177, nil)

var postCopySnapshot* = Call_PostCopySnapshot_592158(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_592159,
    base: "/", url: url_PostCopySnapshot_592160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_592139 = ref object of OpenApiRestCall_591364
proc url_GetCopySnapshot_592141(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopySnapshot_592140(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_592142 = query.getOrDefault("KmsKeyId")
  valid_592142 = validateParameter(valid_592142, JString, required = false,
                                 default = nil)
  if valid_592142 != nil:
    section.add "KmsKeyId", valid_592142
  var valid_592143 = query.getOrDefault("TargetBucket")
  valid_592143 = validateParameter(valid_592143, JString, required = false,
                                 default = nil)
  if valid_592143 != nil:
    section.add "TargetBucket", valid_592143
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592144 = query.getOrDefault("Action")
  valid_592144 = validateParameter(valid_592144, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_592144 != nil:
    section.add "Action", valid_592144
  var valid_592145 = query.getOrDefault("TargetSnapshotName")
  valid_592145 = validateParameter(valid_592145, JString, required = true,
                                 default = nil)
  if valid_592145 != nil:
    section.add "TargetSnapshotName", valid_592145
  var valid_592146 = query.getOrDefault("SourceSnapshotName")
  valid_592146 = validateParameter(valid_592146, JString, required = true,
                                 default = nil)
  if valid_592146 != nil:
    section.add "SourceSnapshotName", valid_592146
  var valid_592147 = query.getOrDefault("Version")
  valid_592147 = validateParameter(valid_592147, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592147 != nil:
    section.add "Version", valid_592147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592148 = header.getOrDefault("X-Amz-Signature")
  valid_592148 = validateParameter(valid_592148, JString, required = false,
                                 default = nil)
  if valid_592148 != nil:
    section.add "X-Amz-Signature", valid_592148
  var valid_592149 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592149 = validateParameter(valid_592149, JString, required = false,
                                 default = nil)
  if valid_592149 != nil:
    section.add "X-Amz-Content-Sha256", valid_592149
  var valid_592150 = header.getOrDefault("X-Amz-Date")
  valid_592150 = validateParameter(valid_592150, JString, required = false,
                                 default = nil)
  if valid_592150 != nil:
    section.add "X-Amz-Date", valid_592150
  var valid_592151 = header.getOrDefault("X-Amz-Credential")
  valid_592151 = validateParameter(valid_592151, JString, required = false,
                                 default = nil)
  if valid_592151 != nil:
    section.add "X-Amz-Credential", valid_592151
  var valid_592152 = header.getOrDefault("X-Amz-Security-Token")
  valid_592152 = validateParameter(valid_592152, JString, required = false,
                                 default = nil)
  if valid_592152 != nil:
    section.add "X-Amz-Security-Token", valid_592152
  var valid_592153 = header.getOrDefault("X-Amz-Algorithm")
  valid_592153 = validateParameter(valid_592153, JString, required = false,
                                 default = nil)
  if valid_592153 != nil:
    section.add "X-Amz-Algorithm", valid_592153
  var valid_592154 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592154 = validateParameter(valid_592154, JString, required = false,
                                 default = nil)
  if valid_592154 != nil:
    section.add "X-Amz-SignedHeaders", valid_592154
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592155: Call_GetCopySnapshot_592139; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_592155.validator(path, query, header, formData, body)
  let scheme = call_592155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592155.url(scheme.get, call_592155.host, call_592155.base,
                         call_592155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592155, url, valid)

proc call*(call_592156: Call_GetCopySnapshot_592139; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_592157 = newJObject()
  add(query_592157, "KmsKeyId", newJString(KmsKeyId))
  add(query_592157, "TargetBucket", newJString(TargetBucket))
  add(query_592157, "Action", newJString(Action))
  add(query_592157, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_592157, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_592157, "Version", newJString(Version))
  result = call_592156.call(nil, query_592157, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_592139(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_592140,
    base: "/", url: url_GetCopySnapshot_592141, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_592216 = ref object of OpenApiRestCall_591364
proc url_PostCreateCacheCluster_592218(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheCluster_592217(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592219 = query.getOrDefault("Action")
  valid_592219 = validateParameter(valid_592219, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_592219 != nil:
    section.add "Action", valid_592219
  var valid_592220 = query.getOrDefault("Version")
  valid_592220 = validateParameter(valid_592220, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592220 != nil:
    section.add "Version", valid_592220
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592221 = header.getOrDefault("X-Amz-Signature")
  valid_592221 = validateParameter(valid_592221, JString, required = false,
                                 default = nil)
  if valid_592221 != nil:
    section.add "X-Amz-Signature", valid_592221
  var valid_592222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592222 = validateParameter(valid_592222, JString, required = false,
                                 default = nil)
  if valid_592222 != nil:
    section.add "X-Amz-Content-Sha256", valid_592222
  var valid_592223 = header.getOrDefault("X-Amz-Date")
  valid_592223 = validateParameter(valid_592223, JString, required = false,
                                 default = nil)
  if valid_592223 != nil:
    section.add "X-Amz-Date", valid_592223
  var valid_592224 = header.getOrDefault("X-Amz-Credential")
  valid_592224 = validateParameter(valid_592224, JString, required = false,
                                 default = nil)
  if valid_592224 != nil:
    section.add "X-Amz-Credential", valid_592224
  var valid_592225 = header.getOrDefault("X-Amz-Security-Token")
  valid_592225 = validateParameter(valid_592225, JString, required = false,
                                 default = nil)
  if valid_592225 != nil:
    section.add "X-Amz-Security-Token", valid_592225
  var valid_592226 = header.getOrDefault("X-Amz-Algorithm")
  valid_592226 = validateParameter(valid_592226, JString, required = false,
                                 default = nil)
  if valid_592226 != nil:
    section.add "X-Amz-Algorithm", valid_592226
  var valid_592227 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592227 = validateParameter(valid_592227, JString, required = false,
                                 default = nil)
  if valid_592227 != nil:
    section.add "X-Amz-SignedHeaders", valid_592227
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_592228 = formData.getOrDefault("SecurityGroupIds")
  valid_592228 = validateParameter(valid_592228, JArray, required = false,
                                 default = nil)
  if valid_592228 != nil:
    section.add "SecurityGroupIds", valid_592228
  var valid_592229 = formData.getOrDefault("ReplicationGroupId")
  valid_592229 = validateParameter(valid_592229, JString, required = false,
                                 default = nil)
  if valid_592229 != nil:
    section.add "ReplicationGroupId", valid_592229
  var valid_592230 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_592230 = validateParameter(valid_592230, JString, required = false,
                                 default = nil)
  if valid_592230 != nil:
    section.add "PreferredMaintenanceWindow", valid_592230
  var valid_592231 = formData.getOrDefault("Port")
  valid_592231 = validateParameter(valid_592231, JInt, required = false, default = nil)
  if valid_592231 != nil:
    section.add "Port", valid_592231
  var valid_592232 = formData.getOrDefault("NumCacheNodes")
  valid_592232 = validateParameter(valid_592232, JInt, required = false, default = nil)
  if valid_592232 != nil:
    section.add "NumCacheNodes", valid_592232
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_592233 = formData.getOrDefault("CacheClusterId")
  valid_592233 = validateParameter(valid_592233, JString, required = true,
                                 default = nil)
  if valid_592233 != nil:
    section.add "CacheClusterId", valid_592233
  var valid_592234 = formData.getOrDefault("NotificationTopicArn")
  valid_592234 = validateParameter(valid_592234, JString, required = false,
                                 default = nil)
  if valid_592234 != nil:
    section.add "NotificationTopicArn", valid_592234
  var valid_592235 = formData.getOrDefault("EngineVersion")
  valid_592235 = validateParameter(valid_592235, JString, required = false,
                                 default = nil)
  if valid_592235 != nil:
    section.add "EngineVersion", valid_592235
  var valid_592236 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_592236 = validateParameter(valid_592236, JString, required = false,
                                 default = nil)
  if valid_592236 != nil:
    section.add "PreferredAvailabilityZone", valid_592236
  var valid_592237 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_592237 = validateParameter(valid_592237, JArray, required = false,
                                 default = nil)
  if valid_592237 != nil:
    section.add "PreferredAvailabilityZones", valid_592237
  var valid_592238 = formData.getOrDefault("AZMode")
  valid_592238 = validateParameter(valid_592238, JString, required = false,
                                 default = newJString("single-az"))
  if valid_592238 != nil:
    section.add "AZMode", valid_592238
  var valid_592239 = formData.getOrDefault("Engine")
  valid_592239 = validateParameter(valid_592239, JString, required = false,
                                 default = nil)
  if valid_592239 != nil:
    section.add "Engine", valid_592239
  var valid_592240 = formData.getOrDefault("CacheParameterGroupName")
  valid_592240 = validateParameter(valid_592240, JString, required = false,
                                 default = nil)
  if valid_592240 != nil:
    section.add "CacheParameterGroupName", valid_592240
  var valid_592241 = formData.getOrDefault("SnapshotName")
  valid_592241 = validateParameter(valid_592241, JString, required = false,
                                 default = nil)
  if valid_592241 != nil:
    section.add "SnapshotName", valid_592241
  var valid_592242 = formData.getOrDefault("SnapshotArns")
  valid_592242 = validateParameter(valid_592242, JArray, required = false,
                                 default = nil)
  if valid_592242 != nil:
    section.add "SnapshotArns", valid_592242
  var valid_592243 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_592243 = validateParameter(valid_592243, JBool, required = false, default = nil)
  if valid_592243 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592243
  var valid_592244 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592244 = validateParameter(valid_592244, JString, required = false,
                                 default = nil)
  if valid_592244 != nil:
    section.add "CacheSubnetGroupName", valid_592244
  var valid_592245 = formData.getOrDefault("AuthToken")
  valid_592245 = validateParameter(valid_592245, JString, required = false,
                                 default = nil)
  if valid_592245 != nil:
    section.add "AuthToken", valid_592245
  var valid_592246 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_592246 = validateParameter(valid_592246, JArray, required = false,
                                 default = nil)
  if valid_592246 != nil:
    section.add "CacheSecurityGroupNames", valid_592246
  var valid_592247 = formData.getOrDefault("Tags")
  valid_592247 = validateParameter(valid_592247, JArray, required = false,
                                 default = nil)
  if valid_592247 != nil:
    section.add "Tags", valid_592247
  var valid_592248 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_592248 = validateParameter(valid_592248, JInt, required = false, default = nil)
  if valid_592248 != nil:
    section.add "SnapshotRetentionLimit", valid_592248
  var valid_592249 = formData.getOrDefault("CacheNodeType")
  valid_592249 = validateParameter(valid_592249, JString, required = false,
                                 default = nil)
  if valid_592249 != nil:
    section.add "CacheNodeType", valid_592249
  var valid_592250 = formData.getOrDefault("SnapshotWindow")
  valid_592250 = validateParameter(valid_592250, JString, required = false,
                                 default = nil)
  if valid_592250 != nil:
    section.add "SnapshotWindow", valid_592250
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592251: Call_PostCreateCacheCluster_592216; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_592251.validator(path, query, header, formData, body)
  let scheme = call_592251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592251.url(scheme.get, call_592251.host, call_592251.base,
                         call_592251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592251, url, valid)

proc call*(call_592252: Call_PostCreateCacheCluster_592216; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_592253 = newJObject()
  var formData_592254 = newJObject()
  if SecurityGroupIds != nil:
    formData_592254.add "SecurityGroupIds", SecurityGroupIds
  add(formData_592254, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_592254, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_592254, "Port", newJInt(Port))
  add(formData_592254, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_592254, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592254, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_592254, "EngineVersion", newJString(EngineVersion))
  add(formData_592254, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_592254.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_592254, "AZMode", newJString(AZMode))
  add(formData_592254, "Engine", newJString(Engine))
  add(formData_592254, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_592254, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_592254.add "SnapshotArns", SnapshotArns
  add(formData_592254, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_592254, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592253, "Action", newJString(Action))
  add(formData_592254, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_592254.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_592254.add "Tags", Tags
  add(formData_592254, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592253, "Version", newJString(Version))
  add(formData_592254, "CacheNodeType", newJString(CacheNodeType))
  add(formData_592254, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_592252.call(nil, query_592253, nil, formData_592254, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_592216(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_592217, base: "/",
    url: url_PostCreateCacheCluster_592218, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_592178 = ref object of OpenApiRestCall_591364
proc url_GetCreateCacheCluster_592180(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheCluster_592179(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_592181 = query.getOrDefault("SnapshotArns")
  valid_592181 = validateParameter(valid_592181, JArray, required = false,
                                 default = nil)
  if valid_592181 != nil:
    section.add "SnapshotArns", valid_592181
  var valid_592182 = query.getOrDefault("AuthToken")
  valid_592182 = validateParameter(valid_592182, JString, required = false,
                                 default = nil)
  if valid_592182 != nil:
    section.add "AuthToken", valid_592182
  var valid_592183 = query.getOrDefault("Engine")
  valid_592183 = validateParameter(valid_592183, JString, required = false,
                                 default = nil)
  if valid_592183 != nil:
    section.add "Engine", valid_592183
  var valid_592184 = query.getOrDefault("CacheParameterGroupName")
  valid_592184 = validateParameter(valid_592184, JString, required = false,
                                 default = nil)
  if valid_592184 != nil:
    section.add "CacheParameterGroupName", valid_592184
  var valid_592185 = query.getOrDefault("Tags")
  valid_592185 = validateParameter(valid_592185, JArray, required = false,
                                 default = nil)
  if valid_592185 != nil:
    section.add "Tags", valid_592185
  var valid_592186 = query.getOrDefault("AZMode")
  valid_592186 = validateParameter(valid_592186, JString, required = false,
                                 default = newJString("single-az"))
  if valid_592186 != nil:
    section.add "AZMode", valid_592186
  var valid_592187 = query.getOrDefault("NumCacheNodes")
  valid_592187 = validateParameter(valid_592187, JInt, required = false, default = nil)
  if valid_592187 != nil:
    section.add "NumCacheNodes", valid_592187
  var valid_592188 = query.getOrDefault("SnapshotRetentionLimit")
  valid_592188 = validateParameter(valid_592188, JInt, required = false, default = nil)
  if valid_592188 != nil:
    section.add "SnapshotRetentionLimit", valid_592188
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_592189 = query.getOrDefault("CacheClusterId")
  valid_592189 = validateParameter(valid_592189, JString, required = true,
                                 default = nil)
  if valid_592189 != nil:
    section.add "CacheClusterId", valid_592189
  var valid_592190 = query.getOrDefault("PreferredAvailabilityZone")
  valid_592190 = validateParameter(valid_592190, JString, required = false,
                                 default = nil)
  if valid_592190 != nil:
    section.add "PreferredAvailabilityZone", valid_592190
  var valid_592191 = query.getOrDefault("CacheSecurityGroupNames")
  valid_592191 = validateParameter(valid_592191, JArray, required = false,
                                 default = nil)
  if valid_592191 != nil:
    section.add "CacheSecurityGroupNames", valid_592191
  var valid_592192 = query.getOrDefault("CacheNodeType")
  valid_592192 = validateParameter(valid_592192, JString, required = false,
                                 default = nil)
  if valid_592192 != nil:
    section.add "CacheNodeType", valid_592192
  var valid_592193 = query.getOrDefault("EngineVersion")
  valid_592193 = validateParameter(valid_592193, JString, required = false,
                                 default = nil)
  if valid_592193 != nil:
    section.add "EngineVersion", valid_592193
  var valid_592194 = query.getOrDefault("Action")
  valid_592194 = validateParameter(valid_592194, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_592194 != nil:
    section.add "Action", valid_592194
  var valid_592195 = query.getOrDefault("Port")
  valid_592195 = validateParameter(valid_592195, JInt, required = false, default = nil)
  if valid_592195 != nil:
    section.add "Port", valid_592195
  var valid_592196 = query.getOrDefault("ReplicationGroupId")
  valid_592196 = validateParameter(valid_592196, JString, required = false,
                                 default = nil)
  if valid_592196 != nil:
    section.add "ReplicationGroupId", valid_592196
  var valid_592197 = query.getOrDefault("CacheSubnetGroupName")
  valid_592197 = validateParameter(valid_592197, JString, required = false,
                                 default = nil)
  if valid_592197 != nil:
    section.add "CacheSubnetGroupName", valid_592197
  var valid_592198 = query.getOrDefault("NotificationTopicArn")
  valid_592198 = validateParameter(valid_592198, JString, required = false,
                                 default = nil)
  if valid_592198 != nil:
    section.add "NotificationTopicArn", valid_592198
  var valid_592199 = query.getOrDefault("PreferredAvailabilityZones")
  valid_592199 = validateParameter(valid_592199, JArray, required = false,
                                 default = nil)
  if valid_592199 != nil:
    section.add "PreferredAvailabilityZones", valid_592199
  var valid_592200 = query.getOrDefault("Version")
  valid_592200 = validateParameter(valid_592200, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592200 != nil:
    section.add "Version", valid_592200
  var valid_592201 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_592201 = validateParameter(valid_592201, JString, required = false,
                                 default = nil)
  if valid_592201 != nil:
    section.add "PreferredMaintenanceWindow", valid_592201
  var valid_592202 = query.getOrDefault("SnapshotName")
  valid_592202 = validateParameter(valid_592202, JString, required = false,
                                 default = nil)
  if valid_592202 != nil:
    section.add "SnapshotName", valid_592202
  var valid_592203 = query.getOrDefault("SnapshotWindow")
  valid_592203 = validateParameter(valid_592203, JString, required = false,
                                 default = nil)
  if valid_592203 != nil:
    section.add "SnapshotWindow", valid_592203
  var valid_592204 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_592204 = validateParameter(valid_592204, JBool, required = false, default = nil)
  if valid_592204 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592204
  var valid_592205 = query.getOrDefault("SecurityGroupIds")
  valid_592205 = validateParameter(valid_592205, JArray, required = false,
                                 default = nil)
  if valid_592205 != nil:
    section.add "SecurityGroupIds", valid_592205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592206 = header.getOrDefault("X-Amz-Signature")
  valid_592206 = validateParameter(valid_592206, JString, required = false,
                                 default = nil)
  if valid_592206 != nil:
    section.add "X-Amz-Signature", valid_592206
  var valid_592207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592207 = validateParameter(valid_592207, JString, required = false,
                                 default = nil)
  if valid_592207 != nil:
    section.add "X-Amz-Content-Sha256", valid_592207
  var valid_592208 = header.getOrDefault("X-Amz-Date")
  valid_592208 = validateParameter(valid_592208, JString, required = false,
                                 default = nil)
  if valid_592208 != nil:
    section.add "X-Amz-Date", valid_592208
  var valid_592209 = header.getOrDefault("X-Amz-Credential")
  valid_592209 = validateParameter(valid_592209, JString, required = false,
                                 default = nil)
  if valid_592209 != nil:
    section.add "X-Amz-Credential", valid_592209
  var valid_592210 = header.getOrDefault("X-Amz-Security-Token")
  valid_592210 = validateParameter(valid_592210, JString, required = false,
                                 default = nil)
  if valid_592210 != nil:
    section.add "X-Amz-Security-Token", valid_592210
  var valid_592211 = header.getOrDefault("X-Amz-Algorithm")
  valid_592211 = validateParameter(valid_592211, JString, required = false,
                                 default = nil)
  if valid_592211 != nil:
    section.add "X-Amz-Algorithm", valid_592211
  var valid_592212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592212 = validateParameter(valid_592212, JString, required = false,
                                 default = nil)
  if valid_592212 != nil:
    section.add "X-Amz-SignedHeaders", valid_592212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592213: Call_GetCreateCacheCluster_592178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_592213.validator(path, query, header, formData, body)
  let scheme = call_592213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592213.url(scheme.get, call_592213.host, call_592213.base,
                         call_592213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592213, url, valid)

proc call*(call_592214: Call_GetCreateCacheCluster_592178; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_592215 = newJObject()
  if SnapshotArns != nil:
    query_592215.add "SnapshotArns", SnapshotArns
  add(query_592215, "AuthToken", newJString(AuthToken))
  add(query_592215, "Engine", newJString(Engine))
  add(query_592215, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_592215.add "Tags", Tags
  add(query_592215, "AZMode", newJString(AZMode))
  add(query_592215, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_592215, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592215, "CacheClusterId", newJString(CacheClusterId))
  add(query_592215, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_592215.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_592215, "CacheNodeType", newJString(CacheNodeType))
  add(query_592215, "EngineVersion", newJString(EngineVersion))
  add(query_592215, "Action", newJString(Action))
  add(query_592215, "Port", newJInt(Port))
  add(query_592215, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592215, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592215, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_592215.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_592215, "Version", newJString(Version))
  add(query_592215, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_592215, "SnapshotName", newJString(SnapshotName))
  add(query_592215, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_592215, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_592215.add "SecurityGroupIds", SecurityGroupIds
  result = call_592214.call(nil, query_592215, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_592178(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_592179, base: "/",
    url: url_GetCreateCacheCluster_592180, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_592273 = ref object of OpenApiRestCall_591364
proc url_PostCreateCacheParameterGroup_592275(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheParameterGroup_592274(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592276 = query.getOrDefault("Action")
  valid_592276 = validateParameter(valid_592276, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_592276 != nil:
    section.add "Action", valid_592276
  var valid_592277 = query.getOrDefault("Version")
  valid_592277 = validateParameter(valid_592277, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592277 != nil:
    section.add "Version", valid_592277
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592278 = header.getOrDefault("X-Amz-Signature")
  valid_592278 = validateParameter(valid_592278, JString, required = false,
                                 default = nil)
  if valid_592278 != nil:
    section.add "X-Amz-Signature", valid_592278
  var valid_592279 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592279 = validateParameter(valid_592279, JString, required = false,
                                 default = nil)
  if valid_592279 != nil:
    section.add "X-Amz-Content-Sha256", valid_592279
  var valid_592280 = header.getOrDefault("X-Amz-Date")
  valid_592280 = validateParameter(valid_592280, JString, required = false,
                                 default = nil)
  if valid_592280 != nil:
    section.add "X-Amz-Date", valid_592280
  var valid_592281 = header.getOrDefault("X-Amz-Credential")
  valid_592281 = validateParameter(valid_592281, JString, required = false,
                                 default = nil)
  if valid_592281 != nil:
    section.add "X-Amz-Credential", valid_592281
  var valid_592282 = header.getOrDefault("X-Amz-Security-Token")
  valid_592282 = validateParameter(valid_592282, JString, required = false,
                                 default = nil)
  if valid_592282 != nil:
    section.add "X-Amz-Security-Token", valid_592282
  var valid_592283 = header.getOrDefault("X-Amz-Algorithm")
  valid_592283 = validateParameter(valid_592283, JString, required = false,
                                 default = nil)
  if valid_592283 != nil:
    section.add "X-Amz-Algorithm", valid_592283
  var valid_592284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592284 = validateParameter(valid_592284, JString, required = false,
                                 default = nil)
  if valid_592284 != nil:
    section.add "X-Amz-SignedHeaders", valid_592284
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_592285 = formData.getOrDefault("Description")
  valid_592285 = validateParameter(valid_592285, JString, required = true,
                                 default = nil)
  if valid_592285 != nil:
    section.add "Description", valid_592285
  var valid_592286 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_592286 = validateParameter(valid_592286, JString, required = true,
                                 default = nil)
  if valid_592286 != nil:
    section.add "CacheParameterGroupFamily", valid_592286
  var valid_592287 = formData.getOrDefault("CacheParameterGroupName")
  valid_592287 = validateParameter(valid_592287, JString, required = true,
                                 default = nil)
  if valid_592287 != nil:
    section.add "CacheParameterGroupName", valid_592287
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592288: Call_PostCreateCacheParameterGroup_592273; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_592288.validator(path, query, header, formData, body)
  let scheme = call_592288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592288.url(scheme.get, call_592288.host, call_592288.base,
                         call_592288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592288, url, valid)

proc call*(call_592289: Call_PostCreateCacheParameterGroup_592273;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592290 = newJObject()
  var formData_592291 = newJObject()
  add(formData_592291, "Description", newJString(Description))
  add(formData_592291, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_592291, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592290, "Action", newJString(Action))
  add(query_592290, "Version", newJString(Version))
  result = call_592289.call(nil, query_592290, nil, formData_592291, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_592273(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_592274, base: "/",
    url: url_PostCreateCacheParameterGroup_592275,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_592255 = ref object of OpenApiRestCall_591364
proc url_GetCreateCacheParameterGroup_592257(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheParameterGroup_592256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592258 = query.getOrDefault("CacheParameterGroupName")
  valid_592258 = validateParameter(valid_592258, JString, required = true,
                                 default = nil)
  if valid_592258 != nil:
    section.add "CacheParameterGroupName", valid_592258
  var valid_592259 = query.getOrDefault("CacheParameterGroupFamily")
  valid_592259 = validateParameter(valid_592259, JString, required = true,
                                 default = nil)
  if valid_592259 != nil:
    section.add "CacheParameterGroupFamily", valid_592259
  var valid_592260 = query.getOrDefault("Action")
  valid_592260 = validateParameter(valid_592260, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_592260 != nil:
    section.add "Action", valid_592260
  var valid_592261 = query.getOrDefault("Description")
  valid_592261 = validateParameter(valid_592261, JString, required = true,
                                 default = nil)
  if valid_592261 != nil:
    section.add "Description", valid_592261
  var valid_592262 = query.getOrDefault("Version")
  valid_592262 = validateParameter(valid_592262, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592262 != nil:
    section.add "Version", valid_592262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592263 = header.getOrDefault("X-Amz-Signature")
  valid_592263 = validateParameter(valid_592263, JString, required = false,
                                 default = nil)
  if valid_592263 != nil:
    section.add "X-Amz-Signature", valid_592263
  var valid_592264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592264 = validateParameter(valid_592264, JString, required = false,
                                 default = nil)
  if valid_592264 != nil:
    section.add "X-Amz-Content-Sha256", valid_592264
  var valid_592265 = header.getOrDefault("X-Amz-Date")
  valid_592265 = validateParameter(valid_592265, JString, required = false,
                                 default = nil)
  if valid_592265 != nil:
    section.add "X-Amz-Date", valid_592265
  var valid_592266 = header.getOrDefault("X-Amz-Credential")
  valid_592266 = validateParameter(valid_592266, JString, required = false,
                                 default = nil)
  if valid_592266 != nil:
    section.add "X-Amz-Credential", valid_592266
  var valid_592267 = header.getOrDefault("X-Amz-Security-Token")
  valid_592267 = validateParameter(valid_592267, JString, required = false,
                                 default = nil)
  if valid_592267 != nil:
    section.add "X-Amz-Security-Token", valid_592267
  var valid_592268 = header.getOrDefault("X-Amz-Algorithm")
  valid_592268 = validateParameter(valid_592268, JString, required = false,
                                 default = nil)
  if valid_592268 != nil:
    section.add "X-Amz-Algorithm", valid_592268
  var valid_592269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592269 = validateParameter(valid_592269, JString, required = false,
                                 default = nil)
  if valid_592269 != nil:
    section.add "X-Amz-SignedHeaders", valid_592269
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592270: Call_GetCreateCacheParameterGroup_592255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_592270.validator(path, query, header, formData, body)
  let scheme = call_592270.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592270.url(scheme.get, call_592270.host, call_592270.base,
                         call_592270.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592270, url, valid)

proc call*(call_592271: Call_GetCreateCacheParameterGroup_592255;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_592272 = newJObject()
  add(query_592272, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592272, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_592272, "Action", newJString(Action))
  add(query_592272, "Description", newJString(Description))
  add(query_592272, "Version", newJString(Version))
  result = call_592271.call(nil, query_592272, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_592255(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_592256, base: "/",
    url: url_GetCreateCacheParameterGroup_592257,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_592309 = ref object of OpenApiRestCall_591364
proc url_PostCreateCacheSecurityGroup_592311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSecurityGroup_592310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592312 = query.getOrDefault("Action")
  valid_592312 = validateParameter(valid_592312, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_592312 != nil:
    section.add "Action", valid_592312
  var valid_592313 = query.getOrDefault("Version")
  valid_592313 = validateParameter(valid_592313, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592313 != nil:
    section.add "Version", valid_592313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592314 = header.getOrDefault("X-Amz-Signature")
  valid_592314 = validateParameter(valid_592314, JString, required = false,
                                 default = nil)
  if valid_592314 != nil:
    section.add "X-Amz-Signature", valid_592314
  var valid_592315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592315 = validateParameter(valid_592315, JString, required = false,
                                 default = nil)
  if valid_592315 != nil:
    section.add "X-Amz-Content-Sha256", valid_592315
  var valid_592316 = header.getOrDefault("X-Amz-Date")
  valid_592316 = validateParameter(valid_592316, JString, required = false,
                                 default = nil)
  if valid_592316 != nil:
    section.add "X-Amz-Date", valid_592316
  var valid_592317 = header.getOrDefault("X-Amz-Credential")
  valid_592317 = validateParameter(valid_592317, JString, required = false,
                                 default = nil)
  if valid_592317 != nil:
    section.add "X-Amz-Credential", valid_592317
  var valid_592318 = header.getOrDefault("X-Amz-Security-Token")
  valid_592318 = validateParameter(valid_592318, JString, required = false,
                                 default = nil)
  if valid_592318 != nil:
    section.add "X-Amz-Security-Token", valid_592318
  var valid_592319 = header.getOrDefault("X-Amz-Algorithm")
  valid_592319 = validateParameter(valid_592319, JString, required = false,
                                 default = nil)
  if valid_592319 != nil:
    section.add "X-Amz-Algorithm", valid_592319
  var valid_592320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592320 = validateParameter(valid_592320, JString, required = false,
                                 default = nil)
  if valid_592320 != nil:
    section.add "X-Amz-SignedHeaders", valid_592320
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_592321 = formData.getOrDefault("Description")
  valid_592321 = validateParameter(valid_592321, JString, required = true,
                                 default = nil)
  if valid_592321 != nil:
    section.add "Description", valid_592321
  var valid_592322 = formData.getOrDefault("CacheSecurityGroupName")
  valid_592322 = validateParameter(valid_592322, JString, required = true,
                                 default = nil)
  if valid_592322 != nil:
    section.add "CacheSecurityGroupName", valid_592322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592323: Call_PostCreateCacheSecurityGroup_592309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_592323.validator(path, query, header, formData, body)
  let scheme = call_592323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592323.url(scheme.get, call_592323.host, call_592323.base,
                         call_592323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592323, url, valid)

proc call*(call_592324: Call_PostCreateCacheSecurityGroup_592309;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592325 = newJObject()
  var formData_592326 = newJObject()
  add(formData_592326, "Description", newJString(Description))
  add(formData_592326, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_592325, "Action", newJString(Action))
  add(query_592325, "Version", newJString(Version))
  result = call_592324.call(nil, query_592325, nil, formData_592326, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_592309(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_592310, base: "/",
    url: url_PostCreateCacheSecurityGroup_592311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_592292 = ref object of OpenApiRestCall_591364
proc url_GetCreateCacheSecurityGroup_592294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSecurityGroup_592293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592295 = query.getOrDefault("Action")
  valid_592295 = validateParameter(valid_592295, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_592295 != nil:
    section.add "Action", valid_592295
  var valid_592296 = query.getOrDefault("Description")
  valid_592296 = validateParameter(valid_592296, JString, required = true,
                                 default = nil)
  if valid_592296 != nil:
    section.add "Description", valid_592296
  var valid_592297 = query.getOrDefault("CacheSecurityGroupName")
  valid_592297 = validateParameter(valid_592297, JString, required = true,
                                 default = nil)
  if valid_592297 != nil:
    section.add "CacheSecurityGroupName", valid_592297
  var valid_592298 = query.getOrDefault("Version")
  valid_592298 = validateParameter(valid_592298, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592298 != nil:
    section.add "Version", valid_592298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592299 = header.getOrDefault("X-Amz-Signature")
  valid_592299 = validateParameter(valid_592299, JString, required = false,
                                 default = nil)
  if valid_592299 != nil:
    section.add "X-Amz-Signature", valid_592299
  var valid_592300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592300 = validateParameter(valid_592300, JString, required = false,
                                 default = nil)
  if valid_592300 != nil:
    section.add "X-Amz-Content-Sha256", valid_592300
  var valid_592301 = header.getOrDefault("X-Amz-Date")
  valid_592301 = validateParameter(valid_592301, JString, required = false,
                                 default = nil)
  if valid_592301 != nil:
    section.add "X-Amz-Date", valid_592301
  var valid_592302 = header.getOrDefault("X-Amz-Credential")
  valid_592302 = validateParameter(valid_592302, JString, required = false,
                                 default = nil)
  if valid_592302 != nil:
    section.add "X-Amz-Credential", valid_592302
  var valid_592303 = header.getOrDefault("X-Amz-Security-Token")
  valid_592303 = validateParameter(valid_592303, JString, required = false,
                                 default = nil)
  if valid_592303 != nil:
    section.add "X-Amz-Security-Token", valid_592303
  var valid_592304 = header.getOrDefault("X-Amz-Algorithm")
  valid_592304 = validateParameter(valid_592304, JString, required = false,
                                 default = nil)
  if valid_592304 != nil:
    section.add "X-Amz-Algorithm", valid_592304
  var valid_592305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592305 = validateParameter(valid_592305, JString, required = false,
                                 default = nil)
  if valid_592305 != nil:
    section.add "X-Amz-SignedHeaders", valid_592305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592306: Call_GetCreateCacheSecurityGroup_592292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_592306.validator(path, query, header, formData, body)
  let scheme = call_592306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592306.url(scheme.get, call_592306.host, call_592306.base,
                         call_592306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592306, url, valid)

proc call*(call_592307: Call_GetCreateCacheSecurityGroup_592292;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_592308 = newJObject()
  add(query_592308, "Action", newJString(Action))
  add(query_592308, "Description", newJString(Description))
  add(query_592308, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_592308, "Version", newJString(Version))
  result = call_592307.call(nil, query_592308, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_592292(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_592293, base: "/",
    url: url_GetCreateCacheSecurityGroup_592294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_592345 = ref object of OpenApiRestCall_591364
proc url_PostCreateCacheSubnetGroup_592347(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSubnetGroup_592346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592348 = query.getOrDefault("Action")
  valid_592348 = validateParameter(valid_592348, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_592348 != nil:
    section.add "Action", valid_592348
  var valid_592349 = query.getOrDefault("Version")
  valid_592349 = validateParameter(valid_592349, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592349 != nil:
    section.add "Version", valid_592349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592350 = header.getOrDefault("X-Amz-Signature")
  valid_592350 = validateParameter(valid_592350, JString, required = false,
                                 default = nil)
  if valid_592350 != nil:
    section.add "X-Amz-Signature", valid_592350
  var valid_592351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592351 = validateParameter(valid_592351, JString, required = false,
                                 default = nil)
  if valid_592351 != nil:
    section.add "X-Amz-Content-Sha256", valid_592351
  var valid_592352 = header.getOrDefault("X-Amz-Date")
  valid_592352 = validateParameter(valid_592352, JString, required = false,
                                 default = nil)
  if valid_592352 != nil:
    section.add "X-Amz-Date", valid_592352
  var valid_592353 = header.getOrDefault("X-Amz-Credential")
  valid_592353 = validateParameter(valid_592353, JString, required = false,
                                 default = nil)
  if valid_592353 != nil:
    section.add "X-Amz-Credential", valid_592353
  var valid_592354 = header.getOrDefault("X-Amz-Security-Token")
  valid_592354 = validateParameter(valid_592354, JString, required = false,
                                 default = nil)
  if valid_592354 != nil:
    section.add "X-Amz-Security-Token", valid_592354
  var valid_592355 = header.getOrDefault("X-Amz-Algorithm")
  valid_592355 = validateParameter(valid_592355, JString, required = false,
                                 default = nil)
  if valid_592355 != nil:
    section.add "X-Amz-Algorithm", valid_592355
  var valid_592356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592356 = validateParameter(valid_592356, JString, required = false,
                                 default = nil)
  if valid_592356 != nil:
    section.add "X-Amz-SignedHeaders", valid_592356
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_592357 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_592357 = validateParameter(valid_592357, JString, required = true,
                                 default = nil)
  if valid_592357 != nil:
    section.add "CacheSubnetGroupDescription", valid_592357
  var valid_592358 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592358 = validateParameter(valid_592358, JString, required = true,
                                 default = nil)
  if valid_592358 != nil:
    section.add "CacheSubnetGroupName", valid_592358
  var valid_592359 = formData.getOrDefault("SubnetIds")
  valid_592359 = validateParameter(valid_592359, JArray, required = true, default = nil)
  if valid_592359 != nil:
    section.add "SubnetIds", valid_592359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592360: Call_PostCreateCacheSubnetGroup_592345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_592360.validator(path, query, header, formData, body)
  let scheme = call_592360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592360.url(scheme.get, call_592360.host, call_592360.base,
                         call_592360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592360, url, valid)

proc call*(call_592361: Call_PostCreateCacheSubnetGroup_592345;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_592362 = newJObject()
  var formData_592363 = newJObject()
  add(formData_592363, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_592363, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592362, "Action", newJString(Action))
  add(query_592362, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_592363.add "SubnetIds", SubnetIds
  result = call_592361.call(nil, query_592362, nil, formData_592363, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_592345(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_592346, base: "/",
    url: url_PostCreateCacheSubnetGroup_592347,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_592327 = ref object of OpenApiRestCall_591364
proc url_GetCreateCacheSubnetGroup_592329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSubnetGroup_592328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_592330 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_592330 = validateParameter(valid_592330, JString, required = true,
                                 default = nil)
  if valid_592330 != nil:
    section.add "CacheSubnetGroupDescription", valid_592330
  var valid_592331 = query.getOrDefault("SubnetIds")
  valid_592331 = validateParameter(valid_592331, JArray, required = true, default = nil)
  if valid_592331 != nil:
    section.add "SubnetIds", valid_592331
  var valid_592332 = query.getOrDefault("Action")
  valid_592332 = validateParameter(valid_592332, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_592332 != nil:
    section.add "Action", valid_592332
  var valid_592333 = query.getOrDefault("CacheSubnetGroupName")
  valid_592333 = validateParameter(valid_592333, JString, required = true,
                                 default = nil)
  if valid_592333 != nil:
    section.add "CacheSubnetGroupName", valid_592333
  var valid_592334 = query.getOrDefault("Version")
  valid_592334 = validateParameter(valid_592334, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592334 != nil:
    section.add "Version", valid_592334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592335 = header.getOrDefault("X-Amz-Signature")
  valid_592335 = validateParameter(valid_592335, JString, required = false,
                                 default = nil)
  if valid_592335 != nil:
    section.add "X-Amz-Signature", valid_592335
  var valid_592336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592336 = validateParameter(valid_592336, JString, required = false,
                                 default = nil)
  if valid_592336 != nil:
    section.add "X-Amz-Content-Sha256", valid_592336
  var valid_592337 = header.getOrDefault("X-Amz-Date")
  valid_592337 = validateParameter(valid_592337, JString, required = false,
                                 default = nil)
  if valid_592337 != nil:
    section.add "X-Amz-Date", valid_592337
  var valid_592338 = header.getOrDefault("X-Amz-Credential")
  valid_592338 = validateParameter(valid_592338, JString, required = false,
                                 default = nil)
  if valid_592338 != nil:
    section.add "X-Amz-Credential", valid_592338
  var valid_592339 = header.getOrDefault("X-Amz-Security-Token")
  valid_592339 = validateParameter(valid_592339, JString, required = false,
                                 default = nil)
  if valid_592339 != nil:
    section.add "X-Amz-Security-Token", valid_592339
  var valid_592340 = header.getOrDefault("X-Amz-Algorithm")
  valid_592340 = validateParameter(valid_592340, JString, required = false,
                                 default = nil)
  if valid_592340 != nil:
    section.add "X-Amz-Algorithm", valid_592340
  var valid_592341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592341 = validateParameter(valid_592341, JString, required = false,
                                 default = nil)
  if valid_592341 != nil:
    section.add "X-Amz-SignedHeaders", valid_592341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592342: Call_GetCreateCacheSubnetGroup_592327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_592342.validator(path, query, header, formData, body)
  let scheme = call_592342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592342.url(scheme.get, call_592342.host, call_592342.base,
                         call_592342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592342, url, valid)

proc call*(call_592343: Call_GetCreateCacheSubnetGroup_592327;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_592344 = newJObject()
  add(query_592344, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_592344.add "SubnetIds", SubnetIds
  add(query_592344, "Action", newJString(Action))
  add(query_592344, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592344, "Version", newJString(Version))
  result = call_592343.call(nil, query_592344, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_592327(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_592328, base: "/",
    url: url_GetCreateCacheSubnetGroup_592329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_592408 = ref object of OpenApiRestCall_591364
proc url_PostCreateReplicationGroup_592410(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReplicationGroup_592409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592411 = query.getOrDefault("Action")
  valid_592411 = validateParameter(valid_592411, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_592411 != nil:
    section.add "Action", valid_592411
  var valid_592412 = query.getOrDefault("Version")
  valid_592412 = validateParameter(valid_592412, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592412 != nil:
    section.add "Version", valid_592412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592413 = header.getOrDefault("X-Amz-Signature")
  valid_592413 = validateParameter(valid_592413, JString, required = false,
                                 default = nil)
  if valid_592413 != nil:
    section.add "X-Amz-Signature", valid_592413
  var valid_592414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592414 = validateParameter(valid_592414, JString, required = false,
                                 default = nil)
  if valid_592414 != nil:
    section.add "X-Amz-Content-Sha256", valid_592414
  var valid_592415 = header.getOrDefault("X-Amz-Date")
  valid_592415 = validateParameter(valid_592415, JString, required = false,
                                 default = nil)
  if valid_592415 != nil:
    section.add "X-Amz-Date", valid_592415
  var valid_592416 = header.getOrDefault("X-Amz-Credential")
  valid_592416 = validateParameter(valid_592416, JString, required = false,
                                 default = nil)
  if valid_592416 != nil:
    section.add "X-Amz-Credential", valid_592416
  var valid_592417 = header.getOrDefault("X-Amz-Security-Token")
  valid_592417 = validateParameter(valid_592417, JString, required = false,
                                 default = nil)
  if valid_592417 != nil:
    section.add "X-Amz-Security-Token", valid_592417
  var valid_592418 = header.getOrDefault("X-Amz-Algorithm")
  valid_592418 = validateParameter(valid_592418, JString, required = false,
                                 default = nil)
  if valid_592418 != nil:
    section.add "X-Amz-Algorithm", valid_592418
  var valid_592419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592419 = validateParameter(valid_592419, JString, required = false,
                                 default = nil)
  if valid_592419 != nil:
    section.add "X-Amz-SignedHeaders", valid_592419
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_592420 = formData.getOrDefault("SecurityGroupIds")
  valid_592420 = validateParameter(valid_592420, JArray, required = false,
                                 default = nil)
  if valid_592420 != nil:
    section.add "SecurityGroupIds", valid_592420
  var valid_592421 = formData.getOrDefault("SnapshotWindow")
  valid_592421 = validateParameter(valid_592421, JString, required = false,
                                 default = nil)
  if valid_592421 != nil:
    section.add "SnapshotWindow", valid_592421
  var valid_592422 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_592422 = validateParameter(valid_592422, JString, required = false,
                                 default = nil)
  if valid_592422 != nil:
    section.add "PreferredMaintenanceWindow", valid_592422
  var valid_592423 = formData.getOrDefault("Port")
  valid_592423 = validateParameter(valid_592423, JInt, required = false, default = nil)
  if valid_592423 != nil:
    section.add "Port", valid_592423
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_592424 = formData.getOrDefault("ReplicationGroupId")
  valid_592424 = validateParameter(valid_592424, JString, required = true,
                                 default = nil)
  if valid_592424 != nil:
    section.add "ReplicationGroupId", valid_592424
  var valid_592425 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_592425 = validateParameter(valid_592425, JArray, required = false,
                                 default = nil)
  if valid_592425 != nil:
    section.add "PreferredCacheClusterAZs", valid_592425
  var valid_592426 = formData.getOrDefault("PrimaryClusterId")
  valid_592426 = validateParameter(valid_592426, JString, required = false,
                                 default = nil)
  if valid_592426 != nil:
    section.add "PrimaryClusterId", valid_592426
  var valid_592427 = formData.getOrDefault("NotificationTopicArn")
  valid_592427 = validateParameter(valid_592427, JString, required = false,
                                 default = nil)
  if valid_592427 != nil:
    section.add "NotificationTopicArn", valid_592427
  var valid_592428 = formData.getOrDefault("EngineVersion")
  valid_592428 = validateParameter(valid_592428, JString, required = false,
                                 default = nil)
  if valid_592428 != nil:
    section.add "EngineVersion", valid_592428
  var valid_592429 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_592429 = validateParameter(valid_592429, JBool, required = false, default = nil)
  if valid_592429 != nil:
    section.add "TransitEncryptionEnabled", valid_592429
  var valid_592430 = formData.getOrDefault("KmsKeyId")
  valid_592430 = validateParameter(valid_592430, JString, required = false,
                                 default = nil)
  if valid_592430 != nil:
    section.add "KmsKeyId", valid_592430
  var valid_592431 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_592431 = validateParameter(valid_592431, JBool, required = false, default = nil)
  if valid_592431 != nil:
    section.add "AutomaticFailoverEnabled", valid_592431
  var valid_592432 = formData.getOrDefault("Engine")
  valid_592432 = validateParameter(valid_592432, JString, required = false,
                                 default = nil)
  if valid_592432 != nil:
    section.add "Engine", valid_592432
  var valid_592433 = formData.getOrDefault("NumNodeGroups")
  valid_592433 = validateParameter(valid_592433, JInt, required = false, default = nil)
  if valid_592433 != nil:
    section.add "NumNodeGroups", valid_592433
  var valid_592434 = formData.getOrDefault("CacheParameterGroupName")
  valid_592434 = validateParameter(valid_592434, JString, required = false,
                                 default = nil)
  if valid_592434 != nil:
    section.add "CacheParameterGroupName", valid_592434
  var valid_592435 = formData.getOrDefault("SnapshotArns")
  valid_592435 = validateParameter(valid_592435, JArray, required = false,
                                 default = nil)
  if valid_592435 != nil:
    section.add "SnapshotArns", valid_592435
  var valid_592436 = formData.getOrDefault("SnapshotName")
  valid_592436 = validateParameter(valid_592436, JString, required = false,
                                 default = nil)
  if valid_592436 != nil:
    section.add "SnapshotName", valid_592436
  var valid_592437 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_592437 = validateParameter(valid_592437, JBool, required = false, default = nil)
  if valid_592437 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592437
  var valid_592438 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_592438 = validateParameter(valid_592438, JBool, required = false, default = nil)
  if valid_592438 != nil:
    section.add "AtRestEncryptionEnabled", valid_592438
  var valid_592439 = formData.getOrDefault("NodeGroupConfiguration")
  valid_592439 = validateParameter(valid_592439, JArray, required = false,
                                 default = nil)
  if valid_592439 != nil:
    section.add "NodeGroupConfiguration", valid_592439
  var valid_592440 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592440 = validateParameter(valid_592440, JString, required = false,
                                 default = nil)
  if valid_592440 != nil:
    section.add "CacheSubnetGroupName", valid_592440
  var valid_592441 = formData.getOrDefault("AuthToken")
  valid_592441 = validateParameter(valid_592441, JString, required = false,
                                 default = nil)
  if valid_592441 != nil:
    section.add "AuthToken", valid_592441
  var valid_592442 = formData.getOrDefault("ReplicationGroupDescription")
  valid_592442 = validateParameter(valid_592442, JString, required = true,
                                 default = nil)
  if valid_592442 != nil:
    section.add "ReplicationGroupDescription", valid_592442
  var valid_592443 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_592443 = validateParameter(valid_592443, JArray, required = false,
                                 default = nil)
  if valid_592443 != nil:
    section.add "CacheSecurityGroupNames", valid_592443
  var valid_592444 = formData.getOrDefault("Tags")
  valid_592444 = validateParameter(valid_592444, JArray, required = false,
                                 default = nil)
  if valid_592444 != nil:
    section.add "Tags", valid_592444
  var valid_592445 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_592445 = validateParameter(valid_592445, JInt, required = false, default = nil)
  if valid_592445 != nil:
    section.add "SnapshotRetentionLimit", valid_592445
  var valid_592446 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_592446 = validateParameter(valid_592446, JInt, required = false, default = nil)
  if valid_592446 != nil:
    section.add "ReplicasPerNodeGroup", valid_592446
  var valid_592447 = formData.getOrDefault("CacheNodeType")
  valid_592447 = validateParameter(valid_592447, JString, required = false,
                                 default = nil)
  if valid_592447 != nil:
    section.add "CacheNodeType", valid_592447
  var valid_592448 = formData.getOrDefault("NumCacheClusters")
  valid_592448 = validateParameter(valid_592448, JInt, required = false, default = nil)
  if valid_592448 != nil:
    section.add "NumCacheClusters", valid_592448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592449: Call_PostCreateReplicationGroup_592408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592449.validator(path, query, header, formData, body)
  let scheme = call_592449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592449.url(scheme.get, call_592449.host, call_592449.base,
                         call_592449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592449, url, valid)

proc call*(call_592450: Call_PostCreateReplicationGroup_592408;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_592451 = newJObject()
  var formData_592452 = newJObject()
  if SecurityGroupIds != nil:
    formData_592452.add "SecurityGroupIds", SecurityGroupIds
  add(formData_592452, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_592452, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_592452, "Port", newJInt(Port))
  add(formData_592452, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_592452.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_592452, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_592452, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_592452, "EngineVersion", newJString(EngineVersion))
  add(formData_592452, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_592452, "KmsKeyId", newJString(KmsKeyId))
  add(formData_592452, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_592452, "Engine", newJString(Engine))
  add(formData_592452, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_592452, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_592452.add "SnapshotArns", SnapshotArns
  add(formData_592452, "SnapshotName", newJString(SnapshotName))
  add(formData_592452, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_592452, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_592452.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_592452, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592451, "Action", newJString(Action))
  add(formData_592452, "AuthToken", newJString(AuthToken))
  add(formData_592452, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_592452.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_592452.add "Tags", Tags
  add(formData_592452, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_592452, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_592451, "Version", newJString(Version))
  add(formData_592452, "CacheNodeType", newJString(CacheNodeType))
  add(formData_592452, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_592450.call(nil, query_592451, nil, formData_592452, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_592408(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_592409, base: "/",
    url: url_PostCreateReplicationGroup_592410,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_592364 = ref object of OpenApiRestCall_591364
proc url_GetCreateReplicationGroup_592366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReplicationGroup_592365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_592367 = query.getOrDefault("SnapshotArns")
  valid_592367 = validateParameter(valid_592367, JArray, required = false,
                                 default = nil)
  if valid_592367 != nil:
    section.add "SnapshotArns", valid_592367
  var valid_592368 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_592368 = validateParameter(valid_592368, JArray, required = false,
                                 default = nil)
  if valid_592368 != nil:
    section.add "PreferredCacheClusterAZs", valid_592368
  var valid_592369 = query.getOrDefault("AuthToken")
  valid_592369 = validateParameter(valid_592369, JString, required = false,
                                 default = nil)
  if valid_592369 != nil:
    section.add "AuthToken", valid_592369
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_592370 = query.getOrDefault("ReplicationGroupDescription")
  valid_592370 = validateParameter(valid_592370, JString, required = true,
                                 default = nil)
  if valid_592370 != nil:
    section.add "ReplicationGroupDescription", valid_592370
  var valid_592371 = query.getOrDefault("Engine")
  valid_592371 = validateParameter(valid_592371, JString, required = false,
                                 default = nil)
  if valid_592371 != nil:
    section.add "Engine", valid_592371
  var valid_592372 = query.getOrDefault("NumNodeGroups")
  valid_592372 = validateParameter(valid_592372, JInt, required = false, default = nil)
  if valid_592372 != nil:
    section.add "NumNodeGroups", valid_592372
  var valid_592373 = query.getOrDefault("CacheParameterGroupName")
  valid_592373 = validateParameter(valid_592373, JString, required = false,
                                 default = nil)
  if valid_592373 != nil:
    section.add "CacheParameterGroupName", valid_592373
  var valid_592374 = query.getOrDefault("Tags")
  valid_592374 = validateParameter(valid_592374, JArray, required = false,
                                 default = nil)
  if valid_592374 != nil:
    section.add "Tags", valid_592374
  var valid_592375 = query.getOrDefault("KmsKeyId")
  valid_592375 = validateParameter(valid_592375, JString, required = false,
                                 default = nil)
  if valid_592375 != nil:
    section.add "KmsKeyId", valid_592375
  var valid_592376 = query.getOrDefault("SnapshotRetentionLimit")
  valid_592376 = validateParameter(valid_592376, JInt, required = false, default = nil)
  if valid_592376 != nil:
    section.add "SnapshotRetentionLimit", valid_592376
  var valid_592377 = query.getOrDefault("TransitEncryptionEnabled")
  valid_592377 = validateParameter(valid_592377, JBool, required = false, default = nil)
  if valid_592377 != nil:
    section.add "TransitEncryptionEnabled", valid_592377
  var valid_592378 = query.getOrDefault("CacheSecurityGroupNames")
  valid_592378 = validateParameter(valid_592378, JArray, required = false,
                                 default = nil)
  if valid_592378 != nil:
    section.add "CacheSecurityGroupNames", valid_592378
  var valid_592379 = query.getOrDefault("PrimaryClusterId")
  valid_592379 = validateParameter(valid_592379, JString, required = false,
                                 default = nil)
  if valid_592379 != nil:
    section.add "PrimaryClusterId", valid_592379
  var valid_592380 = query.getOrDefault("CacheNodeType")
  valid_592380 = validateParameter(valid_592380, JString, required = false,
                                 default = nil)
  if valid_592380 != nil:
    section.add "CacheNodeType", valid_592380
  var valid_592381 = query.getOrDefault("EngineVersion")
  valid_592381 = validateParameter(valid_592381, JString, required = false,
                                 default = nil)
  if valid_592381 != nil:
    section.add "EngineVersion", valid_592381
  var valid_592382 = query.getOrDefault("NumCacheClusters")
  valid_592382 = validateParameter(valid_592382, JInt, required = false, default = nil)
  if valid_592382 != nil:
    section.add "NumCacheClusters", valid_592382
  var valid_592383 = query.getOrDefault("Action")
  valid_592383 = validateParameter(valid_592383, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_592383 != nil:
    section.add "Action", valid_592383
  var valid_592384 = query.getOrDefault("NodeGroupConfiguration")
  valid_592384 = validateParameter(valid_592384, JArray, required = false,
                                 default = nil)
  if valid_592384 != nil:
    section.add "NodeGroupConfiguration", valid_592384
  var valid_592385 = query.getOrDefault("Port")
  valid_592385 = validateParameter(valid_592385, JInt, required = false, default = nil)
  if valid_592385 != nil:
    section.add "Port", valid_592385
  var valid_592386 = query.getOrDefault("ReplicationGroupId")
  valid_592386 = validateParameter(valid_592386, JString, required = true,
                                 default = nil)
  if valid_592386 != nil:
    section.add "ReplicationGroupId", valid_592386
  var valid_592387 = query.getOrDefault("CacheSubnetGroupName")
  valid_592387 = validateParameter(valid_592387, JString, required = false,
                                 default = nil)
  if valid_592387 != nil:
    section.add "CacheSubnetGroupName", valid_592387
  var valid_592388 = query.getOrDefault("NotificationTopicArn")
  valid_592388 = validateParameter(valid_592388, JString, required = false,
                                 default = nil)
  if valid_592388 != nil:
    section.add "NotificationTopicArn", valid_592388
  var valid_592389 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_592389 = validateParameter(valid_592389, JBool, required = false, default = nil)
  if valid_592389 != nil:
    section.add "AutomaticFailoverEnabled", valid_592389
  var valid_592390 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_592390 = validateParameter(valid_592390, JBool, required = false, default = nil)
  if valid_592390 != nil:
    section.add "AtRestEncryptionEnabled", valid_592390
  var valid_592391 = query.getOrDefault("Version")
  valid_592391 = validateParameter(valid_592391, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592391 != nil:
    section.add "Version", valid_592391
  var valid_592392 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_592392 = validateParameter(valid_592392, JString, required = false,
                                 default = nil)
  if valid_592392 != nil:
    section.add "PreferredMaintenanceWindow", valid_592392
  var valid_592393 = query.getOrDefault("SnapshotName")
  valid_592393 = validateParameter(valid_592393, JString, required = false,
                                 default = nil)
  if valid_592393 != nil:
    section.add "SnapshotName", valid_592393
  var valid_592394 = query.getOrDefault("SnapshotWindow")
  valid_592394 = validateParameter(valid_592394, JString, required = false,
                                 default = nil)
  if valid_592394 != nil:
    section.add "SnapshotWindow", valid_592394
  var valid_592395 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_592395 = validateParameter(valid_592395, JInt, required = false, default = nil)
  if valid_592395 != nil:
    section.add "ReplicasPerNodeGroup", valid_592395
  var valid_592396 = query.getOrDefault("SecurityGroupIds")
  valid_592396 = validateParameter(valid_592396, JArray, required = false,
                                 default = nil)
  if valid_592396 != nil:
    section.add "SecurityGroupIds", valid_592396
  var valid_592397 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_592397 = validateParameter(valid_592397, JBool, required = false, default = nil)
  if valid_592397 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592398 = header.getOrDefault("X-Amz-Signature")
  valid_592398 = validateParameter(valid_592398, JString, required = false,
                                 default = nil)
  if valid_592398 != nil:
    section.add "X-Amz-Signature", valid_592398
  var valid_592399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592399 = validateParameter(valid_592399, JString, required = false,
                                 default = nil)
  if valid_592399 != nil:
    section.add "X-Amz-Content-Sha256", valid_592399
  var valid_592400 = header.getOrDefault("X-Amz-Date")
  valid_592400 = validateParameter(valid_592400, JString, required = false,
                                 default = nil)
  if valid_592400 != nil:
    section.add "X-Amz-Date", valid_592400
  var valid_592401 = header.getOrDefault("X-Amz-Credential")
  valid_592401 = validateParameter(valid_592401, JString, required = false,
                                 default = nil)
  if valid_592401 != nil:
    section.add "X-Amz-Credential", valid_592401
  var valid_592402 = header.getOrDefault("X-Amz-Security-Token")
  valid_592402 = validateParameter(valid_592402, JString, required = false,
                                 default = nil)
  if valid_592402 != nil:
    section.add "X-Amz-Security-Token", valid_592402
  var valid_592403 = header.getOrDefault("X-Amz-Algorithm")
  valid_592403 = validateParameter(valid_592403, JString, required = false,
                                 default = nil)
  if valid_592403 != nil:
    section.add "X-Amz-Algorithm", valid_592403
  var valid_592404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592404 = validateParameter(valid_592404, JString, required = false,
                                 default = nil)
  if valid_592404 != nil:
    section.add "X-Amz-SignedHeaders", valid_592404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592405: Call_GetCreateReplicationGroup_592364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592405.validator(path, query, header, formData, body)
  let scheme = call_592405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592405.url(scheme.get, call_592405.host, call_592405.base,
                         call_592405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592405, url, valid)

proc call*(call_592406: Call_GetCreateReplicationGroup_592364;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_592407 = newJObject()
  if SnapshotArns != nil:
    query_592407.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_592407.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_592407, "AuthToken", newJString(AuthToken))
  add(query_592407, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_592407, "Engine", newJString(Engine))
  add(query_592407, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_592407, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_592407.add "Tags", Tags
  add(query_592407, "KmsKeyId", newJString(KmsKeyId))
  add(query_592407, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592407, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_592407.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_592407, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_592407, "CacheNodeType", newJString(CacheNodeType))
  add(query_592407, "EngineVersion", newJString(EngineVersion))
  add(query_592407, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_592407, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_592407.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_592407, "Port", newJInt(Port))
  add(query_592407, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592407, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592407, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_592407, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_592407, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_592407, "Version", newJString(Version))
  add(query_592407, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_592407, "SnapshotName", newJString(SnapshotName))
  add(query_592407, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_592407, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_592407.add "SecurityGroupIds", SecurityGroupIds
  add(query_592407, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_592406.call(nil, query_592407, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_592364(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_592365, base: "/",
    url: url_GetCreateReplicationGroup_592366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_592472 = ref object of OpenApiRestCall_591364
proc url_PostCreateSnapshot_592474(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateSnapshot_592473(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592475 = query.getOrDefault("Action")
  valid_592475 = validateParameter(valid_592475, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_592475 != nil:
    section.add "Action", valid_592475
  var valid_592476 = query.getOrDefault("Version")
  valid_592476 = validateParameter(valid_592476, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592476 != nil:
    section.add "Version", valid_592476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592477 = header.getOrDefault("X-Amz-Signature")
  valid_592477 = validateParameter(valid_592477, JString, required = false,
                                 default = nil)
  if valid_592477 != nil:
    section.add "X-Amz-Signature", valid_592477
  var valid_592478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592478 = validateParameter(valid_592478, JString, required = false,
                                 default = nil)
  if valid_592478 != nil:
    section.add "X-Amz-Content-Sha256", valid_592478
  var valid_592479 = header.getOrDefault("X-Amz-Date")
  valid_592479 = validateParameter(valid_592479, JString, required = false,
                                 default = nil)
  if valid_592479 != nil:
    section.add "X-Amz-Date", valid_592479
  var valid_592480 = header.getOrDefault("X-Amz-Credential")
  valid_592480 = validateParameter(valid_592480, JString, required = false,
                                 default = nil)
  if valid_592480 != nil:
    section.add "X-Amz-Credential", valid_592480
  var valid_592481 = header.getOrDefault("X-Amz-Security-Token")
  valid_592481 = validateParameter(valid_592481, JString, required = false,
                                 default = nil)
  if valid_592481 != nil:
    section.add "X-Amz-Security-Token", valid_592481
  var valid_592482 = header.getOrDefault("X-Amz-Algorithm")
  valid_592482 = validateParameter(valid_592482, JString, required = false,
                                 default = nil)
  if valid_592482 != nil:
    section.add "X-Amz-Algorithm", valid_592482
  var valid_592483 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592483 = validateParameter(valid_592483, JString, required = false,
                                 default = nil)
  if valid_592483 != nil:
    section.add "X-Amz-SignedHeaders", valid_592483
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_592484 = formData.getOrDefault("CacheClusterId")
  valid_592484 = validateParameter(valid_592484, JString, required = false,
                                 default = nil)
  if valid_592484 != nil:
    section.add "CacheClusterId", valid_592484
  var valid_592485 = formData.getOrDefault("KmsKeyId")
  valid_592485 = validateParameter(valid_592485, JString, required = false,
                                 default = nil)
  if valid_592485 != nil:
    section.add "KmsKeyId", valid_592485
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_592486 = formData.getOrDefault("SnapshotName")
  valid_592486 = validateParameter(valid_592486, JString, required = true,
                                 default = nil)
  if valid_592486 != nil:
    section.add "SnapshotName", valid_592486
  var valid_592487 = formData.getOrDefault("ReplicationGroupId")
  valid_592487 = validateParameter(valid_592487, JString, required = false,
                                 default = nil)
  if valid_592487 != nil:
    section.add "ReplicationGroupId", valid_592487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592488: Call_PostCreateSnapshot_592472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592488.validator(path, query, header, formData, body)
  let scheme = call_592488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592488.url(scheme.get, call_592488.host, call_592488.base,
                         call_592488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592488, url, valid)

proc call*(call_592489: Call_PostCreateSnapshot_592472; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_592490 = newJObject()
  var formData_592491 = newJObject()
  add(formData_592491, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592491, "KmsKeyId", newJString(KmsKeyId))
  add(formData_592491, "SnapshotName", newJString(SnapshotName))
  add(query_592490, "Action", newJString(Action))
  add(query_592490, "Version", newJString(Version))
  add(formData_592491, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592489.call(nil, query_592490, nil, formData_592491, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_592472(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_592473, base: "/",
    url: url_PostCreateSnapshot_592474, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_592453 = ref object of OpenApiRestCall_591364
proc url_GetCreateSnapshot_592455(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateSnapshot_592454(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_592456 = query.getOrDefault("KmsKeyId")
  valid_592456 = validateParameter(valid_592456, JString, required = false,
                                 default = nil)
  if valid_592456 != nil:
    section.add "KmsKeyId", valid_592456
  var valid_592457 = query.getOrDefault("CacheClusterId")
  valid_592457 = validateParameter(valid_592457, JString, required = false,
                                 default = nil)
  if valid_592457 != nil:
    section.add "CacheClusterId", valid_592457
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592458 = query.getOrDefault("Action")
  valid_592458 = validateParameter(valid_592458, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_592458 != nil:
    section.add "Action", valid_592458
  var valid_592459 = query.getOrDefault("ReplicationGroupId")
  valid_592459 = validateParameter(valid_592459, JString, required = false,
                                 default = nil)
  if valid_592459 != nil:
    section.add "ReplicationGroupId", valid_592459
  var valid_592460 = query.getOrDefault("Version")
  valid_592460 = validateParameter(valid_592460, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592460 != nil:
    section.add "Version", valid_592460
  var valid_592461 = query.getOrDefault("SnapshotName")
  valid_592461 = validateParameter(valid_592461, JString, required = true,
                                 default = nil)
  if valid_592461 != nil:
    section.add "SnapshotName", valid_592461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592462 = header.getOrDefault("X-Amz-Signature")
  valid_592462 = validateParameter(valid_592462, JString, required = false,
                                 default = nil)
  if valid_592462 != nil:
    section.add "X-Amz-Signature", valid_592462
  var valid_592463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592463 = validateParameter(valid_592463, JString, required = false,
                                 default = nil)
  if valid_592463 != nil:
    section.add "X-Amz-Content-Sha256", valid_592463
  var valid_592464 = header.getOrDefault("X-Amz-Date")
  valid_592464 = validateParameter(valid_592464, JString, required = false,
                                 default = nil)
  if valid_592464 != nil:
    section.add "X-Amz-Date", valid_592464
  var valid_592465 = header.getOrDefault("X-Amz-Credential")
  valid_592465 = validateParameter(valid_592465, JString, required = false,
                                 default = nil)
  if valid_592465 != nil:
    section.add "X-Amz-Credential", valid_592465
  var valid_592466 = header.getOrDefault("X-Amz-Security-Token")
  valid_592466 = validateParameter(valid_592466, JString, required = false,
                                 default = nil)
  if valid_592466 != nil:
    section.add "X-Amz-Security-Token", valid_592466
  var valid_592467 = header.getOrDefault("X-Amz-Algorithm")
  valid_592467 = validateParameter(valid_592467, JString, required = false,
                                 default = nil)
  if valid_592467 != nil:
    section.add "X-Amz-Algorithm", valid_592467
  var valid_592468 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592468 = validateParameter(valid_592468, JString, required = false,
                                 default = nil)
  if valid_592468 != nil:
    section.add "X-Amz-SignedHeaders", valid_592468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592469: Call_GetCreateSnapshot_592453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592469.validator(path, query, header, formData, body)
  let scheme = call_592469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592469.url(scheme.get, call_592469.host, call_592469.base,
                         call_592469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592469, url, valid)

proc call*(call_592470: Call_GetCreateSnapshot_592453; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_592471 = newJObject()
  add(query_592471, "KmsKeyId", newJString(KmsKeyId))
  add(query_592471, "CacheClusterId", newJString(CacheClusterId))
  add(query_592471, "Action", newJString(Action))
  add(query_592471, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592471, "Version", newJString(Version))
  add(query_592471, "SnapshotName", newJString(SnapshotName))
  result = call_592470.call(nil, query_592471, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_592453(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_592454,
    base: "/", url: url_GetCreateSnapshot_592455,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_592512 = ref object of OpenApiRestCall_591364
proc url_PostDecreaseReplicaCount_592514(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDecreaseReplicaCount_592513(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592515 = query.getOrDefault("Action")
  valid_592515 = validateParameter(valid_592515, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_592515 != nil:
    section.add "Action", valid_592515
  var valid_592516 = query.getOrDefault("Version")
  valid_592516 = validateParameter(valid_592516, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592516 != nil:
    section.add "Version", valid_592516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592517 = header.getOrDefault("X-Amz-Signature")
  valid_592517 = validateParameter(valid_592517, JString, required = false,
                                 default = nil)
  if valid_592517 != nil:
    section.add "X-Amz-Signature", valid_592517
  var valid_592518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592518 = validateParameter(valid_592518, JString, required = false,
                                 default = nil)
  if valid_592518 != nil:
    section.add "X-Amz-Content-Sha256", valid_592518
  var valid_592519 = header.getOrDefault("X-Amz-Date")
  valid_592519 = validateParameter(valid_592519, JString, required = false,
                                 default = nil)
  if valid_592519 != nil:
    section.add "X-Amz-Date", valid_592519
  var valid_592520 = header.getOrDefault("X-Amz-Credential")
  valid_592520 = validateParameter(valid_592520, JString, required = false,
                                 default = nil)
  if valid_592520 != nil:
    section.add "X-Amz-Credential", valid_592520
  var valid_592521 = header.getOrDefault("X-Amz-Security-Token")
  valid_592521 = validateParameter(valid_592521, JString, required = false,
                                 default = nil)
  if valid_592521 != nil:
    section.add "X-Amz-Security-Token", valid_592521
  var valid_592522 = header.getOrDefault("X-Amz-Algorithm")
  valid_592522 = validateParameter(valid_592522, JString, required = false,
                                 default = nil)
  if valid_592522 != nil:
    section.add "X-Amz-Algorithm", valid_592522
  var valid_592523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592523 = validateParameter(valid_592523, JString, required = false,
                                 default = nil)
  if valid_592523 != nil:
    section.add "X-Amz-SignedHeaders", valid_592523
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_592524 = formData.getOrDefault("ReplicaConfiguration")
  valid_592524 = validateParameter(valid_592524, JArray, required = false,
                                 default = nil)
  if valid_592524 != nil:
    section.add "ReplicaConfiguration", valid_592524
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_592525 = formData.getOrDefault("ApplyImmediately")
  valid_592525 = validateParameter(valid_592525, JBool, required = true, default = nil)
  if valid_592525 != nil:
    section.add "ApplyImmediately", valid_592525
  var valid_592526 = formData.getOrDefault("ReplicasToRemove")
  valid_592526 = validateParameter(valid_592526, JArray, required = false,
                                 default = nil)
  if valid_592526 != nil:
    section.add "ReplicasToRemove", valid_592526
  var valid_592527 = formData.getOrDefault("NewReplicaCount")
  valid_592527 = validateParameter(valid_592527, JInt, required = false, default = nil)
  if valid_592527 != nil:
    section.add "NewReplicaCount", valid_592527
  var valid_592528 = formData.getOrDefault("ReplicationGroupId")
  valid_592528 = validateParameter(valid_592528, JString, required = true,
                                 default = nil)
  if valid_592528 != nil:
    section.add "ReplicationGroupId", valid_592528
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592529: Call_PostDecreaseReplicaCount_592512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_592529.validator(path, query, header, formData, body)
  let scheme = call_592529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592529.url(scheme.get, call_592529.host, call_592529.base,
                         call_592529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592529, url, valid)

proc call*(call_592530: Call_PostDecreaseReplicaCount_592512;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_592531 = newJObject()
  var formData_592532 = newJObject()
  if ReplicaConfiguration != nil:
    formData_592532.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_592532, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_592532.add "ReplicasToRemove", ReplicasToRemove
  add(query_592531, "Action", newJString(Action))
  add(formData_592532, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_592531, "Version", newJString(Version))
  add(formData_592532, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592530.call(nil, query_592531, nil, formData_592532, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_592512(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_592513, base: "/",
    url: url_PostDecreaseReplicaCount_592514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_592492 = ref object of OpenApiRestCall_591364
proc url_GetDecreaseReplicaCount_592494(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDecreaseReplicaCount_592493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_592495 = query.getOrDefault("NewReplicaCount")
  valid_592495 = validateParameter(valid_592495, JInt, required = false, default = nil)
  if valid_592495 != nil:
    section.add "NewReplicaCount", valid_592495
  var valid_592496 = query.getOrDefault("ReplicaConfiguration")
  valid_592496 = validateParameter(valid_592496, JArray, required = false,
                                 default = nil)
  if valid_592496 != nil:
    section.add "ReplicaConfiguration", valid_592496
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592497 = query.getOrDefault("Action")
  valid_592497 = validateParameter(valid_592497, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_592497 != nil:
    section.add "Action", valid_592497
  var valid_592498 = query.getOrDefault("ApplyImmediately")
  valid_592498 = validateParameter(valid_592498, JBool, required = true, default = nil)
  if valid_592498 != nil:
    section.add "ApplyImmediately", valid_592498
  var valid_592499 = query.getOrDefault("ReplicationGroupId")
  valid_592499 = validateParameter(valid_592499, JString, required = true,
                                 default = nil)
  if valid_592499 != nil:
    section.add "ReplicationGroupId", valid_592499
  var valid_592500 = query.getOrDefault("Version")
  valid_592500 = validateParameter(valid_592500, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592500 != nil:
    section.add "Version", valid_592500
  var valid_592501 = query.getOrDefault("ReplicasToRemove")
  valid_592501 = validateParameter(valid_592501, JArray, required = false,
                                 default = nil)
  if valid_592501 != nil:
    section.add "ReplicasToRemove", valid_592501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592502 = header.getOrDefault("X-Amz-Signature")
  valid_592502 = validateParameter(valid_592502, JString, required = false,
                                 default = nil)
  if valid_592502 != nil:
    section.add "X-Amz-Signature", valid_592502
  var valid_592503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592503 = validateParameter(valid_592503, JString, required = false,
                                 default = nil)
  if valid_592503 != nil:
    section.add "X-Amz-Content-Sha256", valid_592503
  var valid_592504 = header.getOrDefault("X-Amz-Date")
  valid_592504 = validateParameter(valid_592504, JString, required = false,
                                 default = nil)
  if valid_592504 != nil:
    section.add "X-Amz-Date", valid_592504
  var valid_592505 = header.getOrDefault("X-Amz-Credential")
  valid_592505 = validateParameter(valid_592505, JString, required = false,
                                 default = nil)
  if valid_592505 != nil:
    section.add "X-Amz-Credential", valid_592505
  var valid_592506 = header.getOrDefault("X-Amz-Security-Token")
  valid_592506 = validateParameter(valid_592506, JString, required = false,
                                 default = nil)
  if valid_592506 != nil:
    section.add "X-Amz-Security-Token", valid_592506
  var valid_592507 = header.getOrDefault("X-Amz-Algorithm")
  valid_592507 = validateParameter(valid_592507, JString, required = false,
                                 default = nil)
  if valid_592507 != nil:
    section.add "X-Amz-Algorithm", valid_592507
  var valid_592508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592508 = validateParameter(valid_592508, JString, required = false,
                                 default = nil)
  if valid_592508 != nil:
    section.add "X-Amz-SignedHeaders", valid_592508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592509: Call_GetDecreaseReplicaCount_592492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_592509.validator(path, query, header, formData, body)
  let scheme = call_592509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592509.url(scheme.get, call_592509.host, call_592509.base,
                         call_592509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592509, url, valid)

proc call*(call_592510: Call_GetDecreaseReplicaCount_592492;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_592511 = newJObject()
  add(query_592511, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_592511.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_592511, "Action", newJString(Action))
  add(query_592511, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592511, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592511, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_592511.add "ReplicasToRemove", ReplicasToRemove
  result = call_592510.call(nil, query_592511, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_592492(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_592493, base: "/",
    url: url_GetDecreaseReplicaCount_592494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_592550 = ref object of OpenApiRestCall_591364
proc url_PostDeleteCacheCluster_592552(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheCluster_592551(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592553 = query.getOrDefault("Action")
  valid_592553 = validateParameter(valid_592553, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_592553 != nil:
    section.add "Action", valid_592553
  var valid_592554 = query.getOrDefault("Version")
  valid_592554 = validateParameter(valid_592554, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592554 != nil:
    section.add "Version", valid_592554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592555 = header.getOrDefault("X-Amz-Signature")
  valid_592555 = validateParameter(valid_592555, JString, required = false,
                                 default = nil)
  if valid_592555 != nil:
    section.add "X-Amz-Signature", valid_592555
  var valid_592556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592556 = validateParameter(valid_592556, JString, required = false,
                                 default = nil)
  if valid_592556 != nil:
    section.add "X-Amz-Content-Sha256", valid_592556
  var valid_592557 = header.getOrDefault("X-Amz-Date")
  valid_592557 = validateParameter(valid_592557, JString, required = false,
                                 default = nil)
  if valid_592557 != nil:
    section.add "X-Amz-Date", valid_592557
  var valid_592558 = header.getOrDefault("X-Amz-Credential")
  valid_592558 = validateParameter(valid_592558, JString, required = false,
                                 default = nil)
  if valid_592558 != nil:
    section.add "X-Amz-Credential", valid_592558
  var valid_592559 = header.getOrDefault("X-Amz-Security-Token")
  valid_592559 = validateParameter(valid_592559, JString, required = false,
                                 default = nil)
  if valid_592559 != nil:
    section.add "X-Amz-Security-Token", valid_592559
  var valid_592560 = header.getOrDefault("X-Amz-Algorithm")
  valid_592560 = validateParameter(valid_592560, JString, required = false,
                                 default = nil)
  if valid_592560 != nil:
    section.add "X-Amz-Algorithm", valid_592560
  var valid_592561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592561 = validateParameter(valid_592561, JString, required = false,
                                 default = nil)
  if valid_592561 != nil:
    section.add "X-Amz-SignedHeaders", valid_592561
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_592562 = formData.getOrDefault("CacheClusterId")
  valid_592562 = validateParameter(valid_592562, JString, required = true,
                                 default = nil)
  if valid_592562 != nil:
    section.add "CacheClusterId", valid_592562
  var valid_592563 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_592563 = validateParameter(valid_592563, JString, required = false,
                                 default = nil)
  if valid_592563 != nil:
    section.add "FinalSnapshotIdentifier", valid_592563
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592564: Call_PostDeleteCacheCluster_592550; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_592564.validator(path, query, header, formData, body)
  let scheme = call_592564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592564.url(scheme.get, call_592564.host, call_592564.base,
                         call_592564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592564, url, valid)

proc call*(call_592565: Call_PostDeleteCacheCluster_592550; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592566 = newJObject()
  var formData_592567 = newJObject()
  add(formData_592567, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592567, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_592566, "Action", newJString(Action))
  add(query_592566, "Version", newJString(Version))
  result = call_592565.call(nil, query_592566, nil, formData_592567, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_592550(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_592551, base: "/",
    url: url_PostDeleteCacheCluster_592552, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_592533 = ref object of OpenApiRestCall_591364
proc url_GetDeleteCacheCluster_592535(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheCluster_592534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_592536 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_592536 = validateParameter(valid_592536, JString, required = false,
                                 default = nil)
  if valid_592536 != nil:
    section.add "FinalSnapshotIdentifier", valid_592536
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_592537 = query.getOrDefault("CacheClusterId")
  valid_592537 = validateParameter(valid_592537, JString, required = true,
                                 default = nil)
  if valid_592537 != nil:
    section.add "CacheClusterId", valid_592537
  var valid_592538 = query.getOrDefault("Action")
  valid_592538 = validateParameter(valid_592538, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_592538 != nil:
    section.add "Action", valid_592538
  var valid_592539 = query.getOrDefault("Version")
  valid_592539 = validateParameter(valid_592539, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592539 != nil:
    section.add "Version", valid_592539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592540 = header.getOrDefault("X-Amz-Signature")
  valid_592540 = validateParameter(valid_592540, JString, required = false,
                                 default = nil)
  if valid_592540 != nil:
    section.add "X-Amz-Signature", valid_592540
  var valid_592541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592541 = validateParameter(valid_592541, JString, required = false,
                                 default = nil)
  if valid_592541 != nil:
    section.add "X-Amz-Content-Sha256", valid_592541
  var valid_592542 = header.getOrDefault("X-Amz-Date")
  valid_592542 = validateParameter(valid_592542, JString, required = false,
                                 default = nil)
  if valid_592542 != nil:
    section.add "X-Amz-Date", valid_592542
  var valid_592543 = header.getOrDefault("X-Amz-Credential")
  valid_592543 = validateParameter(valid_592543, JString, required = false,
                                 default = nil)
  if valid_592543 != nil:
    section.add "X-Amz-Credential", valid_592543
  var valid_592544 = header.getOrDefault("X-Amz-Security-Token")
  valid_592544 = validateParameter(valid_592544, JString, required = false,
                                 default = nil)
  if valid_592544 != nil:
    section.add "X-Amz-Security-Token", valid_592544
  var valid_592545 = header.getOrDefault("X-Amz-Algorithm")
  valid_592545 = validateParameter(valid_592545, JString, required = false,
                                 default = nil)
  if valid_592545 != nil:
    section.add "X-Amz-Algorithm", valid_592545
  var valid_592546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592546 = validateParameter(valid_592546, JString, required = false,
                                 default = nil)
  if valid_592546 != nil:
    section.add "X-Amz-SignedHeaders", valid_592546
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592547: Call_GetDeleteCacheCluster_592533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_592547.validator(path, query, header, formData, body)
  let scheme = call_592547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592547.url(scheme.get, call_592547.host, call_592547.base,
                         call_592547.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592547, url, valid)

proc call*(call_592548: Call_GetDeleteCacheCluster_592533; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592549 = newJObject()
  add(query_592549, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_592549, "CacheClusterId", newJString(CacheClusterId))
  add(query_592549, "Action", newJString(Action))
  add(query_592549, "Version", newJString(Version))
  result = call_592548.call(nil, query_592549, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_592533(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_592534, base: "/",
    url: url_GetDeleteCacheCluster_592535, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_592584 = ref object of OpenApiRestCall_591364
proc url_PostDeleteCacheParameterGroup_592586(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheParameterGroup_592585(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592587 = query.getOrDefault("Action")
  valid_592587 = validateParameter(valid_592587, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_592587 != nil:
    section.add "Action", valid_592587
  var valid_592588 = query.getOrDefault("Version")
  valid_592588 = validateParameter(valid_592588, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592588 != nil:
    section.add "Version", valid_592588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592589 = header.getOrDefault("X-Amz-Signature")
  valid_592589 = validateParameter(valid_592589, JString, required = false,
                                 default = nil)
  if valid_592589 != nil:
    section.add "X-Amz-Signature", valid_592589
  var valid_592590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592590 = validateParameter(valid_592590, JString, required = false,
                                 default = nil)
  if valid_592590 != nil:
    section.add "X-Amz-Content-Sha256", valid_592590
  var valid_592591 = header.getOrDefault("X-Amz-Date")
  valid_592591 = validateParameter(valid_592591, JString, required = false,
                                 default = nil)
  if valid_592591 != nil:
    section.add "X-Amz-Date", valid_592591
  var valid_592592 = header.getOrDefault("X-Amz-Credential")
  valid_592592 = validateParameter(valid_592592, JString, required = false,
                                 default = nil)
  if valid_592592 != nil:
    section.add "X-Amz-Credential", valid_592592
  var valid_592593 = header.getOrDefault("X-Amz-Security-Token")
  valid_592593 = validateParameter(valid_592593, JString, required = false,
                                 default = nil)
  if valid_592593 != nil:
    section.add "X-Amz-Security-Token", valid_592593
  var valid_592594 = header.getOrDefault("X-Amz-Algorithm")
  valid_592594 = validateParameter(valid_592594, JString, required = false,
                                 default = nil)
  if valid_592594 != nil:
    section.add "X-Amz-Algorithm", valid_592594
  var valid_592595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592595 = validateParameter(valid_592595, JString, required = false,
                                 default = nil)
  if valid_592595 != nil:
    section.add "X-Amz-SignedHeaders", valid_592595
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592596 = formData.getOrDefault("CacheParameterGroupName")
  valid_592596 = validateParameter(valid_592596, JString, required = true,
                                 default = nil)
  if valid_592596 != nil:
    section.add "CacheParameterGroupName", valid_592596
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592597: Call_PostDeleteCacheParameterGroup_592584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_592597.validator(path, query, header, formData, body)
  let scheme = call_592597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592597.url(scheme.get, call_592597.host, call_592597.base,
                         call_592597.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592597, url, valid)

proc call*(call_592598: Call_PostDeleteCacheParameterGroup_592584;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592599 = newJObject()
  var formData_592600 = newJObject()
  add(formData_592600, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592599, "Action", newJString(Action))
  add(query_592599, "Version", newJString(Version))
  result = call_592598.call(nil, query_592599, nil, formData_592600, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_592584(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_592585, base: "/",
    url: url_PostDeleteCacheParameterGroup_592586,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_592568 = ref object of OpenApiRestCall_591364
proc url_GetDeleteCacheParameterGroup_592570(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheParameterGroup_592569(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592571 = query.getOrDefault("CacheParameterGroupName")
  valid_592571 = validateParameter(valid_592571, JString, required = true,
                                 default = nil)
  if valid_592571 != nil:
    section.add "CacheParameterGroupName", valid_592571
  var valid_592572 = query.getOrDefault("Action")
  valid_592572 = validateParameter(valid_592572, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_592572 != nil:
    section.add "Action", valid_592572
  var valid_592573 = query.getOrDefault("Version")
  valid_592573 = validateParameter(valid_592573, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592573 != nil:
    section.add "Version", valid_592573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592574 = header.getOrDefault("X-Amz-Signature")
  valid_592574 = validateParameter(valid_592574, JString, required = false,
                                 default = nil)
  if valid_592574 != nil:
    section.add "X-Amz-Signature", valid_592574
  var valid_592575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592575 = validateParameter(valid_592575, JString, required = false,
                                 default = nil)
  if valid_592575 != nil:
    section.add "X-Amz-Content-Sha256", valid_592575
  var valid_592576 = header.getOrDefault("X-Amz-Date")
  valid_592576 = validateParameter(valid_592576, JString, required = false,
                                 default = nil)
  if valid_592576 != nil:
    section.add "X-Amz-Date", valid_592576
  var valid_592577 = header.getOrDefault("X-Amz-Credential")
  valid_592577 = validateParameter(valid_592577, JString, required = false,
                                 default = nil)
  if valid_592577 != nil:
    section.add "X-Amz-Credential", valid_592577
  var valid_592578 = header.getOrDefault("X-Amz-Security-Token")
  valid_592578 = validateParameter(valid_592578, JString, required = false,
                                 default = nil)
  if valid_592578 != nil:
    section.add "X-Amz-Security-Token", valid_592578
  var valid_592579 = header.getOrDefault("X-Amz-Algorithm")
  valid_592579 = validateParameter(valid_592579, JString, required = false,
                                 default = nil)
  if valid_592579 != nil:
    section.add "X-Amz-Algorithm", valid_592579
  var valid_592580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592580 = validateParameter(valid_592580, JString, required = false,
                                 default = nil)
  if valid_592580 != nil:
    section.add "X-Amz-SignedHeaders", valid_592580
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592581: Call_GetDeleteCacheParameterGroup_592568; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_592581.validator(path, query, header, formData, body)
  let scheme = call_592581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592581.url(scheme.get, call_592581.host, call_592581.base,
                         call_592581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592581, url, valid)

proc call*(call_592582: Call_GetDeleteCacheParameterGroup_592568;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592583 = newJObject()
  add(query_592583, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592583, "Action", newJString(Action))
  add(query_592583, "Version", newJString(Version))
  result = call_592582.call(nil, query_592583, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_592568(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_592569, base: "/",
    url: url_GetDeleteCacheParameterGroup_592570,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_592617 = ref object of OpenApiRestCall_591364
proc url_PostDeleteCacheSecurityGroup_592619(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_592618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592620 = query.getOrDefault("Action")
  valid_592620 = validateParameter(valid_592620, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_592620 != nil:
    section.add "Action", valid_592620
  var valid_592621 = query.getOrDefault("Version")
  valid_592621 = validateParameter(valid_592621, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592621 != nil:
    section.add "Version", valid_592621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592622 = header.getOrDefault("X-Amz-Signature")
  valid_592622 = validateParameter(valid_592622, JString, required = false,
                                 default = nil)
  if valid_592622 != nil:
    section.add "X-Amz-Signature", valid_592622
  var valid_592623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592623 = validateParameter(valid_592623, JString, required = false,
                                 default = nil)
  if valid_592623 != nil:
    section.add "X-Amz-Content-Sha256", valid_592623
  var valid_592624 = header.getOrDefault("X-Amz-Date")
  valid_592624 = validateParameter(valid_592624, JString, required = false,
                                 default = nil)
  if valid_592624 != nil:
    section.add "X-Amz-Date", valid_592624
  var valid_592625 = header.getOrDefault("X-Amz-Credential")
  valid_592625 = validateParameter(valid_592625, JString, required = false,
                                 default = nil)
  if valid_592625 != nil:
    section.add "X-Amz-Credential", valid_592625
  var valid_592626 = header.getOrDefault("X-Amz-Security-Token")
  valid_592626 = validateParameter(valid_592626, JString, required = false,
                                 default = nil)
  if valid_592626 != nil:
    section.add "X-Amz-Security-Token", valid_592626
  var valid_592627 = header.getOrDefault("X-Amz-Algorithm")
  valid_592627 = validateParameter(valid_592627, JString, required = false,
                                 default = nil)
  if valid_592627 != nil:
    section.add "X-Amz-Algorithm", valid_592627
  var valid_592628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592628 = validateParameter(valid_592628, JString, required = false,
                                 default = nil)
  if valid_592628 != nil:
    section.add "X-Amz-SignedHeaders", valid_592628
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_592629 = formData.getOrDefault("CacheSecurityGroupName")
  valid_592629 = validateParameter(valid_592629, JString, required = true,
                                 default = nil)
  if valid_592629 != nil:
    section.add "CacheSecurityGroupName", valid_592629
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592630: Call_PostDeleteCacheSecurityGroup_592617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_592630.validator(path, query, header, formData, body)
  let scheme = call_592630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592630.url(scheme.get, call_592630.host, call_592630.base,
                         call_592630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592630, url, valid)

proc call*(call_592631: Call_PostDeleteCacheSecurityGroup_592617;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592632 = newJObject()
  var formData_592633 = newJObject()
  add(formData_592633, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_592632, "Action", newJString(Action))
  add(query_592632, "Version", newJString(Version))
  result = call_592631.call(nil, query_592632, nil, formData_592633, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_592617(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_592618, base: "/",
    url: url_PostDeleteCacheSecurityGroup_592619,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_592601 = ref object of OpenApiRestCall_591364
proc url_GetDeleteCacheSecurityGroup_592603(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_592602(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592604 = query.getOrDefault("Action")
  valid_592604 = validateParameter(valid_592604, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_592604 != nil:
    section.add "Action", valid_592604
  var valid_592605 = query.getOrDefault("CacheSecurityGroupName")
  valid_592605 = validateParameter(valid_592605, JString, required = true,
                                 default = nil)
  if valid_592605 != nil:
    section.add "CacheSecurityGroupName", valid_592605
  var valid_592606 = query.getOrDefault("Version")
  valid_592606 = validateParameter(valid_592606, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592606 != nil:
    section.add "Version", valid_592606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592607 = header.getOrDefault("X-Amz-Signature")
  valid_592607 = validateParameter(valid_592607, JString, required = false,
                                 default = nil)
  if valid_592607 != nil:
    section.add "X-Amz-Signature", valid_592607
  var valid_592608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592608 = validateParameter(valid_592608, JString, required = false,
                                 default = nil)
  if valid_592608 != nil:
    section.add "X-Amz-Content-Sha256", valid_592608
  var valid_592609 = header.getOrDefault("X-Amz-Date")
  valid_592609 = validateParameter(valid_592609, JString, required = false,
                                 default = nil)
  if valid_592609 != nil:
    section.add "X-Amz-Date", valid_592609
  var valid_592610 = header.getOrDefault("X-Amz-Credential")
  valid_592610 = validateParameter(valid_592610, JString, required = false,
                                 default = nil)
  if valid_592610 != nil:
    section.add "X-Amz-Credential", valid_592610
  var valid_592611 = header.getOrDefault("X-Amz-Security-Token")
  valid_592611 = validateParameter(valid_592611, JString, required = false,
                                 default = nil)
  if valid_592611 != nil:
    section.add "X-Amz-Security-Token", valid_592611
  var valid_592612 = header.getOrDefault("X-Amz-Algorithm")
  valid_592612 = validateParameter(valid_592612, JString, required = false,
                                 default = nil)
  if valid_592612 != nil:
    section.add "X-Amz-Algorithm", valid_592612
  var valid_592613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592613 = validateParameter(valid_592613, JString, required = false,
                                 default = nil)
  if valid_592613 != nil:
    section.add "X-Amz-SignedHeaders", valid_592613
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592614: Call_GetDeleteCacheSecurityGroup_592601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_592614.validator(path, query, header, formData, body)
  let scheme = call_592614.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592614.url(scheme.get, call_592614.host, call_592614.base,
                         call_592614.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592614, url, valid)

proc call*(call_592615: Call_GetDeleteCacheSecurityGroup_592601;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_592616 = newJObject()
  add(query_592616, "Action", newJString(Action))
  add(query_592616, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_592616, "Version", newJString(Version))
  result = call_592615.call(nil, query_592616, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_592601(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_592602, base: "/",
    url: url_GetDeleteCacheSecurityGroup_592603,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_592650 = ref object of OpenApiRestCall_591364
proc url_PostDeleteCacheSubnetGroup_592652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_592651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592653 = query.getOrDefault("Action")
  valid_592653 = validateParameter(valid_592653, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_592653 != nil:
    section.add "Action", valid_592653
  var valid_592654 = query.getOrDefault("Version")
  valid_592654 = validateParameter(valid_592654, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592654 != nil:
    section.add "Version", valid_592654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592655 = header.getOrDefault("X-Amz-Signature")
  valid_592655 = validateParameter(valid_592655, JString, required = false,
                                 default = nil)
  if valid_592655 != nil:
    section.add "X-Amz-Signature", valid_592655
  var valid_592656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592656 = validateParameter(valid_592656, JString, required = false,
                                 default = nil)
  if valid_592656 != nil:
    section.add "X-Amz-Content-Sha256", valid_592656
  var valid_592657 = header.getOrDefault("X-Amz-Date")
  valid_592657 = validateParameter(valid_592657, JString, required = false,
                                 default = nil)
  if valid_592657 != nil:
    section.add "X-Amz-Date", valid_592657
  var valid_592658 = header.getOrDefault("X-Amz-Credential")
  valid_592658 = validateParameter(valid_592658, JString, required = false,
                                 default = nil)
  if valid_592658 != nil:
    section.add "X-Amz-Credential", valid_592658
  var valid_592659 = header.getOrDefault("X-Amz-Security-Token")
  valid_592659 = validateParameter(valid_592659, JString, required = false,
                                 default = nil)
  if valid_592659 != nil:
    section.add "X-Amz-Security-Token", valid_592659
  var valid_592660 = header.getOrDefault("X-Amz-Algorithm")
  valid_592660 = validateParameter(valid_592660, JString, required = false,
                                 default = nil)
  if valid_592660 != nil:
    section.add "X-Amz-Algorithm", valid_592660
  var valid_592661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592661 = validateParameter(valid_592661, JString, required = false,
                                 default = nil)
  if valid_592661 != nil:
    section.add "X-Amz-SignedHeaders", valid_592661
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_592662 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592662 = validateParameter(valid_592662, JString, required = true,
                                 default = nil)
  if valid_592662 != nil:
    section.add "CacheSubnetGroupName", valid_592662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592663: Call_PostDeleteCacheSubnetGroup_592650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_592663.validator(path, query, header, formData, body)
  let scheme = call_592663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592663.url(scheme.get, call_592663.host, call_592663.base,
                         call_592663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592663, url, valid)

proc call*(call_592664: Call_PostDeleteCacheSubnetGroup_592650;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592665 = newJObject()
  var formData_592666 = newJObject()
  add(formData_592666, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592665, "Action", newJString(Action))
  add(query_592665, "Version", newJString(Version))
  result = call_592664.call(nil, query_592665, nil, formData_592666, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_592650(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_592651, base: "/",
    url: url_PostDeleteCacheSubnetGroup_592652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_592634 = ref object of OpenApiRestCall_591364
proc url_GetDeleteCacheSubnetGroup_592636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_592635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592637 = query.getOrDefault("Action")
  valid_592637 = validateParameter(valid_592637, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_592637 != nil:
    section.add "Action", valid_592637
  var valid_592638 = query.getOrDefault("CacheSubnetGroupName")
  valid_592638 = validateParameter(valid_592638, JString, required = true,
                                 default = nil)
  if valid_592638 != nil:
    section.add "CacheSubnetGroupName", valid_592638
  var valid_592639 = query.getOrDefault("Version")
  valid_592639 = validateParameter(valid_592639, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592639 != nil:
    section.add "Version", valid_592639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592640 = header.getOrDefault("X-Amz-Signature")
  valid_592640 = validateParameter(valid_592640, JString, required = false,
                                 default = nil)
  if valid_592640 != nil:
    section.add "X-Amz-Signature", valid_592640
  var valid_592641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592641 = validateParameter(valid_592641, JString, required = false,
                                 default = nil)
  if valid_592641 != nil:
    section.add "X-Amz-Content-Sha256", valid_592641
  var valid_592642 = header.getOrDefault("X-Amz-Date")
  valid_592642 = validateParameter(valid_592642, JString, required = false,
                                 default = nil)
  if valid_592642 != nil:
    section.add "X-Amz-Date", valid_592642
  var valid_592643 = header.getOrDefault("X-Amz-Credential")
  valid_592643 = validateParameter(valid_592643, JString, required = false,
                                 default = nil)
  if valid_592643 != nil:
    section.add "X-Amz-Credential", valid_592643
  var valid_592644 = header.getOrDefault("X-Amz-Security-Token")
  valid_592644 = validateParameter(valid_592644, JString, required = false,
                                 default = nil)
  if valid_592644 != nil:
    section.add "X-Amz-Security-Token", valid_592644
  var valid_592645 = header.getOrDefault("X-Amz-Algorithm")
  valid_592645 = validateParameter(valid_592645, JString, required = false,
                                 default = nil)
  if valid_592645 != nil:
    section.add "X-Amz-Algorithm", valid_592645
  var valid_592646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592646 = validateParameter(valid_592646, JString, required = false,
                                 default = nil)
  if valid_592646 != nil:
    section.add "X-Amz-SignedHeaders", valid_592646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592647: Call_GetDeleteCacheSubnetGroup_592634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_592647.validator(path, query, header, formData, body)
  let scheme = call_592647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592647.url(scheme.get, call_592647.host, call_592647.base,
                         call_592647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592647, url, valid)

proc call*(call_592648: Call_GetDeleteCacheSubnetGroup_592634;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_592649 = newJObject()
  add(query_592649, "Action", newJString(Action))
  add(query_592649, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592649, "Version", newJString(Version))
  result = call_592648.call(nil, query_592649, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_592634(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_592635, base: "/",
    url: url_GetDeleteCacheSubnetGroup_592636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_592685 = ref object of OpenApiRestCall_591364
proc url_PostDeleteReplicationGroup_592687(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReplicationGroup_592686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592688 = query.getOrDefault("Action")
  valid_592688 = validateParameter(valid_592688, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_592688 != nil:
    section.add "Action", valid_592688
  var valid_592689 = query.getOrDefault("Version")
  valid_592689 = validateParameter(valid_592689, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592689 != nil:
    section.add "Version", valid_592689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592690 = header.getOrDefault("X-Amz-Signature")
  valid_592690 = validateParameter(valid_592690, JString, required = false,
                                 default = nil)
  if valid_592690 != nil:
    section.add "X-Amz-Signature", valid_592690
  var valid_592691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592691 = validateParameter(valid_592691, JString, required = false,
                                 default = nil)
  if valid_592691 != nil:
    section.add "X-Amz-Content-Sha256", valid_592691
  var valid_592692 = header.getOrDefault("X-Amz-Date")
  valid_592692 = validateParameter(valid_592692, JString, required = false,
                                 default = nil)
  if valid_592692 != nil:
    section.add "X-Amz-Date", valid_592692
  var valid_592693 = header.getOrDefault("X-Amz-Credential")
  valid_592693 = validateParameter(valid_592693, JString, required = false,
                                 default = nil)
  if valid_592693 != nil:
    section.add "X-Amz-Credential", valid_592693
  var valid_592694 = header.getOrDefault("X-Amz-Security-Token")
  valid_592694 = validateParameter(valid_592694, JString, required = false,
                                 default = nil)
  if valid_592694 != nil:
    section.add "X-Amz-Security-Token", valid_592694
  var valid_592695 = header.getOrDefault("X-Amz-Algorithm")
  valid_592695 = validateParameter(valid_592695, JString, required = false,
                                 default = nil)
  if valid_592695 != nil:
    section.add "X-Amz-Algorithm", valid_592695
  var valid_592696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592696 = validateParameter(valid_592696, JString, required = false,
                                 default = nil)
  if valid_592696 != nil:
    section.add "X-Amz-SignedHeaders", valid_592696
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_592697 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_592697 = validateParameter(valid_592697, JString, required = false,
                                 default = nil)
  if valid_592697 != nil:
    section.add "FinalSnapshotIdentifier", valid_592697
  var valid_592698 = formData.getOrDefault("RetainPrimaryCluster")
  valid_592698 = validateParameter(valid_592698, JBool, required = false, default = nil)
  if valid_592698 != nil:
    section.add "RetainPrimaryCluster", valid_592698
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_592699 = formData.getOrDefault("ReplicationGroupId")
  valid_592699 = validateParameter(valid_592699, JString, required = true,
                                 default = nil)
  if valid_592699 != nil:
    section.add "ReplicationGroupId", valid_592699
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592700: Call_PostDeleteReplicationGroup_592685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592700.validator(path, query, header, formData, body)
  let scheme = call_592700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592700.url(scheme.get, call_592700.host, call_592700.base,
                         call_592700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592700, url, valid)

proc call*(call_592701: Call_PostDeleteReplicationGroup_592685;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_592702 = newJObject()
  var formData_592703 = newJObject()
  add(formData_592703, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_592702, "Action", newJString(Action))
  add(formData_592703, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_592702, "Version", newJString(Version))
  add(formData_592703, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592701.call(nil, query_592702, nil, formData_592703, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_592685(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_592686, base: "/",
    url: url_PostDeleteReplicationGroup_592687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_592667 = ref object of OpenApiRestCall_591364
proc url_GetDeleteReplicationGroup_592669(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReplicationGroup_592668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_592670 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_592670 = validateParameter(valid_592670, JString, required = false,
                                 default = nil)
  if valid_592670 != nil:
    section.add "FinalSnapshotIdentifier", valid_592670
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592671 = query.getOrDefault("Action")
  valid_592671 = validateParameter(valid_592671, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_592671 != nil:
    section.add "Action", valid_592671
  var valid_592672 = query.getOrDefault("ReplicationGroupId")
  valid_592672 = validateParameter(valid_592672, JString, required = true,
                                 default = nil)
  if valid_592672 != nil:
    section.add "ReplicationGroupId", valid_592672
  var valid_592673 = query.getOrDefault("Version")
  valid_592673 = validateParameter(valid_592673, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592673 != nil:
    section.add "Version", valid_592673
  var valid_592674 = query.getOrDefault("RetainPrimaryCluster")
  valid_592674 = validateParameter(valid_592674, JBool, required = false, default = nil)
  if valid_592674 != nil:
    section.add "RetainPrimaryCluster", valid_592674
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592675 = header.getOrDefault("X-Amz-Signature")
  valid_592675 = validateParameter(valid_592675, JString, required = false,
                                 default = nil)
  if valid_592675 != nil:
    section.add "X-Amz-Signature", valid_592675
  var valid_592676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592676 = validateParameter(valid_592676, JString, required = false,
                                 default = nil)
  if valid_592676 != nil:
    section.add "X-Amz-Content-Sha256", valid_592676
  var valid_592677 = header.getOrDefault("X-Amz-Date")
  valid_592677 = validateParameter(valid_592677, JString, required = false,
                                 default = nil)
  if valid_592677 != nil:
    section.add "X-Amz-Date", valid_592677
  var valid_592678 = header.getOrDefault("X-Amz-Credential")
  valid_592678 = validateParameter(valid_592678, JString, required = false,
                                 default = nil)
  if valid_592678 != nil:
    section.add "X-Amz-Credential", valid_592678
  var valid_592679 = header.getOrDefault("X-Amz-Security-Token")
  valid_592679 = validateParameter(valid_592679, JString, required = false,
                                 default = nil)
  if valid_592679 != nil:
    section.add "X-Amz-Security-Token", valid_592679
  var valid_592680 = header.getOrDefault("X-Amz-Algorithm")
  valid_592680 = validateParameter(valid_592680, JString, required = false,
                                 default = nil)
  if valid_592680 != nil:
    section.add "X-Amz-Algorithm", valid_592680
  var valid_592681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592681 = validateParameter(valid_592681, JString, required = false,
                                 default = nil)
  if valid_592681 != nil:
    section.add "X-Amz-SignedHeaders", valid_592681
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592682: Call_GetDeleteReplicationGroup_592667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592682.validator(path, query, header, formData, body)
  let scheme = call_592682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592682.url(scheme.get, call_592682.host, call_592682.base,
                         call_592682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592682, url, valid)

proc call*(call_592683: Call_GetDeleteReplicationGroup_592667;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_592684 = newJObject()
  add(query_592684, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_592684, "Action", newJString(Action))
  add(query_592684, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592684, "Version", newJString(Version))
  add(query_592684, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_592683.call(nil, query_592684, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_592667(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_592668, base: "/",
    url: url_GetDeleteReplicationGroup_592669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_592720 = ref object of OpenApiRestCall_591364
proc url_PostDeleteSnapshot_592722(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSnapshot_592721(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592723 = query.getOrDefault("Action")
  valid_592723 = validateParameter(valid_592723, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_592723 != nil:
    section.add "Action", valid_592723
  var valid_592724 = query.getOrDefault("Version")
  valid_592724 = validateParameter(valid_592724, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592724 != nil:
    section.add "Version", valid_592724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592725 = header.getOrDefault("X-Amz-Signature")
  valid_592725 = validateParameter(valid_592725, JString, required = false,
                                 default = nil)
  if valid_592725 != nil:
    section.add "X-Amz-Signature", valid_592725
  var valid_592726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592726 = validateParameter(valid_592726, JString, required = false,
                                 default = nil)
  if valid_592726 != nil:
    section.add "X-Amz-Content-Sha256", valid_592726
  var valid_592727 = header.getOrDefault("X-Amz-Date")
  valid_592727 = validateParameter(valid_592727, JString, required = false,
                                 default = nil)
  if valid_592727 != nil:
    section.add "X-Amz-Date", valid_592727
  var valid_592728 = header.getOrDefault("X-Amz-Credential")
  valid_592728 = validateParameter(valid_592728, JString, required = false,
                                 default = nil)
  if valid_592728 != nil:
    section.add "X-Amz-Credential", valid_592728
  var valid_592729 = header.getOrDefault("X-Amz-Security-Token")
  valid_592729 = validateParameter(valid_592729, JString, required = false,
                                 default = nil)
  if valid_592729 != nil:
    section.add "X-Amz-Security-Token", valid_592729
  var valid_592730 = header.getOrDefault("X-Amz-Algorithm")
  valid_592730 = validateParameter(valid_592730, JString, required = false,
                                 default = nil)
  if valid_592730 != nil:
    section.add "X-Amz-Algorithm", valid_592730
  var valid_592731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592731 = validateParameter(valid_592731, JString, required = false,
                                 default = nil)
  if valid_592731 != nil:
    section.add "X-Amz-SignedHeaders", valid_592731
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_592732 = formData.getOrDefault("SnapshotName")
  valid_592732 = validateParameter(valid_592732, JString, required = true,
                                 default = nil)
  if valid_592732 != nil:
    section.add "SnapshotName", valid_592732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592733: Call_PostDeleteSnapshot_592720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592733.validator(path, query, header, formData, body)
  let scheme = call_592733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592733.url(scheme.get, call_592733.host, call_592733.base,
                         call_592733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592733, url, valid)

proc call*(call_592734: Call_PostDeleteSnapshot_592720; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592735 = newJObject()
  var formData_592736 = newJObject()
  add(formData_592736, "SnapshotName", newJString(SnapshotName))
  add(query_592735, "Action", newJString(Action))
  add(query_592735, "Version", newJString(Version))
  result = call_592734.call(nil, query_592735, nil, formData_592736, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_592720(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_592721, base: "/",
    url: url_PostDeleteSnapshot_592722, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_592704 = ref object of OpenApiRestCall_591364
proc url_GetDeleteSnapshot_592706(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSnapshot_592705(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592707 = query.getOrDefault("Action")
  valid_592707 = validateParameter(valid_592707, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_592707 != nil:
    section.add "Action", valid_592707
  var valid_592708 = query.getOrDefault("Version")
  valid_592708 = validateParameter(valid_592708, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592708 != nil:
    section.add "Version", valid_592708
  var valid_592709 = query.getOrDefault("SnapshotName")
  valid_592709 = validateParameter(valid_592709, JString, required = true,
                                 default = nil)
  if valid_592709 != nil:
    section.add "SnapshotName", valid_592709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592710 = header.getOrDefault("X-Amz-Signature")
  valid_592710 = validateParameter(valid_592710, JString, required = false,
                                 default = nil)
  if valid_592710 != nil:
    section.add "X-Amz-Signature", valid_592710
  var valid_592711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592711 = validateParameter(valid_592711, JString, required = false,
                                 default = nil)
  if valid_592711 != nil:
    section.add "X-Amz-Content-Sha256", valid_592711
  var valid_592712 = header.getOrDefault("X-Amz-Date")
  valid_592712 = validateParameter(valid_592712, JString, required = false,
                                 default = nil)
  if valid_592712 != nil:
    section.add "X-Amz-Date", valid_592712
  var valid_592713 = header.getOrDefault("X-Amz-Credential")
  valid_592713 = validateParameter(valid_592713, JString, required = false,
                                 default = nil)
  if valid_592713 != nil:
    section.add "X-Amz-Credential", valid_592713
  var valid_592714 = header.getOrDefault("X-Amz-Security-Token")
  valid_592714 = validateParameter(valid_592714, JString, required = false,
                                 default = nil)
  if valid_592714 != nil:
    section.add "X-Amz-Security-Token", valid_592714
  var valid_592715 = header.getOrDefault("X-Amz-Algorithm")
  valid_592715 = validateParameter(valid_592715, JString, required = false,
                                 default = nil)
  if valid_592715 != nil:
    section.add "X-Amz-Algorithm", valid_592715
  var valid_592716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592716 = validateParameter(valid_592716, JString, required = false,
                                 default = nil)
  if valid_592716 != nil:
    section.add "X-Amz-SignedHeaders", valid_592716
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592717: Call_GetDeleteSnapshot_592704; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592717.validator(path, query, header, formData, body)
  let scheme = call_592717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592717.url(scheme.get, call_592717.host, call_592717.base,
                         call_592717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592717, url, valid)

proc call*(call_592718: Call_GetDeleteSnapshot_592704; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_592719 = newJObject()
  add(query_592719, "Action", newJString(Action))
  add(query_592719, "Version", newJString(Version))
  add(query_592719, "SnapshotName", newJString(SnapshotName))
  result = call_592718.call(nil, query_592719, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_592704(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_592705,
    base: "/", url: url_GetDeleteSnapshot_592706,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_592757 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheClusters_592759(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheClusters_592758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592760 = query.getOrDefault("Action")
  valid_592760 = validateParameter(valid_592760, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_592760 != nil:
    section.add "Action", valid_592760
  var valid_592761 = query.getOrDefault("Version")
  valid_592761 = validateParameter(valid_592761, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592761 != nil:
    section.add "Version", valid_592761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592762 = header.getOrDefault("X-Amz-Signature")
  valid_592762 = validateParameter(valid_592762, JString, required = false,
                                 default = nil)
  if valid_592762 != nil:
    section.add "X-Amz-Signature", valid_592762
  var valid_592763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592763 = validateParameter(valid_592763, JString, required = false,
                                 default = nil)
  if valid_592763 != nil:
    section.add "X-Amz-Content-Sha256", valid_592763
  var valid_592764 = header.getOrDefault("X-Amz-Date")
  valid_592764 = validateParameter(valid_592764, JString, required = false,
                                 default = nil)
  if valid_592764 != nil:
    section.add "X-Amz-Date", valid_592764
  var valid_592765 = header.getOrDefault("X-Amz-Credential")
  valid_592765 = validateParameter(valid_592765, JString, required = false,
                                 default = nil)
  if valid_592765 != nil:
    section.add "X-Amz-Credential", valid_592765
  var valid_592766 = header.getOrDefault("X-Amz-Security-Token")
  valid_592766 = validateParameter(valid_592766, JString, required = false,
                                 default = nil)
  if valid_592766 != nil:
    section.add "X-Amz-Security-Token", valid_592766
  var valid_592767 = header.getOrDefault("X-Amz-Algorithm")
  valid_592767 = validateParameter(valid_592767, JString, required = false,
                                 default = nil)
  if valid_592767 != nil:
    section.add "X-Amz-Algorithm", valid_592767
  var valid_592768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592768 = validateParameter(valid_592768, JString, required = false,
                                 default = nil)
  if valid_592768 != nil:
    section.add "X-Amz-SignedHeaders", valid_592768
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_592769 = formData.getOrDefault("CacheClusterId")
  valid_592769 = validateParameter(valid_592769, JString, required = false,
                                 default = nil)
  if valid_592769 != nil:
    section.add "CacheClusterId", valid_592769
  var valid_592770 = formData.getOrDefault("MaxRecords")
  valid_592770 = validateParameter(valid_592770, JInt, required = false, default = nil)
  if valid_592770 != nil:
    section.add "MaxRecords", valid_592770
  var valid_592771 = formData.getOrDefault("Marker")
  valid_592771 = validateParameter(valid_592771, JString, required = false,
                                 default = nil)
  if valid_592771 != nil:
    section.add "Marker", valid_592771
  var valid_592772 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_592772 = validateParameter(valid_592772, JBool, required = false, default = nil)
  if valid_592772 != nil:
    section.add "ShowCacheNodeInfo", valid_592772
  var valid_592773 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_592773 = validateParameter(valid_592773, JBool, required = false, default = nil)
  if valid_592773 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_592773
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592774: Call_PostDescribeCacheClusters_592757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_592774.validator(path, query, header, formData, body)
  let scheme = call_592774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592774.url(scheme.get, call_592774.host, call_592774.base,
                         call_592774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592774, url, valid)

proc call*(call_592775: Call_PostDescribeCacheClusters_592757;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_592776 = newJObject()
  var formData_592777 = newJObject()
  add(formData_592777, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592777, "MaxRecords", newJInt(MaxRecords))
  add(formData_592777, "Marker", newJString(Marker))
  add(formData_592777, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_592776, "Action", newJString(Action))
  add(query_592776, "Version", newJString(Version))
  add(formData_592777, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_592775.call(nil, query_592776, nil, formData_592777, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_592757(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_592758, base: "/",
    url: url_PostDescribeCacheClusters_592759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_592737 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheClusters_592739(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheClusters_592738(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592740 = query.getOrDefault("Marker")
  valid_592740 = validateParameter(valid_592740, JString, required = false,
                                 default = nil)
  if valid_592740 != nil:
    section.add "Marker", valid_592740
  var valid_592741 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_592741 = validateParameter(valid_592741, JBool, required = false, default = nil)
  if valid_592741 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_592741
  var valid_592742 = query.getOrDefault("CacheClusterId")
  valid_592742 = validateParameter(valid_592742, JString, required = false,
                                 default = nil)
  if valid_592742 != nil:
    section.add "CacheClusterId", valid_592742
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592743 = query.getOrDefault("Action")
  valid_592743 = validateParameter(valid_592743, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_592743 != nil:
    section.add "Action", valid_592743
  var valid_592744 = query.getOrDefault("ShowCacheNodeInfo")
  valid_592744 = validateParameter(valid_592744, JBool, required = false, default = nil)
  if valid_592744 != nil:
    section.add "ShowCacheNodeInfo", valid_592744
  var valid_592745 = query.getOrDefault("Version")
  valid_592745 = validateParameter(valid_592745, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592745 != nil:
    section.add "Version", valid_592745
  var valid_592746 = query.getOrDefault("MaxRecords")
  valid_592746 = validateParameter(valid_592746, JInt, required = false, default = nil)
  if valid_592746 != nil:
    section.add "MaxRecords", valid_592746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592747 = header.getOrDefault("X-Amz-Signature")
  valid_592747 = validateParameter(valid_592747, JString, required = false,
                                 default = nil)
  if valid_592747 != nil:
    section.add "X-Amz-Signature", valid_592747
  var valid_592748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592748 = validateParameter(valid_592748, JString, required = false,
                                 default = nil)
  if valid_592748 != nil:
    section.add "X-Amz-Content-Sha256", valid_592748
  var valid_592749 = header.getOrDefault("X-Amz-Date")
  valid_592749 = validateParameter(valid_592749, JString, required = false,
                                 default = nil)
  if valid_592749 != nil:
    section.add "X-Amz-Date", valid_592749
  var valid_592750 = header.getOrDefault("X-Amz-Credential")
  valid_592750 = validateParameter(valid_592750, JString, required = false,
                                 default = nil)
  if valid_592750 != nil:
    section.add "X-Amz-Credential", valid_592750
  var valid_592751 = header.getOrDefault("X-Amz-Security-Token")
  valid_592751 = validateParameter(valid_592751, JString, required = false,
                                 default = nil)
  if valid_592751 != nil:
    section.add "X-Amz-Security-Token", valid_592751
  var valid_592752 = header.getOrDefault("X-Amz-Algorithm")
  valid_592752 = validateParameter(valid_592752, JString, required = false,
                                 default = nil)
  if valid_592752 != nil:
    section.add "X-Amz-Algorithm", valid_592752
  var valid_592753 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592753 = validateParameter(valid_592753, JString, required = false,
                                 default = nil)
  if valid_592753 != nil:
    section.add "X-Amz-SignedHeaders", valid_592753
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592754: Call_GetDescribeCacheClusters_592737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_592754.validator(path, query, header, formData, body)
  let scheme = call_592754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592754.url(scheme.get, call_592754.host, call_592754.base,
                         call_592754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592754, url, valid)

proc call*(call_592755: Call_GetDescribeCacheClusters_592737; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592756 = newJObject()
  add(query_592756, "Marker", newJString(Marker))
  add(query_592756, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_592756, "CacheClusterId", newJString(CacheClusterId))
  add(query_592756, "Action", newJString(Action))
  add(query_592756, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_592756, "Version", newJString(Version))
  add(query_592756, "MaxRecords", newJInt(MaxRecords))
  result = call_592755.call(nil, query_592756, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_592737(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_592738, base: "/",
    url: url_GetDescribeCacheClusters_592739, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_592799 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheEngineVersions_592801(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheEngineVersions_592800(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592802 = query.getOrDefault("Action")
  valid_592802 = validateParameter(valid_592802, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_592802 != nil:
    section.add "Action", valid_592802
  var valid_592803 = query.getOrDefault("Version")
  valid_592803 = validateParameter(valid_592803, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592803 != nil:
    section.add "Version", valid_592803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592804 = header.getOrDefault("X-Amz-Signature")
  valid_592804 = validateParameter(valid_592804, JString, required = false,
                                 default = nil)
  if valid_592804 != nil:
    section.add "X-Amz-Signature", valid_592804
  var valid_592805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592805 = validateParameter(valid_592805, JString, required = false,
                                 default = nil)
  if valid_592805 != nil:
    section.add "X-Amz-Content-Sha256", valid_592805
  var valid_592806 = header.getOrDefault("X-Amz-Date")
  valid_592806 = validateParameter(valid_592806, JString, required = false,
                                 default = nil)
  if valid_592806 != nil:
    section.add "X-Amz-Date", valid_592806
  var valid_592807 = header.getOrDefault("X-Amz-Credential")
  valid_592807 = validateParameter(valid_592807, JString, required = false,
                                 default = nil)
  if valid_592807 != nil:
    section.add "X-Amz-Credential", valid_592807
  var valid_592808 = header.getOrDefault("X-Amz-Security-Token")
  valid_592808 = validateParameter(valid_592808, JString, required = false,
                                 default = nil)
  if valid_592808 != nil:
    section.add "X-Amz-Security-Token", valid_592808
  var valid_592809 = header.getOrDefault("X-Amz-Algorithm")
  valid_592809 = validateParameter(valid_592809, JString, required = false,
                                 default = nil)
  if valid_592809 != nil:
    section.add "X-Amz-Algorithm", valid_592809
  var valid_592810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592810 = validateParameter(valid_592810, JString, required = false,
                                 default = nil)
  if valid_592810 != nil:
    section.add "X-Amz-SignedHeaders", valid_592810
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_592811 = formData.getOrDefault("DefaultOnly")
  valid_592811 = validateParameter(valid_592811, JBool, required = false, default = nil)
  if valid_592811 != nil:
    section.add "DefaultOnly", valid_592811
  var valid_592812 = formData.getOrDefault("MaxRecords")
  valid_592812 = validateParameter(valid_592812, JInt, required = false, default = nil)
  if valid_592812 != nil:
    section.add "MaxRecords", valid_592812
  var valid_592813 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_592813 = validateParameter(valid_592813, JString, required = false,
                                 default = nil)
  if valid_592813 != nil:
    section.add "CacheParameterGroupFamily", valid_592813
  var valid_592814 = formData.getOrDefault("EngineVersion")
  valid_592814 = validateParameter(valid_592814, JString, required = false,
                                 default = nil)
  if valid_592814 != nil:
    section.add "EngineVersion", valid_592814
  var valid_592815 = formData.getOrDefault("Marker")
  valid_592815 = validateParameter(valid_592815, JString, required = false,
                                 default = nil)
  if valid_592815 != nil:
    section.add "Marker", valid_592815
  var valid_592816 = formData.getOrDefault("Engine")
  valid_592816 = validateParameter(valid_592816, JString, required = false,
                                 default = nil)
  if valid_592816 != nil:
    section.add "Engine", valid_592816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592817: Call_PostDescribeCacheEngineVersions_592799;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_592817.validator(path, query, header, formData, body)
  let scheme = call_592817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592817.url(scheme.get, call_592817.host, call_592817.base,
                         call_592817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592817, url, valid)

proc call*(call_592818: Call_PostDescribeCacheEngineVersions_592799;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592819 = newJObject()
  var formData_592820 = newJObject()
  add(formData_592820, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_592820, "MaxRecords", newJInt(MaxRecords))
  add(formData_592820, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_592820, "EngineVersion", newJString(EngineVersion))
  add(formData_592820, "Marker", newJString(Marker))
  add(formData_592820, "Engine", newJString(Engine))
  add(query_592819, "Action", newJString(Action))
  add(query_592819, "Version", newJString(Version))
  result = call_592818.call(nil, query_592819, nil, formData_592820, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_592799(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_592800, base: "/",
    url: url_PostDescribeCacheEngineVersions_592801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_592778 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheEngineVersions_592780(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheEngineVersions_592779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_592781 = query.getOrDefault("Marker")
  valid_592781 = validateParameter(valid_592781, JString, required = false,
                                 default = nil)
  if valid_592781 != nil:
    section.add "Marker", valid_592781
  var valid_592782 = query.getOrDefault("Engine")
  valid_592782 = validateParameter(valid_592782, JString, required = false,
                                 default = nil)
  if valid_592782 != nil:
    section.add "Engine", valid_592782
  var valid_592783 = query.getOrDefault("CacheParameterGroupFamily")
  valid_592783 = validateParameter(valid_592783, JString, required = false,
                                 default = nil)
  if valid_592783 != nil:
    section.add "CacheParameterGroupFamily", valid_592783
  var valid_592784 = query.getOrDefault("EngineVersion")
  valid_592784 = validateParameter(valid_592784, JString, required = false,
                                 default = nil)
  if valid_592784 != nil:
    section.add "EngineVersion", valid_592784
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592785 = query.getOrDefault("Action")
  valid_592785 = validateParameter(valid_592785, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_592785 != nil:
    section.add "Action", valid_592785
  var valid_592786 = query.getOrDefault("Version")
  valid_592786 = validateParameter(valid_592786, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592786 != nil:
    section.add "Version", valid_592786
  var valid_592787 = query.getOrDefault("MaxRecords")
  valid_592787 = validateParameter(valid_592787, JInt, required = false, default = nil)
  if valid_592787 != nil:
    section.add "MaxRecords", valid_592787
  var valid_592788 = query.getOrDefault("DefaultOnly")
  valid_592788 = validateParameter(valid_592788, JBool, required = false, default = nil)
  if valid_592788 != nil:
    section.add "DefaultOnly", valid_592788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592789 = header.getOrDefault("X-Amz-Signature")
  valid_592789 = validateParameter(valid_592789, JString, required = false,
                                 default = nil)
  if valid_592789 != nil:
    section.add "X-Amz-Signature", valid_592789
  var valid_592790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592790 = validateParameter(valid_592790, JString, required = false,
                                 default = nil)
  if valid_592790 != nil:
    section.add "X-Amz-Content-Sha256", valid_592790
  var valid_592791 = header.getOrDefault("X-Amz-Date")
  valid_592791 = validateParameter(valid_592791, JString, required = false,
                                 default = nil)
  if valid_592791 != nil:
    section.add "X-Amz-Date", valid_592791
  var valid_592792 = header.getOrDefault("X-Amz-Credential")
  valid_592792 = validateParameter(valid_592792, JString, required = false,
                                 default = nil)
  if valid_592792 != nil:
    section.add "X-Amz-Credential", valid_592792
  var valid_592793 = header.getOrDefault("X-Amz-Security-Token")
  valid_592793 = validateParameter(valid_592793, JString, required = false,
                                 default = nil)
  if valid_592793 != nil:
    section.add "X-Amz-Security-Token", valid_592793
  var valid_592794 = header.getOrDefault("X-Amz-Algorithm")
  valid_592794 = validateParameter(valid_592794, JString, required = false,
                                 default = nil)
  if valid_592794 != nil:
    section.add "X-Amz-Algorithm", valid_592794
  var valid_592795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592795 = validateParameter(valid_592795, JString, required = false,
                                 default = nil)
  if valid_592795 != nil:
    section.add "X-Amz-SignedHeaders", valid_592795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592796: Call_GetDescribeCacheEngineVersions_592778; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_592796.validator(path, query, header, formData, body)
  let scheme = call_592796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592796.url(scheme.get, call_592796.host, call_592796.base,
                         call_592796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592796, url, valid)

proc call*(call_592797: Call_GetDescribeCacheEngineVersions_592778;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_592798 = newJObject()
  add(query_592798, "Marker", newJString(Marker))
  add(query_592798, "Engine", newJString(Engine))
  add(query_592798, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_592798, "EngineVersion", newJString(EngineVersion))
  add(query_592798, "Action", newJString(Action))
  add(query_592798, "Version", newJString(Version))
  add(query_592798, "MaxRecords", newJInt(MaxRecords))
  add(query_592798, "DefaultOnly", newJBool(DefaultOnly))
  result = call_592797.call(nil, query_592798, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_592778(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_592779, base: "/",
    url: url_GetDescribeCacheEngineVersions_592780,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_592839 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheParameterGroups_592841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameterGroups_592840(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592842 = query.getOrDefault("Action")
  valid_592842 = validateParameter(valid_592842, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_592842 != nil:
    section.add "Action", valid_592842
  var valid_592843 = query.getOrDefault("Version")
  valid_592843 = validateParameter(valid_592843, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592843 != nil:
    section.add "Version", valid_592843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592844 = header.getOrDefault("X-Amz-Signature")
  valid_592844 = validateParameter(valid_592844, JString, required = false,
                                 default = nil)
  if valid_592844 != nil:
    section.add "X-Amz-Signature", valid_592844
  var valid_592845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592845 = validateParameter(valid_592845, JString, required = false,
                                 default = nil)
  if valid_592845 != nil:
    section.add "X-Amz-Content-Sha256", valid_592845
  var valid_592846 = header.getOrDefault("X-Amz-Date")
  valid_592846 = validateParameter(valid_592846, JString, required = false,
                                 default = nil)
  if valid_592846 != nil:
    section.add "X-Amz-Date", valid_592846
  var valid_592847 = header.getOrDefault("X-Amz-Credential")
  valid_592847 = validateParameter(valid_592847, JString, required = false,
                                 default = nil)
  if valid_592847 != nil:
    section.add "X-Amz-Credential", valid_592847
  var valid_592848 = header.getOrDefault("X-Amz-Security-Token")
  valid_592848 = validateParameter(valid_592848, JString, required = false,
                                 default = nil)
  if valid_592848 != nil:
    section.add "X-Amz-Security-Token", valid_592848
  var valid_592849 = header.getOrDefault("X-Amz-Algorithm")
  valid_592849 = validateParameter(valid_592849, JString, required = false,
                                 default = nil)
  if valid_592849 != nil:
    section.add "X-Amz-Algorithm", valid_592849
  var valid_592850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592850 = validateParameter(valid_592850, JString, required = false,
                                 default = nil)
  if valid_592850 != nil:
    section.add "X-Amz-SignedHeaders", valid_592850
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_592851 = formData.getOrDefault("MaxRecords")
  valid_592851 = validateParameter(valid_592851, JInt, required = false, default = nil)
  if valid_592851 != nil:
    section.add "MaxRecords", valid_592851
  var valid_592852 = formData.getOrDefault("Marker")
  valid_592852 = validateParameter(valid_592852, JString, required = false,
                                 default = nil)
  if valid_592852 != nil:
    section.add "Marker", valid_592852
  var valid_592853 = formData.getOrDefault("CacheParameterGroupName")
  valid_592853 = validateParameter(valid_592853, JString, required = false,
                                 default = nil)
  if valid_592853 != nil:
    section.add "CacheParameterGroupName", valid_592853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592854: Call_PostDescribeCacheParameterGroups_592839;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_592854.validator(path, query, header, formData, body)
  let scheme = call_592854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592854.url(scheme.get, call_592854.host, call_592854.base,
                         call_592854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592854, url, valid)

proc call*(call_592855: Call_PostDescribeCacheParameterGroups_592839;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592856 = newJObject()
  var formData_592857 = newJObject()
  add(formData_592857, "MaxRecords", newJInt(MaxRecords))
  add(formData_592857, "Marker", newJString(Marker))
  add(formData_592857, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592856, "Action", newJString(Action))
  add(query_592856, "Version", newJString(Version))
  result = call_592855.call(nil, query_592856, nil, formData_592857, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_592839(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_592840, base: "/",
    url: url_PostDescribeCacheParameterGroups_592841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_592821 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheParameterGroups_592823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameterGroups_592822(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592824 = query.getOrDefault("Marker")
  valid_592824 = validateParameter(valid_592824, JString, required = false,
                                 default = nil)
  if valid_592824 != nil:
    section.add "Marker", valid_592824
  var valid_592825 = query.getOrDefault("CacheParameterGroupName")
  valid_592825 = validateParameter(valid_592825, JString, required = false,
                                 default = nil)
  if valid_592825 != nil:
    section.add "CacheParameterGroupName", valid_592825
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592826 = query.getOrDefault("Action")
  valid_592826 = validateParameter(valid_592826, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_592826 != nil:
    section.add "Action", valid_592826
  var valid_592827 = query.getOrDefault("Version")
  valid_592827 = validateParameter(valid_592827, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592827 != nil:
    section.add "Version", valid_592827
  var valid_592828 = query.getOrDefault("MaxRecords")
  valid_592828 = validateParameter(valid_592828, JInt, required = false, default = nil)
  if valid_592828 != nil:
    section.add "MaxRecords", valid_592828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592829 = header.getOrDefault("X-Amz-Signature")
  valid_592829 = validateParameter(valid_592829, JString, required = false,
                                 default = nil)
  if valid_592829 != nil:
    section.add "X-Amz-Signature", valid_592829
  var valid_592830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592830 = validateParameter(valid_592830, JString, required = false,
                                 default = nil)
  if valid_592830 != nil:
    section.add "X-Amz-Content-Sha256", valid_592830
  var valid_592831 = header.getOrDefault("X-Amz-Date")
  valid_592831 = validateParameter(valid_592831, JString, required = false,
                                 default = nil)
  if valid_592831 != nil:
    section.add "X-Amz-Date", valid_592831
  var valid_592832 = header.getOrDefault("X-Amz-Credential")
  valid_592832 = validateParameter(valid_592832, JString, required = false,
                                 default = nil)
  if valid_592832 != nil:
    section.add "X-Amz-Credential", valid_592832
  var valid_592833 = header.getOrDefault("X-Amz-Security-Token")
  valid_592833 = validateParameter(valid_592833, JString, required = false,
                                 default = nil)
  if valid_592833 != nil:
    section.add "X-Amz-Security-Token", valid_592833
  var valid_592834 = header.getOrDefault("X-Amz-Algorithm")
  valid_592834 = validateParameter(valid_592834, JString, required = false,
                                 default = nil)
  if valid_592834 != nil:
    section.add "X-Amz-Algorithm", valid_592834
  var valid_592835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592835 = validateParameter(valid_592835, JString, required = false,
                                 default = nil)
  if valid_592835 != nil:
    section.add "X-Amz-SignedHeaders", valid_592835
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592836: Call_GetDescribeCacheParameterGroups_592821;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_592836.validator(path, query, header, formData, body)
  let scheme = call_592836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592836.url(scheme.get, call_592836.host, call_592836.base,
                         call_592836.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592836, url, valid)

proc call*(call_592837: Call_GetDescribeCacheParameterGroups_592821;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592838 = newJObject()
  add(query_592838, "Marker", newJString(Marker))
  add(query_592838, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592838, "Action", newJString(Action))
  add(query_592838, "Version", newJString(Version))
  add(query_592838, "MaxRecords", newJInt(MaxRecords))
  result = call_592837.call(nil, query_592838, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_592821(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_592822, base: "/",
    url: url_GetDescribeCacheParameterGroups_592823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_592877 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheParameters_592879(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameters_592878(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592880 = query.getOrDefault("Action")
  valid_592880 = validateParameter(valid_592880, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_592880 != nil:
    section.add "Action", valid_592880
  var valid_592881 = query.getOrDefault("Version")
  valid_592881 = validateParameter(valid_592881, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592881 != nil:
    section.add "Version", valid_592881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592882 = header.getOrDefault("X-Amz-Signature")
  valid_592882 = validateParameter(valid_592882, JString, required = false,
                                 default = nil)
  if valid_592882 != nil:
    section.add "X-Amz-Signature", valid_592882
  var valid_592883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592883 = validateParameter(valid_592883, JString, required = false,
                                 default = nil)
  if valid_592883 != nil:
    section.add "X-Amz-Content-Sha256", valid_592883
  var valid_592884 = header.getOrDefault("X-Amz-Date")
  valid_592884 = validateParameter(valid_592884, JString, required = false,
                                 default = nil)
  if valid_592884 != nil:
    section.add "X-Amz-Date", valid_592884
  var valid_592885 = header.getOrDefault("X-Amz-Credential")
  valid_592885 = validateParameter(valid_592885, JString, required = false,
                                 default = nil)
  if valid_592885 != nil:
    section.add "X-Amz-Credential", valid_592885
  var valid_592886 = header.getOrDefault("X-Amz-Security-Token")
  valid_592886 = validateParameter(valid_592886, JString, required = false,
                                 default = nil)
  if valid_592886 != nil:
    section.add "X-Amz-Security-Token", valid_592886
  var valid_592887 = header.getOrDefault("X-Amz-Algorithm")
  valid_592887 = validateParameter(valid_592887, JString, required = false,
                                 default = nil)
  if valid_592887 != nil:
    section.add "X-Amz-Algorithm", valid_592887
  var valid_592888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592888 = validateParameter(valid_592888, JString, required = false,
                                 default = nil)
  if valid_592888 != nil:
    section.add "X-Amz-SignedHeaders", valid_592888
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_592889 = formData.getOrDefault("Source")
  valid_592889 = validateParameter(valid_592889, JString, required = false,
                                 default = nil)
  if valid_592889 != nil:
    section.add "Source", valid_592889
  var valid_592890 = formData.getOrDefault("MaxRecords")
  valid_592890 = validateParameter(valid_592890, JInt, required = false, default = nil)
  if valid_592890 != nil:
    section.add "MaxRecords", valid_592890
  var valid_592891 = formData.getOrDefault("Marker")
  valid_592891 = validateParameter(valid_592891, JString, required = false,
                                 default = nil)
  if valid_592891 != nil:
    section.add "Marker", valid_592891
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592892 = formData.getOrDefault("CacheParameterGroupName")
  valid_592892 = validateParameter(valid_592892, JString, required = true,
                                 default = nil)
  if valid_592892 != nil:
    section.add "CacheParameterGroupName", valid_592892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592893: Call_PostDescribeCacheParameters_592877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_592893.validator(path, query, header, formData, body)
  let scheme = call_592893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592893.url(scheme.get, call_592893.host, call_592893.base,
                         call_592893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592893, url, valid)

proc call*(call_592894: Call_PostDescribeCacheParameters_592877;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592895 = newJObject()
  var formData_592896 = newJObject()
  add(formData_592896, "Source", newJString(Source))
  add(formData_592896, "MaxRecords", newJInt(MaxRecords))
  add(formData_592896, "Marker", newJString(Marker))
  add(formData_592896, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592895, "Action", newJString(Action))
  add(query_592895, "Version", newJString(Version))
  result = call_592894.call(nil, query_592895, nil, formData_592896, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_592877(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_592878, base: "/",
    url: url_PostDescribeCacheParameters_592879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_592858 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheParameters_592860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameters_592859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592861 = query.getOrDefault("Marker")
  valid_592861 = validateParameter(valid_592861, JString, required = false,
                                 default = nil)
  if valid_592861 != nil:
    section.add "Marker", valid_592861
  var valid_592862 = query.getOrDefault("Source")
  valid_592862 = validateParameter(valid_592862, JString, required = false,
                                 default = nil)
  if valid_592862 != nil:
    section.add "Source", valid_592862
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592863 = query.getOrDefault("CacheParameterGroupName")
  valid_592863 = validateParameter(valid_592863, JString, required = true,
                                 default = nil)
  if valid_592863 != nil:
    section.add "CacheParameterGroupName", valid_592863
  var valid_592864 = query.getOrDefault("Action")
  valid_592864 = validateParameter(valid_592864, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_592864 != nil:
    section.add "Action", valid_592864
  var valid_592865 = query.getOrDefault("Version")
  valid_592865 = validateParameter(valid_592865, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592865 != nil:
    section.add "Version", valid_592865
  var valid_592866 = query.getOrDefault("MaxRecords")
  valid_592866 = validateParameter(valid_592866, JInt, required = false, default = nil)
  if valid_592866 != nil:
    section.add "MaxRecords", valid_592866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592867 = header.getOrDefault("X-Amz-Signature")
  valid_592867 = validateParameter(valid_592867, JString, required = false,
                                 default = nil)
  if valid_592867 != nil:
    section.add "X-Amz-Signature", valid_592867
  var valid_592868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592868 = validateParameter(valid_592868, JString, required = false,
                                 default = nil)
  if valid_592868 != nil:
    section.add "X-Amz-Content-Sha256", valid_592868
  var valid_592869 = header.getOrDefault("X-Amz-Date")
  valid_592869 = validateParameter(valid_592869, JString, required = false,
                                 default = nil)
  if valid_592869 != nil:
    section.add "X-Amz-Date", valid_592869
  var valid_592870 = header.getOrDefault("X-Amz-Credential")
  valid_592870 = validateParameter(valid_592870, JString, required = false,
                                 default = nil)
  if valid_592870 != nil:
    section.add "X-Amz-Credential", valid_592870
  var valid_592871 = header.getOrDefault("X-Amz-Security-Token")
  valid_592871 = validateParameter(valid_592871, JString, required = false,
                                 default = nil)
  if valid_592871 != nil:
    section.add "X-Amz-Security-Token", valid_592871
  var valid_592872 = header.getOrDefault("X-Amz-Algorithm")
  valid_592872 = validateParameter(valid_592872, JString, required = false,
                                 default = nil)
  if valid_592872 != nil:
    section.add "X-Amz-Algorithm", valid_592872
  var valid_592873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592873 = validateParameter(valid_592873, JString, required = false,
                                 default = nil)
  if valid_592873 != nil:
    section.add "X-Amz-SignedHeaders", valid_592873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592874: Call_GetDescribeCacheParameters_592858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_592874.validator(path, query, header, formData, body)
  let scheme = call_592874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592874.url(scheme.get, call_592874.host, call_592874.base,
                         call_592874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592874, url, valid)

proc call*(call_592875: Call_GetDescribeCacheParameters_592858;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592876 = newJObject()
  add(query_592876, "Marker", newJString(Marker))
  add(query_592876, "Source", newJString(Source))
  add(query_592876, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592876, "Action", newJString(Action))
  add(query_592876, "Version", newJString(Version))
  add(query_592876, "MaxRecords", newJInt(MaxRecords))
  result = call_592875.call(nil, query_592876, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_592858(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_592859, base: "/",
    url: url_GetDescribeCacheParameters_592860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_592915 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheSecurityGroups_592917(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_592916(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592918 = query.getOrDefault("Action")
  valid_592918 = validateParameter(valid_592918, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_592918 != nil:
    section.add "Action", valid_592918
  var valid_592919 = query.getOrDefault("Version")
  valid_592919 = validateParameter(valid_592919, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592919 != nil:
    section.add "Version", valid_592919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592920 = header.getOrDefault("X-Amz-Signature")
  valid_592920 = validateParameter(valid_592920, JString, required = false,
                                 default = nil)
  if valid_592920 != nil:
    section.add "X-Amz-Signature", valid_592920
  var valid_592921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592921 = validateParameter(valid_592921, JString, required = false,
                                 default = nil)
  if valid_592921 != nil:
    section.add "X-Amz-Content-Sha256", valid_592921
  var valid_592922 = header.getOrDefault("X-Amz-Date")
  valid_592922 = validateParameter(valid_592922, JString, required = false,
                                 default = nil)
  if valid_592922 != nil:
    section.add "X-Amz-Date", valid_592922
  var valid_592923 = header.getOrDefault("X-Amz-Credential")
  valid_592923 = validateParameter(valid_592923, JString, required = false,
                                 default = nil)
  if valid_592923 != nil:
    section.add "X-Amz-Credential", valid_592923
  var valid_592924 = header.getOrDefault("X-Amz-Security-Token")
  valid_592924 = validateParameter(valid_592924, JString, required = false,
                                 default = nil)
  if valid_592924 != nil:
    section.add "X-Amz-Security-Token", valid_592924
  var valid_592925 = header.getOrDefault("X-Amz-Algorithm")
  valid_592925 = validateParameter(valid_592925, JString, required = false,
                                 default = nil)
  if valid_592925 != nil:
    section.add "X-Amz-Algorithm", valid_592925
  var valid_592926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592926 = validateParameter(valid_592926, JString, required = false,
                                 default = nil)
  if valid_592926 != nil:
    section.add "X-Amz-SignedHeaders", valid_592926
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_592927 = formData.getOrDefault("MaxRecords")
  valid_592927 = validateParameter(valid_592927, JInt, required = false, default = nil)
  if valid_592927 != nil:
    section.add "MaxRecords", valid_592927
  var valid_592928 = formData.getOrDefault("CacheSecurityGroupName")
  valid_592928 = validateParameter(valid_592928, JString, required = false,
                                 default = nil)
  if valid_592928 != nil:
    section.add "CacheSecurityGroupName", valid_592928
  var valid_592929 = formData.getOrDefault("Marker")
  valid_592929 = validateParameter(valid_592929, JString, required = false,
                                 default = nil)
  if valid_592929 != nil:
    section.add "Marker", valid_592929
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592930: Call_PostDescribeCacheSecurityGroups_592915;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_592930.validator(path, query, header, formData, body)
  let scheme = call_592930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592930.url(scheme.get, call_592930.host, call_592930.base,
                         call_592930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592930, url, valid)

proc call*(call_592931: Call_PostDescribeCacheSecurityGroups_592915;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592932 = newJObject()
  var formData_592933 = newJObject()
  add(formData_592933, "MaxRecords", newJInt(MaxRecords))
  add(formData_592933, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_592933, "Marker", newJString(Marker))
  add(query_592932, "Action", newJString(Action))
  add(query_592932, "Version", newJString(Version))
  result = call_592931.call(nil, query_592932, nil, formData_592933, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_592915(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_592916, base: "/",
    url: url_PostDescribeCacheSecurityGroups_592917,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_592897 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheSecurityGroups_592899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_592898(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592900 = query.getOrDefault("Marker")
  valid_592900 = validateParameter(valid_592900, JString, required = false,
                                 default = nil)
  if valid_592900 != nil:
    section.add "Marker", valid_592900
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592901 = query.getOrDefault("Action")
  valid_592901 = validateParameter(valid_592901, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_592901 != nil:
    section.add "Action", valid_592901
  var valid_592902 = query.getOrDefault("CacheSecurityGroupName")
  valid_592902 = validateParameter(valid_592902, JString, required = false,
                                 default = nil)
  if valid_592902 != nil:
    section.add "CacheSecurityGroupName", valid_592902
  var valid_592903 = query.getOrDefault("Version")
  valid_592903 = validateParameter(valid_592903, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592903 != nil:
    section.add "Version", valid_592903
  var valid_592904 = query.getOrDefault("MaxRecords")
  valid_592904 = validateParameter(valid_592904, JInt, required = false, default = nil)
  if valid_592904 != nil:
    section.add "MaxRecords", valid_592904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592905 = header.getOrDefault("X-Amz-Signature")
  valid_592905 = validateParameter(valid_592905, JString, required = false,
                                 default = nil)
  if valid_592905 != nil:
    section.add "X-Amz-Signature", valid_592905
  var valid_592906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592906 = validateParameter(valid_592906, JString, required = false,
                                 default = nil)
  if valid_592906 != nil:
    section.add "X-Amz-Content-Sha256", valid_592906
  var valid_592907 = header.getOrDefault("X-Amz-Date")
  valid_592907 = validateParameter(valid_592907, JString, required = false,
                                 default = nil)
  if valid_592907 != nil:
    section.add "X-Amz-Date", valid_592907
  var valid_592908 = header.getOrDefault("X-Amz-Credential")
  valid_592908 = validateParameter(valid_592908, JString, required = false,
                                 default = nil)
  if valid_592908 != nil:
    section.add "X-Amz-Credential", valid_592908
  var valid_592909 = header.getOrDefault("X-Amz-Security-Token")
  valid_592909 = validateParameter(valid_592909, JString, required = false,
                                 default = nil)
  if valid_592909 != nil:
    section.add "X-Amz-Security-Token", valid_592909
  var valid_592910 = header.getOrDefault("X-Amz-Algorithm")
  valid_592910 = validateParameter(valid_592910, JString, required = false,
                                 default = nil)
  if valid_592910 != nil:
    section.add "X-Amz-Algorithm", valid_592910
  var valid_592911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592911 = validateParameter(valid_592911, JString, required = false,
                                 default = nil)
  if valid_592911 != nil:
    section.add "X-Amz-SignedHeaders", valid_592911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592912: Call_GetDescribeCacheSecurityGroups_592897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_592912.validator(path, query, header, formData, body)
  let scheme = call_592912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592912.url(scheme.get, call_592912.host, call_592912.base,
                         call_592912.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592912, url, valid)

proc call*(call_592913: Call_GetDescribeCacheSecurityGroups_592897;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592914 = newJObject()
  add(query_592914, "Marker", newJString(Marker))
  add(query_592914, "Action", newJString(Action))
  add(query_592914, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_592914, "Version", newJString(Version))
  add(query_592914, "MaxRecords", newJInt(MaxRecords))
  result = call_592913.call(nil, query_592914, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_592897(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_592898, base: "/",
    url: url_GetDescribeCacheSecurityGroups_592899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_592952 = ref object of OpenApiRestCall_591364
proc url_PostDescribeCacheSubnetGroups_592954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_592953(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592955 = query.getOrDefault("Action")
  valid_592955 = validateParameter(valid_592955, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_592955 != nil:
    section.add "Action", valid_592955
  var valid_592956 = query.getOrDefault("Version")
  valid_592956 = validateParameter(valid_592956, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592956 != nil:
    section.add "Version", valid_592956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592957 = header.getOrDefault("X-Amz-Signature")
  valid_592957 = validateParameter(valid_592957, JString, required = false,
                                 default = nil)
  if valid_592957 != nil:
    section.add "X-Amz-Signature", valid_592957
  var valid_592958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592958 = validateParameter(valid_592958, JString, required = false,
                                 default = nil)
  if valid_592958 != nil:
    section.add "X-Amz-Content-Sha256", valid_592958
  var valid_592959 = header.getOrDefault("X-Amz-Date")
  valid_592959 = validateParameter(valid_592959, JString, required = false,
                                 default = nil)
  if valid_592959 != nil:
    section.add "X-Amz-Date", valid_592959
  var valid_592960 = header.getOrDefault("X-Amz-Credential")
  valid_592960 = validateParameter(valid_592960, JString, required = false,
                                 default = nil)
  if valid_592960 != nil:
    section.add "X-Amz-Credential", valid_592960
  var valid_592961 = header.getOrDefault("X-Amz-Security-Token")
  valid_592961 = validateParameter(valid_592961, JString, required = false,
                                 default = nil)
  if valid_592961 != nil:
    section.add "X-Amz-Security-Token", valid_592961
  var valid_592962 = header.getOrDefault("X-Amz-Algorithm")
  valid_592962 = validateParameter(valid_592962, JString, required = false,
                                 default = nil)
  if valid_592962 != nil:
    section.add "X-Amz-Algorithm", valid_592962
  var valid_592963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592963 = validateParameter(valid_592963, JString, required = false,
                                 default = nil)
  if valid_592963 != nil:
    section.add "X-Amz-SignedHeaders", valid_592963
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_592964 = formData.getOrDefault("MaxRecords")
  valid_592964 = validateParameter(valid_592964, JInt, required = false, default = nil)
  if valid_592964 != nil:
    section.add "MaxRecords", valid_592964
  var valid_592965 = formData.getOrDefault("Marker")
  valid_592965 = validateParameter(valid_592965, JString, required = false,
                                 default = nil)
  if valid_592965 != nil:
    section.add "Marker", valid_592965
  var valid_592966 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592966 = validateParameter(valid_592966, JString, required = false,
                                 default = nil)
  if valid_592966 != nil:
    section.add "CacheSubnetGroupName", valid_592966
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592967: Call_PostDescribeCacheSubnetGroups_592952; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_592967.validator(path, query, header, formData, body)
  let scheme = call_592967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592967.url(scheme.get, call_592967.host, call_592967.base,
                         call_592967.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592967, url, valid)

proc call*(call_592968: Call_PostDescribeCacheSubnetGroups_592952;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592969 = newJObject()
  var formData_592970 = newJObject()
  add(formData_592970, "MaxRecords", newJInt(MaxRecords))
  add(formData_592970, "Marker", newJString(Marker))
  add(formData_592970, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592969, "Action", newJString(Action))
  add(query_592969, "Version", newJString(Version))
  result = call_592968.call(nil, query_592969, nil, formData_592970, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_592952(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_592953, base: "/",
    url: url_PostDescribeCacheSubnetGroups_592954,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_592934 = ref object of OpenApiRestCall_591364
proc url_GetDescribeCacheSubnetGroups_592936(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_592935(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592937 = query.getOrDefault("Marker")
  valid_592937 = validateParameter(valid_592937, JString, required = false,
                                 default = nil)
  if valid_592937 != nil:
    section.add "Marker", valid_592937
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592938 = query.getOrDefault("Action")
  valid_592938 = validateParameter(valid_592938, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_592938 != nil:
    section.add "Action", valid_592938
  var valid_592939 = query.getOrDefault("CacheSubnetGroupName")
  valid_592939 = validateParameter(valid_592939, JString, required = false,
                                 default = nil)
  if valid_592939 != nil:
    section.add "CacheSubnetGroupName", valid_592939
  var valid_592940 = query.getOrDefault("Version")
  valid_592940 = validateParameter(valid_592940, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592940 != nil:
    section.add "Version", valid_592940
  var valid_592941 = query.getOrDefault("MaxRecords")
  valid_592941 = validateParameter(valid_592941, JInt, required = false, default = nil)
  if valid_592941 != nil:
    section.add "MaxRecords", valid_592941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592942 = header.getOrDefault("X-Amz-Signature")
  valid_592942 = validateParameter(valid_592942, JString, required = false,
                                 default = nil)
  if valid_592942 != nil:
    section.add "X-Amz-Signature", valid_592942
  var valid_592943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592943 = validateParameter(valid_592943, JString, required = false,
                                 default = nil)
  if valid_592943 != nil:
    section.add "X-Amz-Content-Sha256", valid_592943
  var valid_592944 = header.getOrDefault("X-Amz-Date")
  valid_592944 = validateParameter(valid_592944, JString, required = false,
                                 default = nil)
  if valid_592944 != nil:
    section.add "X-Amz-Date", valid_592944
  var valid_592945 = header.getOrDefault("X-Amz-Credential")
  valid_592945 = validateParameter(valid_592945, JString, required = false,
                                 default = nil)
  if valid_592945 != nil:
    section.add "X-Amz-Credential", valid_592945
  var valid_592946 = header.getOrDefault("X-Amz-Security-Token")
  valid_592946 = validateParameter(valid_592946, JString, required = false,
                                 default = nil)
  if valid_592946 != nil:
    section.add "X-Amz-Security-Token", valid_592946
  var valid_592947 = header.getOrDefault("X-Amz-Algorithm")
  valid_592947 = validateParameter(valid_592947, JString, required = false,
                                 default = nil)
  if valid_592947 != nil:
    section.add "X-Amz-Algorithm", valid_592947
  var valid_592948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592948 = validateParameter(valid_592948, JString, required = false,
                                 default = nil)
  if valid_592948 != nil:
    section.add "X-Amz-SignedHeaders", valid_592948
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592949: Call_GetDescribeCacheSubnetGroups_592934; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_592949.validator(path, query, header, formData, body)
  let scheme = call_592949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592949.url(scheme.get, call_592949.host, call_592949.base,
                         call_592949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592949, url, valid)

proc call*(call_592950: Call_GetDescribeCacheSubnetGroups_592934;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592951 = newJObject()
  add(query_592951, "Marker", newJString(Marker))
  add(query_592951, "Action", newJString(Action))
  add(query_592951, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592951, "Version", newJString(Version))
  add(query_592951, "MaxRecords", newJInt(MaxRecords))
  result = call_592950.call(nil, query_592951, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_592934(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_592935, base: "/",
    url: url_GetDescribeCacheSubnetGroups_592936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_592989 = ref object of OpenApiRestCall_591364
proc url_PostDescribeEngineDefaultParameters_592991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_592990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592992 = query.getOrDefault("Action")
  valid_592992 = validateParameter(valid_592992, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_592992 != nil:
    section.add "Action", valid_592992
  var valid_592993 = query.getOrDefault("Version")
  valid_592993 = validateParameter(valid_592993, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592993 != nil:
    section.add "Version", valid_592993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592994 = header.getOrDefault("X-Amz-Signature")
  valid_592994 = validateParameter(valid_592994, JString, required = false,
                                 default = nil)
  if valid_592994 != nil:
    section.add "X-Amz-Signature", valid_592994
  var valid_592995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592995 = validateParameter(valid_592995, JString, required = false,
                                 default = nil)
  if valid_592995 != nil:
    section.add "X-Amz-Content-Sha256", valid_592995
  var valid_592996 = header.getOrDefault("X-Amz-Date")
  valid_592996 = validateParameter(valid_592996, JString, required = false,
                                 default = nil)
  if valid_592996 != nil:
    section.add "X-Amz-Date", valid_592996
  var valid_592997 = header.getOrDefault("X-Amz-Credential")
  valid_592997 = validateParameter(valid_592997, JString, required = false,
                                 default = nil)
  if valid_592997 != nil:
    section.add "X-Amz-Credential", valid_592997
  var valid_592998 = header.getOrDefault("X-Amz-Security-Token")
  valid_592998 = validateParameter(valid_592998, JString, required = false,
                                 default = nil)
  if valid_592998 != nil:
    section.add "X-Amz-Security-Token", valid_592998
  var valid_592999 = header.getOrDefault("X-Amz-Algorithm")
  valid_592999 = validateParameter(valid_592999, JString, required = false,
                                 default = nil)
  if valid_592999 != nil:
    section.add "X-Amz-Algorithm", valid_592999
  var valid_593000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593000 = validateParameter(valid_593000, JString, required = false,
                                 default = nil)
  if valid_593000 != nil:
    section.add "X-Amz-SignedHeaders", valid_593000
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_593001 = formData.getOrDefault("MaxRecords")
  valid_593001 = validateParameter(valid_593001, JInt, required = false, default = nil)
  if valid_593001 != nil:
    section.add "MaxRecords", valid_593001
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_593002 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_593002 = validateParameter(valid_593002, JString, required = true,
                                 default = nil)
  if valid_593002 != nil:
    section.add "CacheParameterGroupFamily", valid_593002
  var valid_593003 = formData.getOrDefault("Marker")
  valid_593003 = validateParameter(valid_593003, JString, required = false,
                                 default = nil)
  if valid_593003 != nil:
    section.add "Marker", valid_593003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593004: Call_PostDescribeEngineDefaultParameters_592989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_593004.validator(path, query, header, formData, body)
  let scheme = call_593004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593004.url(scheme.get, call_593004.host, call_593004.base,
                         call_593004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593004, url, valid)

proc call*(call_593005: Call_PostDescribeEngineDefaultParameters_592989;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593006 = newJObject()
  var formData_593007 = newJObject()
  add(formData_593007, "MaxRecords", newJInt(MaxRecords))
  add(formData_593007, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_593007, "Marker", newJString(Marker))
  add(query_593006, "Action", newJString(Action))
  add(query_593006, "Version", newJString(Version))
  result = call_593005.call(nil, query_593006, nil, formData_593007, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_592989(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_592990, base: "/",
    url: url_PostDescribeEngineDefaultParameters_592991,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_592971 = ref object of OpenApiRestCall_591364
proc url_GetDescribeEngineDefaultParameters_592973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_592972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592974 = query.getOrDefault("Marker")
  valid_592974 = validateParameter(valid_592974, JString, required = false,
                                 default = nil)
  if valid_592974 != nil:
    section.add "Marker", valid_592974
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_592975 = query.getOrDefault("CacheParameterGroupFamily")
  valid_592975 = validateParameter(valid_592975, JString, required = true,
                                 default = nil)
  if valid_592975 != nil:
    section.add "CacheParameterGroupFamily", valid_592975
  var valid_592976 = query.getOrDefault("Action")
  valid_592976 = validateParameter(valid_592976, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_592976 != nil:
    section.add "Action", valid_592976
  var valid_592977 = query.getOrDefault("Version")
  valid_592977 = validateParameter(valid_592977, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592977 != nil:
    section.add "Version", valid_592977
  var valid_592978 = query.getOrDefault("MaxRecords")
  valid_592978 = validateParameter(valid_592978, JInt, required = false, default = nil)
  if valid_592978 != nil:
    section.add "MaxRecords", valid_592978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592979 = header.getOrDefault("X-Amz-Signature")
  valid_592979 = validateParameter(valid_592979, JString, required = false,
                                 default = nil)
  if valid_592979 != nil:
    section.add "X-Amz-Signature", valid_592979
  var valid_592980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592980 = validateParameter(valid_592980, JString, required = false,
                                 default = nil)
  if valid_592980 != nil:
    section.add "X-Amz-Content-Sha256", valid_592980
  var valid_592981 = header.getOrDefault("X-Amz-Date")
  valid_592981 = validateParameter(valid_592981, JString, required = false,
                                 default = nil)
  if valid_592981 != nil:
    section.add "X-Amz-Date", valid_592981
  var valid_592982 = header.getOrDefault("X-Amz-Credential")
  valid_592982 = validateParameter(valid_592982, JString, required = false,
                                 default = nil)
  if valid_592982 != nil:
    section.add "X-Amz-Credential", valid_592982
  var valid_592983 = header.getOrDefault("X-Amz-Security-Token")
  valid_592983 = validateParameter(valid_592983, JString, required = false,
                                 default = nil)
  if valid_592983 != nil:
    section.add "X-Amz-Security-Token", valid_592983
  var valid_592984 = header.getOrDefault("X-Amz-Algorithm")
  valid_592984 = validateParameter(valid_592984, JString, required = false,
                                 default = nil)
  if valid_592984 != nil:
    section.add "X-Amz-Algorithm", valid_592984
  var valid_592985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592985 = validateParameter(valid_592985, JString, required = false,
                                 default = nil)
  if valid_592985 != nil:
    section.add "X-Amz-SignedHeaders", valid_592985
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592986: Call_GetDescribeEngineDefaultParameters_592971;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_592986.validator(path, query, header, formData, body)
  let scheme = call_592986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592986.url(scheme.get, call_592986.host, call_592986.base,
                         call_592986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592986, url, valid)

proc call*(call_592987: Call_GetDescribeEngineDefaultParameters_592971;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592988 = newJObject()
  add(query_592988, "Marker", newJString(Marker))
  add(query_592988, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_592988, "Action", newJString(Action))
  add(query_592988, "Version", newJString(Version))
  add(query_592988, "MaxRecords", newJInt(MaxRecords))
  result = call_592987.call(nil, query_592988, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_592971(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_592972, base: "/",
    url: url_GetDescribeEngineDefaultParameters_592973,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_593030 = ref object of OpenApiRestCall_591364
proc url_PostDescribeEvents_593032(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_593031(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593033 = query.getOrDefault("Action")
  valid_593033 = validateParameter(valid_593033, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593033 != nil:
    section.add "Action", valid_593033
  var valid_593034 = query.getOrDefault("Version")
  valid_593034 = validateParameter(valid_593034, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593034 != nil:
    section.add "Version", valid_593034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593035 = header.getOrDefault("X-Amz-Signature")
  valid_593035 = validateParameter(valid_593035, JString, required = false,
                                 default = nil)
  if valid_593035 != nil:
    section.add "X-Amz-Signature", valid_593035
  var valid_593036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593036 = validateParameter(valid_593036, JString, required = false,
                                 default = nil)
  if valid_593036 != nil:
    section.add "X-Amz-Content-Sha256", valid_593036
  var valid_593037 = header.getOrDefault("X-Amz-Date")
  valid_593037 = validateParameter(valid_593037, JString, required = false,
                                 default = nil)
  if valid_593037 != nil:
    section.add "X-Amz-Date", valid_593037
  var valid_593038 = header.getOrDefault("X-Amz-Credential")
  valid_593038 = validateParameter(valid_593038, JString, required = false,
                                 default = nil)
  if valid_593038 != nil:
    section.add "X-Amz-Credential", valid_593038
  var valid_593039 = header.getOrDefault("X-Amz-Security-Token")
  valid_593039 = validateParameter(valid_593039, JString, required = false,
                                 default = nil)
  if valid_593039 != nil:
    section.add "X-Amz-Security-Token", valid_593039
  var valid_593040 = header.getOrDefault("X-Amz-Algorithm")
  valid_593040 = validateParameter(valid_593040, JString, required = false,
                                 default = nil)
  if valid_593040 != nil:
    section.add "X-Amz-Algorithm", valid_593040
  var valid_593041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593041 = validateParameter(valid_593041, JString, required = false,
                                 default = nil)
  if valid_593041 != nil:
    section.add "X-Amz-SignedHeaders", valid_593041
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_593042 = formData.getOrDefault("MaxRecords")
  valid_593042 = validateParameter(valid_593042, JInt, required = false, default = nil)
  if valid_593042 != nil:
    section.add "MaxRecords", valid_593042
  var valid_593043 = formData.getOrDefault("Marker")
  valid_593043 = validateParameter(valid_593043, JString, required = false,
                                 default = nil)
  if valid_593043 != nil:
    section.add "Marker", valid_593043
  var valid_593044 = formData.getOrDefault("SourceIdentifier")
  valid_593044 = validateParameter(valid_593044, JString, required = false,
                                 default = nil)
  if valid_593044 != nil:
    section.add "SourceIdentifier", valid_593044
  var valid_593045 = formData.getOrDefault("SourceType")
  valid_593045 = validateParameter(valid_593045, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_593045 != nil:
    section.add "SourceType", valid_593045
  var valid_593046 = formData.getOrDefault("Duration")
  valid_593046 = validateParameter(valid_593046, JInt, required = false, default = nil)
  if valid_593046 != nil:
    section.add "Duration", valid_593046
  var valid_593047 = formData.getOrDefault("EndTime")
  valid_593047 = validateParameter(valid_593047, JString, required = false,
                                 default = nil)
  if valid_593047 != nil:
    section.add "EndTime", valid_593047
  var valid_593048 = formData.getOrDefault("StartTime")
  valid_593048 = validateParameter(valid_593048, JString, required = false,
                                 default = nil)
  if valid_593048 != nil:
    section.add "StartTime", valid_593048
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593049: Call_PostDescribeEvents_593030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_593049.validator(path, query, header, formData, body)
  let scheme = call_593049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593049.url(scheme.get, call_593049.host, call_593049.base,
                         call_593049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593049, url, valid)

proc call*(call_593050: Call_PostDescribeEvents_593030; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593051 = newJObject()
  var formData_593052 = newJObject()
  add(formData_593052, "MaxRecords", newJInt(MaxRecords))
  add(formData_593052, "Marker", newJString(Marker))
  add(formData_593052, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_593052, "SourceType", newJString(SourceType))
  add(formData_593052, "Duration", newJInt(Duration))
  add(formData_593052, "EndTime", newJString(EndTime))
  add(formData_593052, "StartTime", newJString(StartTime))
  add(query_593051, "Action", newJString(Action))
  add(query_593051, "Version", newJString(Version))
  result = call_593050.call(nil, query_593051, nil, formData_593052, nil)

var postDescribeEvents* = Call_PostDescribeEvents_593030(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_593031, base: "/",
    url: url_PostDescribeEvents_593032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_593008 = ref object of OpenApiRestCall_591364
proc url_GetDescribeEvents_593010(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_593009(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593011 = query.getOrDefault("Marker")
  valid_593011 = validateParameter(valid_593011, JString, required = false,
                                 default = nil)
  if valid_593011 != nil:
    section.add "Marker", valid_593011
  var valid_593012 = query.getOrDefault("SourceType")
  valid_593012 = validateParameter(valid_593012, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_593012 != nil:
    section.add "SourceType", valid_593012
  var valid_593013 = query.getOrDefault("SourceIdentifier")
  valid_593013 = validateParameter(valid_593013, JString, required = false,
                                 default = nil)
  if valid_593013 != nil:
    section.add "SourceIdentifier", valid_593013
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593014 = query.getOrDefault("Action")
  valid_593014 = validateParameter(valid_593014, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593014 != nil:
    section.add "Action", valid_593014
  var valid_593015 = query.getOrDefault("StartTime")
  valid_593015 = validateParameter(valid_593015, JString, required = false,
                                 default = nil)
  if valid_593015 != nil:
    section.add "StartTime", valid_593015
  var valid_593016 = query.getOrDefault("Duration")
  valid_593016 = validateParameter(valid_593016, JInt, required = false, default = nil)
  if valid_593016 != nil:
    section.add "Duration", valid_593016
  var valid_593017 = query.getOrDefault("EndTime")
  valid_593017 = validateParameter(valid_593017, JString, required = false,
                                 default = nil)
  if valid_593017 != nil:
    section.add "EndTime", valid_593017
  var valid_593018 = query.getOrDefault("Version")
  valid_593018 = validateParameter(valid_593018, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593018 != nil:
    section.add "Version", valid_593018
  var valid_593019 = query.getOrDefault("MaxRecords")
  valid_593019 = validateParameter(valid_593019, JInt, required = false, default = nil)
  if valid_593019 != nil:
    section.add "MaxRecords", valid_593019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593020 = header.getOrDefault("X-Amz-Signature")
  valid_593020 = validateParameter(valid_593020, JString, required = false,
                                 default = nil)
  if valid_593020 != nil:
    section.add "X-Amz-Signature", valid_593020
  var valid_593021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593021 = validateParameter(valid_593021, JString, required = false,
                                 default = nil)
  if valid_593021 != nil:
    section.add "X-Amz-Content-Sha256", valid_593021
  var valid_593022 = header.getOrDefault("X-Amz-Date")
  valid_593022 = validateParameter(valid_593022, JString, required = false,
                                 default = nil)
  if valid_593022 != nil:
    section.add "X-Amz-Date", valid_593022
  var valid_593023 = header.getOrDefault("X-Amz-Credential")
  valid_593023 = validateParameter(valid_593023, JString, required = false,
                                 default = nil)
  if valid_593023 != nil:
    section.add "X-Amz-Credential", valid_593023
  var valid_593024 = header.getOrDefault("X-Amz-Security-Token")
  valid_593024 = validateParameter(valid_593024, JString, required = false,
                                 default = nil)
  if valid_593024 != nil:
    section.add "X-Amz-Security-Token", valid_593024
  var valid_593025 = header.getOrDefault("X-Amz-Algorithm")
  valid_593025 = validateParameter(valid_593025, JString, required = false,
                                 default = nil)
  if valid_593025 != nil:
    section.add "X-Amz-Algorithm", valid_593025
  var valid_593026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593026 = validateParameter(valid_593026, JString, required = false,
                                 default = nil)
  if valid_593026 != nil:
    section.add "X-Amz-SignedHeaders", valid_593026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593027: Call_GetDescribeEvents_593008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_593027.validator(path, query, header, formData, body)
  let scheme = call_593027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593027.url(scheme.get, call_593027.host, call_593027.base,
                         call_593027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593027, url, valid)

proc call*(call_593028: Call_GetDescribeEvents_593008; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593029 = newJObject()
  add(query_593029, "Marker", newJString(Marker))
  add(query_593029, "SourceType", newJString(SourceType))
  add(query_593029, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_593029, "Action", newJString(Action))
  add(query_593029, "StartTime", newJString(StartTime))
  add(query_593029, "Duration", newJInt(Duration))
  add(query_593029, "EndTime", newJString(EndTime))
  add(query_593029, "Version", newJString(Version))
  add(query_593029, "MaxRecords", newJInt(MaxRecords))
  result = call_593028.call(nil, query_593029, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_593008(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_593009,
    base: "/", url: url_GetDescribeEvents_593010,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_593071 = ref object of OpenApiRestCall_591364
proc url_PostDescribeReplicationGroups_593073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReplicationGroups_593072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593074 = query.getOrDefault("Action")
  valid_593074 = validateParameter(valid_593074, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_593074 != nil:
    section.add "Action", valid_593074
  var valid_593075 = query.getOrDefault("Version")
  valid_593075 = validateParameter(valid_593075, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593075 != nil:
    section.add "Version", valid_593075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593076 = header.getOrDefault("X-Amz-Signature")
  valid_593076 = validateParameter(valid_593076, JString, required = false,
                                 default = nil)
  if valid_593076 != nil:
    section.add "X-Amz-Signature", valid_593076
  var valid_593077 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593077 = validateParameter(valid_593077, JString, required = false,
                                 default = nil)
  if valid_593077 != nil:
    section.add "X-Amz-Content-Sha256", valid_593077
  var valid_593078 = header.getOrDefault("X-Amz-Date")
  valid_593078 = validateParameter(valid_593078, JString, required = false,
                                 default = nil)
  if valid_593078 != nil:
    section.add "X-Amz-Date", valid_593078
  var valid_593079 = header.getOrDefault("X-Amz-Credential")
  valid_593079 = validateParameter(valid_593079, JString, required = false,
                                 default = nil)
  if valid_593079 != nil:
    section.add "X-Amz-Credential", valid_593079
  var valid_593080 = header.getOrDefault("X-Amz-Security-Token")
  valid_593080 = validateParameter(valid_593080, JString, required = false,
                                 default = nil)
  if valid_593080 != nil:
    section.add "X-Amz-Security-Token", valid_593080
  var valid_593081 = header.getOrDefault("X-Amz-Algorithm")
  valid_593081 = validateParameter(valid_593081, JString, required = false,
                                 default = nil)
  if valid_593081 != nil:
    section.add "X-Amz-Algorithm", valid_593081
  var valid_593082 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593082 = validateParameter(valid_593082, JString, required = false,
                                 default = nil)
  if valid_593082 != nil:
    section.add "X-Amz-SignedHeaders", valid_593082
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_593083 = formData.getOrDefault("MaxRecords")
  valid_593083 = validateParameter(valid_593083, JInt, required = false, default = nil)
  if valid_593083 != nil:
    section.add "MaxRecords", valid_593083
  var valid_593084 = formData.getOrDefault("Marker")
  valid_593084 = validateParameter(valid_593084, JString, required = false,
                                 default = nil)
  if valid_593084 != nil:
    section.add "Marker", valid_593084
  var valid_593085 = formData.getOrDefault("ReplicationGroupId")
  valid_593085 = validateParameter(valid_593085, JString, required = false,
                                 default = nil)
  if valid_593085 != nil:
    section.add "ReplicationGroupId", valid_593085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593086: Call_PostDescribeReplicationGroups_593071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593086.validator(path, query, header, formData, body)
  let scheme = call_593086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593086.url(scheme.get, call_593086.host, call_593086.base,
                         call_593086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593086, url, valid)

proc call*(call_593087: Call_PostDescribeReplicationGroups_593071;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_593088 = newJObject()
  var formData_593089 = newJObject()
  add(formData_593089, "MaxRecords", newJInt(MaxRecords))
  add(formData_593089, "Marker", newJString(Marker))
  add(query_593088, "Action", newJString(Action))
  add(query_593088, "Version", newJString(Version))
  add(formData_593089, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593087.call(nil, query_593088, nil, formData_593089, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_593071(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_593072, base: "/",
    url: url_PostDescribeReplicationGroups_593073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_593053 = ref object of OpenApiRestCall_591364
proc url_GetDescribeReplicationGroups_593055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReplicationGroups_593054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593056 = query.getOrDefault("Marker")
  valid_593056 = validateParameter(valid_593056, JString, required = false,
                                 default = nil)
  if valid_593056 != nil:
    section.add "Marker", valid_593056
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593057 = query.getOrDefault("Action")
  valid_593057 = validateParameter(valid_593057, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_593057 != nil:
    section.add "Action", valid_593057
  var valid_593058 = query.getOrDefault("ReplicationGroupId")
  valid_593058 = validateParameter(valid_593058, JString, required = false,
                                 default = nil)
  if valid_593058 != nil:
    section.add "ReplicationGroupId", valid_593058
  var valid_593059 = query.getOrDefault("Version")
  valid_593059 = validateParameter(valid_593059, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593059 != nil:
    section.add "Version", valid_593059
  var valid_593060 = query.getOrDefault("MaxRecords")
  valid_593060 = validateParameter(valid_593060, JInt, required = false, default = nil)
  if valid_593060 != nil:
    section.add "MaxRecords", valid_593060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593061 = header.getOrDefault("X-Amz-Signature")
  valid_593061 = validateParameter(valid_593061, JString, required = false,
                                 default = nil)
  if valid_593061 != nil:
    section.add "X-Amz-Signature", valid_593061
  var valid_593062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593062 = validateParameter(valid_593062, JString, required = false,
                                 default = nil)
  if valid_593062 != nil:
    section.add "X-Amz-Content-Sha256", valid_593062
  var valid_593063 = header.getOrDefault("X-Amz-Date")
  valid_593063 = validateParameter(valid_593063, JString, required = false,
                                 default = nil)
  if valid_593063 != nil:
    section.add "X-Amz-Date", valid_593063
  var valid_593064 = header.getOrDefault("X-Amz-Credential")
  valid_593064 = validateParameter(valid_593064, JString, required = false,
                                 default = nil)
  if valid_593064 != nil:
    section.add "X-Amz-Credential", valid_593064
  var valid_593065 = header.getOrDefault("X-Amz-Security-Token")
  valid_593065 = validateParameter(valid_593065, JString, required = false,
                                 default = nil)
  if valid_593065 != nil:
    section.add "X-Amz-Security-Token", valid_593065
  var valid_593066 = header.getOrDefault("X-Amz-Algorithm")
  valid_593066 = validateParameter(valid_593066, JString, required = false,
                                 default = nil)
  if valid_593066 != nil:
    section.add "X-Amz-Algorithm", valid_593066
  var valid_593067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593067 = validateParameter(valid_593067, JString, required = false,
                                 default = nil)
  if valid_593067 != nil:
    section.add "X-Amz-SignedHeaders", valid_593067
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593068: Call_GetDescribeReplicationGroups_593053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593068.validator(path, query, header, formData, body)
  let scheme = call_593068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593068.url(scheme.get, call_593068.host, call_593068.base,
                         call_593068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593068, url, valid)

proc call*(call_593069: Call_GetDescribeReplicationGroups_593053;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593070 = newJObject()
  add(query_593070, "Marker", newJString(Marker))
  add(query_593070, "Action", newJString(Action))
  add(query_593070, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593070, "Version", newJString(Version))
  add(query_593070, "MaxRecords", newJInt(MaxRecords))
  result = call_593069.call(nil, query_593070, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_593053(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_593054, base: "/",
    url: url_GetDescribeReplicationGroups_593055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_593113 = ref object of OpenApiRestCall_591364
proc url_PostDescribeReservedCacheNodes_593115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodes_593114(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593116 = query.getOrDefault("Action")
  valid_593116 = validateParameter(valid_593116, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_593116 != nil:
    section.add "Action", valid_593116
  var valid_593117 = query.getOrDefault("Version")
  valid_593117 = validateParameter(valid_593117, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593117 != nil:
    section.add "Version", valid_593117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593118 = header.getOrDefault("X-Amz-Signature")
  valid_593118 = validateParameter(valid_593118, JString, required = false,
                                 default = nil)
  if valid_593118 != nil:
    section.add "X-Amz-Signature", valid_593118
  var valid_593119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593119 = validateParameter(valid_593119, JString, required = false,
                                 default = nil)
  if valid_593119 != nil:
    section.add "X-Amz-Content-Sha256", valid_593119
  var valid_593120 = header.getOrDefault("X-Amz-Date")
  valid_593120 = validateParameter(valid_593120, JString, required = false,
                                 default = nil)
  if valid_593120 != nil:
    section.add "X-Amz-Date", valid_593120
  var valid_593121 = header.getOrDefault("X-Amz-Credential")
  valid_593121 = validateParameter(valid_593121, JString, required = false,
                                 default = nil)
  if valid_593121 != nil:
    section.add "X-Amz-Credential", valid_593121
  var valid_593122 = header.getOrDefault("X-Amz-Security-Token")
  valid_593122 = validateParameter(valid_593122, JString, required = false,
                                 default = nil)
  if valid_593122 != nil:
    section.add "X-Amz-Security-Token", valid_593122
  var valid_593123 = header.getOrDefault("X-Amz-Algorithm")
  valid_593123 = validateParameter(valid_593123, JString, required = false,
                                 default = nil)
  if valid_593123 != nil:
    section.add "X-Amz-Algorithm", valid_593123
  var valid_593124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593124 = validateParameter(valid_593124, JString, required = false,
                                 default = nil)
  if valid_593124 != nil:
    section.add "X-Amz-SignedHeaders", valid_593124
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_593125 = formData.getOrDefault("MaxRecords")
  valid_593125 = validateParameter(valid_593125, JInt, required = false, default = nil)
  if valid_593125 != nil:
    section.add "MaxRecords", valid_593125
  var valid_593126 = formData.getOrDefault("Marker")
  valid_593126 = validateParameter(valid_593126, JString, required = false,
                                 default = nil)
  if valid_593126 != nil:
    section.add "Marker", valid_593126
  var valid_593127 = formData.getOrDefault("Duration")
  valid_593127 = validateParameter(valid_593127, JString, required = false,
                                 default = nil)
  if valid_593127 != nil:
    section.add "Duration", valid_593127
  var valid_593128 = formData.getOrDefault("OfferingType")
  valid_593128 = validateParameter(valid_593128, JString, required = false,
                                 default = nil)
  if valid_593128 != nil:
    section.add "OfferingType", valid_593128
  var valid_593129 = formData.getOrDefault("ProductDescription")
  valid_593129 = validateParameter(valid_593129, JString, required = false,
                                 default = nil)
  if valid_593129 != nil:
    section.add "ProductDescription", valid_593129
  var valid_593130 = formData.getOrDefault("ReservedCacheNodeId")
  valid_593130 = validateParameter(valid_593130, JString, required = false,
                                 default = nil)
  if valid_593130 != nil:
    section.add "ReservedCacheNodeId", valid_593130
  var valid_593131 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593131 = validateParameter(valid_593131, JString, required = false,
                                 default = nil)
  if valid_593131 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593131
  var valid_593132 = formData.getOrDefault("CacheNodeType")
  valid_593132 = validateParameter(valid_593132, JString, required = false,
                                 default = nil)
  if valid_593132 != nil:
    section.add "CacheNodeType", valid_593132
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593133: Call_PostDescribeReservedCacheNodes_593113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_593133.validator(path, query, header, formData, body)
  let scheme = call_593133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593133.url(scheme.get, call_593133.host, call_593133.base,
                         call_593133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593133, url, valid)

proc call*(call_593134: Call_PostDescribeReservedCacheNodes_593113;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_593135 = newJObject()
  var formData_593136 = newJObject()
  add(formData_593136, "MaxRecords", newJInt(MaxRecords))
  add(formData_593136, "Marker", newJString(Marker))
  add(formData_593136, "Duration", newJString(Duration))
  add(formData_593136, "OfferingType", newJString(OfferingType))
  add(formData_593136, "ProductDescription", newJString(ProductDescription))
  add(query_593135, "Action", newJString(Action))
  add(query_593135, "Version", newJString(Version))
  add(formData_593136, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_593136, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_593136, "CacheNodeType", newJString(CacheNodeType))
  result = call_593134.call(nil, query_593135, nil, formData_593136, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_593113(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_593114, base: "/",
    url: url_PostDescribeReservedCacheNodes_593115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_593090 = ref object of OpenApiRestCall_591364
proc url_GetDescribeReservedCacheNodes_593092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodes_593091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_593093 = query.getOrDefault("Marker")
  valid_593093 = validateParameter(valid_593093, JString, required = false,
                                 default = nil)
  if valid_593093 != nil:
    section.add "Marker", valid_593093
  var valid_593094 = query.getOrDefault("ProductDescription")
  valid_593094 = validateParameter(valid_593094, JString, required = false,
                                 default = nil)
  if valid_593094 != nil:
    section.add "ProductDescription", valid_593094
  var valid_593095 = query.getOrDefault("OfferingType")
  valid_593095 = validateParameter(valid_593095, JString, required = false,
                                 default = nil)
  if valid_593095 != nil:
    section.add "OfferingType", valid_593095
  var valid_593096 = query.getOrDefault("CacheNodeType")
  valid_593096 = validateParameter(valid_593096, JString, required = false,
                                 default = nil)
  if valid_593096 != nil:
    section.add "CacheNodeType", valid_593096
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593097 = query.getOrDefault("Action")
  valid_593097 = validateParameter(valid_593097, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_593097 != nil:
    section.add "Action", valid_593097
  var valid_593098 = query.getOrDefault("Duration")
  valid_593098 = validateParameter(valid_593098, JString, required = false,
                                 default = nil)
  if valid_593098 != nil:
    section.add "Duration", valid_593098
  var valid_593099 = query.getOrDefault("ReservedCacheNodeId")
  valid_593099 = validateParameter(valid_593099, JString, required = false,
                                 default = nil)
  if valid_593099 != nil:
    section.add "ReservedCacheNodeId", valid_593099
  var valid_593100 = query.getOrDefault("Version")
  valid_593100 = validateParameter(valid_593100, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593100 != nil:
    section.add "Version", valid_593100
  var valid_593101 = query.getOrDefault("MaxRecords")
  valid_593101 = validateParameter(valid_593101, JInt, required = false, default = nil)
  if valid_593101 != nil:
    section.add "MaxRecords", valid_593101
  var valid_593102 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593102 = validateParameter(valid_593102, JString, required = false,
                                 default = nil)
  if valid_593102 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593103 = header.getOrDefault("X-Amz-Signature")
  valid_593103 = validateParameter(valid_593103, JString, required = false,
                                 default = nil)
  if valid_593103 != nil:
    section.add "X-Amz-Signature", valid_593103
  var valid_593104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593104 = validateParameter(valid_593104, JString, required = false,
                                 default = nil)
  if valid_593104 != nil:
    section.add "X-Amz-Content-Sha256", valid_593104
  var valid_593105 = header.getOrDefault("X-Amz-Date")
  valid_593105 = validateParameter(valid_593105, JString, required = false,
                                 default = nil)
  if valid_593105 != nil:
    section.add "X-Amz-Date", valid_593105
  var valid_593106 = header.getOrDefault("X-Amz-Credential")
  valid_593106 = validateParameter(valid_593106, JString, required = false,
                                 default = nil)
  if valid_593106 != nil:
    section.add "X-Amz-Credential", valid_593106
  var valid_593107 = header.getOrDefault("X-Amz-Security-Token")
  valid_593107 = validateParameter(valid_593107, JString, required = false,
                                 default = nil)
  if valid_593107 != nil:
    section.add "X-Amz-Security-Token", valid_593107
  var valid_593108 = header.getOrDefault("X-Amz-Algorithm")
  valid_593108 = validateParameter(valid_593108, JString, required = false,
                                 default = nil)
  if valid_593108 != nil:
    section.add "X-Amz-Algorithm", valid_593108
  var valid_593109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593109 = validateParameter(valid_593109, JString, required = false,
                                 default = nil)
  if valid_593109 != nil:
    section.add "X-Amz-SignedHeaders", valid_593109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593110: Call_GetDescribeReservedCacheNodes_593090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_593110.validator(path, query, header, formData, body)
  let scheme = call_593110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593110.url(scheme.get, call_593110.host, call_593110.base,
                         call_593110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593110, url, valid)

proc call*(call_593111: Call_GetDescribeReservedCacheNodes_593090;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_593112 = newJObject()
  add(query_593112, "Marker", newJString(Marker))
  add(query_593112, "ProductDescription", newJString(ProductDescription))
  add(query_593112, "OfferingType", newJString(OfferingType))
  add(query_593112, "CacheNodeType", newJString(CacheNodeType))
  add(query_593112, "Action", newJString(Action))
  add(query_593112, "Duration", newJString(Duration))
  add(query_593112, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_593112, "Version", newJString(Version))
  add(query_593112, "MaxRecords", newJInt(MaxRecords))
  add(query_593112, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_593111.call(nil, query_593112, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_593090(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_593091, base: "/",
    url: url_GetDescribeReservedCacheNodes_593092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_593159 = ref object of OpenApiRestCall_591364
proc url_PostDescribeReservedCacheNodesOfferings_593161(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_593160(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593162 = query.getOrDefault("Action")
  valid_593162 = validateParameter(valid_593162, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_593162 != nil:
    section.add "Action", valid_593162
  var valid_593163 = query.getOrDefault("Version")
  valid_593163 = validateParameter(valid_593163, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593163 != nil:
    section.add "Version", valid_593163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593164 = header.getOrDefault("X-Amz-Signature")
  valid_593164 = validateParameter(valid_593164, JString, required = false,
                                 default = nil)
  if valid_593164 != nil:
    section.add "X-Amz-Signature", valid_593164
  var valid_593165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593165 = validateParameter(valid_593165, JString, required = false,
                                 default = nil)
  if valid_593165 != nil:
    section.add "X-Amz-Content-Sha256", valid_593165
  var valid_593166 = header.getOrDefault("X-Amz-Date")
  valid_593166 = validateParameter(valid_593166, JString, required = false,
                                 default = nil)
  if valid_593166 != nil:
    section.add "X-Amz-Date", valid_593166
  var valid_593167 = header.getOrDefault("X-Amz-Credential")
  valid_593167 = validateParameter(valid_593167, JString, required = false,
                                 default = nil)
  if valid_593167 != nil:
    section.add "X-Amz-Credential", valid_593167
  var valid_593168 = header.getOrDefault("X-Amz-Security-Token")
  valid_593168 = validateParameter(valid_593168, JString, required = false,
                                 default = nil)
  if valid_593168 != nil:
    section.add "X-Amz-Security-Token", valid_593168
  var valid_593169 = header.getOrDefault("X-Amz-Algorithm")
  valid_593169 = validateParameter(valid_593169, JString, required = false,
                                 default = nil)
  if valid_593169 != nil:
    section.add "X-Amz-Algorithm", valid_593169
  var valid_593170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593170 = validateParameter(valid_593170, JString, required = false,
                                 default = nil)
  if valid_593170 != nil:
    section.add "X-Amz-SignedHeaders", valid_593170
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_593171 = formData.getOrDefault("MaxRecords")
  valid_593171 = validateParameter(valid_593171, JInt, required = false, default = nil)
  if valid_593171 != nil:
    section.add "MaxRecords", valid_593171
  var valid_593172 = formData.getOrDefault("Marker")
  valid_593172 = validateParameter(valid_593172, JString, required = false,
                                 default = nil)
  if valid_593172 != nil:
    section.add "Marker", valid_593172
  var valid_593173 = formData.getOrDefault("Duration")
  valid_593173 = validateParameter(valid_593173, JString, required = false,
                                 default = nil)
  if valid_593173 != nil:
    section.add "Duration", valid_593173
  var valid_593174 = formData.getOrDefault("OfferingType")
  valid_593174 = validateParameter(valid_593174, JString, required = false,
                                 default = nil)
  if valid_593174 != nil:
    section.add "OfferingType", valid_593174
  var valid_593175 = formData.getOrDefault("ProductDescription")
  valid_593175 = validateParameter(valid_593175, JString, required = false,
                                 default = nil)
  if valid_593175 != nil:
    section.add "ProductDescription", valid_593175
  var valid_593176 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593176 = validateParameter(valid_593176, JString, required = false,
                                 default = nil)
  if valid_593176 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593176
  var valid_593177 = formData.getOrDefault("CacheNodeType")
  valid_593177 = validateParameter(valid_593177, JString, required = false,
                                 default = nil)
  if valid_593177 != nil:
    section.add "CacheNodeType", valid_593177
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593178: Call_PostDescribeReservedCacheNodesOfferings_593159;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_593178.validator(path, query, header, formData, body)
  let scheme = call_593178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593178.url(scheme.get, call_593178.host, call_593178.base,
                         call_593178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593178, url, valid)

proc call*(call_593179: Call_PostDescribeReservedCacheNodesOfferings_593159;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_593180 = newJObject()
  var formData_593181 = newJObject()
  add(formData_593181, "MaxRecords", newJInt(MaxRecords))
  add(formData_593181, "Marker", newJString(Marker))
  add(formData_593181, "Duration", newJString(Duration))
  add(formData_593181, "OfferingType", newJString(OfferingType))
  add(formData_593181, "ProductDescription", newJString(ProductDescription))
  add(query_593180, "Action", newJString(Action))
  add(query_593180, "Version", newJString(Version))
  add(formData_593181, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_593181, "CacheNodeType", newJString(CacheNodeType))
  result = call_593179.call(nil, query_593180, nil, formData_593181, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_593159(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_593160, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_593161,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_593137 = ref object of OpenApiRestCall_591364
proc url_GetDescribeReservedCacheNodesOfferings_593139(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_593138(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_593140 = query.getOrDefault("Marker")
  valid_593140 = validateParameter(valid_593140, JString, required = false,
                                 default = nil)
  if valid_593140 != nil:
    section.add "Marker", valid_593140
  var valid_593141 = query.getOrDefault("ProductDescription")
  valid_593141 = validateParameter(valid_593141, JString, required = false,
                                 default = nil)
  if valid_593141 != nil:
    section.add "ProductDescription", valid_593141
  var valid_593142 = query.getOrDefault("OfferingType")
  valid_593142 = validateParameter(valid_593142, JString, required = false,
                                 default = nil)
  if valid_593142 != nil:
    section.add "OfferingType", valid_593142
  var valid_593143 = query.getOrDefault("CacheNodeType")
  valid_593143 = validateParameter(valid_593143, JString, required = false,
                                 default = nil)
  if valid_593143 != nil:
    section.add "CacheNodeType", valid_593143
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593144 = query.getOrDefault("Action")
  valid_593144 = validateParameter(valid_593144, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_593144 != nil:
    section.add "Action", valid_593144
  var valid_593145 = query.getOrDefault("Duration")
  valid_593145 = validateParameter(valid_593145, JString, required = false,
                                 default = nil)
  if valid_593145 != nil:
    section.add "Duration", valid_593145
  var valid_593146 = query.getOrDefault("Version")
  valid_593146 = validateParameter(valid_593146, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593146 != nil:
    section.add "Version", valid_593146
  var valid_593147 = query.getOrDefault("MaxRecords")
  valid_593147 = validateParameter(valid_593147, JInt, required = false, default = nil)
  if valid_593147 != nil:
    section.add "MaxRecords", valid_593147
  var valid_593148 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593148 = validateParameter(valid_593148, JString, required = false,
                                 default = nil)
  if valid_593148 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593149 = header.getOrDefault("X-Amz-Signature")
  valid_593149 = validateParameter(valid_593149, JString, required = false,
                                 default = nil)
  if valid_593149 != nil:
    section.add "X-Amz-Signature", valid_593149
  var valid_593150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593150 = validateParameter(valid_593150, JString, required = false,
                                 default = nil)
  if valid_593150 != nil:
    section.add "X-Amz-Content-Sha256", valid_593150
  var valid_593151 = header.getOrDefault("X-Amz-Date")
  valid_593151 = validateParameter(valid_593151, JString, required = false,
                                 default = nil)
  if valid_593151 != nil:
    section.add "X-Amz-Date", valid_593151
  var valid_593152 = header.getOrDefault("X-Amz-Credential")
  valid_593152 = validateParameter(valid_593152, JString, required = false,
                                 default = nil)
  if valid_593152 != nil:
    section.add "X-Amz-Credential", valid_593152
  var valid_593153 = header.getOrDefault("X-Amz-Security-Token")
  valid_593153 = validateParameter(valid_593153, JString, required = false,
                                 default = nil)
  if valid_593153 != nil:
    section.add "X-Amz-Security-Token", valid_593153
  var valid_593154 = header.getOrDefault("X-Amz-Algorithm")
  valid_593154 = validateParameter(valid_593154, JString, required = false,
                                 default = nil)
  if valid_593154 != nil:
    section.add "X-Amz-Algorithm", valid_593154
  var valid_593155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593155 = validateParameter(valid_593155, JString, required = false,
                                 default = nil)
  if valid_593155 != nil:
    section.add "X-Amz-SignedHeaders", valid_593155
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593156: Call_GetDescribeReservedCacheNodesOfferings_593137;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_593156.validator(path, query, header, formData, body)
  let scheme = call_593156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593156.url(scheme.get, call_593156.host, call_593156.base,
                         call_593156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593156, url, valid)

proc call*(call_593157: Call_GetDescribeReservedCacheNodesOfferings_593137;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_593158 = newJObject()
  add(query_593158, "Marker", newJString(Marker))
  add(query_593158, "ProductDescription", newJString(ProductDescription))
  add(query_593158, "OfferingType", newJString(OfferingType))
  add(query_593158, "CacheNodeType", newJString(CacheNodeType))
  add(query_593158, "Action", newJString(Action))
  add(query_593158, "Duration", newJString(Duration))
  add(query_593158, "Version", newJString(Version))
  add(query_593158, "MaxRecords", newJInt(MaxRecords))
  add(query_593158, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_593157.call(nil, query_593158, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_593137(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_593138, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_593139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_593201 = ref object of OpenApiRestCall_591364
proc url_PostDescribeServiceUpdates_593203(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeServiceUpdates_593202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593204 = query.getOrDefault("Action")
  valid_593204 = validateParameter(valid_593204, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_593204 != nil:
    section.add "Action", valid_593204
  var valid_593205 = query.getOrDefault("Version")
  valid_593205 = validateParameter(valid_593205, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593205 != nil:
    section.add "Version", valid_593205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593206 = header.getOrDefault("X-Amz-Signature")
  valid_593206 = validateParameter(valid_593206, JString, required = false,
                                 default = nil)
  if valid_593206 != nil:
    section.add "X-Amz-Signature", valid_593206
  var valid_593207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593207 = validateParameter(valid_593207, JString, required = false,
                                 default = nil)
  if valid_593207 != nil:
    section.add "X-Amz-Content-Sha256", valid_593207
  var valid_593208 = header.getOrDefault("X-Amz-Date")
  valid_593208 = validateParameter(valid_593208, JString, required = false,
                                 default = nil)
  if valid_593208 != nil:
    section.add "X-Amz-Date", valid_593208
  var valid_593209 = header.getOrDefault("X-Amz-Credential")
  valid_593209 = validateParameter(valid_593209, JString, required = false,
                                 default = nil)
  if valid_593209 != nil:
    section.add "X-Amz-Credential", valid_593209
  var valid_593210 = header.getOrDefault("X-Amz-Security-Token")
  valid_593210 = validateParameter(valid_593210, JString, required = false,
                                 default = nil)
  if valid_593210 != nil:
    section.add "X-Amz-Security-Token", valid_593210
  var valid_593211 = header.getOrDefault("X-Amz-Algorithm")
  valid_593211 = validateParameter(valid_593211, JString, required = false,
                                 default = nil)
  if valid_593211 != nil:
    section.add "X-Amz-Algorithm", valid_593211
  var valid_593212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593212 = validateParameter(valid_593212, JString, required = false,
                                 default = nil)
  if valid_593212 != nil:
    section.add "X-Amz-SignedHeaders", valid_593212
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_593213 = formData.getOrDefault("MaxRecords")
  valid_593213 = validateParameter(valid_593213, JInt, required = false, default = nil)
  if valid_593213 != nil:
    section.add "MaxRecords", valid_593213
  var valid_593214 = formData.getOrDefault("ServiceUpdateName")
  valid_593214 = validateParameter(valid_593214, JString, required = false,
                                 default = nil)
  if valid_593214 != nil:
    section.add "ServiceUpdateName", valid_593214
  var valid_593215 = formData.getOrDefault("Marker")
  valid_593215 = validateParameter(valid_593215, JString, required = false,
                                 default = nil)
  if valid_593215 != nil:
    section.add "Marker", valid_593215
  var valid_593216 = formData.getOrDefault("ServiceUpdateStatus")
  valid_593216 = validateParameter(valid_593216, JArray, required = false,
                                 default = nil)
  if valid_593216 != nil:
    section.add "ServiceUpdateStatus", valid_593216
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593217: Call_PostDescribeServiceUpdates_593201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_593217.validator(path, query, header, formData, body)
  let scheme = call_593217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593217.url(scheme.get, call_593217.host, call_593217.base,
                         call_593217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593217, url, valid)

proc call*(call_593218: Call_PostDescribeServiceUpdates_593201;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_593219 = newJObject()
  var formData_593220 = newJObject()
  add(formData_593220, "MaxRecords", newJInt(MaxRecords))
  add(formData_593220, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_593220, "Marker", newJString(Marker))
  add(query_593219, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_593220.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_593219, "Version", newJString(Version))
  result = call_593218.call(nil, query_593219, nil, formData_593220, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_593201(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_593202, base: "/",
    url: url_PostDescribeServiceUpdates_593203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_593182 = ref object of OpenApiRestCall_591364
proc url_GetDescribeServiceUpdates_593184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeServiceUpdates_593183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_593185 = query.getOrDefault("Marker")
  valid_593185 = validateParameter(valid_593185, JString, required = false,
                                 default = nil)
  if valid_593185 != nil:
    section.add "Marker", valid_593185
  var valid_593186 = query.getOrDefault("ServiceUpdateName")
  valid_593186 = validateParameter(valid_593186, JString, required = false,
                                 default = nil)
  if valid_593186 != nil:
    section.add "ServiceUpdateName", valid_593186
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593187 = query.getOrDefault("Action")
  valid_593187 = validateParameter(valid_593187, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_593187 != nil:
    section.add "Action", valid_593187
  var valid_593188 = query.getOrDefault("ServiceUpdateStatus")
  valid_593188 = validateParameter(valid_593188, JArray, required = false,
                                 default = nil)
  if valid_593188 != nil:
    section.add "ServiceUpdateStatus", valid_593188
  var valid_593189 = query.getOrDefault("Version")
  valid_593189 = validateParameter(valid_593189, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593189 != nil:
    section.add "Version", valid_593189
  var valid_593190 = query.getOrDefault("MaxRecords")
  valid_593190 = validateParameter(valid_593190, JInt, required = false, default = nil)
  if valid_593190 != nil:
    section.add "MaxRecords", valid_593190
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593191 = header.getOrDefault("X-Amz-Signature")
  valid_593191 = validateParameter(valid_593191, JString, required = false,
                                 default = nil)
  if valid_593191 != nil:
    section.add "X-Amz-Signature", valid_593191
  var valid_593192 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593192 = validateParameter(valid_593192, JString, required = false,
                                 default = nil)
  if valid_593192 != nil:
    section.add "X-Amz-Content-Sha256", valid_593192
  var valid_593193 = header.getOrDefault("X-Amz-Date")
  valid_593193 = validateParameter(valid_593193, JString, required = false,
                                 default = nil)
  if valid_593193 != nil:
    section.add "X-Amz-Date", valid_593193
  var valid_593194 = header.getOrDefault("X-Amz-Credential")
  valid_593194 = validateParameter(valid_593194, JString, required = false,
                                 default = nil)
  if valid_593194 != nil:
    section.add "X-Amz-Credential", valid_593194
  var valid_593195 = header.getOrDefault("X-Amz-Security-Token")
  valid_593195 = validateParameter(valid_593195, JString, required = false,
                                 default = nil)
  if valid_593195 != nil:
    section.add "X-Amz-Security-Token", valid_593195
  var valid_593196 = header.getOrDefault("X-Amz-Algorithm")
  valid_593196 = validateParameter(valid_593196, JString, required = false,
                                 default = nil)
  if valid_593196 != nil:
    section.add "X-Amz-Algorithm", valid_593196
  var valid_593197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593197 = validateParameter(valid_593197, JString, required = false,
                                 default = nil)
  if valid_593197 != nil:
    section.add "X-Amz-SignedHeaders", valid_593197
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593198: Call_GetDescribeServiceUpdates_593182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_593198.validator(path, query, header, formData, body)
  let scheme = call_593198.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593198.url(scheme.get, call_593198.host, call_593198.base,
                         call_593198.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593198, url, valid)

proc call*(call_593199: Call_GetDescribeServiceUpdates_593182; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_593200 = newJObject()
  add(query_593200, "Marker", newJString(Marker))
  add(query_593200, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_593200, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_593200.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_593200, "Version", newJString(Version))
  add(query_593200, "MaxRecords", newJInt(MaxRecords))
  result = call_593199.call(nil, query_593200, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_593182(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_593183, base: "/",
    url: url_GetDescribeServiceUpdates_593184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_593243 = ref object of OpenApiRestCall_591364
proc url_PostDescribeSnapshots_593245(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSnapshots_593244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593246 = query.getOrDefault("Action")
  valid_593246 = validateParameter(valid_593246, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_593246 != nil:
    section.add "Action", valid_593246
  var valid_593247 = query.getOrDefault("Version")
  valid_593247 = validateParameter(valid_593247, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593247 != nil:
    section.add "Version", valid_593247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593248 = header.getOrDefault("X-Amz-Signature")
  valid_593248 = validateParameter(valid_593248, JString, required = false,
                                 default = nil)
  if valid_593248 != nil:
    section.add "X-Amz-Signature", valid_593248
  var valid_593249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593249 = validateParameter(valid_593249, JString, required = false,
                                 default = nil)
  if valid_593249 != nil:
    section.add "X-Amz-Content-Sha256", valid_593249
  var valid_593250 = header.getOrDefault("X-Amz-Date")
  valid_593250 = validateParameter(valid_593250, JString, required = false,
                                 default = nil)
  if valid_593250 != nil:
    section.add "X-Amz-Date", valid_593250
  var valid_593251 = header.getOrDefault("X-Amz-Credential")
  valid_593251 = validateParameter(valid_593251, JString, required = false,
                                 default = nil)
  if valid_593251 != nil:
    section.add "X-Amz-Credential", valid_593251
  var valid_593252 = header.getOrDefault("X-Amz-Security-Token")
  valid_593252 = validateParameter(valid_593252, JString, required = false,
                                 default = nil)
  if valid_593252 != nil:
    section.add "X-Amz-Security-Token", valid_593252
  var valid_593253 = header.getOrDefault("X-Amz-Algorithm")
  valid_593253 = validateParameter(valid_593253, JString, required = false,
                                 default = nil)
  if valid_593253 != nil:
    section.add "X-Amz-Algorithm", valid_593253
  var valid_593254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593254 = validateParameter(valid_593254, JString, required = false,
                                 default = nil)
  if valid_593254 != nil:
    section.add "X-Amz-SignedHeaders", valid_593254
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_593255 = formData.getOrDefault("CacheClusterId")
  valid_593255 = validateParameter(valid_593255, JString, required = false,
                                 default = nil)
  if valid_593255 != nil:
    section.add "CacheClusterId", valid_593255
  var valid_593256 = formData.getOrDefault("MaxRecords")
  valid_593256 = validateParameter(valid_593256, JInt, required = false, default = nil)
  if valid_593256 != nil:
    section.add "MaxRecords", valid_593256
  var valid_593257 = formData.getOrDefault("Marker")
  valid_593257 = validateParameter(valid_593257, JString, required = false,
                                 default = nil)
  if valid_593257 != nil:
    section.add "Marker", valid_593257
  var valid_593258 = formData.getOrDefault("SnapshotName")
  valid_593258 = validateParameter(valid_593258, JString, required = false,
                                 default = nil)
  if valid_593258 != nil:
    section.add "SnapshotName", valid_593258
  var valid_593259 = formData.getOrDefault("SnapshotSource")
  valid_593259 = validateParameter(valid_593259, JString, required = false,
                                 default = nil)
  if valid_593259 != nil:
    section.add "SnapshotSource", valid_593259
  var valid_593260 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_593260 = validateParameter(valid_593260, JBool, required = false, default = nil)
  if valid_593260 != nil:
    section.add "ShowNodeGroupConfig", valid_593260
  var valid_593261 = formData.getOrDefault("ReplicationGroupId")
  valid_593261 = validateParameter(valid_593261, JString, required = false,
                                 default = nil)
  if valid_593261 != nil:
    section.add "ReplicationGroupId", valid_593261
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593262: Call_PostDescribeSnapshots_593243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593262.validator(path, query, header, formData, body)
  let scheme = call_593262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593262.url(scheme.get, call_593262.host, call_593262.base,
                         call_593262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593262, url, valid)

proc call*(call_593263: Call_PostDescribeSnapshots_593243;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_593264 = newJObject()
  var formData_593265 = newJObject()
  add(formData_593265, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593265, "MaxRecords", newJInt(MaxRecords))
  add(formData_593265, "Marker", newJString(Marker))
  add(formData_593265, "SnapshotName", newJString(SnapshotName))
  add(formData_593265, "SnapshotSource", newJString(SnapshotSource))
  add(query_593264, "Action", newJString(Action))
  add(formData_593265, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_593264, "Version", newJString(Version))
  add(formData_593265, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593263.call(nil, query_593264, nil, formData_593265, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_593243(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_593244, base: "/",
    url: url_PostDescribeSnapshots_593245, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_593221 = ref object of OpenApiRestCall_591364
proc url_GetDescribeSnapshots_593223(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSnapshots_593222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_593224 = query.getOrDefault("Marker")
  valid_593224 = validateParameter(valid_593224, JString, required = false,
                                 default = nil)
  if valid_593224 != nil:
    section.add "Marker", valid_593224
  var valid_593225 = query.getOrDefault("CacheClusterId")
  valid_593225 = validateParameter(valid_593225, JString, required = false,
                                 default = nil)
  if valid_593225 != nil:
    section.add "CacheClusterId", valid_593225
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593226 = query.getOrDefault("Action")
  valid_593226 = validateParameter(valid_593226, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_593226 != nil:
    section.add "Action", valid_593226
  var valid_593227 = query.getOrDefault("ReplicationGroupId")
  valid_593227 = validateParameter(valid_593227, JString, required = false,
                                 default = nil)
  if valid_593227 != nil:
    section.add "ReplicationGroupId", valid_593227
  var valid_593228 = query.getOrDefault("Version")
  valid_593228 = validateParameter(valid_593228, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593228 != nil:
    section.add "Version", valid_593228
  var valid_593229 = query.getOrDefault("SnapshotName")
  valid_593229 = validateParameter(valid_593229, JString, required = false,
                                 default = nil)
  if valid_593229 != nil:
    section.add "SnapshotName", valid_593229
  var valid_593230 = query.getOrDefault("SnapshotSource")
  valid_593230 = validateParameter(valid_593230, JString, required = false,
                                 default = nil)
  if valid_593230 != nil:
    section.add "SnapshotSource", valid_593230
  var valid_593231 = query.getOrDefault("MaxRecords")
  valid_593231 = validateParameter(valid_593231, JInt, required = false, default = nil)
  if valid_593231 != nil:
    section.add "MaxRecords", valid_593231
  var valid_593232 = query.getOrDefault("ShowNodeGroupConfig")
  valid_593232 = validateParameter(valid_593232, JBool, required = false, default = nil)
  if valid_593232 != nil:
    section.add "ShowNodeGroupConfig", valid_593232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593233 = header.getOrDefault("X-Amz-Signature")
  valid_593233 = validateParameter(valid_593233, JString, required = false,
                                 default = nil)
  if valid_593233 != nil:
    section.add "X-Amz-Signature", valid_593233
  var valid_593234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593234 = validateParameter(valid_593234, JString, required = false,
                                 default = nil)
  if valid_593234 != nil:
    section.add "X-Amz-Content-Sha256", valid_593234
  var valid_593235 = header.getOrDefault("X-Amz-Date")
  valid_593235 = validateParameter(valid_593235, JString, required = false,
                                 default = nil)
  if valid_593235 != nil:
    section.add "X-Amz-Date", valid_593235
  var valid_593236 = header.getOrDefault("X-Amz-Credential")
  valid_593236 = validateParameter(valid_593236, JString, required = false,
                                 default = nil)
  if valid_593236 != nil:
    section.add "X-Amz-Credential", valid_593236
  var valid_593237 = header.getOrDefault("X-Amz-Security-Token")
  valid_593237 = validateParameter(valid_593237, JString, required = false,
                                 default = nil)
  if valid_593237 != nil:
    section.add "X-Amz-Security-Token", valid_593237
  var valid_593238 = header.getOrDefault("X-Amz-Algorithm")
  valid_593238 = validateParameter(valid_593238, JString, required = false,
                                 default = nil)
  if valid_593238 != nil:
    section.add "X-Amz-Algorithm", valid_593238
  var valid_593239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593239 = validateParameter(valid_593239, JString, required = false,
                                 default = nil)
  if valid_593239 != nil:
    section.add "X-Amz-SignedHeaders", valid_593239
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593240: Call_GetDescribeSnapshots_593221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593240.validator(path, query, header, formData, body)
  let scheme = call_593240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593240.url(scheme.get, call_593240.host, call_593240.base,
                         call_593240.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593240, url, valid)

proc call*(call_593241: Call_GetDescribeSnapshots_593221; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_593242 = newJObject()
  add(query_593242, "Marker", newJString(Marker))
  add(query_593242, "CacheClusterId", newJString(CacheClusterId))
  add(query_593242, "Action", newJString(Action))
  add(query_593242, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593242, "Version", newJString(Version))
  add(query_593242, "SnapshotName", newJString(SnapshotName))
  add(query_593242, "SnapshotSource", newJString(SnapshotSource))
  add(query_593242, "MaxRecords", newJInt(MaxRecords))
  add(query_593242, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_593241.call(nil, query_593242, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_593221(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_593222, base: "/",
    url: url_GetDescribeSnapshots_593223, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_593292 = ref object of OpenApiRestCall_591364
proc url_PostDescribeUpdateActions_593294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeUpdateActions_593293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593295 = query.getOrDefault("Action")
  valid_593295 = validateParameter(valid_593295, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_593295 != nil:
    section.add "Action", valid_593295
  var valid_593296 = query.getOrDefault("Version")
  valid_593296 = validateParameter(valid_593296, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593296 != nil:
    section.add "Version", valid_593296
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593297 = header.getOrDefault("X-Amz-Signature")
  valid_593297 = validateParameter(valid_593297, JString, required = false,
                                 default = nil)
  if valid_593297 != nil:
    section.add "X-Amz-Signature", valid_593297
  var valid_593298 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593298 = validateParameter(valid_593298, JString, required = false,
                                 default = nil)
  if valid_593298 != nil:
    section.add "X-Amz-Content-Sha256", valid_593298
  var valid_593299 = header.getOrDefault("X-Amz-Date")
  valid_593299 = validateParameter(valid_593299, JString, required = false,
                                 default = nil)
  if valid_593299 != nil:
    section.add "X-Amz-Date", valid_593299
  var valid_593300 = header.getOrDefault("X-Amz-Credential")
  valid_593300 = validateParameter(valid_593300, JString, required = false,
                                 default = nil)
  if valid_593300 != nil:
    section.add "X-Amz-Credential", valid_593300
  var valid_593301 = header.getOrDefault("X-Amz-Security-Token")
  valid_593301 = validateParameter(valid_593301, JString, required = false,
                                 default = nil)
  if valid_593301 != nil:
    section.add "X-Amz-Security-Token", valid_593301
  var valid_593302 = header.getOrDefault("X-Amz-Algorithm")
  valid_593302 = validateParameter(valid_593302, JString, required = false,
                                 default = nil)
  if valid_593302 != nil:
    section.add "X-Amz-Algorithm", valid_593302
  var valid_593303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593303 = validateParameter(valid_593303, JString, required = false,
                                 default = nil)
  if valid_593303 != nil:
    section.add "X-Amz-SignedHeaders", valid_593303
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_593304 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_593304 = validateParameter(valid_593304, JString, required = false,
                                 default = nil)
  if valid_593304 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_593304
  var valid_593305 = formData.getOrDefault("MaxRecords")
  valid_593305 = validateParameter(valid_593305, JInt, required = false, default = nil)
  if valid_593305 != nil:
    section.add "MaxRecords", valid_593305
  var valid_593306 = formData.getOrDefault("ServiceUpdateName")
  valid_593306 = validateParameter(valid_593306, JString, required = false,
                                 default = nil)
  if valid_593306 != nil:
    section.add "ServiceUpdateName", valid_593306
  var valid_593307 = formData.getOrDefault("ReplicationGroupIds")
  valid_593307 = validateParameter(valid_593307, JArray, required = false,
                                 default = nil)
  if valid_593307 != nil:
    section.add "ReplicationGroupIds", valid_593307
  var valid_593308 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_593308 = validateParameter(valid_593308, JString, required = false,
                                 default = nil)
  if valid_593308 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_593308
  var valid_593309 = formData.getOrDefault("Marker")
  valid_593309 = validateParameter(valid_593309, JString, required = false,
                                 default = nil)
  if valid_593309 != nil:
    section.add "Marker", valid_593309
  var valid_593310 = formData.getOrDefault("CacheClusterIds")
  valid_593310 = validateParameter(valid_593310, JArray, required = false,
                                 default = nil)
  if valid_593310 != nil:
    section.add "CacheClusterIds", valid_593310
  var valid_593311 = formData.getOrDefault("Engine")
  valid_593311 = validateParameter(valid_593311, JString, required = false,
                                 default = nil)
  if valid_593311 != nil:
    section.add "Engine", valid_593311
  var valid_593312 = formData.getOrDefault("UpdateActionStatus")
  valid_593312 = validateParameter(valid_593312, JArray, required = false,
                                 default = nil)
  if valid_593312 != nil:
    section.add "UpdateActionStatus", valid_593312
  var valid_593313 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_593313 = validateParameter(valid_593313, JBool, required = false, default = nil)
  if valid_593313 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_593313
  var valid_593314 = formData.getOrDefault("ServiceUpdateStatus")
  valid_593314 = validateParameter(valid_593314, JArray, required = false,
                                 default = nil)
  if valid_593314 != nil:
    section.add "ServiceUpdateStatus", valid_593314
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593315: Call_PostDescribeUpdateActions_593292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_593315.validator(path, query, header, formData, body)
  let scheme = call_593315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593315.url(scheme.get, call_593315.host, call_593315.base,
                         call_593315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593315, url, valid)

proc call*(call_593316: Call_PostDescribeUpdateActions_593292;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          CacheClusterIds: JsonNode = nil; Engine: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_593317 = newJObject()
  var formData_593318 = newJObject()
  add(formData_593318, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_593318, "MaxRecords", newJInt(MaxRecords))
  add(formData_593318, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_593318.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_593318, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_593318, "Marker", newJString(Marker))
  if CacheClusterIds != nil:
    formData_593318.add "CacheClusterIds", CacheClusterIds
  add(formData_593318, "Engine", newJString(Engine))
  if UpdateActionStatus != nil:
    formData_593318.add "UpdateActionStatus", UpdateActionStatus
  add(formData_593318, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_593317, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_593318.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_593317, "Version", newJString(Version))
  result = call_593316.call(nil, query_593317, nil, formData_593318, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_593292(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_593293, base: "/",
    url: url_PostDescribeUpdateActions_593294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_593266 = ref object of OpenApiRestCall_591364
proc url_GetDescribeUpdateActions_593268(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeUpdateActions_593267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_593269 = query.getOrDefault("Marker")
  valid_593269 = validateParameter(valid_593269, JString, required = false,
                                 default = nil)
  if valid_593269 != nil:
    section.add "Marker", valid_593269
  var valid_593270 = query.getOrDefault("ServiceUpdateName")
  valid_593270 = validateParameter(valid_593270, JString, required = false,
                                 default = nil)
  if valid_593270 != nil:
    section.add "ServiceUpdateName", valid_593270
  var valid_593271 = query.getOrDefault("Engine")
  valid_593271 = validateParameter(valid_593271, JString, required = false,
                                 default = nil)
  if valid_593271 != nil:
    section.add "Engine", valid_593271
  var valid_593272 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_593272 = validateParameter(valid_593272, JString, required = false,
                                 default = nil)
  if valid_593272 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_593272
  var valid_593273 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_593273 = validateParameter(valid_593273, JBool, required = false, default = nil)
  if valid_593273 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_593273
  var valid_593274 = query.getOrDefault("UpdateActionStatus")
  valid_593274 = validateParameter(valid_593274, JArray, required = false,
                                 default = nil)
  if valid_593274 != nil:
    section.add "UpdateActionStatus", valid_593274
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593275 = query.getOrDefault("Action")
  valid_593275 = validateParameter(valid_593275, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_593275 != nil:
    section.add "Action", valid_593275
  var valid_593276 = query.getOrDefault("CacheClusterIds")
  valid_593276 = validateParameter(valid_593276, JArray, required = false,
                                 default = nil)
  if valid_593276 != nil:
    section.add "CacheClusterIds", valid_593276
  var valid_593277 = query.getOrDefault("ServiceUpdateStatus")
  valid_593277 = validateParameter(valid_593277, JArray, required = false,
                                 default = nil)
  if valid_593277 != nil:
    section.add "ServiceUpdateStatus", valid_593277
  var valid_593278 = query.getOrDefault("ReplicationGroupIds")
  valid_593278 = validateParameter(valid_593278, JArray, required = false,
                                 default = nil)
  if valid_593278 != nil:
    section.add "ReplicationGroupIds", valid_593278
  var valid_593279 = query.getOrDefault("Version")
  valid_593279 = validateParameter(valid_593279, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593279 != nil:
    section.add "Version", valid_593279
  var valid_593280 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_593280 = validateParameter(valid_593280, JString, required = false,
                                 default = nil)
  if valid_593280 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_593280
  var valid_593281 = query.getOrDefault("MaxRecords")
  valid_593281 = validateParameter(valid_593281, JInt, required = false, default = nil)
  if valid_593281 != nil:
    section.add "MaxRecords", valid_593281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593282 = header.getOrDefault("X-Amz-Signature")
  valid_593282 = validateParameter(valid_593282, JString, required = false,
                                 default = nil)
  if valid_593282 != nil:
    section.add "X-Amz-Signature", valid_593282
  var valid_593283 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593283 = validateParameter(valid_593283, JString, required = false,
                                 default = nil)
  if valid_593283 != nil:
    section.add "X-Amz-Content-Sha256", valid_593283
  var valid_593284 = header.getOrDefault("X-Amz-Date")
  valid_593284 = validateParameter(valid_593284, JString, required = false,
                                 default = nil)
  if valid_593284 != nil:
    section.add "X-Amz-Date", valid_593284
  var valid_593285 = header.getOrDefault("X-Amz-Credential")
  valid_593285 = validateParameter(valid_593285, JString, required = false,
                                 default = nil)
  if valid_593285 != nil:
    section.add "X-Amz-Credential", valid_593285
  var valid_593286 = header.getOrDefault("X-Amz-Security-Token")
  valid_593286 = validateParameter(valid_593286, JString, required = false,
                                 default = nil)
  if valid_593286 != nil:
    section.add "X-Amz-Security-Token", valid_593286
  var valid_593287 = header.getOrDefault("X-Amz-Algorithm")
  valid_593287 = validateParameter(valid_593287, JString, required = false,
                                 default = nil)
  if valid_593287 != nil:
    section.add "X-Amz-Algorithm", valid_593287
  var valid_593288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593288 = validateParameter(valid_593288, JString, required = false,
                                 default = nil)
  if valid_593288 != nil:
    section.add "X-Amz-SignedHeaders", valid_593288
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593289: Call_GetDescribeUpdateActions_593266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_593289.validator(path, query, header, formData, body)
  let scheme = call_593289.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593289.url(scheme.get, call_593289.host, call_593289.base,
                         call_593289.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593289, url, valid)

proc call*(call_593290: Call_GetDescribeUpdateActions_593266; Marker: string = "";
          ServiceUpdateName: string = ""; Engine: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions"; CacheClusterIds: JsonNode = nil;
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_593291 = newJObject()
  add(query_593291, "Marker", newJString(Marker))
  add(query_593291, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_593291, "Engine", newJString(Engine))
  add(query_593291, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_593291, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_593291.add "UpdateActionStatus", UpdateActionStatus
  add(query_593291, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_593291.add "CacheClusterIds", CacheClusterIds
  if ServiceUpdateStatus != nil:
    query_593291.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_593291.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_593291, "Version", newJString(Version))
  add(query_593291, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_593291, "MaxRecords", newJInt(MaxRecords))
  result = call_593290.call(nil, query_593291, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_593266(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_593267, base: "/",
    url: url_GetDescribeUpdateActions_593268, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_593338 = ref object of OpenApiRestCall_591364
proc url_PostIncreaseReplicaCount_593340(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostIncreaseReplicaCount_593339(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593341 = query.getOrDefault("Action")
  valid_593341 = validateParameter(valid_593341, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_593341 != nil:
    section.add "Action", valid_593341
  var valid_593342 = query.getOrDefault("Version")
  valid_593342 = validateParameter(valid_593342, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593342 != nil:
    section.add "Version", valid_593342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593343 = header.getOrDefault("X-Amz-Signature")
  valid_593343 = validateParameter(valid_593343, JString, required = false,
                                 default = nil)
  if valid_593343 != nil:
    section.add "X-Amz-Signature", valid_593343
  var valid_593344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593344 = validateParameter(valid_593344, JString, required = false,
                                 default = nil)
  if valid_593344 != nil:
    section.add "X-Amz-Content-Sha256", valid_593344
  var valid_593345 = header.getOrDefault("X-Amz-Date")
  valid_593345 = validateParameter(valid_593345, JString, required = false,
                                 default = nil)
  if valid_593345 != nil:
    section.add "X-Amz-Date", valid_593345
  var valid_593346 = header.getOrDefault("X-Amz-Credential")
  valid_593346 = validateParameter(valid_593346, JString, required = false,
                                 default = nil)
  if valid_593346 != nil:
    section.add "X-Amz-Credential", valid_593346
  var valid_593347 = header.getOrDefault("X-Amz-Security-Token")
  valid_593347 = validateParameter(valid_593347, JString, required = false,
                                 default = nil)
  if valid_593347 != nil:
    section.add "X-Amz-Security-Token", valid_593347
  var valid_593348 = header.getOrDefault("X-Amz-Algorithm")
  valid_593348 = validateParameter(valid_593348, JString, required = false,
                                 default = nil)
  if valid_593348 != nil:
    section.add "X-Amz-Algorithm", valid_593348
  var valid_593349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593349 = validateParameter(valid_593349, JString, required = false,
                                 default = nil)
  if valid_593349 != nil:
    section.add "X-Amz-SignedHeaders", valid_593349
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_593350 = formData.getOrDefault("ReplicaConfiguration")
  valid_593350 = validateParameter(valid_593350, JArray, required = false,
                                 default = nil)
  if valid_593350 != nil:
    section.add "ReplicaConfiguration", valid_593350
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_593351 = formData.getOrDefault("ApplyImmediately")
  valid_593351 = validateParameter(valid_593351, JBool, required = true, default = nil)
  if valid_593351 != nil:
    section.add "ApplyImmediately", valid_593351
  var valid_593352 = formData.getOrDefault("NewReplicaCount")
  valid_593352 = validateParameter(valid_593352, JInt, required = false, default = nil)
  if valid_593352 != nil:
    section.add "NewReplicaCount", valid_593352
  var valid_593353 = formData.getOrDefault("ReplicationGroupId")
  valid_593353 = validateParameter(valid_593353, JString, required = true,
                                 default = nil)
  if valid_593353 != nil:
    section.add "ReplicationGroupId", valid_593353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593354: Call_PostIncreaseReplicaCount_593338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_593354.validator(path, query, header, formData, body)
  let scheme = call_593354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593354.url(scheme.get, call_593354.host, call_593354.base,
                         call_593354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593354, url, valid)

proc call*(call_593355: Call_PostIncreaseReplicaCount_593338;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_593356 = newJObject()
  var formData_593357 = newJObject()
  if ReplicaConfiguration != nil:
    formData_593357.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_593357, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593356, "Action", newJString(Action))
  add(formData_593357, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_593356, "Version", newJString(Version))
  add(formData_593357, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593355.call(nil, query_593356, nil, formData_593357, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_593338(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_593339, base: "/",
    url: url_PostIncreaseReplicaCount_593340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_593319 = ref object of OpenApiRestCall_591364
proc url_GetIncreaseReplicaCount_593321(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetIncreaseReplicaCount_593320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_593322 = query.getOrDefault("NewReplicaCount")
  valid_593322 = validateParameter(valid_593322, JInt, required = false, default = nil)
  if valid_593322 != nil:
    section.add "NewReplicaCount", valid_593322
  var valid_593323 = query.getOrDefault("ReplicaConfiguration")
  valid_593323 = validateParameter(valid_593323, JArray, required = false,
                                 default = nil)
  if valid_593323 != nil:
    section.add "ReplicaConfiguration", valid_593323
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593324 = query.getOrDefault("Action")
  valid_593324 = validateParameter(valid_593324, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_593324 != nil:
    section.add "Action", valid_593324
  var valid_593325 = query.getOrDefault("ApplyImmediately")
  valid_593325 = validateParameter(valid_593325, JBool, required = true, default = nil)
  if valid_593325 != nil:
    section.add "ApplyImmediately", valid_593325
  var valid_593326 = query.getOrDefault("ReplicationGroupId")
  valid_593326 = validateParameter(valid_593326, JString, required = true,
                                 default = nil)
  if valid_593326 != nil:
    section.add "ReplicationGroupId", valid_593326
  var valid_593327 = query.getOrDefault("Version")
  valid_593327 = validateParameter(valid_593327, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593327 != nil:
    section.add "Version", valid_593327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593328 = header.getOrDefault("X-Amz-Signature")
  valid_593328 = validateParameter(valid_593328, JString, required = false,
                                 default = nil)
  if valid_593328 != nil:
    section.add "X-Amz-Signature", valid_593328
  var valid_593329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593329 = validateParameter(valid_593329, JString, required = false,
                                 default = nil)
  if valid_593329 != nil:
    section.add "X-Amz-Content-Sha256", valid_593329
  var valid_593330 = header.getOrDefault("X-Amz-Date")
  valid_593330 = validateParameter(valid_593330, JString, required = false,
                                 default = nil)
  if valid_593330 != nil:
    section.add "X-Amz-Date", valid_593330
  var valid_593331 = header.getOrDefault("X-Amz-Credential")
  valid_593331 = validateParameter(valid_593331, JString, required = false,
                                 default = nil)
  if valid_593331 != nil:
    section.add "X-Amz-Credential", valid_593331
  var valid_593332 = header.getOrDefault("X-Amz-Security-Token")
  valid_593332 = validateParameter(valid_593332, JString, required = false,
                                 default = nil)
  if valid_593332 != nil:
    section.add "X-Amz-Security-Token", valid_593332
  var valid_593333 = header.getOrDefault("X-Amz-Algorithm")
  valid_593333 = validateParameter(valid_593333, JString, required = false,
                                 default = nil)
  if valid_593333 != nil:
    section.add "X-Amz-Algorithm", valid_593333
  var valid_593334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593334 = validateParameter(valid_593334, JString, required = false,
                                 default = nil)
  if valid_593334 != nil:
    section.add "X-Amz-SignedHeaders", valid_593334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593335: Call_GetIncreaseReplicaCount_593319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_593335.validator(path, query, header, formData, body)
  let scheme = call_593335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593335.url(scheme.get, call_593335.host, call_593335.base,
                         call_593335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593335, url, valid)

proc call*(call_593336: Call_GetIncreaseReplicaCount_593319;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_593337 = newJObject()
  add(query_593337, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_593337.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_593337, "Action", newJString(Action))
  add(query_593337, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593337, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593337, "Version", newJString(Version))
  result = call_593336.call(nil, query_593337, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_593319(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_593320, base: "/",
    url: url_GetIncreaseReplicaCount_593321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_593375 = ref object of OpenApiRestCall_591364
proc url_PostListAllowedNodeTypeModifications_593377(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_593376(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593378 = query.getOrDefault("Action")
  valid_593378 = validateParameter(valid_593378, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_593378 != nil:
    section.add "Action", valid_593378
  var valid_593379 = query.getOrDefault("Version")
  valid_593379 = validateParameter(valid_593379, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593379 != nil:
    section.add "Version", valid_593379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593380 = header.getOrDefault("X-Amz-Signature")
  valid_593380 = validateParameter(valid_593380, JString, required = false,
                                 default = nil)
  if valid_593380 != nil:
    section.add "X-Amz-Signature", valid_593380
  var valid_593381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593381 = validateParameter(valid_593381, JString, required = false,
                                 default = nil)
  if valid_593381 != nil:
    section.add "X-Amz-Content-Sha256", valid_593381
  var valid_593382 = header.getOrDefault("X-Amz-Date")
  valid_593382 = validateParameter(valid_593382, JString, required = false,
                                 default = nil)
  if valid_593382 != nil:
    section.add "X-Amz-Date", valid_593382
  var valid_593383 = header.getOrDefault("X-Amz-Credential")
  valid_593383 = validateParameter(valid_593383, JString, required = false,
                                 default = nil)
  if valid_593383 != nil:
    section.add "X-Amz-Credential", valid_593383
  var valid_593384 = header.getOrDefault("X-Amz-Security-Token")
  valid_593384 = validateParameter(valid_593384, JString, required = false,
                                 default = nil)
  if valid_593384 != nil:
    section.add "X-Amz-Security-Token", valid_593384
  var valid_593385 = header.getOrDefault("X-Amz-Algorithm")
  valid_593385 = validateParameter(valid_593385, JString, required = false,
                                 default = nil)
  if valid_593385 != nil:
    section.add "X-Amz-Algorithm", valid_593385
  var valid_593386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593386 = validateParameter(valid_593386, JString, required = false,
                                 default = nil)
  if valid_593386 != nil:
    section.add "X-Amz-SignedHeaders", valid_593386
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_593387 = formData.getOrDefault("CacheClusterId")
  valid_593387 = validateParameter(valid_593387, JString, required = false,
                                 default = nil)
  if valid_593387 != nil:
    section.add "CacheClusterId", valid_593387
  var valid_593388 = formData.getOrDefault("ReplicationGroupId")
  valid_593388 = validateParameter(valid_593388, JString, required = false,
                                 default = nil)
  if valid_593388 != nil:
    section.add "ReplicationGroupId", valid_593388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593389: Call_PostListAllowedNodeTypeModifications_593375;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_593389.validator(path, query, header, formData, body)
  let scheme = call_593389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593389.url(scheme.get, call_593389.host, call_593389.base,
                         call_593389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593389, url, valid)

proc call*(call_593390: Call_PostListAllowedNodeTypeModifications_593375;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_593391 = newJObject()
  var formData_593392 = newJObject()
  add(formData_593392, "CacheClusterId", newJString(CacheClusterId))
  add(query_593391, "Action", newJString(Action))
  add(query_593391, "Version", newJString(Version))
  add(formData_593392, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593390.call(nil, query_593391, nil, formData_593392, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_593375(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_593376, base: "/",
    url: url_PostListAllowedNodeTypeModifications_593377,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_593358 = ref object of OpenApiRestCall_591364
proc url_GetListAllowedNodeTypeModifications_593360(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_593359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_593361 = query.getOrDefault("CacheClusterId")
  valid_593361 = validateParameter(valid_593361, JString, required = false,
                                 default = nil)
  if valid_593361 != nil:
    section.add "CacheClusterId", valid_593361
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593362 = query.getOrDefault("Action")
  valid_593362 = validateParameter(valid_593362, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_593362 != nil:
    section.add "Action", valid_593362
  var valid_593363 = query.getOrDefault("ReplicationGroupId")
  valid_593363 = validateParameter(valid_593363, JString, required = false,
                                 default = nil)
  if valid_593363 != nil:
    section.add "ReplicationGroupId", valid_593363
  var valid_593364 = query.getOrDefault("Version")
  valid_593364 = validateParameter(valid_593364, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593364 != nil:
    section.add "Version", valid_593364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593365 = header.getOrDefault("X-Amz-Signature")
  valid_593365 = validateParameter(valid_593365, JString, required = false,
                                 default = nil)
  if valid_593365 != nil:
    section.add "X-Amz-Signature", valid_593365
  var valid_593366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593366 = validateParameter(valid_593366, JString, required = false,
                                 default = nil)
  if valid_593366 != nil:
    section.add "X-Amz-Content-Sha256", valid_593366
  var valid_593367 = header.getOrDefault("X-Amz-Date")
  valid_593367 = validateParameter(valid_593367, JString, required = false,
                                 default = nil)
  if valid_593367 != nil:
    section.add "X-Amz-Date", valid_593367
  var valid_593368 = header.getOrDefault("X-Amz-Credential")
  valid_593368 = validateParameter(valid_593368, JString, required = false,
                                 default = nil)
  if valid_593368 != nil:
    section.add "X-Amz-Credential", valid_593368
  var valid_593369 = header.getOrDefault("X-Amz-Security-Token")
  valid_593369 = validateParameter(valid_593369, JString, required = false,
                                 default = nil)
  if valid_593369 != nil:
    section.add "X-Amz-Security-Token", valid_593369
  var valid_593370 = header.getOrDefault("X-Amz-Algorithm")
  valid_593370 = validateParameter(valid_593370, JString, required = false,
                                 default = nil)
  if valid_593370 != nil:
    section.add "X-Amz-Algorithm", valid_593370
  var valid_593371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593371 = validateParameter(valid_593371, JString, required = false,
                                 default = nil)
  if valid_593371 != nil:
    section.add "X-Amz-SignedHeaders", valid_593371
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593372: Call_GetListAllowedNodeTypeModifications_593358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_593372.validator(path, query, header, formData, body)
  let scheme = call_593372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593372.url(scheme.get, call_593372.host, call_593372.base,
                         call_593372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593372, url, valid)

proc call*(call_593373: Call_GetListAllowedNodeTypeModifications_593358;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_593374 = newJObject()
  add(query_593374, "CacheClusterId", newJString(CacheClusterId))
  add(query_593374, "Action", newJString(Action))
  add(query_593374, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593374, "Version", newJString(Version))
  result = call_593373.call(nil, query_593374, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_593358(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_593359, base: "/",
    url: url_GetListAllowedNodeTypeModifications_593360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_593409 = ref object of OpenApiRestCall_591364
proc url_PostListTagsForResource_593411(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_593410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593412 = query.getOrDefault("Action")
  valid_593412 = validateParameter(valid_593412, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_593412 != nil:
    section.add "Action", valid_593412
  var valid_593413 = query.getOrDefault("Version")
  valid_593413 = validateParameter(valid_593413, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593413 != nil:
    section.add "Version", valid_593413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593414 = header.getOrDefault("X-Amz-Signature")
  valid_593414 = validateParameter(valid_593414, JString, required = false,
                                 default = nil)
  if valid_593414 != nil:
    section.add "X-Amz-Signature", valid_593414
  var valid_593415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593415 = validateParameter(valid_593415, JString, required = false,
                                 default = nil)
  if valid_593415 != nil:
    section.add "X-Amz-Content-Sha256", valid_593415
  var valid_593416 = header.getOrDefault("X-Amz-Date")
  valid_593416 = validateParameter(valid_593416, JString, required = false,
                                 default = nil)
  if valid_593416 != nil:
    section.add "X-Amz-Date", valid_593416
  var valid_593417 = header.getOrDefault("X-Amz-Credential")
  valid_593417 = validateParameter(valid_593417, JString, required = false,
                                 default = nil)
  if valid_593417 != nil:
    section.add "X-Amz-Credential", valid_593417
  var valid_593418 = header.getOrDefault("X-Amz-Security-Token")
  valid_593418 = validateParameter(valid_593418, JString, required = false,
                                 default = nil)
  if valid_593418 != nil:
    section.add "X-Amz-Security-Token", valid_593418
  var valid_593419 = header.getOrDefault("X-Amz-Algorithm")
  valid_593419 = validateParameter(valid_593419, JString, required = false,
                                 default = nil)
  if valid_593419 != nil:
    section.add "X-Amz-Algorithm", valid_593419
  var valid_593420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593420 = validateParameter(valid_593420, JString, required = false,
                                 default = nil)
  if valid_593420 != nil:
    section.add "X-Amz-SignedHeaders", valid_593420
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_593421 = formData.getOrDefault("ResourceName")
  valid_593421 = validateParameter(valid_593421, JString, required = true,
                                 default = nil)
  if valid_593421 != nil:
    section.add "ResourceName", valid_593421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593422: Call_PostListTagsForResource_593409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_593422.validator(path, query, header, formData, body)
  let scheme = call_593422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593422.url(scheme.get, call_593422.host, call_593422.base,
                         call_593422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593422, url, valid)

proc call*(call_593423: Call_PostListTagsForResource_593409; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_593424 = newJObject()
  var formData_593425 = newJObject()
  add(query_593424, "Action", newJString(Action))
  add(query_593424, "Version", newJString(Version))
  add(formData_593425, "ResourceName", newJString(ResourceName))
  result = call_593423.call(nil, query_593424, nil, formData_593425, nil)

var postListTagsForResource* = Call_PostListTagsForResource_593409(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_593410, base: "/",
    url: url_PostListTagsForResource_593411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_593393 = ref object of OpenApiRestCall_591364
proc url_GetListTagsForResource_593395(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_593394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_593396 = query.getOrDefault("ResourceName")
  valid_593396 = validateParameter(valid_593396, JString, required = true,
                                 default = nil)
  if valid_593396 != nil:
    section.add "ResourceName", valid_593396
  var valid_593397 = query.getOrDefault("Action")
  valid_593397 = validateParameter(valid_593397, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_593397 != nil:
    section.add "Action", valid_593397
  var valid_593398 = query.getOrDefault("Version")
  valid_593398 = validateParameter(valid_593398, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593398 != nil:
    section.add "Version", valid_593398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593399 = header.getOrDefault("X-Amz-Signature")
  valid_593399 = validateParameter(valid_593399, JString, required = false,
                                 default = nil)
  if valid_593399 != nil:
    section.add "X-Amz-Signature", valid_593399
  var valid_593400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593400 = validateParameter(valid_593400, JString, required = false,
                                 default = nil)
  if valid_593400 != nil:
    section.add "X-Amz-Content-Sha256", valid_593400
  var valid_593401 = header.getOrDefault("X-Amz-Date")
  valid_593401 = validateParameter(valid_593401, JString, required = false,
                                 default = nil)
  if valid_593401 != nil:
    section.add "X-Amz-Date", valid_593401
  var valid_593402 = header.getOrDefault("X-Amz-Credential")
  valid_593402 = validateParameter(valid_593402, JString, required = false,
                                 default = nil)
  if valid_593402 != nil:
    section.add "X-Amz-Credential", valid_593402
  var valid_593403 = header.getOrDefault("X-Amz-Security-Token")
  valid_593403 = validateParameter(valid_593403, JString, required = false,
                                 default = nil)
  if valid_593403 != nil:
    section.add "X-Amz-Security-Token", valid_593403
  var valid_593404 = header.getOrDefault("X-Amz-Algorithm")
  valid_593404 = validateParameter(valid_593404, JString, required = false,
                                 default = nil)
  if valid_593404 != nil:
    section.add "X-Amz-Algorithm", valid_593404
  var valid_593405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593405 = validateParameter(valid_593405, JString, required = false,
                                 default = nil)
  if valid_593405 != nil:
    section.add "X-Amz-SignedHeaders", valid_593405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593406: Call_GetListTagsForResource_593393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_593406.validator(path, query, header, formData, body)
  let scheme = call_593406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593406.url(scheme.get, call_593406.host, call_593406.base,
                         call_593406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593406, url, valid)

proc call*(call_593407: Call_GetListTagsForResource_593393; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593408 = newJObject()
  add(query_593408, "ResourceName", newJString(ResourceName))
  add(query_593408, "Action", newJString(Action))
  add(query_593408, "Version", newJString(Version))
  result = call_593407.call(nil, query_593408, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_593393(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_593394, base: "/",
    url: url_GetListTagsForResource_593395, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_593460 = ref object of OpenApiRestCall_591364
proc url_PostModifyCacheCluster_593462(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheCluster_593461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593463 = query.getOrDefault("Action")
  valid_593463 = validateParameter(valid_593463, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_593463 != nil:
    section.add "Action", valid_593463
  var valid_593464 = query.getOrDefault("Version")
  valid_593464 = validateParameter(valid_593464, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593464 != nil:
    section.add "Version", valid_593464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593465 = header.getOrDefault("X-Amz-Signature")
  valid_593465 = validateParameter(valid_593465, JString, required = false,
                                 default = nil)
  if valid_593465 != nil:
    section.add "X-Amz-Signature", valid_593465
  var valid_593466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593466 = validateParameter(valid_593466, JString, required = false,
                                 default = nil)
  if valid_593466 != nil:
    section.add "X-Amz-Content-Sha256", valid_593466
  var valid_593467 = header.getOrDefault("X-Amz-Date")
  valid_593467 = validateParameter(valid_593467, JString, required = false,
                                 default = nil)
  if valid_593467 != nil:
    section.add "X-Amz-Date", valid_593467
  var valid_593468 = header.getOrDefault("X-Amz-Credential")
  valid_593468 = validateParameter(valid_593468, JString, required = false,
                                 default = nil)
  if valid_593468 != nil:
    section.add "X-Amz-Credential", valid_593468
  var valid_593469 = header.getOrDefault("X-Amz-Security-Token")
  valid_593469 = validateParameter(valid_593469, JString, required = false,
                                 default = nil)
  if valid_593469 != nil:
    section.add "X-Amz-Security-Token", valid_593469
  var valid_593470 = header.getOrDefault("X-Amz-Algorithm")
  valid_593470 = validateParameter(valid_593470, JString, required = false,
                                 default = nil)
  if valid_593470 != nil:
    section.add "X-Amz-Algorithm", valid_593470
  var valid_593471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593471 = validateParameter(valid_593471, JString, required = false,
                                 default = nil)
  if valid_593471 != nil:
    section.add "X-Amz-SignedHeaders", valid_593471
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_593472 = formData.getOrDefault("SecurityGroupIds")
  valid_593472 = validateParameter(valid_593472, JArray, required = false,
                                 default = nil)
  if valid_593472 != nil:
    section.add "SecurityGroupIds", valid_593472
  var valid_593473 = formData.getOrDefault("NewAvailabilityZones")
  valid_593473 = validateParameter(valid_593473, JArray, required = false,
                                 default = nil)
  if valid_593473 != nil:
    section.add "NewAvailabilityZones", valid_593473
  var valid_593474 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593474 = validateParameter(valid_593474, JString, required = false,
                                 default = nil)
  if valid_593474 != nil:
    section.add "PreferredMaintenanceWindow", valid_593474
  var valid_593475 = formData.getOrDefault("NumCacheNodes")
  valid_593475 = validateParameter(valid_593475, JInt, required = false, default = nil)
  if valid_593475 != nil:
    section.add "NumCacheNodes", valid_593475
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_593476 = formData.getOrDefault("CacheClusterId")
  valid_593476 = validateParameter(valid_593476, JString, required = true,
                                 default = nil)
  if valid_593476 != nil:
    section.add "CacheClusterId", valid_593476
  var valid_593477 = formData.getOrDefault("NotificationTopicStatus")
  valid_593477 = validateParameter(valid_593477, JString, required = false,
                                 default = nil)
  if valid_593477 != nil:
    section.add "NotificationTopicStatus", valid_593477
  var valid_593478 = formData.getOrDefault("NotificationTopicArn")
  valid_593478 = validateParameter(valid_593478, JString, required = false,
                                 default = nil)
  if valid_593478 != nil:
    section.add "NotificationTopicArn", valid_593478
  var valid_593479 = formData.getOrDefault("EngineVersion")
  valid_593479 = validateParameter(valid_593479, JString, required = false,
                                 default = nil)
  if valid_593479 != nil:
    section.add "EngineVersion", valid_593479
  var valid_593480 = formData.getOrDefault("AZMode")
  valid_593480 = validateParameter(valid_593480, JString, required = false,
                                 default = newJString("single-az"))
  if valid_593480 != nil:
    section.add "AZMode", valid_593480
  var valid_593481 = formData.getOrDefault("CacheParameterGroupName")
  valid_593481 = validateParameter(valid_593481, JString, required = false,
                                 default = nil)
  if valid_593481 != nil:
    section.add "CacheParameterGroupName", valid_593481
  var valid_593482 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593482 = validateParameter(valid_593482, JBool, required = false, default = nil)
  if valid_593482 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593482
  var valid_593483 = formData.getOrDefault("ApplyImmediately")
  valid_593483 = validateParameter(valid_593483, JBool, required = false, default = nil)
  if valid_593483 != nil:
    section.add "ApplyImmediately", valid_593483
  var valid_593484 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_593484 = validateParameter(valid_593484, JArray, required = false,
                                 default = nil)
  if valid_593484 != nil:
    section.add "CacheNodeIdsToRemove", valid_593484
  var valid_593485 = formData.getOrDefault("AuthToken")
  valid_593485 = validateParameter(valid_593485, JString, required = false,
                                 default = nil)
  if valid_593485 != nil:
    section.add "AuthToken", valid_593485
  var valid_593486 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_593486 = validateParameter(valid_593486, JArray, required = false,
                                 default = nil)
  if valid_593486 != nil:
    section.add "CacheSecurityGroupNames", valid_593486
  var valid_593487 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_593487 = validateParameter(valid_593487, JInt, required = false, default = nil)
  if valid_593487 != nil:
    section.add "SnapshotRetentionLimit", valid_593487
  var valid_593488 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_593488 = validateParameter(valid_593488, JString, required = false,
                                 default = newJString("SET"))
  if valid_593488 != nil:
    section.add "AuthTokenUpdateStrategy", valid_593488
  var valid_593489 = formData.getOrDefault("SnapshotWindow")
  valid_593489 = validateParameter(valid_593489, JString, required = false,
                                 default = nil)
  if valid_593489 != nil:
    section.add "SnapshotWindow", valid_593489
  var valid_593490 = formData.getOrDefault("CacheNodeType")
  valid_593490 = validateParameter(valid_593490, JString, required = false,
                                 default = nil)
  if valid_593490 != nil:
    section.add "CacheNodeType", valid_593490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593491: Call_PostModifyCacheCluster_593460; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_593491.validator(path, query, header, formData, body)
  let scheme = call_593491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593491.url(scheme.get, call_593491.host, call_593491.base,
                         call_593491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593491, url, valid)

proc call*(call_593492: Call_PostModifyCacheCluster_593460; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_593493 = newJObject()
  var formData_593494 = newJObject()
  if SecurityGroupIds != nil:
    formData_593494.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_593494.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_593494, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593494, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_593494, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593494, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_593494, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_593494, "EngineVersion", newJString(EngineVersion))
  add(formData_593494, "AZMode", newJString(AZMode))
  add(formData_593494, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_593494, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593494, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_593494.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_593493, "Action", newJString(Action))
  add(formData_593494, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_593494.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_593494, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_593494, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_593493, "Version", newJString(Version))
  add(formData_593494, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_593494, "CacheNodeType", newJString(CacheNodeType))
  result = call_593492.call(nil, query_593493, nil, formData_593494, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_593460(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_593461, base: "/",
    url: url_PostModifyCacheCluster_593462, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_593426 = ref object of OpenApiRestCall_591364
proc url_GetModifyCacheCluster_593428(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheCluster_593427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_593429 = query.getOrDefault("AuthToken")
  valid_593429 = validateParameter(valid_593429, JString, required = false,
                                 default = nil)
  if valid_593429 != nil:
    section.add "AuthToken", valid_593429
  var valid_593430 = query.getOrDefault("NotificationTopicStatus")
  valid_593430 = validateParameter(valid_593430, JString, required = false,
                                 default = nil)
  if valid_593430 != nil:
    section.add "NotificationTopicStatus", valid_593430
  var valid_593431 = query.getOrDefault("CacheParameterGroupName")
  valid_593431 = validateParameter(valid_593431, JString, required = false,
                                 default = nil)
  if valid_593431 != nil:
    section.add "CacheParameterGroupName", valid_593431
  var valid_593432 = query.getOrDefault("NewAvailabilityZones")
  valid_593432 = validateParameter(valid_593432, JArray, required = false,
                                 default = nil)
  if valid_593432 != nil:
    section.add "NewAvailabilityZones", valid_593432
  var valid_593433 = query.getOrDefault("AZMode")
  valid_593433 = validateParameter(valid_593433, JString, required = false,
                                 default = newJString("single-az"))
  if valid_593433 != nil:
    section.add "AZMode", valid_593433
  var valid_593434 = query.getOrDefault("NumCacheNodes")
  valid_593434 = validateParameter(valid_593434, JInt, required = false, default = nil)
  if valid_593434 != nil:
    section.add "NumCacheNodes", valid_593434
  var valid_593435 = query.getOrDefault("SnapshotRetentionLimit")
  valid_593435 = validateParameter(valid_593435, JInt, required = false, default = nil)
  if valid_593435 != nil:
    section.add "SnapshotRetentionLimit", valid_593435
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_593436 = query.getOrDefault("CacheClusterId")
  valid_593436 = validateParameter(valid_593436, JString, required = true,
                                 default = nil)
  if valid_593436 != nil:
    section.add "CacheClusterId", valid_593436
  var valid_593437 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_593437 = validateParameter(valid_593437, JArray, required = false,
                                 default = nil)
  if valid_593437 != nil:
    section.add "CacheNodeIdsToRemove", valid_593437
  var valid_593438 = query.getOrDefault("CacheSecurityGroupNames")
  valid_593438 = validateParameter(valid_593438, JArray, required = false,
                                 default = nil)
  if valid_593438 != nil:
    section.add "CacheSecurityGroupNames", valid_593438
  var valid_593439 = query.getOrDefault("CacheNodeType")
  valid_593439 = validateParameter(valid_593439, JString, required = false,
                                 default = nil)
  if valid_593439 != nil:
    section.add "CacheNodeType", valid_593439
  var valid_593440 = query.getOrDefault("EngineVersion")
  valid_593440 = validateParameter(valid_593440, JString, required = false,
                                 default = nil)
  if valid_593440 != nil:
    section.add "EngineVersion", valid_593440
  var valid_593441 = query.getOrDefault("Action")
  valid_593441 = validateParameter(valid_593441, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_593441 != nil:
    section.add "Action", valid_593441
  var valid_593442 = query.getOrDefault("ApplyImmediately")
  valid_593442 = validateParameter(valid_593442, JBool, required = false, default = nil)
  if valid_593442 != nil:
    section.add "ApplyImmediately", valid_593442
  var valid_593443 = query.getOrDefault("NotificationTopicArn")
  valid_593443 = validateParameter(valid_593443, JString, required = false,
                                 default = nil)
  if valid_593443 != nil:
    section.add "NotificationTopicArn", valid_593443
  var valid_593444 = query.getOrDefault("Version")
  valid_593444 = validateParameter(valid_593444, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593444 != nil:
    section.add "Version", valid_593444
  var valid_593445 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593445 = validateParameter(valid_593445, JString, required = false,
                                 default = nil)
  if valid_593445 != nil:
    section.add "PreferredMaintenanceWindow", valid_593445
  var valid_593446 = query.getOrDefault("SnapshotWindow")
  valid_593446 = validateParameter(valid_593446, JString, required = false,
                                 default = nil)
  if valid_593446 != nil:
    section.add "SnapshotWindow", valid_593446
  var valid_593447 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593447 = validateParameter(valid_593447, JBool, required = false, default = nil)
  if valid_593447 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593447
  var valid_593448 = query.getOrDefault("SecurityGroupIds")
  valid_593448 = validateParameter(valid_593448, JArray, required = false,
                                 default = nil)
  if valid_593448 != nil:
    section.add "SecurityGroupIds", valid_593448
  var valid_593449 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_593449 = validateParameter(valid_593449, JString, required = false,
                                 default = newJString("SET"))
  if valid_593449 != nil:
    section.add "AuthTokenUpdateStrategy", valid_593449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593450 = header.getOrDefault("X-Amz-Signature")
  valid_593450 = validateParameter(valid_593450, JString, required = false,
                                 default = nil)
  if valid_593450 != nil:
    section.add "X-Amz-Signature", valid_593450
  var valid_593451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593451 = validateParameter(valid_593451, JString, required = false,
                                 default = nil)
  if valid_593451 != nil:
    section.add "X-Amz-Content-Sha256", valid_593451
  var valid_593452 = header.getOrDefault("X-Amz-Date")
  valid_593452 = validateParameter(valid_593452, JString, required = false,
                                 default = nil)
  if valid_593452 != nil:
    section.add "X-Amz-Date", valid_593452
  var valid_593453 = header.getOrDefault("X-Amz-Credential")
  valid_593453 = validateParameter(valid_593453, JString, required = false,
                                 default = nil)
  if valid_593453 != nil:
    section.add "X-Amz-Credential", valid_593453
  var valid_593454 = header.getOrDefault("X-Amz-Security-Token")
  valid_593454 = validateParameter(valid_593454, JString, required = false,
                                 default = nil)
  if valid_593454 != nil:
    section.add "X-Amz-Security-Token", valid_593454
  var valid_593455 = header.getOrDefault("X-Amz-Algorithm")
  valid_593455 = validateParameter(valid_593455, JString, required = false,
                                 default = nil)
  if valid_593455 != nil:
    section.add "X-Amz-Algorithm", valid_593455
  var valid_593456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593456 = validateParameter(valid_593456, JString, required = false,
                                 default = nil)
  if valid_593456 != nil:
    section.add "X-Amz-SignedHeaders", valid_593456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593457: Call_GetModifyCacheCluster_593426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_593457.validator(path, query, header, formData, body)
  let scheme = call_593457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593457.url(scheme.get, call_593457.host, call_593457.base,
                         call_593457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593457, url, valid)

proc call*(call_593458: Call_GetModifyCacheCluster_593426; CacheClusterId: string;
          AuthToken: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_593459 = newJObject()
  add(query_593459, "AuthToken", newJString(AuthToken))
  add(query_593459, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_593459, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_593459.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_593459, "AZMode", newJString(AZMode))
  add(query_593459, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_593459, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_593459, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_593459.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_593459.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_593459, "CacheNodeType", newJString(CacheNodeType))
  add(query_593459, "EngineVersion", newJString(EngineVersion))
  add(query_593459, "Action", newJString(Action))
  add(query_593459, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593459, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_593459, "Version", newJString(Version))
  add(query_593459, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593459, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_593459, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_593459.add "SecurityGroupIds", SecurityGroupIds
  add(query_593459, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_593458.call(nil, query_593459, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_593426(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_593427, base: "/",
    url: url_GetModifyCacheCluster_593428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_593512 = ref object of OpenApiRestCall_591364
proc url_PostModifyCacheParameterGroup_593514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheParameterGroup_593513(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593515 = query.getOrDefault("Action")
  valid_593515 = validateParameter(valid_593515, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_593515 != nil:
    section.add "Action", valid_593515
  var valid_593516 = query.getOrDefault("Version")
  valid_593516 = validateParameter(valid_593516, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593516 != nil:
    section.add "Version", valid_593516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593517 = header.getOrDefault("X-Amz-Signature")
  valid_593517 = validateParameter(valid_593517, JString, required = false,
                                 default = nil)
  if valid_593517 != nil:
    section.add "X-Amz-Signature", valid_593517
  var valid_593518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593518 = validateParameter(valid_593518, JString, required = false,
                                 default = nil)
  if valid_593518 != nil:
    section.add "X-Amz-Content-Sha256", valid_593518
  var valid_593519 = header.getOrDefault("X-Amz-Date")
  valid_593519 = validateParameter(valid_593519, JString, required = false,
                                 default = nil)
  if valid_593519 != nil:
    section.add "X-Amz-Date", valid_593519
  var valid_593520 = header.getOrDefault("X-Amz-Credential")
  valid_593520 = validateParameter(valid_593520, JString, required = false,
                                 default = nil)
  if valid_593520 != nil:
    section.add "X-Amz-Credential", valid_593520
  var valid_593521 = header.getOrDefault("X-Amz-Security-Token")
  valid_593521 = validateParameter(valid_593521, JString, required = false,
                                 default = nil)
  if valid_593521 != nil:
    section.add "X-Amz-Security-Token", valid_593521
  var valid_593522 = header.getOrDefault("X-Amz-Algorithm")
  valid_593522 = validateParameter(valid_593522, JString, required = false,
                                 default = nil)
  if valid_593522 != nil:
    section.add "X-Amz-Algorithm", valid_593522
  var valid_593523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593523 = validateParameter(valid_593523, JString, required = false,
                                 default = nil)
  if valid_593523 != nil:
    section.add "X-Amz-SignedHeaders", valid_593523
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593524 = formData.getOrDefault("CacheParameterGroupName")
  valid_593524 = validateParameter(valid_593524, JString, required = true,
                                 default = nil)
  if valid_593524 != nil:
    section.add "CacheParameterGroupName", valid_593524
  var valid_593525 = formData.getOrDefault("ParameterNameValues")
  valid_593525 = validateParameter(valid_593525, JArray, required = true, default = nil)
  if valid_593525 != nil:
    section.add "ParameterNameValues", valid_593525
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593526: Call_PostModifyCacheParameterGroup_593512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_593526.validator(path, query, header, formData, body)
  let scheme = call_593526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593526.url(scheme.get, call_593526.host, call_593526.base,
                         call_593526.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593526, url, valid)

proc call*(call_593527: Call_PostModifyCacheParameterGroup_593512;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_593528 = newJObject()
  var formData_593529 = newJObject()
  add(formData_593529, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593528, "Action", newJString(Action))
  add(query_593528, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_593529.add "ParameterNameValues", ParameterNameValues
  result = call_593527.call(nil, query_593528, nil, formData_593529, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_593512(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_593513, base: "/",
    url: url_PostModifyCacheParameterGroup_593514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_593495 = ref object of OpenApiRestCall_591364
proc url_GetModifyCacheParameterGroup_593497(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheParameterGroup_593496(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593498 = query.getOrDefault("CacheParameterGroupName")
  valid_593498 = validateParameter(valid_593498, JString, required = true,
                                 default = nil)
  if valid_593498 != nil:
    section.add "CacheParameterGroupName", valid_593498
  var valid_593499 = query.getOrDefault("ParameterNameValues")
  valid_593499 = validateParameter(valid_593499, JArray, required = true, default = nil)
  if valid_593499 != nil:
    section.add "ParameterNameValues", valid_593499
  var valid_593500 = query.getOrDefault("Action")
  valid_593500 = validateParameter(valid_593500, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_593500 != nil:
    section.add "Action", valid_593500
  var valid_593501 = query.getOrDefault("Version")
  valid_593501 = validateParameter(valid_593501, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593501 != nil:
    section.add "Version", valid_593501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593502 = header.getOrDefault("X-Amz-Signature")
  valid_593502 = validateParameter(valid_593502, JString, required = false,
                                 default = nil)
  if valid_593502 != nil:
    section.add "X-Amz-Signature", valid_593502
  var valid_593503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593503 = validateParameter(valid_593503, JString, required = false,
                                 default = nil)
  if valid_593503 != nil:
    section.add "X-Amz-Content-Sha256", valid_593503
  var valid_593504 = header.getOrDefault("X-Amz-Date")
  valid_593504 = validateParameter(valid_593504, JString, required = false,
                                 default = nil)
  if valid_593504 != nil:
    section.add "X-Amz-Date", valid_593504
  var valid_593505 = header.getOrDefault("X-Amz-Credential")
  valid_593505 = validateParameter(valid_593505, JString, required = false,
                                 default = nil)
  if valid_593505 != nil:
    section.add "X-Amz-Credential", valid_593505
  var valid_593506 = header.getOrDefault("X-Amz-Security-Token")
  valid_593506 = validateParameter(valid_593506, JString, required = false,
                                 default = nil)
  if valid_593506 != nil:
    section.add "X-Amz-Security-Token", valid_593506
  var valid_593507 = header.getOrDefault("X-Amz-Algorithm")
  valid_593507 = validateParameter(valid_593507, JString, required = false,
                                 default = nil)
  if valid_593507 != nil:
    section.add "X-Amz-Algorithm", valid_593507
  var valid_593508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593508 = validateParameter(valid_593508, JString, required = false,
                                 default = nil)
  if valid_593508 != nil:
    section.add "X-Amz-SignedHeaders", valid_593508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593509: Call_GetModifyCacheParameterGroup_593495; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_593509.validator(path, query, header, formData, body)
  let scheme = call_593509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593509.url(scheme.get, call_593509.host, call_593509.base,
                         call_593509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593509, url, valid)

proc call*(call_593510: Call_GetModifyCacheParameterGroup_593495;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593511 = newJObject()
  add(query_593511, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_593511.add "ParameterNameValues", ParameterNameValues
  add(query_593511, "Action", newJString(Action))
  add(query_593511, "Version", newJString(Version))
  result = call_593510.call(nil, query_593511, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_593495(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_593496, base: "/",
    url: url_GetModifyCacheParameterGroup_593497,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_593548 = ref object of OpenApiRestCall_591364
proc url_PostModifyCacheSubnetGroup_593550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheSubnetGroup_593549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593551 = query.getOrDefault("Action")
  valid_593551 = validateParameter(valid_593551, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_593551 != nil:
    section.add "Action", valid_593551
  var valid_593552 = query.getOrDefault("Version")
  valid_593552 = validateParameter(valid_593552, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593552 != nil:
    section.add "Version", valid_593552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593553 = header.getOrDefault("X-Amz-Signature")
  valid_593553 = validateParameter(valid_593553, JString, required = false,
                                 default = nil)
  if valid_593553 != nil:
    section.add "X-Amz-Signature", valid_593553
  var valid_593554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593554 = validateParameter(valid_593554, JString, required = false,
                                 default = nil)
  if valid_593554 != nil:
    section.add "X-Amz-Content-Sha256", valid_593554
  var valid_593555 = header.getOrDefault("X-Amz-Date")
  valid_593555 = validateParameter(valid_593555, JString, required = false,
                                 default = nil)
  if valid_593555 != nil:
    section.add "X-Amz-Date", valid_593555
  var valid_593556 = header.getOrDefault("X-Amz-Credential")
  valid_593556 = validateParameter(valid_593556, JString, required = false,
                                 default = nil)
  if valid_593556 != nil:
    section.add "X-Amz-Credential", valid_593556
  var valid_593557 = header.getOrDefault("X-Amz-Security-Token")
  valid_593557 = validateParameter(valid_593557, JString, required = false,
                                 default = nil)
  if valid_593557 != nil:
    section.add "X-Amz-Security-Token", valid_593557
  var valid_593558 = header.getOrDefault("X-Amz-Algorithm")
  valid_593558 = validateParameter(valid_593558, JString, required = false,
                                 default = nil)
  if valid_593558 != nil:
    section.add "X-Amz-Algorithm", valid_593558
  var valid_593559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593559 = validateParameter(valid_593559, JString, required = false,
                                 default = nil)
  if valid_593559 != nil:
    section.add "X-Amz-SignedHeaders", valid_593559
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_593560 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_593560 = validateParameter(valid_593560, JString, required = false,
                                 default = nil)
  if valid_593560 != nil:
    section.add "CacheSubnetGroupDescription", valid_593560
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_593561 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593561 = validateParameter(valid_593561, JString, required = true,
                                 default = nil)
  if valid_593561 != nil:
    section.add "CacheSubnetGroupName", valid_593561
  var valid_593562 = formData.getOrDefault("SubnetIds")
  valid_593562 = validateParameter(valid_593562, JArray, required = false,
                                 default = nil)
  if valid_593562 != nil:
    section.add "SubnetIds", valid_593562
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593563: Call_PostModifyCacheSubnetGroup_593548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_593563.validator(path, query, header, formData, body)
  let scheme = call_593563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593563.url(scheme.get, call_593563.host, call_593563.base,
                         call_593563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593563, url, valid)

proc call*(call_593564: Call_PostModifyCacheSubnetGroup_593548;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_593565 = newJObject()
  var formData_593566 = newJObject()
  add(formData_593566, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_593566, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593565, "Action", newJString(Action))
  add(query_593565, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_593566.add "SubnetIds", SubnetIds
  result = call_593564.call(nil, query_593565, nil, formData_593566, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_593548(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_593549, base: "/",
    url: url_PostModifyCacheSubnetGroup_593550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_593530 = ref object of OpenApiRestCall_591364
proc url_GetModifyCacheSubnetGroup_593532(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheSubnetGroup_593531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_593533 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_593533 = validateParameter(valid_593533, JString, required = false,
                                 default = nil)
  if valid_593533 != nil:
    section.add "CacheSubnetGroupDescription", valid_593533
  var valid_593534 = query.getOrDefault("SubnetIds")
  valid_593534 = validateParameter(valid_593534, JArray, required = false,
                                 default = nil)
  if valid_593534 != nil:
    section.add "SubnetIds", valid_593534
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593535 = query.getOrDefault("Action")
  valid_593535 = validateParameter(valid_593535, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_593535 != nil:
    section.add "Action", valid_593535
  var valid_593536 = query.getOrDefault("CacheSubnetGroupName")
  valid_593536 = validateParameter(valid_593536, JString, required = true,
                                 default = nil)
  if valid_593536 != nil:
    section.add "CacheSubnetGroupName", valid_593536
  var valid_593537 = query.getOrDefault("Version")
  valid_593537 = validateParameter(valid_593537, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593537 != nil:
    section.add "Version", valid_593537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593538 = header.getOrDefault("X-Amz-Signature")
  valid_593538 = validateParameter(valid_593538, JString, required = false,
                                 default = nil)
  if valid_593538 != nil:
    section.add "X-Amz-Signature", valid_593538
  var valid_593539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593539 = validateParameter(valid_593539, JString, required = false,
                                 default = nil)
  if valid_593539 != nil:
    section.add "X-Amz-Content-Sha256", valid_593539
  var valid_593540 = header.getOrDefault("X-Amz-Date")
  valid_593540 = validateParameter(valid_593540, JString, required = false,
                                 default = nil)
  if valid_593540 != nil:
    section.add "X-Amz-Date", valid_593540
  var valid_593541 = header.getOrDefault("X-Amz-Credential")
  valid_593541 = validateParameter(valid_593541, JString, required = false,
                                 default = nil)
  if valid_593541 != nil:
    section.add "X-Amz-Credential", valid_593541
  var valid_593542 = header.getOrDefault("X-Amz-Security-Token")
  valid_593542 = validateParameter(valid_593542, JString, required = false,
                                 default = nil)
  if valid_593542 != nil:
    section.add "X-Amz-Security-Token", valid_593542
  var valid_593543 = header.getOrDefault("X-Amz-Algorithm")
  valid_593543 = validateParameter(valid_593543, JString, required = false,
                                 default = nil)
  if valid_593543 != nil:
    section.add "X-Amz-Algorithm", valid_593543
  var valid_593544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593544 = validateParameter(valid_593544, JString, required = false,
                                 default = nil)
  if valid_593544 != nil:
    section.add "X-Amz-SignedHeaders", valid_593544
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593545: Call_GetModifyCacheSubnetGroup_593530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_593545.validator(path, query, header, formData, body)
  let scheme = call_593545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593545.url(scheme.get, call_593545.host, call_593545.base,
                         call_593545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593545, url, valid)

proc call*(call_593546: Call_GetModifyCacheSubnetGroup_593530;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_593547 = newJObject()
  add(query_593547, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_593547.add "SubnetIds", SubnetIds
  add(query_593547, "Action", newJString(Action))
  add(query_593547, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593547, "Version", newJString(Version))
  result = call_593546.call(nil, query_593547, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_593530(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_593531, base: "/",
    url: url_GetModifyCacheSubnetGroup_593532,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_593602 = ref object of OpenApiRestCall_591364
proc url_PostModifyReplicationGroup_593604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroup_593603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593605 = query.getOrDefault("Action")
  valid_593605 = validateParameter(valid_593605, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_593605 != nil:
    section.add "Action", valid_593605
  var valid_593606 = query.getOrDefault("Version")
  valid_593606 = validateParameter(valid_593606, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593606 != nil:
    section.add "Version", valid_593606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593607 = header.getOrDefault("X-Amz-Signature")
  valid_593607 = validateParameter(valid_593607, JString, required = false,
                                 default = nil)
  if valid_593607 != nil:
    section.add "X-Amz-Signature", valid_593607
  var valid_593608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593608 = validateParameter(valid_593608, JString, required = false,
                                 default = nil)
  if valid_593608 != nil:
    section.add "X-Amz-Content-Sha256", valid_593608
  var valid_593609 = header.getOrDefault("X-Amz-Date")
  valid_593609 = validateParameter(valid_593609, JString, required = false,
                                 default = nil)
  if valid_593609 != nil:
    section.add "X-Amz-Date", valid_593609
  var valid_593610 = header.getOrDefault("X-Amz-Credential")
  valid_593610 = validateParameter(valid_593610, JString, required = false,
                                 default = nil)
  if valid_593610 != nil:
    section.add "X-Amz-Credential", valid_593610
  var valid_593611 = header.getOrDefault("X-Amz-Security-Token")
  valid_593611 = validateParameter(valid_593611, JString, required = false,
                                 default = nil)
  if valid_593611 != nil:
    section.add "X-Amz-Security-Token", valid_593611
  var valid_593612 = header.getOrDefault("X-Amz-Algorithm")
  valid_593612 = validateParameter(valid_593612, JString, required = false,
                                 default = nil)
  if valid_593612 != nil:
    section.add "X-Amz-Algorithm", valid_593612
  var valid_593613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593613 = validateParameter(valid_593613, JString, required = false,
                                 default = nil)
  if valid_593613 != nil:
    section.add "X-Amz-SignedHeaders", valid_593613
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_593614 = formData.getOrDefault("SecurityGroupIds")
  valid_593614 = validateParameter(valid_593614, JArray, required = false,
                                 default = nil)
  if valid_593614 != nil:
    section.add "SecurityGroupIds", valid_593614
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_593615 = formData.getOrDefault("ReplicationGroupId")
  valid_593615 = validateParameter(valid_593615, JString, required = true,
                                 default = nil)
  if valid_593615 != nil:
    section.add "ReplicationGroupId", valid_593615
  var valid_593616 = formData.getOrDefault("NodeGroupId")
  valid_593616 = validateParameter(valid_593616, JString, required = false,
                                 default = nil)
  if valid_593616 != nil:
    section.add "NodeGroupId", valid_593616
  var valid_593617 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593617 = validateParameter(valid_593617, JString, required = false,
                                 default = nil)
  if valid_593617 != nil:
    section.add "PreferredMaintenanceWindow", valid_593617
  var valid_593618 = formData.getOrDefault("PrimaryClusterId")
  valid_593618 = validateParameter(valid_593618, JString, required = false,
                                 default = nil)
  if valid_593618 != nil:
    section.add "PrimaryClusterId", valid_593618
  var valid_593619 = formData.getOrDefault("NotificationTopicStatus")
  valid_593619 = validateParameter(valid_593619, JString, required = false,
                                 default = nil)
  if valid_593619 != nil:
    section.add "NotificationTopicStatus", valid_593619
  var valid_593620 = formData.getOrDefault("NotificationTopicArn")
  valid_593620 = validateParameter(valid_593620, JString, required = false,
                                 default = nil)
  if valid_593620 != nil:
    section.add "NotificationTopicArn", valid_593620
  var valid_593621 = formData.getOrDefault("EngineVersion")
  valid_593621 = validateParameter(valid_593621, JString, required = false,
                                 default = nil)
  if valid_593621 != nil:
    section.add "EngineVersion", valid_593621
  var valid_593622 = formData.getOrDefault("SnapshottingClusterId")
  valid_593622 = validateParameter(valid_593622, JString, required = false,
                                 default = nil)
  if valid_593622 != nil:
    section.add "SnapshottingClusterId", valid_593622
  var valid_593623 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_593623 = validateParameter(valid_593623, JBool, required = false, default = nil)
  if valid_593623 != nil:
    section.add "AutomaticFailoverEnabled", valid_593623
  var valid_593624 = formData.getOrDefault("CacheParameterGroupName")
  valid_593624 = validateParameter(valid_593624, JString, required = false,
                                 default = nil)
  if valid_593624 != nil:
    section.add "CacheParameterGroupName", valid_593624
  var valid_593625 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593625 = validateParameter(valid_593625, JBool, required = false, default = nil)
  if valid_593625 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593625
  var valid_593626 = formData.getOrDefault("ApplyImmediately")
  valid_593626 = validateParameter(valid_593626, JBool, required = false, default = nil)
  if valid_593626 != nil:
    section.add "ApplyImmediately", valid_593626
  var valid_593627 = formData.getOrDefault("AuthToken")
  valid_593627 = validateParameter(valid_593627, JString, required = false,
                                 default = nil)
  if valid_593627 != nil:
    section.add "AuthToken", valid_593627
  var valid_593628 = formData.getOrDefault("ReplicationGroupDescription")
  valid_593628 = validateParameter(valid_593628, JString, required = false,
                                 default = nil)
  if valid_593628 != nil:
    section.add "ReplicationGroupDescription", valid_593628
  var valid_593629 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_593629 = validateParameter(valid_593629, JArray, required = false,
                                 default = nil)
  if valid_593629 != nil:
    section.add "CacheSecurityGroupNames", valid_593629
  var valid_593630 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_593630 = validateParameter(valid_593630, JInt, required = false, default = nil)
  if valid_593630 != nil:
    section.add "SnapshotRetentionLimit", valid_593630
  var valid_593631 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_593631 = validateParameter(valid_593631, JString, required = false,
                                 default = newJString("SET"))
  if valid_593631 != nil:
    section.add "AuthTokenUpdateStrategy", valid_593631
  var valid_593632 = formData.getOrDefault("SnapshotWindow")
  valid_593632 = validateParameter(valid_593632, JString, required = false,
                                 default = nil)
  if valid_593632 != nil:
    section.add "SnapshotWindow", valid_593632
  var valid_593633 = formData.getOrDefault("CacheNodeType")
  valid_593633 = validateParameter(valid_593633, JString, required = false,
                                 default = nil)
  if valid_593633 != nil:
    section.add "CacheNodeType", valid_593633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593634: Call_PostModifyReplicationGroup_593602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593634.validator(path, query, header, formData, body)
  let scheme = call_593634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593634.url(scheme.get, call_593634.host, call_593634.base,
                         call_593634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593634, url, valid)

proc call*(call_593635: Call_PostModifyReplicationGroup_593602;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          NodeGroupId: string = ""; PreferredMaintenanceWindow: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup"; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_593636 = newJObject()
  var formData_593637 = newJObject()
  if SecurityGroupIds != nil:
    formData_593637.add "SecurityGroupIds", SecurityGroupIds
  add(formData_593637, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_593637, "NodeGroupId", newJString(NodeGroupId))
  add(formData_593637, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593637, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_593637, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_593637, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_593637, "EngineVersion", newJString(EngineVersion))
  add(formData_593637, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_593637, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_593637, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_593637, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593637, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593636, "Action", newJString(Action))
  add(formData_593637, "AuthToken", newJString(AuthToken))
  add(formData_593637, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_593637.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_593637, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_593637, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_593636, "Version", newJString(Version))
  add(formData_593637, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_593637, "CacheNodeType", newJString(CacheNodeType))
  result = call_593635.call(nil, query_593636, nil, formData_593637, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_593602(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_593603, base: "/",
    url: url_PostModifyReplicationGroup_593604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_593567 = ref object of OpenApiRestCall_591364
proc url_GetModifyReplicationGroup_593569(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroup_593568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_593570 = query.getOrDefault("AuthToken")
  valid_593570 = validateParameter(valid_593570, JString, required = false,
                                 default = nil)
  if valid_593570 != nil:
    section.add "AuthToken", valid_593570
  var valid_593571 = query.getOrDefault("ReplicationGroupDescription")
  valid_593571 = validateParameter(valid_593571, JString, required = false,
                                 default = nil)
  if valid_593571 != nil:
    section.add "ReplicationGroupDescription", valid_593571
  var valid_593572 = query.getOrDefault("NotificationTopicStatus")
  valid_593572 = validateParameter(valid_593572, JString, required = false,
                                 default = nil)
  if valid_593572 != nil:
    section.add "NotificationTopicStatus", valid_593572
  var valid_593573 = query.getOrDefault("CacheParameterGroupName")
  valid_593573 = validateParameter(valid_593573, JString, required = false,
                                 default = nil)
  if valid_593573 != nil:
    section.add "CacheParameterGroupName", valid_593573
  var valid_593574 = query.getOrDefault("SnapshotRetentionLimit")
  valid_593574 = validateParameter(valid_593574, JInt, required = false, default = nil)
  if valid_593574 != nil:
    section.add "SnapshotRetentionLimit", valid_593574
  var valid_593575 = query.getOrDefault("SnapshottingClusterId")
  valid_593575 = validateParameter(valid_593575, JString, required = false,
                                 default = nil)
  if valid_593575 != nil:
    section.add "SnapshottingClusterId", valid_593575
  var valid_593576 = query.getOrDefault("CacheSecurityGroupNames")
  valid_593576 = validateParameter(valid_593576, JArray, required = false,
                                 default = nil)
  if valid_593576 != nil:
    section.add "CacheSecurityGroupNames", valid_593576
  var valid_593577 = query.getOrDefault("PrimaryClusterId")
  valid_593577 = validateParameter(valid_593577, JString, required = false,
                                 default = nil)
  if valid_593577 != nil:
    section.add "PrimaryClusterId", valid_593577
  var valid_593578 = query.getOrDefault("CacheNodeType")
  valid_593578 = validateParameter(valid_593578, JString, required = false,
                                 default = nil)
  if valid_593578 != nil:
    section.add "CacheNodeType", valid_593578
  var valid_593579 = query.getOrDefault("EngineVersion")
  valid_593579 = validateParameter(valid_593579, JString, required = false,
                                 default = nil)
  if valid_593579 != nil:
    section.add "EngineVersion", valid_593579
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593580 = query.getOrDefault("Action")
  valid_593580 = validateParameter(valid_593580, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_593580 != nil:
    section.add "Action", valid_593580
  var valid_593581 = query.getOrDefault("ApplyImmediately")
  valid_593581 = validateParameter(valid_593581, JBool, required = false, default = nil)
  if valid_593581 != nil:
    section.add "ApplyImmediately", valid_593581
  var valid_593582 = query.getOrDefault("ReplicationGroupId")
  valid_593582 = validateParameter(valid_593582, JString, required = true,
                                 default = nil)
  if valid_593582 != nil:
    section.add "ReplicationGroupId", valid_593582
  var valid_593583 = query.getOrDefault("NotificationTopicArn")
  valid_593583 = validateParameter(valid_593583, JString, required = false,
                                 default = nil)
  if valid_593583 != nil:
    section.add "NotificationTopicArn", valid_593583
  var valid_593584 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_593584 = validateParameter(valid_593584, JBool, required = false, default = nil)
  if valid_593584 != nil:
    section.add "AutomaticFailoverEnabled", valid_593584
  var valid_593585 = query.getOrDefault("Version")
  valid_593585 = validateParameter(valid_593585, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593585 != nil:
    section.add "Version", valid_593585
  var valid_593586 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593586 = validateParameter(valid_593586, JString, required = false,
                                 default = nil)
  if valid_593586 != nil:
    section.add "PreferredMaintenanceWindow", valid_593586
  var valid_593587 = query.getOrDefault("SnapshotWindow")
  valid_593587 = validateParameter(valid_593587, JString, required = false,
                                 default = nil)
  if valid_593587 != nil:
    section.add "SnapshotWindow", valid_593587
  var valid_593588 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593588 = validateParameter(valid_593588, JBool, required = false, default = nil)
  if valid_593588 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593588
  var valid_593589 = query.getOrDefault("SecurityGroupIds")
  valid_593589 = validateParameter(valid_593589, JArray, required = false,
                                 default = nil)
  if valid_593589 != nil:
    section.add "SecurityGroupIds", valid_593589
  var valid_593590 = query.getOrDefault("NodeGroupId")
  valid_593590 = validateParameter(valid_593590, JString, required = false,
                                 default = nil)
  if valid_593590 != nil:
    section.add "NodeGroupId", valid_593590
  var valid_593591 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_593591 = validateParameter(valid_593591, JString, required = false,
                                 default = newJString("SET"))
  if valid_593591 != nil:
    section.add "AuthTokenUpdateStrategy", valid_593591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593592 = header.getOrDefault("X-Amz-Signature")
  valid_593592 = validateParameter(valid_593592, JString, required = false,
                                 default = nil)
  if valid_593592 != nil:
    section.add "X-Amz-Signature", valid_593592
  var valid_593593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593593 = validateParameter(valid_593593, JString, required = false,
                                 default = nil)
  if valid_593593 != nil:
    section.add "X-Amz-Content-Sha256", valid_593593
  var valid_593594 = header.getOrDefault("X-Amz-Date")
  valid_593594 = validateParameter(valid_593594, JString, required = false,
                                 default = nil)
  if valid_593594 != nil:
    section.add "X-Amz-Date", valid_593594
  var valid_593595 = header.getOrDefault("X-Amz-Credential")
  valid_593595 = validateParameter(valid_593595, JString, required = false,
                                 default = nil)
  if valid_593595 != nil:
    section.add "X-Amz-Credential", valid_593595
  var valid_593596 = header.getOrDefault("X-Amz-Security-Token")
  valid_593596 = validateParameter(valid_593596, JString, required = false,
                                 default = nil)
  if valid_593596 != nil:
    section.add "X-Amz-Security-Token", valid_593596
  var valid_593597 = header.getOrDefault("X-Amz-Algorithm")
  valid_593597 = validateParameter(valid_593597, JString, required = false,
                                 default = nil)
  if valid_593597 != nil:
    section.add "X-Amz-Algorithm", valid_593597
  var valid_593598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593598 = validateParameter(valid_593598, JString, required = false,
                                 default = nil)
  if valid_593598 != nil:
    section.add "X-Amz-SignedHeaders", valid_593598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593599: Call_GetModifyReplicationGroup_593567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593599.validator(path, query, header, formData, body)
  let scheme = call_593599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593599.url(scheme.get, call_593599.host, call_593599.base,
                         call_593599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593599, url, valid)

proc call*(call_593600: Call_GetModifyReplicationGroup_593567;
          ReplicationGroupId: string; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = "";
          AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_593601 = newJObject()
  add(query_593601, "AuthToken", newJString(AuthToken))
  add(query_593601, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_593601, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_593601, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593601, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_593601, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_593601.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_593601, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_593601, "CacheNodeType", newJString(CacheNodeType))
  add(query_593601, "EngineVersion", newJString(EngineVersion))
  add(query_593601, "Action", newJString(Action))
  add(query_593601, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593601, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593601, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_593601, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_593601, "Version", newJString(Version))
  add(query_593601, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593601, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_593601, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_593601.add "SecurityGroupIds", SecurityGroupIds
  add(query_593601, "NodeGroupId", newJString(NodeGroupId))
  add(query_593601, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_593600.call(nil, query_593601, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_593567(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_593568, base: "/",
    url: url_GetModifyReplicationGroup_593569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_593659 = ref object of OpenApiRestCall_591364
proc url_PostModifyReplicationGroupShardConfiguration_593661(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_593660(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593662 = query.getOrDefault("Action")
  valid_593662 = validateParameter(valid_593662, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_593662 != nil:
    section.add "Action", valid_593662
  var valid_593663 = query.getOrDefault("Version")
  valid_593663 = validateParameter(valid_593663, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593663 != nil:
    section.add "Version", valid_593663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593664 = header.getOrDefault("X-Amz-Signature")
  valid_593664 = validateParameter(valid_593664, JString, required = false,
                                 default = nil)
  if valid_593664 != nil:
    section.add "X-Amz-Signature", valid_593664
  var valid_593665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593665 = validateParameter(valid_593665, JString, required = false,
                                 default = nil)
  if valid_593665 != nil:
    section.add "X-Amz-Content-Sha256", valid_593665
  var valid_593666 = header.getOrDefault("X-Amz-Date")
  valid_593666 = validateParameter(valid_593666, JString, required = false,
                                 default = nil)
  if valid_593666 != nil:
    section.add "X-Amz-Date", valid_593666
  var valid_593667 = header.getOrDefault("X-Amz-Credential")
  valid_593667 = validateParameter(valid_593667, JString, required = false,
                                 default = nil)
  if valid_593667 != nil:
    section.add "X-Amz-Credential", valid_593667
  var valid_593668 = header.getOrDefault("X-Amz-Security-Token")
  valid_593668 = validateParameter(valid_593668, JString, required = false,
                                 default = nil)
  if valid_593668 != nil:
    section.add "X-Amz-Security-Token", valid_593668
  var valid_593669 = header.getOrDefault("X-Amz-Algorithm")
  valid_593669 = validateParameter(valid_593669, JString, required = false,
                                 default = nil)
  if valid_593669 != nil:
    section.add "X-Amz-Algorithm", valid_593669
  var valid_593670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593670 = validateParameter(valid_593670, JString, required = false,
                                 default = nil)
  if valid_593670 != nil:
    section.add "X-Amz-SignedHeaders", valid_593670
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_593671 = formData.getOrDefault("NodeGroupsToRemove")
  valid_593671 = validateParameter(valid_593671, JArray, required = false,
                                 default = nil)
  if valid_593671 != nil:
    section.add "NodeGroupsToRemove", valid_593671
  var valid_593672 = formData.getOrDefault("NodeGroupsToRetain")
  valid_593672 = validateParameter(valid_593672, JArray, required = false,
                                 default = nil)
  if valid_593672 != nil:
    section.add "NodeGroupsToRetain", valid_593672
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_593673 = formData.getOrDefault("NodeGroupCount")
  valid_593673 = validateParameter(valid_593673, JInt, required = true, default = nil)
  if valid_593673 != nil:
    section.add "NodeGroupCount", valid_593673
  var valid_593674 = formData.getOrDefault("ReshardingConfiguration")
  valid_593674 = validateParameter(valid_593674, JArray, required = false,
                                 default = nil)
  if valid_593674 != nil:
    section.add "ReshardingConfiguration", valid_593674
  var valid_593675 = formData.getOrDefault("ApplyImmediately")
  valid_593675 = validateParameter(valid_593675, JBool, required = true, default = nil)
  if valid_593675 != nil:
    section.add "ApplyImmediately", valid_593675
  var valid_593676 = formData.getOrDefault("ReplicationGroupId")
  valid_593676 = validateParameter(valid_593676, JString, required = true,
                                 default = nil)
  if valid_593676 != nil:
    section.add "ReplicationGroupId", valid_593676
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593677: Call_PostModifyReplicationGroupShardConfiguration_593659;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_593677.validator(path, query, header, formData, body)
  let scheme = call_593677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593677.url(scheme.get, call_593677.host, call_593677.base,
                         call_593677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593677, url, valid)

proc call*(call_593678: Call_PostModifyReplicationGroupShardConfiguration_593659;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_593679 = newJObject()
  var formData_593680 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_593680.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_593680.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_593680, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_593680.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_593680, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593679, "Action", newJString(Action))
  add(query_593679, "Version", newJString(Version))
  add(formData_593680, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593678.call(nil, query_593679, nil, formData_593680, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_593659(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_593660,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_593661,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_593638 = ref object of OpenApiRestCall_591364
proc url_GetModifyReplicationGroupShardConfiguration_593640(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_593639(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_593641 = query.getOrDefault("ReshardingConfiguration")
  valid_593641 = validateParameter(valid_593641, JArray, required = false,
                                 default = nil)
  if valid_593641 != nil:
    section.add "ReshardingConfiguration", valid_593641
  var valid_593642 = query.getOrDefault("NodeGroupsToRemove")
  valid_593642 = validateParameter(valid_593642, JArray, required = false,
                                 default = nil)
  if valid_593642 != nil:
    section.add "NodeGroupsToRemove", valid_593642
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593643 = query.getOrDefault("Action")
  valid_593643 = validateParameter(valid_593643, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_593643 != nil:
    section.add "Action", valid_593643
  var valid_593644 = query.getOrDefault("ApplyImmediately")
  valid_593644 = validateParameter(valid_593644, JBool, required = true, default = nil)
  if valid_593644 != nil:
    section.add "ApplyImmediately", valid_593644
  var valid_593645 = query.getOrDefault("ReplicationGroupId")
  valid_593645 = validateParameter(valid_593645, JString, required = true,
                                 default = nil)
  if valid_593645 != nil:
    section.add "ReplicationGroupId", valid_593645
  var valid_593646 = query.getOrDefault("NodeGroupsToRetain")
  valid_593646 = validateParameter(valid_593646, JArray, required = false,
                                 default = nil)
  if valid_593646 != nil:
    section.add "NodeGroupsToRetain", valid_593646
  var valid_593647 = query.getOrDefault("Version")
  valid_593647 = validateParameter(valid_593647, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593647 != nil:
    section.add "Version", valid_593647
  var valid_593648 = query.getOrDefault("NodeGroupCount")
  valid_593648 = validateParameter(valid_593648, JInt, required = true, default = nil)
  if valid_593648 != nil:
    section.add "NodeGroupCount", valid_593648
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593649 = header.getOrDefault("X-Amz-Signature")
  valid_593649 = validateParameter(valid_593649, JString, required = false,
                                 default = nil)
  if valid_593649 != nil:
    section.add "X-Amz-Signature", valid_593649
  var valid_593650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593650 = validateParameter(valid_593650, JString, required = false,
                                 default = nil)
  if valid_593650 != nil:
    section.add "X-Amz-Content-Sha256", valid_593650
  var valid_593651 = header.getOrDefault("X-Amz-Date")
  valid_593651 = validateParameter(valid_593651, JString, required = false,
                                 default = nil)
  if valid_593651 != nil:
    section.add "X-Amz-Date", valid_593651
  var valid_593652 = header.getOrDefault("X-Amz-Credential")
  valid_593652 = validateParameter(valid_593652, JString, required = false,
                                 default = nil)
  if valid_593652 != nil:
    section.add "X-Amz-Credential", valid_593652
  var valid_593653 = header.getOrDefault("X-Amz-Security-Token")
  valid_593653 = validateParameter(valid_593653, JString, required = false,
                                 default = nil)
  if valid_593653 != nil:
    section.add "X-Amz-Security-Token", valid_593653
  var valid_593654 = header.getOrDefault("X-Amz-Algorithm")
  valid_593654 = validateParameter(valid_593654, JString, required = false,
                                 default = nil)
  if valid_593654 != nil:
    section.add "X-Amz-Algorithm", valid_593654
  var valid_593655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593655 = validateParameter(valid_593655, JString, required = false,
                                 default = nil)
  if valid_593655 != nil:
    section.add "X-Amz-SignedHeaders", valid_593655
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593656: Call_GetModifyReplicationGroupShardConfiguration_593638;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_593656.validator(path, query, header, formData, body)
  let scheme = call_593656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593656.url(scheme.get, call_593656.host, call_593656.base,
                         call_593656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593656, url, valid)

proc call*(call_593657: Call_GetModifyReplicationGroupShardConfiguration_593638;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_593658 = newJObject()
  if ReshardingConfiguration != nil:
    query_593658.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_593658.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_593658, "Action", newJString(Action))
  add(query_593658, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593658, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_593658.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_593658, "Version", newJString(Version))
  add(query_593658, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_593657.call(nil, query_593658, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_593638(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_593639,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_593640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_593699 = ref object of OpenApiRestCall_591364
proc url_PostPurchaseReservedCacheNodesOffering_593701(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_593700(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593702 = query.getOrDefault("Action")
  valid_593702 = validateParameter(valid_593702, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_593702 != nil:
    section.add "Action", valid_593702
  var valid_593703 = query.getOrDefault("Version")
  valid_593703 = validateParameter(valid_593703, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593703 != nil:
    section.add "Version", valid_593703
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593704 = header.getOrDefault("X-Amz-Signature")
  valid_593704 = validateParameter(valid_593704, JString, required = false,
                                 default = nil)
  if valid_593704 != nil:
    section.add "X-Amz-Signature", valid_593704
  var valid_593705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593705 = validateParameter(valid_593705, JString, required = false,
                                 default = nil)
  if valid_593705 != nil:
    section.add "X-Amz-Content-Sha256", valid_593705
  var valid_593706 = header.getOrDefault("X-Amz-Date")
  valid_593706 = validateParameter(valid_593706, JString, required = false,
                                 default = nil)
  if valid_593706 != nil:
    section.add "X-Amz-Date", valid_593706
  var valid_593707 = header.getOrDefault("X-Amz-Credential")
  valid_593707 = validateParameter(valid_593707, JString, required = false,
                                 default = nil)
  if valid_593707 != nil:
    section.add "X-Amz-Credential", valid_593707
  var valid_593708 = header.getOrDefault("X-Amz-Security-Token")
  valid_593708 = validateParameter(valid_593708, JString, required = false,
                                 default = nil)
  if valid_593708 != nil:
    section.add "X-Amz-Security-Token", valid_593708
  var valid_593709 = header.getOrDefault("X-Amz-Algorithm")
  valid_593709 = validateParameter(valid_593709, JString, required = false,
                                 default = nil)
  if valid_593709 != nil:
    section.add "X-Amz-Algorithm", valid_593709
  var valid_593710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593710 = validateParameter(valid_593710, JString, required = false,
                                 default = nil)
  if valid_593710 != nil:
    section.add "X-Amz-SignedHeaders", valid_593710
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_593711 = formData.getOrDefault("CacheNodeCount")
  valid_593711 = validateParameter(valid_593711, JInt, required = false, default = nil)
  if valid_593711 != nil:
    section.add "CacheNodeCount", valid_593711
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_593712 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593712 = validateParameter(valid_593712, JString, required = true,
                                 default = nil)
  if valid_593712 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593712
  var valid_593713 = formData.getOrDefault("ReservedCacheNodeId")
  valid_593713 = validateParameter(valid_593713, JString, required = false,
                                 default = nil)
  if valid_593713 != nil:
    section.add "ReservedCacheNodeId", valid_593713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593714: Call_PostPurchaseReservedCacheNodesOffering_593699;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_593714.validator(path, query, header, formData, body)
  let scheme = call_593714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593714.url(scheme.get, call_593714.host, call_593714.base,
                         call_593714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593714, url, valid)

proc call*(call_593715: Call_PostPurchaseReservedCacheNodesOffering_593699;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_593716 = newJObject()
  var formData_593717 = newJObject()
  add(formData_593717, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_593716, "Action", newJString(Action))
  add(query_593716, "Version", newJString(Version))
  add(formData_593717, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_593717, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_593715.call(nil, query_593716, nil, formData_593717, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_593699(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_593700, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_593701,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_593681 = ref object of OpenApiRestCall_591364
proc url_GetPurchaseReservedCacheNodesOffering_593683(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_593682(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_593684 = query.getOrDefault("CacheNodeCount")
  valid_593684 = validateParameter(valid_593684, JInt, required = false, default = nil)
  if valid_593684 != nil:
    section.add "CacheNodeCount", valid_593684
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593685 = query.getOrDefault("Action")
  valid_593685 = validateParameter(valid_593685, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_593685 != nil:
    section.add "Action", valid_593685
  var valid_593686 = query.getOrDefault("ReservedCacheNodeId")
  valid_593686 = validateParameter(valid_593686, JString, required = false,
                                 default = nil)
  if valid_593686 != nil:
    section.add "ReservedCacheNodeId", valid_593686
  var valid_593687 = query.getOrDefault("Version")
  valid_593687 = validateParameter(valid_593687, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593687 != nil:
    section.add "Version", valid_593687
  var valid_593688 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_593688 = validateParameter(valid_593688, JString, required = true,
                                 default = nil)
  if valid_593688 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_593688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593689 = header.getOrDefault("X-Amz-Signature")
  valid_593689 = validateParameter(valid_593689, JString, required = false,
                                 default = nil)
  if valid_593689 != nil:
    section.add "X-Amz-Signature", valid_593689
  var valid_593690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593690 = validateParameter(valid_593690, JString, required = false,
                                 default = nil)
  if valid_593690 != nil:
    section.add "X-Amz-Content-Sha256", valid_593690
  var valid_593691 = header.getOrDefault("X-Amz-Date")
  valid_593691 = validateParameter(valid_593691, JString, required = false,
                                 default = nil)
  if valid_593691 != nil:
    section.add "X-Amz-Date", valid_593691
  var valid_593692 = header.getOrDefault("X-Amz-Credential")
  valid_593692 = validateParameter(valid_593692, JString, required = false,
                                 default = nil)
  if valid_593692 != nil:
    section.add "X-Amz-Credential", valid_593692
  var valid_593693 = header.getOrDefault("X-Amz-Security-Token")
  valid_593693 = validateParameter(valid_593693, JString, required = false,
                                 default = nil)
  if valid_593693 != nil:
    section.add "X-Amz-Security-Token", valid_593693
  var valid_593694 = header.getOrDefault("X-Amz-Algorithm")
  valid_593694 = validateParameter(valid_593694, JString, required = false,
                                 default = nil)
  if valid_593694 != nil:
    section.add "X-Amz-Algorithm", valid_593694
  var valid_593695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593695 = validateParameter(valid_593695, JString, required = false,
                                 default = nil)
  if valid_593695 != nil:
    section.add "X-Amz-SignedHeaders", valid_593695
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593696: Call_GetPurchaseReservedCacheNodesOffering_593681;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_593696.validator(path, query, header, formData, body)
  let scheme = call_593696.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593696.url(scheme.get, call_593696.host, call_593696.base,
                         call_593696.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593696, url, valid)

proc call*(call_593697: Call_GetPurchaseReservedCacheNodesOffering_593681;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_593698 = newJObject()
  add(query_593698, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_593698, "Action", newJString(Action))
  add(query_593698, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_593698, "Version", newJString(Version))
  add(query_593698, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_593697.call(nil, query_593698, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_593681(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_593682, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_593683,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_593735 = ref object of OpenApiRestCall_591364
proc url_PostRebootCacheCluster_593737(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootCacheCluster_593736(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593738 = query.getOrDefault("Action")
  valid_593738 = validateParameter(valid_593738, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_593738 != nil:
    section.add "Action", valid_593738
  var valid_593739 = query.getOrDefault("Version")
  valid_593739 = validateParameter(valid_593739, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593739 != nil:
    section.add "Version", valid_593739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593740 = header.getOrDefault("X-Amz-Signature")
  valid_593740 = validateParameter(valid_593740, JString, required = false,
                                 default = nil)
  if valid_593740 != nil:
    section.add "X-Amz-Signature", valid_593740
  var valid_593741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593741 = validateParameter(valid_593741, JString, required = false,
                                 default = nil)
  if valid_593741 != nil:
    section.add "X-Amz-Content-Sha256", valid_593741
  var valid_593742 = header.getOrDefault("X-Amz-Date")
  valid_593742 = validateParameter(valid_593742, JString, required = false,
                                 default = nil)
  if valid_593742 != nil:
    section.add "X-Amz-Date", valid_593742
  var valid_593743 = header.getOrDefault("X-Amz-Credential")
  valid_593743 = validateParameter(valid_593743, JString, required = false,
                                 default = nil)
  if valid_593743 != nil:
    section.add "X-Amz-Credential", valid_593743
  var valid_593744 = header.getOrDefault("X-Amz-Security-Token")
  valid_593744 = validateParameter(valid_593744, JString, required = false,
                                 default = nil)
  if valid_593744 != nil:
    section.add "X-Amz-Security-Token", valid_593744
  var valid_593745 = header.getOrDefault("X-Amz-Algorithm")
  valid_593745 = validateParameter(valid_593745, JString, required = false,
                                 default = nil)
  if valid_593745 != nil:
    section.add "X-Amz-Algorithm", valid_593745
  var valid_593746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593746 = validateParameter(valid_593746, JString, required = false,
                                 default = nil)
  if valid_593746 != nil:
    section.add "X-Amz-SignedHeaders", valid_593746
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_593747 = formData.getOrDefault("CacheClusterId")
  valid_593747 = validateParameter(valid_593747, JString, required = true,
                                 default = nil)
  if valid_593747 != nil:
    section.add "CacheClusterId", valid_593747
  var valid_593748 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_593748 = validateParameter(valid_593748, JArray, required = true, default = nil)
  if valid_593748 != nil:
    section.add "CacheNodeIdsToReboot", valid_593748
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593749: Call_PostRebootCacheCluster_593735; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_593749.validator(path, query, header, formData, body)
  let scheme = call_593749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593749.url(scheme.get, call_593749.host, call_593749.base,
                         call_593749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593749, url, valid)

proc call*(call_593750: Call_PostRebootCacheCluster_593735; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_593751 = newJObject()
  var formData_593752 = newJObject()
  add(formData_593752, "CacheClusterId", newJString(CacheClusterId))
  add(query_593751, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_593752.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_593751, "Version", newJString(Version))
  result = call_593750.call(nil, query_593751, nil, formData_593752, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_593735(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_593736, base: "/",
    url: url_PostRebootCacheCluster_593737, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_593718 = ref object of OpenApiRestCall_591364
proc url_GetRebootCacheCluster_593720(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootCacheCluster_593719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_593721 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_593721 = validateParameter(valid_593721, JArray, required = true, default = nil)
  if valid_593721 != nil:
    section.add "CacheNodeIdsToReboot", valid_593721
  var valid_593722 = query.getOrDefault("CacheClusterId")
  valid_593722 = validateParameter(valid_593722, JString, required = true,
                                 default = nil)
  if valid_593722 != nil:
    section.add "CacheClusterId", valid_593722
  var valid_593723 = query.getOrDefault("Action")
  valid_593723 = validateParameter(valid_593723, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_593723 != nil:
    section.add "Action", valid_593723
  var valid_593724 = query.getOrDefault("Version")
  valid_593724 = validateParameter(valid_593724, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593724 != nil:
    section.add "Version", valid_593724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593725 = header.getOrDefault("X-Amz-Signature")
  valid_593725 = validateParameter(valid_593725, JString, required = false,
                                 default = nil)
  if valid_593725 != nil:
    section.add "X-Amz-Signature", valid_593725
  var valid_593726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593726 = validateParameter(valid_593726, JString, required = false,
                                 default = nil)
  if valid_593726 != nil:
    section.add "X-Amz-Content-Sha256", valid_593726
  var valid_593727 = header.getOrDefault("X-Amz-Date")
  valid_593727 = validateParameter(valid_593727, JString, required = false,
                                 default = nil)
  if valid_593727 != nil:
    section.add "X-Amz-Date", valid_593727
  var valid_593728 = header.getOrDefault("X-Amz-Credential")
  valid_593728 = validateParameter(valid_593728, JString, required = false,
                                 default = nil)
  if valid_593728 != nil:
    section.add "X-Amz-Credential", valid_593728
  var valid_593729 = header.getOrDefault("X-Amz-Security-Token")
  valid_593729 = validateParameter(valid_593729, JString, required = false,
                                 default = nil)
  if valid_593729 != nil:
    section.add "X-Amz-Security-Token", valid_593729
  var valid_593730 = header.getOrDefault("X-Amz-Algorithm")
  valid_593730 = validateParameter(valid_593730, JString, required = false,
                                 default = nil)
  if valid_593730 != nil:
    section.add "X-Amz-Algorithm", valid_593730
  var valid_593731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593731 = validateParameter(valid_593731, JString, required = false,
                                 default = nil)
  if valid_593731 != nil:
    section.add "X-Amz-SignedHeaders", valid_593731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593732: Call_GetRebootCacheCluster_593718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_593732.validator(path, query, header, formData, body)
  let scheme = call_593732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593732.url(scheme.get, call_593732.host, call_593732.base,
                         call_593732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593732, url, valid)

proc call*(call_593733: Call_GetRebootCacheCluster_593718;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593734 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_593734.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_593734, "CacheClusterId", newJString(CacheClusterId))
  add(query_593734, "Action", newJString(Action))
  add(query_593734, "Version", newJString(Version))
  result = call_593733.call(nil, query_593734, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_593718(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_593719, base: "/",
    url: url_GetRebootCacheCluster_593720, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_593770 = ref object of OpenApiRestCall_591364
proc url_PostRemoveTagsFromResource_593772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_593771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593773 = query.getOrDefault("Action")
  valid_593773 = validateParameter(valid_593773, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_593773 != nil:
    section.add "Action", valid_593773
  var valid_593774 = query.getOrDefault("Version")
  valid_593774 = validateParameter(valid_593774, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593774 != nil:
    section.add "Version", valid_593774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593775 = header.getOrDefault("X-Amz-Signature")
  valid_593775 = validateParameter(valid_593775, JString, required = false,
                                 default = nil)
  if valid_593775 != nil:
    section.add "X-Amz-Signature", valid_593775
  var valid_593776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593776 = validateParameter(valid_593776, JString, required = false,
                                 default = nil)
  if valid_593776 != nil:
    section.add "X-Amz-Content-Sha256", valid_593776
  var valid_593777 = header.getOrDefault("X-Amz-Date")
  valid_593777 = validateParameter(valid_593777, JString, required = false,
                                 default = nil)
  if valid_593777 != nil:
    section.add "X-Amz-Date", valid_593777
  var valid_593778 = header.getOrDefault("X-Amz-Credential")
  valid_593778 = validateParameter(valid_593778, JString, required = false,
                                 default = nil)
  if valid_593778 != nil:
    section.add "X-Amz-Credential", valid_593778
  var valid_593779 = header.getOrDefault("X-Amz-Security-Token")
  valid_593779 = validateParameter(valid_593779, JString, required = false,
                                 default = nil)
  if valid_593779 != nil:
    section.add "X-Amz-Security-Token", valid_593779
  var valid_593780 = header.getOrDefault("X-Amz-Algorithm")
  valid_593780 = validateParameter(valid_593780, JString, required = false,
                                 default = nil)
  if valid_593780 != nil:
    section.add "X-Amz-Algorithm", valid_593780
  var valid_593781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593781 = validateParameter(valid_593781, JString, required = false,
                                 default = nil)
  if valid_593781 != nil:
    section.add "X-Amz-SignedHeaders", valid_593781
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_593782 = formData.getOrDefault("TagKeys")
  valid_593782 = validateParameter(valid_593782, JArray, required = true, default = nil)
  if valid_593782 != nil:
    section.add "TagKeys", valid_593782
  var valid_593783 = formData.getOrDefault("ResourceName")
  valid_593783 = validateParameter(valid_593783, JString, required = true,
                                 default = nil)
  if valid_593783 != nil:
    section.add "ResourceName", valid_593783
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593784: Call_PostRemoveTagsFromResource_593770; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_593784.validator(path, query, header, formData, body)
  let scheme = call_593784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593784.url(scheme.get, call_593784.host, call_593784.base,
                         call_593784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593784, url, valid)

proc call*(call_593785: Call_PostRemoveTagsFromResource_593770; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_593786 = newJObject()
  var formData_593787 = newJObject()
  if TagKeys != nil:
    formData_593787.add "TagKeys", TagKeys
  add(query_593786, "Action", newJString(Action))
  add(query_593786, "Version", newJString(Version))
  add(formData_593787, "ResourceName", newJString(ResourceName))
  result = call_593785.call(nil, query_593786, nil, formData_593787, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_593770(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_593771, base: "/",
    url: url_PostRemoveTagsFromResource_593772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_593753 = ref object of OpenApiRestCall_591364
proc url_GetRemoveTagsFromResource_593755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_593754(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_593756 = query.getOrDefault("ResourceName")
  valid_593756 = validateParameter(valid_593756, JString, required = true,
                                 default = nil)
  if valid_593756 != nil:
    section.add "ResourceName", valid_593756
  var valid_593757 = query.getOrDefault("TagKeys")
  valid_593757 = validateParameter(valid_593757, JArray, required = true, default = nil)
  if valid_593757 != nil:
    section.add "TagKeys", valid_593757
  var valid_593758 = query.getOrDefault("Action")
  valid_593758 = validateParameter(valid_593758, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_593758 != nil:
    section.add "Action", valid_593758
  var valid_593759 = query.getOrDefault("Version")
  valid_593759 = validateParameter(valid_593759, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593759 != nil:
    section.add "Version", valid_593759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593760 = header.getOrDefault("X-Amz-Signature")
  valid_593760 = validateParameter(valid_593760, JString, required = false,
                                 default = nil)
  if valid_593760 != nil:
    section.add "X-Amz-Signature", valid_593760
  var valid_593761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593761 = validateParameter(valid_593761, JString, required = false,
                                 default = nil)
  if valid_593761 != nil:
    section.add "X-Amz-Content-Sha256", valid_593761
  var valid_593762 = header.getOrDefault("X-Amz-Date")
  valid_593762 = validateParameter(valid_593762, JString, required = false,
                                 default = nil)
  if valid_593762 != nil:
    section.add "X-Amz-Date", valid_593762
  var valid_593763 = header.getOrDefault("X-Amz-Credential")
  valid_593763 = validateParameter(valid_593763, JString, required = false,
                                 default = nil)
  if valid_593763 != nil:
    section.add "X-Amz-Credential", valid_593763
  var valid_593764 = header.getOrDefault("X-Amz-Security-Token")
  valid_593764 = validateParameter(valid_593764, JString, required = false,
                                 default = nil)
  if valid_593764 != nil:
    section.add "X-Amz-Security-Token", valid_593764
  var valid_593765 = header.getOrDefault("X-Amz-Algorithm")
  valid_593765 = validateParameter(valid_593765, JString, required = false,
                                 default = nil)
  if valid_593765 != nil:
    section.add "X-Amz-Algorithm", valid_593765
  var valid_593766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593766 = validateParameter(valid_593766, JString, required = false,
                                 default = nil)
  if valid_593766 != nil:
    section.add "X-Amz-SignedHeaders", valid_593766
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593767: Call_GetRemoveTagsFromResource_593753; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_593767.validator(path, query, header, formData, body)
  let scheme = call_593767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593767.url(scheme.get, call_593767.host, call_593767.base,
                         call_593767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593767, url, valid)

proc call*(call_593768: Call_GetRemoveTagsFromResource_593753;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593769 = newJObject()
  add(query_593769, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_593769.add "TagKeys", TagKeys
  add(query_593769, "Action", newJString(Action))
  add(query_593769, "Version", newJString(Version))
  result = call_593768.call(nil, query_593769, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_593753(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_593754, base: "/",
    url: url_GetRemoveTagsFromResource_593755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_593806 = ref object of OpenApiRestCall_591364
proc url_PostResetCacheParameterGroup_593808(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetCacheParameterGroup_593807(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593809 = query.getOrDefault("Action")
  valid_593809 = validateParameter(valid_593809, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_593809 != nil:
    section.add "Action", valid_593809
  var valid_593810 = query.getOrDefault("Version")
  valid_593810 = validateParameter(valid_593810, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593810 != nil:
    section.add "Version", valid_593810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593811 = header.getOrDefault("X-Amz-Signature")
  valid_593811 = validateParameter(valid_593811, JString, required = false,
                                 default = nil)
  if valid_593811 != nil:
    section.add "X-Amz-Signature", valid_593811
  var valid_593812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593812 = validateParameter(valid_593812, JString, required = false,
                                 default = nil)
  if valid_593812 != nil:
    section.add "X-Amz-Content-Sha256", valid_593812
  var valid_593813 = header.getOrDefault("X-Amz-Date")
  valid_593813 = validateParameter(valid_593813, JString, required = false,
                                 default = nil)
  if valid_593813 != nil:
    section.add "X-Amz-Date", valid_593813
  var valid_593814 = header.getOrDefault("X-Amz-Credential")
  valid_593814 = validateParameter(valid_593814, JString, required = false,
                                 default = nil)
  if valid_593814 != nil:
    section.add "X-Amz-Credential", valid_593814
  var valid_593815 = header.getOrDefault("X-Amz-Security-Token")
  valid_593815 = validateParameter(valid_593815, JString, required = false,
                                 default = nil)
  if valid_593815 != nil:
    section.add "X-Amz-Security-Token", valid_593815
  var valid_593816 = header.getOrDefault("X-Amz-Algorithm")
  valid_593816 = validateParameter(valid_593816, JString, required = false,
                                 default = nil)
  if valid_593816 != nil:
    section.add "X-Amz-Algorithm", valid_593816
  var valid_593817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593817 = validateParameter(valid_593817, JString, required = false,
                                 default = nil)
  if valid_593817 != nil:
    section.add "X-Amz-SignedHeaders", valid_593817
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_593818 = formData.getOrDefault("ResetAllParameters")
  valid_593818 = validateParameter(valid_593818, JBool, required = false, default = nil)
  if valid_593818 != nil:
    section.add "ResetAllParameters", valid_593818
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593819 = formData.getOrDefault("CacheParameterGroupName")
  valid_593819 = validateParameter(valid_593819, JString, required = true,
                                 default = nil)
  if valid_593819 != nil:
    section.add "CacheParameterGroupName", valid_593819
  var valid_593820 = formData.getOrDefault("ParameterNameValues")
  valid_593820 = validateParameter(valid_593820, JArray, required = false,
                                 default = nil)
  if valid_593820 != nil:
    section.add "ParameterNameValues", valid_593820
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593821: Call_PostResetCacheParameterGroup_593806; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_593821.validator(path, query, header, formData, body)
  let scheme = call_593821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593821.url(scheme.get, call_593821.host, call_593821.base,
                         call_593821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593821, url, valid)

proc call*(call_593822: Call_PostResetCacheParameterGroup_593806;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_593823 = newJObject()
  var formData_593824 = newJObject()
  add(formData_593824, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_593824, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593823, "Action", newJString(Action))
  add(query_593823, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_593824.add "ParameterNameValues", ParameterNameValues
  result = call_593822.call(nil, query_593823, nil, formData_593824, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_593806(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_593807, base: "/",
    url: url_PostResetCacheParameterGroup_593808,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_593788 = ref object of OpenApiRestCall_591364
proc url_GetResetCacheParameterGroup_593790(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetCacheParameterGroup_593789(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593791 = query.getOrDefault("CacheParameterGroupName")
  valid_593791 = validateParameter(valid_593791, JString, required = true,
                                 default = nil)
  if valid_593791 != nil:
    section.add "CacheParameterGroupName", valid_593791
  var valid_593792 = query.getOrDefault("ResetAllParameters")
  valid_593792 = validateParameter(valid_593792, JBool, required = false, default = nil)
  if valid_593792 != nil:
    section.add "ResetAllParameters", valid_593792
  var valid_593793 = query.getOrDefault("ParameterNameValues")
  valid_593793 = validateParameter(valid_593793, JArray, required = false,
                                 default = nil)
  if valid_593793 != nil:
    section.add "ParameterNameValues", valid_593793
  var valid_593794 = query.getOrDefault("Action")
  valid_593794 = validateParameter(valid_593794, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_593794 != nil:
    section.add "Action", valid_593794
  var valid_593795 = query.getOrDefault("Version")
  valid_593795 = validateParameter(valid_593795, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593795 != nil:
    section.add "Version", valid_593795
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593796 = header.getOrDefault("X-Amz-Signature")
  valid_593796 = validateParameter(valid_593796, JString, required = false,
                                 default = nil)
  if valid_593796 != nil:
    section.add "X-Amz-Signature", valid_593796
  var valid_593797 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593797 = validateParameter(valid_593797, JString, required = false,
                                 default = nil)
  if valid_593797 != nil:
    section.add "X-Amz-Content-Sha256", valid_593797
  var valid_593798 = header.getOrDefault("X-Amz-Date")
  valid_593798 = validateParameter(valid_593798, JString, required = false,
                                 default = nil)
  if valid_593798 != nil:
    section.add "X-Amz-Date", valid_593798
  var valid_593799 = header.getOrDefault("X-Amz-Credential")
  valid_593799 = validateParameter(valid_593799, JString, required = false,
                                 default = nil)
  if valid_593799 != nil:
    section.add "X-Amz-Credential", valid_593799
  var valid_593800 = header.getOrDefault("X-Amz-Security-Token")
  valid_593800 = validateParameter(valid_593800, JString, required = false,
                                 default = nil)
  if valid_593800 != nil:
    section.add "X-Amz-Security-Token", valid_593800
  var valid_593801 = header.getOrDefault("X-Amz-Algorithm")
  valid_593801 = validateParameter(valid_593801, JString, required = false,
                                 default = nil)
  if valid_593801 != nil:
    section.add "X-Amz-Algorithm", valid_593801
  var valid_593802 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593802 = validateParameter(valid_593802, JString, required = false,
                                 default = nil)
  if valid_593802 != nil:
    section.add "X-Amz-SignedHeaders", valid_593802
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593803: Call_GetResetCacheParameterGroup_593788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_593803.validator(path, query, header, formData, body)
  let scheme = call_593803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593803.url(scheme.get, call_593803.host, call_593803.base,
                         call_593803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593803, url, valid)

proc call*(call_593804: Call_GetResetCacheParameterGroup_593788;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593805 = newJObject()
  add(query_593805, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593805, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_593805.add "ParameterNameValues", ParameterNameValues
  add(query_593805, "Action", newJString(Action))
  add(query_593805, "Version", newJString(Version))
  result = call_593804.call(nil, query_593805, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_593788(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_593789, base: "/",
    url: url_GetResetCacheParameterGroup_593790,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_593843 = ref object of OpenApiRestCall_591364
proc url_PostRevokeCacheSecurityGroupIngress_593845(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_593844(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593846 = query.getOrDefault("Action")
  valid_593846 = validateParameter(valid_593846, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_593846 != nil:
    section.add "Action", valid_593846
  var valid_593847 = query.getOrDefault("Version")
  valid_593847 = validateParameter(valid_593847, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593847 != nil:
    section.add "Version", valid_593847
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593848 = header.getOrDefault("X-Amz-Signature")
  valid_593848 = validateParameter(valid_593848, JString, required = false,
                                 default = nil)
  if valid_593848 != nil:
    section.add "X-Amz-Signature", valid_593848
  var valid_593849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593849 = validateParameter(valid_593849, JString, required = false,
                                 default = nil)
  if valid_593849 != nil:
    section.add "X-Amz-Content-Sha256", valid_593849
  var valid_593850 = header.getOrDefault("X-Amz-Date")
  valid_593850 = validateParameter(valid_593850, JString, required = false,
                                 default = nil)
  if valid_593850 != nil:
    section.add "X-Amz-Date", valid_593850
  var valid_593851 = header.getOrDefault("X-Amz-Credential")
  valid_593851 = validateParameter(valid_593851, JString, required = false,
                                 default = nil)
  if valid_593851 != nil:
    section.add "X-Amz-Credential", valid_593851
  var valid_593852 = header.getOrDefault("X-Amz-Security-Token")
  valid_593852 = validateParameter(valid_593852, JString, required = false,
                                 default = nil)
  if valid_593852 != nil:
    section.add "X-Amz-Security-Token", valid_593852
  var valid_593853 = header.getOrDefault("X-Amz-Algorithm")
  valid_593853 = validateParameter(valid_593853, JString, required = false,
                                 default = nil)
  if valid_593853 != nil:
    section.add "X-Amz-Algorithm", valid_593853
  var valid_593854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593854 = validateParameter(valid_593854, JString, required = false,
                                 default = nil)
  if valid_593854 != nil:
    section.add "X-Amz-SignedHeaders", valid_593854
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_593855 = formData.getOrDefault("CacheSecurityGroupName")
  valid_593855 = validateParameter(valid_593855, JString, required = true,
                                 default = nil)
  if valid_593855 != nil:
    section.add "CacheSecurityGroupName", valid_593855
  var valid_593856 = formData.getOrDefault("EC2SecurityGroupName")
  valid_593856 = validateParameter(valid_593856, JString, required = true,
                                 default = nil)
  if valid_593856 != nil:
    section.add "EC2SecurityGroupName", valid_593856
  var valid_593857 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_593857 = validateParameter(valid_593857, JString, required = true,
                                 default = nil)
  if valid_593857 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_593857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593858: Call_PostRevokeCacheSecurityGroupIngress_593843;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_593858.validator(path, query, header, formData, body)
  let scheme = call_593858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593858.url(scheme.get, call_593858.host, call_593858.base,
                         call_593858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593858, url, valid)

proc call*(call_593859: Call_PostRevokeCacheSecurityGroupIngress_593843;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593860 = newJObject()
  var formData_593861 = newJObject()
  add(formData_593861, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_593861, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_593861, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_593860, "Action", newJString(Action))
  add(query_593860, "Version", newJString(Version))
  result = call_593859.call(nil, query_593860, nil, formData_593861, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_593843(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_593844, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_593845,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_593825 = ref object of OpenApiRestCall_591364
proc url_GetRevokeCacheSecurityGroupIngress_593827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_593826(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_593828 = query.getOrDefault("EC2SecurityGroupName")
  valid_593828 = validateParameter(valid_593828, JString, required = true,
                                 default = nil)
  if valid_593828 != nil:
    section.add "EC2SecurityGroupName", valid_593828
  var valid_593829 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_593829 = validateParameter(valid_593829, JString, required = true,
                                 default = nil)
  if valid_593829 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_593829
  var valid_593830 = query.getOrDefault("Action")
  valid_593830 = validateParameter(valid_593830, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_593830 != nil:
    section.add "Action", valid_593830
  var valid_593831 = query.getOrDefault("CacheSecurityGroupName")
  valid_593831 = validateParameter(valid_593831, JString, required = true,
                                 default = nil)
  if valid_593831 != nil:
    section.add "CacheSecurityGroupName", valid_593831
  var valid_593832 = query.getOrDefault("Version")
  valid_593832 = validateParameter(valid_593832, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593832 != nil:
    section.add "Version", valid_593832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593833 = header.getOrDefault("X-Amz-Signature")
  valid_593833 = validateParameter(valid_593833, JString, required = false,
                                 default = nil)
  if valid_593833 != nil:
    section.add "X-Amz-Signature", valid_593833
  var valid_593834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593834 = validateParameter(valid_593834, JString, required = false,
                                 default = nil)
  if valid_593834 != nil:
    section.add "X-Amz-Content-Sha256", valid_593834
  var valid_593835 = header.getOrDefault("X-Amz-Date")
  valid_593835 = validateParameter(valid_593835, JString, required = false,
                                 default = nil)
  if valid_593835 != nil:
    section.add "X-Amz-Date", valid_593835
  var valid_593836 = header.getOrDefault("X-Amz-Credential")
  valid_593836 = validateParameter(valid_593836, JString, required = false,
                                 default = nil)
  if valid_593836 != nil:
    section.add "X-Amz-Credential", valid_593836
  var valid_593837 = header.getOrDefault("X-Amz-Security-Token")
  valid_593837 = validateParameter(valid_593837, JString, required = false,
                                 default = nil)
  if valid_593837 != nil:
    section.add "X-Amz-Security-Token", valid_593837
  var valid_593838 = header.getOrDefault("X-Amz-Algorithm")
  valid_593838 = validateParameter(valid_593838, JString, required = false,
                                 default = nil)
  if valid_593838 != nil:
    section.add "X-Amz-Algorithm", valid_593838
  var valid_593839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593839 = validateParameter(valid_593839, JString, required = false,
                                 default = nil)
  if valid_593839 != nil:
    section.add "X-Amz-SignedHeaders", valid_593839
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593840: Call_GetRevokeCacheSecurityGroupIngress_593825;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_593840.validator(path, query, header, formData, body)
  let scheme = call_593840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593840.url(scheme.get, call_593840.host, call_593840.base,
                         call_593840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593840, url, valid)

proc call*(call_593841: Call_GetRevokeCacheSecurityGroupIngress_593825;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_593842 = newJObject()
  add(query_593842, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_593842, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_593842, "Action", newJString(Action))
  add(query_593842, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_593842, "Version", newJString(Version))
  result = call_593841.call(nil, query_593842, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_593825(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_593826, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_593827,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartMigration_593879 = ref object of OpenApiRestCall_591364
proc url_PostStartMigration_593881(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostStartMigration_593880(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593882 = query.getOrDefault("Action")
  valid_593882 = validateParameter(valid_593882, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_593882 != nil:
    section.add "Action", valid_593882
  var valid_593883 = query.getOrDefault("Version")
  valid_593883 = validateParameter(valid_593883, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593883 != nil:
    section.add "Version", valid_593883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593884 = header.getOrDefault("X-Amz-Signature")
  valid_593884 = validateParameter(valid_593884, JString, required = false,
                                 default = nil)
  if valid_593884 != nil:
    section.add "X-Amz-Signature", valid_593884
  var valid_593885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593885 = validateParameter(valid_593885, JString, required = false,
                                 default = nil)
  if valid_593885 != nil:
    section.add "X-Amz-Content-Sha256", valid_593885
  var valid_593886 = header.getOrDefault("X-Amz-Date")
  valid_593886 = validateParameter(valid_593886, JString, required = false,
                                 default = nil)
  if valid_593886 != nil:
    section.add "X-Amz-Date", valid_593886
  var valid_593887 = header.getOrDefault("X-Amz-Credential")
  valid_593887 = validateParameter(valid_593887, JString, required = false,
                                 default = nil)
  if valid_593887 != nil:
    section.add "X-Amz-Credential", valid_593887
  var valid_593888 = header.getOrDefault("X-Amz-Security-Token")
  valid_593888 = validateParameter(valid_593888, JString, required = false,
                                 default = nil)
  if valid_593888 != nil:
    section.add "X-Amz-Security-Token", valid_593888
  var valid_593889 = header.getOrDefault("X-Amz-Algorithm")
  valid_593889 = validateParameter(valid_593889, JString, required = false,
                                 default = nil)
  if valid_593889 != nil:
    section.add "X-Amz-Algorithm", valid_593889
  var valid_593890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593890 = validateParameter(valid_593890, JString, required = false,
                                 default = nil)
  if valid_593890 != nil:
    section.add "X-Amz-SignedHeaders", valid_593890
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_593891 = formData.getOrDefault("CustomerNodeEndpointList")
  valid_593891 = validateParameter(valid_593891, JArray, required = true, default = nil)
  if valid_593891 != nil:
    section.add "CustomerNodeEndpointList", valid_593891
  var valid_593892 = formData.getOrDefault("ReplicationGroupId")
  valid_593892 = validateParameter(valid_593892, JString, required = true,
                                 default = nil)
  if valid_593892 != nil:
    section.add "ReplicationGroupId", valid_593892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593893: Call_PostStartMigration_593879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_593893.validator(path, query, header, formData, body)
  let scheme = call_593893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593893.url(scheme.get, call_593893.host, call_593893.base,
                         call_593893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593893, url, valid)

proc call*(call_593894: Call_PostStartMigration_593879;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## postStartMigration
  ## Start the migration of data.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  var query_593895 = newJObject()
  var formData_593896 = newJObject()
  add(query_593895, "Action", newJString(Action))
  add(query_593895, "Version", newJString(Version))
  if CustomerNodeEndpointList != nil:
    formData_593896.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(formData_593896, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593894.call(nil, query_593895, nil, formData_593896, nil)

var postStartMigration* = Call_PostStartMigration_593879(
    name: "postStartMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=StartMigration",
    validator: validate_PostStartMigration_593880, base: "/",
    url: url_PostStartMigration_593881, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartMigration_593862 = ref object of OpenApiRestCall_591364
proc url_GetStartMigration_593864(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetStartMigration_593863(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_593865 = query.getOrDefault("CustomerNodeEndpointList")
  valid_593865 = validateParameter(valid_593865, JArray, required = true, default = nil)
  if valid_593865 != nil:
    section.add "CustomerNodeEndpointList", valid_593865
  var valid_593866 = query.getOrDefault("Action")
  valid_593866 = validateParameter(valid_593866, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_593866 != nil:
    section.add "Action", valid_593866
  var valid_593867 = query.getOrDefault("ReplicationGroupId")
  valid_593867 = validateParameter(valid_593867, JString, required = true,
                                 default = nil)
  if valid_593867 != nil:
    section.add "ReplicationGroupId", valid_593867
  var valid_593868 = query.getOrDefault("Version")
  valid_593868 = validateParameter(valid_593868, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593868 != nil:
    section.add "Version", valid_593868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593869 = header.getOrDefault("X-Amz-Signature")
  valid_593869 = validateParameter(valid_593869, JString, required = false,
                                 default = nil)
  if valid_593869 != nil:
    section.add "X-Amz-Signature", valid_593869
  var valid_593870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593870 = validateParameter(valid_593870, JString, required = false,
                                 default = nil)
  if valid_593870 != nil:
    section.add "X-Amz-Content-Sha256", valid_593870
  var valid_593871 = header.getOrDefault("X-Amz-Date")
  valid_593871 = validateParameter(valid_593871, JString, required = false,
                                 default = nil)
  if valid_593871 != nil:
    section.add "X-Amz-Date", valid_593871
  var valid_593872 = header.getOrDefault("X-Amz-Credential")
  valid_593872 = validateParameter(valid_593872, JString, required = false,
                                 default = nil)
  if valid_593872 != nil:
    section.add "X-Amz-Credential", valid_593872
  var valid_593873 = header.getOrDefault("X-Amz-Security-Token")
  valid_593873 = validateParameter(valid_593873, JString, required = false,
                                 default = nil)
  if valid_593873 != nil:
    section.add "X-Amz-Security-Token", valid_593873
  var valid_593874 = header.getOrDefault("X-Amz-Algorithm")
  valid_593874 = validateParameter(valid_593874, JString, required = false,
                                 default = nil)
  if valid_593874 != nil:
    section.add "X-Amz-Algorithm", valid_593874
  var valid_593875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593875 = validateParameter(valid_593875, JString, required = false,
                                 default = nil)
  if valid_593875 != nil:
    section.add "X-Amz-SignedHeaders", valid_593875
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593876: Call_GetStartMigration_593862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_593876.validator(path, query, header, formData, body)
  let scheme = call_593876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593876.url(scheme.get, call_593876.host, call_593876.base,
                         call_593876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593876, url, valid)

proc call*(call_593877: Call_GetStartMigration_593862;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## getStartMigration
  ## Start the migration of data.
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: string (required)
  var query_593878 = newJObject()
  if CustomerNodeEndpointList != nil:
    query_593878.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(query_593878, "Action", newJString(Action))
  add(query_593878, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593878, "Version", newJString(Version))
  result = call_593877.call(nil, query_593878, nil, nil, nil)

var getStartMigration* = Call_GetStartMigration_593862(name: "getStartMigration",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=StartMigration", validator: validate_GetStartMigration_593863,
    base: "/", url: url_GetStartMigration_593864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_593914 = ref object of OpenApiRestCall_591364
proc url_PostTestFailover_593916(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTestFailover_593915(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593917 = query.getOrDefault("Action")
  valid_593917 = validateParameter(valid_593917, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_593917 != nil:
    section.add "Action", valid_593917
  var valid_593918 = query.getOrDefault("Version")
  valid_593918 = validateParameter(valid_593918, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593918 != nil:
    section.add "Version", valid_593918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593919 = header.getOrDefault("X-Amz-Signature")
  valid_593919 = validateParameter(valid_593919, JString, required = false,
                                 default = nil)
  if valid_593919 != nil:
    section.add "X-Amz-Signature", valid_593919
  var valid_593920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593920 = validateParameter(valid_593920, JString, required = false,
                                 default = nil)
  if valid_593920 != nil:
    section.add "X-Amz-Content-Sha256", valid_593920
  var valid_593921 = header.getOrDefault("X-Amz-Date")
  valid_593921 = validateParameter(valid_593921, JString, required = false,
                                 default = nil)
  if valid_593921 != nil:
    section.add "X-Amz-Date", valid_593921
  var valid_593922 = header.getOrDefault("X-Amz-Credential")
  valid_593922 = validateParameter(valid_593922, JString, required = false,
                                 default = nil)
  if valid_593922 != nil:
    section.add "X-Amz-Credential", valid_593922
  var valid_593923 = header.getOrDefault("X-Amz-Security-Token")
  valid_593923 = validateParameter(valid_593923, JString, required = false,
                                 default = nil)
  if valid_593923 != nil:
    section.add "X-Amz-Security-Token", valid_593923
  var valid_593924 = header.getOrDefault("X-Amz-Algorithm")
  valid_593924 = validateParameter(valid_593924, JString, required = false,
                                 default = nil)
  if valid_593924 != nil:
    section.add "X-Amz-Algorithm", valid_593924
  var valid_593925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593925 = validateParameter(valid_593925, JString, required = false,
                                 default = nil)
  if valid_593925 != nil:
    section.add "X-Amz-SignedHeaders", valid_593925
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_593926 = formData.getOrDefault("NodeGroupId")
  valid_593926 = validateParameter(valid_593926, JString, required = true,
                                 default = nil)
  if valid_593926 != nil:
    section.add "NodeGroupId", valid_593926
  var valid_593927 = formData.getOrDefault("ReplicationGroupId")
  valid_593927 = validateParameter(valid_593927, JString, required = true,
                                 default = nil)
  if valid_593927 != nil:
    section.add "ReplicationGroupId", valid_593927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593928: Call_PostTestFailover_593914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_593928.validator(path, query, header, formData, body)
  let scheme = call_593928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593928.url(scheme.get, call_593928.host, call_593928.base,
                         call_593928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593928, url, valid)

proc call*(call_593929: Call_PostTestFailover_593914; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_593930 = newJObject()
  var formData_593931 = newJObject()
  add(formData_593931, "NodeGroupId", newJString(NodeGroupId))
  add(query_593930, "Action", newJString(Action))
  add(query_593930, "Version", newJString(Version))
  add(formData_593931, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593929.call(nil, query_593930, nil, formData_593931, nil)

var postTestFailover* = Call_PostTestFailover_593914(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_593915,
    base: "/", url: url_PostTestFailover_593916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_593897 = ref object of OpenApiRestCall_591364
proc url_GetTestFailover_593899(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTestFailover_593898(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593900 = query.getOrDefault("Action")
  valid_593900 = validateParameter(valid_593900, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_593900 != nil:
    section.add "Action", valid_593900
  var valid_593901 = query.getOrDefault("ReplicationGroupId")
  valid_593901 = validateParameter(valid_593901, JString, required = true,
                                 default = nil)
  if valid_593901 != nil:
    section.add "ReplicationGroupId", valid_593901
  var valid_593902 = query.getOrDefault("Version")
  valid_593902 = validateParameter(valid_593902, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593902 != nil:
    section.add "Version", valid_593902
  var valid_593903 = query.getOrDefault("NodeGroupId")
  valid_593903 = validateParameter(valid_593903, JString, required = true,
                                 default = nil)
  if valid_593903 != nil:
    section.add "NodeGroupId", valid_593903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593904 = header.getOrDefault("X-Amz-Signature")
  valid_593904 = validateParameter(valid_593904, JString, required = false,
                                 default = nil)
  if valid_593904 != nil:
    section.add "X-Amz-Signature", valid_593904
  var valid_593905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593905 = validateParameter(valid_593905, JString, required = false,
                                 default = nil)
  if valid_593905 != nil:
    section.add "X-Amz-Content-Sha256", valid_593905
  var valid_593906 = header.getOrDefault("X-Amz-Date")
  valid_593906 = validateParameter(valid_593906, JString, required = false,
                                 default = nil)
  if valid_593906 != nil:
    section.add "X-Amz-Date", valid_593906
  var valid_593907 = header.getOrDefault("X-Amz-Credential")
  valid_593907 = validateParameter(valid_593907, JString, required = false,
                                 default = nil)
  if valid_593907 != nil:
    section.add "X-Amz-Credential", valid_593907
  var valid_593908 = header.getOrDefault("X-Amz-Security-Token")
  valid_593908 = validateParameter(valid_593908, JString, required = false,
                                 default = nil)
  if valid_593908 != nil:
    section.add "X-Amz-Security-Token", valid_593908
  var valid_593909 = header.getOrDefault("X-Amz-Algorithm")
  valid_593909 = validateParameter(valid_593909, JString, required = false,
                                 default = nil)
  if valid_593909 != nil:
    section.add "X-Amz-Algorithm", valid_593909
  var valid_593910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593910 = validateParameter(valid_593910, JString, required = false,
                                 default = nil)
  if valid_593910 != nil:
    section.add "X-Amz-SignedHeaders", valid_593910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593911: Call_GetTestFailover_593897; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_593911.validator(path, query, header, formData, body)
  let scheme = call_593911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593911.url(scheme.get, call_593911.host, call_593911.base,
                         call_593911.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593911, url, valid)

proc call*(call_593912: Call_GetTestFailover_593897; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_593913 = newJObject()
  add(query_593913, "Action", newJString(Action))
  add(query_593913, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593913, "Version", newJString(Version))
  add(query_593913, "NodeGroupId", newJString(NodeGroupId))
  result = call_593912.call(nil, query_593913, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_593897(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_593898,
    base: "/", url: url_GetTestFailover_593899, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
