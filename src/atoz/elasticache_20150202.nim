
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_613268 = ref object of OpenApiRestCall_612658
proc url_PostAddTagsToResource_613270(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_613269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613271 = query.getOrDefault("Action")
  valid_613271 = validateParameter(valid_613271, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613271 != nil:
    section.add "Action", valid_613271
  var valid_613272 = query.getOrDefault("Version")
  valid_613272 = validateParameter(valid_613272, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613272 != nil:
    section.add "Version", valid_613272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613273 = header.getOrDefault("X-Amz-Signature")
  valid_613273 = validateParameter(valid_613273, JString, required = false,
                                 default = nil)
  if valid_613273 != nil:
    section.add "X-Amz-Signature", valid_613273
  var valid_613274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613274 = validateParameter(valid_613274, JString, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "X-Amz-Content-Sha256", valid_613274
  var valid_613275 = header.getOrDefault("X-Amz-Date")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Date", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Credential")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Credential", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Security-Token")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Security-Token", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Algorithm")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Algorithm", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-SignedHeaders", valid_613279
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_613280 = formData.getOrDefault("Tags")
  valid_613280 = validateParameter(valid_613280, JArray, required = true, default = nil)
  if valid_613280 != nil:
    section.add "Tags", valid_613280
  var valid_613281 = formData.getOrDefault("ResourceName")
  valid_613281 = validateParameter(valid_613281, JString, required = true,
                                 default = nil)
  if valid_613281 != nil:
    section.add "ResourceName", valid_613281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613282: Call_PostAddTagsToResource_613268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_613282.validator(path, query, header, formData, body)
  let scheme = call_613282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613282.url(scheme.get, call_613282.host, call_613282.base,
                         call_613282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613282, url, valid)

proc call*(call_613283: Call_PostAddTagsToResource_613268; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_613284 = newJObject()
  var formData_613285 = newJObject()
  add(query_613284, "Action", newJString(Action))
  if Tags != nil:
    formData_613285.add "Tags", Tags
  add(query_613284, "Version", newJString(Version))
  add(formData_613285, "ResourceName", newJString(ResourceName))
  result = call_613283.call(nil, query_613284, nil, formData_613285, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_613268(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_613269, base: "/",
    url: url_PostAddTagsToResource_613270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_612996 = ref object of OpenApiRestCall_612658
proc url_GetAddTagsToResource_612998(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_612997(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_613110 = query.getOrDefault("Tags")
  valid_613110 = validateParameter(valid_613110, JArray, required = true, default = nil)
  if valid_613110 != nil:
    section.add "Tags", valid_613110
  var valid_613111 = query.getOrDefault("ResourceName")
  valid_613111 = validateParameter(valid_613111, JString, required = true,
                                 default = nil)
  if valid_613111 != nil:
    section.add "ResourceName", valid_613111
  var valid_613125 = query.getOrDefault("Action")
  valid_613125 = validateParameter(valid_613125, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_613125 != nil:
    section.add "Action", valid_613125
  var valid_613126 = query.getOrDefault("Version")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613126 != nil:
    section.add "Version", valid_613126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613127 = header.getOrDefault("X-Amz-Signature")
  valid_613127 = validateParameter(valid_613127, JString, required = false,
                                 default = nil)
  if valid_613127 != nil:
    section.add "X-Amz-Signature", valid_613127
  var valid_613128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Content-Sha256", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Date")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Date", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Credential")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Credential", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Security-Token")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Security-Token", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Algorithm")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Algorithm", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-SignedHeaders", valid_613133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613156: Call_GetAddTagsToResource_612996; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_613156.validator(path, query, header, formData, body)
  let scheme = call_613156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613156.url(scheme.get, call_613156.host, call_613156.base,
                         call_613156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613156, url, valid)

proc call*(call_613227: Call_GetAddTagsToResource_612996; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613228 = newJObject()
  if Tags != nil:
    query_613228.add "Tags", Tags
  add(query_613228, "ResourceName", newJString(ResourceName))
  add(query_613228, "Action", newJString(Action))
  add(query_613228, "Version", newJString(Version))
  result = call_613227.call(nil, query_613228, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_612996(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_612997, base: "/",
    url: url_GetAddTagsToResource_612998, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_613304 = ref object of OpenApiRestCall_612658
proc url_PostAuthorizeCacheSecurityGroupIngress_613306(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_613305(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613307 = query.getOrDefault("Action")
  valid_613307 = validateParameter(valid_613307, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_613307 != nil:
    section.add "Action", valid_613307
  var valid_613308 = query.getOrDefault("Version")
  valid_613308 = validateParameter(valid_613308, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613308 != nil:
    section.add "Version", valid_613308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613309 = header.getOrDefault("X-Amz-Signature")
  valid_613309 = validateParameter(valid_613309, JString, required = false,
                                 default = nil)
  if valid_613309 != nil:
    section.add "X-Amz-Signature", valid_613309
  var valid_613310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "X-Amz-Content-Sha256", valid_613310
  var valid_613311 = header.getOrDefault("X-Amz-Date")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Date", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Credential")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Credential", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Security-Token")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Security-Token", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-Algorithm")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-Algorithm", valid_613314
  var valid_613315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613315 = validateParameter(valid_613315, JString, required = false,
                                 default = nil)
  if valid_613315 != nil:
    section.add "X-Amz-SignedHeaders", valid_613315
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_613316 = formData.getOrDefault("CacheSecurityGroupName")
  valid_613316 = validateParameter(valid_613316, JString, required = true,
                                 default = nil)
  if valid_613316 != nil:
    section.add "CacheSecurityGroupName", valid_613316
  var valid_613317 = formData.getOrDefault("EC2SecurityGroupName")
  valid_613317 = validateParameter(valid_613317, JString, required = true,
                                 default = nil)
  if valid_613317 != nil:
    section.add "EC2SecurityGroupName", valid_613317
  var valid_613318 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_613318 = validateParameter(valid_613318, JString, required = true,
                                 default = nil)
  if valid_613318 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_613318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613319: Call_PostAuthorizeCacheSecurityGroupIngress_613304;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_613319.validator(path, query, header, formData, body)
  let scheme = call_613319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613319.url(scheme.get, call_613319.host, call_613319.base,
                         call_613319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613319, url, valid)

proc call*(call_613320: Call_PostAuthorizeCacheSecurityGroupIngress_613304;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613321 = newJObject()
  var formData_613322 = newJObject()
  add(formData_613322, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_613322, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_613322, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_613321, "Action", newJString(Action))
  add(query_613321, "Version", newJString(Version))
  result = call_613320.call(nil, query_613321, nil, formData_613322, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_613304(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_613305, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_613306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_613286 = ref object of OpenApiRestCall_612658
proc url_GetAuthorizeCacheSecurityGroupIngress_613288(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_613287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_613289 = query.getOrDefault("EC2SecurityGroupName")
  valid_613289 = validateParameter(valid_613289, JString, required = true,
                                 default = nil)
  if valid_613289 != nil:
    section.add "EC2SecurityGroupName", valid_613289
  var valid_613290 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_613290 = validateParameter(valid_613290, JString, required = true,
                                 default = nil)
  if valid_613290 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_613290
  var valid_613291 = query.getOrDefault("Action")
  valid_613291 = validateParameter(valid_613291, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_613291 != nil:
    section.add "Action", valid_613291
  var valid_613292 = query.getOrDefault("CacheSecurityGroupName")
  valid_613292 = validateParameter(valid_613292, JString, required = true,
                                 default = nil)
  if valid_613292 != nil:
    section.add "CacheSecurityGroupName", valid_613292
  var valid_613293 = query.getOrDefault("Version")
  valid_613293 = validateParameter(valid_613293, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613293 != nil:
    section.add "Version", valid_613293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613294 = header.getOrDefault("X-Amz-Signature")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Signature", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Content-Sha256", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Date")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Date", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Credential")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Credential", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Security-Token")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Security-Token", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-Algorithm")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-Algorithm", valid_613299
  var valid_613300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613300 = validateParameter(valid_613300, JString, required = false,
                                 default = nil)
  if valid_613300 != nil:
    section.add "X-Amz-SignedHeaders", valid_613300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613301: Call_GetAuthorizeCacheSecurityGroupIngress_613286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_613301.validator(path, query, header, formData, body)
  let scheme = call_613301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613301.url(scheme.get, call_613301.host, call_613301.base,
                         call_613301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613301, url, valid)

proc call*(call_613302: Call_GetAuthorizeCacheSecurityGroupIngress_613286;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_613303 = newJObject()
  add(query_613303, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_613303, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_613303, "Action", newJString(Action))
  add(query_613303, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_613303, "Version", newJString(Version))
  result = call_613302.call(nil, query_613303, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_613286(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_613287, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_613288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_613341 = ref object of OpenApiRestCall_612658
proc url_PostBatchApplyUpdateAction_613343(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchApplyUpdateAction_613342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613344 = query.getOrDefault("Action")
  valid_613344 = validateParameter(valid_613344, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_613344 != nil:
    section.add "Action", valid_613344
  var valid_613345 = query.getOrDefault("Version")
  valid_613345 = validateParameter(valid_613345, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613345 != nil:
    section.add "Version", valid_613345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613346 = header.getOrDefault("X-Amz-Signature")
  valid_613346 = validateParameter(valid_613346, JString, required = false,
                                 default = nil)
  if valid_613346 != nil:
    section.add "X-Amz-Signature", valid_613346
  var valid_613347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Content-Sha256", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Date")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Date", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-Credential")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-Credential", valid_613349
  var valid_613350 = header.getOrDefault("X-Amz-Security-Token")
  valid_613350 = validateParameter(valid_613350, JString, required = false,
                                 default = nil)
  if valid_613350 != nil:
    section.add "X-Amz-Security-Token", valid_613350
  var valid_613351 = header.getOrDefault("X-Amz-Algorithm")
  valid_613351 = validateParameter(valid_613351, JString, required = false,
                                 default = nil)
  if valid_613351 != nil:
    section.add "X-Amz-Algorithm", valid_613351
  var valid_613352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613352 = validateParameter(valid_613352, JString, required = false,
                                 default = nil)
  if valid_613352 != nil:
    section.add "X-Amz-SignedHeaders", valid_613352
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_613353 = formData.getOrDefault("ServiceUpdateName")
  valid_613353 = validateParameter(valid_613353, JString, required = true,
                                 default = nil)
  if valid_613353 != nil:
    section.add "ServiceUpdateName", valid_613353
  var valid_613354 = formData.getOrDefault("ReplicationGroupIds")
  valid_613354 = validateParameter(valid_613354, JArray, required = false,
                                 default = nil)
  if valid_613354 != nil:
    section.add "ReplicationGroupIds", valid_613354
  var valid_613355 = formData.getOrDefault("CacheClusterIds")
  valid_613355 = validateParameter(valid_613355, JArray, required = false,
                                 default = nil)
  if valid_613355 != nil:
    section.add "CacheClusterIds", valid_613355
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613356: Call_PostBatchApplyUpdateAction_613341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_613356.validator(path, query, header, formData, body)
  let scheme = call_613356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613356.url(scheme.get, call_613356.host, call_613356.base,
                         call_613356.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613356, url, valid)

proc call*(call_613357: Call_PostBatchApplyUpdateAction_613341;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613358 = newJObject()
  var formData_613359 = newJObject()
  add(formData_613359, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_613359.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_613359.add "CacheClusterIds", CacheClusterIds
  add(query_613358, "Action", newJString(Action))
  add(query_613358, "Version", newJString(Version))
  result = call_613357.call(nil, query_613358, nil, formData_613359, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_613341(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_613342, base: "/",
    url: url_PostBatchApplyUpdateAction_613343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_613323 = ref object of OpenApiRestCall_612658
proc url_GetBatchApplyUpdateAction_613325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchApplyUpdateAction_613324(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_613326 = query.getOrDefault("ServiceUpdateName")
  valid_613326 = validateParameter(valid_613326, JString, required = true,
                                 default = nil)
  if valid_613326 != nil:
    section.add "ServiceUpdateName", valid_613326
  var valid_613327 = query.getOrDefault("Action")
  valid_613327 = validateParameter(valid_613327, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_613327 != nil:
    section.add "Action", valid_613327
  var valid_613328 = query.getOrDefault("CacheClusterIds")
  valid_613328 = validateParameter(valid_613328, JArray, required = false,
                                 default = nil)
  if valid_613328 != nil:
    section.add "CacheClusterIds", valid_613328
  var valid_613329 = query.getOrDefault("ReplicationGroupIds")
  valid_613329 = validateParameter(valid_613329, JArray, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "ReplicationGroupIds", valid_613329
  var valid_613330 = query.getOrDefault("Version")
  valid_613330 = validateParameter(valid_613330, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613330 != nil:
    section.add "Version", valid_613330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613331 = header.getOrDefault("X-Amz-Signature")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Signature", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Content-Sha256", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Date")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Date", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-Credential")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-Credential", valid_613334
  var valid_613335 = header.getOrDefault("X-Amz-Security-Token")
  valid_613335 = validateParameter(valid_613335, JString, required = false,
                                 default = nil)
  if valid_613335 != nil:
    section.add "X-Amz-Security-Token", valid_613335
  var valid_613336 = header.getOrDefault("X-Amz-Algorithm")
  valid_613336 = validateParameter(valid_613336, JString, required = false,
                                 default = nil)
  if valid_613336 != nil:
    section.add "X-Amz-Algorithm", valid_613336
  var valid_613337 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613337 = validateParameter(valid_613337, JString, required = false,
                                 default = nil)
  if valid_613337 != nil:
    section.add "X-Amz-SignedHeaders", valid_613337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613338: Call_GetBatchApplyUpdateAction_613323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_613338.validator(path, query, header, formData, body)
  let scheme = call_613338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613338.url(scheme.get, call_613338.host, call_613338.base,
                         call_613338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613338, url, valid)

proc call*(call_613339: Call_GetBatchApplyUpdateAction_613323;
          ServiceUpdateName: string; Action: string = "BatchApplyUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_613340 = newJObject()
  add(query_613340, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_613340, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_613340.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_613340.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_613340, "Version", newJString(Version))
  result = call_613339.call(nil, query_613340, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_613323(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_613324, base: "/",
    url: url_GetBatchApplyUpdateAction_613325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_613378 = ref object of OpenApiRestCall_612658
proc url_PostBatchStopUpdateAction_613380(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchStopUpdateAction_613379(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613381 = query.getOrDefault("Action")
  valid_613381 = validateParameter(valid_613381, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_613381 != nil:
    section.add "Action", valid_613381
  var valid_613382 = query.getOrDefault("Version")
  valid_613382 = validateParameter(valid_613382, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613382 != nil:
    section.add "Version", valid_613382
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613383 = header.getOrDefault("X-Amz-Signature")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-Signature", valid_613383
  var valid_613384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613384 = validateParameter(valid_613384, JString, required = false,
                                 default = nil)
  if valid_613384 != nil:
    section.add "X-Amz-Content-Sha256", valid_613384
  var valid_613385 = header.getOrDefault("X-Amz-Date")
  valid_613385 = validateParameter(valid_613385, JString, required = false,
                                 default = nil)
  if valid_613385 != nil:
    section.add "X-Amz-Date", valid_613385
  var valid_613386 = header.getOrDefault("X-Amz-Credential")
  valid_613386 = validateParameter(valid_613386, JString, required = false,
                                 default = nil)
  if valid_613386 != nil:
    section.add "X-Amz-Credential", valid_613386
  var valid_613387 = header.getOrDefault("X-Amz-Security-Token")
  valid_613387 = validateParameter(valid_613387, JString, required = false,
                                 default = nil)
  if valid_613387 != nil:
    section.add "X-Amz-Security-Token", valid_613387
  var valid_613388 = header.getOrDefault("X-Amz-Algorithm")
  valid_613388 = validateParameter(valid_613388, JString, required = false,
                                 default = nil)
  if valid_613388 != nil:
    section.add "X-Amz-Algorithm", valid_613388
  var valid_613389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613389 = validateParameter(valid_613389, JString, required = false,
                                 default = nil)
  if valid_613389 != nil:
    section.add "X-Amz-SignedHeaders", valid_613389
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_613390 = formData.getOrDefault("ServiceUpdateName")
  valid_613390 = validateParameter(valid_613390, JString, required = true,
                                 default = nil)
  if valid_613390 != nil:
    section.add "ServiceUpdateName", valid_613390
  var valid_613391 = formData.getOrDefault("ReplicationGroupIds")
  valid_613391 = validateParameter(valid_613391, JArray, required = false,
                                 default = nil)
  if valid_613391 != nil:
    section.add "ReplicationGroupIds", valid_613391
  var valid_613392 = formData.getOrDefault("CacheClusterIds")
  valid_613392 = validateParameter(valid_613392, JArray, required = false,
                                 default = nil)
  if valid_613392 != nil:
    section.add "CacheClusterIds", valid_613392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613393: Call_PostBatchStopUpdateAction_613378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_613393.validator(path, query, header, formData, body)
  let scheme = call_613393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613393.url(scheme.get, call_613393.host, call_613393.base,
                         call_613393.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613393, url, valid)

proc call*(call_613394: Call_PostBatchStopUpdateAction_613378;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil; Action: string = "BatchStopUpdateAction";
          Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613395 = newJObject()
  var formData_613396 = newJObject()
  add(formData_613396, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_613396.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_613396.add "CacheClusterIds", CacheClusterIds
  add(query_613395, "Action", newJString(Action))
  add(query_613395, "Version", newJString(Version))
  result = call_613394.call(nil, query_613395, nil, formData_613396, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_613378(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_613379, base: "/",
    url: url_PostBatchStopUpdateAction_613380,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_613360 = ref object of OpenApiRestCall_612658
proc url_GetBatchStopUpdateAction_613362(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchStopUpdateAction_613361(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_613363 = query.getOrDefault("ServiceUpdateName")
  valid_613363 = validateParameter(valid_613363, JString, required = true,
                                 default = nil)
  if valid_613363 != nil:
    section.add "ServiceUpdateName", valid_613363
  var valid_613364 = query.getOrDefault("Action")
  valid_613364 = validateParameter(valid_613364, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_613364 != nil:
    section.add "Action", valid_613364
  var valid_613365 = query.getOrDefault("CacheClusterIds")
  valid_613365 = validateParameter(valid_613365, JArray, required = false,
                                 default = nil)
  if valid_613365 != nil:
    section.add "CacheClusterIds", valid_613365
  var valid_613366 = query.getOrDefault("ReplicationGroupIds")
  valid_613366 = validateParameter(valid_613366, JArray, required = false,
                                 default = nil)
  if valid_613366 != nil:
    section.add "ReplicationGroupIds", valid_613366
  var valid_613367 = query.getOrDefault("Version")
  valid_613367 = validateParameter(valid_613367, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613367 != nil:
    section.add "Version", valid_613367
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613368 = header.getOrDefault("X-Amz-Signature")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Signature", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-Content-Sha256", valid_613369
  var valid_613370 = header.getOrDefault("X-Amz-Date")
  valid_613370 = validateParameter(valid_613370, JString, required = false,
                                 default = nil)
  if valid_613370 != nil:
    section.add "X-Amz-Date", valid_613370
  var valid_613371 = header.getOrDefault("X-Amz-Credential")
  valid_613371 = validateParameter(valid_613371, JString, required = false,
                                 default = nil)
  if valid_613371 != nil:
    section.add "X-Amz-Credential", valid_613371
  var valid_613372 = header.getOrDefault("X-Amz-Security-Token")
  valid_613372 = validateParameter(valid_613372, JString, required = false,
                                 default = nil)
  if valid_613372 != nil:
    section.add "X-Amz-Security-Token", valid_613372
  var valid_613373 = header.getOrDefault("X-Amz-Algorithm")
  valid_613373 = validateParameter(valid_613373, JString, required = false,
                                 default = nil)
  if valid_613373 != nil:
    section.add "X-Amz-Algorithm", valid_613373
  var valid_613374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613374 = validateParameter(valid_613374, JString, required = false,
                                 default = nil)
  if valid_613374 != nil:
    section.add "X-Amz-SignedHeaders", valid_613374
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613375: Call_GetBatchStopUpdateAction_613360; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_613375.validator(path, query, header, formData, body)
  let scheme = call_613375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613375.url(scheme.get, call_613375.host, call_613375.base,
                         call_613375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613375, url, valid)

proc call*(call_613376: Call_GetBatchStopUpdateAction_613360;
          ServiceUpdateName: string; Action: string = "BatchStopUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_613377 = newJObject()
  add(query_613377, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_613377, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_613377.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_613377.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_613377, "Version", newJString(Version))
  result = call_613376.call(nil, query_613377, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_613360(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_613361, base: "/",
    url: url_GetBatchStopUpdateAction_613362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteMigration_613414 = ref object of OpenApiRestCall_612658
proc url_PostCompleteMigration_613416(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteMigration_613415(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613417 = query.getOrDefault("Action")
  valid_613417 = validateParameter(valid_613417, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_613417 != nil:
    section.add "Action", valid_613417
  var valid_613418 = query.getOrDefault("Version")
  valid_613418 = validateParameter(valid_613418, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613418 != nil:
    section.add "Version", valid_613418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613419 = header.getOrDefault("X-Amz-Signature")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "X-Amz-Signature", valid_613419
  var valid_613420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613420 = validateParameter(valid_613420, JString, required = false,
                                 default = nil)
  if valid_613420 != nil:
    section.add "X-Amz-Content-Sha256", valid_613420
  var valid_613421 = header.getOrDefault("X-Amz-Date")
  valid_613421 = validateParameter(valid_613421, JString, required = false,
                                 default = nil)
  if valid_613421 != nil:
    section.add "X-Amz-Date", valid_613421
  var valid_613422 = header.getOrDefault("X-Amz-Credential")
  valid_613422 = validateParameter(valid_613422, JString, required = false,
                                 default = nil)
  if valid_613422 != nil:
    section.add "X-Amz-Credential", valid_613422
  var valid_613423 = header.getOrDefault("X-Amz-Security-Token")
  valid_613423 = validateParameter(valid_613423, JString, required = false,
                                 default = nil)
  if valid_613423 != nil:
    section.add "X-Amz-Security-Token", valid_613423
  var valid_613424 = header.getOrDefault("X-Amz-Algorithm")
  valid_613424 = validateParameter(valid_613424, JString, required = false,
                                 default = nil)
  if valid_613424 != nil:
    section.add "X-Amz-Algorithm", valid_613424
  var valid_613425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613425 = validateParameter(valid_613425, JString, required = false,
                                 default = nil)
  if valid_613425 != nil:
    section.add "X-Amz-SignedHeaders", valid_613425
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  section = newJObject()
  var valid_613426 = formData.getOrDefault("Force")
  valid_613426 = validateParameter(valid_613426, JBool, required = false, default = nil)
  if valid_613426 != nil:
    section.add "Force", valid_613426
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_613427 = formData.getOrDefault("ReplicationGroupId")
  valid_613427 = validateParameter(valid_613427, JString, required = true,
                                 default = nil)
  if valid_613427 != nil:
    section.add "ReplicationGroupId", valid_613427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613428: Call_PostCompleteMigration_613414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_613428.validator(path, query, header, formData, body)
  let scheme = call_613428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613428.url(scheme.get, call_613428.host, call_613428.base,
                         call_613428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613428, url, valid)

proc call*(call_613429: Call_PostCompleteMigration_613414;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## postCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  var query_613430 = newJObject()
  var formData_613431 = newJObject()
  add(formData_613431, "Force", newJBool(Force))
  add(query_613430, "Action", newJString(Action))
  add(query_613430, "Version", newJString(Version))
  add(formData_613431, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_613429.call(nil, query_613430, nil, formData_613431, nil)

var postCompleteMigration* = Call_PostCompleteMigration_613414(
    name: "postCompleteMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_PostCompleteMigration_613415, base: "/",
    url: url_PostCompleteMigration_613416, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteMigration_613397 = ref object of OpenApiRestCall_612658
proc url_GetCompleteMigration_613399(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteMigration_613398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613400 = query.getOrDefault("Force")
  valid_613400 = validateParameter(valid_613400, JBool, required = false, default = nil)
  if valid_613400 != nil:
    section.add "Force", valid_613400
  var valid_613401 = query.getOrDefault("Action")
  valid_613401 = validateParameter(valid_613401, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_613401 != nil:
    section.add "Action", valid_613401
  var valid_613402 = query.getOrDefault("ReplicationGroupId")
  valid_613402 = validateParameter(valid_613402, JString, required = true,
                                 default = nil)
  if valid_613402 != nil:
    section.add "ReplicationGroupId", valid_613402
  var valid_613403 = query.getOrDefault("Version")
  valid_613403 = validateParameter(valid_613403, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613403 != nil:
    section.add "Version", valid_613403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613404 = header.getOrDefault("X-Amz-Signature")
  valid_613404 = validateParameter(valid_613404, JString, required = false,
                                 default = nil)
  if valid_613404 != nil:
    section.add "X-Amz-Signature", valid_613404
  var valid_613405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613405 = validateParameter(valid_613405, JString, required = false,
                                 default = nil)
  if valid_613405 != nil:
    section.add "X-Amz-Content-Sha256", valid_613405
  var valid_613406 = header.getOrDefault("X-Amz-Date")
  valid_613406 = validateParameter(valid_613406, JString, required = false,
                                 default = nil)
  if valid_613406 != nil:
    section.add "X-Amz-Date", valid_613406
  var valid_613407 = header.getOrDefault("X-Amz-Credential")
  valid_613407 = validateParameter(valid_613407, JString, required = false,
                                 default = nil)
  if valid_613407 != nil:
    section.add "X-Amz-Credential", valid_613407
  var valid_613408 = header.getOrDefault("X-Amz-Security-Token")
  valid_613408 = validateParameter(valid_613408, JString, required = false,
                                 default = nil)
  if valid_613408 != nil:
    section.add "X-Amz-Security-Token", valid_613408
  var valid_613409 = header.getOrDefault("X-Amz-Algorithm")
  valid_613409 = validateParameter(valid_613409, JString, required = false,
                                 default = nil)
  if valid_613409 != nil:
    section.add "X-Amz-Algorithm", valid_613409
  var valid_613410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613410 = validateParameter(valid_613410, JString, required = false,
                                 default = nil)
  if valid_613410 != nil:
    section.add "X-Amz-SignedHeaders", valid_613410
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613411: Call_GetCompleteMigration_613397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_613411.validator(path, query, header, formData, body)
  let scheme = call_613411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613411.url(scheme.get, call_613411.host, call_613411.base,
                         call_613411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613411, url, valid)

proc call*(call_613412: Call_GetCompleteMigration_613397;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## getCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: string (required)
  var query_613413 = newJObject()
  add(query_613413, "Force", newJBool(Force))
  add(query_613413, "Action", newJString(Action))
  add(query_613413, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613413, "Version", newJString(Version))
  result = call_613412.call(nil, query_613413, nil, nil, nil)

var getCompleteMigration* = Call_GetCompleteMigration_613397(
    name: "getCompleteMigration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_GetCompleteMigration_613398, base: "/",
    url: url_GetCompleteMigration_613399, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_613451 = ref object of OpenApiRestCall_612658
proc url_PostCopySnapshot_613453(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopySnapshot_613452(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613454 = query.getOrDefault("Action")
  valid_613454 = validateParameter(valid_613454, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_613454 != nil:
    section.add "Action", valid_613454
  var valid_613455 = query.getOrDefault("Version")
  valid_613455 = validateParameter(valid_613455, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613455 != nil:
    section.add "Version", valid_613455
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613456 = header.getOrDefault("X-Amz-Signature")
  valid_613456 = validateParameter(valid_613456, JString, required = false,
                                 default = nil)
  if valid_613456 != nil:
    section.add "X-Amz-Signature", valid_613456
  var valid_613457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613457 = validateParameter(valid_613457, JString, required = false,
                                 default = nil)
  if valid_613457 != nil:
    section.add "X-Amz-Content-Sha256", valid_613457
  var valid_613458 = header.getOrDefault("X-Amz-Date")
  valid_613458 = validateParameter(valid_613458, JString, required = false,
                                 default = nil)
  if valid_613458 != nil:
    section.add "X-Amz-Date", valid_613458
  var valid_613459 = header.getOrDefault("X-Amz-Credential")
  valid_613459 = validateParameter(valid_613459, JString, required = false,
                                 default = nil)
  if valid_613459 != nil:
    section.add "X-Amz-Credential", valid_613459
  var valid_613460 = header.getOrDefault("X-Amz-Security-Token")
  valid_613460 = validateParameter(valid_613460, JString, required = false,
                                 default = nil)
  if valid_613460 != nil:
    section.add "X-Amz-Security-Token", valid_613460
  var valid_613461 = header.getOrDefault("X-Amz-Algorithm")
  valid_613461 = validateParameter(valid_613461, JString, required = false,
                                 default = nil)
  if valid_613461 != nil:
    section.add "X-Amz-Algorithm", valid_613461
  var valid_613462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613462 = validateParameter(valid_613462, JString, required = false,
                                 default = nil)
  if valid_613462 != nil:
    section.add "X-Amz-SignedHeaders", valid_613462
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_613463 = formData.getOrDefault("KmsKeyId")
  valid_613463 = validateParameter(valid_613463, JString, required = false,
                                 default = nil)
  if valid_613463 != nil:
    section.add "KmsKeyId", valid_613463
  var valid_613464 = formData.getOrDefault("TargetBucket")
  valid_613464 = validateParameter(valid_613464, JString, required = false,
                                 default = nil)
  if valid_613464 != nil:
    section.add "TargetBucket", valid_613464
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_613465 = formData.getOrDefault("SourceSnapshotName")
  valid_613465 = validateParameter(valid_613465, JString, required = true,
                                 default = nil)
  if valid_613465 != nil:
    section.add "SourceSnapshotName", valid_613465
  var valid_613466 = formData.getOrDefault("TargetSnapshotName")
  valid_613466 = validateParameter(valid_613466, JString, required = true,
                                 default = nil)
  if valid_613466 != nil:
    section.add "TargetSnapshotName", valid_613466
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613467: Call_PostCopySnapshot_613451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_613467.validator(path, query, header, formData, body)
  let scheme = call_613467.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613467.url(scheme.get, call_613467.host, call_613467.base,
                         call_613467.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613467, url, valid)

proc call*(call_613468: Call_PostCopySnapshot_613451; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_613469 = newJObject()
  var formData_613470 = newJObject()
  add(formData_613470, "KmsKeyId", newJString(KmsKeyId))
  add(query_613469, "Action", newJString(Action))
  add(formData_613470, "TargetBucket", newJString(TargetBucket))
  add(formData_613470, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_613470, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_613469, "Version", newJString(Version))
  result = call_613468.call(nil, query_613469, nil, formData_613470, nil)

var postCopySnapshot* = Call_PostCopySnapshot_613451(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_613452,
    base: "/", url: url_PostCopySnapshot_613453,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_613432 = ref object of OpenApiRestCall_612658
proc url_GetCopySnapshot_613434(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopySnapshot_613433(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613435 = query.getOrDefault("KmsKeyId")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "KmsKeyId", valid_613435
  var valid_613436 = query.getOrDefault("TargetBucket")
  valid_613436 = validateParameter(valid_613436, JString, required = false,
                                 default = nil)
  if valid_613436 != nil:
    section.add "TargetBucket", valid_613436
  var valid_613437 = query.getOrDefault("Action")
  valid_613437 = validateParameter(valid_613437, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_613437 != nil:
    section.add "Action", valid_613437
  var valid_613438 = query.getOrDefault("TargetSnapshotName")
  valid_613438 = validateParameter(valid_613438, JString, required = true,
                                 default = nil)
  if valid_613438 != nil:
    section.add "TargetSnapshotName", valid_613438
  var valid_613439 = query.getOrDefault("SourceSnapshotName")
  valid_613439 = validateParameter(valid_613439, JString, required = true,
                                 default = nil)
  if valid_613439 != nil:
    section.add "SourceSnapshotName", valid_613439
  var valid_613440 = query.getOrDefault("Version")
  valid_613440 = validateParameter(valid_613440, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613440 != nil:
    section.add "Version", valid_613440
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613441 = header.getOrDefault("X-Amz-Signature")
  valid_613441 = validateParameter(valid_613441, JString, required = false,
                                 default = nil)
  if valid_613441 != nil:
    section.add "X-Amz-Signature", valid_613441
  var valid_613442 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613442 = validateParameter(valid_613442, JString, required = false,
                                 default = nil)
  if valid_613442 != nil:
    section.add "X-Amz-Content-Sha256", valid_613442
  var valid_613443 = header.getOrDefault("X-Amz-Date")
  valid_613443 = validateParameter(valid_613443, JString, required = false,
                                 default = nil)
  if valid_613443 != nil:
    section.add "X-Amz-Date", valid_613443
  var valid_613444 = header.getOrDefault("X-Amz-Credential")
  valid_613444 = validateParameter(valid_613444, JString, required = false,
                                 default = nil)
  if valid_613444 != nil:
    section.add "X-Amz-Credential", valid_613444
  var valid_613445 = header.getOrDefault("X-Amz-Security-Token")
  valid_613445 = validateParameter(valid_613445, JString, required = false,
                                 default = nil)
  if valid_613445 != nil:
    section.add "X-Amz-Security-Token", valid_613445
  var valid_613446 = header.getOrDefault("X-Amz-Algorithm")
  valid_613446 = validateParameter(valid_613446, JString, required = false,
                                 default = nil)
  if valid_613446 != nil:
    section.add "X-Amz-Algorithm", valid_613446
  var valid_613447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613447 = validateParameter(valid_613447, JString, required = false,
                                 default = nil)
  if valid_613447 != nil:
    section.add "X-Amz-SignedHeaders", valid_613447
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613448: Call_GetCopySnapshot_613432; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_613448.validator(path, query, header, formData, body)
  let scheme = call_613448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613448.url(scheme.get, call_613448.host, call_613448.base,
                         call_613448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613448, url, valid)

proc call*(call_613449: Call_GetCopySnapshot_613432; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_613450 = newJObject()
  add(query_613450, "KmsKeyId", newJString(KmsKeyId))
  add(query_613450, "TargetBucket", newJString(TargetBucket))
  add(query_613450, "Action", newJString(Action))
  add(query_613450, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_613450, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_613450, "Version", newJString(Version))
  result = call_613449.call(nil, query_613450, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_613432(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_613433,
    base: "/", url: url_GetCopySnapshot_613434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_613509 = ref object of OpenApiRestCall_612658
proc url_PostCreateCacheCluster_613511(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheCluster_613510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613512 = query.getOrDefault("Action")
  valid_613512 = validateParameter(valid_613512, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_613512 != nil:
    section.add "Action", valid_613512
  var valid_613513 = query.getOrDefault("Version")
  valid_613513 = validateParameter(valid_613513, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613513 != nil:
    section.add "Version", valid_613513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613514 = header.getOrDefault("X-Amz-Signature")
  valid_613514 = validateParameter(valid_613514, JString, required = false,
                                 default = nil)
  if valid_613514 != nil:
    section.add "X-Amz-Signature", valid_613514
  var valid_613515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613515 = validateParameter(valid_613515, JString, required = false,
                                 default = nil)
  if valid_613515 != nil:
    section.add "X-Amz-Content-Sha256", valid_613515
  var valid_613516 = header.getOrDefault("X-Amz-Date")
  valid_613516 = validateParameter(valid_613516, JString, required = false,
                                 default = nil)
  if valid_613516 != nil:
    section.add "X-Amz-Date", valid_613516
  var valid_613517 = header.getOrDefault("X-Amz-Credential")
  valid_613517 = validateParameter(valid_613517, JString, required = false,
                                 default = nil)
  if valid_613517 != nil:
    section.add "X-Amz-Credential", valid_613517
  var valid_613518 = header.getOrDefault("X-Amz-Security-Token")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-Security-Token", valid_613518
  var valid_613519 = header.getOrDefault("X-Amz-Algorithm")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "X-Amz-Algorithm", valid_613519
  var valid_613520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "X-Amz-SignedHeaders", valid_613520
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_613521 = formData.getOrDefault("SecurityGroupIds")
  valid_613521 = validateParameter(valid_613521, JArray, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "SecurityGroupIds", valid_613521
  var valid_613522 = formData.getOrDefault("ReplicationGroupId")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "ReplicationGroupId", valid_613522
  var valid_613523 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_613523 = validateParameter(valid_613523, JString, required = false,
                                 default = nil)
  if valid_613523 != nil:
    section.add "PreferredMaintenanceWindow", valid_613523
  var valid_613524 = formData.getOrDefault("Port")
  valid_613524 = validateParameter(valid_613524, JInt, required = false, default = nil)
  if valid_613524 != nil:
    section.add "Port", valid_613524
  var valid_613525 = formData.getOrDefault("NumCacheNodes")
  valid_613525 = validateParameter(valid_613525, JInt, required = false, default = nil)
  if valid_613525 != nil:
    section.add "NumCacheNodes", valid_613525
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_613526 = formData.getOrDefault("CacheClusterId")
  valid_613526 = validateParameter(valid_613526, JString, required = true,
                                 default = nil)
  if valid_613526 != nil:
    section.add "CacheClusterId", valid_613526
  var valid_613527 = formData.getOrDefault("NotificationTopicArn")
  valid_613527 = validateParameter(valid_613527, JString, required = false,
                                 default = nil)
  if valid_613527 != nil:
    section.add "NotificationTopicArn", valid_613527
  var valid_613528 = formData.getOrDefault("EngineVersion")
  valid_613528 = validateParameter(valid_613528, JString, required = false,
                                 default = nil)
  if valid_613528 != nil:
    section.add "EngineVersion", valid_613528
  var valid_613529 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_613529 = validateParameter(valid_613529, JString, required = false,
                                 default = nil)
  if valid_613529 != nil:
    section.add "PreferredAvailabilityZone", valid_613529
  var valid_613530 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_613530 = validateParameter(valid_613530, JArray, required = false,
                                 default = nil)
  if valid_613530 != nil:
    section.add "PreferredAvailabilityZones", valid_613530
  var valid_613531 = formData.getOrDefault("AZMode")
  valid_613531 = validateParameter(valid_613531, JString, required = false,
                                 default = newJString("single-az"))
  if valid_613531 != nil:
    section.add "AZMode", valid_613531
  var valid_613532 = formData.getOrDefault("Engine")
  valid_613532 = validateParameter(valid_613532, JString, required = false,
                                 default = nil)
  if valid_613532 != nil:
    section.add "Engine", valid_613532
  var valid_613533 = formData.getOrDefault("CacheParameterGroupName")
  valid_613533 = validateParameter(valid_613533, JString, required = false,
                                 default = nil)
  if valid_613533 != nil:
    section.add "CacheParameterGroupName", valid_613533
  var valid_613534 = formData.getOrDefault("SnapshotName")
  valid_613534 = validateParameter(valid_613534, JString, required = false,
                                 default = nil)
  if valid_613534 != nil:
    section.add "SnapshotName", valid_613534
  var valid_613535 = formData.getOrDefault("SnapshotArns")
  valid_613535 = validateParameter(valid_613535, JArray, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "SnapshotArns", valid_613535
  var valid_613536 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_613536 = validateParameter(valid_613536, JBool, required = false, default = nil)
  if valid_613536 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613536
  var valid_613537 = formData.getOrDefault("CacheSubnetGroupName")
  valid_613537 = validateParameter(valid_613537, JString, required = false,
                                 default = nil)
  if valid_613537 != nil:
    section.add "CacheSubnetGroupName", valid_613537
  var valid_613538 = formData.getOrDefault("AuthToken")
  valid_613538 = validateParameter(valid_613538, JString, required = false,
                                 default = nil)
  if valid_613538 != nil:
    section.add "AuthToken", valid_613538
  var valid_613539 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_613539 = validateParameter(valid_613539, JArray, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "CacheSecurityGroupNames", valid_613539
  var valid_613540 = formData.getOrDefault("Tags")
  valid_613540 = validateParameter(valid_613540, JArray, required = false,
                                 default = nil)
  if valid_613540 != nil:
    section.add "Tags", valid_613540
  var valid_613541 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_613541 = validateParameter(valid_613541, JInt, required = false, default = nil)
  if valid_613541 != nil:
    section.add "SnapshotRetentionLimit", valid_613541
  var valid_613542 = formData.getOrDefault("CacheNodeType")
  valid_613542 = validateParameter(valid_613542, JString, required = false,
                                 default = nil)
  if valid_613542 != nil:
    section.add "CacheNodeType", valid_613542
  var valid_613543 = formData.getOrDefault("SnapshotWindow")
  valid_613543 = validateParameter(valid_613543, JString, required = false,
                                 default = nil)
  if valid_613543 != nil:
    section.add "SnapshotWindow", valid_613543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613544: Call_PostCreateCacheCluster_613509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_613544.validator(path, query, header, formData, body)
  let scheme = call_613544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613544.url(scheme.get, call_613544.host, call_613544.base,
                         call_613544.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613544, url, valid)

proc call*(call_613545: Call_PostCreateCacheCluster_613509; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_613546 = newJObject()
  var formData_613547 = newJObject()
  if SecurityGroupIds != nil:
    formData_613547.add "SecurityGroupIds", SecurityGroupIds
  add(formData_613547, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_613547, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_613547, "Port", newJInt(Port))
  add(formData_613547, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_613547, "CacheClusterId", newJString(CacheClusterId))
  add(formData_613547, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_613547, "EngineVersion", newJString(EngineVersion))
  add(formData_613547, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_613547.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_613547, "AZMode", newJString(AZMode))
  add(formData_613547, "Engine", newJString(Engine))
  add(formData_613547, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_613547, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_613547.add "SnapshotArns", SnapshotArns
  add(formData_613547, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_613547, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613546, "Action", newJString(Action))
  add(formData_613547, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_613547.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_613547.add "Tags", Tags
  add(formData_613547, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_613546, "Version", newJString(Version))
  add(formData_613547, "CacheNodeType", newJString(CacheNodeType))
  add(formData_613547, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_613545.call(nil, query_613546, nil, formData_613547, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_613509(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_613510, base: "/",
    url: url_PostCreateCacheCluster_613511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_613471 = ref object of OpenApiRestCall_612658
proc url_GetCreateCacheCluster_613473(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheCluster_613472(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_613474 = query.getOrDefault("SnapshotArns")
  valid_613474 = validateParameter(valid_613474, JArray, required = false,
                                 default = nil)
  if valid_613474 != nil:
    section.add "SnapshotArns", valid_613474
  var valid_613475 = query.getOrDefault("AuthToken")
  valid_613475 = validateParameter(valid_613475, JString, required = false,
                                 default = nil)
  if valid_613475 != nil:
    section.add "AuthToken", valid_613475
  var valid_613476 = query.getOrDefault("Engine")
  valid_613476 = validateParameter(valid_613476, JString, required = false,
                                 default = nil)
  if valid_613476 != nil:
    section.add "Engine", valid_613476
  var valid_613477 = query.getOrDefault("CacheParameterGroupName")
  valid_613477 = validateParameter(valid_613477, JString, required = false,
                                 default = nil)
  if valid_613477 != nil:
    section.add "CacheParameterGroupName", valid_613477
  var valid_613478 = query.getOrDefault("Tags")
  valid_613478 = validateParameter(valid_613478, JArray, required = false,
                                 default = nil)
  if valid_613478 != nil:
    section.add "Tags", valid_613478
  var valid_613479 = query.getOrDefault("AZMode")
  valid_613479 = validateParameter(valid_613479, JString, required = false,
                                 default = newJString("single-az"))
  if valid_613479 != nil:
    section.add "AZMode", valid_613479
  var valid_613480 = query.getOrDefault("NumCacheNodes")
  valid_613480 = validateParameter(valid_613480, JInt, required = false, default = nil)
  if valid_613480 != nil:
    section.add "NumCacheNodes", valid_613480
  var valid_613481 = query.getOrDefault("SnapshotRetentionLimit")
  valid_613481 = validateParameter(valid_613481, JInt, required = false, default = nil)
  if valid_613481 != nil:
    section.add "SnapshotRetentionLimit", valid_613481
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_613482 = query.getOrDefault("CacheClusterId")
  valid_613482 = validateParameter(valid_613482, JString, required = true,
                                 default = nil)
  if valid_613482 != nil:
    section.add "CacheClusterId", valid_613482
  var valid_613483 = query.getOrDefault("PreferredAvailabilityZone")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "PreferredAvailabilityZone", valid_613483
  var valid_613484 = query.getOrDefault("CacheSecurityGroupNames")
  valid_613484 = validateParameter(valid_613484, JArray, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "CacheSecurityGroupNames", valid_613484
  var valid_613485 = query.getOrDefault("CacheNodeType")
  valid_613485 = validateParameter(valid_613485, JString, required = false,
                                 default = nil)
  if valid_613485 != nil:
    section.add "CacheNodeType", valid_613485
  var valid_613486 = query.getOrDefault("EngineVersion")
  valid_613486 = validateParameter(valid_613486, JString, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "EngineVersion", valid_613486
  var valid_613487 = query.getOrDefault("Action")
  valid_613487 = validateParameter(valid_613487, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_613487 != nil:
    section.add "Action", valid_613487
  var valid_613488 = query.getOrDefault("Port")
  valid_613488 = validateParameter(valid_613488, JInt, required = false, default = nil)
  if valid_613488 != nil:
    section.add "Port", valid_613488
  var valid_613489 = query.getOrDefault("ReplicationGroupId")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "ReplicationGroupId", valid_613489
  var valid_613490 = query.getOrDefault("CacheSubnetGroupName")
  valid_613490 = validateParameter(valid_613490, JString, required = false,
                                 default = nil)
  if valid_613490 != nil:
    section.add "CacheSubnetGroupName", valid_613490
  var valid_613491 = query.getOrDefault("NotificationTopicArn")
  valid_613491 = validateParameter(valid_613491, JString, required = false,
                                 default = nil)
  if valid_613491 != nil:
    section.add "NotificationTopicArn", valid_613491
  var valid_613492 = query.getOrDefault("PreferredAvailabilityZones")
  valid_613492 = validateParameter(valid_613492, JArray, required = false,
                                 default = nil)
  if valid_613492 != nil:
    section.add "PreferredAvailabilityZones", valid_613492
  var valid_613493 = query.getOrDefault("Version")
  valid_613493 = validateParameter(valid_613493, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613493 != nil:
    section.add "Version", valid_613493
  var valid_613494 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_613494 = validateParameter(valid_613494, JString, required = false,
                                 default = nil)
  if valid_613494 != nil:
    section.add "PreferredMaintenanceWindow", valid_613494
  var valid_613495 = query.getOrDefault("SnapshotName")
  valid_613495 = validateParameter(valid_613495, JString, required = false,
                                 default = nil)
  if valid_613495 != nil:
    section.add "SnapshotName", valid_613495
  var valid_613496 = query.getOrDefault("SnapshotWindow")
  valid_613496 = validateParameter(valid_613496, JString, required = false,
                                 default = nil)
  if valid_613496 != nil:
    section.add "SnapshotWindow", valid_613496
  var valid_613497 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_613497 = validateParameter(valid_613497, JBool, required = false, default = nil)
  if valid_613497 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613497
  var valid_613498 = query.getOrDefault("SecurityGroupIds")
  valid_613498 = validateParameter(valid_613498, JArray, required = false,
                                 default = nil)
  if valid_613498 != nil:
    section.add "SecurityGroupIds", valid_613498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613499 = header.getOrDefault("X-Amz-Signature")
  valid_613499 = validateParameter(valid_613499, JString, required = false,
                                 default = nil)
  if valid_613499 != nil:
    section.add "X-Amz-Signature", valid_613499
  var valid_613500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613500 = validateParameter(valid_613500, JString, required = false,
                                 default = nil)
  if valid_613500 != nil:
    section.add "X-Amz-Content-Sha256", valid_613500
  var valid_613501 = header.getOrDefault("X-Amz-Date")
  valid_613501 = validateParameter(valid_613501, JString, required = false,
                                 default = nil)
  if valid_613501 != nil:
    section.add "X-Amz-Date", valid_613501
  var valid_613502 = header.getOrDefault("X-Amz-Credential")
  valid_613502 = validateParameter(valid_613502, JString, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "X-Amz-Credential", valid_613502
  var valid_613503 = header.getOrDefault("X-Amz-Security-Token")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-Security-Token", valid_613503
  var valid_613504 = header.getOrDefault("X-Amz-Algorithm")
  valid_613504 = validateParameter(valid_613504, JString, required = false,
                                 default = nil)
  if valid_613504 != nil:
    section.add "X-Amz-Algorithm", valid_613504
  var valid_613505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "X-Amz-SignedHeaders", valid_613505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613506: Call_GetCreateCacheCluster_613471; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_613506.validator(path, query, header, formData, body)
  let scheme = call_613506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613506.url(scheme.get, call_613506.host, call_613506.base,
                         call_613506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613506, url, valid)

proc call*(call_613507: Call_GetCreateCacheCluster_613471; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_613508 = newJObject()
  if SnapshotArns != nil:
    query_613508.add "SnapshotArns", SnapshotArns
  add(query_613508, "AuthToken", newJString(AuthToken))
  add(query_613508, "Engine", newJString(Engine))
  add(query_613508, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_613508.add "Tags", Tags
  add(query_613508, "AZMode", newJString(AZMode))
  add(query_613508, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_613508, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_613508, "CacheClusterId", newJString(CacheClusterId))
  add(query_613508, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_613508.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_613508, "CacheNodeType", newJString(CacheNodeType))
  add(query_613508, "EngineVersion", newJString(EngineVersion))
  add(query_613508, "Action", newJString(Action))
  add(query_613508, "Port", newJInt(Port))
  add(query_613508, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613508, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613508, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_613508.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_613508, "Version", newJString(Version))
  add(query_613508, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_613508, "SnapshotName", newJString(SnapshotName))
  add(query_613508, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_613508, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_613508.add "SecurityGroupIds", SecurityGroupIds
  result = call_613507.call(nil, query_613508, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_613471(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_613472, base: "/",
    url: url_GetCreateCacheCluster_613473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_613566 = ref object of OpenApiRestCall_612658
proc url_PostCreateCacheParameterGroup_613568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheParameterGroup_613567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613569 = query.getOrDefault("Action")
  valid_613569 = validateParameter(valid_613569, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_613569 != nil:
    section.add "Action", valid_613569
  var valid_613570 = query.getOrDefault("Version")
  valid_613570 = validateParameter(valid_613570, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613570 != nil:
    section.add "Version", valid_613570
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613571 = header.getOrDefault("X-Amz-Signature")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Signature", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-Content-Sha256", valid_613572
  var valid_613573 = header.getOrDefault("X-Amz-Date")
  valid_613573 = validateParameter(valid_613573, JString, required = false,
                                 default = nil)
  if valid_613573 != nil:
    section.add "X-Amz-Date", valid_613573
  var valid_613574 = header.getOrDefault("X-Amz-Credential")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Credential", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-Security-Token")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-Security-Token", valid_613575
  var valid_613576 = header.getOrDefault("X-Amz-Algorithm")
  valid_613576 = validateParameter(valid_613576, JString, required = false,
                                 default = nil)
  if valid_613576 != nil:
    section.add "X-Amz-Algorithm", valid_613576
  var valid_613577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613577 = validateParameter(valid_613577, JString, required = false,
                                 default = nil)
  if valid_613577 != nil:
    section.add "X-Amz-SignedHeaders", valid_613577
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_613578 = formData.getOrDefault("Description")
  valid_613578 = validateParameter(valid_613578, JString, required = true,
                                 default = nil)
  if valid_613578 != nil:
    section.add "Description", valid_613578
  var valid_613579 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_613579 = validateParameter(valid_613579, JString, required = true,
                                 default = nil)
  if valid_613579 != nil:
    section.add "CacheParameterGroupFamily", valid_613579
  var valid_613580 = formData.getOrDefault("CacheParameterGroupName")
  valid_613580 = validateParameter(valid_613580, JString, required = true,
                                 default = nil)
  if valid_613580 != nil:
    section.add "CacheParameterGroupName", valid_613580
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613581: Call_PostCreateCacheParameterGroup_613566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_613581.validator(path, query, header, formData, body)
  let scheme = call_613581.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613581.url(scheme.get, call_613581.host, call_613581.base,
                         call_613581.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613581, url, valid)

proc call*(call_613582: Call_PostCreateCacheParameterGroup_613566;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613583 = newJObject()
  var formData_613584 = newJObject()
  add(formData_613584, "Description", newJString(Description))
  add(formData_613584, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_613584, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_613583, "Action", newJString(Action))
  add(query_613583, "Version", newJString(Version))
  result = call_613582.call(nil, query_613583, nil, formData_613584, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_613566(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_613567, base: "/",
    url: url_PostCreateCacheParameterGroup_613568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_613548 = ref object of OpenApiRestCall_612658
proc url_GetCreateCacheParameterGroup_613550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheParameterGroup_613549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_613551 = query.getOrDefault("CacheParameterGroupName")
  valid_613551 = validateParameter(valid_613551, JString, required = true,
                                 default = nil)
  if valid_613551 != nil:
    section.add "CacheParameterGroupName", valid_613551
  var valid_613552 = query.getOrDefault("CacheParameterGroupFamily")
  valid_613552 = validateParameter(valid_613552, JString, required = true,
                                 default = nil)
  if valid_613552 != nil:
    section.add "CacheParameterGroupFamily", valid_613552
  var valid_613553 = query.getOrDefault("Action")
  valid_613553 = validateParameter(valid_613553, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_613553 != nil:
    section.add "Action", valid_613553
  var valid_613554 = query.getOrDefault("Description")
  valid_613554 = validateParameter(valid_613554, JString, required = true,
                                 default = nil)
  if valid_613554 != nil:
    section.add "Description", valid_613554
  var valid_613555 = query.getOrDefault("Version")
  valid_613555 = validateParameter(valid_613555, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613555 != nil:
    section.add "Version", valid_613555
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613556 = header.getOrDefault("X-Amz-Signature")
  valid_613556 = validateParameter(valid_613556, JString, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "X-Amz-Signature", valid_613556
  var valid_613557 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613557 = validateParameter(valid_613557, JString, required = false,
                                 default = nil)
  if valid_613557 != nil:
    section.add "X-Amz-Content-Sha256", valid_613557
  var valid_613558 = header.getOrDefault("X-Amz-Date")
  valid_613558 = validateParameter(valid_613558, JString, required = false,
                                 default = nil)
  if valid_613558 != nil:
    section.add "X-Amz-Date", valid_613558
  var valid_613559 = header.getOrDefault("X-Amz-Credential")
  valid_613559 = validateParameter(valid_613559, JString, required = false,
                                 default = nil)
  if valid_613559 != nil:
    section.add "X-Amz-Credential", valid_613559
  var valid_613560 = header.getOrDefault("X-Amz-Security-Token")
  valid_613560 = validateParameter(valid_613560, JString, required = false,
                                 default = nil)
  if valid_613560 != nil:
    section.add "X-Amz-Security-Token", valid_613560
  var valid_613561 = header.getOrDefault("X-Amz-Algorithm")
  valid_613561 = validateParameter(valid_613561, JString, required = false,
                                 default = nil)
  if valid_613561 != nil:
    section.add "X-Amz-Algorithm", valid_613561
  var valid_613562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613562 = validateParameter(valid_613562, JString, required = false,
                                 default = nil)
  if valid_613562 != nil:
    section.add "X-Amz-SignedHeaders", valid_613562
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613563: Call_GetCreateCacheParameterGroup_613548; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_613563.validator(path, query, header, formData, body)
  let scheme = call_613563.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613563.url(scheme.get, call_613563.host, call_613563.base,
                         call_613563.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613563, url, valid)

proc call*(call_613564: Call_GetCreateCacheParameterGroup_613548;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_613565 = newJObject()
  add(query_613565, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_613565, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_613565, "Action", newJString(Action))
  add(query_613565, "Description", newJString(Description))
  add(query_613565, "Version", newJString(Version))
  result = call_613564.call(nil, query_613565, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_613548(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_613549, base: "/",
    url: url_GetCreateCacheParameterGroup_613550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_613602 = ref object of OpenApiRestCall_612658
proc url_PostCreateCacheSecurityGroup_613604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSecurityGroup_613603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613605 = query.getOrDefault("Action")
  valid_613605 = validateParameter(valid_613605, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_613605 != nil:
    section.add "Action", valid_613605
  var valid_613606 = query.getOrDefault("Version")
  valid_613606 = validateParameter(valid_613606, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613606 != nil:
    section.add "Version", valid_613606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613607 = header.getOrDefault("X-Amz-Signature")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-Signature", valid_613607
  var valid_613608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "X-Amz-Content-Sha256", valid_613608
  var valid_613609 = header.getOrDefault("X-Amz-Date")
  valid_613609 = validateParameter(valid_613609, JString, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "X-Amz-Date", valid_613609
  var valid_613610 = header.getOrDefault("X-Amz-Credential")
  valid_613610 = validateParameter(valid_613610, JString, required = false,
                                 default = nil)
  if valid_613610 != nil:
    section.add "X-Amz-Credential", valid_613610
  var valid_613611 = header.getOrDefault("X-Amz-Security-Token")
  valid_613611 = validateParameter(valid_613611, JString, required = false,
                                 default = nil)
  if valid_613611 != nil:
    section.add "X-Amz-Security-Token", valid_613611
  var valid_613612 = header.getOrDefault("X-Amz-Algorithm")
  valid_613612 = validateParameter(valid_613612, JString, required = false,
                                 default = nil)
  if valid_613612 != nil:
    section.add "X-Amz-Algorithm", valid_613612
  var valid_613613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613613 = validateParameter(valid_613613, JString, required = false,
                                 default = nil)
  if valid_613613 != nil:
    section.add "X-Amz-SignedHeaders", valid_613613
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_613614 = formData.getOrDefault("Description")
  valid_613614 = validateParameter(valid_613614, JString, required = true,
                                 default = nil)
  if valid_613614 != nil:
    section.add "Description", valid_613614
  var valid_613615 = formData.getOrDefault("CacheSecurityGroupName")
  valid_613615 = validateParameter(valid_613615, JString, required = true,
                                 default = nil)
  if valid_613615 != nil:
    section.add "CacheSecurityGroupName", valid_613615
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613616: Call_PostCreateCacheSecurityGroup_613602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_613616.validator(path, query, header, formData, body)
  let scheme = call_613616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613616.url(scheme.get, call_613616.host, call_613616.base,
                         call_613616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613616, url, valid)

proc call*(call_613617: Call_PostCreateCacheSecurityGroup_613602;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613618 = newJObject()
  var formData_613619 = newJObject()
  add(formData_613619, "Description", newJString(Description))
  add(formData_613619, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_613618, "Action", newJString(Action))
  add(query_613618, "Version", newJString(Version))
  result = call_613617.call(nil, query_613618, nil, formData_613619, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_613602(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_613603, base: "/",
    url: url_PostCreateCacheSecurityGroup_613604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_613585 = ref object of OpenApiRestCall_612658
proc url_GetCreateCacheSecurityGroup_613587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSecurityGroup_613586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613588 = query.getOrDefault("Action")
  valid_613588 = validateParameter(valid_613588, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_613588 != nil:
    section.add "Action", valid_613588
  var valid_613589 = query.getOrDefault("Description")
  valid_613589 = validateParameter(valid_613589, JString, required = true,
                                 default = nil)
  if valid_613589 != nil:
    section.add "Description", valid_613589
  var valid_613590 = query.getOrDefault("CacheSecurityGroupName")
  valid_613590 = validateParameter(valid_613590, JString, required = true,
                                 default = nil)
  if valid_613590 != nil:
    section.add "CacheSecurityGroupName", valid_613590
  var valid_613591 = query.getOrDefault("Version")
  valid_613591 = validateParameter(valid_613591, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613591 != nil:
    section.add "Version", valid_613591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613592 = header.getOrDefault("X-Amz-Signature")
  valid_613592 = validateParameter(valid_613592, JString, required = false,
                                 default = nil)
  if valid_613592 != nil:
    section.add "X-Amz-Signature", valid_613592
  var valid_613593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613593 = validateParameter(valid_613593, JString, required = false,
                                 default = nil)
  if valid_613593 != nil:
    section.add "X-Amz-Content-Sha256", valid_613593
  var valid_613594 = header.getOrDefault("X-Amz-Date")
  valid_613594 = validateParameter(valid_613594, JString, required = false,
                                 default = nil)
  if valid_613594 != nil:
    section.add "X-Amz-Date", valid_613594
  var valid_613595 = header.getOrDefault("X-Amz-Credential")
  valid_613595 = validateParameter(valid_613595, JString, required = false,
                                 default = nil)
  if valid_613595 != nil:
    section.add "X-Amz-Credential", valid_613595
  var valid_613596 = header.getOrDefault("X-Amz-Security-Token")
  valid_613596 = validateParameter(valid_613596, JString, required = false,
                                 default = nil)
  if valid_613596 != nil:
    section.add "X-Amz-Security-Token", valid_613596
  var valid_613597 = header.getOrDefault("X-Amz-Algorithm")
  valid_613597 = validateParameter(valid_613597, JString, required = false,
                                 default = nil)
  if valid_613597 != nil:
    section.add "X-Amz-Algorithm", valid_613597
  var valid_613598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613598 = validateParameter(valid_613598, JString, required = false,
                                 default = nil)
  if valid_613598 != nil:
    section.add "X-Amz-SignedHeaders", valid_613598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613599: Call_GetCreateCacheSecurityGroup_613585; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_613599.validator(path, query, header, formData, body)
  let scheme = call_613599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613599.url(scheme.get, call_613599.host, call_613599.base,
                         call_613599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613599, url, valid)

proc call*(call_613600: Call_GetCreateCacheSecurityGroup_613585;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_613601 = newJObject()
  add(query_613601, "Action", newJString(Action))
  add(query_613601, "Description", newJString(Description))
  add(query_613601, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_613601, "Version", newJString(Version))
  result = call_613600.call(nil, query_613601, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_613585(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_613586, base: "/",
    url: url_GetCreateCacheSecurityGroup_613587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_613638 = ref object of OpenApiRestCall_612658
proc url_PostCreateCacheSubnetGroup_613640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSubnetGroup_613639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613641 = query.getOrDefault("Action")
  valid_613641 = validateParameter(valid_613641, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_613641 != nil:
    section.add "Action", valid_613641
  var valid_613642 = query.getOrDefault("Version")
  valid_613642 = validateParameter(valid_613642, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613642 != nil:
    section.add "Version", valid_613642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613643 = header.getOrDefault("X-Amz-Signature")
  valid_613643 = validateParameter(valid_613643, JString, required = false,
                                 default = nil)
  if valid_613643 != nil:
    section.add "X-Amz-Signature", valid_613643
  var valid_613644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "X-Amz-Content-Sha256", valid_613644
  var valid_613645 = header.getOrDefault("X-Amz-Date")
  valid_613645 = validateParameter(valid_613645, JString, required = false,
                                 default = nil)
  if valid_613645 != nil:
    section.add "X-Amz-Date", valid_613645
  var valid_613646 = header.getOrDefault("X-Amz-Credential")
  valid_613646 = validateParameter(valid_613646, JString, required = false,
                                 default = nil)
  if valid_613646 != nil:
    section.add "X-Amz-Credential", valid_613646
  var valid_613647 = header.getOrDefault("X-Amz-Security-Token")
  valid_613647 = validateParameter(valid_613647, JString, required = false,
                                 default = nil)
  if valid_613647 != nil:
    section.add "X-Amz-Security-Token", valid_613647
  var valid_613648 = header.getOrDefault("X-Amz-Algorithm")
  valid_613648 = validateParameter(valid_613648, JString, required = false,
                                 default = nil)
  if valid_613648 != nil:
    section.add "X-Amz-Algorithm", valid_613648
  var valid_613649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613649 = validateParameter(valid_613649, JString, required = false,
                                 default = nil)
  if valid_613649 != nil:
    section.add "X-Amz-SignedHeaders", valid_613649
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_613650 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_613650 = validateParameter(valid_613650, JString, required = true,
                                 default = nil)
  if valid_613650 != nil:
    section.add "CacheSubnetGroupDescription", valid_613650
  var valid_613651 = formData.getOrDefault("CacheSubnetGroupName")
  valid_613651 = validateParameter(valid_613651, JString, required = true,
                                 default = nil)
  if valid_613651 != nil:
    section.add "CacheSubnetGroupName", valid_613651
  var valid_613652 = formData.getOrDefault("SubnetIds")
  valid_613652 = validateParameter(valid_613652, JArray, required = true, default = nil)
  if valid_613652 != nil:
    section.add "SubnetIds", valid_613652
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613653: Call_PostCreateCacheSubnetGroup_613638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_613653.validator(path, query, header, formData, body)
  let scheme = call_613653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613653.url(scheme.get, call_613653.host, call_613653.base,
                         call_613653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613653, url, valid)

proc call*(call_613654: Call_PostCreateCacheSubnetGroup_613638;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_613655 = newJObject()
  var formData_613656 = newJObject()
  add(formData_613656, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_613656, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613655, "Action", newJString(Action))
  add(query_613655, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_613656.add "SubnetIds", SubnetIds
  result = call_613654.call(nil, query_613655, nil, formData_613656, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_613638(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_613639, base: "/",
    url: url_PostCreateCacheSubnetGroup_613640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_613620 = ref object of OpenApiRestCall_612658
proc url_GetCreateCacheSubnetGroup_613622(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSubnetGroup_613621(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_613623 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_613623 = validateParameter(valid_613623, JString, required = true,
                                 default = nil)
  if valid_613623 != nil:
    section.add "CacheSubnetGroupDescription", valid_613623
  var valid_613624 = query.getOrDefault("SubnetIds")
  valid_613624 = validateParameter(valid_613624, JArray, required = true, default = nil)
  if valid_613624 != nil:
    section.add "SubnetIds", valid_613624
  var valid_613625 = query.getOrDefault("Action")
  valid_613625 = validateParameter(valid_613625, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_613625 != nil:
    section.add "Action", valid_613625
  var valid_613626 = query.getOrDefault("CacheSubnetGroupName")
  valid_613626 = validateParameter(valid_613626, JString, required = true,
                                 default = nil)
  if valid_613626 != nil:
    section.add "CacheSubnetGroupName", valid_613626
  var valid_613627 = query.getOrDefault("Version")
  valid_613627 = validateParameter(valid_613627, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613627 != nil:
    section.add "Version", valid_613627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613628 = header.getOrDefault("X-Amz-Signature")
  valid_613628 = validateParameter(valid_613628, JString, required = false,
                                 default = nil)
  if valid_613628 != nil:
    section.add "X-Amz-Signature", valid_613628
  var valid_613629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613629 = validateParameter(valid_613629, JString, required = false,
                                 default = nil)
  if valid_613629 != nil:
    section.add "X-Amz-Content-Sha256", valid_613629
  var valid_613630 = header.getOrDefault("X-Amz-Date")
  valid_613630 = validateParameter(valid_613630, JString, required = false,
                                 default = nil)
  if valid_613630 != nil:
    section.add "X-Amz-Date", valid_613630
  var valid_613631 = header.getOrDefault("X-Amz-Credential")
  valid_613631 = validateParameter(valid_613631, JString, required = false,
                                 default = nil)
  if valid_613631 != nil:
    section.add "X-Amz-Credential", valid_613631
  var valid_613632 = header.getOrDefault("X-Amz-Security-Token")
  valid_613632 = validateParameter(valid_613632, JString, required = false,
                                 default = nil)
  if valid_613632 != nil:
    section.add "X-Amz-Security-Token", valid_613632
  var valid_613633 = header.getOrDefault("X-Amz-Algorithm")
  valid_613633 = validateParameter(valid_613633, JString, required = false,
                                 default = nil)
  if valid_613633 != nil:
    section.add "X-Amz-Algorithm", valid_613633
  var valid_613634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613634 = validateParameter(valid_613634, JString, required = false,
                                 default = nil)
  if valid_613634 != nil:
    section.add "X-Amz-SignedHeaders", valid_613634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613635: Call_GetCreateCacheSubnetGroup_613620; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_613635.validator(path, query, header, formData, body)
  let scheme = call_613635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613635.url(scheme.get, call_613635.host, call_613635.base,
                         call_613635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613635, url, valid)

proc call*(call_613636: Call_GetCreateCacheSubnetGroup_613620;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_613637 = newJObject()
  add(query_613637, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_613637.add "SubnetIds", SubnetIds
  add(query_613637, "Action", newJString(Action))
  add(query_613637, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613637, "Version", newJString(Version))
  result = call_613636.call(nil, query_613637, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_613620(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_613621, base: "/",
    url: url_GetCreateCacheSubnetGroup_613622,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_613701 = ref object of OpenApiRestCall_612658
proc url_PostCreateReplicationGroup_613703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReplicationGroup_613702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613704 = query.getOrDefault("Action")
  valid_613704 = validateParameter(valid_613704, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_613704 != nil:
    section.add "Action", valid_613704
  var valid_613705 = query.getOrDefault("Version")
  valid_613705 = validateParameter(valid_613705, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613705 != nil:
    section.add "Version", valid_613705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613706 = header.getOrDefault("X-Amz-Signature")
  valid_613706 = validateParameter(valid_613706, JString, required = false,
                                 default = nil)
  if valid_613706 != nil:
    section.add "X-Amz-Signature", valid_613706
  var valid_613707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613707 = validateParameter(valid_613707, JString, required = false,
                                 default = nil)
  if valid_613707 != nil:
    section.add "X-Amz-Content-Sha256", valid_613707
  var valid_613708 = header.getOrDefault("X-Amz-Date")
  valid_613708 = validateParameter(valid_613708, JString, required = false,
                                 default = nil)
  if valid_613708 != nil:
    section.add "X-Amz-Date", valid_613708
  var valid_613709 = header.getOrDefault("X-Amz-Credential")
  valid_613709 = validateParameter(valid_613709, JString, required = false,
                                 default = nil)
  if valid_613709 != nil:
    section.add "X-Amz-Credential", valid_613709
  var valid_613710 = header.getOrDefault("X-Amz-Security-Token")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "X-Amz-Security-Token", valid_613710
  var valid_613711 = header.getOrDefault("X-Amz-Algorithm")
  valid_613711 = validateParameter(valid_613711, JString, required = false,
                                 default = nil)
  if valid_613711 != nil:
    section.add "X-Amz-Algorithm", valid_613711
  var valid_613712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613712 = validateParameter(valid_613712, JString, required = false,
                                 default = nil)
  if valid_613712 != nil:
    section.add "X-Amz-SignedHeaders", valid_613712
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_613713 = formData.getOrDefault("SecurityGroupIds")
  valid_613713 = validateParameter(valid_613713, JArray, required = false,
                                 default = nil)
  if valid_613713 != nil:
    section.add "SecurityGroupIds", valid_613713
  var valid_613714 = formData.getOrDefault("SnapshotWindow")
  valid_613714 = validateParameter(valid_613714, JString, required = false,
                                 default = nil)
  if valid_613714 != nil:
    section.add "SnapshotWindow", valid_613714
  var valid_613715 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_613715 = validateParameter(valid_613715, JString, required = false,
                                 default = nil)
  if valid_613715 != nil:
    section.add "PreferredMaintenanceWindow", valid_613715
  var valid_613716 = formData.getOrDefault("Port")
  valid_613716 = validateParameter(valid_613716, JInt, required = false, default = nil)
  if valid_613716 != nil:
    section.add "Port", valid_613716
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_613717 = formData.getOrDefault("ReplicationGroupId")
  valid_613717 = validateParameter(valid_613717, JString, required = true,
                                 default = nil)
  if valid_613717 != nil:
    section.add "ReplicationGroupId", valid_613717
  var valid_613718 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_613718 = validateParameter(valid_613718, JArray, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "PreferredCacheClusterAZs", valid_613718
  var valid_613719 = formData.getOrDefault("PrimaryClusterId")
  valid_613719 = validateParameter(valid_613719, JString, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "PrimaryClusterId", valid_613719
  var valid_613720 = formData.getOrDefault("NotificationTopicArn")
  valid_613720 = validateParameter(valid_613720, JString, required = false,
                                 default = nil)
  if valid_613720 != nil:
    section.add "NotificationTopicArn", valid_613720
  var valid_613721 = formData.getOrDefault("EngineVersion")
  valid_613721 = validateParameter(valid_613721, JString, required = false,
                                 default = nil)
  if valid_613721 != nil:
    section.add "EngineVersion", valid_613721
  var valid_613722 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_613722 = validateParameter(valid_613722, JBool, required = false, default = nil)
  if valid_613722 != nil:
    section.add "TransitEncryptionEnabled", valid_613722
  var valid_613723 = formData.getOrDefault("KmsKeyId")
  valid_613723 = validateParameter(valid_613723, JString, required = false,
                                 default = nil)
  if valid_613723 != nil:
    section.add "KmsKeyId", valid_613723
  var valid_613724 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_613724 = validateParameter(valid_613724, JBool, required = false, default = nil)
  if valid_613724 != nil:
    section.add "AutomaticFailoverEnabled", valid_613724
  var valid_613725 = formData.getOrDefault("Engine")
  valid_613725 = validateParameter(valid_613725, JString, required = false,
                                 default = nil)
  if valid_613725 != nil:
    section.add "Engine", valid_613725
  var valid_613726 = formData.getOrDefault("NumNodeGroups")
  valid_613726 = validateParameter(valid_613726, JInt, required = false, default = nil)
  if valid_613726 != nil:
    section.add "NumNodeGroups", valid_613726
  var valid_613727 = formData.getOrDefault("CacheParameterGroupName")
  valid_613727 = validateParameter(valid_613727, JString, required = false,
                                 default = nil)
  if valid_613727 != nil:
    section.add "CacheParameterGroupName", valid_613727
  var valid_613728 = formData.getOrDefault("SnapshotArns")
  valid_613728 = validateParameter(valid_613728, JArray, required = false,
                                 default = nil)
  if valid_613728 != nil:
    section.add "SnapshotArns", valid_613728
  var valid_613729 = formData.getOrDefault("SnapshotName")
  valid_613729 = validateParameter(valid_613729, JString, required = false,
                                 default = nil)
  if valid_613729 != nil:
    section.add "SnapshotName", valid_613729
  var valid_613730 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_613730 = validateParameter(valid_613730, JBool, required = false, default = nil)
  if valid_613730 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613730
  var valid_613731 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_613731 = validateParameter(valid_613731, JBool, required = false, default = nil)
  if valid_613731 != nil:
    section.add "AtRestEncryptionEnabled", valid_613731
  var valid_613732 = formData.getOrDefault("NodeGroupConfiguration")
  valid_613732 = validateParameter(valid_613732, JArray, required = false,
                                 default = nil)
  if valid_613732 != nil:
    section.add "NodeGroupConfiguration", valid_613732
  var valid_613733 = formData.getOrDefault("CacheSubnetGroupName")
  valid_613733 = validateParameter(valid_613733, JString, required = false,
                                 default = nil)
  if valid_613733 != nil:
    section.add "CacheSubnetGroupName", valid_613733
  var valid_613734 = formData.getOrDefault("AuthToken")
  valid_613734 = validateParameter(valid_613734, JString, required = false,
                                 default = nil)
  if valid_613734 != nil:
    section.add "AuthToken", valid_613734
  var valid_613735 = formData.getOrDefault("ReplicationGroupDescription")
  valid_613735 = validateParameter(valid_613735, JString, required = true,
                                 default = nil)
  if valid_613735 != nil:
    section.add "ReplicationGroupDescription", valid_613735
  var valid_613736 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_613736 = validateParameter(valid_613736, JArray, required = false,
                                 default = nil)
  if valid_613736 != nil:
    section.add "CacheSecurityGroupNames", valid_613736
  var valid_613737 = formData.getOrDefault("Tags")
  valid_613737 = validateParameter(valid_613737, JArray, required = false,
                                 default = nil)
  if valid_613737 != nil:
    section.add "Tags", valid_613737
  var valid_613738 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_613738 = validateParameter(valid_613738, JInt, required = false, default = nil)
  if valid_613738 != nil:
    section.add "SnapshotRetentionLimit", valid_613738
  var valid_613739 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_613739 = validateParameter(valid_613739, JInt, required = false, default = nil)
  if valid_613739 != nil:
    section.add "ReplicasPerNodeGroup", valid_613739
  var valid_613740 = formData.getOrDefault("CacheNodeType")
  valid_613740 = validateParameter(valid_613740, JString, required = false,
                                 default = nil)
  if valid_613740 != nil:
    section.add "CacheNodeType", valid_613740
  var valid_613741 = formData.getOrDefault("NumCacheClusters")
  valid_613741 = validateParameter(valid_613741, JInt, required = false, default = nil)
  if valid_613741 != nil:
    section.add "NumCacheClusters", valid_613741
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613742: Call_PostCreateReplicationGroup_613701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613742.validator(path, query, header, formData, body)
  let scheme = call_613742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613742.url(scheme.get, call_613742.host, call_613742.base,
                         call_613742.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613742, url, valid)

proc call*(call_613743: Call_PostCreateReplicationGroup_613701;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_613744 = newJObject()
  var formData_613745 = newJObject()
  if SecurityGroupIds != nil:
    formData_613745.add "SecurityGroupIds", SecurityGroupIds
  add(formData_613745, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_613745, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_613745, "Port", newJInt(Port))
  add(formData_613745, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_613745.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_613745, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_613745, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_613745, "EngineVersion", newJString(EngineVersion))
  add(formData_613745, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_613745, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613745, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_613745, "Engine", newJString(Engine))
  add(formData_613745, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_613745, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_613745.add "SnapshotArns", SnapshotArns
  add(formData_613745, "SnapshotName", newJString(SnapshotName))
  add(formData_613745, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_613745, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_613745.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_613745, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613744, "Action", newJString(Action))
  add(formData_613745, "AuthToken", newJString(AuthToken))
  add(formData_613745, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_613745.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_613745.add "Tags", Tags
  add(formData_613745, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_613745, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_613744, "Version", newJString(Version))
  add(formData_613745, "CacheNodeType", newJString(CacheNodeType))
  add(formData_613745, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_613743.call(nil, query_613744, nil, formData_613745, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_613701(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_613702, base: "/",
    url: url_PostCreateReplicationGroup_613703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_613657 = ref object of OpenApiRestCall_612658
proc url_GetCreateReplicationGroup_613659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReplicationGroup_613658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_613660 = query.getOrDefault("SnapshotArns")
  valid_613660 = validateParameter(valid_613660, JArray, required = false,
                                 default = nil)
  if valid_613660 != nil:
    section.add "SnapshotArns", valid_613660
  var valid_613661 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_613661 = validateParameter(valid_613661, JArray, required = false,
                                 default = nil)
  if valid_613661 != nil:
    section.add "PreferredCacheClusterAZs", valid_613661
  var valid_613662 = query.getOrDefault("AuthToken")
  valid_613662 = validateParameter(valid_613662, JString, required = false,
                                 default = nil)
  if valid_613662 != nil:
    section.add "AuthToken", valid_613662
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_613663 = query.getOrDefault("ReplicationGroupDescription")
  valid_613663 = validateParameter(valid_613663, JString, required = true,
                                 default = nil)
  if valid_613663 != nil:
    section.add "ReplicationGroupDescription", valid_613663
  var valid_613664 = query.getOrDefault("Engine")
  valid_613664 = validateParameter(valid_613664, JString, required = false,
                                 default = nil)
  if valid_613664 != nil:
    section.add "Engine", valid_613664
  var valid_613665 = query.getOrDefault("NumNodeGroups")
  valid_613665 = validateParameter(valid_613665, JInt, required = false, default = nil)
  if valid_613665 != nil:
    section.add "NumNodeGroups", valid_613665
  var valid_613666 = query.getOrDefault("CacheParameterGroupName")
  valid_613666 = validateParameter(valid_613666, JString, required = false,
                                 default = nil)
  if valid_613666 != nil:
    section.add "CacheParameterGroupName", valid_613666
  var valid_613667 = query.getOrDefault("Tags")
  valid_613667 = validateParameter(valid_613667, JArray, required = false,
                                 default = nil)
  if valid_613667 != nil:
    section.add "Tags", valid_613667
  var valid_613668 = query.getOrDefault("KmsKeyId")
  valid_613668 = validateParameter(valid_613668, JString, required = false,
                                 default = nil)
  if valid_613668 != nil:
    section.add "KmsKeyId", valid_613668
  var valid_613669 = query.getOrDefault("SnapshotRetentionLimit")
  valid_613669 = validateParameter(valid_613669, JInt, required = false, default = nil)
  if valid_613669 != nil:
    section.add "SnapshotRetentionLimit", valid_613669
  var valid_613670 = query.getOrDefault("TransitEncryptionEnabled")
  valid_613670 = validateParameter(valid_613670, JBool, required = false, default = nil)
  if valid_613670 != nil:
    section.add "TransitEncryptionEnabled", valid_613670
  var valid_613671 = query.getOrDefault("CacheSecurityGroupNames")
  valid_613671 = validateParameter(valid_613671, JArray, required = false,
                                 default = nil)
  if valid_613671 != nil:
    section.add "CacheSecurityGroupNames", valid_613671
  var valid_613672 = query.getOrDefault("PrimaryClusterId")
  valid_613672 = validateParameter(valid_613672, JString, required = false,
                                 default = nil)
  if valid_613672 != nil:
    section.add "PrimaryClusterId", valid_613672
  var valid_613673 = query.getOrDefault("CacheNodeType")
  valid_613673 = validateParameter(valid_613673, JString, required = false,
                                 default = nil)
  if valid_613673 != nil:
    section.add "CacheNodeType", valid_613673
  var valid_613674 = query.getOrDefault("EngineVersion")
  valid_613674 = validateParameter(valid_613674, JString, required = false,
                                 default = nil)
  if valid_613674 != nil:
    section.add "EngineVersion", valid_613674
  var valid_613675 = query.getOrDefault("NumCacheClusters")
  valid_613675 = validateParameter(valid_613675, JInt, required = false, default = nil)
  if valid_613675 != nil:
    section.add "NumCacheClusters", valid_613675
  var valid_613676 = query.getOrDefault("Action")
  valid_613676 = validateParameter(valid_613676, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_613676 != nil:
    section.add "Action", valid_613676
  var valid_613677 = query.getOrDefault("NodeGroupConfiguration")
  valid_613677 = validateParameter(valid_613677, JArray, required = false,
                                 default = nil)
  if valid_613677 != nil:
    section.add "NodeGroupConfiguration", valid_613677
  var valid_613678 = query.getOrDefault("Port")
  valid_613678 = validateParameter(valid_613678, JInt, required = false, default = nil)
  if valid_613678 != nil:
    section.add "Port", valid_613678
  var valid_613679 = query.getOrDefault("ReplicationGroupId")
  valid_613679 = validateParameter(valid_613679, JString, required = true,
                                 default = nil)
  if valid_613679 != nil:
    section.add "ReplicationGroupId", valid_613679
  var valid_613680 = query.getOrDefault("CacheSubnetGroupName")
  valid_613680 = validateParameter(valid_613680, JString, required = false,
                                 default = nil)
  if valid_613680 != nil:
    section.add "CacheSubnetGroupName", valid_613680
  var valid_613681 = query.getOrDefault("NotificationTopicArn")
  valid_613681 = validateParameter(valid_613681, JString, required = false,
                                 default = nil)
  if valid_613681 != nil:
    section.add "NotificationTopicArn", valid_613681
  var valid_613682 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_613682 = validateParameter(valid_613682, JBool, required = false, default = nil)
  if valid_613682 != nil:
    section.add "AutomaticFailoverEnabled", valid_613682
  var valid_613683 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_613683 = validateParameter(valid_613683, JBool, required = false, default = nil)
  if valid_613683 != nil:
    section.add "AtRestEncryptionEnabled", valid_613683
  var valid_613684 = query.getOrDefault("Version")
  valid_613684 = validateParameter(valid_613684, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613684 != nil:
    section.add "Version", valid_613684
  var valid_613685 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_613685 = validateParameter(valid_613685, JString, required = false,
                                 default = nil)
  if valid_613685 != nil:
    section.add "PreferredMaintenanceWindow", valid_613685
  var valid_613686 = query.getOrDefault("SnapshotName")
  valid_613686 = validateParameter(valid_613686, JString, required = false,
                                 default = nil)
  if valid_613686 != nil:
    section.add "SnapshotName", valid_613686
  var valid_613687 = query.getOrDefault("SnapshotWindow")
  valid_613687 = validateParameter(valid_613687, JString, required = false,
                                 default = nil)
  if valid_613687 != nil:
    section.add "SnapshotWindow", valid_613687
  var valid_613688 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_613688 = validateParameter(valid_613688, JInt, required = false, default = nil)
  if valid_613688 != nil:
    section.add "ReplicasPerNodeGroup", valid_613688
  var valid_613689 = query.getOrDefault("SecurityGroupIds")
  valid_613689 = validateParameter(valid_613689, JArray, required = false,
                                 default = nil)
  if valid_613689 != nil:
    section.add "SecurityGroupIds", valid_613689
  var valid_613690 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_613690 = validateParameter(valid_613690, JBool, required = false, default = nil)
  if valid_613690 != nil:
    section.add "AutoMinorVersionUpgrade", valid_613690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613691 = header.getOrDefault("X-Amz-Signature")
  valid_613691 = validateParameter(valid_613691, JString, required = false,
                                 default = nil)
  if valid_613691 != nil:
    section.add "X-Amz-Signature", valid_613691
  var valid_613692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "X-Amz-Content-Sha256", valid_613692
  var valid_613693 = header.getOrDefault("X-Amz-Date")
  valid_613693 = validateParameter(valid_613693, JString, required = false,
                                 default = nil)
  if valid_613693 != nil:
    section.add "X-Amz-Date", valid_613693
  var valid_613694 = header.getOrDefault("X-Amz-Credential")
  valid_613694 = validateParameter(valid_613694, JString, required = false,
                                 default = nil)
  if valid_613694 != nil:
    section.add "X-Amz-Credential", valid_613694
  var valid_613695 = header.getOrDefault("X-Amz-Security-Token")
  valid_613695 = validateParameter(valid_613695, JString, required = false,
                                 default = nil)
  if valid_613695 != nil:
    section.add "X-Amz-Security-Token", valid_613695
  var valid_613696 = header.getOrDefault("X-Amz-Algorithm")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "X-Amz-Algorithm", valid_613696
  var valid_613697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "X-Amz-SignedHeaders", valid_613697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613698: Call_GetCreateReplicationGroup_613657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613698.validator(path, query, header, formData, body)
  let scheme = call_613698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613698.url(scheme.get, call_613698.host, call_613698.base,
                         call_613698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613698, url, valid)

proc call*(call_613699: Call_GetCreateReplicationGroup_613657;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_613700 = newJObject()
  if SnapshotArns != nil:
    query_613700.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_613700.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_613700, "AuthToken", newJString(AuthToken))
  add(query_613700, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_613700, "Engine", newJString(Engine))
  add(query_613700, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_613700, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_613700.add "Tags", Tags
  add(query_613700, "KmsKeyId", newJString(KmsKeyId))
  add(query_613700, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_613700, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_613700.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_613700, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_613700, "CacheNodeType", newJString(CacheNodeType))
  add(query_613700, "EngineVersion", newJString(EngineVersion))
  add(query_613700, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_613700, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_613700.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_613700, "Port", newJInt(Port))
  add(query_613700, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613700, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613700, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_613700, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_613700, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_613700, "Version", newJString(Version))
  add(query_613700, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_613700, "SnapshotName", newJString(SnapshotName))
  add(query_613700, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_613700, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_613700.add "SecurityGroupIds", SecurityGroupIds
  add(query_613700, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_613699.call(nil, query_613700, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_613657(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_613658, base: "/",
    url: url_GetCreateReplicationGroup_613659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_613765 = ref object of OpenApiRestCall_612658
proc url_PostCreateSnapshot_613767(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSnapshot_613766(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613768 = query.getOrDefault("Action")
  valid_613768 = validateParameter(valid_613768, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_613768 != nil:
    section.add "Action", valid_613768
  var valid_613769 = query.getOrDefault("Version")
  valid_613769 = validateParameter(valid_613769, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613769 != nil:
    section.add "Version", valid_613769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613770 = header.getOrDefault("X-Amz-Signature")
  valid_613770 = validateParameter(valid_613770, JString, required = false,
                                 default = nil)
  if valid_613770 != nil:
    section.add "X-Amz-Signature", valid_613770
  var valid_613771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613771 = validateParameter(valid_613771, JString, required = false,
                                 default = nil)
  if valid_613771 != nil:
    section.add "X-Amz-Content-Sha256", valid_613771
  var valid_613772 = header.getOrDefault("X-Amz-Date")
  valid_613772 = validateParameter(valid_613772, JString, required = false,
                                 default = nil)
  if valid_613772 != nil:
    section.add "X-Amz-Date", valid_613772
  var valid_613773 = header.getOrDefault("X-Amz-Credential")
  valid_613773 = validateParameter(valid_613773, JString, required = false,
                                 default = nil)
  if valid_613773 != nil:
    section.add "X-Amz-Credential", valid_613773
  var valid_613774 = header.getOrDefault("X-Amz-Security-Token")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "X-Amz-Security-Token", valid_613774
  var valid_613775 = header.getOrDefault("X-Amz-Algorithm")
  valid_613775 = validateParameter(valid_613775, JString, required = false,
                                 default = nil)
  if valid_613775 != nil:
    section.add "X-Amz-Algorithm", valid_613775
  var valid_613776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613776 = validateParameter(valid_613776, JString, required = false,
                                 default = nil)
  if valid_613776 != nil:
    section.add "X-Amz-SignedHeaders", valid_613776
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_613777 = formData.getOrDefault("CacheClusterId")
  valid_613777 = validateParameter(valid_613777, JString, required = false,
                                 default = nil)
  if valid_613777 != nil:
    section.add "CacheClusterId", valid_613777
  var valid_613778 = formData.getOrDefault("KmsKeyId")
  valid_613778 = validateParameter(valid_613778, JString, required = false,
                                 default = nil)
  if valid_613778 != nil:
    section.add "KmsKeyId", valid_613778
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_613779 = formData.getOrDefault("SnapshotName")
  valid_613779 = validateParameter(valid_613779, JString, required = true,
                                 default = nil)
  if valid_613779 != nil:
    section.add "SnapshotName", valid_613779
  var valid_613780 = formData.getOrDefault("ReplicationGroupId")
  valid_613780 = validateParameter(valid_613780, JString, required = false,
                                 default = nil)
  if valid_613780 != nil:
    section.add "ReplicationGroupId", valid_613780
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613781: Call_PostCreateSnapshot_613765; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613781.validator(path, query, header, formData, body)
  let scheme = call_613781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613781.url(scheme.get, call_613781.host, call_613781.base,
                         call_613781.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613781, url, valid)

proc call*(call_613782: Call_PostCreateSnapshot_613765; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_613783 = newJObject()
  var formData_613784 = newJObject()
  add(formData_613784, "CacheClusterId", newJString(CacheClusterId))
  add(formData_613784, "KmsKeyId", newJString(KmsKeyId))
  add(formData_613784, "SnapshotName", newJString(SnapshotName))
  add(query_613783, "Action", newJString(Action))
  add(query_613783, "Version", newJString(Version))
  add(formData_613784, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_613782.call(nil, query_613783, nil, formData_613784, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_613765(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_613766, base: "/",
    url: url_PostCreateSnapshot_613767, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_613746 = ref object of OpenApiRestCall_612658
proc url_GetCreateSnapshot_613748(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSnapshot_613747(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_613749 = query.getOrDefault("KmsKeyId")
  valid_613749 = validateParameter(valid_613749, JString, required = false,
                                 default = nil)
  if valid_613749 != nil:
    section.add "KmsKeyId", valid_613749
  var valid_613750 = query.getOrDefault("CacheClusterId")
  valid_613750 = validateParameter(valid_613750, JString, required = false,
                                 default = nil)
  if valid_613750 != nil:
    section.add "CacheClusterId", valid_613750
  var valid_613751 = query.getOrDefault("Action")
  valid_613751 = validateParameter(valid_613751, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_613751 != nil:
    section.add "Action", valid_613751
  var valid_613752 = query.getOrDefault("ReplicationGroupId")
  valid_613752 = validateParameter(valid_613752, JString, required = false,
                                 default = nil)
  if valid_613752 != nil:
    section.add "ReplicationGroupId", valid_613752
  var valid_613753 = query.getOrDefault("Version")
  valid_613753 = validateParameter(valid_613753, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613753 != nil:
    section.add "Version", valid_613753
  var valid_613754 = query.getOrDefault("SnapshotName")
  valid_613754 = validateParameter(valid_613754, JString, required = true,
                                 default = nil)
  if valid_613754 != nil:
    section.add "SnapshotName", valid_613754
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613755 = header.getOrDefault("X-Amz-Signature")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "X-Amz-Signature", valid_613755
  var valid_613756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613756 = validateParameter(valid_613756, JString, required = false,
                                 default = nil)
  if valid_613756 != nil:
    section.add "X-Amz-Content-Sha256", valid_613756
  var valid_613757 = header.getOrDefault("X-Amz-Date")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "X-Amz-Date", valid_613757
  var valid_613758 = header.getOrDefault("X-Amz-Credential")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "X-Amz-Credential", valid_613758
  var valid_613759 = header.getOrDefault("X-Amz-Security-Token")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "X-Amz-Security-Token", valid_613759
  var valid_613760 = header.getOrDefault("X-Amz-Algorithm")
  valid_613760 = validateParameter(valid_613760, JString, required = false,
                                 default = nil)
  if valid_613760 != nil:
    section.add "X-Amz-Algorithm", valid_613760
  var valid_613761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613761 = validateParameter(valid_613761, JString, required = false,
                                 default = nil)
  if valid_613761 != nil:
    section.add "X-Amz-SignedHeaders", valid_613761
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613762: Call_GetCreateSnapshot_613746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613762.validator(path, query, header, formData, body)
  let scheme = call_613762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613762.url(scheme.get, call_613762.host, call_613762.base,
                         call_613762.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613762, url, valid)

proc call*(call_613763: Call_GetCreateSnapshot_613746; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_613764 = newJObject()
  add(query_613764, "KmsKeyId", newJString(KmsKeyId))
  add(query_613764, "CacheClusterId", newJString(CacheClusterId))
  add(query_613764, "Action", newJString(Action))
  add(query_613764, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613764, "Version", newJString(Version))
  add(query_613764, "SnapshotName", newJString(SnapshotName))
  result = call_613763.call(nil, query_613764, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_613746(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_613747,
    base: "/", url: url_GetCreateSnapshot_613748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_613805 = ref object of OpenApiRestCall_612658
proc url_PostDecreaseReplicaCount_613807(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDecreaseReplicaCount_613806(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613808 = query.getOrDefault("Action")
  valid_613808 = validateParameter(valid_613808, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_613808 != nil:
    section.add "Action", valid_613808
  var valid_613809 = query.getOrDefault("Version")
  valid_613809 = validateParameter(valid_613809, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613809 != nil:
    section.add "Version", valid_613809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613810 = header.getOrDefault("X-Amz-Signature")
  valid_613810 = validateParameter(valid_613810, JString, required = false,
                                 default = nil)
  if valid_613810 != nil:
    section.add "X-Amz-Signature", valid_613810
  var valid_613811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613811 = validateParameter(valid_613811, JString, required = false,
                                 default = nil)
  if valid_613811 != nil:
    section.add "X-Amz-Content-Sha256", valid_613811
  var valid_613812 = header.getOrDefault("X-Amz-Date")
  valid_613812 = validateParameter(valid_613812, JString, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "X-Amz-Date", valid_613812
  var valid_613813 = header.getOrDefault("X-Amz-Credential")
  valid_613813 = validateParameter(valid_613813, JString, required = false,
                                 default = nil)
  if valid_613813 != nil:
    section.add "X-Amz-Credential", valid_613813
  var valid_613814 = header.getOrDefault("X-Amz-Security-Token")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-Security-Token", valid_613814
  var valid_613815 = header.getOrDefault("X-Amz-Algorithm")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "X-Amz-Algorithm", valid_613815
  var valid_613816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "X-Amz-SignedHeaders", valid_613816
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_613817 = formData.getOrDefault("ReplicaConfiguration")
  valid_613817 = validateParameter(valid_613817, JArray, required = false,
                                 default = nil)
  if valid_613817 != nil:
    section.add "ReplicaConfiguration", valid_613817
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_613818 = formData.getOrDefault("ApplyImmediately")
  valid_613818 = validateParameter(valid_613818, JBool, required = true, default = nil)
  if valid_613818 != nil:
    section.add "ApplyImmediately", valid_613818
  var valid_613819 = formData.getOrDefault("ReplicasToRemove")
  valid_613819 = validateParameter(valid_613819, JArray, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "ReplicasToRemove", valid_613819
  var valid_613820 = formData.getOrDefault("NewReplicaCount")
  valid_613820 = validateParameter(valid_613820, JInt, required = false, default = nil)
  if valid_613820 != nil:
    section.add "NewReplicaCount", valid_613820
  var valid_613821 = formData.getOrDefault("ReplicationGroupId")
  valid_613821 = validateParameter(valid_613821, JString, required = true,
                                 default = nil)
  if valid_613821 != nil:
    section.add "ReplicationGroupId", valid_613821
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613822: Call_PostDecreaseReplicaCount_613805; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_613822.validator(path, query, header, formData, body)
  let scheme = call_613822.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613822.url(scheme.get, call_613822.host, call_613822.base,
                         call_613822.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613822, url, valid)

proc call*(call_613823: Call_PostDecreaseReplicaCount_613805;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_613824 = newJObject()
  var formData_613825 = newJObject()
  if ReplicaConfiguration != nil:
    formData_613825.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_613825, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_613825.add "ReplicasToRemove", ReplicasToRemove
  add(query_613824, "Action", newJString(Action))
  add(formData_613825, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_613824, "Version", newJString(Version))
  add(formData_613825, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_613823.call(nil, query_613824, nil, formData_613825, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_613805(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_613806, base: "/",
    url: url_PostDecreaseReplicaCount_613807, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_613785 = ref object of OpenApiRestCall_612658
proc url_GetDecreaseReplicaCount_613787(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDecreaseReplicaCount_613786(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_613788 = query.getOrDefault("NewReplicaCount")
  valid_613788 = validateParameter(valid_613788, JInt, required = false, default = nil)
  if valid_613788 != nil:
    section.add "NewReplicaCount", valid_613788
  var valid_613789 = query.getOrDefault("ReplicaConfiguration")
  valid_613789 = validateParameter(valid_613789, JArray, required = false,
                                 default = nil)
  if valid_613789 != nil:
    section.add "ReplicaConfiguration", valid_613789
  var valid_613790 = query.getOrDefault("Action")
  valid_613790 = validateParameter(valid_613790, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_613790 != nil:
    section.add "Action", valid_613790
  var valid_613791 = query.getOrDefault("ApplyImmediately")
  valid_613791 = validateParameter(valid_613791, JBool, required = true, default = nil)
  if valid_613791 != nil:
    section.add "ApplyImmediately", valid_613791
  var valid_613792 = query.getOrDefault("ReplicationGroupId")
  valid_613792 = validateParameter(valid_613792, JString, required = true,
                                 default = nil)
  if valid_613792 != nil:
    section.add "ReplicationGroupId", valid_613792
  var valid_613793 = query.getOrDefault("Version")
  valid_613793 = validateParameter(valid_613793, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613793 != nil:
    section.add "Version", valid_613793
  var valid_613794 = query.getOrDefault("ReplicasToRemove")
  valid_613794 = validateParameter(valid_613794, JArray, required = false,
                                 default = nil)
  if valid_613794 != nil:
    section.add "ReplicasToRemove", valid_613794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613795 = header.getOrDefault("X-Amz-Signature")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-Signature", valid_613795
  var valid_613796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "X-Amz-Content-Sha256", valid_613796
  var valid_613797 = header.getOrDefault("X-Amz-Date")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "X-Amz-Date", valid_613797
  var valid_613798 = header.getOrDefault("X-Amz-Credential")
  valid_613798 = validateParameter(valid_613798, JString, required = false,
                                 default = nil)
  if valid_613798 != nil:
    section.add "X-Amz-Credential", valid_613798
  var valid_613799 = header.getOrDefault("X-Amz-Security-Token")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "X-Amz-Security-Token", valid_613799
  var valid_613800 = header.getOrDefault("X-Amz-Algorithm")
  valid_613800 = validateParameter(valid_613800, JString, required = false,
                                 default = nil)
  if valid_613800 != nil:
    section.add "X-Amz-Algorithm", valid_613800
  var valid_613801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613801 = validateParameter(valid_613801, JString, required = false,
                                 default = nil)
  if valid_613801 != nil:
    section.add "X-Amz-SignedHeaders", valid_613801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613802: Call_GetDecreaseReplicaCount_613785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_613802.validator(path, query, header, formData, body)
  let scheme = call_613802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613802.url(scheme.get, call_613802.host, call_613802.base,
                         call_613802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613802, url, valid)

proc call*(call_613803: Call_GetDecreaseReplicaCount_613785;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_613804 = newJObject()
  add(query_613804, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_613804.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_613804, "Action", newJString(Action))
  add(query_613804, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_613804, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613804, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_613804.add "ReplicasToRemove", ReplicasToRemove
  result = call_613803.call(nil, query_613804, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_613785(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_613786, base: "/",
    url: url_GetDecreaseReplicaCount_613787, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_613843 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCacheCluster_613845(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheCluster_613844(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613846 = query.getOrDefault("Action")
  valid_613846 = validateParameter(valid_613846, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_613846 != nil:
    section.add "Action", valid_613846
  var valid_613847 = query.getOrDefault("Version")
  valid_613847 = validateParameter(valid_613847, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613847 != nil:
    section.add "Version", valid_613847
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613848 = header.getOrDefault("X-Amz-Signature")
  valid_613848 = validateParameter(valid_613848, JString, required = false,
                                 default = nil)
  if valid_613848 != nil:
    section.add "X-Amz-Signature", valid_613848
  var valid_613849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613849 = validateParameter(valid_613849, JString, required = false,
                                 default = nil)
  if valid_613849 != nil:
    section.add "X-Amz-Content-Sha256", valid_613849
  var valid_613850 = header.getOrDefault("X-Amz-Date")
  valid_613850 = validateParameter(valid_613850, JString, required = false,
                                 default = nil)
  if valid_613850 != nil:
    section.add "X-Amz-Date", valid_613850
  var valid_613851 = header.getOrDefault("X-Amz-Credential")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Credential", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-Security-Token")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-Security-Token", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Algorithm")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Algorithm", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-SignedHeaders", valid_613854
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_613855 = formData.getOrDefault("CacheClusterId")
  valid_613855 = validateParameter(valid_613855, JString, required = true,
                                 default = nil)
  if valid_613855 != nil:
    section.add "CacheClusterId", valid_613855
  var valid_613856 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_613856 = validateParameter(valid_613856, JString, required = false,
                                 default = nil)
  if valid_613856 != nil:
    section.add "FinalSnapshotIdentifier", valid_613856
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613857: Call_PostDeleteCacheCluster_613843; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_613857.validator(path, query, header, formData, body)
  let scheme = call_613857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613857.url(scheme.get, call_613857.host, call_613857.base,
                         call_613857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613857, url, valid)

proc call*(call_613858: Call_PostDeleteCacheCluster_613843; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613859 = newJObject()
  var formData_613860 = newJObject()
  add(formData_613860, "CacheClusterId", newJString(CacheClusterId))
  add(formData_613860, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_613859, "Action", newJString(Action))
  add(query_613859, "Version", newJString(Version))
  result = call_613858.call(nil, query_613859, nil, formData_613860, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_613843(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_613844, base: "/",
    url: url_PostDeleteCacheCluster_613845, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_613826 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCacheCluster_613828(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheCluster_613827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613829 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_613829 = validateParameter(valid_613829, JString, required = false,
                                 default = nil)
  if valid_613829 != nil:
    section.add "FinalSnapshotIdentifier", valid_613829
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_613830 = query.getOrDefault("CacheClusterId")
  valid_613830 = validateParameter(valid_613830, JString, required = true,
                                 default = nil)
  if valid_613830 != nil:
    section.add "CacheClusterId", valid_613830
  var valid_613831 = query.getOrDefault("Action")
  valid_613831 = validateParameter(valid_613831, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_613831 != nil:
    section.add "Action", valid_613831
  var valid_613832 = query.getOrDefault("Version")
  valid_613832 = validateParameter(valid_613832, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613832 != nil:
    section.add "Version", valid_613832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613833 = header.getOrDefault("X-Amz-Signature")
  valid_613833 = validateParameter(valid_613833, JString, required = false,
                                 default = nil)
  if valid_613833 != nil:
    section.add "X-Amz-Signature", valid_613833
  var valid_613834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "X-Amz-Content-Sha256", valid_613834
  var valid_613835 = header.getOrDefault("X-Amz-Date")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "X-Amz-Date", valid_613835
  var valid_613836 = header.getOrDefault("X-Amz-Credential")
  valid_613836 = validateParameter(valid_613836, JString, required = false,
                                 default = nil)
  if valid_613836 != nil:
    section.add "X-Amz-Credential", valid_613836
  var valid_613837 = header.getOrDefault("X-Amz-Security-Token")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "X-Amz-Security-Token", valid_613837
  var valid_613838 = header.getOrDefault("X-Amz-Algorithm")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "X-Amz-Algorithm", valid_613838
  var valid_613839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613839 = validateParameter(valid_613839, JString, required = false,
                                 default = nil)
  if valid_613839 != nil:
    section.add "X-Amz-SignedHeaders", valid_613839
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613840: Call_GetDeleteCacheCluster_613826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_613840.validator(path, query, header, formData, body)
  let scheme = call_613840.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613840.url(scheme.get, call_613840.host, call_613840.base,
                         call_613840.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613840, url, valid)

proc call*(call_613841: Call_GetDeleteCacheCluster_613826; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613842 = newJObject()
  add(query_613842, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_613842, "CacheClusterId", newJString(CacheClusterId))
  add(query_613842, "Action", newJString(Action))
  add(query_613842, "Version", newJString(Version))
  result = call_613841.call(nil, query_613842, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_613826(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_613827, base: "/",
    url: url_GetDeleteCacheCluster_613828, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_613877 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCacheParameterGroup_613879(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheParameterGroup_613878(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613880 = query.getOrDefault("Action")
  valid_613880 = validateParameter(valid_613880, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_613880 != nil:
    section.add "Action", valid_613880
  var valid_613881 = query.getOrDefault("Version")
  valid_613881 = validateParameter(valid_613881, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613881 != nil:
    section.add "Version", valid_613881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613882 = header.getOrDefault("X-Amz-Signature")
  valid_613882 = validateParameter(valid_613882, JString, required = false,
                                 default = nil)
  if valid_613882 != nil:
    section.add "X-Amz-Signature", valid_613882
  var valid_613883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613883 = validateParameter(valid_613883, JString, required = false,
                                 default = nil)
  if valid_613883 != nil:
    section.add "X-Amz-Content-Sha256", valid_613883
  var valid_613884 = header.getOrDefault("X-Amz-Date")
  valid_613884 = validateParameter(valid_613884, JString, required = false,
                                 default = nil)
  if valid_613884 != nil:
    section.add "X-Amz-Date", valid_613884
  var valid_613885 = header.getOrDefault("X-Amz-Credential")
  valid_613885 = validateParameter(valid_613885, JString, required = false,
                                 default = nil)
  if valid_613885 != nil:
    section.add "X-Amz-Credential", valid_613885
  var valid_613886 = header.getOrDefault("X-Amz-Security-Token")
  valid_613886 = validateParameter(valid_613886, JString, required = false,
                                 default = nil)
  if valid_613886 != nil:
    section.add "X-Amz-Security-Token", valid_613886
  var valid_613887 = header.getOrDefault("X-Amz-Algorithm")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "X-Amz-Algorithm", valid_613887
  var valid_613888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "X-Amz-SignedHeaders", valid_613888
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_613889 = formData.getOrDefault("CacheParameterGroupName")
  valid_613889 = validateParameter(valid_613889, JString, required = true,
                                 default = nil)
  if valid_613889 != nil:
    section.add "CacheParameterGroupName", valid_613889
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613890: Call_PostDeleteCacheParameterGroup_613877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_613890.validator(path, query, header, formData, body)
  let scheme = call_613890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613890.url(scheme.get, call_613890.host, call_613890.base,
                         call_613890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613890, url, valid)

proc call*(call_613891: Call_PostDeleteCacheParameterGroup_613877;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613892 = newJObject()
  var formData_613893 = newJObject()
  add(formData_613893, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_613892, "Action", newJString(Action))
  add(query_613892, "Version", newJString(Version))
  result = call_613891.call(nil, query_613892, nil, formData_613893, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_613877(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_613878, base: "/",
    url: url_PostDeleteCacheParameterGroup_613879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_613861 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCacheParameterGroup_613863(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheParameterGroup_613862(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_613864 = query.getOrDefault("CacheParameterGroupName")
  valid_613864 = validateParameter(valid_613864, JString, required = true,
                                 default = nil)
  if valid_613864 != nil:
    section.add "CacheParameterGroupName", valid_613864
  var valid_613865 = query.getOrDefault("Action")
  valid_613865 = validateParameter(valid_613865, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_613865 != nil:
    section.add "Action", valid_613865
  var valid_613866 = query.getOrDefault("Version")
  valid_613866 = validateParameter(valid_613866, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613866 != nil:
    section.add "Version", valid_613866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613867 = header.getOrDefault("X-Amz-Signature")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "X-Amz-Signature", valid_613867
  var valid_613868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613868 = validateParameter(valid_613868, JString, required = false,
                                 default = nil)
  if valid_613868 != nil:
    section.add "X-Amz-Content-Sha256", valid_613868
  var valid_613869 = header.getOrDefault("X-Amz-Date")
  valid_613869 = validateParameter(valid_613869, JString, required = false,
                                 default = nil)
  if valid_613869 != nil:
    section.add "X-Amz-Date", valid_613869
  var valid_613870 = header.getOrDefault("X-Amz-Credential")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-Credential", valid_613870
  var valid_613871 = header.getOrDefault("X-Amz-Security-Token")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = nil)
  if valid_613871 != nil:
    section.add "X-Amz-Security-Token", valid_613871
  var valid_613872 = header.getOrDefault("X-Amz-Algorithm")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "X-Amz-Algorithm", valid_613872
  var valid_613873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613873 = validateParameter(valid_613873, JString, required = false,
                                 default = nil)
  if valid_613873 != nil:
    section.add "X-Amz-SignedHeaders", valid_613873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613874: Call_GetDeleteCacheParameterGroup_613861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_613874.validator(path, query, header, formData, body)
  let scheme = call_613874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613874.url(scheme.get, call_613874.host, call_613874.base,
                         call_613874.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613874, url, valid)

proc call*(call_613875: Call_GetDeleteCacheParameterGroup_613861;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613876 = newJObject()
  add(query_613876, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_613876, "Action", newJString(Action))
  add(query_613876, "Version", newJString(Version))
  result = call_613875.call(nil, query_613876, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_613861(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_613862, base: "/",
    url: url_GetDeleteCacheParameterGroup_613863,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_613910 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCacheSecurityGroup_613912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_613911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613913 = query.getOrDefault("Action")
  valid_613913 = validateParameter(valid_613913, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_613913 != nil:
    section.add "Action", valid_613913
  var valid_613914 = query.getOrDefault("Version")
  valid_613914 = validateParameter(valid_613914, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613914 != nil:
    section.add "Version", valid_613914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613915 = header.getOrDefault("X-Amz-Signature")
  valid_613915 = validateParameter(valid_613915, JString, required = false,
                                 default = nil)
  if valid_613915 != nil:
    section.add "X-Amz-Signature", valid_613915
  var valid_613916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613916 = validateParameter(valid_613916, JString, required = false,
                                 default = nil)
  if valid_613916 != nil:
    section.add "X-Amz-Content-Sha256", valid_613916
  var valid_613917 = header.getOrDefault("X-Amz-Date")
  valid_613917 = validateParameter(valid_613917, JString, required = false,
                                 default = nil)
  if valid_613917 != nil:
    section.add "X-Amz-Date", valid_613917
  var valid_613918 = header.getOrDefault("X-Amz-Credential")
  valid_613918 = validateParameter(valid_613918, JString, required = false,
                                 default = nil)
  if valid_613918 != nil:
    section.add "X-Amz-Credential", valid_613918
  var valid_613919 = header.getOrDefault("X-Amz-Security-Token")
  valid_613919 = validateParameter(valid_613919, JString, required = false,
                                 default = nil)
  if valid_613919 != nil:
    section.add "X-Amz-Security-Token", valid_613919
  var valid_613920 = header.getOrDefault("X-Amz-Algorithm")
  valid_613920 = validateParameter(valid_613920, JString, required = false,
                                 default = nil)
  if valid_613920 != nil:
    section.add "X-Amz-Algorithm", valid_613920
  var valid_613921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613921 = validateParameter(valid_613921, JString, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "X-Amz-SignedHeaders", valid_613921
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_613922 = formData.getOrDefault("CacheSecurityGroupName")
  valid_613922 = validateParameter(valid_613922, JString, required = true,
                                 default = nil)
  if valid_613922 != nil:
    section.add "CacheSecurityGroupName", valid_613922
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613923: Call_PostDeleteCacheSecurityGroup_613910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_613923.validator(path, query, header, formData, body)
  let scheme = call_613923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613923.url(scheme.get, call_613923.host, call_613923.base,
                         call_613923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613923, url, valid)

proc call*(call_613924: Call_PostDeleteCacheSecurityGroup_613910;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613925 = newJObject()
  var formData_613926 = newJObject()
  add(formData_613926, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_613925, "Action", newJString(Action))
  add(query_613925, "Version", newJString(Version))
  result = call_613924.call(nil, query_613925, nil, formData_613926, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_613910(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_613911, base: "/",
    url: url_PostDeleteCacheSecurityGroup_613912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_613894 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCacheSecurityGroup_613896(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_613895(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613897 = query.getOrDefault("Action")
  valid_613897 = validateParameter(valid_613897, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_613897 != nil:
    section.add "Action", valid_613897
  var valid_613898 = query.getOrDefault("CacheSecurityGroupName")
  valid_613898 = validateParameter(valid_613898, JString, required = true,
                                 default = nil)
  if valid_613898 != nil:
    section.add "CacheSecurityGroupName", valid_613898
  var valid_613899 = query.getOrDefault("Version")
  valid_613899 = validateParameter(valid_613899, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613899 != nil:
    section.add "Version", valid_613899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613900 = header.getOrDefault("X-Amz-Signature")
  valid_613900 = validateParameter(valid_613900, JString, required = false,
                                 default = nil)
  if valid_613900 != nil:
    section.add "X-Amz-Signature", valid_613900
  var valid_613901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613901 = validateParameter(valid_613901, JString, required = false,
                                 default = nil)
  if valid_613901 != nil:
    section.add "X-Amz-Content-Sha256", valid_613901
  var valid_613902 = header.getOrDefault("X-Amz-Date")
  valid_613902 = validateParameter(valid_613902, JString, required = false,
                                 default = nil)
  if valid_613902 != nil:
    section.add "X-Amz-Date", valid_613902
  var valid_613903 = header.getOrDefault("X-Amz-Credential")
  valid_613903 = validateParameter(valid_613903, JString, required = false,
                                 default = nil)
  if valid_613903 != nil:
    section.add "X-Amz-Credential", valid_613903
  var valid_613904 = header.getOrDefault("X-Amz-Security-Token")
  valid_613904 = validateParameter(valid_613904, JString, required = false,
                                 default = nil)
  if valid_613904 != nil:
    section.add "X-Amz-Security-Token", valid_613904
  var valid_613905 = header.getOrDefault("X-Amz-Algorithm")
  valid_613905 = validateParameter(valid_613905, JString, required = false,
                                 default = nil)
  if valid_613905 != nil:
    section.add "X-Amz-Algorithm", valid_613905
  var valid_613906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613906 = validateParameter(valid_613906, JString, required = false,
                                 default = nil)
  if valid_613906 != nil:
    section.add "X-Amz-SignedHeaders", valid_613906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613907: Call_GetDeleteCacheSecurityGroup_613894; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_613907.validator(path, query, header, formData, body)
  let scheme = call_613907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613907.url(scheme.get, call_613907.host, call_613907.base,
                         call_613907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613907, url, valid)

proc call*(call_613908: Call_GetDeleteCacheSecurityGroup_613894;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_613909 = newJObject()
  add(query_613909, "Action", newJString(Action))
  add(query_613909, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_613909, "Version", newJString(Version))
  result = call_613908.call(nil, query_613909, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_613894(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_613895, base: "/",
    url: url_GetDeleteCacheSecurityGroup_613896,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_613943 = ref object of OpenApiRestCall_612658
proc url_PostDeleteCacheSubnetGroup_613945(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_613944(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613946 = query.getOrDefault("Action")
  valid_613946 = validateParameter(valid_613946, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_613946 != nil:
    section.add "Action", valid_613946
  var valid_613947 = query.getOrDefault("Version")
  valid_613947 = validateParameter(valid_613947, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613947 != nil:
    section.add "Version", valid_613947
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613948 = header.getOrDefault("X-Amz-Signature")
  valid_613948 = validateParameter(valid_613948, JString, required = false,
                                 default = nil)
  if valid_613948 != nil:
    section.add "X-Amz-Signature", valid_613948
  var valid_613949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613949 = validateParameter(valid_613949, JString, required = false,
                                 default = nil)
  if valid_613949 != nil:
    section.add "X-Amz-Content-Sha256", valid_613949
  var valid_613950 = header.getOrDefault("X-Amz-Date")
  valid_613950 = validateParameter(valid_613950, JString, required = false,
                                 default = nil)
  if valid_613950 != nil:
    section.add "X-Amz-Date", valid_613950
  var valid_613951 = header.getOrDefault("X-Amz-Credential")
  valid_613951 = validateParameter(valid_613951, JString, required = false,
                                 default = nil)
  if valid_613951 != nil:
    section.add "X-Amz-Credential", valid_613951
  var valid_613952 = header.getOrDefault("X-Amz-Security-Token")
  valid_613952 = validateParameter(valid_613952, JString, required = false,
                                 default = nil)
  if valid_613952 != nil:
    section.add "X-Amz-Security-Token", valid_613952
  var valid_613953 = header.getOrDefault("X-Amz-Algorithm")
  valid_613953 = validateParameter(valid_613953, JString, required = false,
                                 default = nil)
  if valid_613953 != nil:
    section.add "X-Amz-Algorithm", valid_613953
  var valid_613954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613954 = validateParameter(valid_613954, JString, required = false,
                                 default = nil)
  if valid_613954 != nil:
    section.add "X-Amz-SignedHeaders", valid_613954
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_613955 = formData.getOrDefault("CacheSubnetGroupName")
  valid_613955 = validateParameter(valid_613955, JString, required = true,
                                 default = nil)
  if valid_613955 != nil:
    section.add "CacheSubnetGroupName", valid_613955
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613956: Call_PostDeleteCacheSubnetGroup_613943; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_613956.validator(path, query, header, formData, body)
  let scheme = call_613956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613956.url(scheme.get, call_613956.host, call_613956.base,
                         call_613956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613956, url, valid)

proc call*(call_613957: Call_PostDeleteCacheSubnetGroup_613943;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613958 = newJObject()
  var formData_613959 = newJObject()
  add(formData_613959, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613958, "Action", newJString(Action))
  add(query_613958, "Version", newJString(Version))
  result = call_613957.call(nil, query_613958, nil, formData_613959, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_613943(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_613944, base: "/",
    url: url_PostDeleteCacheSubnetGroup_613945,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_613927 = ref object of OpenApiRestCall_612658
proc url_GetDeleteCacheSubnetGroup_613929(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_613928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613930 = query.getOrDefault("Action")
  valid_613930 = validateParameter(valid_613930, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_613930 != nil:
    section.add "Action", valid_613930
  var valid_613931 = query.getOrDefault("CacheSubnetGroupName")
  valid_613931 = validateParameter(valid_613931, JString, required = true,
                                 default = nil)
  if valid_613931 != nil:
    section.add "CacheSubnetGroupName", valid_613931
  var valid_613932 = query.getOrDefault("Version")
  valid_613932 = validateParameter(valid_613932, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613932 != nil:
    section.add "Version", valid_613932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613933 = header.getOrDefault("X-Amz-Signature")
  valid_613933 = validateParameter(valid_613933, JString, required = false,
                                 default = nil)
  if valid_613933 != nil:
    section.add "X-Amz-Signature", valid_613933
  var valid_613934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613934 = validateParameter(valid_613934, JString, required = false,
                                 default = nil)
  if valid_613934 != nil:
    section.add "X-Amz-Content-Sha256", valid_613934
  var valid_613935 = header.getOrDefault("X-Amz-Date")
  valid_613935 = validateParameter(valid_613935, JString, required = false,
                                 default = nil)
  if valid_613935 != nil:
    section.add "X-Amz-Date", valid_613935
  var valid_613936 = header.getOrDefault("X-Amz-Credential")
  valid_613936 = validateParameter(valid_613936, JString, required = false,
                                 default = nil)
  if valid_613936 != nil:
    section.add "X-Amz-Credential", valid_613936
  var valid_613937 = header.getOrDefault("X-Amz-Security-Token")
  valid_613937 = validateParameter(valid_613937, JString, required = false,
                                 default = nil)
  if valid_613937 != nil:
    section.add "X-Amz-Security-Token", valid_613937
  var valid_613938 = header.getOrDefault("X-Amz-Algorithm")
  valid_613938 = validateParameter(valid_613938, JString, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "X-Amz-Algorithm", valid_613938
  var valid_613939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "X-Amz-SignedHeaders", valid_613939
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613940: Call_GetDeleteCacheSubnetGroup_613927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_613940.validator(path, query, header, formData, body)
  let scheme = call_613940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613940.url(scheme.get, call_613940.host, call_613940.base,
                         call_613940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613940, url, valid)

proc call*(call_613941: Call_GetDeleteCacheSubnetGroup_613927;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_613942 = newJObject()
  add(query_613942, "Action", newJString(Action))
  add(query_613942, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_613942, "Version", newJString(Version))
  result = call_613941.call(nil, query_613942, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_613927(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_613928, base: "/",
    url: url_GetDeleteCacheSubnetGroup_613929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_613978 = ref object of OpenApiRestCall_612658
proc url_PostDeleteReplicationGroup_613980(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReplicationGroup_613979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613981 = query.getOrDefault("Action")
  valid_613981 = validateParameter(valid_613981, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_613981 != nil:
    section.add "Action", valid_613981
  var valid_613982 = query.getOrDefault("Version")
  valid_613982 = validateParameter(valid_613982, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613982 != nil:
    section.add "Version", valid_613982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613983 = header.getOrDefault("X-Amz-Signature")
  valid_613983 = validateParameter(valid_613983, JString, required = false,
                                 default = nil)
  if valid_613983 != nil:
    section.add "X-Amz-Signature", valid_613983
  var valid_613984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613984 = validateParameter(valid_613984, JString, required = false,
                                 default = nil)
  if valid_613984 != nil:
    section.add "X-Amz-Content-Sha256", valid_613984
  var valid_613985 = header.getOrDefault("X-Amz-Date")
  valid_613985 = validateParameter(valid_613985, JString, required = false,
                                 default = nil)
  if valid_613985 != nil:
    section.add "X-Amz-Date", valid_613985
  var valid_613986 = header.getOrDefault("X-Amz-Credential")
  valid_613986 = validateParameter(valid_613986, JString, required = false,
                                 default = nil)
  if valid_613986 != nil:
    section.add "X-Amz-Credential", valid_613986
  var valid_613987 = header.getOrDefault("X-Amz-Security-Token")
  valid_613987 = validateParameter(valid_613987, JString, required = false,
                                 default = nil)
  if valid_613987 != nil:
    section.add "X-Amz-Security-Token", valid_613987
  var valid_613988 = header.getOrDefault("X-Amz-Algorithm")
  valid_613988 = validateParameter(valid_613988, JString, required = false,
                                 default = nil)
  if valid_613988 != nil:
    section.add "X-Amz-Algorithm", valid_613988
  var valid_613989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613989 = validateParameter(valid_613989, JString, required = false,
                                 default = nil)
  if valid_613989 != nil:
    section.add "X-Amz-SignedHeaders", valid_613989
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_613990 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_613990 = validateParameter(valid_613990, JString, required = false,
                                 default = nil)
  if valid_613990 != nil:
    section.add "FinalSnapshotIdentifier", valid_613990
  var valid_613991 = formData.getOrDefault("RetainPrimaryCluster")
  valid_613991 = validateParameter(valid_613991, JBool, required = false, default = nil)
  if valid_613991 != nil:
    section.add "RetainPrimaryCluster", valid_613991
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_613992 = formData.getOrDefault("ReplicationGroupId")
  valid_613992 = validateParameter(valid_613992, JString, required = true,
                                 default = nil)
  if valid_613992 != nil:
    section.add "ReplicationGroupId", valid_613992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613993: Call_PostDeleteReplicationGroup_613978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613993.validator(path, query, header, formData, body)
  let scheme = call_613993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613993.url(scheme.get, call_613993.host, call_613993.base,
                         call_613993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613993, url, valid)

proc call*(call_613994: Call_PostDeleteReplicationGroup_613978;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_613995 = newJObject()
  var formData_613996 = newJObject()
  add(formData_613996, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_613995, "Action", newJString(Action))
  add(formData_613996, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_613995, "Version", newJString(Version))
  add(formData_613996, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_613994.call(nil, query_613995, nil, formData_613996, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_613978(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_613979, base: "/",
    url: url_PostDeleteReplicationGroup_613980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_613960 = ref object of OpenApiRestCall_612658
proc url_GetDeleteReplicationGroup_613962(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReplicationGroup_613961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_613963 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_613963 = validateParameter(valid_613963, JString, required = false,
                                 default = nil)
  if valid_613963 != nil:
    section.add "FinalSnapshotIdentifier", valid_613963
  var valid_613964 = query.getOrDefault("Action")
  valid_613964 = validateParameter(valid_613964, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_613964 != nil:
    section.add "Action", valid_613964
  var valid_613965 = query.getOrDefault("ReplicationGroupId")
  valid_613965 = validateParameter(valid_613965, JString, required = true,
                                 default = nil)
  if valid_613965 != nil:
    section.add "ReplicationGroupId", valid_613965
  var valid_613966 = query.getOrDefault("Version")
  valid_613966 = validateParameter(valid_613966, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_613966 != nil:
    section.add "Version", valid_613966
  var valid_613967 = query.getOrDefault("RetainPrimaryCluster")
  valid_613967 = validateParameter(valid_613967, JBool, required = false, default = nil)
  if valid_613967 != nil:
    section.add "RetainPrimaryCluster", valid_613967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613968 = header.getOrDefault("X-Amz-Signature")
  valid_613968 = validateParameter(valid_613968, JString, required = false,
                                 default = nil)
  if valid_613968 != nil:
    section.add "X-Amz-Signature", valid_613968
  var valid_613969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613969 = validateParameter(valid_613969, JString, required = false,
                                 default = nil)
  if valid_613969 != nil:
    section.add "X-Amz-Content-Sha256", valid_613969
  var valid_613970 = header.getOrDefault("X-Amz-Date")
  valid_613970 = validateParameter(valid_613970, JString, required = false,
                                 default = nil)
  if valid_613970 != nil:
    section.add "X-Amz-Date", valid_613970
  var valid_613971 = header.getOrDefault("X-Amz-Credential")
  valid_613971 = validateParameter(valid_613971, JString, required = false,
                                 default = nil)
  if valid_613971 != nil:
    section.add "X-Amz-Credential", valid_613971
  var valid_613972 = header.getOrDefault("X-Amz-Security-Token")
  valid_613972 = validateParameter(valid_613972, JString, required = false,
                                 default = nil)
  if valid_613972 != nil:
    section.add "X-Amz-Security-Token", valid_613972
  var valid_613973 = header.getOrDefault("X-Amz-Algorithm")
  valid_613973 = validateParameter(valid_613973, JString, required = false,
                                 default = nil)
  if valid_613973 != nil:
    section.add "X-Amz-Algorithm", valid_613973
  var valid_613974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613974 = validateParameter(valid_613974, JString, required = false,
                                 default = nil)
  if valid_613974 != nil:
    section.add "X-Amz-SignedHeaders", valid_613974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613975: Call_GetDeleteReplicationGroup_613960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_613975.validator(path, query, header, formData, body)
  let scheme = call_613975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613975.url(scheme.get, call_613975.host, call_613975.base,
                         call_613975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613975, url, valid)

proc call*(call_613976: Call_GetDeleteReplicationGroup_613960;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_613977 = newJObject()
  add(query_613977, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_613977, "Action", newJString(Action))
  add(query_613977, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_613977, "Version", newJString(Version))
  add(query_613977, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_613976.call(nil, query_613977, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_613960(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_613961, base: "/",
    url: url_GetDeleteReplicationGroup_613962,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_614013 = ref object of OpenApiRestCall_612658
proc url_PostDeleteSnapshot_614015(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSnapshot_614014(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614016 = query.getOrDefault("Action")
  valid_614016 = validateParameter(valid_614016, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_614016 != nil:
    section.add "Action", valid_614016
  var valid_614017 = query.getOrDefault("Version")
  valid_614017 = validateParameter(valid_614017, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614017 != nil:
    section.add "Version", valid_614017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614018 = header.getOrDefault("X-Amz-Signature")
  valid_614018 = validateParameter(valid_614018, JString, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "X-Amz-Signature", valid_614018
  var valid_614019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614019 = validateParameter(valid_614019, JString, required = false,
                                 default = nil)
  if valid_614019 != nil:
    section.add "X-Amz-Content-Sha256", valid_614019
  var valid_614020 = header.getOrDefault("X-Amz-Date")
  valid_614020 = validateParameter(valid_614020, JString, required = false,
                                 default = nil)
  if valid_614020 != nil:
    section.add "X-Amz-Date", valid_614020
  var valid_614021 = header.getOrDefault("X-Amz-Credential")
  valid_614021 = validateParameter(valid_614021, JString, required = false,
                                 default = nil)
  if valid_614021 != nil:
    section.add "X-Amz-Credential", valid_614021
  var valid_614022 = header.getOrDefault("X-Amz-Security-Token")
  valid_614022 = validateParameter(valid_614022, JString, required = false,
                                 default = nil)
  if valid_614022 != nil:
    section.add "X-Amz-Security-Token", valid_614022
  var valid_614023 = header.getOrDefault("X-Amz-Algorithm")
  valid_614023 = validateParameter(valid_614023, JString, required = false,
                                 default = nil)
  if valid_614023 != nil:
    section.add "X-Amz-Algorithm", valid_614023
  var valid_614024 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614024 = validateParameter(valid_614024, JString, required = false,
                                 default = nil)
  if valid_614024 != nil:
    section.add "X-Amz-SignedHeaders", valid_614024
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_614025 = formData.getOrDefault("SnapshotName")
  valid_614025 = validateParameter(valid_614025, JString, required = true,
                                 default = nil)
  if valid_614025 != nil:
    section.add "SnapshotName", valid_614025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614026: Call_PostDeleteSnapshot_614013; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614026.validator(path, query, header, formData, body)
  let scheme = call_614026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614026.url(scheme.get, call_614026.host, call_614026.base,
                         call_614026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614026, url, valid)

proc call*(call_614027: Call_PostDeleteSnapshot_614013; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614028 = newJObject()
  var formData_614029 = newJObject()
  add(formData_614029, "SnapshotName", newJString(SnapshotName))
  add(query_614028, "Action", newJString(Action))
  add(query_614028, "Version", newJString(Version))
  result = call_614027.call(nil, query_614028, nil, formData_614029, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_614013(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_614014, base: "/",
    url: url_PostDeleteSnapshot_614015, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_613997 = ref object of OpenApiRestCall_612658
proc url_GetDeleteSnapshot_613999(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSnapshot_613998(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  var valid_614000 = query.getOrDefault("Action")
  valid_614000 = validateParameter(valid_614000, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_614000 != nil:
    section.add "Action", valid_614000
  var valid_614001 = query.getOrDefault("Version")
  valid_614001 = validateParameter(valid_614001, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614001 != nil:
    section.add "Version", valid_614001
  var valid_614002 = query.getOrDefault("SnapshotName")
  valid_614002 = validateParameter(valid_614002, JString, required = true,
                                 default = nil)
  if valid_614002 != nil:
    section.add "SnapshotName", valid_614002
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614003 = header.getOrDefault("X-Amz-Signature")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "X-Amz-Signature", valid_614003
  var valid_614004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614004 = validateParameter(valid_614004, JString, required = false,
                                 default = nil)
  if valid_614004 != nil:
    section.add "X-Amz-Content-Sha256", valid_614004
  var valid_614005 = header.getOrDefault("X-Amz-Date")
  valid_614005 = validateParameter(valid_614005, JString, required = false,
                                 default = nil)
  if valid_614005 != nil:
    section.add "X-Amz-Date", valid_614005
  var valid_614006 = header.getOrDefault("X-Amz-Credential")
  valid_614006 = validateParameter(valid_614006, JString, required = false,
                                 default = nil)
  if valid_614006 != nil:
    section.add "X-Amz-Credential", valid_614006
  var valid_614007 = header.getOrDefault("X-Amz-Security-Token")
  valid_614007 = validateParameter(valid_614007, JString, required = false,
                                 default = nil)
  if valid_614007 != nil:
    section.add "X-Amz-Security-Token", valid_614007
  var valid_614008 = header.getOrDefault("X-Amz-Algorithm")
  valid_614008 = validateParameter(valid_614008, JString, required = false,
                                 default = nil)
  if valid_614008 != nil:
    section.add "X-Amz-Algorithm", valid_614008
  var valid_614009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614009 = validateParameter(valid_614009, JString, required = false,
                                 default = nil)
  if valid_614009 != nil:
    section.add "X-Amz-SignedHeaders", valid_614009
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614010: Call_GetDeleteSnapshot_613997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614010.validator(path, query, header, formData, body)
  let scheme = call_614010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614010.url(scheme.get, call_614010.host, call_614010.base,
                         call_614010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614010, url, valid)

proc call*(call_614011: Call_GetDeleteSnapshot_613997; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_614012 = newJObject()
  add(query_614012, "Action", newJString(Action))
  add(query_614012, "Version", newJString(Version))
  add(query_614012, "SnapshotName", newJString(SnapshotName))
  result = call_614011.call(nil, query_614012, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_613997(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_613998,
    base: "/", url: url_GetDeleteSnapshot_613999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_614050 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheClusters_614052(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheClusters_614051(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614053 = query.getOrDefault("Action")
  valid_614053 = validateParameter(valid_614053, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_614053 != nil:
    section.add "Action", valid_614053
  var valid_614054 = query.getOrDefault("Version")
  valid_614054 = validateParameter(valid_614054, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614054 != nil:
    section.add "Version", valid_614054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614055 = header.getOrDefault("X-Amz-Signature")
  valid_614055 = validateParameter(valid_614055, JString, required = false,
                                 default = nil)
  if valid_614055 != nil:
    section.add "X-Amz-Signature", valid_614055
  var valid_614056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "X-Amz-Content-Sha256", valid_614056
  var valid_614057 = header.getOrDefault("X-Amz-Date")
  valid_614057 = validateParameter(valid_614057, JString, required = false,
                                 default = nil)
  if valid_614057 != nil:
    section.add "X-Amz-Date", valid_614057
  var valid_614058 = header.getOrDefault("X-Amz-Credential")
  valid_614058 = validateParameter(valid_614058, JString, required = false,
                                 default = nil)
  if valid_614058 != nil:
    section.add "X-Amz-Credential", valid_614058
  var valid_614059 = header.getOrDefault("X-Amz-Security-Token")
  valid_614059 = validateParameter(valid_614059, JString, required = false,
                                 default = nil)
  if valid_614059 != nil:
    section.add "X-Amz-Security-Token", valid_614059
  var valid_614060 = header.getOrDefault("X-Amz-Algorithm")
  valid_614060 = validateParameter(valid_614060, JString, required = false,
                                 default = nil)
  if valid_614060 != nil:
    section.add "X-Amz-Algorithm", valid_614060
  var valid_614061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614061 = validateParameter(valid_614061, JString, required = false,
                                 default = nil)
  if valid_614061 != nil:
    section.add "X-Amz-SignedHeaders", valid_614061
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_614062 = formData.getOrDefault("CacheClusterId")
  valid_614062 = validateParameter(valid_614062, JString, required = false,
                                 default = nil)
  if valid_614062 != nil:
    section.add "CacheClusterId", valid_614062
  var valid_614063 = formData.getOrDefault("MaxRecords")
  valid_614063 = validateParameter(valid_614063, JInt, required = false, default = nil)
  if valid_614063 != nil:
    section.add "MaxRecords", valid_614063
  var valid_614064 = formData.getOrDefault("Marker")
  valid_614064 = validateParameter(valid_614064, JString, required = false,
                                 default = nil)
  if valid_614064 != nil:
    section.add "Marker", valid_614064
  var valid_614065 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_614065 = validateParameter(valid_614065, JBool, required = false, default = nil)
  if valid_614065 != nil:
    section.add "ShowCacheNodeInfo", valid_614065
  var valid_614066 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_614066 = validateParameter(valid_614066, JBool, required = false, default = nil)
  if valid_614066 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_614066
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614067: Call_PostDescribeCacheClusters_614050; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_614067.validator(path, query, header, formData, body)
  let scheme = call_614067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614067.url(scheme.get, call_614067.host, call_614067.base,
                         call_614067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614067, url, valid)

proc call*(call_614068: Call_PostDescribeCacheClusters_614050;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_614069 = newJObject()
  var formData_614070 = newJObject()
  add(formData_614070, "CacheClusterId", newJString(CacheClusterId))
  add(formData_614070, "MaxRecords", newJInt(MaxRecords))
  add(formData_614070, "Marker", newJString(Marker))
  add(formData_614070, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_614069, "Action", newJString(Action))
  add(query_614069, "Version", newJString(Version))
  add(formData_614070, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_614068.call(nil, query_614069, nil, formData_614070, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_614050(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_614051, base: "/",
    url: url_PostDescribeCacheClusters_614052,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_614030 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheClusters_614032(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheClusters_614031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614033 = query.getOrDefault("Marker")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "Marker", valid_614033
  var valid_614034 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_614034 = validateParameter(valid_614034, JBool, required = false, default = nil)
  if valid_614034 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_614034
  var valid_614035 = query.getOrDefault("CacheClusterId")
  valid_614035 = validateParameter(valid_614035, JString, required = false,
                                 default = nil)
  if valid_614035 != nil:
    section.add "CacheClusterId", valid_614035
  var valid_614036 = query.getOrDefault("Action")
  valid_614036 = validateParameter(valid_614036, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_614036 != nil:
    section.add "Action", valid_614036
  var valid_614037 = query.getOrDefault("ShowCacheNodeInfo")
  valid_614037 = validateParameter(valid_614037, JBool, required = false, default = nil)
  if valid_614037 != nil:
    section.add "ShowCacheNodeInfo", valid_614037
  var valid_614038 = query.getOrDefault("Version")
  valid_614038 = validateParameter(valid_614038, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614038 != nil:
    section.add "Version", valid_614038
  var valid_614039 = query.getOrDefault("MaxRecords")
  valid_614039 = validateParameter(valid_614039, JInt, required = false, default = nil)
  if valid_614039 != nil:
    section.add "MaxRecords", valid_614039
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614040 = header.getOrDefault("X-Amz-Signature")
  valid_614040 = validateParameter(valid_614040, JString, required = false,
                                 default = nil)
  if valid_614040 != nil:
    section.add "X-Amz-Signature", valid_614040
  var valid_614041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614041 = validateParameter(valid_614041, JString, required = false,
                                 default = nil)
  if valid_614041 != nil:
    section.add "X-Amz-Content-Sha256", valid_614041
  var valid_614042 = header.getOrDefault("X-Amz-Date")
  valid_614042 = validateParameter(valid_614042, JString, required = false,
                                 default = nil)
  if valid_614042 != nil:
    section.add "X-Amz-Date", valid_614042
  var valid_614043 = header.getOrDefault("X-Amz-Credential")
  valid_614043 = validateParameter(valid_614043, JString, required = false,
                                 default = nil)
  if valid_614043 != nil:
    section.add "X-Amz-Credential", valid_614043
  var valid_614044 = header.getOrDefault("X-Amz-Security-Token")
  valid_614044 = validateParameter(valid_614044, JString, required = false,
                                 default = nil)
  if valid_614044 != nil:
    section.add "X-Amz-Security-Token", valid_614044
  var valid_614045 = header.getOrDefault("X-Amz-Algorithm")
  valid_614045 = validateParameter(valid_614045, JString, required = false,
                                 default = nil)
  if valid_614045 != nil:
    section.add "X-Amz-Algorithm", valid_614045
  var valid_614046 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "X-Amz-SignedHeaders", valid_614046
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614047: Call_GetDescribeCacheClusters_614030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_614047.validator(path, query, header, formData, body)
  let scheme = call_614047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614047.url(scheme.get, call_614047.host, call_614047.base,
                         call_614047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614047, url, valid)

proc call*(call_614048: Call_GetDescribeCacheClusters_614030; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614049 = newJObject()
  add(query_614049, "Marker", newJString(Marker))
  add(query_614049, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_614049, "CacheClusterId", newJString(CacheClusterId))
  add(query_614049, "Action", newJString(Action))
  add(query_614049, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_614049, "Version", newJString(Version))
  add(query_614049, "MaxRecords", newJInt(MaxRecords))
  result = call_614048.call(nil, query_614049, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_614030(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_614031, base: "/",
    url: url_GetDescribeCacheClusters_614032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_614092 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheEngineVersions_614094(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheEngineVersions_614093(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614095 = query.getOrDefault("Action")
  valid_614095 = validateParameter(valid_614095, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_614095 != nil:
    section.add "Action", valid_614095
  var valid_614096 = query.getOrDefault("Version")
  valid_614096 = validateParameter(valid_614096, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614096 != nil:
    section.add "Version", valid_614096
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614097 = header.getOrDefault("X-Amz-Signature")
  valid_614097 = validateParameter(valid_614097, JString, required = false,
                                 default = nil)
  if valid_614097 != nil:
    section.add "X-Amz-Signature", valid_614097
  var valid_614098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614098 = validateParameter(valid_614098, JString, required = false,
                                 default = nil)
  if valid_614098 != nil:
    section.add "X-Amz-Content-Sha256", valid_614098
  var valid_614099 = header.getOrDefault("X-Amz-Date")
  valid_614099 = validateParameter(valid_614099, JString, required = false,
                                 default = nil)
  if valid_614099 != nil:
    section.add "X-Amz-Date", valid_614099
  var valid_614100 = header.getOrDefault("X-Amz-Credential")
  valid_614100 = validateParameter(valid_614100, JString, required = false,
                                 default = nil)
  if valid_614100 != nil:
    section.add "X-Amz-Credential", valid_614100
  var valid_614101 = header.getOrDefault("X-Amz-Security-Token")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-Security-Token", valid_614101
  var valid_614102 = header.getOrDefault("X-Amz-Algorithm")
  valid_614102 = validateParameter(valid_614102, JString, required = false,
                                 default = nil)
  if valid_614102 != nil:
    section.add "X-Amz-Algorithm", valid_614102
  var valid_614103 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "X-Amz-SignedHeaders", valid_614103
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_614104 = formData.getOrDefault("DefaultOnly")
  valid_614104 = validateParameter(valid_614104, JBool, required = false, default = nil)
  if valid_614104 != nil:
    section.add "DefaultOnly", valid_614104
  var valid_614105 = formData.getOrDefault("MaxRecords")
  valid_614105 = validateParameter(valid_614105, JInt, required = false, default = nil)
  if valid_614105 != nil:
    section.add "MaxRecords", valid_614105
  var valid_614106 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_614106 = validateParameter(valid_614106, JString, required = false,
                                 default = nil)
  if valid_614106 != nil:
    section.add "CacheParameterGroupFamily", valid_614106
  var valid_614107 = formData.getOrDefault("EngineVersion")
  valid_614107 = validateParameter(valid_614107, JString, required = false,
                                 default = nil)
  if valid_614107 != nil:
    section.add "EngineVersion", valid_614107
  var valid_614108 = formData.getOrDefault("Marker")
  valid_614108 = validateParameter(valid_614108, JString, required = false,
                                 default = nil)
  if valid_614108 != nil:
    section.add "Marker", valid_614108
  var valid_614109 = formData.getOrDefault("Engine")
  valid_614109 = validateParameter(valid_614109, JString, required = false,
                                 default = nil)
  if valid_614109 != nil:
    section.add "Engine", valid_614109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614110: Call_PostDescribeCacheEngineVersions_614092;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_614110.validator(path, query, header, formData, body)
  let scheme = call_614110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614110.url(scheme.get, call_614110.host, call_614110.base,
                         call_614110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614110, url, valid)

proc call*(call_614111: Call_PostDescribeCacheEngineVersions_614092;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614112 = newJObject()
  var formData_614113 = newJObject()
  add(formData_614113, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_614113, "MaxRecords", newJInt(MaxRecords))
  add(formData_614113, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_614113, "EngineVersion", newJString(EngineVersion))
  add(formData_614113, "Marker", newJString(Marker))
  add(formData_614113, "Engine", newJString(Engine))
  add(query_614112, "Action", newJString(Action))
  add(query_614112, "Version", newJString(Version))
  result = call_614111.call(nil, query_614112, nil, formData_614113, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_614092(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_614093, base: "/",
    url: url_PostDescribeCacheEngineVersions_614094,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_614071 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheEngineVersions_614073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheEngineVersions_614072(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_614074 = query.getOrDefault("Marker")
  valid_614074 = validateParameter(valid_614074, JString, required = false,
                                 default = nil)
  if valid_614074 != nil:
    section.add "Marker", valid_614074
  var valid_614075 = query.getOrDefault("Engine")
  valid_614075 = validateParameter(valid_614075, JString, required = false,
                                 default = nil)
  if valid_614075 != nil:
    section.add "Engine", valid_614075
  var valid_614076 = query.getOrDefault("CacheParameterGroupFamily")
  valid_614076 = validateParameter(valid_614076, JString, required = false,
                                 default = nil)
  if valid_614076 != nil:
    section.add "CacheParameterGroupFamily", valid_614076
  var valid_614077 = query.getOrDefault("EngineVersion")
  valid_614077 = validateParameter(valid_614077, JString, required = false,
                                 default = nil)
  if valid_614077 != nil:
    section.add "EngineVersion", valid_614077
  var valid_614078 = query.getOrDefault("Action")
  valid_614078 = validateParameter(valid_614078, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_614078 != nil:
    section.add "Action", valid_614078
  var valid_614079 = query.getOrDefault("Version")
  valid_614079 = validateParameter(valid_614079, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614079 != nil:
    section.add "Version", valid_614079
  var valid_614080 = query.getOrDefault("MaxRecords")
  valid_614080 = validateParameter(valid_614080, JInt, required = false, default = nil)
  if valid_614080 != nil:
    section.add "MaxRecords", valid_614080
  var valid_614081 = query.getOrDefault("DefaultOnly")
  valid_614081 = validateParameter(valid_614081, JBool, required = false, default = nil)
  if valid_614081 != nil:
    section.add "DefaultOnly", valid_614081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614082 = header.getOrDefault("X-Amz-Signature")
  valid_614082 = validateParameter(valid_614082, JString, required = false,
                                 default = nil)
  if valid_614082 != nil:
    section.add "X-Amz-Signature", valid_614082
  var valid_614083 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614083 = validateParameter(valid_614083, JString, required = false,
                                 default = nil)
  if valid_614083 != nil:
    section.add "X-Amz-Content-Sha256", valid_614083
  var valid_614084 = header.getOrDefault("X-Amz-Date")
  valid_614084 = validateParameter(valid_614084, JString, required = false,
                                 default = nil)
  if valid_614084 != nil:
    section.add "X-Amz-Date", valid_614084
  var valid_614085 = header.getOrDefault("X-Amz-Credential")
  valid_614085 = validateParameter(valid_614085, JString, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "X-Amz-Credential", valid_614085
  var valid_614086 = header.getOrDefault("X-Amz-Security-Token")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Security-Token", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-Algorithm")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-Algorithm", valid_614087
  var valid_614088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614088 = validateParameter(valid_614088, JString, required = false,
                                 default = nil)
  if valid_614088 != nil:
    section.add "X-Amz-SignedHeaders", valid_614088
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614089: Call_GetDescribeCacheEngineVersions_614071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_614089.validator(path, query, header, formData, body)
  let scheme = call_614089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614089.url(scheme.get, call_614089.host, call_614089.base,
                         call_614089.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614089, url, valid)

proc call*(call_614090: Call_GetDescribeCacheEngineVersions_614071;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_614091 = newJObject()
  add(query_614091, "Marker", newJString(Marker))
  add(query_614091, "Engine", newJString(Engine))
  add(query_614091, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_614091, "EngineVersion", newJString(EngineVersion))
  add(query_614091, "Action", newJString(Action))
  add(query_614091, "Version", newJString(Version))
  add(query_614091, "MaxRecords", newJInt(MaxRecords))
  add(query_614091, "DefaultOnly", newJBool(DefaultOnly))
  result = call_614090.call(nil, query_614091, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_614071(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_614072, base: "/",
    url: url_GetDescribeCacheEngineVersions_614073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_614132 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheParameterGroups_614134(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameterGroups_614133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614135 = query.getOrDefault("Action")
  valid_614135 = validateParameter(valid_614135, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_614135 != nil:
    section.add "Action", valid_614135
  var valid_614136 = query.getOrDefault("Version")
  valid_614136 = validateParameter(valid_614136, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614136 != nil:
    section.add "Version", valid_614136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614137 = header.getOrDefault("X-Amz-Signature")
  valid_614137 = validateParameter(valid_614137, JString, required = false,
                                 default = nil)
  if valid_614137 != nil:
    section.add "X-Amz-Signature", valid_614137
  var valid_614138 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614138 = validateParameter(valid_614138, JString, required = false,
                                 default = nil)
  if valid_614138 != nil:
    section.add "X-Amz-Content-Sha256", valid_614138
  var valid_614139 = header.getOrDefault("X-Amz-Date")
  valid_614139 = validateParameter(valid_614139, JString, required = false,
                                 default = nil)
  if valid_614139 != nil:
    section.add "X-Amz-Date", valid_614139
  var valid_614140 = header.getOrDefault("X-Amz-Credential")
  valid_614140 = validateParameter(valid_614140, JString, required = false,
                                 default = nil)
  if valid_614140 != nil:
    section.add "X-Amz-Credential", valid_614140
  var valid_614141 = header.getOrDefault("X-Amz-Security-Token")
  valid_614141 = validateParameter(valid_614141, JString, required = false,
                                 default = nil)
  if valid_614141 != nil:
    section.add "X-Amz-Security-Token", valid_614141
  var valid_614142 = header.getOrDefault("X-Amz-Algorithm")
  valid_614142 = validateParameter(valid_614142, JString, required = false,
                                 default = nil)
  if valid_614142 != nil:
    section.add "X-Amz-Algorithm", valid_614142
  var valid_614143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614143 = validateParameter(valid_614143, JString, required = false,
                                 default = nil)
  if valid_614143 != nil:
    section.add "X-Amz-SignedHeaders", valid_614143
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_614144 = formData.getOrDefault("MaxRecords")
  valid_614144 = validateParameter(valid_614144, JInt, required = false, default = nil)
  if valid_614144 != nil:
    section.add "MaxRecords", valid_614144
  var valid_614145 = formData.getOrDefault("Marker")
  valid_614145 = validateParameter(valid_614145, JString, required = false,
                                 default = nil)
  if valid_614145 != nil:
    section.add "Marker", valid_614145
  var valid_614146 = formData.getOrDefault("CacheParameterGroupName")
  valid_614146 = validateParameter(valid_614146, JString, required = false,
                                 default = nil)
  if valid_614146 != nil:
    section.add "CacheParameterGroupName", valid_614146
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614147: Call_PostDescribeCacheParameterGroups_614132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_614147.validator(path, query, header, formData, body)
  let scheme = call_614147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614147.url(scheme.get, call_614147.host, call_614147.base,
                         call_614147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614147, url, valid)

proc call*(call_614148: Call_PostDescribeCacheParameterGroups_614132;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614149 = newJObject()
  var formData_614150 = newJObject()
  add(formData_614150, "MaxRecords", newJInt(MaxRecords))
  add(formData_614150, "Marker", newJString(Marker))
  add(formData_614150, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_614149, "Action", newJString(Action))
  add(query_614149, "Version", newJString(Version))
  result = call_614148.call(nil, query_614149, nil, formData_614150, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_614132(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_614133, base: "/",
    url: url_PostDescribeCacheParameterGroups_614134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_614114 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheParameterGroups_614116(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameterGroups_614115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614117 = query.getOrDefault("Marker")
  valid_614117 = validateParameter(valid_614117, JString, required = false,
                                 default = nil)
  if valid_614117 != nil:
    section.add "Marker", valid_614117
  var valid_614118 = query.getOrDefault("CacheParameterGroupName")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "CacheParameterGroupName", valid_614118
  var valid_614119 = query.getOrDefault("Action")
  valid_614119 = validateParameter(valid_614119, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_614119 != nil:
    section.add "Action", valid_614119
  var valid_614120 = query.getOrDefault("Version")
  valid_614120 = validateParameter(valid_614120, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614120 != nil:
    section.add "Version", valid_614120
  var valid_614121 = query.getOrDefault("MaxRecords")
  valid_614121 = validateParameter(valid_614121, JInt, required = false, default = nil)
  if valid_614121 != nil:
    section.add "MaxRecords", valid_614121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614122 = header.getOrDefault("X-Amz-Signature")
  valid_614122 = validateParameter(valid_614122, JString, required = false,
                                 default = nil)
  if valid_614122 != nil:
    section.add "X-Amz-Signature", valid_614122
  var valid_614123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614123 = validateParameter(valid_614123, JString, required = false,
                                 default = nil)
  if valid_614123 != nil:
    section.add "X-Amz-Content-Sha256", valid_614123
  var valid_614124 = header.getOrDefault("X-Amz-Date")
  valid_614124 = validateParameter(valid_614124, JString, required = false,
                                 default = nil)
  if valid_614124 != nil:
    section.add "X-Amz-Date", valid_614124
  var valid_614125 = header.getOrDefault("X-Amz-Credential")
  valid_614125 = validateParameter(valid_614125, JString, required = false,
                                 default = nil)
  if valid_614125 != nil:
    section.add "X-Amz-Credential", valid_614125
  var valid_614126 = header.getOrDefault("X-Amz-Security-Token")
  valid_614126 = validateParameter(valid_614126, JString, required = false,
                                 default = nil)
  if valid_614126 != nil:
    section.add "X-Amz-Security-Token", valid_614126
  var valid_614127 = header.getOrDefault("X-Amz-Algorithm")
  valid_614127 = validateParameter(valid_614127, JString, required = false,
                                 default = nil)
  if valid_614127 != nil:
    section.add "X-Amz-Algorithm", valid_614127
  var valid_614128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614128 = validateParameter(valid_614128, JString, required = false,
                                 default = nil)
  if valid_614128 != nil:
    section.add "X-Amz-SignedHeaders", valid_614128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614129: Call_GetDescribeCacheParameterGroups_614114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_614129.validator(path, query, header, formData, body)
  let scheme = call_614129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614129.url(scheme.get, call_614129.host, call_614129.base,
                         call_614129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614129, url, valid)

proc call*(call_614130: Call_GetDescribeCacheParameterGroups_614114;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614131 = newJObject()
  add(query_614131, "Marker", newJString(Marker))
  add(query_614131, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_614131, "Action", newJString(Action))
  add(query_614131, "Version", newJString(Version))
  add(query_614131, "MaxRecords", newJInt(MaxRecords))
  result = call_614130.call(nil, query_614131, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_614114(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_614115, base: "/",
    url: url_GetDescribeCacheParameterGroups_614116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_614170 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheParameters_614172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameters_614171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614173 = query.getOrDefault("Action")
  valid_614173 = validateParameter(valid_614173, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_614173 != nil:
    section.add "Action", valid_614173
  var valid_614174 = query.getOrDefault("Version")
  valid_614174 = validateParameter(valid_614174, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614174 != nil:
    section.add "Version", valid_614174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614175 = header.getOrDefault("X-Amz-Signature")
  valid_614175 = validateParameter(valid_614175, JString, required = false,
                                 default = nil)
  if valid_614175 != nil:
    section.add "X-Amz-Signature", valid_614175
  var valid_614176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614176 = validateParameter(valid_614176, JString, required = false,
                                 default = nil)
  if valid_614176 != nil:
    section.add "X-Amz-Content-Sha256", valid_614176
  var valid_614177 = header.getOrDefault("X-Amz-Date")
  valid_614177 = validateParameter(valid_614177, JString, required = false,
                                 default = nil)
  if valid_614177 != nil:
    section.add "X-Amz-Date", valid_614177
  var valid_614178 = header.getOrDefault("X-Amz-Credential")
  valid_614178 = validateParameter(valid_614178, JString, required = false,
                                 default = nil)
  if valid_614178 != nil:
    section.add "X-Amz-Credential", valid_614178
  var valid_614179 = header.getOrDefault("X-Amz-Security-Token")
  valid_614179 = validateParameter(valid_614179, JString, required = false,
                                 default = nil)
  if valid_614179 != nil:
    section.add "X-Amz-Security-Token", valid_614179
  var valid_614180 = header.getOrDefault("X-Amz-Algorithm")
  valid_614180 = validateParameter(valid_614180, JString, required = false,
                                 default = nil)
  if valid_614180 != nil:
    section.add "X-Amz-Algorithm", valid_614180
  var valid_614181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614181 = validateParameter(valid_614181, JString, required = false,
                                 default = nil)
  if valid_614181 != nil:
    section.add "X-Amz-SignedHeaders", valid_614181
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_614182 = formData.getOrDefault("Source")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "Source", valid_614182
  var valid_614183 = formData.getOrDefault("MaxRecords")
  valid_614183 = validateParameter(valid_614183, JInt, required = false, default = nil)
  if valid_614183 != nil:
    section.add "MaxRecords", valid_614183
  var valid_614184 = formData.getOrDefault("Marker")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "Marker", valid_614184
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_614185 = formData.getOrDefault("CacheParameterGroupName")
  valid_614185 = validateParameter(valid_614185, JString, required = true,
                                 default = nil)
  if valid_614185 != nil:
    section.add "CacheParameterGroupName", valid_614185
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614186: Call_PostDescribeCacheParameters_614170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_614186.validator(path, query, header, formData, body)
  let scheme = call_614186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614186.url(scheme.get, call_614186.host, call_614186.base,
                         call_614186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614186, url, valid)

proc call*(call_614187: Call_PostDescribeCacheParameters_614170;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614188 = newJObject()
  var formData_614189 = newJObject()
  add(formData_614189, "Source", newJString(Source))
  add(formData_614189, "MaxRecords", newJInt(MaxRecords))
  add(formData_614189, "Marker", newJString(Marker))
  add(formData_614189, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_614188, "Action", newJString(Action))
  add(query_614188, "Version", newJString(Version))
  result = call_614187.call(nil, query_614188, nil, formData_614189, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_614170(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_614171, base: "/",
    url: url_PostDescribeCacheParameters_614172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_614151 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheParameters_614153(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameters_614152(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614154 = query.getOrDefault("Marker")
  valid_614154 = validateParameter(valid_614154, JString, required = false,
                                 default = nil)
  if valid_614154 != nil:
    section.add "Marker", valid_614154
  var valid_614155 = query.getOrDefault("Source")
  valid_614155 = validateParameter(valid_614155, JString, required = false,
                                 default = nil)
  if valid_614155 != nil:
    section.add "Source", valid_614155
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_614156 = query.getOrDefault("CacheParameterGroupName")
  valid_614156 = validateParameter(valid_614156, JString, required = true,
                                 default = nil)
  if valid_614156 != nil:
    section.add "CacheParameterGroupName", valid_614156
  var valid_614157 = query.getOrDefault("Action")
  valid_614157 = validateParameter(valid_614157, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_614157 != nil:
    section.add "Action", valid_614157
  var valid_614158 = query.getOrDefault("Version")
  valid_614158 = validateParameter(valid_614158, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614158 != nil:
    section.add "Version", valid_614158
  var valid_614159 = query.getOrDefault("MaxRecords")
  valid_614159 = validateParameter(valid_614159, JInt, required = false, default = nil)
  if valid_614159 != nil:
    section.add "MaxRecords", valid_614159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614160 = header.getOrDefault("X-Amz-Signature")
  valid_614160 = validateParameter(valid_614160, JString, required = false,
                                 default = nil)
  if valid_614160 != nil:
    section.add "X-Amz-Signature", valid_614160
  var valid_614161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614161 = validateParameter(valid_614161, JString, required = false,
                                 default = nil)
  if valid_614161 != nil:
    section.add "X-Amz-Content-Sha256", valid_614161
  var valid_614162 = header.getOrDefault("X-Amz-Date")
  valid_614162 = validateParameter(valid_614162, JString, required = false,
                                 default = nil)
  if valid_614162 != nil:
    section.add "X-Amz-Date", valid_614162
  var valid_614163 = header.getOrDefault("X-Amz-Credential")
  valid_614163 = validateParameter(valid_614163, JString, required = false,
                                 default = nil)
  if valid_614163 != nil:
    section.add "X-Amz-Credential", valid_614163
  var valid_614164 = header.getOrDefault("X-Amz-Security-Token")
  valid_614164 = validateParameter(valid_614164, JString, required = false,
                                 default = nil)
  if valid_614164 != nil:
    section.add "X-Amz-Security-Token", valid_614164
  var valid_614165 = header.getOrDefault("X-Amz-Algorithm")
  valid_614165 = validateParameter(valid_614165, JString, required = false,
                                 default = nil)
  if valid_614165 != nil:
    section.add "X-Amz-Algorithm", valid_614165
  var valid_614166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614166 = validateParameter(valid_614166, JString, required = false,
                                 default = nil)
  if valid_614166 != nil:
    section.add "X-Amz-SignedHeaders", valid_614166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614167: Call_GetDescribeCacheParameters_614151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_614167.validator(path, query, header, formData, body)
  let scheme = call_614167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614167.url(scheme.get, call_614167.host, call_614167.base,
                         call_614167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614167, url, valid)

proc call*(call_614168: Call_GetDescribeCacheParameters_614151;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614169 = newJObject()
  add(query_614169, "Marker", newJString(Marker))
  add(query_614169, "Source", newJString(Source))
  add(query_614169, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_614169, "Action", newJString(Action))
  add(query_614169, "Version", newJString(Version))
  add(query_614169, "MaxRecords", newJInt(MaxRecords))
  result = call_614168.call(nil, query_614169, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_614151(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_614152, base: "/",
    url: url_GetDescribeCacheParameters_614153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_614208 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheSecurityGroups_614210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_614209(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614211 = query.getOrDefault("Action")
  valid_614211 = validateParameter(valid_614211, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_614211 != nil:
    section.add "Action", valid_614211
  var valid_614212 = query.getOrDefault("Version")
  valid_614212 = validateParameter(valid_614212, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614212 != nil:
    section.add "Version", valid_614212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614213 = header.getOrDefault("X-Amz-Signature")
  valid_614213 = validateParameter(valid_614213, JString, required = false,
                                 default = nil)
  if valid_614213 != nil:
    section.add "X-Amz-Signature", valid_614213
  var valid_614214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614214 = validateParameter(valid_614214, JString, required = false,
                                 default = nil)
  if valid_614214 != nil:
    section.add "X-Amz-Content-Sha256", valid_614214
  var valid_614215 = header.getOrDefault("X-Amz-Date")
  valid_614215 = validateParameter(valid_614215, JString, required = false,
                                 default = nil)
  if valid_614215 != nil:
    section.add "X-Amz-Date", valid_614215
  var valid_614216 = header.getOrDefault("X-Amz-Credential")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "X-Amz-Credential", valid_614216
  var valid_614217 = header.getOrDefault("X-Amz-Security-Token")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "X-Amz-Security-Token", valid_614217
  var valid_614218 = header.getOrDefault("X-Amz-Algorithm")
  valid_614218 = validateParameter(valid_614218, JString, required = false,
                                 default = nil)
  if valid_614218 != nil:
    section.add "X-Amz-Algorithm", valid_614218
  var valid_614219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "X-Amz-SignedHeaders", valid_614219
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_614220 = formData.getOrDefault("MaxRecords")
  valid_614220 = validateParameter(valid_614220, JInt, required = false, default = nil)
  if valid_614220 != nil:
    section.add "MaxRecords", valid_614220
  var valid_614221 = formData.getOrDefault("CacheSecurityGroupName")
  valid_614221 = validateParameter(valid_614221, JString, required = false,
                                 default = nil)
  if valid_614221 != nil:
    section.add "CacheSecurityGroupName", valid_614221
  var valid_614222 = formData.getOrDefault("Marker")
  valid_614222 = validateParameter(valid_614222, JString, required = false,
                                 default = nil)
  if valid_614222 != nil:
    section.add "Marker", valid_614222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614223: Call_PostDescribeCacheSecurityGroups_614208;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_614223.validator(path, query, header, formData, body)
  let scheme = call_614223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614223.url(scheme.get, call_614223.host, call_614223.base,
                         call_614223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614223, url, valid)

proc call*(call_614224: Call_PostDescribeCacheSecurityGroups_614208;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614225 = newJObject()
  var formData_614226 = newJObject()
  add(formData_614226, "MaxRecords", newJInt(MaxRecords))
  add(formData_614226, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_614226, "Marker", newJString(Marker))
  add(query_614225, "Action", newJString(Action))
  add(query_614225, "Version", newJString(Version))
  result = call_614224.call(nil, query_614225, nil, formData_614226, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_614208(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_614209, base: "/",
    url: url_PostDescribeCacheSecurityGroups_614210,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_614190 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheSecurityGroups_614192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_614191(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614193 = query.getOrDefault("Marker")
  valid_614193 = validateParameter(valid_614193, JString, required = false,
                                 default = nil)
  if valid_614193 != nil:
    section.add "Marker", valid_614193
  var valid_614194 = query.getOrDefault("Action")
  valid_614194 = validateParameter(valid_614194, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_614194 != nil:
    section.add "Action", valid_614194
  var valid_614195 = query.getOrDefault("CacheSecurityGroupName")
  valid_614195 = validateParameter(valid_614195, JString, required = false,
                                 default = nil)
  if valid_614195 != nil:
    section.add "CacheSecurityGroupName", valid_614195
  var valid_614196 = query.getOrDefault("Version")
  valid_614196 = validateParameter(valid_614196, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614196 != nil:
    section.add "Version", valid_614196
  var valid_614197 = query.getOrDefault("MaxRecords")
  valid_614197 = validateParameter(valid_614197, JInt, required = false, default = nil)
  if valid_614197 != nil:
    section.add "MaxRecords", valid_614197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614198 = header.getOrDefault("X-Amz-Signature")
  valid_614198 = validateParameter(valid_614198, JString, required = false,
                                 default = nil)
  if valid_614198 != nil:
    section.add "X-Amz-Signature", valid_614198
  var valid_614199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614199 = validateParameter(valid_614199, JString, required = false,
                                 default = nil)
  if valid_614199 != nil:
    section.add "X-Amz-Content-Sha256", valid_614199
  var valid_614200 = header.getOrDefault("X-Amz-Date")
  valid_614200 = validateParameter(valid_614200, JString, required = false,
                                 default = nil)
  if valid_614200 != nil:
    section.add "X-Amz-Date", valid_614200
  var valid_614201 = header.getOrDefault("X-Amz-Credential")
  valid_614201 = validateParameter(valid_614201, JString, required = false,
                                 default = nil)
  if valid_614201 != nil:
    section.add "X-Amz-Credential", valid_614201
  var valid_614202 = header.getOrDefault("X-Amz-Security-Token")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "X-Amz-Security-Token", valid_614202
  var valid_614203 = header.getOrDefault("X-Amz-Algorithm")
  valid_614203 = validateParameter(valid_614203, JString, required = false,
                                 default = nil)
  if valid_614203 != nil:
    section.add "X-Amz-Algorithm", valid_614203
  var valid_614204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614204 = validateParameter(valid_614204, JString, required = false,
                                 default = nil)
  if valid_614204 != nil:
    section.add "X-Amz-SignedHeaders", valid_614204
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614205: Call_GetDescribeCacheSecurityGroups_614190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_614205.validator(path, query, header, formData, body)
  let scheme = call_614205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614205.url(scheme.get, call_614205.host, call_614205.base,
                         call_614205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614205, url, valid)

proc call*(call_614206: Call_GetDescribeCacheSecurityGroups_614190;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614207 = newJObject()
  add(query_614207, "Marker", newJString(Marker))
  add(query_614207, "Action", newJString(Action))
  add(query_614207, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_614207, "Version", newJString(Version))
  add(query_614207, "MaxRecords", newJInt(MaxRecords))
  result = call_614206.call(nil, query_614207, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_614190(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_614191, base: "/",
    url: url_GetDescribeCacheSecurityGroups_614192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_614245 = ref object of OpenApiRestCall_612658
proc url_PostDescribeCacheSubnetGroups_614247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_614246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614248 = query.getOrDefault("Action")
  valid_614248 = validateParameter(valid_614248, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_614248 != nil:
    section.add "Action", valid_614248
  var valid_614249 = query.getOrDefault("Version")
  valid_614249 = validateParameter(valid_614249, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614249 != nil:
    section.add "Version", valid_614249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614250 = header.getOrDefault("X-Amz-Signature")
  valid_614250 = validateParameter(valid_614250, JString, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "X-Amz-Signature", valid_614250
  var valid_614251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-Content-Sha256", valid_614251
  var valid_614252 = header.getOrDefault("X-Amz-Date")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Date", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Credential")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Credential", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-Security-Token")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-Security-Token", valid_614254
  var valid_614255 = header.getOrDefault("X-Amz-Algorithm")
  valid_614255 = validateParameter(valid_614255, JString, required = false,
                                 default = nil)
  if valid_614255 != nil:
    section.add "X-Amz-Algorithm", valid_614255
  var valid_614256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614256 = validateParameter(valid_614256, JString, required = false,
                                 default = nil)
  if valid_614256 != nil:
    section.add "X-Amz-SignedHeaders", valid_614256
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_614257 = formData.getOrDefault("MaxRecords")
  valid_614257 = validateParameter(valid_614257, JInt, required = false, default = nil)
  if valid_614257 != nil:
    section.add "MaxRecords", valid_614257
  var valid_614258 = formData.getOrDefault("Marker")
  valid_614258 = validateParameter(valid_614258, JString, required = false,
                                 default = nil)
  if valid_614258 != nil:
    section.add "Marker", valid_614258
  var valid_614259 = formData.getOrDefault("CacheSubnetGroupName")
  valid_614259 = validateParameter(valid_614259, JString, required = false,
                                 default = nil)
  if valid_614259 != nil:
    section.add "CacheSubnetGroupName", valid_614259
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614260: Call_PostDescribeCacheSubnetGroups_614245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_614260.validator(path, query, header, formData, body)
  let scheme = call_614260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614260.url(scheme.get, call_614260.host, call_614260.base,
                         call_614260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614260, url, valid)

proc call*(call_614261: Call_PostDescribeCacheSubnetGroups_614245;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614262 = newJObject()
  var formData_614263 = newJObject()
  add(formData_614263, "MaxRecords", newJInt(MaxRecords))
  add(formData_614263, "Marker", newJString(Marker))
  add(formData_614263, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_614262, "Action", newJString(Action))
  add(query_614262, "Version", newJString(Version))
  result = call_614261.call(nil, query_614262, nil, formData_614263, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_614245(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_614246, base: "/",
    url: url_PostDescribeCacheSubnetGroups_614247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_614227 = ref object of OpenApiRestCall_612658
proc url_GetDescribeCacheSubnetGroups_614229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_614228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614230 = query.getOrDefault("Marker")
  valid_614230 = validateParameter(valid_614230, JString, required = false,
                                 default = nil)
  if valid_614230 != nil:
    section.add "Marker", valid_614230
  var valid_614231 = query.getOrDefault("Action")
  valid_614231 = validateParameter(valid_614231, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_614231 != nil:
    section.add "Action", valid_614231
  var valid_614232 = query.getOrDefault("CacheSubnetGroupName")
  valid_614232 = validateParameter(valid_614232, JString, required = false,
                                 default = nil)
  if valid_614232 != nil:
    section.add "CacheSubnetGroupName", valid_614232
  var valid_614233 = query.getOrDefault("Version")
  valid_614233 = validateParameter(valid_614233, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614233 != nil:
    section.add "Version", valid_614233
  var valid_614234 = query.getOrDefault("MaxRecords")
  valid_614234 = validateParameter(valid_614234, JInt, required = false, default = nil)
  if valid_614234 != nil:
    section.add "MaxRecords", valid_614234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614235 = header.getOrDefault("X-Amz-Signature")
  valid_614235 = validateParameter(valid_614235, JString, required = false,
                                 default = nil)
  if valid_614235 != nil:
    section.add "X-Amz-Signature", valid_614235
  var valid_614236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "X-Amz-Content-Sha256", valid_614236
  var valid_614237 = header.getOrDefault("X-Amz-Date")
  valid_614237 = validateParameter(valid_614237, JString, required = false,
                                 default = nil)
  if valid_614237 != nil:
    section.add "X-Amz-Date", valid_614237
  var valid_614238 = header.getOrDefault("X-Amz-Credential")
  valid_614238 = validateParameter(valid_614238, JString, required = false,
                                 default = nil)
  if valid_614238 != nil:
    section.add "X-Amz-Credential", valid_614238
  var valid_614239 = header.getOrDefault("X-Amz-Security-Token")
  valid_614239 = validateParameter(valid_614239, JString, required = false,
                                 default = nil)
  if valid_614239 != nil:
    section.add "X-Amz-Security-Token", valid_614239
  var valid_614240 = header.getOrDefault("X-Amz-Algorithm")
  valid_614240 = validateParameter(valid_614240, JString, required = false,
                                 default = nil)
  if valid_614240 != nil:
    section.add "X-Amz-Algorithm", valid_614240
  var valid_614241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614241 = validateParameter(valid_614241, JString, required = false,
                                 default = nil)
  if valid_614241 != nil:
    section.add "X-Amz-SignedHeaders", valid_614241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614242: Call_GetDescribeCacheSubnetGroups_614227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_614242.validator(path, query, header, formData, body)
  let scheme = call_614242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614242.url(scheme.get, call_614242.host, call_614242.base,
                         call_614242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614242, url, valid)

proc call*(call_614243: Call_GetDescribeCacheSubnetGroups_614227;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614244 = newJObject()
  add(query_614244, "Marker", newJString(Marker))
  add(query_614244, "Action", newJString(Action))
  add(query_614244, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_614244, "Version", newJString(Version))
  add(query_614244, "MaxRecords", newJInt(MaxRecords))
  result = call_614243.call(nil, query_614244, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_614227(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_614228, base: "/",
    url: url_GetDescribeCacheSubnetGroups_614229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_614282 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEngineDefaultParameters_614284(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_614283(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614285 = query.getOrDefault("Action")
  valid_614285 = validateParameter(valid_614285, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614285 != nil:
    section.add "Action", valid_614285
  var valid_614286 = query.getOrDefault("Version")
  valid_614286 = validateParameter(valid_614286, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614286 != nil:
    section.add "Version", valid_614286
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614287 = header.getOrDefault("X-Amz-Signature")
  valid_614287 = validateParameter(valid_614287, JString, required = false,
                                 default = nil)
  if valid_614287 != nil:
    section.add "X-Amz-Signature", valid_614287
  var valid_614288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614288 = validateParameter(valid_614288, JString, required = false,
                                 default = nil)
  if valid_614288 != nil:
    section.add "X-Amz-Content-Sha256", valid_614288
  var valid_614289 = header.getOrDefault("X-Amz-Date")
  valid_614289 = validateParameter(valid_614289, JString, required = false,
                                 default = nil)
  if valid_614289 != nil:
    section.add "X-Amz-Date", valid_614289
  var valid_614290 = header.getOrDefault("X-Amz-Credential")
  valid_614290 = validateParameter(valid_614290, JString, required = false,
                                 default = nil)
  if valid_614290 != nil:
    section.add "X-Amz-Credential", valid_614290
  var valid_614291 = header.getOrDefault("X-Amz-Security-Token")
  valid_614291 = validateParameter(valid_614291, JString, required = false,
                                 default = nil)
  if valid_614291 != nil:
    section.add "X-Amz-Security-Token", valid_614291
  var valid_614292 = header.getOrDefault("X-Amz-Algorithm")
  valid_614292 = validateParameter(valid_614292, JString, required = false,
                                 default = nil)
  if valid_614292 != nil:
    section.add "X-Amz-Algorithm", valid_614292
  var valid_614293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614293 = validateParameter(valid_614293, JString, required = false,
                                 default = nil)
  if valid_614293 != nil:
    section.add "X-Amz-SignedHeaders", valid_614293
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_614294 = formData.getOrDefault("MaxRecords")
  valid_614294 = validateParameter(valid_614294, JInt, required = false, default = nil)
  if valid_614294 != nil:
    section.add "MaxRecords", valid_614294
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_614295 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_614295 = validateParameter(valid_614295, JString, required = true,
                                 default = nil)
  if valid_614295 != nil:
    section.add "CacheParameterGroupFamily", valid_614295
  var valid_614296 = formData.getOrDefault("Marker")
  valid_614296 = validateParameter(valid_614296, JString, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "Marker", valid_614296
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614297: Call_PostDescribeEngineDefaultParameters_614282;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_614297.validator(path, query, header, formData, body)
  let scheme = call_614297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614297.url(scheme.get, call_614297.host, call_614297.base,
                         call_614297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614297, url, valid)

proc call*(call_614298: Call_PostDescribeEngineDefaultParameters_614282;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614299 = newJObject()
  var formData_614300 = newJObject()
  add(formData_614300, "MaxRecords", newJInt(MaxRecords))
  add(formData_614300, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_614300, "Marker", newJString(Marker))
  add(query_614299, "Action", newJString(Action))
  add(query_614299, "Version", newJString(Version))
  result = call_614298.call(nil, query_614299, nil, formData_614300, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_614282(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_614283, base: "/",
    url: url_PostDescribeEngineDefaultParameters_614284,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_614264 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEngineDefaultParameters_614266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_614265(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614267 = query.getOrDefault("Marker")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "Marker", valid_614267
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_614268 = query.getOrDefault("CacheParameterGroupFamily")
  valid_614268 = validateParameter(valid_614268, JString, required = true,
                                 default = nil)
  if valid_614268 != nil:
    section.add "CacheParameterGroupFamily", valid_614268
  var valid_614269 = query.getOrDefault("Action")
  valid_614269 = validateParameter(valid_614269, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_614269 != nil:
    section.add "Action", valid_614269
  var valid_614270 = query.getOrDefault("Version")
  valid_614270 = validateParameter(valid_614270, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614270 != nil:
    section.add "Version", valid_614270
  var valid_614271 = query.getOrDefault("MaxRecords")
  valid_614271 = validateParameter(valid_614271, JInt, required = false, default = nil)
  if valid_614271 != nil:
    section.add "MaxRecords", valid_614271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614272 = header.getOrDefault("X-Amz-Signature")
  valid_614272 = validateParameter(valid_614272, JString, required = false,
                                 default = nil)
  if valid_614272 != nil:
    section.add "X-Amz-Signature", valid_614272
  var valid_614273 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614273 = validateParameter(valid_614273, JString, required = false,
                                 default = nil)
  if valid_614273 != nil:
    section.add "X-Amz-Content-Sha256", valid_614273
  var valid_614274 = header.getOrDefault("X-Amz-Date")
  valid_614274 = validateParameter(valid_614274, JString, required = false,
                                 default = nil)
  if valid_614274 != nil:
    section.add "X-Amz-Date", valid_614274
  var valid_614275 = header.getOrDefault("X-Amz-Credential")
  valid_614275 = validateParameter(valid_614275, JString, required = false,
                                 default = nil)
  if valid_614275 != nil:
    section.add "X-Amz-Credential", valid_614275
  var valid_614276 = header.getOrDefault("X-Amz-Security-Token")
  valid_614276 = validateParameter(valid_614276, JString, required = false,
                                 default = nil)
  if valid_614276 != nil:
    section.add "X-Amz-Security-Token", valid_614276
  var valid_614277 = header.getOrDefault("X-Amz-Algorithm")
  valid_614277 = validateParameter(valid_614277, JString, required = false,
                                 default = nil)
  if valid_614277 != nil:
    section.add "X-Amz-Algorithm", valid_614277
  var valid_614278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614278 = validateParameter(valid_614278, JString, required = false,
                                 default = nil)
  if valid_614278 != nil:
    section.add "X-Amz-SignedHeaders", valid_614278
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614279: Call_GetDescribeEngineDefaultParameters_614264;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_614279.validator(path, query, header, formData, body)
  let scheme = call_614279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614279.url(scheme.get, call_614279.host, call_614279.base,
                         call_614279.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614279, url, valid)

proc call*(call_614280: Call_GetDescribeEngineDefaultParameters_614264;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614281 = newJObject()
  add(query_614281, "Marker", newJString(Marker))
  add(query_614281, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_614281, "Action", newJString(Action))
  add(query_614281, "Version", newJString(Version))
  add(query_614281, "MaxRecords", newJInt(MaxRecords))
  result = call_614280.call(nil, query_614281, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_614264(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_614265, base: "/",
    url: url_GetDescribeEngineDefaultParameters_614266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_614323 = ref object of OpenApiRestCall_612658
proc url_PostDescribeEvents_614325(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_614324(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614326 = query.getOrDefault("Action")
  valid_614326 = validateParameter(valid_614326, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614326 != nil:
    section.add "Action", valid_614326
  var valid_614327 = query.getOrDefault("Version")
  valid_614327 = validateParameter(valid_614327, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614327 != nil:
    section.add "Version", valid_614327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614328 = header.getOrDefault("X-Amz-Signature")
  valid_614328 = validateParameter(valid_614328, JString, required = false,
                                 default = nil)
  if valid_614328 != nil:
    section.add "X-Amz-Signature", valid_614328
  var valid_614329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614329 = validateParameter(valid_614329, JString, required = false,
                                 default = nil)
  if valid_614329 != nil:
    section.add "X-Amz-Content-Sha256", valid_614329
  var valid_614330 = header.getOrDefault("X-Amz-Date")
  valid_614330 = validateParameter(valid_614330, JString, required = false,
                                 default = nil)
  if valid_614330 != nil:
    section.add "X-Amz-Date", valid_614330
  var valid_614331 = header.getOrDefault("X-Amz-Credential")
  valid_614331 = validateParameter(valid_614331, JString, required = false,
                                 default = nil)
  if valid_614331 != nil:
    section.add "X-Amz-Credential", valid_614331
  var valid_614332 = header.getOrDefault("X-Amz-Security-Token")
  valid_614332 = validateParameter(valid_614332, JString, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "X-Amz-Security-Token", valid_614332
  var valid_614333 = header.getOrDefault("X-Amz-Algorithm")
  valid_614333 = validateParameter(valid_614333, JString, required = false,
                                 default = nil)
  if valid_614333 != nil:
    section.add "X-Amz-Algorithm", valid_614333
  var valid_614334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614334 = validateParameter(valid_614334, JString, required = false,
                                 default = nil)
  if valid_614334 != nil:
    section.add "X-Amz-SignedHeaders", valid_614334
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_614335 = formData.getOrDefault("MaxRecords")
  valid_614335 = validateParameter(valid_614335, JInt, required = false, default = nil)
  if valid_614335 != nil:
    section.add "MaxRecords", valid_614335
  var valid_614336 = formData.getOrDefault("Marker")
  valid_614336 = validateParameter(valid_614336, JString, required = false,
                                 default = nil)
  if valid_614336 != nil:
    section.add "Marker", valid_614336
  var valid_614337 = formData.getOrDefault("SourceIdentifier")
  valid_614337 = validateParameter(valid_614337, JString, required = false,
                                 default = nil)
  if valid_614337 != nil:
    section.add "SourceIdentifier", valid_614337
  var valid_614338 = formData.getOrDefault("SourceType")
  valid_614338 = validateParameter(valid_614338, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_614338 != nil:
    section.add "SourceType", valid_614338
  var valid_614339 = formData.getOrDefault("Duration")
  valid_614339 = validateParameter(valid_614339, JInt, required = false, default = nil)
  if valid_614339 != nil:
    section.add "Duration", valid_614339
  var valid_614340 = formData.getOrDefault("EndTime")
  valid_614340 = validateParameter(valid_614340, JString, required = false,
                                 default = nil)
  if valid_614340 != nil:
    section.add "EndTime", valid_614340
  var valid_614341 = formData.getOrDefault("StartTime")
  valid_614341 = validateParameter(valid_614341, JString, required = false,
                                 default = nil)
  if valid_614341 != nil:
    section.add "StartTime", valid_614341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614342: Call_PostDescribeEvents_614323; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_614342.validator(path, query, header, formData, body)
  let scheme = call_614342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614342.url(scheme.get, call_614342.host, call_614342.base,
                         call_614342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614342, url, valid)

proc call*(call_614343: Call_PostDescribeEvents_614323; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614344 = newJObject()
  var formData_614345 = newJObject()
  add(formData_614345, "MaxRecords", newJInt(MaxRecords))
  add(formData_614345, "Marker", newJString(Marker))
  add(formData_614345, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_614345, "SourceType", newJString(SourceType))
  add(formData_614345, "Duration", newJInt(Duration))
  add(formData_614345, "EndTime", newJString(EndTime))
  add(formData_614345, "StartTime", newJString(StartTime))
  add(query_614344, "Action", newJString(Action))
  add(query_614344, "Version", newJString(Version))
  result = call_614343.call(nil, query_614344, nil, formData_614345, nil)

var postDescribeEvents* = Call_PostDescribeEvents_614323(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_614324, base: "/",
    url: url_PostDescribeEvents_614325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_614301 = ref object of OpenApiRestCall_612658
proc url_GetDescribeEvents_614303(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_614302(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614304 = query.getOrDefault("Marker")
  valid_614304 = validateParameter(valid_614304, JString, required = false,
                                 default = nil)
  if valid_614304 != nil:
    section.add "Marker", valid_614304
  var valid_614305 = query.getOrDefault("SourceType")
  valid_614305 = validateParameter(valid_614305, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_614305 != nil:
    section.add "SourceType", valid_614305
  var valid_614306 = query.getOrDefault("SourceIdentifier")
  valid_614306 = validateParameter(valid_614306, JString, required = false,
                                 default = nil)
  if valid_614306 != nil:
    section.add "SourceIdentifier", valid_614306
  var valid_614307 = query.getOrDefault("Action")
  valid_614307 = validateParameter(valid_614307, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_614307 != nil:
    section.add "Action", valid_614307
  var valid_614308 = query.getOrDefault("StartTime")
  valid_614308 = validateParameter(valid_614308, JString, required = false,
                                 default = nil)
  if valid_614308 != nil:
    section.add "StartTime", valid_614308
  var valid_614309 = query.getOrDefault("Duration")
  valid_614309 = validateParameter(valid_614309, JInt, required = false, default = nil)
  if valid_614309 != nil:
    section.add "Duration", valid_614309
  var valid_614310 = query.getOrDefault("EndTime")
  valid_614310 = validateParameter(valid_614310, JString, required = false,
                                 default = nil)
  if valid_614310 != nil:
    section.add "EndTime", valid_614310
  var valid_614311 = query.getOrDefault("Version")
  valid_614311 = validateParameter(valid_614311, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614311 != nil:
    section.add "Version", valid_614311
  var valid_614312 = query.getOrDefault("MaxRecords")
  valid_614312 = validateParameter(valid_614312, JInt, required = false, default = nil)
  if valid_614312 != nil:
    section.add "MaxRecords", valid_614312
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614313 = header.getOrDefault("X-Amz-Signature")
  valid_614313 = validateParameter(valid_614313, JString, required = false,
                                 default = nil)
  if valid_614313 != nil:
    section.add "X-Amz-Signature", valid_614313
  var valid_614314 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614314 = validateParameter(valid_614314, JString, required = false,
                                 default = nil)
  if valid_614314 != nil:
    section.add "X-Amz-Content-Sha256", valid_614314
  var valid_614315 = header.getOrDefault("X-Amz-Date")
  valid_614315 = validateParameter(valid_614315, JString, required = false,
                                 default = nil)
  if valid_614315 != nil:
    section.add "X-Amz-Date", valid_614315
  var valid_614316 = header.getOrDefault("X-Amz-Credential")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Credential", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Security-Token")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Security-Token", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-Algorithm")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-Algorithm", valid_614318
  var valid_614319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-SignedHeaders", valid_614319
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614320: Call_GetDescribeEvents_614301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_614320.validator(path, query, header, formData, body)
  let scheme = call_614320.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614320.url(scheme.get, call_614320.host, call_614320.base,
                         call_614320.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614320, url, valid)

proc call*(call_614321: Call_GetDescribeEvents_614301; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614322 = newJObject()
  add(query_614322, "Marker", newJString(Marker))
  add(query_614322, "SourceType", newJString(SourceType))
  add(query_614322, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_614322, "Action", newJString(Action))
  add(query_614322, "StartTime", newJString(StartTime))
  add(query_614322, "Duration", newJInt(Duration))
  add(query_614322, "EndTime", newJString(EndTime))
  add(query_614322, "Version", newJString(Version))
  add(query_614322, "MaxRecords", newJInt(MaxRecords))
  result = call_614321.call(nil, query_614322, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_614301(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_614302,
    base: "/", url: url_GetDescribeEvents_614303,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_614364 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReplicationGroups_614366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReplicationGroups_614365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614367 = query.getOrDefault("Action")
  valid_614367 = validateParameter(valid_614367, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_614367 != nil:
    section.add "Action", valid_614367
  var valid_614368 = query.getOrDefault("Version")
  valid_614368 = validateParameter(valid_614368, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614368 != nil:
    section.add "Version", valid_614368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614369 = header.getOrDefault("X-Amz-Signature")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "X-Amz-Signature", valid_614369
  var valid_614370 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614370 = validateParameter(valid_614370, JString, required = false,
                                 default = nil)
  if valid_614370 != nil:
    section.add "X-Amz-Content-Sha256", valid_614370
  var valid_614371 = header.getOrDefault("X-Amz-Date")
  valid_614371 = validateParameter(valid_614371, JString, required = false,
                                 default = nil)
  if valid_614371 != nil:
    section.add "X-Amz-Date", valid_614371
  var valid_614372 = header.getOrDefault("X-Amz-Credential")
  valid_614372 = validateParameter(valid_614372, JString, required = false,
                                 default = nil)
  if valid_614372 != nil:
    section.add "X-Amz-Credential", valid_614372
  var valid_614373 = header.getOrDefault("X-Amz-Security-Token")
  valid_614373 = validateParameter(valid_614373, JString, required = false,
                                 default = nil)
  if valid_614373 != nil:
    section.add "X-Amz-Security-Token", valid_614373
  var valid_614374 = header.getOrDefault("X-Amz-Algorithm")
  valid_614374 = validateParameter(valid_614374, JString, required = false,
                                 default = nil)
  if valid_614374 != nil:
    section.add "X-Amz-Algorithm", valid_614374
  var valid_614375 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614375 = validateParameter(valid_614375, JString, required = false,
                                 default = nil)
  if valid_614375 != nil:
    section.add "X-Amz-SignedHeaders", valid_614375
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_614376 = formData.getOrDefault("MaxRecords")
  valid_614376 = validateParameter(valid_614376, JInt, required = false, default = nil)
  if valid_614376 != nil:
    section.add "MaxRecords", valid_614376
  var valid_614377 = formData.getOrDefault("Marker")
  valid_614377 = validateParameter(valid_614377, JString, required = false,
                                 default = nil)
  if valid_614377 != nil:
    section.add "Marker", valid_614377
  var valid_614378 = formData.getOrDefault("ReplicationGroupId")
  valid_614378 = validateParameter(valid_614378, JString, required = false,
                                 default = nil)
  if valid_614378 != nil:
    section.add "ReplicationGroupId", valid_614378
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614379: Call_PostDescribeReplicationGroups_614364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614379.validator(path, query, header, formData, body)
  let scheme = call_614379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614379.url(scheme.get, call_614379.host, call_614379.base,
                         call_614379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614379, url, valid)

proc call*(call_614380: Call_PostDescribeReplicationGroups_614364;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_614381 = newJObject()
  var formData_614382 = newJObject()
  add(formData_614382, "MaxRecords", newJInt(MaxRecords))
  add(formData_614382, "Marker", newJString(Marker))
  add(query_614381, "Action", newJString(Action))
  add(query_614381, "Version", newJString(Version))
  add(formData_614382, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_614380.call(nil, query_614381, nil, formData_614382, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_614364(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_614365, base: "/",
    url: url_PostDescribeReplicationGroups_614366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_614346 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReplicationGroups_614348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReplicationGroups_614347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_614349 = query.getOrDefault("Marker")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "Marker", valid_614349
  var valid_614350 = query.getOrDefault("Action")
  valid_614350 = validateParameter(valid_614350, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_614350 != nil:
    section.add "Action", valid_614350
  var valid_614351 = query.getOrDefault("ReplicationGroupId")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "ReplicationGroupId", valid_614351
  var valid_614352 = query.getOrDefault("Version")
  valid_614352 = validateParameter(valid_614352, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614352 != nil:
    section.add "Version", valid_614352
  var valid_614353 = query.getOrDefault("MaxRecords")
  valid_614353 = validateParameter(valid_614353, JInt, required = false, default = nil)
  if valid_614353 != nil:
    section.add "MaxRecords", valid_614353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614354 = header.getOrDefault("X-Amz-Signature")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "X-Amz-Signature", valid_614354
  var valid_614355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614355 = validateParameter(valid_614355, JString, required = false,
                                 default = nil)
  if valid_614355 != nil:
    section.add "X-Amz-Content-Sha256", valid_614355
  var valid_614356 = header.getOrDefault("X-Amz-Date")
  valid_614356 = validateParameter(valid_614356, JString, required = false,
                                 default = nil)
  if valid_614356 != nil:
    section.add "X-Amz-Date", valid_614356
  var valid_614357 = header.getOrDefault("X-Amz-Credential")
  valid_614357 = validateParameter(valid_614357, JString, required = false,
                                 default = nil)
  if valid_614357 != nil:
    section.add "X-Amz-Credential", valid_614357
  var valid_614358 = header.getOrDefault("X-Amz-Security-Token")
  valid_614358 = validateParameter(valid_614358, JString, required = false,
                                 default = nil)
  if valid_614358 != nil:
    section.add "X-Amz-Security-Token", valid_614358
  var valid_614359 = header.getOrDefault("X-Amz-Algorithm")
  valid_614359 = validateParameter(valid_614359, JString, required = false,
                                 default = nil)
  if valid_614359 != nil:
    section.add "X-Amz-Algorithm", valid_614359
  var valid_614360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614360 = validateParameter(valid_614360, JString, required = false,
                                 default = nil)
  if valid_614360 != nil:
    section.add "X-Amz-SignedHeaders", valid_614360
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614361: Call_GetDescribeReplicationGroups_614346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614361.validator(path, query, header, formData, body)
  let scheme = call_614361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614361.url(scheme.get, call_614361.host, call_614361.base,
                         call_614361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614361, url, valid)

proc call*(call_614362: Call_GetDescribeReplicationGroups_614346;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_614363 = newJObject()
  add(query_614363, "Marker", newJString(Marker))
  add(query_614363, "Action", newJString(Action))
  add(query_614363, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_614363, "Version", newJString(Version))
  add(query_614363, "MaxRecords", newJInt(MaxRecords))
  result = call_614362.call(nil, query_614363, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_614346(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_614347, base: "/",
    url: url_GetDescribeReplicationGroups_614348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_614406 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReservedCacheNodes_614408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodes_614407(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614409 = query.getOrDefault("Action")
  valid_614409 = validateParameter(valid_614409, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_614409 != nil:
    section.add "Action", valid_614409
  var valid_614410 = query.getOrDefault("Version")
  valid_614410 = validateParameter(valid_614410, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614410 != nil:
    section.add "Version", valid_614410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614411 = header.getOrDefault("X-Amz-Signature")
  valid_614411 = validateParameter(valid_614411, JString, required = false,
                                 default = nil)
  if valid_614411 != nil:
    section.add "X-Amz-Signature", valid_614411
  var valid_614412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614412 = validateParameter(valid_614412, JString, required = false,
                                 default = nil)
  if valid_614412 != nil:
    section.add "X-Amz-Content-Sha256", valid_614412
  var valid_614413 = header.getOrDefault("X-Amz-Date")
  valid_614413 = validateParameter(valid_614413, JString, required = false,
                                 default = nil)
  if valid_614413 != nil:
    section.add "X-Amz-Date", valid_614413
  var valid_614414 = header.getOrDefault("X-Amz-Credential")
  valid_614414 = validateParameter(valid_614414, JString, required = false,
                                 default = nil)
  if valid_614414 != nil:
    section.add "X-Amz-Credential", valid_614414
  var valid_614415 = header.getOrDefault("X-Amz-Security-Token")
  valid_614415 = validateParameter(valid_614415, JString, required = false,
                                 default = nil)
  if valid_614415 != nil:
    section.add "X-Amz-Security-Token", valid_614415
  var valid_614416 = header.getOrDefault("X-Amz-Algorithm")
  valid_614416 = validateParameter(valid_614416, JString, required = false,
                                 default = nil)
  if valid_614416 != nil:
    section.add "X-Amz-Algorithm", valid_614416
  var valid_614417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614417 = validateParameter(valid_614417, JString, required = false,
                                 default = nil)
  if valid_614417 != nil:
    section.add "X-Amz-SignedHeaders", valid_614417
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_614418 = formData.getOrDefault("MaxRecords")
  valid_614418 = validateParameter(valid_614418, JInt, required = false, default = nil)
  if valid_614418 != nil:
    section.add "MaxRecords", valid_614418
  var valid_614419 = formData.getOrDefault("Marker")
  valid_614419 = validateParameter(valid_614419, JString, required = false,
                                 default = nil)
  if valid_614419 != nil:
    section.add "Marker", valid_614419
  var valid_614420 = formData.getOrDefault("Duration")
  valid_614420 = validateParameter(valid_614420, JString, required = false,
                                 default = nil)
  if valid_614420 != nil:
    section.add "Duration", valid_614420
  var valid_614421 = formData.getOrDefault("OfferingType")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "OfferingType", valid_614421
  var valid_614422 = formData.getOrDefault("ProductDescription")
  valid_614422 = validateParameter(valid_614422, JString, required = false,
                                 default = nil)
  if valid_614422 != nil:
    section.add "ProductDescription", valid_614422
  var valid_614423 = formData.getOrDefault("ReservedCacheNodeId")
  valid_614423 = validateParameter(valid_614423, JString, required = false,
                                 default = nil)
  if valid_614423 != nil:
    section.add "ReservedCacheNodeId", valid_614423
  var valid_614424 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_614424 = validateParameter(valid_614424, JString, required = false,
                                 default = nil)
  if valid_614424 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_614424
  var valid_614425 = formData.getOrDefault("CacheNodeType")
  valid_614425 = validateParameter(valid_614425, JString, required = false,
                                 default = nil)
  if valid_614425 != nil:
    section.add "CacheNodeType", valid_614425
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614426: Call_PostDescribeReservedCacheNodes_614406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_614426.validator(path, query, header, formData, body)
  let scheme = call_614426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614426.url(scheme.get, call_614426.host, call_614426.base,
                         call_614426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614426, url, valid)

proc call*(call_614427: Call_PostDescribeReservedCacheNodes_614406;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_614428 = newJObject()
  var formData_614429 = newJObject()
  add(formData_614429, "MaxRecords", newJInt(MaxRecords))
  add(formData_614429, "Marker", newJString(Marker))
  add(formData_614429, "Duration", newJString(Duration))
  add(formData_614429, "OfferingType", newJString(OfferingType))
  add(formData_614429, "ProductDescription", newJString(ProductDescription))
  add(query_614428, "Action", newJString(Action))
  add(query_614428, "Version", newJString(Version))
  add(formData_614429, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_614429, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_614429, "CacheNodeType", newJString(CacheNodeType))
  result = call_614427.call(nil, query_614428, nil, formData_614429, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_614406(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_614407, base: "/",
    url: url_PostDescribeReservedCacheNodes_614408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_614383 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReservedCacheNodes_614385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodes_614384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_614386 = query.getOrDefault("Marker")
  valid_614386 = validateParameter(valid_614386, JString, required = false,
                                 default = nil)
  if valid_614386 != nil:
    section.add "Marker", valid_614386
  var valid_614387 = query.getOrDefault("ProductDescription")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "ProductDescription", valid_614387
  var valid_614388 = query.getOrDefault("OfferingType")
  valid_614388 = validateParameter(valid_614388, JString, required = false,
                                 default = nil)
  if valid_614388 != nil:
    section.add "OfferingType", valid_614388
  var valid_614389 = query.getOrDefault("CacheNodeType")
  valid_614389 = validateParameter(valid_614389, JString, required = false,
                                 default = nil)
  if valid_614389 != nil:
    section.add "CacheNodeType", valid_614389
  var valid_614390 = query.getOrDefault("Action")
  valid_614390 = validateParameter(valid_614390, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_614390 != nil:
    section.add "Action", valid_614390
  var valid_614391 = query.getOrDefault("Duration")
  valid_614391 = validateParameter(valid_614391, JString, required = false,
                                 default = nil)
  if valid_614391 != nil:
    section.add "Duration", valid_614391
  var valid_614392 = query.getOrDefault("ReservedCacheNodeId")
  valid_614392 = validateParameter(valid_614392, JString, required = false,
                                 default = nil)
  if valid_614392 != nil:
    section.add "ReservedCacheNodeId", valid_614392
  var valid_614393 = query.getOrDefault("Version")
  valid_614393 = validateParameter(valid_614393, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614393 != nil:
    section.add "Version", valid_614393
  var valid_614394 = query.getOrDefault("MaxRecords")
  valid_614394 = validateParameter(valid_614394, JInt, required = false, default = nil)
  if valid_614394 != nil:
    section.add "MaxRecords", valid_614394
  var valid_614395 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_614395 = validateParameter(valid_614395, JString, required = false,
                                 default = nil)
  if valid_614395 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_614395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614396 = header.getOrDefault("X-Amz-Signature")
  valid_614396 = validateParameter(valid_614396, JString, required = false,
                                 default = nil)
  if valid_614396 != nil:
    section.add "X-Amz-Signature", valid_614396
  var valid_614397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-Content-Sha256", valid_614397
  var valid_614398 = header.getOrDefault("X-Amz-Date")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "X-Amz-Date", valid_614398
  var valid_614399 = header.getOrDefault("X-Amz-Credential")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "X-Amz-Credential", valid_614399
  var valid_614400 = header.getOrDefault("X-Amz-Security-Token")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "X-Amz-Security-Token", valid_614400
  var valid_614401 = header.getOrDefault("X-Amz-Algorithm")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "X-Amz-Algorithm", valid_614401
  var valid_614402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "X-Amz-SignedHeaders", valid_614402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614403: Call_GetDescribeReservedCacheNodes_614383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_614403.validator(path, query, header, formData, body)
  let scheme = call_614403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614403.url(scheme.get, call_614403.host, call_614403.base,
                         call_614403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614403, url, valid)

proc call*(call_614404: Call_GetDescribeReservedCacheNodes_614383;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_614405 = newJObject()
  add(query_614405, "Marker", newJString(Marker))
  add(query_614405, "ProductDescription", newJString(ProductDescription))
  add(query_614405, "OfferingType", newJString(OfferingType))
  add(query_614405, "CacheNodeType", newJString(CacheNodeType))
  add(query_614405, "Action", newJString(Action))
  add(query_614405, "Duration", newJString(Duration))
  add(query_614405, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_614405, "Version", newJString(Version))
  add(query_614405, "MaxRecords", newJInt(MaxRecords))
  add(query_614405, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_614404.call(nil, query_614405, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_614383(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_614384, base: "/",
    url: url_GetDescribeReservedCacheNodes_614385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_614452 = ref object of OpenApiRestCall_612658
proc url_PostDescribeReservedCacheNodesOfferings_614454(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_614453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614455 = query.getOrDefault("Action")
  valid_614455 = validateParameter(valid_614455, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_614455 != nil:
    section.add "Action", valid_614455
  var valid_614456 = query.getOrDefault("Version")
  valid_614456 = validateParameter(valid_614456, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614456 != nil:
    section.add "Version", valid_614456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614457 = header.getOrDefault("X-Amz-Signature")
  valid_614457 = validateParameter(valid_614457, JString, required = false,
                                 default = nil)
  if valid_614457 != nil:
    section.add "X-Amz-Signature", valid_614457
  var valid_614458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614458 = validateParameter(valid_614458, JString, required = false,
                                 default = nil)
  if valid_614458 != nil:
    section.add "X-Amz-Content-Sha256", valid_614458
  var valid_614459 = header.getOrDefault("X-Amz-Date")
  valid_614459 = validateParameter(valid_614459, JString, required = false,
                                 default = nil)
  if valid_614459 != nil:
    section.add "X-Amz-Date", valid_614459
  var valid_614460 = header.getOrDefault("X-Amz-Credential")
  valid_614460 = validateParameter(valid_614460, JString, required = false,
                                 default = nil)
  if valid_614460 != nil:
    section.add "X-Amz-Credential", valid_614460
  var valid_614461 = header.getOrDefault("X-Amz-Security-Token")
  valid_614461 = validateParameter(valid_614461, JString, required = false,
                                 default = nil)
  if valid_614461 != nil:
    section.add "X-Amz-Security-Token", valid_614461
  var valid_614462 = header.getOrDefault("X-Amz-Algorithm")
  valid_614462 = validateParameter(valid_614462, JString, required = false,
                                 default = nil)
  if valid_614462 != nil:
    section.add "X-Amz-Algorithm", valid_614462
  var valid_614463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614463 = validateParameter(valid_614463, JString, required = false,
                                 default = nil)
  if valid_614463 != nil:
    section.add "X-Amz-SignedHeaders", valid_614463
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_614464 = formData.getOrDefault("MaxRecords")
  valid_614464 = validateParameter(valid_614464, JInt, required = false, default = nil)
  if valid_614464 != nil:
    section.add "MaxRecords", valid_614464
  var valid_614465 = formData.getOrDefault("Marker")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "Marker", valid_614465
  var valid_614466 = formData.getOrDefault("Duration")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "Duration", valid_614466
  var valid_614467 = formData.getOrDefault("OfferingType")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "OfferingType", valid_614467
  var valid_614468 = formData.getOrDefault("ProductDescription")
  valid_614468 = validateParameter(valid_614468, JString, required = false,
                                 default = nil)
  if valid_614468 != nil:
    section.add "ProductDescription", valid_614468
  var valid_614469 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_614469 = validateParameter(valid_614469, JString, required = false,
                                 default = nil)
  if valid_614469 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_614469
  var valid_614470 = formData.getOrDefault("CacheNodeType")
  valid_614470 = validateParameter(valid_614470, JString, required = false,
                                 default = nil)
  if valid_614470 != nil:
    section.add "CacheNodeType", valid_614470
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614471: Call_PostDescribeReservedCacheNodesOfferings_614452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_614471.validator(path, query, header, formData, body)
  let scheme = call_614471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614471.url(scheme.get, call_614471.host, call_614471.base,
                         call_614471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614471, url, valid)

proc call*(call_614472: Call_PostDescribeReservedCacheNodesOfferings_614452;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_614473 = newJObject()
  var formData_614474 = newJObject()
  add(formData_614474, "MaxRecords", newJInt(MaxRecords))
  add(formData_614474, "Marker", newJString(Marker))
  add(formData_614474, "Duration", newJString(Duration))
  add(formData_614474, "OfferingType", newJString(OfferingType))
  add(formData_614474, "ProductDescription", newJString(ProductDescription))
  add(query_614473, "Action", newJString(Action))
  add(query_614473, "Version", newJString(Version))
  add(formData_614474, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_614474, "CacheNodeType", newJString(CacheNodeType))
  result = call_614472.call(nil, query_614473, nil, formData_614474, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_614452(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_614453, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_614454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_614430 = ref object of OpenApiRestCall_612658
proc url_GetDescribeReservedCacheNodesOfferings_614432(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_614431(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_614433 = query.getOrDefault("Marker")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = nil)
  if valid_614433 != nil:
    section.add "Marker", valid_614433
  var valid_614434 = query.getOrDefault("ProductDescription")
  valid_614434 = validateParameter(valid_614434, JString, required = false,
                                 default = nil)
  if valid_614434 != nil:
    section.add "ProductDescription", valid_614434
  var valid_614435 = query.getOrDefault("OfferingType")
  valid_614435 = validateParameter(valid_614435, JString, required = false,
                                 default = nil)
  if valid_614435 != nil:
    section.add "OfferingType", valid_614435
  var valid_614436 = query.getOrDefault("CacheNodeType")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "CacheNodeType", valid_614436
  var valid_614437 = query.getOrDefault("Action")
  valid_614437 = validateParameter(valid_614437, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_614437 != nil:
    section.add "Action", valid_614437
  var valid_614438 = query.getOrDefault("Duration")
  valid_614438 = validateParameter(valid_614438, JString, required = false,
                                 default = nil)
  if valid_614438 != nil:
    section.add "Duration", valid_614438
  var valid_614439 = query.getOrDefault("Version")
  valid_614439 = validateParameter(valid_614439, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614439 != nil:
    section.add "Version", valid_614439
  var valid_614440 = query.getOrDefault("MaxRecords")
  valid_614440 = validateParameter(valid_614440, JInt, required = false, default = nil)
  if valid_614440 != nil:
    section.add "MaxRecords", valid_614440
  var valid_614441 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_614441 = validateParameter(valid_614441, JString, required = false,
                                 default = nil)
  if valid_614441 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_614441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614442 = header.getOrDefault("X-Amz-Signature")
  valid_614442 = validateParameter(valid_614442, JString, required = false,
                                 default = nil)
  if valid_614442 != nil:
    section.add "X-Amz-Signature", valid_614442
  var valid_614443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614443 = validateParameter(valid_614443, JString, required = false,
                                 default = nil)
  if valid_614443 != nil:
    section.add "X-Amz-Content-Sha256", valid_614443
  var valid_614444 = header.getOrDefault("X-Amz-Date")
  valid_614444 = validateParameter(valid_614444, JString, required = false,
                                 default = nil)
  if valid_614444 != nil:
    section.add "X-Amz-Date", valid_614444
  var valid_614445 = header.getOrDefault("X-Amz-Credential")
  valid_614445 = validateParameter(valid_614445, JString, required = false,
                                 default = nil)
  if valid_614445 != nil:
    section.add "X-Amz-Credential", valid_614445
  var valid_614446 = header.getOrDefault("X-Amz-Security-Token")
  valid_614446 = validateParameter(valid_614446, JString, required = false,
                                 default = nil)
  if valid_614446 != nil:
    section.add "X-Amz-Security-Token", valid_614446
  var valid_614447 = header.getOrDefault("X-Amz-Algorithm")
  valid_614447 = validateParameter(valid_614447, JString, required = false,
                                 default = nil)
  if valid_614447 != nil:
    section.add "X-Amz-Algorithm", valid_614447
  var valid_614448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614448 = validateParameter(valid_614448, JString, required = false,
                                 default = nil)
  if valid_614448 != nil:
    section.add "X-Amz-SignedHeaders", valid_614448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614449: Call_GetDescribeReservedCacheNodesOfferings_614430;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_614449.validator(path, query, header, formData, body)
  let scheme = call_614449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614449.url(scheme.get, call_614449.host, call_614449.base,
                         call_614449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614449, url, valid)

proc call*(call_614450: Call_GetDescribeReservedCacheNodesOfferings_614430;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_614451 = newJObject()
  add(query_614451, "Marker", newJString(Marker))
  add(query_614451, "ProductDescription", newJString(ProductDescription))
  add(query_614451, "OfferingType", newJString(OfferingType))
  add(query_614451, "CacheNodeType", newJString(CacheNodeType))
  add(query_614451, "Action", newJString(Action))
  add(query_614451, "Duration", newJString(Duration))
  add(query_614451, "Version", newJString(Version))
  add(query_614451, "MaxRecords", newJInt(MaxRecords))
  add(query_614451, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_614450.call(nil, query_614451, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_614430(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_614431, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_614432,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_614494 = ref object of OpenApiRestCall_612658
proc url_PostDescribeServiceUpdates_614496(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeServiceUpdates_614495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614497 = query.getOrDefault("Action")
  valid_614497 = validateParameter(valid_614497, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_614497 != nil:
    section.add "Action", valid_614497
  var valid_614498 = query.getOrDefault("Version")
  valid_614498 = validateParameter(valid_614498, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614498 != nil:
    section.add "Version", valid_614498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614499 = header.getOrDefault("X-Amz-Signature")
  valid_614499 = validateParameter(valid_614499, JString, required = false,
                                 default = nil)
  if valid_614499 != nil:
    section.add "X-Amz-Signature", valid_614499
  var valid_614500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614500 = validateParameter(valid_614500, JString, required = false,
                                 default = nil)
  if valid_614500 != nil:
    section.add "X-Amz-Content-Sha256", valid_614500
  var valid_614501 = header.getOrDefault("X-Amz-Date")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "X-Amz-Date", valid_614501
  var valid_614502 = header.getOrDefault("X-Amz-Credential")
  valid_614502 = validateParameter(valid_614502, JString, required = false,
                                 default = nil)
  if valid_614502 != nil:
    section.add "X-Amz-Credential", valid_614502
  var valid_614503 = header.getOrDefault("X-Amz-Security-Token")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Security-Token", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-Algorithm")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-Algorithm", valid_614504
  var valid_614505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614505 = validateParameter(valid_614505, JString, required = false,
                                 default = nil)
  if valid_614505 != nil:
    section.add "X-Amz-SignedHeaders", valid_614505
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_614506 = formData.getOrDefault("MaxRecords")
  valid_614506 = validateParameter(valid_614506, JInt, required = false, default = nil)
  if valid_614506 != nil:
    section.add "MaxRecords", valid_614506
  var valid_614507 = formData.getOrDefault("ServiceUpdateName")
  valid_614507 = validateParameter(valid_614507, JString, required = false,
                                 default = nil)
  if valid_614507 != nil:
    section.add "ServiceUpdateName", valid_614507
  var valid_614508 = formData.getOrDefault("Marker")
  valid_614508 = validateParameter(valid_614508, JString, required = false,
                                 default = nil)
  if valid_614508 != nil:
    section.add "Marker", valid_614508
  var valid_614509 = formData.getOrDefault("ServiceUpdateStatus")
  valid_614509 = validateParameter(valid_614509, JArray, required = false,
                                 default = nil)
  if valid_614509 != nil:
    section.add "ServiceUpdateStatus", valid_614509
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614510: Call_PostDescribeServiceUpdates_614494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_614510.validator(path, query, header, formData, body)
  let scheme = call_614510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614510.url(scheme.get, call_614510.host, call_614510.base,
                         call_614510.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614510, url, valid)

proc call*(call_614511: Call_PostDescribeServiceUpdates_614494;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_614512 = newJObject()
  var formData_614513 = newJObject()
  add(formData_614513, "MaxRecords", newJInt(MaxRecords))
  add(formData_614513, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_614513, "Marker", newJString(Marker))
  add(query_614512, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_614513.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_614512, "Version", newJString(Version))
  result = call_614511.call(nil, query_614512, nil, formData_614513, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_614494(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_614495, base: "/",
    url: url_PostDescribeServiceUpdates_614496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_614475 = ref object of OpenApiRestCall_612658
proc url_GetDescribeServiceUpdates_614477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeServiceUpdates_614476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_614478 = query.getOrDefault("Marker")
  valid_614478 = validateParameter(valid_614478, JString, required = false,
                                 default = nil)
  if valid_614478 != nil:
    section.add "Marker", valid_614478
  var valid_614479 = query.getOrDefault("ServiceUpdateName")
  valid_614479 = validateParameter(valid_614479, JString, required = false,
                                 default = nil)
  if valid_614479 != nil:
    section.add "ServiceUpdateName", valid_614479
  var valid_614480 = query.getOrDefault("Action")
  valid_614480 = validateParameter(valid_614480, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_614480 != nil:
    section.add "Action", valid_614480
  var valid_614481 = query.getOrDefault("ServiceUpdateStatus")
  valid_614481 = validateParameter(valid_614481, JArray, required = false,
                                 default = nil)
  if valid_614481 != nil:
    section.add "ServiceUpdateStatus", valid_614481
  var valid_614482 = query.getOrDefault("Version")
  valid_614482 = validateParameter(valid_614482, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614482 != nil:
    section.add "Version", valid_614482
  var valid_614483 = query.getOrDefault("MaxRecords")
  valid_614483 = validateParameter(valid_614483, JInt, required = false, default = nil)
  if valid_614483 != nil:
    section.add "MaxRecords", valid_614483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614484 = header.getOrDefault("X-Amz-Signature")
  valid_614484 = validateParameter(valid_614484, JString, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "X-Amz-Signature", valid_614484
  var valid_614485 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614485 = validateParameter(valid_614485, JString, required = false,
                                 default = nil)
  if valid_614485 != nil:
    section.add "X-Amz-Content-Sha256", valid_614485
  var valid_614486 = header.getOrDefault("X-Amz-Date")
  valid_614486 = validateParameter(valid_614486, JString, required = false,
                                 default = nil)
  if valid_614486 != nil:
    section.add "X-Amz-Date", valid_614486
  var valid_614487 = header.getOrDefault("X-Amz-Credential")
  valid_614487 = validateParameter(valid_614487, JString, required = false,
                                 default = nil)
  if valid_614487 != nil:
    section.add "X-Amz-Credential", valid_614487
  var valid_614488 = header.getOrDefault("X-Amz-Security-Token")
  valid_614488 = validateParameter(valid_614488, JString, required = false,
                                 default = nil)
  if valid_614488 != nil:
    section.add "X-Amz-Security-Token", valid_614488
  var valid_614489 = header.getOrDefault("X-Amz-Algorithm")
  valid_614489 = validateParameter(valid_614489, JString, required = false,
                                 default = nil)
  if valid_614489 != nil:
    section.add "X-Amz-Algorithm", valid_614489
  var valid_614490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614490 = validateParameter(valid_614490, JString, required = false,
                                 default = nil)
  if valid_614490 != nil:
    section.add "X-Amz-SignedHeaders", valid_614490
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614491: Call_GetDescribeServiceUpdates_614475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_614491.validator(path, query, header, formData, body)
  let scheme = call_614491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614491.url(scheme.get, call_614491.host, call_614491.base,
                         call_614491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614491, url, valid)

proc call*(call_614492: Call_GetDescribeServiceUpdates_614475; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_614493 = newJObject()
  add(query_614493, "Marker", newJString(Marker))
  add(query_614493, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_614493, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_614493.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_614493, "Version", newJString(Version))
  add(query_614493, "MaxRecords", newJInt(MaxRecords))
  result = call_614492.call(nil, query_614493, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_614475(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_614476, base: "/",
    url: url_GetDescribeServiceUpdates_614477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_614536 = ref object of OpenApiRestCall_612658
proc url_PostDescribeSnapshots_614538(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSnapshots_614537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614539 = query.getOrDefault("Action")
  valid_614539 = validateParameter(valid_614539, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_614539 != nil:
    section.add "Action", valid_614539
  var valid_614540 = query.getOrDefault("Version")
  valid_614540 = validateParameter(valid_614540, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614540 != nil:
    section.add "Version", valid_614540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614541 = header.getOrDefault("X-Amz-Signature")
  valid_614541 = validateParameter(valid_614541, JString, required = false,
                                 default = nil)
  if valid_614541 != nil:
    section.add "X-Amz-Signature", valid_614541
  var valid_614542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614542 = validateParameter(valid_614542, JString, required = false,
                                 default = nil)
  if valid_614542 != nil:
    section.add "X-Amz-Content-Sha256", valid_614542
  var valid_614543 = header.getOrDefault("X-Amz-Date")
  valid_614543 = validateParameter(valid_614543, JString, required = false,
                                 default = nil)
  if valid_614543 != nil:
    section.add "X-Amz-Date", valid_614543
  var valid_614544 = header.getOrDefault("X-Amz-Credential")
  valid_614544 = validateParameter(valid_614544, JString, required = false,
                                 default = nil)
  if valid_614544 != nil:
    section.add "X-Amz-Credential", valid_614544
  var valid_614545 = header.getOrDefault("X-Amz-Security-Token")
  valid_614545 = validateParameter(valid_614545, JString, required = false,
                                 default = nil)
  if valid_614545 != nil:
    section.add "X-Amz-Security-Token", valid_614545
  var valid_614546 = header.getOrDefault("X-Amz-Algorithm")
  valid_614546 = validateParameter(valid_614546, JString, required = false,
                                 default = nil)
  if valid_614546 != nil:
    section.add "X-Amz-Algorithm", valid_614546
  var valid_614547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614547 = validateParameter(valid_614547, JString, required = false,
                                 default = nil)
  if valid_614547 != nil:
    section.add "X-Amz-SignedHeaders", valid_614547
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_614548 = formData.getOrDefault("CacheClusterId")
  valid_614548 = validateParameter(valid_614548, JString, required = false,
                                 default = nil)
  if valid_614548 != nil:
    section.add "CacheClusterId", valid_614548
  var valid_614549 = formData.getOrDefault("MaxRecords")
  valid_614549 = validateParameter(valid_614549, JInt, required = false, default = nil)
  if valid_614549 != nil:
    section.add "MaxRecords", valid_614549
  var valid_614550 = formData.getOrDefault("Marker")
  valid_614550 = validateParameter(valid_614550, JString, required = false,
                                 default = nil)
  if valid_614550 != nil:
    section.add "Marker", valid_614550
  var valid_614551 = formData.getOrDefault("SnapshotName")
  valid_614551 = validateParameter(valid_614551, JString, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "SnapshotName", valid_614551
  var valid_614552 = formData.getOrDefault("SnapshotSource")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "SnapshotSource", valid_614552
  var valid_614553 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_614553 = validateParameter(valid_614553, JBool, required = false, default = nil)
  if valid_614553 != nil:
    section.add "ShowNodeGroupConfig", valid_614553
  var valid_614554 = formData.getOrDefault("ReplicationGroupId")
  valid_614554 = validateParameter(valid_614554, JString, required = false,
                                 default = nil)
  if valid_614554 != nil:
    section.add "ReplicationGroupId", valid_614554
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614555: Call_PostDescribeSnapshots_614536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614555.validator(path, query, header, formData, body)
  let scheme = call_614555.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614555.url(scheme.get, call_614555.host, call_614555.base,
                         call_614555.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614555, url, valid)

proc call*(call_614556: Call_PostDescribeSnapshots_614536;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_614557 = newJObject()
  var formData_614558 = newJObject()
  add(formData_614558, "CacheClusterId", newJString(CacheClusterId))
  add(formData_614558, "MaxRecords", newJInt(MaxRecords))
  add(formData_614558, "Marker", newJString(Marker))
  add(formData_614558, "SnapshotName", newJString(SnapshotName))
  add(formData_614558, "SnapshotSource", newJString(SnapshotSource))
  add(query_614557, "Action", newJString(Action))
  add(formData_614558, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_614557, "Version", newJString(Version))
  add(formData_614558, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_614556.call(nil, query_614557, nil, formData_614558, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_614536(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_614537, base: "/",
    url: url_PostDescribeSnapshots_614538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_614514 = ref object of OpenApiRestCall_612658
proc url_GetDescribeSnapshots_614516(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSnapshots_614515(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_614517 = query.getOrDefault("Marker")
  valid_614517 = validateParameter(valid_614517, JString, required = false,
                                 default = nil)
  if valid_614517 != nil:
    section.add "Marker", valid_614517
  var valid_614518 = query.getOrDefault("CacheClusterId")
  valid_614518 = validateParameter(valid_614518, JString, required = false,
                                 default = nil)
  if valid_614518 != nil:
    section.add "CacheClusterId", valid_614518
  var valid_614519 = query.getOrDefault("Action")
  valid_614519 = validateParameter(valid_614519, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_614519 != nil:
    section.add "Action", valid_614519
  var valid_614520 = query.getOrDefault("ReplicationGroupId")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "ReplicationGroupId", valid_614520
  var valid_614521 = query.getOrDefault("Version")
  valid_614521 = validateParameter(valid_614521, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614521 != nil:
    section.add "Version", valid_614521
  var valid_614522 = query.getOrDefault("SnapshotName")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "SnapshotName", valid_614522
  var valid_614523 = query.getOrDefault("SnapshotSource")
  valid_614523 = validateParameter(valid_614523, JString, required = false,
                                 default = nil)
  if valid_614523 != nil:
    section.add "SnapshotSource", valid_614523
  var valid_614524 = query.getOrDefault("MaxRecords")
  valid_614524 = validateParameter(valid_614524, JInt, required = false, default = nil)
  if valid_614524 != nil:
    section.add "MaxRecords", valid_614524
  var valid_614525 = query.getOrDefault("ShowNodeGroupConfig")
  valid_614525 = validateParameter(valid_614525, JBool, required = false, default = nil)
  if valid_614525 != nil:
    section.add "ShowNodeGroupConfig", valid_614525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614526 = header.getOrDefault("X-Amz-Signature")
  valid_614526 = validateParameter(valid_614526, JString, required = false,
                                 default = nil)
  if valid_614526 != nil:
    section.add "X-Amz-Signature", valid_614526
  var valid_614527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614527 = validateParameter(valid_614527, JString, required = false,
                                 default = nil)
  if valid_614527 != nil:
    section.add "X-Amz-Content-Sha256", valid_614527
  var valid_614528 = header.getOrDefault("X-Amz-Date")
  valid_614528 = validateParameter(valid_614528, JString, required = false,
                                 default = nil)
  if valid_614528 != nil:
    section.add "X-Amz-Date", valid_614528
  var valid_614529 = header.getOrDefault("X-Amz-Credential")
  valid_614529 = validateParameter(valid_614529, JString, required = false,
                                 default = nil)
  if valid_614529 != nil:
    section.add "X-Amz-Credential", valid_614529
  var valid_614530 = header.getOrDefault("X-Amz-Security-Token")
  valid_614530 = validateParameter(valid_614530, JString, required = false,
                                 default = nil)
  if valid_614530 != nil:
    section.add "X-Amz-Security-Token", valid_614530
  var valid_614531 = header.getOrDefault("X-Amz-Algorithm")
  valid_614531 = validateParameter(valid_614531, JString, required = false,
                                 default = nil)
  if valid_614531 != nil:
    section.add "X-Amz-Algorithm", valid_614531
  var valid_614532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614532 = validateParameter(valid_614532, JString, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "X-Amz-SignedHeaders", valid_614532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614533: Call_GetDescribeSnapshots_614514; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614533.validator(path, query, header, formData, body)
  let scheme = call_614533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614533.url(scheme.get, call_614533.host, call_614533.base,
                         call_614533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614533, url, valid)

proc call*(call_614534: Call_GetDescribeSnapshots_614514; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_614535 = newJObject()
  add(query_614535, "Marker", newJString(Marker))
  add(query_614535, "CacheClusterId", newJString(CacheClusterId))
  add(query_614535, "Action", newJString(Action))
  add(query_614535, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_614535, "Version", newJString(Version))
  add(query_614535, "SnapshotName", newJString(SnapshotName))
  add(query_614535, "SnapshotSource", newJString(SnapshotSource))
  add(query_614535, "MaxRecords", newJInt(MaxRecords))
  add(query_614535, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_614534.call(nil, query_614535, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_614514(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_614515, base: "/",
    url: url_GetDescribeSnapshots_614516, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_614585 = ref object of OpenApiRestCall_612658
proc url_PostDescribeUpdateActions_614587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeUpdateActions_614586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614588 = query.getOrDefault("Action")
  valid_614588 = validateParameter(valid_614588, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_614588 != nil:
    section.add "Action", valid_614588
  var valid_614589 = query.getOrDefault("Version")
  valid_614589 = validateParameter(valid_614589, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614589 != nil:
    section.add "Version", valid_614589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614590 = header.getOrDefault("X-Amz-Signature")
  valid_614590 = validateParameter(valid_614590, JString, required = false,
                                 default = nil)
  if valid_614590 != nil:
    section.add "X-Amz-Signature", valid_614590
  var valid_614591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614591 = validateParameter(valid_614591, JString, required = false,
                                 default = nil)
  if valid_614591 != nil:
    section.add "X-Amz-Content-Sha256", valid_614591
  var valid_614592 = header.getOrDefault("X-Amz-Date")
  valid_614592 = validateParameter(valid_614592, JString, required = false,
                                 default = nil)
  if valid_614592 != nil:
    section.add "X-Amz-Date", valid_614592
  var valid_614593 = header.getOrDefault("X-Amz-Credential")
  valid_614593 = validateParameter(valid_614593, JString, required = false,
                                 default = nil)
  if valid_614593 != nil:
    section.add "X-Amz-Credential", valid_614593
  var valid_614594 = header.getOrDefault("X-Amz-Security-Token")
  valid_614594 = validateParameter(valid_614594, JString, required = false,
                                 default = nil)
  if valid_614594 != nil:
    section.add "X-Amz-Security-Token", valid_614594
  var valid_614595 = header.getOrDefault("X-Amz-Algorithm")
  valid_614595 = validateParameter(valid_614595, JString, required = false,
                                 default = nil)
  if valid_614595 != nil:
    section.add "X-Amz-Algorithm", valid_614595
  var valid_614596 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614596 = validateParameter(valid_614596, JString, required = false,
                                 default = nil)
  if valid_614596 != nil:
    section.add "X-Amz-SignedHeaders", valid_614596
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_614597 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_614597 = validateParameter(valid_614597, JString, required = false,
                                 default = nil)
  if valid_614597 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_614597
  var valid_614598 = formData.getOrDefault("MaxRecords")
  valid_614598 = validateParameter(valid_614598, JInt, required = false, default = nil)
  if valid_614598 != nil:
    section.add "MaxRecords", valid_614598
  var valid_614599 = formData.getOrDefault("ServiceUpdateName")
  valid_614599 = validateParameter(valid_614599, JString, required = false,
                                 default = nil)
  if valid_614599 != nil:
    section.add "ServiceUpdateName", valid_614599
  var valid_614600 = formData.getOrDefault("ReplicationGroupIds")
  valid_614600 = validateParameter(valid_614600, JArray, required = false,
                                 default = nil)
  if valid_614600 != nil:
    section.add "ReplicationGroupIds", valid_614600
  var valid_614601 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_614601 = validateParameter(valid_614601, JString, required = false,
                                 default = nil)
  if valid_614601 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_614601
  var valid_614602 = formData.getOrDefault("Marker")
  valid_614602 = validateParameter(valid_614602, JString, required = false,
                                 default = nil)
  if valid_614602 != nil:
    section.add "Marker", valid_614602
  var valid_614603 = formData.getOrDefault("CacheClusterIds")
  valid_614603 = validateParameter(valid_614603, JArray, required = false,
                                 default = nil)
  if valid_614603 != nil:
    section.add "CacheClusterIds", valid_614603
  var valid_614604 = formData.getOrDefault("Engine")
  valid_614604 = validateParameter(valid_614604, JString, required = false,
                                 default = nil)
  if valid_614604 != nil:
    section.add "Engine", valid_614604
  var valid_614605 = formData.getOrDefault("UpdateActionStatus")
  valid_614605 = validateParameter(valid_614605, JArray, required = false,
                                 default = nil)
  if valid_614605 != nil:
    section.add "UpdateActionStatus", valid_614605
  var valid_614606 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_614606 = validateParameter(valid_614606, JBool, required = false, default = nil)
  if valid_614606 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_614606
  var valid_614607 = formData.getOrDefault("ServiceUpdateStatus")
  valid_614607 = validateParameter(valid_614607, JArray, required = false,
                                 default = nil)
  if valid_614607 != nil:
    section.add "ServiceUpdateStatus", valid_614607
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614608: Call_PostDescribeUpdateActions_614585; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_614608.validator(path, query, header, formData, body)
  let scheme = call_614608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614608.url(scheme.get, call_614608.host, call_614608.base,
                         call_614608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614608, url, valid)

proc call*(call_614609: Call_PostDescribeUpdateActions_614585;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          CacheClusterIds: JsonNode = nil; Engine: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_614610 = newJObject()
  var formData_614611 = newJObject()
  add(formData_614611, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_614611, "MaxRecords", newJInt(MaxRecords))
  add(formData_614611, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_614611.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_614611, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_614611, "Marker", newJString(Marker))
  if CacheClusterIds != nil:
    formData_614611.add "CacheClusterIds", CacheClusterIds
  add(formData_614611, "Engine", newJString(Engine))
  if UpdateActionStatus != nil:
    formData_614611.add "UpdateActionStatus", UpdateActionStatus
  add(formData_614611, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_614610, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_614611.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_614610, "Version", newJString(Version))
  result = call_614609.call(nil, query_614610, nil, formData_614611, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_614585(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_614586, base: "/",
    url: url_PostDescribeUpdateActions_614587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_614559 = ref object of OpenApiRestCall_612658
proc url_GetDescribeUpdateActions_614561(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeUpdateActions_614560(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_614562 = query.getOrDefault("Marker")
  valid_614562 = validateParameter(valid_614562, JString, required = false,
                                 default = nil)
  if valid_614562 != nil:
    section.add "Marker", valid_614562
  var valid_614563 = query.getOrDefault("ServiceUpdateName")
  valid_614563 = validateParameter(valid_614563, JString, required = false,
                                 default = nil)
  if valid_614563 != nil:
    section.add "ServiceUpdateName", valid_614563
  var valid_614564 = query.getOrDefault("Engine")
  valid_614564 = validateParameter(valid_614564, JString, required = false,
                                 default = nil)
  if valid_614564 != nil:
    section.add "Engine", valid_614564
  var valid_614565 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_614565 = validateParameter(valid_614565, JString, required = false,
                                 default = nil)
  if valid_614565 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_614565
  var valid_614566 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_614566 = validateParameter(valid_614566, JBool, required = false, default = nil)
  if valid_614566 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_614566
  var valid_614567 = query.getOrDefault("UpdateActionStatus")
  valid_614567 = validateParameter(valid_614567, JArray, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "UpdateActionStatus", valid_614567
  var valid_614568 = query.getOrDefault("Action")
  valid_614568 = validateParameter(valid_614568, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_614568 != nil:
    section.add "Action", valid_614568
  var valid_614569 = query.getOrDefault("CacheClusterIds")
  valid_614569 = validateParameter(valid_614569, JArray, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "CacheClusterIds", valid_614569
  var valid_614570 = query.getOrDefault("ServiceUpdateStatus")
  valid_614570 = validateParameter(valid_614570, JArray, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "ServiceUpdateStatus", valid_614570
  var valid_614571 = query.getOrDefault("ReplicationGroupIds")
  valid_614571 = validateParameter(valid_614571, JArray, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "ReplicationGroupIds", valid_614571
  var valid_614572 = query.getOrDefault("Version")
  valid_614572 = validateParameter(valid_614572, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614572 != nil:
    section.add "Version", valid_614572
  var valid_614573 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_614573 = validateParameter(valid_614573, JString, required = false,
                                 default = nil)
  if valid_614573 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_614573
  var valid_614574 = query.getOrDefault("MaxRecords")
  valid_614574 = validateParameter(valid_614574, JInt, required = false, default = nil)
  if valid_614574 != nil:
    section.add "MaxRecords", valid_614574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614575 = header.getOrDefault("X-Amz-Signature")
  valid_614575 = validateParameter(valid_614575, JString, required = false,
                                 default = nil)
  if valid_614575 != nil:
    section.add "X-Amz-Signature", valid_614575
  var valid_614576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614576 = validateParameter(valid_614576, JString, required = false,
                                 default = nil)
  if valid_614576 != nil:
    section.add "X-Amz-Content-Sha256", valid_614576
  var valid_614577 = header.getOrDefault("X-Amz-Date")
  valid_614577 = validateParameter(valid_614577, JString, required = false,
                                 default = nil)
  if valid_614577 != nil:
    section.add "X-Amz-Date", valid_614577
  var valid_614578 = header.getOrDefault("X-Amz-Credential")
  valid_614578 = validateParameter(valid_614578, JString, required = false,
                                 default = nil)
  if valid_614578 != nil:
    section.add "X-Amz-Credential", valid_614578
  var valid_614579 = header.getOrDefault("X-Amz-Security-Token")
  valid_614579 = validateParameter(valid_614579, JString, required = false,
                                 default = nil)
  if valid_614579 != nil:
    section.add "X-Amz-Security-Token", valid_614579
  var valid_614580 = header.getOrDefault("X-Amz-Algorithm")
  valid_614580 = validateParameter(valid_614580, JString, required = false,
                                 default = nil)
  if valid_614580 != nil:
    section.add "X-Amz-Algorithm", valid_614580
  var valid_614581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614581 = validateParameter(valid_614581, JString, required = false,
                                 default = nil)
  if valid_614581 != nil:
    section.add "X-Amz-SignedHeaders", valid_614581
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614582: Call_GetDescribeUpdateActions_614559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_614582.validator(path, query, header, formData, body)
  let scheme = call_614582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614582.url(scheme.get, call_614582.host, call_614582.base,
                         call_614582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614582, url, valid)

proc call*(call_614583: Call_GetDescribeUpdateActions_614559; Marker: string = "";
          ServiceUpdateName: string = ""; Engine: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions"; CacheClusterIds: JsonNode = nil;
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_614584 = newJObject()
  add(query_614584, "Marker", newJString(Marker))
  add(query_614584, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_614584, "Engine", newJString(Engine))
  add(query_614584, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_614584, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_614584.add "UpdateActionStatus", UpdateActionStatus
  add(query_614584, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_614584.add "CacheClusterIds", CacheClusterIds
  if ServiceUpdateStatus != nil:
    query_614584.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_614584.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_614584, "Version", newJString(Version))
  add(query_614584, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_614584, "MaxRecords", newJInt(MaxRecords))
  result = call_614583.call(nil, query_614584, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_614559(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_614560, base: "/",
    url: url_GetDescribeUpdateActions_614561, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_614631 = ref object of OpenApiRestCall_612658
proc url_PostIncreaseReplicaCount_614633(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostIncreaseReplicaCount_614632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614634 = query.getOrDefault("Action")
  valid_614634 = validateParameter(valid_614634, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_614634 != nil:
    section.add "Action", valid_614634
  var valid_614635 = query.getOrDefault("Version")
  valid_614635 = validateParameter(valid_614635, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614635 != nil:
    section.add "Version", valid_614635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614636 = header.getOrDefault("X-Amz-Signature")
  valid_614636 = validateParameter(valid_614636, JString, required = false,
                                 default = nil)
  if valid_614636 != nil:
    section.add "X-Amz-Signature", valid_614636
  var valid_614637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "X-Amz-Content-Sha256", valid_614637
  var valid_614638 = header.getOrDefault("X-Amz-Date")
  valid_614638 = validateParameter(valid_614638, JString, required = false,
                                 default = nil)
  if valid_614638 != nil:
    section.add "X-Amz-Date", valid_614638
  var valid_614639 = header.getOrDefault("X-Amz-Credential")
  valid_614639 = validateParameter(valid_614639, JString, required = false,
                                 default = nil)
  if valid_614639 != nil:
    section.add "X-Amz-Credential", valid_614639
  var valid_614640 = header.getOrDefault("X-Amz-Security-Token")
  valid_614640 = validateParameter(valid_614640, JString, required = false,
                                 default = nil)
  if valid_614640 != nil:
    section.add "X-Amz-Security-Token", valid_614640
  var valid_614641 = header.getOrDefault("X-Amz-Algorithm")
  valid_614641 = validateParameter(valid_614641, JString, required = false,
                                 default = nil)
  if valid_614641 != nil:
    section.add "X-Amz-Algorithm", valid_614641
  var valid_614642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614642 = validateParameter(valid_614642, JString, required = false,
                                 default = nil)
  if valid_614642 != nil:
    section.add "X-Amz-SignedHeaders", valid_614642
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_614643 = formData.getOrDefault("ReplicaConfiguration")
  valid_614643 = validateParameter(valid_614643, JArray, required = false,
                                 default = nil)
  if valid_614643 != nil:
    section.add "ReplicaConfiguration", valid_614643
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_614644 = formData.getOrDefault("ApplyImmediately")
  valid_614644 = validateParameter(valid_614644, JBool, required = true, default = nil)
  if valid_614644 != nil:
    section.add "ApplyImmediately", valid_614644
  var valid_614645 = formData.getOrDefault("NewReplicaCount")
  valid_614645 = validateParameter(valid_614645, JInt, required = false, default = nil)
  if valid_614645 != nil:
    section.add "NewReplicaCount", valid_614645
  var valid_614646 = formData.getOrDefault("ReplicationGroupId")
  valid_614646 = validateParameter(valid_614646, JString, required = true,
                                 default = nil)
  if valid_614646 != nil:
    section.add "ReplicationGroupId", valid_614646
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614647: Call_PostIncreaseReplicaCount_614631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_614647.validator(path, query, header, formData, body)
  let scheme = call_614647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614647.url(scheme.get, call_614647.host, call_614647.base,
                         call_614647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614647, url, valid)

proc call*(call_614648: Call_PostIncreaseReplicaCount_614631;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_614649 = newJObject()
  var formData_614650 = newJObject()
  if ReplicaConfiguration != nil:
    formData_614650.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_614650, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614649, "Action", newJString(Action))
  add(formData_614650, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_614649, "Version", newJString(Version))
  add(formData_614650, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_614648.call(nil, query_614649, nil, formData_614650, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_614631(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_614632, base: "/",
    url: url_PostIncreaseReplicaCount_614633, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_614612 = ref object of OpenApiRestCall_612658
proc url_GetIncreaseReplicaCount_614614(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetIncreaseReplicaCount_614613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_614615 = query.getOrDefault("NewReplicaCount")
  valid_614615 = validateParameter(valid_614615, JInt, required = false, default = nil)
  if valid_614615 != nil:
    section.add "NewReplicaCount", valid_614615
  var valid_614616 = query.getOrDefault("ReplicaConfiguration")
  valid_614616 = validateParameter(valid_614616, JArray, required = false,
                                 default = nil)
  if valid_614616 != nil:
    section.add "ReplicaConfiguration", valid_614616
  var valid_614617 = query.getOrDefault("Action")
  valid_614617 = validateParameter(valid_614617, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_614617 != nil:
    section.add "Action", valid_614617
  var valid_614618 = query.getOrDefault("ApplyImmediately")
  valid_614618 = validateParameter(valid_614618, JBool, required = true, default = nil)
  if valid_614618 != nil:
    section.add "ApplyImmediately", valid_614618
  var valid_614619 = query.getOrDefault("ReplicationGroupId")
  valid_614619 = validateParameter(valid_614619, JString, required = true,
                                 default = nil)
  if valid_614619 != nil:
    section.add "ReplicationGroupId", valid_614619
  var valid_614620 = query.getOrDefault("Version")
  valid_614620 = validateParameter(valid_614620, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614620 != nil:
    section.add "Version", valid_614620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614621 = header.getOrDefault("X-Amz-Signature")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "X-Amz-Signature", valid_614621
  var valid_614622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "X-Amz-Content-Sha256", valid_614622
  var valid_614623 = header.getOrDefault("X-Amz-Date")
  valid_614623 = validateParameter(valid_614623, JString, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "X-Amz-Date", valid_614623
  var valid_614624 = header.getOrDefault("X-Amz-Credential")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "X-Amz-Credential", valid_614624
  var valid_614625 = header.getOrDefault("X-Amz-Security-Token")
  valid_614625 = validateParameter(valid_614625, JString, required = false,
                                 default = nil)
  if valid_614625 != nil:
    section.add "X-Amz-Security-Token", valid_614625
  var valid_614626 = header.getOrDefault("X-Amz-Algorithm")
  valid_614626 = validateParameter(valid_614626, JString, required = false,
                                 default = nil)
  if valid_614626 != nil:
    section.add "X-Amz-Algorithm", valid_614626
  var valid_614627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614627 = validateParameter(valid_614627, JString, required = false,
                                 default = nil)
  if valid_614627 != nil:
    section.add "X-Amz-SignedHeaders", valid_614627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614628: Call_GetIncreaseReplicaCount_614612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_614628.validator(path, query, header, formData, body)
  let scheme = call_614628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614628.url(scheme.get, call_614628.host, call_614628.base,
                         call_614628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614628, url, valid)

proc call*(call_614629: Call_GetIncreaseReplicaCount_614612;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_614630 = newJObject()
  add(query_614630, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_614630.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_614630, "Action", newJString(Action))
  add(query_614630, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614630, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_614630, "Version", newJString(Version))
  result = call_614629.call(nil, query_614630, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_614612(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_614613, base: "/",
    url: url_GetIncreaseReplicaCount_614614, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_614668 = ref object of OpenApiRestCall_612658
proc url_PostListAllowedNodeTypeModifications_614670(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_614669(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614671 = query.getOrDefault("Action")
  valid_614671 = validateParameter(valid_614671, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_614671 != nil:
    section.add "Action", valid_614671
  var valid_614672 = query.getOrDefault("Version")
  valid_614672 = validateParameter(valid_614672, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614672 != nil:
    section.add "Version", valid_614672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614673 = header.getOrDefault("X-Amz-Signature")
  valid_614673 = validateParameter(valid_614673, JString, required = false,
                                 default = nil)
  if valid_614673 != nil:
    section.add "X-Amz-Signature", valid_614673
  var valid_614674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614674 = validateParameter(valid_614674, JString, required = false,
                                 default = nil)
  if valid_614674 != nil:
    section.add "X-Amz-Content-Sha256", valid_614674
  var valid_614675 = header.getOrDefault("X-Amz-Date")
  valid_614675 = validateParameter(valid_614675, JString, required = false,
                                 default = nil)
  if valid_614675 != nil:
    section.add "X-Amz-Date", valid_614675
  var valid_614676 = header.getOrDefault("X-Amz-Credential")
  valid_614676 = validateParameter(valid_614676, JString, required = false,
                                 default = nil)
  if valid_614676 != nil:
    section.add "X-Amz-Credential", valid_614676
  var valid_614677 = header.getOrDefault("X-Amz-Security-Token")
  valid_614677 = validateParameter(valid_614677, JString, required = false,
                                 default = nil)
  if valid_614677 != nil:
    section.add "X-Amz-Security-Token", valid_614677
  var valid_614678 = header.getOrDefault("X-Amz-Algorithm")
  valid_614678 = validateParameter(valid_614678, JString, required = false,
                                 default = nil)
  if valid_614678 != nil:
    section.add "X-Amz-Algorithm", valid_614678
  var valid_614679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614679 = validateParameter(valid_614679, JString, required = false,
                                 default = nil)
  if valid_614679 != nil:
    section.add "X-Amz-SignedHeaders", valid_614679
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_614680 = formData.getOrDefault("CacheClusterId")
  valid_614680 = validateParameter(valid_614680, JString, required = false,
                                 default = nil)
  if valid_614680 != nil:
    section.add "CacheClusterId", valid_614680
  var valid_614681 = formData.getOrDefault("ReplicationGroupId")
  valid_614681 = validateParameter(valid_614681, JString, required = false,
                                 default = nil)
  if valid_614681 != nil:
    section.add "ReplicationGroupId", valid_614681
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614682: Call_PostListAllowedNodeTypeModifications_614668;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_614682.validator(path, query, header, formData, body)
  let scheme = call_614682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614682.url(scheme.get, call_614682.host, call_614682.base,
                         call_614682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614682, url, valid)

proc call*(call_614683: Call_PostListAllowedNodeTypeModifications_614668;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_614684 = newJObject()
  var formData_614685 = newJObject()
  add(formData_614685, "CacheClusterId", newJString(CacheClusterId))
  add(query_614684, "Action", newJString(Action))
  add(query_614684, "Version", newJString(Version))
  add(formData_614685, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_614683.call(nil, query_614684, nil, formData_614685, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_614668(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_614669, base: "/",
    url: url_PostListAllowedNodeTypeModifications_614670,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_614651 = ref object of OpenApiRestCall_612658
proc url_GetListAllowedNodeTypeModifications_614653(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_614652(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614654 = query.getOrDefault("CacheClusterId")
  valid_614654 = validateParameter(valid_614654, JString, required = false,
                                 default = nil)
  if valid_614654 != nil:
    section.add "CacheClusterId", valid_614654
  var valid_614655 = query.getOrDefault("Action")
  valid_614655 = validateParameter(valid_614655, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_614655 != nil:
    section.add "Action", valid_614655
  var valid_614656 = query.getOrDefault("ReplicationGroupId")
  valid_614656 = validateParameter(valid_614656, JString, required = false,
                                 default = nil)
  if valid_614656 != nil:
    section.add "ReplicationGroupId", valid_614656
  var valid_614657 = query.getOrDefault("Version")
  valid_614657 = validateParameter(valid_614657, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614657 != nil:
    section.add "Version", valid_614657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614658 = header.getOrDefault("X-Amz-Signature")
  valid_614658 = validateParameter(valid_614658, JString, required = false,
                                 default = nil)
  if valid_614658 != nil:
    section.add "X-Amz-Signature", valid_614658
  var valid_614659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614659 = validateParameter(valid_614659, JString, required = false,
                                 default = nil)
  if valid_614659 != nil:
    section.add "X-Amz-Content-Sha256", valid_614659
  var valid_614660 = header.getOrDefault("X-Amz-Date")
  valid_614660 = validateParameter(valid_614660, JString, required = false,
                                 default = nil)
  if valid_614660 != nil:
    section.add "X-Amz-Date", valid_614660
  var valid_614661 = header.getOrDefault("X-Amz-Credential")
  valid_614661 = validateParameter(valid_614661, JString, required = false,
                                 default = nil)
  if valid_614661 != nil:
    section.add "X-Amz-Credential", valid_614661
  var valid_614662 = header.getOrDefault("X-Amz-Security-Token")
  valid_614662 = validateParameter(valid_614662, JString, required = false,
                                 default = nil)
  if valid_614662 != nil:
    section.add "X-Amz-Security-Token", valid_614662
  var valid_614663 = header.getOrDefault("X-Amz-Algorithm")
  valid_614663 = validateParameter(valid_614663, JString, required = false,
                                 default = nil)
  if valid_614663 != nil:
    section.add "X-Amz-Algorithm", valid_614663
  var valid_614664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614664 = validateParameter(valid_614664, JString, required = false,
                                 default = nil)
  if valid_614664 != nil:
    section.add "X-Amz-SignedHeaders", valid_614664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614665: Call_GetListAllowedNodeTypeModifications_614651;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_614665.validator(path, query, header, formData, body)
  let scheme = call_614665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614665.url(scheme.get, call_614665.host, call_614665.base,
                         call_614665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614665, url, valid)

proc call*(call_614666: Call_GetListAllowedNodeTypeModifications_614651;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_614667 = newJObject()
  add(query_614667, "CacheClusterId", newJString(CacheClusterId))
  add(query_614667, "Action", newJString(Action))
  add(query_614667, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_614667, "Version", newJString(Version))
  result = call_614666.call(nil, query_614667, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_614651(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_614652, base: "/",
    url: url_GetListAllowedNodeTypeModifications_614653,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_614702 = ref object of OpenApiRestCall_612658
proc url_PostListTagsForResource_614704(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_614703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614705 = query.getOrDefault("Action")
  valid_614705 = validateParameter(valid_614705, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614705 != nil:
    section.add "Action", valid_614705
  var valid_614706 = query.getOrDefault("Version")
  valid_614706 = validateParameter(valid_614706, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614706 != nil:
    section.add "Version", valid_614706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614707 = header.getOrDefault("X-Amz-Signature")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "X-Amz-Signature", valid_614707
  var valid_614708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614708 = validateParameter(valid_614708, JString, required = false,
                                 default = nil)
  if valid_614708 != nil:
    section.add "X-Amz-Content-Sha256", valid_614708
  var valid_614709 = header.getOrDefault("X-Amz-Date")
  valid_614709 = validateParameter(valid_614709, JString, required = false,
                                 default = nil)
  if valid_614709 != nil:
    section.add "X-Amz-Date", valid_614709
  var valid_614710 = header.getOrDefault("X-Amz-Credential")
  valid_614710 = validateParameter(valid_614710, JString, required = false,
                                 default = nil)
  if valid_614710 != nil:
    section.add "X-Amz-Credential", valid_614710
  var valid_614711 = header.getOrDefault("X-Amz-Security-Token")
  valid_614711 = validateParameter(valid_614711, JString, required = false,
                                 default = nil)
  if valid_614711 != nil:
    section.add "X-Amz-Security-Token", valid_614711
  var valid_614712 = header.getOrDefault("X-Amz-Algorithm")
  valid_614712 = validateParameter(valid_614712, JString, required = false,
                                 default = nil)
  if valid_614712 != nil:
    section.add "X-Amz-Algorithm", valid_614712
  var valid_614713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614713 = validateParameter(valid_614713, JString, required = false,
                                 default = nil)
  if valid_614713 != nil:
    section.add "X-Amz-SignedHeaders", valid_614713
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_614714 = formData.getOrDefault("ResourceName")
  valid_614714 = validateParameter(valid_614714, JString, required = true,
                                 default = nil)
  if valid_614714 != nil:
    section.add "ResourceName", valid_614714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614715: Call_PostListTagsForResource_614702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_614715.validator(path, query, header, formData, body)
  let scheme = call_614715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614715.url(scheme.get, call_614715.host, call_614715.base,
                         call_614715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614715, url, valid)

proc call*(call_614716: Call_PostListTagsForResource_614702; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_614717 = newJObject()
  var formData_614718 = newJObject()
  add(query_614717, "Action", newJString(Action))
  add(query_614717, "Version", newJString(Version))
  add(formData_614718, "ResourceName", newJString(ResourceName))
  result = call_614716.call(nil, query_614717, nil, formData_614718, nil)

var postListTagsForResource* = Call_PostListTagsForResource_614702(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_614703, base: "/",
    url: url_PostListTagsForResource_614704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_614686 = ref object of OpenApiRestCall_612658
proc url_GetListTagsForResource_614688(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_614687(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_614689 = query.getOrDefault("ResourceName")
  valid_614689 = validateParameter(valid_614689, JString, required = true,
                                 default = nil)
  if valid_614689 != nil:
    section.add "ResourceName", valid_614689
  var valid_614690 = query.getOrDefault("Action")
  valid_614690 = validateParameter(valid_614690, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_614690 != nil:
    section.add "Action", valid_614690
  var valid_614691 = query.getOrDefault("Version")
  valid_614691 = validateParameter(valid_614691, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614691 != nil:
    section.add "Version", valid_614691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614692 = header.getOrDefault("X-Amz-Signature")
  valid_614692 = validateParameter(valid_614692, JString, required = false,
                                 default = nil)
  if valid_614692 != nil:
    section.add "X-Amz-Signature", valid_614692
  var valid_614693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "X-Amz-Content-Sha256", valid_614693
  var valid_614694 = header.getOrDefault("X-Amz-Date")
  valid_614694 = validateParameter(valid_614694, JString, required = false,
                                 default = nil)
  if valid_614694 != nil:
    section.add "X-Amz-Date", valid_614694
  var valid_614695 = header.getOrDefault("X-Amz-Credential")
  valid_614695 = validateParameter(valid_614695, JString, required = false,
                                 default = nil)
  if valid_614695 != nil:
    section.add "X-Amz-Credential", valid_614695
  var valid_614696 = header.getOrDefault("X-Amz-Security-Token")
  valid_614696 = validateParameter(valid_614696, JString, required = false,
                                 default = nil)
  if valid_614696 != nil:
    section.add "X-Amz-Security-Token", valid_614696
  var valid_614697 = header.getOrDefault("X-Amz-Algorithm")
  valid_614697 = validateParameter(valid_614697, JString, required = false,
                                 default = nil)
  if valid_614697 != nil:
    section.add "X-Amz-Algorithm", valid_614697
  var valid_614698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614698 = validateParameter(valid_614698, JString, required = false,
                                 default = nil)
  if valid_614698 != nil:
    section.add "X-Amz-SignedHeaders", valid_614698
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614699: Call_GetListTagsForResource_614686; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_614699.validator(path, query, header, formData, body)
  let scheme = call_614699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614699.url(scheme.get, call_614699.host, call_614699.base,
                         call_614699.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614699, url, valid)

proc call*(call_614700: Call_GetListTagsForResource_614686; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614701 = newJObject()
  add(query_614701, "ResourceName", newJString(ResourceName))
  add(query_614701, "Action", newJString(Action))
  add(query_614701, "Version", newJString(Version))
  result = call_614700.call(nil, query_614701, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_614686(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_614687, base: "/",
    url: url_GetListTagsForResource_614688, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_614753 = ref object of OpenApiRestCall_612658
proc url_PostModifyCacheCluster_614755(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheCluster_614754(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614756 = query.getOrDefault("Action")
  valid_614756 = validateParameter(valid_614756, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_614756 != nil:
    section.add "Action", valid_614756
  var valid_614757 = query.getOrDefault("Version")
  valid_614757 = validateParameter(valid_614757, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614757 != nil:
    section.add "Version", valid_614757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614758 = header.getOrDefault("X-Amz-Signature")
  valid_614758 = validateParameter(valid_614758, JString, required = false,
                                 default = nil)
  if valid_614758 != nil:
    section.add "X-Amz-Signature", valid_614758
  var valid_614759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Content-Sha256", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-Date")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-Date", valid_614760
  var valid_614761 = header.getOrDefault("X-Amz-Credential")
  valid_614761 = validateParameter(valid_614761, JString, required = false,
                                 default = nil)
  if valid_614761 != nil:
    section.add "X-Amz-Credential", valid_614761
  var valid_614762 = header.getOrDefault("X-Amz-Security-Token")
  valid_614762 = validateParameter(valid_614762, JString, required = false,
                                 default = nil)
  if valid_614762 != nil:
    section.add "X-Amz-Security-Token", valid_614762
  var valid_614763 = header.getOrDefault("X-Amz-Algorithm")
  valid_614763 = validateParameter(valid_614763, JString, required = false,
                                 default = nil)
  if valid_614763 != nil:
    section.add "X-Amz-Algorithm", valid_614763
  var valid_614764 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614764 = validateParameter(valid_614764, JString, required = false,
                                 default = nil)
  if valid_614764 != nil:
    section.add "X-Amz-SignedHeaders", valid_614764
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_614765 = formData.getOrDefault("SecurityGroupIds")
  valid_614765 = validateParameter(valid_614765, JArray, required = false,
                                 default = nil)
  if valid_614765 != nil:
    section.add "SecurityGroupIds", valid_614765
  var valid_614766 = formData.getOrDefault("NewAvailabilityZones")
  valid_614766 = validateParameter(valid_614766, JArray, required = false,
                                 default = nil)
  if valid_614766 != nil:
    section.add "NewAvailabilityZones", valid_614766
  var valid_614767 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_614767 = validateParameter(valid_614767, JString, required = false,
                                 default = nil)
  if valid_614767 != nil:
    section.add "PreferredMaintenanceWindow", valid_614767
  var valid_614768 = formData.getOrDefault("NumCacheNodes")
  valid_614768 = validateParameter(valid_614768, JInt, required = false, default = nil)
  if valid_614768 != nil:
    section.add "NumCacheNodes", valid_614768
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_614769 = formData.getOrDefault("CacheClusterId")
  valid_614769 = validateParameter(valid_614769, JString, required = true,
                                 default = nil)
  if valid_614769 != nil:
    section.add "CacheClusterId", valid_614769
  var valid_614770 = formData.getOrDefault("NotificationTopicStatus")
  valid_614770 = validateParameter(valid_614770, JString, required = false,
                                 default = nil)
  if valid_614770 != nil:
    section.add "NotificationTopicStatus", valid_614770
  var valid_614771 = formData.getOrDefault("NotificationTopicArn")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "NotificationTopicArn", valid_614771
  var valid_614772 = formData.getOrDefault("EngineVersion")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "EngineVersion", valid_614772
  var valid_614773 = formData.getOrDefault("AZMode")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = newJString("single-az"))
  if valid_614773 != nil:
    section.add "AZMode", valid_614773
  var valid_614774 = formData.getOrDefault("CacheParameterGroupName")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "CacheParameterGroupName", valid_614774
  var valid_614775 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_614775 = validateParameter(valid_614775, JBool, required = false, default = nil)
  if valid_614775 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614775
  var valid_614776 = formData.getOrDefault("ApplyImmediately")
  valid_614776 = validateParameter(valid_614776, JBool, required = false, default = nil)
  if valid_614776 != nil:
    section.add "ApplyImmediately", valid_614776
  var valid_614777 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_614777 = validateParameter(valid_614777, JArray, required = false,
                                 default = nil)
  if valid_614777 != nil:
    section.add "CacheNodeIdsToRemove", valid_614777
  var valid_614778 = formData.getOrDefault("AuthToken")
  valid_614778 = validateParameter(valid_614778, JString, required = false,
                                 default = nil)
  if valid_614778 != nil:
    section.add "AuthToken", valid_614778
  var valid_614779 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_614779 = validateParameter(valid_614779, JArray, required = false,
                                 default = nil)
  if valid_614779 != nil:
    section.add "CacheSecurityGroupNames", valid_614779
  var valid_614780 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_614780 = validateParameter(valid_614780, JInt, required = false, default = nil)
  if valid_614780 != nil:
    section.add "SnapshotRetentionLimit", valid_614780
  var valid_614781 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_614781 = validateParameter(valid_614781, JString, required = false,
                                 default = newJString("SET"))
  if valid_614781 != nil:
    section.add "AuthTokenUpdateStrategy", valid_614781
  var valid_614782 = formData.getOrDefault("SnapshotWindow")
  valid_614782 = validateParameter(valid_614782, JString, required = false,
                                 default = nil)
  if valid_614782 != nil:
    section.add "SnapshotWindow", valid_614782
  var valid_614783 = formData.getOrDefault("CacheNodeType")
  valid_614783 = validateParameter(valid_614783, JString, required = false,
                                 default = nil)
  if valid_614783 != nil:
    section.add "CacheNodeType", valid_614783
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614784: Call_PostModifyCacheCluster_614753; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_614784.validator(path, query, header, formData, body)
  let scheme = call_614784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614784.url(scheme.get, call_614784.host, call_614784.base,
                         call_614784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614784, url, valid)

proc call*(call_614785: Call_PostModifyCacheCluster_614753; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_614786 = newJObject()
  var formData_614787 = newJObject()
  if SecurityGroupIds != nil:
    formData_614787.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_614787.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_614787, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_614787, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_614787, "CacheClusterId", newJString(CacheClusterId))
  add(formData_614787, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_614787, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_614787, "EngineVersion", newJString(EngineVersion))
  add(formData_614787, "AZMode", newJString(AZMode))
  add(formData_614787, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_614787, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_614787, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_614787.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_614786, "Action", newJString(Action))
  add(formData_614787, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_614787.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_614787, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_614787, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_614786, "Version", newJString(Version))
  add(formData_614787, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_614787, "CacheNodeType", newJString(CacheNodeType))
  result = call_614785.call(nil, query_614786, nil, formData_614787, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_614753(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_614754, base: "/",
    url: url_PostModifyCacheCluster_614755, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_614719 = ref object of OpenApiRestCall_612658
proc url_GetModifyCacheCluster_614721(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheCluster_614720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_614722 = query.getOrDefault("AuthToken")
  valid_614722 = validateParameter(valid_614722, JString, required = false,
                                 default = nil)
  if valid_614722 != nil:
    section.add "AuthToken", valid_614722
  var valid_614723 = query.getOrDefault("NotificationTopicStatus")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "NotificationTopicStatus", valid_614723
  var valid_614724 = query.getOrDefault("CacheParameterGroupName")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "CacheParameterGroupName", valid_614724
  var valid_614725 = query.getOrDefault("NewAvailabilityZones")
  valid_614725 = validateParameter(valid_614725, JArray, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "NewAvailabilityZones", valid_614725
  var valid_614726 = query.getOrDefault("AZMode")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = newJString("single-az"))
  if valid_614726 != nil:
    section.add "AZMode", valid_614726
  var valid_614727 = query.getOrDefault("NumCacheNodes")
  valid_614727 = validateParameter(valid_614727, JInt, required = false, default = nil)
  if valid_614727 != nil:
    section.add "NumCacheNodes", valid_614727
  var valid_614728 = query.getOrDefault("SnapshotRetentionLimit")
  valid_614728 = validateParameter(valid_614728, JInt, required = false, default = nil)
  if valid_614728 != nil:
    section.add "SnapshotRetentionLimit", valid_614728
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_614729 = query.getOrDefault("CacheClusterId")
  valid_614729 = validateParameter(valid_614729, JString, required = true,
                                 default = nil)
  if valid_614729 != nil:
    section.add "CacheClusterId", valid_614729
  var valid_614730 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_614730 = validateParameter(valid_614730, JArray, required = false,
                                 default = nil)
  if valid_614730 != nil:
    section.add "CacheNodeIdsToRemove", valid_614730
  var valid_614731 = query.getOrDefault("CacheSecurityGroupNames")
  valid_614731 = validateParameter(valid_614731, JArray, required = false,
                                 default = nil)
  if valid_614731 != nil:
    section.add "CacheSecurityGroupNames", valid_614731
  var valid_614732 = query.getOrDefault("CacheNodeType")
  valid_614732 = validateParameter(valid_614732, JString, required = false,
                                 default = nil)
  if valid_614732 != nil:
    section.add "CacheNodeType", valid_614732
  var valid_614733 = query.getOrDefault("EngineVersion")
  valid_614733 = validateParameter(valid_614733, JString, required = false,
                                 default = nil)
  if valid_614733 != nil:
    section.add "EngineVersion", valid_614733
  var valid_614734 = query.getOrDefault("Action")
  valid_614734 = validateParameter(valid_614734, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_614734 != nil:
    section.add "Action", valid_614734
  var valid_614735 = query.getOrDefault("ApplyImmediately")
  valid_614735 = validateParameter(valid_614735, JBool, required = false, default = nil)
  if valid_614735 != nil:
    section.add "ApplyImmediately", valid_614735
  var valid_614736 = query.getOrDefault("NotificationTopicArn")
  valid_614736 = validateParameter(valid_614736, JString, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "NotificationTopicArn", valid_614736
  var valid_614737 = query.getOrDefault("Version")
  valid_614737 = validateParameter(valid_614737, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614737 != nil:
    section.add "Version", valid_614737
  var valid_614738 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "PreferredMaintenanceWindow", valid_614738
  var valid_614739 = query.getOrDefault("SnapshotWindow")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "SnapshotWindow", valid_614739
  var valid_614740 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_614740 = validateParameter(valid_614740, JBool, required = false, default = nil)
  if valid_614740 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614740
  var valid_614741 = query.getOrDefault("SecurityGroupIds")
  valid_614741 = validateParameter(valid_614741, JArray, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "SecurityGroupIds", valid_614741
  var valid_614742 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_614742 = validateParameter(valid_614742, JString, required = false,
                                 default = newJString("SET"))
  if valid_614742 != nil:
    section.add "AuthTokenUpdateStrategy", valid_614742
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614743 = header.getOrDefault("X-Amz-Signature")
  valid_614743 = validateParameter(valid_614743, JString, required = false,
                                 default = nil)
  if valid_614743 != nil:
    section.add "X-Amz-Signature", valid_614743
  var valid_614744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614744 = validateParameter(valid_614744, JString, required = false,
                                 default = nil)
  if valid_614744 != nil:
    section.add "X-Amz-Content-Sha256", valid_614744
  var valid_614745 = header.getOrDefault("X-Amz-Date")
  valid_614745 = validateParameter(valid_614745, JString, required = false,
                                 default = nil)
  if valid_614745 != nil:
    section.add "X-Amz-Date", valid_614745
  var valid_614746 = header.getOrDefault("X-Amz-Credential")
  valid_614746 = validateParameter(valid_614746, JString, required = false,
                                 default = nil)
  if valid_614746 != nil:
    section.add "X-Amz-Credential", valid_614746
  var valid_614747 = header.getOrDefault("X-Amz-Security-Token")
  valid_614747 = validateParameter(valid_614747, JString, required = false,
                                 default = nil)
  if valid_614747 != nil:
    section.add "X-Amz-Security-Token", valid_614747
  var valid_614748 = header.getOrDefault("X-Amz-Algorithm")
  valid_614748 = validateParameter(valid_614748, JString, required = false,
                                 default = nil)
  if valid_614748 != nil:
    section.add "X-Amz-Algorithm", valid_614748
  var valid_614749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614749 = validateParameter(valid_614749, JString, required = false,
                                 default = nil)
  if valid_614749 != nil:
    section.add "X-Amz-SignedHeaders", valid_614749
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614750: Call_GetModifyCacheCluster_614719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_614750.validator(path, query, header, formData, body)
  let scheme = call_614750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614750.url(scheme.get, call_614750.host, call_614750.base,
                         call_614750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614750, url, valid)

proc call*(call_614751: Call_GetModifyCacheCluster_614719; CacheClusterId: string;
          AuthToken: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_614752 = newJObject()
  add(query_614752, "AuthToken", newJString(AuthToken))
  add(query_614752, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_614752, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_614752.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_614752, "AZMode", newJString(AZMode))
  add(query_614752, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_614752, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_614752, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_614752.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_614752.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_614752, "CacheNodeType", newJString(CacheNodeType))
  add(query_614752, "EngineVersion", newJString(EngineVersion))
  add(query_614752, "Action", newJString(Action))
  add(query_614752, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614752, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_614752, "Version", newJString(Version))
  add(query_614752, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_614752, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_614752, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_614752.add "SecurityGroupIds", SecurityGroupIds
  add(query_614752, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_614751.call(nil, query_614752, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_614719(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_614720, base: "/",
    url: url_GetModifyCacheCluster_614721, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_614805 = ref object of OpenApiRestCall_612658
proc url_PostModifyCacheParameterGroup_614807(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheParameterGroup_614806(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614808 = query.getOrDefault("Action")
  valid_614808 = validateParameter(valid_614808, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_614808 != nil:
    section.add "Action", valid_614808
  var valid_614809 = query.getOrDefault("Version")
  valid_614809 = validateParameter(valid_614809, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614809 != nil:
    section.add "Version", valid_614809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614810 = header.getOrDefault("X-Amz-Signature")
  valid_614810 = validateParameter(valid_614810, JString, required = false,
                                 default = nil)
  if valid_614810 != nil:
    section.add "X-Amz-Signature", valid_614810
  var valid_614811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614811 = validateParameter(valid_614811, JString, required = false,
                                 default = nil)
  if valid_614811 != nil:
    section.add "X-Amz-Content-Sha256", valid_614811
  var valid_614812 = header.getOrDefault("X-Amz-Date")
  valid_614812 = validateParameter(valid_614812, JString, required = false,
                                 default = nil)
  if valid_614812 != nil:
    section.add "X-Amz-Date", valid_614812
  var valid_614813 = header.getOrDefault("X-Amz-Credential")
  valid_614813 = validateParameter(valid_614813, JString, required = false,
                                 default = nil)
  if valid_614813 != nil:
    section.add "X-Amz-Credential", valid_614813
  var valid_614814 = header.getOrDefault("X-Amz-Security-Token")
  valid_614814 = validateParameter(valid_614814, JString, required = false,
                                 default = nil)
  if valid_614814 != nil:
    section.add "X-Amz-Security-Token", valid_614814
  var valid_614815 = header.getOrDefault("X-Amz-Algorithm")
  valid_614815 = validateParameter(valid_614815, JString, required = false,
                                 default = nil)
  if valid_614815 != nil:
    section.add "X-Amz-Algorithm", valid_614815
  var valid_614816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614816 = validateParameter(valid_614816, JString, required = false,
                                 default = nil)
  if valid_614816 != nil:
    section.add "X-Amz-SignedHeaders", valid_614816
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_614817 = formData.getOrDefault("CacheParameterGroupName")
  valid_614817 = validateParameter(valid_614817, JString, required = true,
                                 default = nil)
  if valid_614817 != nil:
    section.add "CacheParameterGroupName", valid_614817
  var valid_614818 = formData.getOrDefault("ParameterNameValues")
  valid_614818 = validateParameter(valid_614818, JArray, required = true, default = nil)
  if valid_614818 != nil:
    section.add "ParameterNameValues", valid_614818
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614819: Call_PostModifyCacheParameterGroup_614805; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_614819.validator(path, query, header, formData, body)
  let scheme = call_614819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614819.url(scheme.get, call_614819.host, call_614819.base,
                         call_614819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614819, url, valid)

proc call*(call_614820: Call_PostModifyCacheParameterGroup_614805;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_614821 = newJObject()
  var formData_614822 = newJObject()
  add(formData_614822, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_614821, "Action", newJString(Action))
  add(query_614821, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_614822.add "ParameterNameValues", ParameterNameValues
  result = call_614820.call(nil, query_614821, nil, formData_614822, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_614805(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_614806, base: "/",
    url: url_PostModifyCacheParameterGroup_614807,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_614788 = ref object of OpenApiRestCall_612658
proc url_GetModifyCacheParameterGroup_614790(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheParameterGroup_614789(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_614791 = query.getOrDefault("CacheParameterGroupName")
  valid_614791 = validateParameter(valid_614791, JString, required = true,
                                 default = nil)
  if valid_614791 != nil:
    section.add "CacheParameterGroupName", valid_614791
  var valid_614792 = query.getOrDefault("ParameterNameValues")
  valid_614792 = validateParameter(valid_614792, JArray, required = true, default = nil)
  if valid_614792 != nil:
    section.add "ParameterNameValues", valid_614792
  var valid_614793 = query.getOrDefault("Action")
  valid_614793 = validateParameter(valid_614793, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_614793 != nil:
    section.add "Action", valid_614793
  var valid_614794 = query.getOrDefault("Version")
  valid_614794 = validateParameter(valid_614794, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614794 != nil:
    section.add "Version", valid_614794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614795 = header.getOrDefault("X-Amz-Signature")
  valid_614795 = validateParameter(valid_614795, JString, required = false,
                                 default = nil)
  if valid_614795 != nil:
    section.add "X-Amz-Signature", valid_614795
  var valid_614796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614796 = validateParameter(valid_614796, JString, required = false,
                                 default = nil)
  if valid_614796 != nil:
    section.add "X-Amz-Content-Sha256", valid_614796
  var valid_614797 = header.getOrDefault("X-Amz-Date")
  valid_614797 = validateParameter(valid_614797, JString, required = false,
                                 default = nil)
  if valid_614797 != nil:
    section.add "X-Amz-Date", valid_614797
  var valid_614798 = header.getOrDefault("X-Amz-Credential")
  valid_614798 = validateParameter(valid_614798, JString, required = false,
                                 default = nil)
  if valid_614798 != nil:
    section.add "X-Amz-Credential", valid_614798
  var valid_614799 = header.getOrDefault("X-Amz-Security-Token")
  valid_614799 = validateParameter(valid_614799, JString, required = false,
                                 default = nil)
  if valid_614799 != nil:
    section.add "X-Amz-Security-Token", valid_614799
  var valid_614800 = header.getOrDefault("X-Amz-Algorithm")
  valid_614800 = validateParameter(valid_614800, JString, required = false,
                                 default = nil)
  if valid_614800 != nil:
    section.add "X-Amz-Algorithm", valid_614800
  var valid_614801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614801 = validateParameter(valid_614801, JString, required = false,
                                 default = nil)
  if valid_614801 != nil:
    section.add "X-Amz-SignedHeaders", valid_614801
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614802: Call_GetModifyCacheParameterGroup_614788; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_614802.validator(path, query, header, formData, body)
  let scheme = call_614802.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614802.url(scheme.get, call_614802.host, call_614802.base,
                         call_614802.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614802, url, valid)

proc call*(call_614803: Call_GetModifyCacheParameterGroup_614788;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614804 = newJObject()
  add(query_614804, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_614804.add "ParameterNameValues", ParameterNameValues
  add(query_614804, "Action", newJString(Action))
  add(query_614804, "Version", newJString(Version))
  result = call_614803.call(nil, query_614804, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_614788(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_614789, base: "/",
    url: url_GetModifyCacheParameterGroup_614790,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_614841 = ref object of OpenApiRestCall_612658
proc url_PostModifyCacheSubnetGroup_614843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheSubnetGroup_614842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614844 = query.getOrDefault("Action")
  valid_614844 = validateParameter(valid_614844, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_614844 != nil:
    section.add "Action", valid_614844
  var valid_614845 = query.getOrDefault("Version")
  valid_614845 = validateParameter(valid_614845, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614845 != nil:
    section.add "Version", valid_614845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614846 = header.getOrDefault("X-Amz-Signature")
  valid_614846 = validateParameter(valid_614846, JString, required = false,
                                 default = nil)
  if valid_614846 != nil:
    section.add "X-Amz-Signature", valid_614846
  var valid_614847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614847 = validateParameter(valid_614847, JString, required = false,
                                 default = nil)
  if valid_614847 != nil:
    section.add "X-Amz-Content-Sha256", valid_614847
  var valid_614848 = header.getOrDefault("X-Amz-Date")
  valid_614848 = validateParameter(valid_614848, JString, required = false,
                                 default = nil)
  if valid_614848 != nil:
    section.add "X-Amz-Date", valid_614848
  var valid_614849 = header.getOrDefault("X-Amz-Credential")
  valid_614849 = validateParameter(valid_614849, JString, required = false,
                                 default = nil)
  if valid_614849 != nil:
    section.add "X-Amz-Credential", valid_614849
  var valid_614850 = header.getOrDefault("X-Amz-Security-Token")
  valid_614850 = validateParameter(valid_614850, JString, required = false,
                                 default = nil)
  if valid_614850 != nil:
    section.add "X-Amz-Security-Token", valid_614850
  var valid_614851 = header.getOrDefault("X-Amz-Algorithm")
  valid_614851 = validateParameter(valid_614851, JString, required = false,
                                 default = nil)
  if valid_614851 != nil:
    section.add "X-Amz-Algorithm", valid_614851
  var valid_614852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614852 = validateParameter(valid_614852, JString, required = false,
                                 default = nil)
  if valid_614852 != nil:
    section.add "X-Amz-SignedHeaders", valid_614852
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_614853 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_614853 = validateParameter(valid_614853, JString, required = false,
                                 default = nil)
  if valid_614853 != nil:
    section.add "CacheSubnetGroupDescription", valid_614853
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_614854 = formData.getOrDefault("CacheSubnetGroupName")
  valid_614854 = validateParameter(valid_614854, JString, required = true,
                                 default = nil)
  if valid_614854 != nil:
    section.add "CacheSubnetGroupName", valid_614854
  var valid_614855 = formData.getOrDefault("SubnetIds")
  valid_614855 = validateParameter(valid_614855, JArray, required = false,
                                 default = nil)
  if valid_614855 != nil:
    section.add "SubnetIds", valid_614855
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614856: Call_PostModifyCacheSubnetGroup_614841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_614856.validator(path, query, header, formData, body)
  let scheme = call_614856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614856.url(scheme.get, call_614856.host, call_614856.base,
                         call_614856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614856, url, valid)

proc call*(call_614857: Call_PostModifyCacheSubnetGroup_614841;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_614858 = newJObject()
  var formData_614859 = newJObject()
  add(formData_614859, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_614859, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_614858, "Action", newJString(Action))
  add(query_614858, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_614859.add "SubnetIds", SubnetIds
  result = call_614857.call(nil, query_614858, nil, formData_614859, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_614841(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_614842, base: "/",
    url: url_PostModifyCacheSubnetGroup_614843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_614823 = ref object of OpenApiRestCall_612658
proc url_GetModifyCacheSubnetGroup_614825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheSubnetGroup_614824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614826 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_614826 = validateParameter(valid_614826, JString, required = false,
                                 default = nil)
  if valid_614826 != nil:
    section.add "CacheSubnetGroupDescription", valid_614826
  var valid_614827 = query.getOrDefault("SubnetIds")
  valid_614827 = validateParameter(valid_614827, JArray, required = false,
                                 default = nil)
  if valid_614827 != nil:
    section.add "SubnetIds", valid_614827
  var valid_614828 = query.getOrDefault("Action")
  valid_614828 = validateParameter(valid_614828, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_614828 != nil:
    section.add "Action", valid_614828
  var valid_614829 = query.getOrDefault("CacheSubnetGroupName")
  valid_614829 = validateParameter(valid_614829, JString, required = true,
                                 default = nil)
  if valid_614829 != nil:
    section.add "CacheSubnetGroupName", valid_614829
  var valid_614830 = query.getOrDefault("Version")
  valid_614830 = validateParameter(valid_614830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614830 != nil:
    section.add "Version", valid_614830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614831 = header.getOrDefault("X-Amz-Signature")
  valid_614831 = validateParameter(valid_614831, JString, required = false,
                                 default = nil)
  if valid_614831 != nil:
    section.add "X-Amz-Signature", valid_614831
  var valid_614832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614832 = validateParameter(valid_614832, JString, required = false,
                                 default = nil)
  if valid_614832 != nil:
    section.add "X-Amz-Content-Sha256", valid_614832
  var valid_614833 = header.getOrDefault("X-Amz-Date")
  valid_614833 = validateParameter(valid_614833, JString, required = false,
                                 default = nil)
  if valid_614833 != nil:
    section.add "X-Amz-Date", valid_614833
  var valid_614834 = header.getOrDefault("X-Amz-Credential")
  valid_614834 = validateParameter(valid_614834, JString, required = false,
                                 default = nil)
  if valid_614834 != nil:
    section.add "X-Amz-Credential", valid_614834
  var valid_614835 = header.getOrDefault("X-Amz-Security-Token")
  valid_614835 = validateParameter(valid_614835, JString, required = false,
                                 default = nil)
  if valid_614835 != nil:
    section.add "X-Amz-Security-Token", valid_614835
  var valid_614836 = header.getOrDefault("X-Amz-Algorithm")
  valid_614836 = validateParameter(valid_614836, JString, required = false,
                                 default = nil)
  if valid_614836 != nil:
    section.add "X-Amz-Algorithm", valid_614836
  var valid_614837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614837 = validateParameter(valid_614837, JString, required = false,
                                 default = nil)
  if valid_614837 != nil:
    section.add "X-Amz-SignedHeaders", valid_614837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614838: Call_GetModifyCacheSubnetGroup_614823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_614838.validator(path, query, header, formData, body)
  let scheme = call_614838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614838.url(scheme.get, call_614838.host, call_614838.base,
                         call_614838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614838, url, valid)

proc call*(call_614839: Call_GetModifyCacheSubnetGroup_614823;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_614840 = newJObject()
  add(query_614840, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_614840.add "SubnetIds", SubnetIds
  add(query_614840, "Action", newJString(Action))
  add(query_614840, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_614840, "Version", newJString(Version))
  result = call_614839.call(nil, query_614840, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_614823(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_614824, base: "/",
    url: url_GetModifyCacheSubnetGroup_614825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_614895 = ref object of OpenApiRestCall_612658
proc url_PostModifyReplicationGroup_614897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroup_614896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614898 = query.getOrDefault("Action")
  valid_614898 = validateParameter(valid_614898, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_614898 != nil:
    section.add "Action", valid_614898
  var valid_614899 = query.getOrDefault("Version")
  valid_614899 = validateParameter(valid_614899, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614899 != nil:
    section.add "Version", valid_614899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614900 = header.getOrDefault("X-Amz-Signature")
  valid_614900 = validateParameter(valid_614900, JString, required = false,
                                 default = nil)
  if valid_614900 != nil:
    section.add "X-Amz-Signature", valid_614900
  var valid_614901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614901 = validateParameter(valid_614901, JString, required = false,
                                 default = nil)
  if valid_614901 != nil:
    section.add "X-Amz-Content-Sha256", valid_614901
  var valid_614902 = header.getOrDefault("X-Amz-Date")
  valid_614902 = validateParameter(valid_614902, JString, required = false,
                                 default = nil)
  if valid_614902 != nil:
    section.add "X-Amz-Date", valid_614902
  var valid_614903 = header.getOrDefault("X-Amz-Credential")
  valid_614903 = validateParameter(valid_614903, JString, required = false,
                                 default = nil)
  if valid_614903 != nil:
    section.add "X-Amz-Credential", valid_614903
  var valid_614904 = header.getOrDefault("X-Amz-Security-Token")
  valid_614904 = validateParameter(valid_614904, JString, required = false,
                                 default = nil)
  if valid_614904 != nil:
    section.add "X-Amz-Security-Token", valid_614904
  var valid_614905 = header.getOrDefault("X-Amz-Algorithm")
  valid_614905 = validateParameter(valid_614905, JString, required = false,
                                 default = nil)
  if valid_614905 != nil:
    section.add "X-Amz-Algorithm", valid_614905
  var valid_614906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614906 = validateParameter(valid_614906, JString, required = false,
                                 default = nil)
  if valid_614906 != nil:
    section.add "X-Amz-SignedHeaders", valid_614906
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_614907 = formData.getOrDefault("SecurityGroupIds")
  valid_614907 = validateParameter(valid_614907, JArray, required = false,
                                 default = nil)
  if valid_614907 != nil:
    section.add "SecurityGroupIds", valid_614907
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_614908 = formData.getOrDefault("ReplicationGroupId")
  valid_614908 = validateParameter(valid_614908, JString, required = true,
                                 default = nil)
  if valid_614908 != nil:
    section.add "ReplicationGroupId", valid_614908
  var valid_614909 = formData.getOrDefault("NodeGroupId")
  valid_614909 = validateParameter(valid_614909, JString, required = false,
                                 default = nil)
  if valid_614909 != nil:
    section.add "NodeGroupId", valid_614909
  var valid_614910 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_614910 = validateParameter(valid_614910, JString, required = false,
                                 default = nil)
  if valid_614910 != nil:
    section.add "PreferredMaintenanceWindow", valid_614910
  var valid_614911 = formData.getOrDefault("PrimaryClusterId")
  valid_614911 = validateParameter(valid_614911, JString, required = false,
                                 default = nil)
  if valid_614911 != nil:
    section.add "PrimaryClusterId", valid_614911
  var valid_614912 = formData.getOrDefault("NotificationTopicStatus")
  valid_614912 = validateParameter(valid_614912, JString, required = false,
                                 default = nil)
  if valid_614912 != nil:
    section.add "NotificationTopicStatus", valid_614912
  var valid_614913 = formData.getOrDefault("NotificationTopicArn")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "NotificationTopicArn", valid_614913
  var valid_614914 = formData.getOrDefault("EngineVersion")
  valid_614914 = validateParameter(valid_614914, JString, required = false,
                                 default = nil)
  if valid_614914 != nil:
    section.add "EngineVersion", valid_614914
  var valid_614915 = formData.getOrDefault("SnapshottingClusterId")
  valid_614915 = validateParameter(valid_614915, JString, required = false,
                                 default = nil)
  if valid_614915 != nil:
    section.add "SnapshottingClusterId", valid_614915
  var valid_614916 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_614916 = validateParameter(valid_614916, JBool, required = false, default = nil)
  if valid_614916 != nil:
    section.add "AutomaticFailoverEnabled", valid_614916
  var valid_614917 = formData.getOrDefault("CacheParameterGroupName")
  valid_614917 = validateParameter(valid_614917, JString, required = false,
                                 default = nil)
  if valid_614917 != nil:
    section.add "CacheParameterGroupName", valid_614917
  var valid_614918 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_614918 = validateParameter(valid_614918, JBool, required = false, default = nil)
  if valid_614918 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614918
  var valid_614919 = formData.getOrDefault("ApplyImmediately")
  valid_614919 = validateParameter(valid_614919, JBool, required = false, default = nil)
  if valid_614919 != nil:
    section.add "ApplyImmediately", valid_614919
  var valid_614920 = formData.getOrDefault("AuthToken")
  valid_614920 = validateParameter(valid_614920, JString, required = false,
                                 default = nil)
  if valid_614920 != nil:
    section.add "AuthToken", valid_614920
  var valid_614921 = formData.getOrDefault("ReplicationGroupDescription")
  valid_614921 = validateParameter(valid_614921, JString, required = false,
                                 default = nil)
  if valid_614921 != nil:
    section.add "ReplicationGroupDescription", valid_614921
  var valid_614922 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_614922 = validateParameter(valid_614922, JArray, required = false,
                                 default = nil)
  if valid_614922 != nil:
    section.add "CacheSecurityGroupNames", valid_614922
  var valid_614923 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_614923 = validateParameter(valid_614923, JInt, required = false, default = nil)
  if valid_614923 != nil:
    section.add "SnapshotRetentionLimit", valid_614923
  var valid_614924 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_614924 = validateParameter(valid_614924, JString, required = false,
                                 default = newJString("SET"))
  if valid_614924 != nil:
    section.add "AuthTokenUpdateStrategy", valid_614924
  var valid_614925 = formData.getOrDefault("SnapshotWindow")
  valid_614925 = validateParameter(valid_614925, JString, required = false,
                                 default = nil)
  if valid_614925 != nil:
    section.add "SnapshotWindow", valid_614925
  var valid_614926 = formData.getOrDefault("CacheNodeType")
  valid_614926 = validateParameter(valid_614926, JString, required = false,
                                 default = nil)
  if valid_614926 != nil:
    section.add "CacheNodeType", valid_614926
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614927: Call_PostModifyReplicationGroup_614895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614927.validator(path, query, header, formData, body)
  let scheme = call_614927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614927.url(scheme.get, call_614927.host, call_614927.base,
                         call_614927.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614927, url, valid)

proc call*(call_614928: Call_PostModifyReplicationGroup_614895;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          NodeGroupId: string = ""; PreferredMaintenanceWindow: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup"; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_614929 = newJObject()
  var formData_614930 = newJObject()
  if SecurityGroupIds != nil:
    formData_614930.add "SecurityGroupIds", SecurityGroupIds
  add(formData_614930, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_614930, "NodeGroupId", newJString(NodeGroupId))
  add(formData_614930, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_614930, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_614930, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_614930, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_614930, "EngineVersion", newJString(EngineVersion))
  add(formData_614930, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_614930, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_614930, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_614930, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_614930, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614929, "Action", newJString(Action))
  add(formData_614930, "AuthToken", newJString(AuthToken))
  add(formData_614930, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_614930.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_614930, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_614930, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_614929, "Version", newJString(Version))
  add(formData_614930, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_614930, "CacheNodeType", newJString(CacheNodeType))
  result = call_614928.call(nil, query_614929, nil, formData_614930, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_614895(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_614896, base: "/",
    url: url_PostModifyReplicationGroup_614897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_614860 = ref object of OpenApiRestCall_612658
proc url_GetModifyReplicationGroup_614862(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroup_614861(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_614863 = query.getOrDefault("AuthToken")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "AuthToken", valid_614863
  var valid_614864 = query.getOrDefault("ReplicationGroupDescription")
  valid_614864 = validateParameter(valid_614864, JString, required = false,
                                 default = nil)
  if valid_614864 != nil:
    section.add "ReplicationGroupDescription", valid_614864
  var valid_614865 = query.getOrDefault("NotificationTopicStatus")
  valid_614865 = validateParameter(valid_614865, JString, required = false,
                                 default = nil)
  if valid_614865 != nil:
    section.add "NotificationTopicStatus", valid_614865
  var valid_614866 = query.getOrDefault("CacheParameterGroupName")
  valid_614866 = validateParameter(valid_614866, JString, required = false,
                                 default = nil)
  if valid_614866 != nil:
    section.add "CacheParameterGroupName", valid_614866
  var valid_614867 = query.getOrDefault("SnapshotRetentionLimit")
  valid_614867 = validateParameter(valid_614867, JInt, required = false, default = nil)
  if valid_614867 != nil:
    section.add "SnapshotRetentionLimit", valid_614867
  var valid_614868 = query.getOrDefault("SnapshottingClusterId")
  valid_614868 = validateParameter(valid_614868, JString, required = false,
                                 default = nil)
  if valid_614868 != nil:
    section.add "SnapshottingClusterId", valid_614868
  var valid_614869 = query.getOrDefault("CacheSecurityGroupNames")
  valid_614869 = validateParameter(valid_614869, JArray, required = false,
                                 default = nil)
  if valid_614869 != nil:
    section.add "CacheSecurityGroupNames", valid_614869
  var valid_614870 = query.getOrDefault("PrimaryClusterId")
  valid_614870 = validateParameter(valid_614870, JString, required = false,
                                 default = nil)
  if valid_614870 != nil:
    section.add "PrimaryClusterId", valid_614870
  var valid_614871 = query.getOrDefault("CacheNodeType")
  valid_614871 = validateParameter(valid_614871, JString, required = false,
                                 default = nil)
  if valid_614871 != nil:
    section.add "CacheNodeType", valid_614871
  var valid_614872 = query.getOrDefault("EngineVersion")
  valid_614872 = validateParameter(valid_614872, JString, required = false,
                                 default = nil)
  if valid_614872 != nil:
    section.add "EngineVersion", valid_614872
  var valid_614873 = query.getOrDefault("Action")
  valid_614873 = validateParameter(valid_614873, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_614873 != nil:
    section.add "Action", valid_614873
  var valid_614874 = query.getOrDefault("ApplyImmediately")
  valid_614874 = validateParameter(valid_614874, JBool, required = false, default = nil)
  if valid_614874 != nil:
    section.add "ApplyImmediately", valid_614874
  var valid_614875 = query.getOrDefault("ReplicationGroupId")
  valid_614875 = validateParameter(valid_614875, JString, required = true,
                                 default = nil)
  if valid_614875 != nil:
    section.add "ReplicationGroupId", valid_614875
  var valid_614876 = query.getOrDefault("NotificationTopicArn")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "NotificationTopicArn", valid_614876
  var valid_614877 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_614877 = validateParameter(valid_614877, JBool, required = false, default = nil)
  if valid_614877 != nil:
    section.add "AutomaticFailoverEnabled", valid_614877
  var valid_614878 = query.getOrDefault("Version")
  valid_614878 = validateParameter(valid_614878, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614878 != nil:
    section.add "Version", valid_614878
  var valid_614879 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_614879 = validateParameter(valid_614879, JString, required = false,
                                 default = nil)
  if valid_614879 != nil:
    section.add "PreferredMaintenanceWindow", valid_614879
  var valid_614880 = query.getOrDefault("SnapshotWindow")
  valid_614880 = validateParameter(valid_614880, JString, required = false,
                                 default = nil)
  if valid_614880 != nil:
    section.add "SnapshotWindow", valid_614880
  var valid_614881 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_614881 = validateParameter(valid_614881, JBool, required = false, default = nil)
  if valid_614881 != nil:
    section.add "AutoMinorVersionUpgrade", valid_614881
  var valid_614882 = query.getOrDefault("SecurityGroupIds")
  valid_614882 = validateParameter(valid_614882, JArray, required = false,
                                 default = nil)
  if valid_614882 != nil:
    section.add "SecurityGroupIds", valid_614882
  var valid_614883 = query.getOrDefault("NodeGroupId")
  valid_614883 = validateParameter(valid_614883, JString, required = false,
                                 default = nil)
  if valid_614883 != nil:
    section.add "NodeGroupId", valid_614883
  var valid_614884 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_614884 = validateParameter(valid_614884, JString, required = false,
                                 default = newJString("SET"))
  if valid_614884 != nil:
    section.add "AuthTokenUpdateStrategy", valid_614884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614885 = header.getOrDefault("X-Amz-Signature")
  valid_614885 = validateParameter(valid_614885, JString, required = false,
                                 default = nil)
  if valid_614885 != nil:
    section.add "X-Amz-Signature", valid_614885
  var valid_614886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614886 = validateParameter(valid_614886, JString, required = false,
                                 default = nil)
  if valid_614886 != nil:
    section.add "X-Amz-Content-Sha256", valid_614886
  var valid_614887 = header.getOrDefault("X-Amz-Date")
  valid_614887 = validateParameter(valid_614887, JString, required = false,
                                 default = nil)
  if valid_614887 != nil:
    section.add "X-Amz-Date", valid_614887
  var valid_614888 = header.getOrDefault("X-Amz-Credential")
  valid_614888 = validateParameter(valid_614888, JString, required = false,
                                 default = nil)
  if valid_614888 != nil:
    section.add "X-Amz-Credential", valid_614888
  var valid_614889 = header.getOrDefault("X-Amz-Security-Token")
  valid_614889 = validateParameter(valid_614889, JString, required = false,
                                 default = nil)
  if valid_614889 != nil:
    section.add "X-Amz-Security-Token", valid_614889
  var valid_614890 = header.getOrDefault("X-Amz-Algorithm")
  valid_614890 = validateParameter(valid_614890, JString, required = false,
                                 default = nil)
  if valid_614890 != nil:
    section.add "X-Amz-Algorithm", valid_614890
  var valid_614891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614891 = validateParameter(valid_614891, JString, required = false,
                                 default = nil)
  if valid_614891 != nil:
    section.add "X-Amz-SignedHeaders", valid_614891
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614892: Call_GetModifyReplicationGroup_614860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_614892.validator(path, query, header, formData, body)
  let scheme = call_614892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614892.url(scheme.get, call_614892.host, call_614892.base,
                         call_614892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614892, url, valid)

proc call*(call_614893: Call_GetModifyReplicationGroup_614860;
          ReplicationGroupId: string; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = "";
          AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_614894 = newJObject()
  add(query_614894, "AuthToken", newJString(AuthToken))
  add(query_614894, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_614894, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_614894, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_614894, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_614894, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_614894.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_614894, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_614894, "CacheNodeType", newJString(CacheNodeType))
  add(query_614894, "EngineVersion", newJString(EngineVersion))
  add(query_614894, "Action", newJString(Action))
  add(query_614894, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614894, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_614894, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_614894, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_614894, "Version", newJString(Version))
  add(query_614894, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_614894, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_614894, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_614894.add "SecurityGroupIds", SecurityGroupIds
  add(query_614894, "NodeGroupId", newJString(NodeGroupId))
  add(query_614894, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_614893.call(nil, query_614894, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_614860(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_614861, base: "/",
    url: url_GetModifyReplicationGroup_614862,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_614952 = ref object of OpenApiRestCall_612658
proc url_PostModifyReplicationGroupShardConfiguration_614954(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_614953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614955 = query.getOrDefault("Action")
  valid_614955 = validateParameter(valid_614955, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_614955 != nil:
    section.add "Action", valid_614955
  var valid_614956 = query.getOrDefault("Version")
  valid_614956 = validateParameter(valid_614956, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614956 != nil:
    section.add "Version", valid_614956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614957 = header.getOrDefault("X-Amz-Signature")
  valid_614957 = validateParameter(valid_614957, JString, required = false,
                                 default = nil)
  if valid_614957 != nil:
    section.add "X-Amz-Signature", valid_614957
  var valid_614958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614958 = validateParameter(valid_614958, JString, required = false,
                                 default = nil)
  if valid_614958 != nil:
    section.add "X-Amz-Content-Sha256", valid_614958
  var valid_614959 = header.getOrDefault("X-Amz-Date")
  valid_614959 = validateParameter(valid_614959, JString, required = false,
                                 default = nil)
  if valid_614959 != nil:
    section.add "X-Amz-Date", valid_614959
  var valid_614960 = header.getOrDefault("X-Amz-Credential")
  valid_614960 = validateParameter(valid_614960, JString, required = false,
                                 default = nil)
  if valid_614960 != nil:
    section.add "X-Amz-Credential", valid_614960
  var valid_614961 = header.getOrDefault("X-Amz-Security-Token")
  valid_614961 = validateParameter(valid_614961, JString, required = false,
                                 default = nil)
  if valid_614961 != nil:
    section.add "X-Amz-Security-Token", valid_614961
  var valid_614962 = header.getOrDefault("X-Amz-Algorithm")
  valid_614962 = validateParameter(valid_614962, JString, required = false,
                                 default = nil)
  if valid_614962 != nil:
    section.add "X-Amz-Algorithm", valid_614962
  var valid_614963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614963 = validateParameter(valid_614963, JString, required = false,
                                 default = nil)
  if valid_614963 != nil:
    section.add "X-Amz-SignedHeaders", valid_614963
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_614964 = formData.getOrDefault("NodeGroupsToRemove")
  valid_614964 = validateParameter(valid_614964, JArray, required = false,
                                 default = nil)
  if valid_614964 != nil:
    section.add "NodeGroupsToRemove", valid_614964
  var valid_614965 = formData.getOrDefault("NodeGroupsToRetain")
  valid_614965 = validateParameter(valid_614965, JArray, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "NodeGroupsToRetain", valid_614965
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_614966 = formData.getOrDefault("NodeGroupCount")
  valid_614966 = validateParameter(valid_614966, JInt, required = true, default = nil)
  if valid_614966 != nil:
    section.add "NodeGroupCount", valid_614966
  var valid_614967 = formData.getOrDefault("ReshardingConfiguration")
  valid_614967 = validateParameter(valid_614967, JArray, required = false,
                                 default = nil)
  if valid_614967 != nil:
    section.add "ReshardingConfiguration", valid_614967
  var valid_614968 = formData.getOrDefault("ApplyImmediately")
  valid_614968 = validateParameter(valid_614968, JBool, required = true, default = nil)
  if valid_614968 != nil:
    section.add "ApplyImmediately", valid_614968
  var valid_614969 = formData.getOrDefault("ReplicationGroupId")
  valid_614969 = validateParameter(valid_614969, JString, required = true,
                                 default = nil)
  if valid_614969 != nil:
    section.add "ReplicationGroupId", valid_614969
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614970: Call_PostModifyReplicationGroupShardConfiguration_614952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_614970.validator(path, query, header, formData, body)
  let scheme = call_614970.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614970.url(scheme.get, call_614970.host, call_614970.base,
                         call_614970.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614970, url, valid)

proc call*(call_614971: Call_PostModifyReplicationGroupShardConfiguration_614952;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_614972 = newJObject()
  var formData_614973 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_614973.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_614973.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_614973, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_614973.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_614973, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614972, "Action", newJString(Action))
  add(query_614972, "Version", newJString(Version))
  add(formData_614973, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_614971.call(nil, query_614972, nil, formData_614973, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_614952(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_614953,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_614954,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_614931 = ref object of OpenApiRestCall_612658
proc url_GetModifyReplicationGroupShardConfiguration_614933(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_614932(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_614934 = query.getOrDefault("ReshardingConfiguration")
  valid_614934 = validateParameter(valid_614934, JArray, required = false,
                                 default = nil)
  if valid_614934 != nil:
    section.add "ReshardingConfiguration", valid_614934
  var valid_614935 = query.getOrDefault("NodeGroupsToRemove")
  valid_614935 = validateParameter(valid_614935, JArray, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "NodeGroupsToRemove", valid_614935
  var valid_614936 = query.getOrDefault("Action")
  valid_614936 = validateParameter(valid_614936, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_614936 != nil:
    section.add "Action", valid_614936
  var valid_614937 = query.getOrDefault("ApplyImmediately")
  valid_614937 = validateParameter(valid_614937, JBool, required = true, default = nil)
  if valid_614937 != nil:
    section.add "ApplyImmediately", valid_614937
  var valid_614938 = query.getOrDefault("ReplicationGroupId")
  valid_614938 = validateParameter(valid_614938, JString, required = true,
                                 default = nil)
  if valid_614938 != nil:
    section.add "ReplicationGroupId", valid_614938
  var valid_614939 = query.getOrDefault("NodeGroupsToRetain")
  valid_614939 = validateParameter(valid_614939, JArray, required = false,
                                 default = nil)
  if valid_614939 != nil:
    section.add "NodeGroupsToRetain", valid_614939
  var valid_614940 = query.getOrDefault("Version")
  valid_614940 = validateParameter(valid_614940, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614940 != nil:
    section.add "Version", valid_614940
  var valid_614941 = query.getOrDefault("NodeGroupCount")
  valid_614941 = validateParameter(valid_614941, JInt, required = true, default = nil)
  if valid_614941 != nil:
    section.add "NodeGroupCount", valid_614941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614942 = header.getOrDefault("X-Amz-Signature")
  valid_614942 = validateParameter(valid_614942, JString, required = false,
                                 default = nil)
  if valid_614942 != nil:
    section.add "X-Amz-Signature", valid_614942
  var valid_614943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614943 = validateParameter(valid_614943, JString, required = false,
                                 default = nil)
  if valid_614943 != nil:
    section.add "X-Amz-Content-Sha256", valid_614943
  var valid_614944 = header.getOrDefault("X-Amz-Date")
  valid_614944 = validateParameter(valid_614944, JString, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "X-Amz-Date", valid_614944
  var valid_614945 = header.getOrDefault("X-Amz-Credential")
  valid_614945 = validateParameter(valid_614945, JString, required = false,
                                 default = nil)
  if valid_614945 != nil:
    section.add "X-Amz-Credential", valid_614945
  var valid_614946 = header.getOrDefault("X-Amz-Security-Token")
  valid_614946 = validateParameter(valid_614946, JString, required = false,
                                 default = nil)
  if valid_614946 != nil:
    section.add "X-Amz-Security-Token", valid_614946
  var valid_614947 = header.getOrDefault("X-Amz-Algorithm")
  valid_614947 = validateParameter(valid_614947, JString, required = false,
                                 default = nil)
  if valid_614947 != nil:
    section.add "X-Amz-Algorithm", valid_614947
  var valid_614948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614948 = validateParameter(valid_614948, JString, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "X-Amz-SignedHeaders", valid_614948
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614949: Call_GetModifyReplicationGroupShardConfiguration_614931;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_614949.validator(path, query, header, formData, body)
  let scheme = call_614949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614949.url(scheme.get, call_614949.host, call_614949.base,
                         call_614949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614949, url, valid)

proc call*(call_614950: Call_GetModifyReplicationGroupShardConfiguration_614931;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_614951 = newJObject()
  if ReshardingConfiguration != nil:
    query_614951.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_614951.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_614951, "Action", newJString(Action))
  add(query_614951, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_614951, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_614951.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_614951, "Version", newJString(Version))
  add(query_614951, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_614950.call(nil, query_614951, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_614931(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_614932,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_614933,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_614992 = ref object of OpenApiRestCall_612658
proc url_PostPurchaseReservedCacheNodesOffering_614994(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_614993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614995 = query.getOrDefault("Action")
  valid_614995 = validateParameter(valid_614995, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_614995 != nil:
    section.add "Action", valid_614995
  var valid_614996 = query.getOrDefault("Version")
  valid_614996 = validateParameter(valid_614996, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614996 != nil:
    section.add "Version", valid_614996
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614997 = header.getOrDefault("X-Amz-Signature")
  valid_614997 = validateParameter(valid_614997, JString, required = false,
                                 default = nil)
  if valid_614997 != nil:
    section.add "X-Amz-Signature", valid_614997
  var valid_614998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614998 = validateParameter(valid_614998, JString, required = false,
                                 default = nil)
  if valid_614998 != nil:
    section.add "X-Amz-Content-Sha256", valid_614998
  var valid_614999 = header.getOrDefault("X-Amz-Date")
  valid_614999 = validateParameter(valid_614999, JString, required = false,
                                 default = nil)
  if valid_614999 != nil:
    section.add "X-Amz-Date", valid_614999
  var valid_615000 = header.getOrDefault("X-Amz-Credential")
  valid_615000 = validateParameter(valid_615000, JString, required = false,
                                 default = nil)
  if valid_615000 != nil:
    section.add "X-Amz-Credential", valid_615000
  var valid_615001 = header.getOrDefault("X-Amz-Security-Token")
  valid_615001 = validateParameter(valid_615001, JString, required = false,
                                 default = nil)
  if valid_615001 != nil:
    section.add "X-Amz-Security-Token", valid_615001
  var valid_615002 = header.getOrDefault("X-Amz-Algorithm")
  valid_615002 = validateParameter(valid_615002, JString, required = false,
                                 default = nil)
  if valid_615002 != nil:
    section.add "X-Amz-Algorithm", valid_615002
  var valid_615003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615003 = validateParameter(valid_615003, JString, required = false,
                                 default = nil)
  if valid_615003 != nil:
    section.add "X-Amz-SignedHeaders", valid_615003
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_615004 = formData.getOrDefault("CacheNodeCount")
  valid_615004 = validateParameter(valid_615004, JInt, required = false, default = nil)
  if valid_615004 != nil:
    section.add "CacheNodeCount", valid_615004
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_615005 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_615005 = validateParameter(valid_615005, JString, required = true,
                                 default = nil)
  if valid_615005 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_615005
  var valid_615006 = formData.getOrDefault("ReservedCacheNodeId")
  valid_615006 = validateParameter(valid_615006, JString, required = false,
                                 default = nil)
  if valid_615006 != nil:
    section.add "ReservedCacheNodeId", valid_615006
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615007: Call_PostPurchaseReservedCacheNodesOffering_614992;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_615007.validator(path, query, header, formData, body)
  let scheme = call_615007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615007.url(scheme.get, call_615007.host, call_615007.base,
                         call_615007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615007, url, valid)

proc call*(call_615008: Call_PostPurchaseReservedCacheNodesOffering_614992;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_615009 = newJObject()
  var formData_615010 = newJObject()
  add(formData_615010, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_615009, "Action", newJString(Action))
  add(query_615009, "Version", newJString(Version))
  add(formData_615010, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_615010, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_615008.call(nil, query_615009, nil, formData_615010, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_614992(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_614993, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_614994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_614974 = ref object of OpenApiRestCall_612658
proc url_GetPurchaseReservedCacheNodesOffering_614976(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_614975(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_614977 = query.getOrDefault("CacheNodeCount")
  valid_614977 = validateParameter(valid_614977, JInt, required = false, default = nil)
  if valid_614977 != nil:
    section.add "CacheNodeCount", valid_614977
  var valid_614978 = query.getOrDefault("Action")
  valid_614978 = validateParameter(valid_614978, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_614978 != nil:
    section.add "Action", valid_614978
  var valid_614979 = query.getOrDefault("ReservedCacheNodeId")
  valid_614979 = validateParameter(valid_614979, JString, required = false,
                                 default = nil)
  if valid_614979 != nil:
    section.add "ReservedCacheNodeId", valid_614979
  var valid_614980 = query.getOrDefault("Version")
  valid_614980 = validateParameter(valid_614980, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_614980 != nil:
    section.add "Version", valid_614980
  var valid_614981 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_614981 = validateParameter(valid_614981, JString, required = true,
                                 default = nil)
  if valid_614981 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_614981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614982 = header.getOrDefault("X-Amz-Signature")
  valid_614982 = validateParameter(valid_614982, JString, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "X-Amz-Signature", valid_614982
  var valid_614983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614983 = validateParameter(valid_614983, JString, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "X-Amz-Content-Sha256", valid_614983
  var valid_614984 = header.getOrDefault("X-Amz-Date")
  valid_614984 = validateParameter(valid_614984, JString, required = false,
                                 default = nil)
  if valid_614984 != nil:
    section.add "X-Amz-Date", valid_614984
  var valid_614985 = header.getOrDefault("X-Amz-Credential")
  valid_614985 = validateParameter(valid_614985, JString, required = false,
                                 default = nil)
  if valid_614985 != nil:
    section.add "X-Amz-Credential", valid_614985
  var valid_614986 = header.getOrDefault("X-Amz-Security-Token")
  valid_614986 = validateParameter(valid_614986, JString, required = false,
                                 default = nil)
  if valid_614986 != nil:
    section.add "X-Amz-Security-Token", valid_614986
  var valid_614987 = header.getOrDefault("X-Amz-Algorithm")
  valid_614987 = validateParameter(valid_614987, JString, required = false,
                                 default = nil)
  if valid_614987 != nil:
    section.add "X-Amz-Algorithm", valid_614987
  var valid_614988 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614988 = validateParameter(valid_614988, JString, required = false,
                                 default = nil)
  if valid_614988 != nil:
    section.add "X-Amz-SignedHeaders", valid_614988
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614989: Call_GetPurchaseReservedCacheNodesOffering_614974;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_614989.validator(path, query, header, formData, body)
  let scheme = call_614989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614989.url(scheme.get, call_614989.host, call_614989.base,
                         call_614989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614989, url, valid)

proc call*(call_614990: Call_GetPurchaseReservedCacheNodesOffering_614974;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_614991 = newJObject()
  add(query_614991, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_614991, "Action", newJString(Action))
  add(query_614991, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_614991, "Version", newJString(Version))
  add(query_614991, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_614990.call(nil, query_614991, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_614974(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_614975, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_614976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_615028 = ref object of OpenApiRestCall_612658
proc url_PostRebootCacheCluster_615030(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootCacheCluster_615029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615031 = query.getOrDefault("Action")
  valid_615031 = validateParameter(valid_615031, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_615031 != nil:
    section.add "Action", valid_615031
  var valid_615032 = query.getOrDefault("Version")
  valid_615032 = validateParameter(valid_615032, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615032 != nil:
    section.add "Version", valid_615032
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615033 = header.getOrDefault("X-Amz-Signature")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "X-Amz-Signature", valid_615033
  var valid_615034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615034 = validateParameter(valid_615034, JString, required = false,
                                 default = nil)
  if valid_615034 != nil:
    section.add "X-Amz-Content-Sha256", valid_615034
  var valid_615035 = header.getOrDefault("X-Amz-Date")
  valid_615035 = validateParameter(valid_615035, JString, required = false,
                                 default = nil)
  if valid_615035 != nil:
    section.add "X-Amz-Date", valid_615035
  var valid_615036 = header.getOrDefault("X-Amz-Credential")
  valid_615036 = validateParameter(valid_615036, JString, required = false,
                                 default = nil)
  if valid_615036 != nil:
    section.add "X-Amz-Credential", valid_615036
  var valid_615037 = header.getOrDefault("X-Amz-Security-Token")
  valid_615037 = validateParameter(valid_615037, JString, required = false,
                                 default = nil)
  if valid_615037 != nil:
    section.add "X-Amz-Security-Token", valid_615037
  var valid_615038 = header.getOrDefault("X-Amz-Algorithm")
  valid_615038 = validateParameter(valid_615038, JString, required = false,
                                 default = nil)
  if valid_615038 != nil:
    section.add "X-Amz-Algorithm", valid_615038
  var valid_615039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615039 = validateParameter(valid_615039, JString, required = false,
                                 default = nil)
  if valid_615039 != nil:
    section.add "X-Amz-SignedHeaders", valid_615039
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_615040 = formData.getOrDefault("CacheClusterId")
  valid_615040 = validateParameter(valid_615040, JString, required = true,
                                 default = nil)
  if valid_615040 != nil:
    section.add "CacheClusterId", valid_615040
  var valid_615041 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_615041 = validateParameter(valid_615041, JArray, required = true, default = nil)
  if valid_615041 != nil:
    section.add "CacheNodeIdsToReboot", valid_615041
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615042: Call_PostRebootCacheCluster_615028; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_615042.validator(path, query, header, formData, body)
  let scheme = call_615042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615042.url(scheme.get, call_615042.host, call_615042.base,
                         call_615042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615042, url, valid)

proc call*(call_615043: Call_PostRebootCacheCluster_615028; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_615044 = newJObject()
  var formData_615045 = newJObject()
  add(formData_615045, "CacheClusterId", newJString(CacheClusterId))
  add(query_615044, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_615045.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_615044, "Version", newJString(Version))
  result = call_615043.call(nil, query_615044, nil, formData_615045, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_615028(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_615029, base: "/",
    url: url_PostRebootCacheCluster_615030, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_615011 = ref object of OpenApiRestCall_612658
proc url_GetRebootCacheCluster_615013(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootCacheCluster_615012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_615014 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_615014 = validateParameter(valid_615014, JArray, required = true, default = nil)
  if valid_615014 != nil:
    section.add "CacheNodeIdsToReboot", valid_615014
  var valid_615015 = query.getOrDefault("CacheClusterId")
  valid_615015 = validateParameter(valid_615015, JString, required = true,
                                 default = nil)
  if valid_615015 != nil:
    section.add "CacheClusterId", valid_615015
  var valid_615016 = query.getOrDefault("Action")
  valid_615016 = validateParameter(valid_615016, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_615016 != nil:
    section.add "Action", valid_615016
  var valid_615017 = query.getOrDefault("Version")
  valid_615017 = validateParameter(valid_615017, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615017 != nil:
    section.add "Version", valid_615017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615018 = header.getOrDefault("X-Amz-Signature")
  valid_615018 = validateParameter(valid_615018, JString, required = false,
                                 default = nil)
  if valid_615018 != nil:
    section.add "X-Amz-Signature", valid_615018
  var valid_615019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615019 = validateParameter(valid_615019, JString, required = false,
                                 default = nil)
  if valid_615019 != nil:
    section.add "X-Amz-Content-Sha256", valid_615019
  var valid_615020 = header.getOrDefault("X-Amz-Date")
  valid_615020 = validateParameter(valid_615020, JString, required = false,
                                 default = nil)
  if valid_615020 != nil:
    section.add "X-Amz-Date", valid_615020
  var valid_615021 = header.getOrDefault("X-Amz-Credential")
  valid_615021 = validateParameter(valid_615021, JString, required = false,
                                 default = nil)
  if valid_615021 != nil:
    section.add "X-Amz-Credential", valid_615021
  var valid_615022 = header.getOrDefault("X-Amz-Security-Token")
  valid_615022 = validateParameter(valid_615022, JString, required = false,
                                 default = nil)
  if valid_615022 != nil:
    section.add "X-Amz-Security-Token", valid_615022
  var valid_615023 = header.getOrDefault("X-Amz-Algorithm")
  valid_615023 = validateParameter(valid_615023, JString, required = false,
                                 default = nil)
  if valid_615023 != nil:
    section.add "X-Amz-Algorithm", valid_615023
  var valid_615024 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615024 = validateParameter(valid_615024, JString, required = false,
                                 default = nil)
  if valid_615024 != nil:
    section.add "X-Amz-SignedHeaders", valid_615024
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615025: Call_GetRebootCacheCluster_615011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_615025.validator(path, query, header, formData, body)
  let scheme = call_615025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615025.url(scheme.get, call_615025.host, call_615025.base,
                         call_615025.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615025, url, valid)

proc call*(call_615026: Call_GetRebootCacheCluster_615011;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615027 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_615027.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_615027, "CacheClusterId", newJString(CacheClusterId))
  add(query_615027, "Action", newJString(Action))
  add(query_615027, "Version", newJString(Version))
  result = call_615026.call(nil, query_615027, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_615011(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_615012, base: "/",
    url: url_GetRebootCacheCluster_615013, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_615063 = ref object of OpenApiRestCall_612658
proc url_PostRemoveTagsFromResource_615065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_615064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615066 = query.getOrDefault("Action")
  valid_615066 = validateParameter(valid_615066, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615066 != nil:
    section.add "Action", valid_615066
  var valid_615067 = query.getOrDefault("Version")
  valid_615067 = validateParameter(valid_615067, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615067 != nil:
    section.add "Version", valid_615067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615068 = header.getOrDefault("X-Amz-Signature")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Signature", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-Content-Sha256", valid_615069
  var valid_615070 = header.getOrDefault("X-Amz-Date")
  valid_615070 = validateParameter(valid_615070, JString, required = false,
                                 default = nil)
  if valid_615070 != nil:
    section.add "X-Amz-Date", valid_615070
  var valid_615071 = header.getOrDefault("X-Amz-Credential")
  valid_615071 = validateParameter(valid_615071, JString, required = false,
                                 default = nil)
  if valid_615071 != nil:
    section.add "X-Amz-Credential", valid_615071
  var valid_615072 = header.getOrDefault("X-Amz-Security-Token")
  valid_615072 = validateParameter(valid_615072, JString, required = false,
                                 default = nil)
  if valid_615072 != nil:
    section.add "X-Amz-Security-Token", valid_615072
  var valid_615073 = header.getOrDefault("X-Amz-Algorithm")
  valid_615073 = validateParameter(valid_615073, JString, required = false,
                                 default = nil)
  if valid_615073 != nil:
    section.add "X-Amz-Algorithm", valid_615073
  var valid_615074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615074 = validateParameter(valid_615074, JString, required = false,
                                 default = nil)
  if valid_615074 != nil:
    section.add "X-Amz-SignedHeaders", valid_615074
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_615075 = formData.getOrDefault("TagKeys")
  valid_615075 = validateParameter(valid_615075, JArray, required = true, default = nil)
  if valid_615075 != nil:
    section.add "TagKeys", valid_615075
  var valid_615076 = formData.getOrDefault("ResourceName")
  valid_615076 = validateParameter(valid_615076, JString, required = true,
                                 default = nil)
  if valid_615076 != nil:
    section.add "ResourceName", valid_615076
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615077: Call_PostRemoveTagsFromResource_615063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_615077.validator(path, query, header, formData, body)
  let scheme = call_615077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615077.url(scheme.get, call_615077.host, call_615077.base,
                         call_615077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615077, url, valid)

proc call*(call_615078: Call_PostRemoveTagsFromResource_615063; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_615079 = newJObject()
  var formData_615080 = newJObject()
  if TagKeys != nil:
    formData_615080.add "TagKeys", TagKeys
  add(query_615079, "Action", newJString(Action))
  add(query_615079, "Version", newJString(Version))
  add(formData_615080, "ResourceName", newJString(ResourceName))
  result = call_615078.call(nil, query_615079, nil, formData_615080, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_615063(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_615064, base: "/",
    url: url_PostRemoveTagsFromResource_615065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_615046 = ref object of OpenApiRestCall_612658
proc url_GetRemoveTagsFromResource_615048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_615047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_615049 = query.getOrDefault("ResourceName")
  valid_615049 = validateParameter(valid_615049, JString, required = true,
                                 default = nil)
  if valid_615049 != nil:
    section.add "ResourceName", valid_615049
  var valid_615050 = query.getOrDefault("TagKeys")
  valid_615050 = validateParameter(valid_615050, JArray, required = true, default = nil)
  if valid_615050 != nil:
    section.add "TagKeys", valid_615050
  var valid_615051 = query.getOrDefault("Action")
  valid_615051 = validateParameter(valid_615051, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_615051 != nil:
    section.add "Action", valid_615051
  var valid_615052 = query.getOrDefault("Version")
  valid_615052 = validateParameter(valid_615052, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615052 != nil:
    section.add "Version", valid_615052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615053 = header.getOrDefault("X-Amz-Signature")
  valid_615053 = validateParameter(valid_615053, JString, required = false,
                                 default = nil)
  if valid_615053 != nil:
    section.add "X-Amz-Signature", valid_615053
  var valid_615054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615054 = validateParameter(valid_615054, JString, required = false,
                                 default = nil)
  if valid_615054 != nil:
    section.add "X-Amz-Content-Sha256", valid_615054
  var valid_615055 = header.getOrDefault("X-Amz-Date")
  valid_615055 = validateParameter(valid_615055, JString, required = false,
                                 default = nil)
  if valid_615055 != nil:
    section.add "X-Amz-Date", valid_615055
  var valid_615056 = header.getOrDefault("X-Amz-Credential")
  valid_615056 = validateParameter(valid_615056, JString, required = false,
                                 default = nil)
  if valid_615056 != nil:
    section.add "X-Amz-Credential", valid_615056
  var valid_615057 = header.getOrDefault("X-Amz-Security-Token")
  valid_615057 = validateParameter(valid_615057, JString, required = false,
                                 default = nil)
  if valid_615057 != nil:
    section.add "X-Amz-Security-Token", valid_615057
  var valid_615058 = header.getOrDefault("X-Amz-Algorithm")
  valid_615058 = validateParameter(valid_615058, JString, required = false,
                                 default = nil)
  if valid_615058 != nil:
    section.add "X-Amz-Algorithm", valid_615058
  var valid_615059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615059 = validateParameter(valid_615059, JString, required = false,
                                 default = nil)
  if valid_615059 != nil:
    section.add "X-Amz-SignedHeaders", valid_615059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615060: Call_GetRemoveTagsFromResource_615046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_615060.validator(path, query, header, formData, body)
  let scheme = call_615060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615060.url(scheme.get, call_615060.host, call_615060.base,
                         call_615060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615060, url, valid)

proc call*(call_615061: Call_GetRemoveTagsFromResource_615046;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615062 = newJObject()
  add(query_615062, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_615062.add "TagKeys", TagKeys
  add(query_615062, "Action", newJString(Action))
  add(query_615062, "Version", newJString(Version))
  result = call_615061.call(nil, query_615062, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_615046(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_615047, base: "/",
    url: url_GetRemoveTagsFromResource_615048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_615099 = ref object of OpenApiRestCall_612658
proc url_PostResetCacheParameterGroup_615101(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetCacheParameterGroup_615100(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615102 = query.getOrDefault("Action")
  valid_615102 = validateParameter(valid_615102, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_615102 != nil:
    section.add "Action", valid_615102
  var valid_615103 = query.getOrDefault("Version")
  valid_615103 = validateParameter(valid_615103, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615103 != nil:
    section.add "Version", valid_615103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615104 = header.getOrDefault("X-Amz-Signature")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-Signature", valid_615104
  var valid_615105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615105 = validateParameter(valid_615105, JString, required = false,
                                 default = nil)
  if valid_615105 != nil:
    section.add "X-Amz-Content-Sha256", valid_615105
  var valid_615106 = header.getOrDefault("X-Amz-Date")
  valid_615106 = validateParameter(valid_615106, JString, required = false,
                                 default = nil)
  if valid_615106 != nil:
    section.add "X-Amz-Date", valid_615106
  var valid_615107 = header.getOrDefault("X-Amz-Credential")
  valid_615107 = validateParameter(valid_615107, JString, required = false,
                                 default = nil)
  if valid_615107 != nil:
    section.add "X-Amz-Credential", valid_615107
  var valid_615108 = header.getOrDefault("X-Amz-Security-Token")
  valid_615108 = validateParameter(valid_615108, JString, required = false,
                                 default = nil)
  if valid_615108 != nil:
    section.add "X-Amz-Security-Token", valid_615108
  var valid_615109 = header.getOrDefault("X-Amz-Algorithm")
  valid_615109 = validateParameter(valid_615109, JString, required = false,
                                 default = nil)
  if valid_615109 != nil:
    section.add "X-Amz-Algorithm", valid_615109
  var valid_615110 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615110 = validateParameter(valid_615110, JString, required = false,
                                 default = nil)
  if valid_615110 != nil:
    section.add "X-Amz-SignedHeaders", valid_615110
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_615111 = formData.getOrDefault("ResetAllParameters")
  valid_615111 = validateParameter(valid_615111, JBool, required = false, default = nil)
  if valid_615111 != nil:
    section.add "ResetAllParameters", valid_615111
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_615112 = formData.getOrDefault("CacheParameterGroupName")
  valid_615112 = validateParameter(valid_615112, JString, required = true,
                                 default = nil)
  if valid_615112 != nil:
    section.add "CacheParameterGroupName", valid_615112
  var valid_615113 = formData.getOrDefault("ParameterNameValues")
  valid_615113 = validateParameter(valid_615113, JArray, required = false,
                                 default = nil)
  if valid_615113 != nil:
    section.add "ParameterNameValues", valid_615113
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615114: Call_PostResetCacheParameterGroup_615099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_615114.validator(path, query, header, formData, body)
  let scheme = call_615114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615114.url(scheme.get, call_615114.host, call_615114.base,
                         call_615114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615114, url, valid)

proc call*(call_615115: Call_PostResetCacheParameterGroup_615099;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_615116 = newJObject()
  var formData_615117 = newJObject()
  add(formData_615117, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_615117, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_615116, "Action", newJString(Action))
  add(query_615116, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_615117.add "ParameterNameValues", ParameterNameValues
  result = call_615115.call(nil, query_615116, nil, formData_615117, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_615099(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_615100, base: "/",
    url: url_PostResetCacheParameterGroup_615101,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_615081 = ref object of OpenApiRestCall_612658
proc url_GetResetCacheParameterGroup_615083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetCacheParameterGroup_615082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_615084 = query.getOrDefault("CacheParameterGroupName")
  valid_615084 = validateParameter(valid_615084, JString, required = true,
                                 default = nil)
  if valid_615084 != nil:
    section.add "CacheParameterGroupName", valid_615084
  var valid_615085 = query.getOrDefault("ResetAllParameters")
  valid_615085 = validateParameter(valid_615085, JBool, required = false, default = nil)
  if valid_615085 != nil:
    section.add "ResetAllParameters", valid_615085
  var valid_615086 = query.getOrDefault("ParameterNameValues")
  valid_615086 = validateParameter(valid_615086, JArray, required = false,
                                 default = nil)
  if valid_615086 != nil:
    section.add "ParameterNameValues", valid_615086
  var valid_615087 = query.getOrDefault("Action")
  valid_615087 = validateParameter(valid_615087, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_615087 != nil:
    section.add "Action", valid_615087
  var valid_615088 = query.getOrDefault("Version")
  valid_615088 = validateParameter(valid_615088, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615088 != nil:
    section.add "Version", valid_615088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615089 = header.getOrDefault("X-Amz-Signature")
  valid_615089 = validateParameter(valid_615089, JString, required = false,
                                 default = nil)
  if valid_615089 != nil:
    section.add "X-Amz-Signature", valid_615089
  var valid_615090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615090 = validateParameter(valid_615090, JString, required = false,
                                 default = nil)
  if valid_615090 != nil:
    section.add "X-Amz-Content-Sha256", valid_615090
  var valid_615091 = header.getOrDefault("X-Amz-Date")
  valid_615091 = validateParameter(valid_615091, JString, required = false,
                                 default = nil)
  if valid_615091 != nil:
    section.add "X-Amz-Date", valid_615091
  var valid_615092 = header.getOrDefault("X-Amz-Credential")
  valid_615092 = validateParameter(valid_615092, JString, required = false,
                                 default = nil)
  if valid_615092 != nil:
    section.add "X-Amz-Credential", valid_615092
  var valid_615093 = header.getOrDefault("X-Amz-Security-Token")
  valid_615093 = validateParameter(valid_615093, JString, required = false,
                                 default = nil)
  if valid_615093 != nil:
    section.add "X-Amz-Security-Token", valid_615093
  var valid_615094 = header.getOrDefault("X-Amz-Algorithm")
  valid_615094 = validateParameter(valid_615094, JString, required = false,
                                 default = nil)
  if valid_615094 != nil:
    section.add "X-Amz-Algorithm", valid_615094
  var valid_615095 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615095 = validateParameter(valid_615095, JString, required = false,
                                 default = nil)
  if valid_615095 != nil:
    section.add "X-Amz-SignedHeaders", valid_615095
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615096: Call_GetResetCacheParameterGroup_615081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_615096.validator(path, query, header, formData, body)
  let scheme = call_615096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615096.url(scheme.get, call_615096.host, call_615096.base,
                         call_615096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615096, url, valid)

proc call*(call_615097: Call_GetResetCacheParameterGroup_615081;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615098 = newJObject()
  add(query_615098, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_615098, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_615098.add "ParameterNameValues", ParameterNameValues
  add(query_615098, "Action", newJString(Action))
  add(query_615098, "Version", newJString(Version))
  result = call_615097.call(nil, query_615098, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_615081(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_615082, base: "/",
    url: url_GetResetCacheParameterGroup_615083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_615136 = ref object of OpenApiRestCall_612658
proc url_PostRevokeCacheSecurityGroupIngress_615138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_615137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615139 = query.getOrDefault("Action")
  valid_615139 = validateParameter(valid_615139, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_615139 != nil:
    section.add "Action", valid_615139
  var valid_615140 = query.getOrDefault("Version")
  valid_615140 = validateParameter(valid_615140, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615140 != nil:
    section.add "Version", valid_615140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615141 = header.getOrDefault("X-Amz-Signature")
  valid_615141 = validateParameter(valid_615141, JString, required = false,
                                 default = nil)
  if valid_615141 != nil:
    section.add "X-Amz-Signature", valid_615141
  var valid_615142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615142 = validateParameter(valid_615142, JString, required = false,
                                 default = nil)
  if valid_615142 != nil:
    section.add "X-Amz-Content-Sha256", valid_615142
  var valid_615143 = header.getOrDefault("X-Amz-Date")
  valid_615143 = validateParameter(valid_615143, JString, required = false,
                                 default = nil)
  if valid_615143 != nil:
    section.add "X-Amz-Date", valid_615143
  var valid_615144 = header.getOrDefault("X-Amz-Credential")
  valid_615144 = validateParameter(valid_615144, JString, required = false,
                                 default = nil)
  if valid_615144 != nil:
    section.add "X-Amz-Credential", valid_615144
  var valid_615145 = header.getOrDefault("X-Amz-Security-Token")
  valid_615145 = validateParameter(valid_615145, JString, required = false,
                                 default = nil)
  if valid_615145 != nil:
    section.add "X-Amz-Security-Token", valid_615145
  var valid_615146 = header.getOrDefault("X-Amz-Algorithm")
  valid_615146 = validateParameter(valid_615146, JString, required = false,
                                 default = nil)
  if valid_615146 != nil:
    section.add "X-Amz-Algorithm", valid_615146
  var valid_615147 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "X-Amz-SignedHeaders", valid_615147
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_615148 = formData.getOrDefault("CacheSecurityGroupName")
  valid_615148 = validateParameter(valid_615148, JString, required = true,
                                 default = nil)
  if valid_615148 != nil:
    section.add "CacheSecurityGroupName", valid_615148
  var valid_615149 = formData.getOrDefault("EC2SecurityGroupName")
  valid_615149 = validateParameter(valid_615149, JString, required = true,
                                 default = nil)
  if valid_615149 != nil:
    section.add "EC2SecurityGroupName", valid_615149
  var valid_615150 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_615150 = validateParameter(valid_615150, JString, required = true,
                                 default = nil)
  if valid_615150 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_615150
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615151: Call_PostRevokeCacheSecurityGroupIngress_615136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_615151.validator(path, query, header, formData, body)
  let scheme = call_615151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615151.url(scheme.get, call_615151.host, call_615151.base,
                         call_615151.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615151, url, valid)

proc call*(call_615152: Call_PostRevokeCacheSecurityGroupIngress_615136;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615153 = newJObject()
  var formData_615154 = newJObject()
  add(formData_615154, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_615154, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_615154, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_615153, "Action", newJString(Action))
  add(query_615153, "Version", newJString(Version))
  result = call_615152.call(nil, query_615153, nil, formData_615154, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_615136(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_615137, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_615138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_615118 = ref object of OpenApiRestCall_612658
proc url_GetRevokeCacheSecurityGroupIngress_615120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_615119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_615121 = query.getOrDefault("EC2SecurityGroupName")
  valid_615121 = validateParameter(valid_615121, JString, required = true,
                                 default = nil)
  if valid_615121 != nil:
    section.add "EC2SecurityGroupName", valid_615121
  var valid_615122 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_615122 = validateParameter(valid_615122, JString, required = true,
                                 default = nil)
  if valid_615122 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_615122
  var valid_615123 = query.getOrDefault("Action")
  valid_615123 = validateParameter(valid_615123, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_615123 != nil:
    section.add "Action", valid_615123
  var valid_615124 = query.getOrDefault("CacheSecurityGroupName")
  valid_615124 = validateParameter(valid_615124, JString, required = true,
                                 default = nil)
  if valid_615124 != nil:
    section.add "CacheSecurityGroupName", valid_615124
  var valid_615125 = query.getOrDefault("Version")
  valid_615125 = validateParameter(valid_615125, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615125 != nil:
    section.add "Version", valid_615125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615126 = header.getOrDefault("X-Amz-Signature")
  valid_615126 = validateParameter(valid_615126, JString, required = false,
                                 default = nil)
  if valid_615126 != nil:
    section.add "X-Amz-Signature", valid_615126
  var valid_615127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615127 = validateParameter(valid_615127, JString, required = false,
                                 default = nil)
  if valid_615127 != nil:
    section.add "X-Amz-Content-Sha256", valid_615127
  var valid_615128 = header.getOrDefault("X-Amz-Date")
  valid_615128 = validateParameter(valid_615128, JString, required = false,
                                 default = nil)
  if valid_615128 != nil:
    section.add "X-Amz-Date", valid_615128
  var valid_615129 = header.getOrDefault("X-Amz-Credential")
  valid_615129 = validateParameter(valid_615129, JString, required = false,
                                 default = nil)
  if valid_615129 != nil:
    section.add "X-Amz-Credential", valid_615129
  var valid_615130 = header.getOrDefault("X-Amz-Security-Token")
  valid_615130 = validateParameter(valid_615130, JString, required = false,
                                 default = nil)
  if valid_615130 != nil:
    section.add "X-Amz-Security-Token", valid_615130
  var valid_615131 = header.getOrDefault("X-Amz-Algorithm")
  valid_615131 = validateParameter(valid_615131, JString, required = false,
                                 default = nil)
  if valid_615131 != nil:
    section.add "X-Amz-Algorithm", valid_615131
  var valid_615132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615132 = validateParameter(valid_615132, JString, required = false,
                                 default = nil)
  if valid_615132 != nil:
    section.add "X-Amz-SignedHeaders", valid_615132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615133: Call_GetRevokeCacheSecurityGroupIngress_615118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_615133.validator(path, query, header, formData, body)
  let scheme = call_615133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615133.url(scheme.get, call_615133.host, call_615133.base,
                         call_615133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615133, url, valid)

proc call*(call_615134: Call_GetRevokeCacheSecurityGroupIngress_615118;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_615135 = newJObject()
  add(query_615135, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_615135, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_615135, "Action", newJString(Action))
  add(query_615135, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_615135, "Version", newJString(Version))
  result = call_615134.call(nil, query_615135, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_615118(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_615119, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_615120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartMigration_615172 = ref object of OpenApiRestCall_612658
proc url_PostStartMigration_615174(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartMigration_615173(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615175 = query.getOrDefault("Action")
  valid_615175 = validateParameter(valid_615175, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_615175 != nil:
    section.add "Action", valid_615175
  var valid_615176 = query.getOrDefault("Version")
  valid_615176 = validateParameter(valid_615176, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615176 != nil:
    section.add "Version", valid_615176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615177 = header.getOrDefault("X-Amz-Signature")
  valid_615177 = validateParameter(valid_615177, JString, required = false,
                                 default = nil)
  if valid_615177 != nil:
    section.add "X-Amz-Signature", valid_615177
  var valid_615178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615178 = validateParameter(valid_615178, JString, required = false,
                                 default = nil)
  if valid_615178 != nil:
    section.add "X-Amz-Content-Sha256", valid_615178
  var valid_615179 = header.getOrDefault("X-Amz-Date")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "X-Amz-Date", valid_615179
  var valid_615180 = header.getOrDefault("X-Amz-Credential")
  valid_615180 = validateParameter(valid_615180, JString, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "X-Amz-Credential", valid_615180
  var valid_615181 = header.getOrDefault("X-Amz-Security-Token")
  valid_615181 = validateParameter(valid_615181, JString, required = false,
                                 default = nil)
  if valid_615181 != nil:
    section.add "X-Amz-Security-Token", valid_615181
  var valid_615182 = header.getOrDefault("X-Amz-Algorithm")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "X-Amz-Algorithm", valid_615182
  var valid_615183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "X-Amz-SignedHeaders", valid_615183
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_615184 = formData.getOrDefault("CustomerNodeEndpointList")
  valid_615184 = validateParameter(valid_615184, JArray, required = true, default = nil)
  if valid_615184 != nil:
    section.add "CustomerNodeEndpointList", valid_615184
  var valid_615185 = formData.getOrDefault("ReplicationGroupId")
  valid_615185 = validateParameter(valid_615185, JString, required = true,
                                 default = nil)
  if valid_615185 != nil:
    section.add "ReplicationGroupId", valid_615185
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615186: Call_PostStartMigration_615172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_615186.validator(path, query, header, formData, body)
  let scheme = call_615186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615186.url(scheme.get, call_615186.host, call_615186.base,
                         call_615186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615186, url, valid)

proc call*(call_615187: Call_PostStartMigration_615172;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## postStartMigration
  ## Start the migration of data.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  var query_615188 = newJObject()
  var formData_615189 = newJObject()
  add(query_615188, "Action", newJString(Action))
  add(query_615188, "Version", newJString(Version))
  if CustomerNodeEndpointList != nil:
    formData_615189.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(formData_615189, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_615187.call(nil, query_615188, nil, formData_615189, nil)

var postStartMigration* = Call_PostStartMigration_615172(
    name: "postStartMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=StartMigration",
    validator: validate_PostStartMigration_615173, base: "/",
    url: url_PostStartMigration_615174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartMigration_615155 = ref object of OpenApiRestCall_612658
proc url_GetStartMigration_615157(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartMigration_615156(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_615158 = query.getOrDefault("CustomerNodeEndpointList")
  valid_615158 = validateParameter(valid_615158, JArray, required = true, default = nil)
  if valid_615158 != nil:
    section.add "CustomerNodeEndpointList", valid_615158
  var valid_615159 = query.getOrDefault("Action")
  valid_615159 = validateParameter(valid_615159, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_615159 != nil:
    section.add "Action", valid_615159
  var valid_615160 = query.getOrDefault("ReplicationGroupId")
  valid_615160 = validateParameter(valid_615160, JString, required = true,
                                 default = nil)
  if valid_615160 != nil:
    section.add "ReplicationGroupId", valid_615160
  var valid_615161 = query.getOrDefault("Version")
  valid_615161 = validateParameter(valid_615161, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615161 != nil:
    section.add "Version", valid_615161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615162 = header.getOrDefault("X-Amz-Signature")
  valid_615162 = validateParameter(valid_615162, JString, required = false,
                                 default = nil)
  if valid_615162 != nil:
    section.add "X-Amz-Signature", valid_615162
  var valid_615163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "X-Amz-Content-Sha256", valid_615163
  var valid_615164 = header.getOrDefault("X-Amz-Date")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "X-Amz-Date", valid_615164
  var valid_615165 = header.getOrDefault("X-Amz-Credential")
  valid_615165 = validateParameter(valid_615165, JString, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "X-Amz-Credential", valid_615165
  var valid_615166 = header.getOrDefault("X-Amz-Security-Token")
  valid_615166 = validateParameter(valid_615166, JString, required = false,
                                 default = nil)
  if valid_615166 != nil:
    section.add "X-Amz-Security-Token", valid_615166
  var valid_615167 = header.getOrDefault("X-Amz-Algorithm")
  valid_615167 = validateParameter(valid_615167, JString, required = false,
                                 default = nil)
  if valid_615167 != nil:
    section.add "X-Amz-Algorithm", valid_615167
  var valid_615168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615168 = validateParameter(valid_615168, JString, required = false,
                                 default = nil)
  if valid_615168 != nil:
    section.add "X-Amz-SignedHeaders", valid_615168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615169: Call_GetStartMigration_615155; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_615169.validator(path, query, header, formData, body)
  let scheme = call_615169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615169.url(scheme.get, call_615169.host, call_615169.base,
                         call_615169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615169, url, valid)

proc call*(call_615170: Call_GetStartMigration_615155;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## getStartMigration
  ## Start the migration of data.
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: string (required)
  var query_615171 = newJObject()
  if CustomerNodeEndpointList != nil:
    query_615171.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(query_615171, "Action", newJString(Action))
  add(query_615171, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_615171, "Version", newJString(Version))
  result = call_615170.call(nil, query_615171, nil, nil, nil)

var getStartMigration* = Call_GetStartMigration_615155(name: "getStartMigration",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=StartMigration", validator: validate_GetStartMigration_615156,
    base: "/", url: url_GetStartMigration_615157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_615207 = ref object of OpenApiRestCall_612658
proc url_PostTestFailover_615209(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestFailover_615208(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615210 = query.getOrDefault("Action")
  valid_615210 = validateParameter(valid_615210, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_615210 != nil:
    section.add "Action", valid_615210
  var valid_615211 = query.getOrDefault("Version")
  valid_615211 = validateParameter(valid_615211, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615211 != nil:
    section.add "Version", valid_615211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615212 = header.getOrDefault("X-Amz-Signature")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "X-Amz-Signature", valid_615212
  var valid_615213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "X-Amz-Content-Sha256", valid_615213
  var valid_615214 = header.getOrDefault("X-Amz-Date")
  valid_615214 = validateParameter(valid_615214, JString, required = false,
                                 default = nil)
  if valid_615214 != nil:
    section.add "X-Amz-Date", valid_615214
  var valid_615215 = header.getOrDefault("X-Amz-Credential")
  valid_615215 = validateParameter(valid_615215, JString, required = false,
                                 default = nil)
  if valid_615215 != nil:
    section.add "X-Amz-Credential", valid_615215
  var valid_615216 = header.getOrDefault("X-Amz-Security-Token")
  valid_615216 = validateParameter(valid_615216, JString, required = false,
                                 default = nil)
  if valid_615216 != nil:
    section.add "X-Amz-Security-Token", valid_615216
  var valid_615217 = header.getOrDefault("X-Amz-Algorithm")
  valid_615217 = validateParameter(valid_615217, JString, required = false,
                                 default = nil)
  if valid_615217 != nil:
    section.add "X-Amz-Algorithm", valid_615217
  var valid_615218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615218 = validateParameter(valid_615218, JString, required = false,
                                 default = nil)
  if valid_615218 != nil:
    section.add "X-Amz-SignedHeaders", valid_615218
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_615219 = formData.getOrDefault("NodeGroupId")
  valid_615219 = validateParameter(valid_615219, JString, required = true,
                                 default = nil)
  if valid_615219 != nil:
    section.add "NodeGroupId", valid_615219
  var valid_615220 = formData.getOrDefault("ReplicationGroupId")
  valid_615220 = validateParameter(valid_615220, JString, required = true,
                                 default = nil)
  if valid_615220 != nil:
    section.add "ReplicationGroupId", valid_615220
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615221: Call_PostTestFailover_615207; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_615221.validator(path, query, header, formData, body)
  let scheme = call_615221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615221.url(scheme.get, call_615221.host, call_615221.base,
                         call_615221.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615221, url, valid)

proc call*(call_615222: Call_PostTestFailover_615207; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_615223 = newJObject()
  var formData_615224 = newJObject()
  add(formData_615224, "NodeGroupId", newJString(NodeGroupId))
  add(query_615223, "Action", newJString(Action))
  add(query_615223, "Version", newJString(Version))
  add(formData_615224, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_615222.call(nil, query_615223, nil, formData_615224, nil)

var postTestFailover* = Call_PostTestFailover_615207(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_615208,
    base: "/", url: url_PostTestFailover_615209,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_615190 = ref object of OpenApiRestCall_612658
proc url_GetTestFailover_615192(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestFailover_615191(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  var valid_615193 = query.getOrDefault("Action")
  valid_615193 = validateParameter(valid_615193, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_615193 != nil:
    section.add "Action", valid_615193
  var valid_615194 = query.getOrDefault("ReplicationGroupId")
  valid_615194 = validateParameter(valid_615194, JString, required = true,
                                 default = nil)
  if valid_615194 != nil:
    section.add "ReplicationGroupId", valid_615194
  var valid_615195 = query.getOrDefault("Version")
  valid_615195 = validateParameter(valid_615195, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_615195 != nil:
    section.add "Version", valid_615195
  var valid_615196 = query.getOrDefault("NodeGroupId")
  valid_615196 = validateParameter(valid_615196, JString, required = true,
                                 default = nil)
  if valid_615196 != nil:
    section.add "NodeGroupId", valid_615196
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615197 = header.getOrDefault("X-Amz-Signature")
  valid_615197 = validateParameter(valid_615197, JString, required = false,
                                 default = nil)
  if valid_615197 != nil:
    section.add "X-Amz-Signature", valid_615197
  var valid_615198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "X-Amz-Content-Sha256", valid_615198
  var valid_615199 = header.getOrDefault("X-Amz-Date")
  valid_615199 = validateParameter(valid_615199, JString, required = false,
                                 default = nil)
  if valid_615199 != nil:
    section.add "X-Amz-Date", valid_615199
  var valid_615200 = header.getOrDefault("X-Amz-Credential")
  valid_615200 = validateParameter(valid_615200, JString, required = false,
                                 default = nil)
  if valid_615200 != nil:
    section.add "X-Amz-Credential", valid_615200
  var valid_615201 = header.getOrDefault("X-Amz-Security-Token")
  valid_615201 = validateParameter(valid_615201, JString, required = false,
                                 default = nil)
  if valid_615201 != nil:
    section.add "X-Amz-Security-Token", valid_615201
  var valid_615202 = header.getOrDefault("X-Amz-Algorithm")
  valid_615202 = validateParameter(valid_615202, JString, required = false,
                                 default = nil)
  if valid_615202 != nil:
    section.add "X-Amz-Algorithm", valid_615202
  var valid_615203 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615203 = validateParameter(valid_615203, JString, required = false,
                                 default = nil)
  if valid_615203 != nil:
    section.add "X-Amz-SignedHeaders", valid_615203
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615204: Call_GetTestFailover_615190; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_615204.validator(path, query, header, formData, body)
  let scheme = call_615204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615204.url(scheme.get, call_615204.host, call_615204.base,
                         call_615204.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615204, url, valid)

proc call*(call_615205: Call_GetTestFailover_615190; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_615206 = newJObject()
  add(query_615206, "Action", newJString(Action))
  add(query_615206, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_615206, "Version", newJString(Version))
  add(query_615206, "NodeGroupId", newJString(NodeGroupId))
  result = call_615205.call(nil, query_615206, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_615190(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_615191,
    base: "/", url: url_GetTestFailover_615192, schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
