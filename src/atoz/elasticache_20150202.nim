
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_590364 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_590364](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_590364): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_590975 = ref object of OpenApiRestCall_590364
proc url_PostAddTagsToResource_590977(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_590976(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_590978 = query.getOrDefault("Action")
  valid_590978 = validateParameter(valid_590978, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_590978 != nil:
    section.add "Action", valid_590978
  var valid_590979 = query.getOrDefault("Version")
  valid_590979 = validateParameter(valid_590979, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_590979 != nil:
    section.add "Version", valid_590979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_590980 = header.getOrDefault("X-Amz-Signature")
  valid_590980 = validateParameter(valid_590980, JString, required = false,
                                 default = nil)
  if valid_590980 != nil:
    section.add "X-Amz-Signature", valid_590980
  var valid_590981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_590981 = validateParameter(valid_590981, JString, required = false,
                                 default = nil)
  if valid_590981 != nil:
    section.add "X-Amz-Content-Sha256", valid_590981
  var valid_590982 = header.getOrDefault("X-Amz-Date")
  valid_590982 = validateParameter(valid_590982, JString, required = false,
                                 default = nil)
  if valid_590982 != nil:
    section.add "X-Amz-Date", valid_590982
  var valid_590983 = header.getOrDefault("X-Amz-Credential")
  valid_590983 = validateParameter(valid_590983, JString, required = false,
                                 default = nil)
  if valid_590983 != nil:
    section.add "X-Amz-Credential", valid_590983
  var valid_590984 = header.getOrDefault("X-Amz-Security-Token")
  valid_590984 = validateParameter(valid_590984, JString, required = false,
                                 default = nil)
  if valid_590984 != nil:
    section.add "X-Amz-Security-Token", valid_590984
  var valid_590985 = header.getOrDefault("X-Amz-Algorithm")
  valid_590985 = validateParameter(valid_590985, JString, required = false,
                                 default = nil)
  if valid_590985 != nil:
    section.add "X-Amz-Algorithm", valid_590985
  var valid_590986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_590986 = validateParameter(valid_590986, JString, required = false,
                                 default = nil)
  if valid_590986 != nil:
    section.add "X-Amz-SignedHeaders", valid_590986
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_590987 = formData.getOrDefault("Tags")
  valid_590987 = validateParameter(valid_590987, JArray, required = true, default = nil)
  if valid_590987 != nil:
    section.add "Tags", valid_590987
  var valid_590988 = formData.getOrDefault("ResourceName")
  valid_590988 = validateParameter(valid_590988, JString, required = true,
                                 default = nil)
  if valid_590988 != nil:
    section.add "ResourceName", valid_590988
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590989: Call_PostAddTagsToResource_590975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_590989.validator(path, query, header, formData, body)
  let scheme = call_590989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590989.url(scheme.get, call_590989.host, call_590989.base,
                         call_590989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590989, url, valid)

proc call*(call_590990: Call_PostAddTagsToResource_590975; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_590991 = newJObject()
  var formData_590992 = newJObject()
  add(query_590991, "Action", newJString(Action))
  if Tags != nil:
    formData_590992.add "Tags", Tags
  add(query_590991, "Version", newJString(Version))
  add(formData_590992, "ResourceName", newJString(ResourceName))
  result = call_590990.call(nil, query_590991, nil, formData_590992, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_590975(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_590976, base: "/",
    url: url_PostAddTagsToResource_590977, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_590703 = ref object of OpenApiRestCall_590364
proc url_GetAddTagsToResource_590705(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_590704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_590817 = query.getOrDefault("Tags")
  valid_590817 = validateParameter(valid_590817, JArray, required = true, default = nil)
  if valid_590817 != nil:
    section.add "Tags", valid_590817
  var valid_590818 = query.getOrDefault("ResourceName")
  valid_590818 = validateParameter(valid_590818, JString, required = true,
                                 default = nil)
  if valid_590818 != nil:
    section.add "ResourceName", valid_590818
  var valid_590832 = query.getOrDefault("Action")
  valid_590832 = validateParameter(valid_590832, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_590832 != nil:
    section.add "Action", valid_590832
  var valid_590833 = query.getOrDefault("Version")
  valid_590833 = validateParameter(valid_590833, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_590833 != nil:
    section.add "Version", valid_590833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_590834 = header.getOrDefault("X-Amz-Signature")
  valid_590834 = validateParameter(valid_590834, JString, required = false,
                                 default = nil)
  if valid_590834 != nil:
    section.add "X-Amz-Signature", valid_590834
  var valid_590835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_590835 = validateParameter(valid_590835, JString, required = false,
                                 default = nil)
  if valid_590835 != nil:
    section.add "X-Amz-Content-Sha256", valid_590835
  var valid_590836 = header.getOrDefault("X-Amz-Date")
  valid_590836 = validateParameter(valid_590836, JString, required = false,
                                 default = nil)
  if valid_590836 != nil:
    section.add "X-Amz-Date", valid_590836
  var valid_590837 = header.getOrDefault("X-Amz-Credential")
  valid_590837 = validateParameter(valid_590837, JString, required = false,
                                 default = nil)
  if valid_590837 != nil:
    section.add "X-Amz-Credential", valid_590837
  var valid_590838 = header.getOrDefault("X-Amz-Security-Token")
  valid_590838 = validateParameter(valid_590838, JString, required = false,
                                 default = nil)
  if valid_590838 != nil:
    section.add "X-Amz-Security-Token", valid_590838
  var valid_590839 = header.getOrDefault("X-Amz-Algorithm")
  valid_590839 = validateParameter(valid_590839, JString, required = false,
                                 default = nil)
  if valid_590839 != nil:
    section.add "X-Amz-Algorithm", valid_590839
  var valid_590840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_590840 = validateParameter(valid_590840, JString, required = false,
                                 default = nil)
  if valid_590840 != nil:
    section.add "X-Amz-SignedHeaders", valid_590840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_590863: Call_GetAddTagsToResource_590703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_590863.validator(path, query, header, formData, body)
  let scheme = call_590863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_590863.url(scheme.get, call_590863.host, call_590863.base,
                         call_590863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_590863, url, valid)

proc call*(call_590934: Call_GetAddTagsToResource_590703; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_590935 = newJObject()
  if Tags != nil:
    query_590935.add "Tags", Tags
  add(query_590935, "ResourceName", newJString(ResourceName))
  add(query_590935, "Action", newJString(Action))
  add(query_590935, "Version", newJString(Version))
  result = call_590934.call(nil, query_590935, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_590703(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_590704, base: "/",
    url: url_GetAddTagsToResource_590705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_591011 = ref object of OpenApiRestCall_590364
proc url_PostAuthorizeCacheSecurityGroupIngress_591013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_591012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591014 = query.getOrDefault("Action")
  valid_591014 = validateParameter(valid_591014, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_591014 != nil:
    section.add "Action", valid_591014
  var valid_591015 = query.getOrDefault("Version")
  valid_591015 = validateParameter(valid_591015, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591015 != nil:
    section.add "Version", valid_591015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591016 = header.getOrDefault("X-Amz-Signature")
  valid_591016 = validateParameter(valid_591016, JString, required = false,
                                 default = nil)
  if valid_591016 != nil:
    section.add "X-Amz-Signature", valid_591016
  var valid_591017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591017 = validateParameter(valid_591017, JString, required = false,
                                 default = nil)
  if valid_591017 != nil:
    section.add "X-Amz-Content-Sha256", valid_591017
  var valid_591018 = header.getOrDefault("X-Amz-Date")
  valid_591018 = validateParameter(valid_591018, JString, required = false,
                                 default = nil)
  if valid_591018 != nil:
    section.add "X-Amz-Date", valid_591018
  var valid_591019 = header.getOrDefault("X-Amz-Credential")
  valid_591019 = validateParameter(valid_591019, JString, required = false,
                                 default = nil)
  if valid_591019 != nil:
    section.add "X-Amz-Credential", valid_591019
  var valid_591020 = header.getOrDefault("X-Amz-Security-Token")
  valid_591020 = validateParameter(valid_591020, JString, required = false,
                                 default = nil)
  if valid_591020 != nil:
    section.add "X-Amz-Security-Token", valid_591020
  var valid_591021 = header.getOrDefault("X-Amz-Algorithm")
  valid_591021 = validateParameter(valid_591021, JString, required = false,
                                 default = nil)
  if valid_591021 != nil:
    section.add "X-Amz-Algorithm", valid_591021
  var valid_591022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591022 = validateParameter(valid_591022, JString, required = false,
                                 default = nil)
  if valid_591022 != nil:
    section.add "X-Amz-SignedHeaders", valid_591022
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_591023 = formData.getOrDefault("CacheSecurityGroupName")
  valid_591023 = validateParameter(valid_591023, JString, required = true,
                                 default = nil)
  if valid_591023 != nil:
    section.add "CacheSecurityGroupName", valid_591023
  var valid_591024 = formData.getOrDefault("EC2SecurityGroupName")
  valid_591024 = validateParameter(valid_591024, JString, required = true,
                                 default = nil)
  if valid_591024 != nil:
    section.add "EC2SecurityGroupName", valid_591024
  var valid_591025 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_591025 = validateParameter(valid_591025, JString, required = true,
                                 default = nil)
  if valid_591025 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_591025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591026: Call_PostAuthorizeCacheSecurityGroupIngress_591011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_591026.validator(path, query, header, formData, body)
  let scheme = call_591026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591026.url(scheme.get, call_591026.host, call_591026.base,
                         call_591026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591026, url, valid)

proc call*(call_591027: Call_PostAuthorizeCacheSecurityGroupIngress_591011;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591028 = newJObject()
  var formData_591029 = newJObject()
  add(formData_591029, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_591029, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_591029, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_591028, "Action", newJString(Action))
  add(query_591028, "Version", newJString(Version))
  result = call_591027.call(nil, query_591028, nil, formData_591029, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_591011(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_591012, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_591013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_590993 = ref object of OpenApiRestCall_590364
proc url_GetAuthorizeCacheSecurityGroupIngress_590995(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_590994(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_590996 = query.getOrDefault("EC2SecurityGroupName")
  valid_590996 = validateParameter(valid_590996, JString, required = true,
                                 default = nil)
  if valid_590996 != nil:
    section.add "EC2SecurityGroupName", valid_590996
  var valid_590997 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_590997 = validateParameter(valid_590997, JString, required = true,
                                 default = nil)
  if valid_590997 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_590997
  var valid_590998 = query.getOrDefault("Action")
  valid_590998 = validateParameter(valid_590998, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_590998 != nil:
    section.add "Action", valid_590998
  var valid_590999 = query.getOrDefault("CacheSecurityGroupName")
  valid_590999 = validateParameter(valid_590999, JString, required = true,
                                 default = nil)
  if valid_590999 != nil:
    section.add "CacheSecurityGroupName", valid_590999
  var valid_591000 = query.getOrDefault("Version")
  valid_591000 = validateParameter(valid_591000, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591000 != nil:
    section.add "Version", valid_591000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591001 = header.getOrDefault("X-Amz-Signature")
  valid_591001 = validateParameter(valid_591001, JString, required = false,
                                 default = nil)
  if valid_591001 != nil:
    section.add "X-Amz-Signature", valid_591001
  var valid_591002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591002 = validateParameter(valid_591002, JString, required = false,
                                 default = nil)
  if valid_591002 != nil:
    section.add "X-Amz-Content-Sha256", valid_591002
  var valid_591003 = header.getOrDefault("X-Amz-Date")
  valid_591003 = validateParameter(valid_591003, JString, required = false,
                                 default = nil)
  if valid_591003 != nil:
    section.add "X-Amz-Date", valid_591003
  var valid_591004 = header.getOrDefault("X-Amz-Credential")
  valid_591004 = validateParameter(valid_591004, JString, required = false,
                                 default = nil)
  if valid_591004 != nil:
    section.add "X-Amz-Credential", valid_591004
  var valid_591005 = header.getOrDefault("X-Amz-Security-Token")
  valid_591005 = validateParameter(valid_591005, JString, required = false,
                                 default = nil)
  if valid_591005 != nil:
    section.add "X-Amz-Security-Token", valid_591005
  var valid_591006 = header.getOrDefault("X-Amz-Algorithm")
  valid_591006 = validateParameter(valid_591006, JString, required = false,
                                 default = nil)
  if valid_591006 != nil:
    section.add "X-Amz-Algorithm", valid_591006
  var valid_591007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591007 = validateParameter(valid_591007, JString, required = false,
                                 default = nil)
  if valid_591007 != nil:
    section.add "X-Amz-SignedHeaders", valid_591007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591008: Call_GetAuthorizeCacheSecurityGroupIngress_590993;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_591008.validator(path, query, header, formData, body)
  let scheme = call_591008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591008.url(scheme.get, call_591008.host, call_591008.base,
                         call_591008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591008, url, valid)

proc call*(call_591009: Call_GetAuthorizeCacheSecurityGroupIngress_590993;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_591010 = newJObject()
  add(query_591010, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_591010, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_591010, "Action", newJString(Action))
  add(query_591010, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_591010, "Version", newJString(Version))
  result = call_591009.call(nil, query_591010, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_590993(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_590994, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_590995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_591048 = ref object of OpenApiRestCall_590364
proc url_PostBatchApplyUpdateAction_591050(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchApplyUpdateAction_591049(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591051 = query.getOrDefault("Action")
  valid_591051 = validateParameter(valid_591051, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_591051 != nil:
    section.add "Action", valid_591051
  var valid_591052 = query.getOrDefault("Version")
  valid_591052 = validateParameter(valid_591052, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591052 != nil:
    section.add "Version", valid_591052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591053 = header.getOrDefault("X-Amz-Signature")
  valid_591053 = validateParameter(valid_591053, JString, required = false,
                                 default = nil)
  if valid_591053 != nil:
    section.add "X-Amz-Signature", valid_591053
  var valid_591054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591054 = validateParameter(valid_591054, JString, required = false,
                                 default = nil)
  if valid_591054 != nil:
    section.add "X-Amz-Content-Sha256", valid_591054
  var valid_591055 = header.getOrDefault("X-Amz-Date")
  valid_591055 = validateParameter(valid_591055, JString, required = false,
                                 default = nil)
  if valid_591055 != nil:
    section.add "X-Amz-Date", valid_591055
  var valid_591056 = header.getOrDefault("X-Amz-Credential")
  valid_591056 = validateParameter(valid_591056, JString, required = false,
                                 default = nil)
  if valid_591056 != nil:
    section.add "X-Amz-Credential", valid_591056
  var valid_591057 = header.getOrDefault("X-Amz-Security-Token")
  valid_591057 = validateParameter(valid_591057, JString, required = false,
                                 default = nil)
  if valid_591057 != nil:
    section.add "X-Amz-Security-Token", valid_591057
  var valid_591058 = header.getOrDefault("X-Amz-Algorithm")
  valid_591058 = validateParameter(valid_591058, JString, required = false,
                                 default = nil)
  if valid_591058 != nil:
    section.add "X-Amz-Algorithm", valid_591058
  var valid_591059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591059 = validateParameter(valid_591059, JString, required = false,
                                 default = nil)
  if valid_591059 != nil:
    section.add "X-Amz-SignedHeaders", valid_591059
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_591060 = formData.getOrDefault("ServiceUpdateName")
  valid_591060 = validateParameter(valid_591060, JString, required = true,
                                 default = nil)
  if valid_591060 != nil:
    section.add "ServiceUpdateName", valid_591060
  var valid_591061 = formData.getOrDefault("ReplicationGroupIds")
  valid_591061 = validateParameter(valid_591061, JArray, required = false,
                                 default = nil)
  if valid_591061 != nil:
    section.add "ReplicationGroupIds", valid_591061
  var valid_591062 = formData.getOrDefault("CacheClusterIds")
  valid_591062 = validateParameter(valid_591062, JArray, required = false,
                                 default = nil)
  if valid_591062 != nil:
    section.add "CacheClusterIds", valid_591062
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591063: Call_PostBatchApplyUpdateAction_591048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_591063.validator(path, query, header, formData, body)
  let scheme = call_591063.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591063.url(scheme.get, call_591063.host, call_591063.base,
                         call_591063.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591063, url, valid)

proc call*(call_591064: Call_PostBatchApplyUpdateAction_591048;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591065 = newJObject()
  var formData_591066 = newJObject()
  add(formData_591066, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_591066.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_591066.add "CacheClusterIds", CacheClusterIds
  add(query_591065, "Action", newJString(Action))
  add(query_591065, "Version", newJString(Version))
  result = call_591064.call(nil, query_591065, nil, formData_591066, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_591048(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_591049, base: "/",
    url: url_PostBatchApplyUpdateAction_591050,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_591030 = ref object of OpenApiRestCall_590364
proc url_GetBatchApplyUpdateAction_591032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchApplyUpdateAction_591031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_591033 = query.getOrDefault("ServiceUpdateName")
  valid_591033 = validateParameter(valid_591033, JString, required = true,
                                 default = nil)
  if valid_591033 != nil:
    section.add "ServiceUpdateName", valid_591033
  var valid_591034 = query.getOrDefault("Action")
  valid_591034 = validateParameter(valid_591034, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_591034 != nil:
    section.add "Action", valid_591034
  var valid_591035 = query.getOrDefault("CacheClusterIds")
  valid_591035 = validateParameter(valid_591035, JArray, required = false,
                                 default = nil)
  if valid_591035 != nil:
    section.add "CacheClusterIds", valid_591035
  var valid_591036 = query.getOrDefault("ReplicationGroupIds")
  valid_591036 = validateParameter(valid_591036, JArray, required = false,
                                 default = nil)
  if valid_591036 != nil:
    section.add "ReplicationGroupIds", valid_591036
  var valid_591037 = query.getOrDefault("Version")
  valid_591037 = validateParameter(valid_591037, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591037 != nil:
    section.add "Version", valid_591037
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591038 = header.getOrDefault("X-Amz-Signature")
  valid_591038 = validateParameter(valid_591038, JString, required = false,
                                 default = nil)
  if valid_591038 != nil:
    section.add "X-Amz-Signature", valid_591038
  var valid_591039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591039 = validateParameter(valid_591039, JString, required = false,
                                 default = nil)
  if valid_591039 != nil:
    section.add "X-Amz-Content-Sha256", valid_591039
  var valid_591040 = header.getOrDefault("X-Amz-Date")
  valid_591040 = validateParameter(valid_591040, JString, required = false,
                                 default = nil)
  if valid_591040 != nil:
    section.add "X-Amz-Date", valid_591040
  var valid_591041 = header.getOrDefault("X-Amz-Credential")
  valid_591041 = validateParameter(valid_591041, JString, required = false,
                                 default = nil)
  if valid_591041 != nil:
    section.add "X-Amz-Credential", valid_591041
  var valid_591042 = header.getOrDefault("X-Amz-Security-Token")
  valid_591042 = validateParameter(valid_591042, JString, required = false,
                                 default = nil)
  if valid_591042 != nil:
    section.add "X-Amz-Security-Token", valid_591042
  var valid_591043 = header.getOrDefault("X-Amz-Algorithm")
  valid_591043 = validateParameter(valid_591043, JString, required = false,
                                 default = nil)
  if valid_591043 != nil:
    section.add "X-Amz-Algorithm", valid_591043
  var valid_591044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591044 = validateParameter(valid_591044, JString, required = false,
                                 default = nil)
  if valid_591044 != nil:
    section.add "X-Amz-SignedHeaders", valid_591044
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591045: Call_GetBatchApplyUpdateAction_591030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_591045.validator(path, query, header, formData, body)
  let scheme = call_591045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591045.url(scheme.get, call_591045.host, call_591045.base,
                         call_591045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591045, url, valid)

proc call*(call_591046: Call_GetBatchApplyUpdateAction_591030;
          ServiceUpdateName: string; Action: string = "BatchApplyUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_591047 = newJObject()
  add(query_591047, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_591047, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_591047.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_591047.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_591047, "Version", newJString(Version))
  result = call_591046.call(nil, query_591047, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_591030(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_591031, base: "/",
    url: url_GetBatchApplyUpdateAction_591032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_591085 = ref object of OpenApiRestCall_590364
proc url_PostBatchStopUpdateAction_591087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchStopUpdateAction_591086(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591088 = query.getOrDefault("Action")
  valid_591088 = validateParameter(valid_591088, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_591088 != nil:
    section.add "Action", valid_591088
  var valid_591089 = query.getOrDefault("Version")
  valid_591089 = validateParameter(valid_591089, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591089 != nil:
    section.add "Version", valid_591089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591090 = header.getOrDefault("X-Amz-Signature")
  valid_591090 = validateParameter(valid_591090, JString, required = false,
                                 default = nil)
  if valid_591090 != nil:
    section.add "X-Amz-Signature", valid_591090
  var valid_591091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591091 = validateParameter(valid_591091, JString, required = false,
                                 default = nil)
  if valid_591091 != nil:
    section.add "X-Amz-Content-Sha256", valid_591091
  var valid_591092 = header.getOrDefault("X-Amz-Date")
  valid_591092 = validateParameter(valid_591092, JString, required = false,
                                 default = nil)
  if valid_591092 != nil:
    section.add "X-Amz-Date", valid_591092
  var valid_591093 = header.getOrDefault("X-Amz-Credential")
  valid_591093 = validateParameter(valid_591093, JString, required = false,
                                 default = nil)
  if valid_591093 != nil:
    section.add "X-Amz-Credential", valid_591093
  var valid_591094 = header.getOrDefault("X-Amz-Security-Token")
  valid_591094 = validateParameter(valid_591094, JString, required = false,
                                 default = nil)
  if valid_591094 != nil:
    section.add "X-Amz-Security-Token", valid_591094
  var valid_591095 = header.getOrDefault("X-Amz-Algorithm")
  valid_591095 = validateParameter(valid_591095, JString, required = false,
                                 default = nil)
  if valid_591095 != nil:
    section.add "X-Amz-Algorithm", valid_591095
  var valid_591096 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591096 = validateParameter(valid_591096, JString, required = false,
                                 default = nil)
  if valid_591096 != nil:
    section.add "X-Amz-SignedHeaders", valid_591096
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_591097 = formData.getOrDefault("ServiceUpdateName")
  valid_591097 = validateParameter(valid_591097, JString, required = true,
                                 default = nil)
  if valid_591097 != nil:
    section.add "ServiceUpdateName", valid_591097
  var valid_591098 = formData.getOrDefault("ReplicationGroupIds")
  valid_591098 = validateParameter(valid_591098, JArray, required = false,
                                 default = nil)
  if valid_591098 != nil:
    section.add "ReplicationGroupIds", valid_591098
  var valid_591099 = formData.getOrDefault("CacheClusterIds")
  valid_591099 = validateParameter(valid_591099, JArray, required = false,
                                 default = nil)
  if valid_591099 != nil:
    section.add "CacheClusterIds", valid_591099
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591100: Call_PostBatchStopUpdateAction_591085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_591100.validator(path, query, header, formData, body)
  let scheme = call_591100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591100.url(scheme.get, call_591100.host, call_591100.base,
                         call_591100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591100, url, valid)

proc call*(call_591101: Call_PostBatchStopUpdateAction_591085;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil; Action: string = "BatchStopUpdateAction";
          Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591102 = newJObject()
  var formData_591103 = newJObject()
  add(formData_591103, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_591103.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_591103.add "CacheClusterIds", CacheClusterIds
  add(query_591102, "Action", newJString(Action))
  add(query_591102, "Version", newJString(Version))
  result = call_591101.call(nil, query_591102, nil, formData_591103, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_591085(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_591086, base: "/",
    url: url_PostBatchStopUpdateAction_591087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_591067 = ref object of OpenApiRestCall_590364
proc url_GetBatchStopUpdateAction_591069(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchStopUpdateAction_591068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_591070 = query.getOrDefault("ServiceUpdateName")
  valid_591070 = validateParameter(valid_591070, JString, required = true,
                                 default = nil)
  if valid_591070 != nil:
    section.add "ServiceUpdateName", valid_591070
  var valid_591071 = query.getOrDefault("Action")
  valid_591071 = validateParameter(valid_591071, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_591071 != nil:
    section.add "Action", valid_591071
  var valid_591072 = query.getOrDefault("CacheClusterIds")
  valid_591072 = validateParameter(valid_591072, JArray, required = false,
                                 default = nil)
  if valid_591072 != nil:
    section.add "CacheClusterIds", valid_591072
  var valid_591073 = query.getOrDefault("ReplicationGroupIds")
  valid_591073 = validateParameter(valid_591073, JArray, required = false,
                                 default = nil)
  if valid_591073 != nil:
    section.add "ReplicationGroupIds", valid_591073
  var valid_591074 = query.getOrDefault("Version")
  valid_591074 = validateParameter(valid_591074, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591074 != nil:
    section.add "Version", valid_591074
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591075 = header.getOrDefault("X-Amz-Signature")
  valid_591075 = validateParameter(valid_591075, JString, required = false,
                                 default = nil)
  if valid_591075 != nil:
    section.add "X-Amz-Signature", valid_591075
  var valid_591076 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591076 = validateParameter(valid_591076, JString, required = false,
                                 default = nil)
  if valid_591076 != nil:
    section.add "X-Amz-Content-Sha256", valid_591076
  var valid_591077 = header.getOrDefault("X-Amz-Date")
  valid_591077 = validateParameter(valid_591077, JString, required = false,
                                 default = nil)
  if valid_591077 != nil:
    section.add "X-Amz-Date", valid_591077
  var valid_591078 = header.getOrDefault("X-Amz-Credential")
  valid_591078 = validateParameter(valid_591078, JString, required = false,
                                 default = nil)
  if valid_591078 != nil:
    section.add "X-Amz-Credential", valid_591078
  var valid_591079 = header.getOrDefault("X-Amz-Security-Token")
  valid_591079 = validateParameter(valid_591079, JString, required = false,
                                 default = nil)
  if valid_591079 != nil:
    section.add "X-Amz-Security-Token", valid_591079
  var valid_591080 = header.getOrDefault("X-Amz-Algorithm")
  valid_591080 = validateParameter(valid_591080, JString, required = false,
                                 default = nil)
  if valid_591080 != nil:
    section.add "X-Amz-Algorithm", valid_591080
  var valid_591081 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591081 = validateParameter(valid_591081, JString, required = false,
                                 default = nil)
  if valid_591081 != nil:
    section.add "X-Amz-SignedHeaders", valid_591081
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591082: Call_GetBatchStopUpdateAction_591067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_591082.validator(path, query, header, formData, body)
  let scheme = call_591082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591082.url(scheme.get, call_591082.host, call_591082.base,
                         call_591082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591082, url, valid)

proc call*(call_591083: Call_GetBatchStopUpdateAction_591067;
          ServiceUpdateName: string; Action: string = "BatchStopUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_591084 = newJObject()
  add(query_591084, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_591084, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_591084.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_591084.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_591084, "Version", newJString(Version))
  result = call_591083.call(nil, query_591084, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_591067(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_591068, base: "/",
    url: url_GetBatchStopUpdateAction_591069, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_591123 = ref object of OpenApiRestCall_590364
proc url_PostCopySnapshot_591125(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopySnapshot_591124(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591126 = query.getOrDefault("Action")
  valid_591126 = validateParameter(valid_591126, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_591126 != nil:
    section.add "Action", valid_591126
  var valid_591127 = query.getOrDefault("Version")
  valid_591127 = validateParameter(valid_591127, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591127 != nil:
    section.add "Version", valid_591127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591128 = header.getOrDefault("X-Amz-Signature")
  valid_591128 = validateParameter(valid_591128, JString, required = false,
                                 default = nil)
  if valid_591128 != nil:
    section.add "X-Amz-Signature", valid_591128
  var valid_591129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591129 = validateParameter(valid_591129, JString, required = false,
                                 default = nil)
  if valid_591129 != nil:
    section.add "X-Amz-Content-Sha256", valid_591129
  var valid_591130 = header.getOrDefault("X-Amz-Date")
  valid_591130 = validateParameter(valid_591130, JString, required = false,
                                 default = nil)
  if valid_591130 != nil:
    section.add "X-Amz-Date", valid_591130
  var valid_591131 = header.getOrDefault("X-Amz-Credential")
  valid_591131 = validateParameter(valid_591131, JString, required = false,
                                 default = nil)
  if valid_591131 != nil:
    section.add "X-Amz-Credential", valid_591131
  var valid_591132 = header.getOrDefault("X-Amz-Security-Token")
  valid_591132 = validateParameter(valid_591132, JString, required = false,
                                 default = nil)
  if valid_591132 != nil:
    section.add "X-Amz-Security-Token", valid_591132
  var valid_591133 = header.getOrDefault("X-Amz-Algorithm")
  valid_591133 = validateParameter(valid_591133, JString, required = false,
                                 default = nil)
  if valid_591133 != nil:
    section.add "X-Amz-Algorithm", valid_591133
  var valid_591134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591134 = validateParameter(valid_591134, JString, required = false,
                                 default = nil)
  if valid_591134 != nil:
    section.add "X-Amz-SignedHeaders", valid_591134
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_591135 = formData.getOrDefault("KmsKeyId")
  valid_591135 = validateParameter(valid_591135, JString, required = false,
                                 default = nil)
  if valid_591135 != nil:
    section.add "KmsKeyId", valid_591135
  var valid_591136 = formData.getOrDefault("TargetBucket")
  valid_591136 = validateParameter(valid_591136, JString, required = false,
                                 default = nil)
  if valid_591136 != nil:
    section.add "TargetBucket", valid_591136
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_591137 = formData.getOrDefault("SourceSnapshotName")
  valid_591137 = validateParameter(valid_591137, JString, required = true,
                                 default = nil)
  if valid_591137 != nil:
    section.add "SourceSnapshotName", valid_591137
  var valid_591138 = formData.getOrDefault("TargetSnapshotName")
  valid_591138 = validateParameter(valid_591138, JString, required = true,
                                 default = nil)
  if valid_591138 != nil:
    section.add "TargetSnapshotName", valid_591138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591139: Call_PostCopySnapshot_591123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_591139.validator(path, query, header, formData, body)
  let scheme = call_591139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591139.url(scheme.get, call_591139.host, call_591139.base,
                         call_591139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591139, url, valid)

proc call*(call_591140: Call_PostCopySnapshot_591123; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_591141 = newJObject()
  var formData_591142 = newJObject()
  add(formData_591142, "KmsKeyId", newJString(KmsKeyId))
  add(query_591141, "Action", newJString(Action))
  add(formData_591142, "TargetBucket", newJString(TargetBucket))
  add(formData_591142, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_591142, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_591141, "Version", newJString(Version))
  result = call_591140.call(nil, query_591141, nil, formData_591142, nil)

var postCopySnapshot* = Call_PostCopySnapshot_591123(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_591124,
    base: "/", url: url_PostCopySnapshot_591125,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_591104 = ref object of OpenApiRestCall_590364
proc url_GetCopySnapshot_591106(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopySnapshot_591105(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_591107 = query.getOrDefault("KmsKeyId")
  valid_591107 = validateParameter(valid_591107, JString, required = false,
                                 default = nil)
  if valid_591107 != nil:
    section.add "KmsKeyId", valid_591107
  var valid_591108 = query.getOrDefault("TargetBucket")
  valid_591108 = validateParameter(valid_591108, JString, required = false,
                                 default = nil)
  if valid_591108 != nil:
    section.add "TargetBucket", valid_591108
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591109 = query.getOrDefault("Action")
  valid_591109 = validateParameter(valid_591109, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_591109 != nil:
    section.add "Action", valid_591109
  var valid_591110 = query.getOrDefault("TargetSnapshotName")
  valid_591110 = validateParameter(valid_591110, JString, required = true,
                                 default = nil)
  if valid_591110 != nil:
    section.add "TargetSnapshotName", valid_591110
  var valid_591111 = query.getOrDefault("SourceSnapshotName")
  valid_591111 = validateParameter(valid_591111, JString, required = true,
                                 default = nil)
  if valid_591111 != nil:
    section.add "SourceSnapshotName", valid_591111
  var valid_591112 = query.getOrDefault("Version")
  valid_591112 = validateParameter(valid_591112, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591112 != nil:
    section.add "Version", valid_591112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591113 = header.getOrDefault("X-Amz-Signature")
  valid_591113 = validateParameter(valid_591113, JString, required = false,
                                 default = nil)
  if valid_591113 != nil:
    section.add "X-Amz-Signature", valid_591113
  var valid_591114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591114 = validateParameter(valid_591114, JString, required = false,
                                 default = nil)
  if valid_591114 != nil:
    section.add "X-Amz-Content-Sha256", valid_591114
  var valid_591115 = header.getOrDefault("X-Amz-Date")
  valid_591115 = validateParameter(valid_591115, JString, required = false,
                                 default = nil)
  if valid_591115 != nil:
    section.add "X-Amz-Date", valid_591115
  var valid_591116 = header.getOrDefault("X-Amz-Credential")
  valid_591116 = validateParameter(valid_591116, JString, required = false,
                                 default = nil)
  if valid_591116 != nil:
    section.add "X-Amz-Credential", valid_591116
  var valid_591117 = header.getOrDefault("X-Amz-Security-Token")
  valid_591117 = validateParameter(valid_591117, JString, required = false,
                                 default = nil)
  if valid_591117 != nil:
    section.add "X-Amz-Security-Token", valid_591117
  var valid_591118 = header.getOrDefault("X-Amz-Algorithm")
  valid_591118 = validateParameter(valid_591118, JString, required = false,
                                 default = nil)
  if valid_591118 != nil:
    section.add "X-Amz-Algorithm", valid_591118
  var valid_591119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591119 = validateParameter(valid_591119, JString, required = false,
                                 default = nil)
  if valid_591119 != nil:
    section.add "X-Amz-SignedHeaders", valid_591119
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591120: Call_GetCopySnapshot_591104; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_591120.validator(path, query, header, formData, body)
  let scheme = call_591120.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591120.url(scheme.get, call_591120.host, call_591120.base,
                         call_591120.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591120, url, valid)

proc call*(call_591121: Call_GetCopySnapshot_591104; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_591122 = newJObject()
  add(query_591122, "KmsKeyId", newJString(KmsKeyId))
  add(query_591122, "TargetBucket", newJString(TargetBucket))
  add(query_591122, "Action", newJString(Action))
  add(query_591122, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_591122, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_591122, "Version", newJString(Version))
  result = call_591121.call(nil, query_591122, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_591104(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_591105,
    base: "/", url: url_GetCopySnapshot_591106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_591181 = ref object of OpenApiRestCall_590364
proc url_PostCreateCacheCluster_591183(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheCluster_591182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591184 = query.getOrDefault("Action")
  valid_591184 = validateParameter(valid_591184, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_591184 != nil:
    section.add "Action", valid_591184
  var valid_591185 = query.getOrDefault("Version")
  valid_591185 = validateParameter(valid_591185, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591185 != nil:
    section.add "Version", valid_591185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591186 = header.getOrDefault("X-Amz-Signature")
  valid_591186 = validateParameter(valid_591186, JString, required = false,
                                 default = nil)
  if valid_591186 != nil:
    section.add "X-Amz-Signature", valid_591186
  var valid_591187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591187 = validateParameter(valid_591187, JString, required = false,
                                 default = nil)
  if valid_591187 != nil:
    section.add "X-Amz-Content-Sha256", valid_591187
  var valid_591188 = header.getOrDefault("X-Amz-Date")
  valid_591188 = validateParameter(valid_591188, JString, required = false,
                                 default = nil)
  if valid_591188 != nil:
    section.add "X-Amz-Date", valid_591188
  var valid_591189 = header.getOrDefault("X-Amz-Credential")
  valid_591189 = validateParameter(valid_591189, JString, required = false,
                                 default = nil)
  if valid_591189 != nil:
    section.add "X-Amz-Credential", valid_591189
  var valid_591190 = header.getOrDefault("X-Amz-Security-Token")
  valid_591190 = validateParameter(valid_591190, JString, required = false,
                                 default = nil)
  if valid_591190 != nil:
    section.add "X-Amz-Security-Token", valid_591190
  var valid_591191 = header.getOrDefault("X-Amz-Algorithm")
  valid_591191 = validateParameter(valid_591191, JString, required = false,
                                 default = nil)
  if valid_591191 != nil:
    section.add "X-Amz-Algorithm", valid_591191
  var valid_591192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591192 = validateParameter(valid_591192, JString, required = false,
                                 default = nil)
  if valid_591192 != nil:
    section.add "X-Amz-SignedHeaders", valid_591192
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_591193 = formData.getOrDefault("SecurityGroupIds")
  valid_591193 = validateParameter(valid_591193, JArray, required = false,
                                 default = nil)
  if valid_591193 != nil:
    section.add "SecurityGroupIds", valid_591193
  var valid_591194 = formData.getOrDefault("ReplicationGroupId")
  valid_591194 = validateParameter(valid_591194, JString, required = false,
                                 default = nil)
  if valid_591194 != nil:
    section.add "ReplicationGroupId", valid_591194
  var valid_591195 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_591195 = validateParameter(valid_591195, JString, required = false,
                                 default = nil)
  if valid_591195 != nil:
    section.add "PreferredMaintenanceWindow", valid_591195
  var valid_591196 = formData.getOrDefault("Port")
  valid_591196 = validateParameter(valid_591196, JInt, required = false, default = nil)
  if valid_591196 != nil:
    section.add "Port", valid_591196
  var valid_591197 = formData.getOrDefault("NumCacheNodes")
  valid_591197 = validateParameter(valid_591197, JInt, required = false, default = nil)
  if valid_591197 != nil:
    section.add "NumCacheNodes", valid_591197
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_591198 = formData.getOrDefault("CacheClusterId")
  valid_591198 = validateParameter(valid_591198, JString, required = true,
                                 default = nil)
  if valid_591198 != nil:
    section.add "CacheClusterId", valid_591198
  var valid_591199 = formData.getOrDefault("NotificationTopicArn")
  valid_591199 = validateParameter(valid_591199, JString, required = false,
                                 default = nil)
  if valid_591199 != nil:
    section.add "NotificationTopicArn", valid_591199
  var valid_591200 = formData.getOrDefault("EngineVersion")
  valid_591200 = validateParameter(valid_591200, JString, required = false,
                                 default = nil)
  if valid_591200 != nil:
    section.add "EngineVersion", valid_591200
  var valid_591201 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_591201 = validateParameter(valid_591201, JString, required = false,
                                 default = nil)
  if valid_591201 != nil:
    section.add "PreferredAvailabilityZone", valid_591201
  var valid_591202 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_591202 = validateParameter(valid_591202, JArray, required = false,
                                 default = nil)
  if valid_591202 != nil:
    section.add "PreferredAvailabilityZones", valid_591202
  var valid_591203 = formData.getOrDefault("AZMode")
  valid_591203 = validateParameter(valid_591203, JString, required = false,
                                 default = newJString("single-az"))
  if valid_591203 != nil:
    section.add "AZMode", valid_591203
  var valid_591204 = formData.getOrDefault("Engine")
  valid_591204 = validateParameter(valid_591204, JString, required = false,
                                 default = nil)
  if valid_591204 != nil:
    section.add "Engine", valid_591204
  var valid_591205 = formData.getOrDefault("CacheParameterGroupName")
  valid_591205 = validateParameter(valid_591205, JString, required = false,
                                 default = nil)
  if valid_591205 != nil:
    section.add "CacheParameterGroupName", valid_591205
  var valid_591206 = formData.getOrDefault("SnapshotName")
  valid_591206 = validateParameter(valid_591206, JString, required = false,
                                 default = nil)
  if valid_591206 != nil:
    section.add "SnapshotName", valid_591206
  var valid_591207 = formData.getOrDefault("SnapshotArns")
  valid_591207 = validateParameter(valid_591207, JArray, required = false,
                                 default = nil)
  if valid_591207 != nil:
    section.add "SnapshotArns", valid_591207
  var valid_591208 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_591208 = validateParameter(valid_591208, JBool, required = false, default = nil)
  if valid_591208 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591208
  var valid_591209 = formData.getOrDefault("CacheSubnetGroupName")
  valid_591209 = validateParameter(valid_591209, JString, required = false,
                                 default = nil)
  if valid_591209 != nil:
    section.add "CacheSubnetGroupName", valid_591209
  var valid_591210 = formData.getOrDefault("AuthToken")
  valid_591210 = validateParameter(valid_591210, JString, required = false,
                                 default = nil)
  if valid_591210 != nil:
    section.add "AuthToken", valid_591210
  var valid_591211 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_591211 = validateParameter(valid_591211, JArray, required = false,
                                 default = nil)
  if valid_591211 != nil:
    section.add "CacheSecurityGroupNames", valid_591211
  var valid_591212 = formData.getOrDefault("Tags")
  valid_591212 = validateParameter(valid_591212, JArray, required = false,
                                 default = nil)
  if valid_591212 != nil:
    section.add "Tags", valid_591212
  var valid_591213 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_591213 = validateParameter(valid_591213, JInt, required = false, default = nil)
  if valid_591213 != nil:
    section.add "SnapshotRetentionLimit", valid_591213
  var valid_591214 = formData.getOrDefault("CacheNodeType")
  valid_591214 = validateParameter(valid_591214, JString, required = false,
                                 default = nil)
  if valid_591214 != nil:
    section.add "CacheNodeType", valid_591214
  var valid_591215 = formData.getOrDefault("SnapshotWindow")
  valid_591215 = validateParameter(valid_591215, JString, required = false,
                                 default = nil)
  if valid_591215 != nil:
    section.add "SnapshotWindow", valid_591215
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591216: Call_PostCreateCacheCluster_591181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_591216.validator(path, query, header, formData, body)
  let scheme = call_591216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591216.url(scheme.get, call_591216.host, call_591216.base,
                         call_591216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591216, url, valid)

proc call*(call_591217: Call_PostCreateCacheCluster_591181; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_591218 = newJObject()
  var formData_591219 = newJObject()
  if SecurityGroupIds != nil:
    formData_591219.add "SecurityGroupIds", SecurityGroupIds
  add(formData_591219, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_591219, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_591219, "Port", newJInt(Port))
  add(formData_591219, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_591219, "CacheClusterId", newJString(CacheClusterId))
  add(formData_591219, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_591219, "EngineVersion", newJString(EngineVersion))
  add(formData_591219, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_591219.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_591219, "AZMode", newJString(AZMode))
  add(formData_591219, "Engine", newJString(Engine))
  add(formData_591219, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_591219, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_591219.add "SnapshotArns", SnapshotArns
  add(formData_591219, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_591219, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591218, "Action", newJString(Action))
  add(formData_591219, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_591219.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_591219.add "Tags", Tags
  add(formData_591219, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_591218, "Version", newJString(Version))
  add(formData_591219, "CacheNodeType", newJString(CacheNodeType))
  add(formData_591219, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_591217.call(nil, query_591218, nil, formData_591219, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_591181(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_591182, base: "/",
    url: url_PostCreateCacheCluster_591183, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_591143 = ref object of OpenApiRestCall_590364
proc url_GetCreateCacheCluster_591145(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheCluster_591144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_591146 = query.getOrDefault("SnapshotArns")
  valid_591146 = validateParameter(valid_591146, JArray, required = false,
                                 default = nil)
  if valid_591146 != nil:
    section.add "SnapshotArns", valid_591146
  var valid_591147 = query.getOrDefault("AuthToken")
  valid_591147 = validateParameter(valid_591147, JString, required = false,
                                 default = nil)
  if valid_591147 != nil:
    section.add "AuthToken", valid_591147
  var valid_591148 = query.getOrDefault("Engine")
  valid_591148 = validateParameter(valid_591148, JString, required = false,
                                 default = nil)
  if valid_591148 != nil:
    section.add "Engine", valid_591148
  var valid_591149 = query.getOrDefault("CacheParameterGroupName")
  valid_591149 = validateParameter(valid_591149, JString, required = false,
                                 default = nil)
  if valid_591149 != nil:
    section.add "CacheParameterGroupName", valid_591149
  var valid_591150 = query.getOrDefault("Tags")
  valid_591150 = validateParameter(valid_591150, JArray, required = false,
                                 default = nil)
  if valid_591150 != nil:
    section.add "Tags", valid_591150
  var valid_591151 = query.getOrDefault("AZMode")
  valid_591151 = validateParameter(valid_591151, JString, required = false,
                                 default = newJString("single-az"))
  if valid_591151 != nil:
    section.add "AZMode", valid_591151
  var valid_591152 = query.getOrDefault("NumCacheNodes")
  valid_591152 = validateParameter(valid_591152, JInt, required = false, default = nil)
  if valid_591152 != nil:
    section.add "NumCacheNodes", valid_591152
  var valid_591153 = query.getOrDefault("SnapshotRetentionLimit")
  valid_591153 = validateParameter(valid_591153, JInt, required = false, default = nil)
  if valid_591153 != nil:
    section.add "SnapshotRetentionLimit", valid_591153
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_591154 = query.getOrDefault("CacheClusterId")
  valid_591154 = validateParameter(valid_591154, JString, required = true,
                                 default = nil)
  if valid_591154 != nil:
    section.add "CacheClusterId", valid_591154
  var valid_591155 = query.getOrDefault("PreferredAvailabilityZone")
  valid_591155 = validateParameter(valid_591155, JString, required = false,
                                 default = nil)
  if valid_591155 != nil:
    section.add "PreferredAvailabilityZone", valid_591155
  var valid_591156 = query.getOrDefault("CacheSecurityGroupNames")
  valid_591156 = validateParameter(valid_591156, JArray, required = false,
                                 default = nil)
  if valid_591156 != nil:
    section.add "CacheSecurityGroupNames", valid_591156
  var valid_591157 = query.getOrDefault("CacheNodeType")
  valid_591157 = validateParameter(valid_591157, JString, required = false,
                                 default = nil)
  if valid_591157 != nil:
    section.add "CacheNodeType", valid_591157
  var valid_591158 = query.getOrDefault("EngineVersion")
  valid_591158 = validateParameter(valid_591158, JString, required = false,
                                 default = nil)
  if valid_591158 != nil:
    section.add "EngineVersion", valid_591158
  var valid_591159 = query.getOrDefault("Action")
  valid_591159 = validateParameter(valid_591159, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_591159 != nil:
    section.add "Action", valid_591159
  var valid_591160 = query.getOrDefault("Port")
  valid_591160 = validateParameter(valid_591160, JInt, required = false, default = nil)
  if valid_591160 != nil:
    section.add "Port", valid_591160
  var valid_591161 = query.getOrDefault("ReplicationGroupId")
  valid_591161 = validateParameter(valid_591161, JString, required = false,
                                 default = nil)
  if valid_591161 != nil:
    section.add "ReplicationGroupId", valid_591161
  var valid_591162 = query.getOrDefault("CacheSubnetGroupName")
  valid_591162 = validateParameter(valid_591162, JString, required = false,
                                 default = nil)
  if valid_591162 != nil:
    section.add "CacheSubnetGroupName", valid_591162
  var valid_591163 = query.getOrDefault("NotificationTopicArn")
  valid_591163 = validateParameter(valid_591163, JString, required = false,
                                 default = nil)
  if valid_591163 != nil:
    section.add "NotificationTopicArn", valid_591163
  var valid_591164 = query.getOrDefault("PreferredAvailabilityZones")
  valid_591164 = validateParameter(valid_591164, JArray, required = false,
                                 default = nil)
  if valid_591164 != nil:
    section.add "PreferredAvailabilityZones", valid_591164
  var valid_591165 = query.getOrDefault("Version")
  valid_591165 = validateParameter(valid_591165, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591165 != nil:
    section.add "Version", valid_591165
  var valid_591166 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_591166 = validateParameter(valid_591166, JString, required = false,
                                 default = nil)
  if valid_591166 != nil:
    section.add "PreferredMaintenanceWindow", valid_591166
  var valid_591167 = query.getOrDefault("SnapshotName")
  valid_591167 = validateParameter(valid_591167, JString, required = false,
                                 default = nil)
  if valid_591167 != nil:
    section.add "SnapshotName", valid_591167
  var valid_591168 = query.getOrDefault("SnapshotWindow")
  valid_591168 = validateParameter(valid_591168, JString, required = false,
                                 default = nil)
  if valid_591168 != nil:
    section.add "SnapshotWindow", valid_591168
  var valid_591169 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_591169 = validateParameter(valid_591169, JBool, required = false, default = nil)
  if valid_591169 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591169
  var valid_591170 = query.getOrDefault("SecurityGroupIds")
  valid_591170 = validateParameter(valid_591170, JArray, required = false,
                                 default = nil)
  if valid_591170 != nil:
    section.add "SecurityGroupIds", valid_591170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591171 = header.getOrDefault("X-Amz-Signature")
  valid_591171 = validateParameter(valid_591171, JString, required = false,
                                 default = nil)
  if valid_591171 != nil:
    section.add "X-Amz-Signature", valid_591171
  var valid_591172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591172 = validateParameter(valid_591172, JString, required = false,
                                 default = nil)
  if valid_591172 != nil:
    section.add "X-Amz-Content-Sha256", valid_591172
  var valid_591173 = header.getOrDefault("X-Amz-Date")
  valid_591173 = validateParameter(valid_591173, JString, required = false,
                                 default = nil)
  if valid_591173 != nil:
    section.add "X-Amz-Date", valid_591173
  var valid_591174 = header.getOrDefault("X-Amz-Credential")
  valid_591174 = validateParameter(valid_591174, JString, required = false,
                                 default = nil)
  if valid_591174 != nil:
    section.add "X-Amz-Credential", valid_591174
  var valid_591175 = header.getOrDefault("X-Amz-Security-Token")
  valid_591175 = validateParameter(valid_591175, JString, required = false,
                                 default = nil)
  if valid_591175 != nil:
    section.add "X-Amz-Security-Token", valid_591175
  var valid_591176 = header.getOrDefault("X-Amz-Algorithm")
  valid_591176 = validateParameter(valid_591176, JString, required = false,
                                 default = nil)
  if valid_591176 != nil:
    section.add "X-Amz-Algorithm", valid_591176
  var valid_591177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591177 = validateParameter(valid_591177, JString, required = false,
                                 default = nil)
  if valid_591177 != nil:
    section.add "X-Amz-SignedHeaders", valid_591177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591178: Call_GetCreateCacheCluster_591143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_591178.validator(path, query, header, formData, body)
  let scheme = call_591178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591178.url(scheme.get, call_591178.host, call_591178.base,
                         call_591178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591178, url, valid)

proc call*(call_591179: Call_GetCreateCacheCluster_591143; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_591180 = newJObject()
  if SnapshotArns != nil:
    query_591180.add "SnapshotArns", SnapshotArns
  add(query_591180, "AuthToken", newJString(AuthToken))
  add(query_591180, "Engine", newJString(Engine))
  add(query_591180, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_591180.add "Tags", Tags
  add(query_591180, "AZMode", newJString(AZMode))
  add(query_591180, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_591180, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_591180, "CacheClusterId", newJString(CacheClusterId))
  add(query_591180, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_591180.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_591180, "CacheNodeType", newJString(CacheNodeType))
  add(query_591180, "EngineVersion", newJString(EngineVersion))
  add(query_591180, "Action", newJString(Action))
  add(query_591180, "Port", newJInt(Port))
  add(query_591180, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_591180, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591180, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_591180.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_591180, "Version", newJString(Version))
  add(query_591180, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_591180, "SnapshotName", newJString(SnapshotName))
  add(query_591180, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_591180, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_591180.add "SecurityGroupIds", SecurityGroupIds
  result = call_591179.call(nil, query_591180, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_591143(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_591144, base: "/",
    url: url_GetCreateCacheCluster_591145, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_591238 = ref object of OpenApiRestCall_590364
proc url_PostCreateCacheParameterGroup_591240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheParameterGroup_591239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591241 = query.getOrDefault("Action")
  valid_591241 = validateParameter(valid_591241, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_591241 != nil:
    section.add "Action", valid_591241
  var valid_591242 = query.getOrDefault("Version")
  valid_591242 = validateParameter(valid_591242, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591242 != nil:
    section.add "Version", valid_591242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591243 = header.getOrDefault("X-Amz-Signature")
  valid_591243 = validateParameter(valid_591243, JString, required = false,
                                 default = nil)
  if valid_591243 != nil:
    section.add "X-Amz-Signature", valid_591243
  var valid_591244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591244 = validateParameter(valid_591244, JString, required = false,
                                 default = nil)
  if valid_591244 != nil:
    section.add "X-Amz-Content-Sha256", valid_591244
  var valid_591245 = header.getOrDefault("X-Amz-Date")
  valid_591245 = validateParameter(valid_591245, JString, required = false,
                                 default = nil)
  if valid_591245 != nil:
    section.add "X-Amz-Date", valid_591245
  var valid_591246 = header.getOrDefault("X-Amz-Credential")
  valid_591246 = validateParameter(valid_591246, JString, required = false,
                                 default = nil)
  if valid_591246 != nil:
    section.add "X-Amz-Credential", valid_591246
  var valid_591247 = header.getOrDefault("X-Amz-Security-Token")
  valid_591247 = validateParameter(valid_591247, JString, required = false,
                                 default = nil)
  if valid_591247 != nil:
    section.add "X-Amz-Security-Token", valid_591247
  var valid_591248 = header.getOrDefault("X-Amz-Algorithm")
  valid_591248 = validateParameter(valid_591248, JString, required = false,
                                 default = nil)
  if valid_591248 != nil:
    section.add "X-Amz-Algorithm", valid_591248
  var valid_591249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591249 = validateParameter(valid_591249, JString, required = false,
                                 default = nil)
  if valid_591249 != nil:
    section.add "X-Amz-SignedHeaders", valid_591249
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_591250 = formData.getOrDefault("Description")
  valid_591250 = validateParameter(valid_591250, JString, required = true,
                                 default = nil)
  if valid_591250 != nil:
    section.add "Description", valid_591250
  var valid_591251 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_591251 = validateParameter(valid_591251, JString, required = true,
                                 default = nil)
  if valid_591251 != nil:
    section.add "CacheParameterGroupFamily", valid_591251
  var valid_591252 = formData.getOrDefault("CacheParameterGroupName")
  valid_591252 = validateParameter(valid_591252, JString, required = true,
                                 default = nil)
  if valid_591252 != nil:
    section.add "CacheParameterGroupName", valid_591252
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591253: Call_PostCreateCacheParameterGroup_591238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_591253.validator(path, query, header, formData, body)
  let scheme = call_591253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591253.url(scheme.get, call_591253.host, call_591253.base,
                         call_591253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591253, url, valid)

proc call*(call_591254: Call_PostCreateCacheParameterGroup_591238;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591255 = newJObject()
  var formData_591256 = newJObject()
  add(formData_591256, "Description", newJString(Description))
  add(formData_591256, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_591256, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_591255, "Action", newJString(Action))
  add(query_591255, "Version", newJString(Version))
  result = call_591254.call(nil, query_591255, nil, formData_591256, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_591238(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_591239, base: "/",
    url: url_PostCreateCacheParameterGroup_591240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_591220 = ref object of OpenApiRestCall_590364
proc url_GetCreateCacheParameterGroup_591222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheParameterGroup_591221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_591223 = query.getOrDefault("CacheParameterGroupName")
  valid_591223 = validateParameter(valid_591223, JString, required = true,
                                 default = nil)
  if valid_591223 != nil:
    section.add "CacheParameterGroupName", valid_591223
  var valid_591224 = query.getOrDefault("CacheParameterGroupFamily")
  valid_591224 = validateParameter(valid_591224, JString, required = true,
                                 default = nil)
  if valid_591224 != nil:
    section.add "CacheParameterGroupFamily", valid_591224
  var valid_591225 = query.getOrDefault("Action")
  valid_591225 = validateParameter(valid_591225, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_591225 != nil:
    section.add "Action", valid_591225
  var valid_591226 = query.getOrDefault("Description")
  valid_591226 = validateParameter(valid_591226, JString, required = true,
                                 default = nil)
  if valid_591226 != nil:
    section.add "Description", valid_591226
  var valid_591227 = query.getOrDefault("Version")
  valid_591227 = validateParameter(valid_591227, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591227 != nil:
    section.add "Version", valid_591227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591228 = header.getOrDefault("X-Amz-Signature")
  valid_591228 = validateParameter(valid_591228, JString, required = false,
                                 default = nil)
  if valid_591228 != nil:
    section.add "X-Amz-Signature", valid_591228
  var valid_591229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591229 = validateParameter(valid_591229, JString, required = false,
                                 default = nil)
  if valid_591229 != nil:
    section.add "X-Amz-Content-Sha256", valid_591229
  var valid_591230 = header.getOrDefault("X-Amz-Date")
  valid_591230 = validateParameter(valid_591230, JString, required = false,
                                 default = nil)
  if valid_591230 != nil:
    section.add "X-Amz-Date", valid_591230
  var valid_591231 = header.getOrDefault("X-Amz-Credential")
  valid_591231 = validateParameter(valid_591231, JString, required = false,
                                 default = nil)
  if valid_591231 != nil:
    section.add "X-Amz-Credential", valid_591231
  var valid_591232 = header.getOrDefault("X-Amz-Security-Token")
  valid_591232 = validateParameter(valid_591232, JString, required = false,
                                 default = nil)
  if valid_591232 != nil:
    section.add "X-Amz-Security-Token", valid_591232
  var valid_591233 = header.getOrDefault("X-Amz-Algorithm")
  valid_591233 = validateParameter(valid_591233, JString, required = false,
                                 default = nil)
  if valid_591233 != nil:
    section.add "X-Amz-Algorithm", valid_591233
  var valid_591234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591234 = validateParameter(valid_591234, JString, required = false,
                                 default = nil)
  if valid_591234 != nil:
    section.add "X-Amz-SignedHeaders", valid_591234
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591235: Call_GetCreateCacheParameterGroup_591220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_591235.validator(path, query, header, formData, body)
  let scheme = call_591235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591235.url(scheme.get, call_591235.host, call_591235.base,
                         call_591235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591235, url, valid)

proc call*(call_591236: Call_GetCreateCacheParameterGroup_591220;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_591237 = newJObject()
  add(query_591237, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_591237, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_591237, "Action", newJString(Action))
  add(query_591237, "Description", newJString(Description))
  add(query_591237, "Version", newJString(Version))
  result = call_591236.call(nil, query_591237, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_591220(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_591221, base: "/",
    url: url_GetCreateCacheParameterGroup_591222,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_591274 = ref object of OpenApiRestCall_590364
proc url_PostCreateCacheSecurityGroup_591276(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSecurityGroup_591275(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591277 = query.getOrDefault("Action")
  valid_591277 = validateParameter(valid_591277, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_591277 != nil:
    section.add "Action", valid_591277
  var valid_591278 = query.getOrDefault("Version")
  valid_591278 = validateParameter(valid_591278, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591278 != nil:
    section.add "Version", valid_591278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591279 = header.getOrDefault("X-Amz-Signature")
  valid_591279 = validateParameter(valid_591279, JString, required = false,
                                 default = nil)
  if valid_591279 != nil:
    section.add "X-Amz-Signature", valid_591279
  var valid_591280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591280 = validateParameter(valid_591280, JString, required = false,
                                 default = nil)
  if valid_591280 != nil:
    section.add "X-Amz-Content-Sha256", valid_591280
  var valid_591281 = header.getOrDefault("X-Amz-Date")
  valid_591281 = validateParameter(valid_591281, JString, required = false,
                                 default = nil)
  if valid_591281 != nil:
    section.add "X-Amz-Date", valid_591281
  var valid_591282 = header.getOrDefault("X-Amz-Credential")
  valid_591282 = validateParameter(valid_591282, JString, required = false,
                                 default = nil)
  if valid_591282 != nil:
    section.add "X-Amz-Credential", valid_591282
  var valid_591283 = header.getOrDefault("X-Amz-Security-Token")
  valid_591283 = validateParameter(valid_591283, JString, required = false,
                                 default = nil)
  if valid_591283 != nil:
    section.add "X-Amz-Security-Token", valid_591283
  var valid_591284 = header.getOrDefault("X-Amz-Algorithm")
  valid_591284 = validateParameter(valid_591284, JString, required = false,
                                 default = nil)
  if valid_591284 != nil:
    section.add "X-Amz-Algorithm", valid_591284
  var valid_591285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591285 = validateParameter(valid_591285, JString, required = false,
                                 default = nil)
  if valid_591285 != nil:
    section.add "X-Amz-SignedHeaders", valid_591285
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_591286 = formData.getOrDefault("Description")
  valid_591286 = validateParameter(valid_591286, JString, required = true,
                                 default = nil)
  if valid_591286 != nil:
    section.add "Description", valid_591286
  var valid_591287 = formData.getOrDefault("CacheSecurityGroupName")
  valid_591287 = validateParameter(valid_591287, JString, required = true,
                                 default = nil)
  if valid_591287 != nil:
    section.add "CacheSecurityGroupName", valid_591287
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591288: Call_PostCreateCacheSecurityGroup_591274; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_591288.validator(path, query, header, formData, body)
  let scheme = call_591288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591288.url(scheme.get, call_591288.host, call_591288.base,
                         call_591288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591288, url, valid)

proc call*(call_591289: Call_PostCreateCacheSecurityGroup_591274;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591290 = newJObject()
  var formData_591291 = newJObject()
  add(formData_591291, "Description", newJString(Description))
  add(formData_591291, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_591290, "Action", newJString(Action))
  add(query_591290, "Version", newJString(Version))
  result = call_591289.call(nil, query_591290, nil, formData_591291, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_591274(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_591275, base: "/",
    url: url_PostCreateCacheSecurityGroup_591276,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_591257 = ref object of OpenApiRestCall_590364
proc url_GetCreateCacheSecurityGroup_591259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSecurityGroup_591258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591260 = query.getOrDefault("Action")
  valid_591260 = validateParameter(valid_591260, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_591260 != nil:
    section.add "Action", valid_591260
  var valid_591261 = query.getOrDefault("Description")
  valid_591261 = validateParameter(valid_591261, JString, required = true,
                                 default = nil)
  if valid_591261 != nil:
    section.add "Description", valid_591261
  var valid_591262 = query.getOrDefault("CacheSecurityGroupName")
  valid_591262 = validateParameter(valid_591262, JString, required = true,
                                 default = nil)
  if valid_591262 != nil:
    section.add "CacheSecurityGroupName", valid_591262
  var valid_591263 = query.getOrDefault("Version")
  valid_591263 = validateParameter(valid_591263, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591263 != nil:
    section.add "Version", valid_591263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591264 = header.getOrDefault("X-Amz-Signature")
  valid_591264 = validateParameter(valid_591264, JString, required = false,
                                 default = nil)
  if valid_591264 != nil:
    section.add "X-Amz-Signature", valid_591264
  var valid_591265 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591265 = validateParameter(valid_591265, JString, required = false,
                                 default = nil)
  if valid_591265 != nil:
    section.add "X-Amz-Content-Sha256", valid_591265
  var valid_591266 = header.getOrDefault("X-Amz-Date")
  valid_591266 = validateParameter(valid_591266, JString, required = false,
                                 default = nil)
  if valid_591266 != nil:
    section.add "X-Amz-Date", valid_591266
  var valid_591267 = header.getOrDefault("X-Amz-Credential")
  valid_591267 = validateParameter(valid_591267, JString, required = false,
                                 default = nil)
  if valid_591267 != nil:
    section.add "X-Amz-Credential", valid_591267
  var valid_591268 = header.getOrDefault("X-Amz-Security-Token")
  valid_591268 = validateParameter(valid_591268, JString, required = false,
                                 default = nil)
  if valid_591268 != nil:
    section.add "X-Amz-Security-Token", valid_591268
  var valid_591269 = header.getOrDefault("X-Amz-Algorithm")
  valid_591269 = validateParameter(valid_591269, JString, required = false,
                                 default = nil)
  if valid_591269 != nil:
    section.add "X-Amz-Algorithm", valid_591269
  var valid_591270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591270 = validateParameter(valid_591270, JString, required = false,
                                 default = nil)
  if valid_591270 != nil:
    section.add "X-Amz-SignedHeaders", valid_591270
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591271: Call_GetCreateCacheSecurityGroup_591257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_591271.validator(path, query, header, formData, body)
  let scheme = call_591271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591271.url(scheme.get, call_591271.host, call_591271.base,
                         call_591271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591271, url, valid)

proc call*(call_591272: Call_GetCreateCacheSecurityGroup_591257;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_591273 = newJObject()
  add(query_591273, "Action", newJString(Action))
  add(query_591273, "Description", newJString(Description))
  add(query_591273, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_591273, "Version", newJString(Version))
  result = call_591272.call(nil, query_591273, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_591257(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_591258, base: "/",
    url: url_GetCreateCacheSecurityGroup_591259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_591310 = ref object of OpenApiRestCall_590364
proc url_PostCreateCacheSubnetGroup_591312(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSubnetGroup_591311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591313 = query.getOrDefault("Action")
  valid_591313 = validateParameter(valid_591313, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_591313 != nil:
    section.add "Action", valid_591313
  var valid_591314 = query.getOrDefault("Version")
  valid_591314 = validateParameter(valid_591314, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591314 != nil:
    section.add "Version", valid_591314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591315 = header.getOrDefault("X-Amz-Signature")
  valid_591315 = validateParameter(valid_591315, JString, required = false,
                                 default = nil)
  if valid_591315 != nil:
    section.add "X-Amz-Signature", valid_591315
  var valid_591316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591316 = validateParameter(valid_591316, JString, required = false,
                                 default = nil)
  if valid_591316 != nil:
    section.add "X-Amz-Content-Sha256", valid_591316
  var valid_591317 = header.getOrDefault("X-Amz-Date")
  valid_591317 = validateParameter(valid_591317, JString, required = false,
                                 default = nil)
  if valid_591317 != nil:
    section.add "X-Amz-Date", valid_591317
  var valid_591318 = header.getOrDefault("X-Amz-Credential")
  valid_591318 = validateParameter(valid_591318, JString, required = false,
                                 default = nil)
  if valid_591318 != nil:
    section.add "X-Amz-Credential", valid_591318
  var valid_591319 = header.getOrDefault("X-Amz-Security-Token")
  valid_591319 = validateParameter(valid_591319, JString, required = false,
                                 default = nil)
  if valid_591319 != nil:
    section.add "X-Amz-Security-Token", valid_591319
  var valid_591320 = header.getOrDefault("X-Amz-Algorithm")
  valid_591320 = validateParameter(valid_591320, JString, required = false,
                                 default = nil)
  if valid_591320 != nil:
    section.add "X-Amz-Algorithm", valid_591320
  var valid_591321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591321 = validateParameter(valid_591321, JString, required = false,
                                 default = nil)
  if valid_591321 != nil:
    section.add "X-Amz-SignedHeaders", valid_591321
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_591322 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_591322 = validateParameter(valid_591322, JString, required = true,
                                 default = nil)
  if valid_591322 != nil:
    section.add "CacheSubnetGroupDescription", valid_591322
  var valid_591323 = formData.getOrDefault("CacheSubnetGroupName")
  valid_591323 = validateParameter(valid_591323, JString, required = true,
                                 default = nil)
  if valid_591323 != nil:
    section.add "CacheSubnetGroupName", valid_591323
  var valid_591324 = formData.getOrDefault("SubnetIds")
  valid_591324 = validateParameter(valid_591324, JArray, required = true, default = nil)
  if valid_591324 != nil:
    section.add "SubnetIds", valid_591324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591325: Call_PostCreateCacheSubnetGroup_591310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_591325.validator(path, query, header, formData, body)
  let scheme = call_591325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591325.url(scheme.get, call_591325.host, call_591325.base,
                         call_591325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591325, url, valid)

proc call*(call_591326: Call_PostCreateCacheSubnetGroup_591310;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_591327 = newJObject()
  var formData_591328 = newJObject()
  add(formData_591328, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_591328, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591327, "Action", newJString(Action))
  add(query_591327, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_591328.add "SubnetIds", SubnetIds
  result = call_591326.call(nil, query_591327, nil, formData_591328, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_591310(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_591311, base: "/",
    url: url_PostCreateCacheSubnetGroup_591312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_591292 = ref object of OpenApiRestCall_590364
proc url_GetCreateCacheSubnetGroup_591294(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSubnetGroup_591293(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_591295 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_591295 = validateParameter(valid_591295, JString, required = true,
                                 default = nil)
  if valid_591295 != nil:
    section.add "CacheSubnetGroupDescription", valid_591295
  var valid_591296 = query.getOrDefault("SubnetIds")
  valid_591296 = validateParameter(valid_591296, JArray, required = true, default = nil)
  if valid_591296 != nil:
    section.add "SubnetIds", valid_591296
  var valid_591297 = query.getOrDefault("Action")
  valid_591297 = validateParameter(valid_591297, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_591297 != nil:
    section.add "Action", valid_591297
  var valid_591298 = query.getOrDefault("CacheSubnetGroupName")
  valid_591298 = validateParameter(valid_591298, JString, required = true,
                                 default = nil)
  if valid_591298 != nil:
    section.add "CacheSubnetGroupName", valid_591298
  var valid_591299 = query.getOrDefault("Version")
  valid_591299 = validateParameter(valid_591299, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591299 != nil:
    section.add "Version", valid_591299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591300 = header.getOrDefault("X-Amz-Signature")
  valid_591300 = validateParameter(valid_591300, JString, required = false,
                                 default = nil)
  if valid_591300 != nil:
    section.add "X-Amz-Signature", valid_591300
  var valid_591301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591301 = validateParameter(valid_591301, JString, required = false,
                                 default = nil)
  if valid_591301 != nil:
    section.add "X-Amz-Content-Sha256", valid_591301
  var valid_591302 = header.getOrDefault("X-Amz-Date")
  valid_591302 = validateParameter(valid_591302, JString, required = false,
                                 default = nil)
  if valid_591302 != nil:
    section.add "X-Amz-Date", valid_591302
  var valid_591303 = header.getOrDefault("X-Amz-Credential")
  valid_591303 = validateParameter(valid_591303, JString, required = false,
                                 default = nil)
  if valid_591303 != nil:
    section.add "X-Amz-Credential", valid_591303
  var valid_591304 = header.getOrDefault("X-Amz-Security-Token")
  valid_591304 = validateParameter(valid_591304, JString, required = false,
                                 default = nil)
  if valid_591304 != nil:
    section.add "X-Amz-Security-Token", valid_591304
  var valid_591305 = header.getOrDefault("X-Amz-Algorithm")
  valid_591305 = validateParameter(valid_591305, JString, required = false,
                                 default = nil)
  if valid_591305 != nil:
    section.add "X-Amz-Algorithm", valid_591305
  var valid_591306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591306 = validateParameter(valid_591306, JString, required = false,
                                 default = nil)
  if valid_591306 != nil:
    section.add "X-Amz-SignedHeaders", valid_591306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591307: Call_GetCreateCacheSubnetGroup_591292; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_591307.validator(path, query, header, formData, body)
  let scheme = call_591307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591307.url(scheme.get, call_591307.host, call_591307.base,
                         call_591307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591307, url, valid)

proc call*(call_591308: Call_GetCreateCacheSubnetGroup_591292;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_591309 = newJObject()
  add(query_591309, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_591309.add "SubnetIds", SubnetIds
  add(query_591309, "Action", newJString(Action))
  add(query_591309, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591309, "Version", newJString(Version))
  result = call_591308.call(nil, query_591309, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_591292(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_591293, base: "/",
    url: url_GetCreateCacheSubnetGroup_591294,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_591373 = ref object of OpenApiRestCall_590364
proc url_PostCreateReplicationGroup_591375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReplicationGroup_591374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591376 = query.getOrDefault("Action")
  valid_591376 = validateParameter(valid_591376, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_591376 != nil:
    section.add "Action", valid_591376
  var valid_591377 = query.getOrDefault("Version")
  valid_591377 = validateParameter(valid_591377, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591377 != nil:
    section.add "Version", valid_591377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591378 = header.getOrDefault("X-Amz-Signature")
  valid_591378 = validateParameter(valid_591378, JString, required = false,
                                 default = nil)
  if valid_591378 != nil:
    section.add "X-Amz-Signature", valid_591378
  var valid_591379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591379 = validateParameter(valid_591379, JString, required = false,
                                 default = nil)
  if valid_591379 != nil:
    section.add "X-Amz-Content-Sha256", valid_591379
  var valid_591380 = header.getOrDefault("X-Amz-Date")
  valid_591380 = validateParameter(valid_591380, JString, required = false,
                                 default = nil)
  if valid_591380 != nil:
    section.add "X-Amz-Date", valid_591380
  var valid_591381 = header.getOrDefault("X-Amz-Credential")
  valid_591381 = validateParameter(valid_591381, JString, required = false,
                                 default = nil)
  if valid_591381 != nil:
    section.add "X-Amz-Credential", valid_591381
  var valid_591382 = header.getOrDefault("X-Amz-Security-Token")
  valid_591382 = validateParameter(valid_591382, JString, required = false,
                                 default = nil)
  if valid_591382 != nil:
    section.add "X-Amz-Security-Token", valid_591382
  var valid_591383 = header.getOrDefault("X-Amz-Algorithm")
  valid_591383 = validateParameter(valid_591383, JString, required = false,
                                 default = nil)
  if valid_591383 != nil:
    section.add "X-Amz-Algorithm", valid_591383
  var valid_591384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591384 = validateParameter(valid_591384, JString, required = false,
                                 default = nil)
  if valid_591384 != nil:
    section.add "X-Amz-SignedHeaders", valid_591384
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_591385 = formData.getOrDefault("SecurityGroupIds")
  valid_591385 = validateParameter(valid_591385, JArray, required = false,
                                 default = nil)
  if valid_591385 != nil:
    section.add "SecurityGroupIds", valid_591385
  var valid_591386 = formData.getOrDefault("SnapshotWindow")
  valid_591386 = validateParameter(valid_591386, JString, required = false,
                                 default = nil)
  if valid_591386 != nil:
    section.add "SnapshotWindow", valid_591386
  var valid_591387 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_591387 = validateParameter(valid_591387, JString, required = false,
                                 default = nil)
  if valid_591387 != nil:
    section.add "PreferredMaintenanceWindow", valid_591387
  var valid_591388 = formData.getOrDefault("Port")
  valid_591388 = validateParameter(valid_591388, JInt, required = false, default = nil)
  if valid_591388 != nil:
    section.add "Port", valid_591388
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_591389 = formData.getOrDefault("ReplicationGroupId")
  valid_591389 = validateParameter(valid_591389, JString, required = true,
                                 default = nil)
  if valid_591389 != nil:
    section.add "ReplicationGroupId", valid_591389
  var valid_591390 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_591390 = validateParameter(valid_591390, JArray, required = false,
                                 default = nil)
  if valid_591390 != nil:
    section.add "PreferredCacheClusterAZs", valid_591390
  var valid_591391 = formData.getOrDefault("PrimaryClusterId")
  valid_591391 = validateParameter(valid_591391, JString, required = false,
                                 default = nil)
  if valid_591391 != nil:
    section.add "PrimaryClusterId", valid_591391
  var valid_591392 = formData.getOrDefault("NotificationTopicArn")
  valid_591392 = validateParameter(valid_591392, JString, required = false,
                                 default = nil)
  if valid_591392 != nil:
    section.add "NotificationTopicArn", valid_591392
  var valid_591393 = formData.getOrDefault("EngineVersion")
  valid_591393 = validateParameter(valid_591393, JString, required = false,
                                 default = nil)
  if valid_591393 != nil:
    section.add "EngineVersion", valid_591393
  var valid_591394 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_591394 = validateParameter(valid_591394, JBool, required = false, default = nil)
  if valid_591394 != nil:
    section.add "TransitEncryptionEnabled", valid_591394
  var valid_591395 = formData.getOrDefault("KmsKeyId")
  valid_591395 = validateParameter(valid_591395, JString, required = false,
                                 default = nil)
  if valid_591395 != nil:
    section.add "KmsKeyId", valid_591395
  var valid_591396 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_591396 = validateParameter(valid_591396, JBool, required = false, default = nil)
  if valid_591396 != nil:
    section.add "AutomaticFailoverEnabled", valid_591396
  var valid_591397 = formData.getOrDefault("Engine")
  valid_591397 = validateParameter(valid_591397, JString, required = false,
                                 default = nil)
  if valid_591397 != nil:
    section.add "Engine", valid_591397
  var valid_591398 = formData.getOrDefault("NumNodeGroups")
  valid_591398 = validateParameter(valid_591398, JInt, required = false, default = nil)
  if valid_591398 != nil:
    section.add "NumNodeGroups", valid_591398
  var valid_591399 = formData.getOrDefault("CacheParameterGroupName")
  valid_591399 = validateParameter(valid_591399, JString, required = false,
                                 default = nil)
  if valid_591399 != nil:
    section.add "CacheParameterGroupName", valid_591399
  var valid_591400 = formData.getOrDefault("SnapshotArns")
  valid_591400 = validateParameter(valid_591400, JArray, required = false,
                                 default = nil)
  if valid_591400 != nil:
    section.add "SnapshotArns", valid_591400
  var valid_591401 = formData.getOrDefault("SnapshotName")
  valid_591401 = validateParameter(valid_591401, JString, required = false,
                                 default = nil)
  if valid_591401 != nil:
    section.add "SnapshotName", valid_591401
  var valid_591402 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_591402 = validateParameter(valid_591402, JBool, required = false, default = nil)
  if valid_591402 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591402
  var valid_591403 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_591403 = validateParameter(valid_591403, JBool, required = false, default = nil)
  if valid_591403 != nil:
    section.add "AtRestEncryptionEnabled", valid_591403
  var valid_591404 = formData.getOrDefault("NodeGroupConfiguration")
  valid_591404 = validateParameter(valid_591404, JArray, required = false,
                                 default = nil)
  if valid_591404 != nil:
    section.add "NodeGroupConfiguration", valid_591404
  var valid_591405 = formData.getOrDefault("CacheSubnetGroupName")
  valid_591405 = validateParameter(valid_591405, JString, required = false,
                                 default = nil)
  if valid_591405 != nil:
    section.add "CacheSubnetGroupName", valid_591405
  var valid_591406 = formData.getOrDefault("AuthToken")
  valid_591406 = validateParameter(valid_591406, JString, required = false,
                                 default = nil)
  if valid_591406 != nil:
    section.add "AuthToken", valid_591406
  var valid_591407 = formData.getOrDefault("ReplicationGroupDescription")
  valid_591407 = validateParameter(valid_591407, JString, required = true,
                                 default = nil)
  if valid_591407 != nil:
    section.add "ReplicationGroupDescription", valid_591407
  var valid_591408 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_591408 = validateParameter(valid_591408, JArray, required = false,
                                 default = nil)
  if valid_591408 != nil:
    section.add "CacheSecurityGroupNames", valid_591408
  var valid_591409 = formData.getOrDefault("Tags")
  valid_591409 = validateParameter(valid_591409, JArray, required = false,
                                 default = nil)
  if valid_591409 != nil:
    section.add "Tags", valid_591409
  var valid_591410 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_591410 = validateParameter(valid_591410, JInt, required = false, default = nil)
  if valid_591410 != nil:
    section.add "SnapshotRetentionLimit", valid_591410
  var valid_591411 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_591411 = validateParameter(valid_591411, JInt, required = false, default = nil)
  if valid_591411 != nil:
    section.add "ReplicasPerNodeGroup", valid_591411
  var valid_591412 = formData.getOrDefault("CacheNodeType")
  valid_591412 = validateParameter(valid_591412, JString, required = false,
                                 default = nil)
  if valid_591412 != nil:
    section.add "CacheNodeType", valid_591412
  var valid_591413 = formData.getOrDefault("NumCacheClusters")
  valid_591413 = validateParameter(valid_591413, JInt, required = false, default = nil)
  if valid_591413 != nil:
    section.add "NumCacheClusters", valid_591413
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591414: Call_PostCreateReplicationGroup_591373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591414.validator(path, query, header, formData, body)
  let scheme = call_591414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591414.url(scheme.get, call_591414.host, call_591414.base,
                         call_591414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591414, url, valid)

proc call*(call_591415: Call_PostCreateReplicationGroup_591373;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_591416 = newJObject()
  var formData_591417 = newJObject()
  if SecurityGroupIds != nil:
    formData_591417.add "SecurityGroupIds", SecurityGroupIds
  add(formData_591417, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_591417, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_591417, "Port", newJInt(Port))
  add(formData_591417, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_591417.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_591417, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_591417, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_591417, "EngineVersion", newJString(EngineVersion))
  add(formData_591417, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_591417, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591417, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_591417, "Engine", newJString(Engine))
  add(formData_591417, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_591417, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_591417.add "SnapshotArns", SnapshotArns
  add(formData_591417, "SnapshotName", newJString(SnapshotName))
  add(formData_591417, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_591417, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_591417.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_591417, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591416, "Action", newJString(Action))
  add(formData_591417, "AuthToken", newJString(AuthToken))
  add(formData_591417, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_591417.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_591417.add "Tags", Tags
  add(formData_591417, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_591417, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_591416, "Version", newJString(Version))
  add(formData_591417, "CacheNodeType", newJString(CacheNodeType))
  add(formData_591417, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_591415.call(nil, query_591416, nil, formData_591417, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_591373(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_591374, base: "/",
    url: url_PostCreateReplicationGroup_591375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_591329 = ref object of OpenApiRestCall_590364
proc url_GetCreateReplicationGroup_591331(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReplicationGroup_591330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_591332 = query.getOrDefault("SnapshotArns")
  valid_591332 = validateParameter(valid_591332, JArray, required = false,
                                 default = nil)
  if valid_591332 != nil:
    section.add "SnapshotArns", valid_591332
  var valid_591333 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_591333 = validateParameter(valid_591333, JArray, required = false,
                                 default = nil)
  if valid_591333 != nil:
    section.add "PreferredCacheClusterAZs", valid_591333
  var valid_591334 = query.getOrDefault("AuthToken")
  valid_591334 = validateParameter(valid_591334, JString, required = false,
                                 default = nil)
  if valid_591334 != nil:
    section.add "AuthToken", valid_591334
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_591335 = query.getOrDefault("ReplicationGroupDescription")
  valid_591335 = validateParameter(valid_591335, JString, required = true,
                                 default = nil)
  if valid_591335 != nil:
    section.add "ReplicationGroupDescription", valid_591335
  var valid_591336 = query.getOrDefault("Engine")
  valid_591336 = validateParameter(valid_591336, JString, required = false,
                                 default = nil)
  if valid_591336 != nil:
    section.add "Engine", valid_591336
  var valid_591337 = query.getOrDefault("NumNodeGroups")
  valid_591337 = validateParameter(valid_591337, JInt, required = false, default = nil)
  if valid_591337 != nil:
    section.add "NumNodeGroups", valid_591337
  var valid_591338 = query.getOrDefault("CacheParameterGroupName")
  valid_591338 = validateParameter(valid_591338, JString, required = false,
                                 default = nil)
  if valid_591338 != nil:
    section.add "CacheParameterGroupName", valid_591338
  var valid_591339 = query.getOrDefault("Tags")
  valid_591339 = validateParameter(valid_591339, JArray, required = false,
                                 default = nil)
  if valid_591339 != nil:
    section.add "Tags", valid_591339
  var valid_591340 = query.getOrDefault("KmsKeyId")
  valid_591340 = validateParameter(valid_591340, JString, required = false,
                                 default = nil)
  if valid_591340 != nil:
    section.add "KmsKeyId", valid_591340
  var valid_591341 = query.getOrDefault("SnapshotRetentionLimit")
  valid_591341 = validateParameter(valid_591341, JInt, required = false, default = nil)
  if valid_591341 != nil:
    section.add "SnapshotRetentionLimit", valid_591341
  var valid_591342 = query.getOrDefault("TransitEncryptionEnabled")
  valid_591342 = validateParameter(valid_591342, JBool, required = false, default = nil)
  if valid_591342 != nil:
    section.add "TransitEncryptionEnabled", valid_591342
  var valid_591343 = query.getOrDefault("CacheSecurityGroupNames")
  valid_591343 = validateParameter(valid_591343, JArray, required = false,
                                 default = nil)
  if valid_591343 != nil:
    section.add "CacheSecurityGroupNames", valid_591343
  var valid_591344 = query.getOrDefault("PrimaryClusterId")
  valid_591344 = validateParameter(valid_591344, JString, required = false,
                                 default = nil)
  if valid_591344 != nil:
    section.add "PrimaryClusterId", valid_591344
  var valid_591345 = query.getOrDefault("CacheNodeType")
  valid_591345 = validateParameter(valid_591345, JString, required = false,
                                 default = nil)
  if valid_591345 != nil:
    section.add "CacheNodeType", valid_591345
  var valid_591346 = query.getOrDefault("EngineVersion")
  valid_591346 = validateParameter(valid_591346, JString, required = false,
                                 default = nil)
  if valid_591346 != nil:
    section.add "EngineVersion", valid_591346
  var valid_591347 = query.getOrDefault("NumCacheClusters")
  valid_591347 = validateParameter(valid_591347, JInt, required = false, default = nil)
  if valid_591347 != nil:
    section.add "NumCacheClusters", valid_591347
  var valid_591348 = query.getOrDefault("Action")
  valid_591348 = validateParameter(valid_591348, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_591348 != nil:
    section.add "Action", valid_591348
  var valid_591349 = query.getOrDefault("NodeGroupConfiguration")
  valid_591349 = validateParameter(valid_591349, JArray, required = false,
                                 default = nil)
  if valid_591349 != nil:
    section.add "NodeGroupConfiguration", valid_591349
  var valid_591350 = query.getOrDefault("Port")
  valid_591350 = validateParameter(valid_591350, JInt, required = false, default = nil)
  if valid_591350 != nil:
    section.add "Port", valid_591350
  var valid_591351 = query.getOrDefault("ReplicationGroupId")
  valid_591351 = validateParameter(valid_591351, JString, required = true,
                                 default = nil)
  if valid_591351 != nil:
    section.add "ReplicationGroupId", valid_591351
  var valid_591352 = query.getOrDefault("CacheSubnetGroupName")
  valid_591352 = validateParameter(valid_591352, JString, required = false,
                                 default = nil)
  if valid_591352 != nil:
    section.add "CacheSubnetGroupName", valid_591352
  var valid_591353 = query.getOrDefault("NotificationTopicArn")
  valid_591353 = validateParameter(valid_591353, JString, required = false,
                                 default = nil)
  if valid_591353 != nil:
    section.add "NotificationTopicArn", valid_591353
  var valid_591354 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_591354 = validateParameter(valid_591354, JBool, required = false, default = nil)
  if valid_591354 != nil:
    section.add "AutomaticFailoverEnabled", valid_591354
  var valid_591355 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_591355 = validateParameter(valid_591355, JBool, required = false, default = nil)
  if valid_591355 != nil:
    section.add "AtRestEncryptionEnabled", valid_591355
  var valid_591356 = query.getOrDefault("Version")
  valid_591356 = validateParameter(valid_591356, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591356 != nil:
    section.add "Version", valid_591356
  var valid_591357 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_591357 = validateParameter(valid_591357, JString, required = false,
                                 default = nil)
  if valid_591357 != nil:
    section.add "PreferredMaintenanceWindow", valid_591357
  var valid_591358 = query.getOrDefault("SnapshotName")
  valid_591358 = validateParameter(valid_591358, JString, required = false,
                                 default = nil)
  if valid_591358 != nil:
    section.add "SnapshotName", valid_591358
  var valid_591359 = query.getOrDefault("SnapshotWindow")
  valid_591359 = validateParameter(valid_591359, JString, required = false,
                                 default = nil)
  if valid_591359 != nil:
    section.add "SnapshotWindow", valid_591359
  var valid_591360 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_591360 = validateParameter(valid_591360, JInt, required = false, default = nil)
  if valid_591360 != nil:
    section.add "ReplicasPerNodeGroup", valid_591360
  var valid_591361 = query.getOrDefault("SecurityGroupIds")
  valid_591361 = validateParameter(valid_591361, JArray, required = false,
                                 default = nil)
  if valid_591361 != nil:
    section.add "SecurityGroupIds", valid_591361
  var valid_591362 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_591362 = validateParameter(valid_591362, JBool, required = false, default = nil)
  if valid_591362 != nil:
    section.add "AutoMinorVersionUpgrade", valid_591362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591363 = header.getOrDefault("X-Amz-Signature")
  valid_591363 = validateParameter(valid_591363, JString, required = false,
                                 default = nil)
  if valid_591363 != nil:
    section.add "X-Amz-Signature", valid_591363
  var valid_591364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591364 = validateParameter(valid_591364, JString, required = false,
                                 default = nil)
  if valid_591364 != nil:
    section.add "X-Amz-Content-Sha256", valid_591364
  var valid_591365 = header.getOrDefault("X-Amz-Date")
  valid_591365 = validateParameter(valid_591365, JString, required = false,
                                 default = nil)
  if valid_591365 != nil:
    section.add "X-Amz-Date", valid_591365
  var valid_591366 = header.getOrDefault("X-Amz-Credential")
  valid_591366 = validateParameter(valid_591366, JString, required = false,
                                 default = nil)
  if valid_591366 != nil:
    section.add "X-Amz-Credential", valid_591366
  var valid_591367 = header.getOrDefault("X-Amz-Security-Token")
  valid_591367 = validateParameter(valid_591367, JString, required = false,
                                 default = nil)
  if valid_591367 != nil:
    section.add "X-Amz-Security-Token", valid_591367
  var valid_591368 = header.getOrDefault("X-Amz-Algorithm")
  valid_591368 = validateParameter(valid_591368, JString, required = false,
                                 default = nil)
  if valid_591368 != nil:
    section.add "X-Amz-Algorithm", valid_591368
  var valid_591369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591369 = validateParameter(valid_591369, JString, required = false,
                                 default = nil)
  if valid_591369 != nil:
    section.add "X-Amz-SignedHeaders", valid_591369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591370: Call_GetCreateReplicationGroup_591329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591370.validator(path, query, header, formData, body)
  let scheme = call_591370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591370.url(scheme.get, call_591370.host, call_591370.base,
                         call_591370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591370, url, valid)

proc call*(call_591371: Call_GetCreateReplicationGroup_591329;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_591372 = newJObject()
  if SnapshotArns != nil:
    query_591372.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_591372.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_591372, "AuthToken", newJString(AuthToken))
  add(query_591372, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_591372, "Engine", newJString(Engine))
  add(query_591372, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_591372, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_591372.add "Tags", Tags
  add(query_591372, "KmsKeyId", newJString(KmsKeyId))
  add(query_591372, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_591372, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_591372.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_591372, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_591372, "CacheNodeType", newJString(CacheNodeType))
  add(query_591372, "EngineVersion", newJString(EngineVersion))
  add(query_591372, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_591372, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_591372.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_591372, "Port", newJInt(Port))
  add(query_591372, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_591372, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591372, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_591372, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_591372, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_591372, "Version", newJString(Version))
  add(query_591372, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_591372, "SnapshotName", newJString(SnapshotName))
  add(query_591372, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_591372, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_591372.add "SecurityGroupIds", SecurityGroupIds
  add(query_591372, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_591371.call(nil, query_591372, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_591329(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_591330, base: "/",
    url: url_GetCreateReplicationGroup_591331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_591437 = ref object of OpenApiRestCall_590364
proc url_PostCreateSnapshot_591439(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateSnapshot_591438(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591440 = query.getOrDefault("Action")
  valid_591440 = validateParameter(valid_591440, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_591440 != nil:
    section.add "Action", valid_591440
  var valid_591441 = query.getOrDefault("Version")
  valid_591441 = validateParameter(valid_591441, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591441 != nil:
    section.add "Version", valid_591441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591442 = header.getOrDefault("X-Amz-Signature")
  valid_591442 = validateParameter(valid_591442, JString, required = false,
                                 default = nil)
  if valid_591442 != nil:
    section.add "X-Amz-Signature", valid_591442
  var valid_591443 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591443 = validateParameter(valid_591443, JString, required = false,
                                 default = nil)
  if valid_591443 != nil:
    section.add "X-Amz-Content-Sha256", valid_591443
  var valid_591444 = header.getOrDefault("X-Amz-Date")
  valid_591444 = validateParameter(valid_591444, JString, required = false,
                                 default = nil)
  if valid_591444 != nil:
    section.add "X-Amz-Date", valid_591444
  var valid_591445 = header.getOrDefault("X-Amz-Credential")
  valid_591445 = validateParameter(valid_591445, JString, required = false,
                                 default = nil)
  if valid_591445 != nil:
    section.add "X-Amz-Credential", valid_591445
  var valid_591446 = header.getOrDefault("X-Amz-Security-Token")
  valid_591446 = validateParameter(valid_591446, JString, required = false,
                                 default = nil)
  if valid_591446 != nil:
    section.add "X-Amz-Security-Token", valid_591446
  var valid_591447 = header.getOrDefault("X-Amz-Algorithm")
  valid_591447 = validateParameter(valid_591447, JString, required = false,
                                 default = nil)
  if valid_591447 != nil:
    section.add "X-Amz-Algorithm", valid_591447
  var valid_591448 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591448 = validateParameter(valid_591448, JString, required = false,
                                 default = nil)
  if valid_591448 != nil:
    section.add "X-Amz-SignedHeaders", valid_591448
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_591449 = formData.getOrDefault("CacheClusterId")
  valid_591449 = validateParameter(valid_591449, JString, required = false,
                                 default = nil)
  if valid_591449 != nil:
    section.add "CacheClusterId", valid_591449
  var valid_591450 = formData.getOrDefault("KmsKeyId")
  valid_591450 = validateParameter(valid_591450, JString, required = false,
                                 default = nil)
  if valid_591450 != nil:
    section.add "KmsKeyId", valid_591450
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_591451 = formData.getOrDefault("SnapshotName")
  valid_591451 = validateParameter(valid_591451, JString, required = true,
                                 default = nil)
  if valid_591451 != nil:
    section.add "SnapshotName", valid_591451
  var valid_591452 = formData.getOrDefault("ReplicationGroupId")
  valid_591452 = validateParameter(valid_591452, JString, required = false,
                                 default = nil)
  if valid_591452 != nil:
    section.add "ReplicationGroupId", valid_591452
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591453: Call_PostCreateSnapshot_591437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591453.validator(path, query, header, formData, body)
  let scheme = call_591453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591453.url(scheme.get, call_591453.host, call_591453.base,
                         call_591453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591453, url, valid)

proc call*(call_591454: Call_PostCreateSnapshot_591437; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_591455 = newJObject()
  var formData_591456 = newJObject()
  add(formData_591456, "CacheClusterId", newJString(CacheClusterId))
  add(formData_591456, "KmsKeyId", newJString(KmsKeyId))
  add(formData_591456, "SnapshotName", newJString(SnapshotName))
  add(query_591455, "Action", newJString(Action))
  add(query_591455, "Version", newJString(Version))
  add(formData_591456, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_591454.call(nil, query_591455, nil, formData_591456, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_591437(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_591438, base: "/",
    url: url_PostCreateSnapshot_591439, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_591418 = ref object of OpenApiRestCall_590364
proc url_GetCreateSnapshot_591420(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateSnapshot_591419(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_591421 = query.getOrDefault("KmsKeyId")
  valid_591421 = validateParameter(valid_591421, JString, required = false,
                                 default = nil)
  if valid_591421 != nil:
    section.add "KmsKeyId", valid_591421
  var valid_591422 = query.getOrDefault("CacheClusterId")
  valid_591422 = validateParameter(valid_591422, JString, required = false,
                                 default = nil)
  if valid_591422 != nil:
    section.add "CacheClusterId", valid_591422
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591423 = query.getOrDefault("Action")
  valid_591423 = validateParameter(valid_591423, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_591423 != nil:
    section.add "Action", valid_591423
  var valid_591424 = query.getOrDefault("ReplicationGroupId")
  valid_591424 = validateParameter(valid_591424, JString, required = false,
                                 default = nil)
  if valid_591424 != nil:
    section.add "ReplicationGroupId", valid_591424
  var valid_591425 = query.getOrDefault("Version")
  valid_591425 = validateParameter(valid_591425, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591425 != nil:
    section.add "Version", valid_591425
  var valid_591426 = query.getOrDefault("SnapshotName")
  valid_591426 = validateParameter(valid_591426, JString, required = true,
                                 default = nil)
  if valid_591426 != nil:
    section.add "SnapshotName", valid_591426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591427 = header.getOrDefault("X-Amz-Signature")
  valid_591427 = validateParameter(valid_591427, JString, required = false,
                                 default = nil)
  if valid_591427 != nil:
    section.add "X-Amz-Signature", valid_591427
  var valid_591428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591428 = validateParameter(valid_591428, JString, required = false,
                                 default = nil)
  if valid_591428 != nil:
    section.add "X-Amz-Content-Sha256", valid_591428
  var valid_591429 = header.getOrDefault("X-Amz-Date")
  valid_591429 = validateParameter(valid_591429, JString, required = false,
                                 default = nil)
  if valid_591429 != nil:
    section.add "X-Amz-Date", valid_591429
  var valid_591430 = header.getOrDefault("X-Amz-Credential")
  valid_591430 = validateParameter(valid_591430, JString, required = false,
                                 default = nil)
  if valid_591430 != nil:
    section.add "X-Amz-Credential", valid_591430
  var valid_591431 = header.getOrDefault("X-Amz-Security-Token")
  valid_591431 = validateParameter(valid_591431, JString, required = false,
                                 default = nil)
  if valid_591431 != nil:
    section.add "X-Amz-Security-Token", valid_591431
  var valid_591432 = header.getOrDefault("X-Amz-Algorithm")
  valid_591432 = validateParameter(valid_591432, JString, required = false,
                                 default = nil)
  if valid_591432 != nil:
    section.add "X-Amz-Algorithm", valid_591432
  var valid_591433 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591433 = validateParameter(valid_591433, JString, required = false,
                                 default = nil)
  if valid_591433 != nil:
    section.add "X-Amz-SignedHeaders", valid_591433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591434: Call_GetCreateSnapshot_591418; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591434.validator(path, query, header, formData, body)
  let scheme = call_591434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591434.url(scheme.get, call_591434.host, call_591434.base,
                         call_591434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591434, url, valid)

proc call*(call_591435: Call_GetCreateSnapshot_591418; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_591436 = newJObject()
  add(query_591436, "KmsKeyId", newJString(KmsKeyId))
  add(query_591436, "CacheClusterId", newJString(CacheClusterId))
  add(query_591436, "Action", newJString(Action))
  add(query_591436, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_591436, "Version", newJString(Version))
  add(query_591436, "SnapshotName", newJString(SnapshotName))
  result = call_591435.call(nil, query_591436, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_591418(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_591419,
    base: "/", url: url_GetCreateSnapshot_591420,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_591477 = ref object of OpenApiRestCall_590364
proc url_PostDecreaseReplicaCount_591479(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDecreaseReplicaCount_591478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591480 = query.getOrDefault("Action")
  valid_591480 = validateParameter(valid_591480, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_591480 != nil:
    section.add "Action", valid_591480
  var valid_591481 = query.getOrDefault("Version")
  valid_591481 = validateParameter(valid_591481, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591481 != nil:
    section.add "Version", valid_591481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591482 = header.getOrDefault("X-Amz-Signature")
  valid_591482 = validateParameter(valid_591482, JString, required = false,
                                 default = nil)
  if valid_591482 != nil:
    section.add "X-Amz-Signature", valid_591482
  var valid_591483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591483 = validateParameter(valid_591483, JString, required = false,
                                 default = nil)
  if valid_591483 != nil:
    section.add "X-Amz-Content-Sha256", valid_591483
  var valid_591484 = header.getOrDefault("X-Amz-Date")
  valid_591484 = validateParameter(valid_591484, JString, required = false,
                                 default = nil)
  if valid_591484 != nil:
    section.add "X-Amz-Date", valid_591484
  var valid_591485 = header.getOrDefault("X-Amz-Credential")
  valid_591485 = validateParameter(valid_591485, JString, required = false,
                                 default = nil)
  if valid_591485 != nil:
    section.add "X-Amz-Credential", valid_591485
  var valid_591486 = header.getOrDefault("X-Amz-Security-Token")
  valid_591486 = validateParameter(valid_591486, JString, required = false,
                                 default = nil)
  if valid_591486 != nil:
    section.add "X-Amz-Security-Token", valid_591486
  var valid_591487 = header.getOrDefault("X-Amz-Algorithm")
  valid_591487 = validateParameter(valid_591487, JString, required = false,
                                 default = nil)
  if valid_591487 != nil:
    section.add "X-Amz-Algorithm", valid_591487
  var valid_591488 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591488 = validateParameter(valid_591488, JString, required = false,
                                 default = nil)
  if valid_591488 != nil:
    section.add "X-Amz-SignedHeaders", valid_591488
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_591489 = formData.getOrDefault("ReplicaConfiguration")
  valid_591489 = validateParameter(valid_591489, JArray, required = false,
                                 default = nil)
  if valid_591489 != nil:
    section.add "ReplicaConfiguration", valid_591489
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_591490 = formData.getOrDefault("ApplyImmediately")
  valid_591490 = validateParameter(valid_591490, JBool, required = true, default = nil)
  if valid_591490 != nil:
    section.add "ApplyImmediately", valid_591490
  var valid_591491 = formData.getOrDefault("ReplicasToRemove")
  valid_591491 = validateParameter(valid_591491, JArray, required = false,
                                 default = nil)
  if valid_591491 != nil:
    section.add "ReplicasToRemove", valid_591491
  var valid_591492 = formData.getOrDefault("NewReplicaCount")
  valid_591492 = validateParameter(valid_591492, JInt, required = false, default = nil)
  if valid_591492 != nil:
    section.add "NewReplicaCount", valid_591492
  var valid_591493 = formData.getOrDefault("ReplicationGroupId")
  valid_591493 = validateParameter(valid_591493, JString, required = true,
                                 default = nil)
  if valid_591493 != nil:
    section.add "ReplicationGroupId", valid_591493
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591494: Call_PostDecreaseReplicaCount_591477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_591494.validator(path, query, header, formData, body)
  let scheme = call_591494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591494.url(scheme.get, call_591494.host, call_591494.base,
                         call_591494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591494, url, valid)

proc call*(call_591495: Call_PostDecreaseReplicaCount_591477;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_591496 = newJObject()
  var formData_591497 = newJObject()
  if ReplicaConfiguration != nil:
    formData_591497.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_591497, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_591497.add "ReplicasToRemove", ReplicasToRemove
  add(query_591496, "Action", newJString(Action))
  add(formData_591497, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_591496, "Version", newJString(Version))
  add(formData_591497, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_591495.call(nil, query_591496, nil, formData_591497, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_591477(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_591478, base: "/",
    url: url_PostDecreaseReplicaCount_591479, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_591457 = ref object of OpenApiRestCall_590364
proc url_GetDecreaseReplicaCount_591459(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDecreaseReplicaCount_591458(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_591460 = query.getOrDefault("NewReplicaCount")
  valid_591460 = validateParameter(valid_591460, JInt, required = false, default = nil)
  if valid_591460 != nil:
    section.add "NewReplicaCount", valid_591460
  var valid_591461 = query.getOrDefault("ReplicaConfiguration")
  valid_591461 = validateParameter(valid_591461, JArray, required = false,
                                 default = nil)
  if valid_591461 != nil:
    section.add "ReplicaConfiguration", valid_591461
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591462 = query.getOrDefault("Action")
  valid_591462 = validateParameter(valid_591462, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_591462 != nil:
    section.add "Action", valid_591462
  var valid_591463 = query.getOrDefault("ApplyImmediately")
  valid_591463 = validateParameter(valid_591463, JBool, required = true, default = nil)
  if valid_591463 != nil:
    section.add "ApplyImmediately", valid_591463
  var valid_591464 = query.getOrDefault("ReplicationGroupId")
  valid_591464 = validateParameter(valid_591464, JString, required = true,
                                 default = nil)
  if valid_591464 != nil:
    section.add "ReplicationGroupId", valid_591464
  var valid_591465 = query.getOrDefault("Version")
  valid_591465 = validateParameter(valid_591465, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591465 != nil:
    section.add "Version", valid_591465
  var valid_591466 = query.getOrDefault("ReplicasToRemove")
  valid_591466 = validateParameter(valid_591466, JArray, required = false,
                                 default = nil)
  if valid_591466 != nil:
    section.add "ReplicasToRemove", valid_591466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591467 = header.getOrDefault("X-Amz-Signature")
  valid_591467 = validateParameter(valid_591467, JString, required = false,
                                 default = nil)
  if valid_591467 != nil:
    section.add "X-Amz-Signature", valid_591467
  var valid_591468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591468 = validateParameter(valid_591468, JString, required = false,
                                 default = nil)
  if valid_591468 != nil:
    section.add "X-Amz-Content-Sha256", valid_591468
  var valid_591469 = header.getOrDefault("X-Amz-Date")
  valid_591469 = validateParameter(valid_591469, JString, required = false,
                                 default = nil)
  if valid_591469 != nil:
    section.add "X-Amz-Date", valid_591469
  var valid_591470 = header.getOrDefault("X-Amz-Credential")
  valid_591470 = validateParameter(valid_591470, JString, required = false,
                                 default = nil)
  if valid_591470 != nil:
    section.add "X-Amz-Credential", valid_591470
  var valid_591471 = header.getOrDefault("X-Amz-Security-Token")
  valid_591471 = validateParameter(valid_591471, JString, required = false,
                                 default = nil)
  if valid_591471 != nil:
    section.add "X-Amz-Security-Token", valid_591471
  var valid_591472 = header.getOrDefault("X-Amz-Algorithm")
  valid_591472 = validateParameter(valid_591472, JString, required = false,
                                 default = nil)
  if valid_591472 != nil:
    section.add "X-Amz-Algorithm", valid_591472
  var valid_591473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591473 = validateParameter(valid_591473, JString, required = false,
                                 default = nil)
  if valid_591473 != nil:
    section.add "X-Amz-SignedHeaders", valid_591473
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591474: Call_GetDecreaseReplicaCount_591457; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_591474.validator(path, query, header, formData, body)
  let scheme = call_591474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591474.url(scheme.get, call_591474.host, call_591474.base,
                         call_591474.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591474, url, valid)

proc call*(call_591475: Call_GetDecreaseReplicaCount_591457;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_591476 = newJObject()
  add(query_591476, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_591476.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_591476, "Action", newJString(Action))
  add(query_591476, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_591476, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_591476, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_591476.add "ReplicasToRemove", ReplicasToRemove
  result = call_591475.call(nil, query_591476, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_591457(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_591458, base: "/",
    url: url_GetDecreaseReplicaCount_591459, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_591515 = ref object of OpenApiRestCall_590364
proc url_PostDeleteCacheCluster_591517(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheCluster_591516(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591518 = query.getOrDefault("Action")
  valid_591518 = validateParameter(valid_591518, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_591518 != nil:
    section.add "Action", valid_591518
  var valid_591519 = query.getOrDefault("Version")
  valid_591519 = validateParameter(valid_591519, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591519 != nil:
    section.add "Version", valid_591519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591520 = header.getOrDefault("X-Amz-Signature")
  valid_591520 = validateParameter(valid_591520, JString, required = false,
                                 default = nil)
  if valid_591520 != nil:
    section.add "X-Amz-Signature", valid_591520
  var valid_591521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591521 = validateParameter(valid_591521, JString, required = false,
                                 default = nil)
  if valid_591521 != nil:
    section.add "X-Amz-Content-Sha256", valid_591521
  var valid_591522 = header.getOrDefault("X-Amz-Date")
  valid_591522 = validateParameter(valid_591522, JString, required = false,
                                 default = nil)
  if valid_591522 != nil:
    section.add "X-Amz-Date", valid_591522
  var valid_591523 = header.getOrDefault("X-Amz-Credential")
  valid_591523 = validateParameter(valid_591523, JString, required = false,
                                 default = nil)
  if valid_591523 != nil:
    section.add "X-Amz-Credential", valid_591523
  var valid_591524 = header.getOrDefault("X-Amz-Security-Token")
  valid_591524 = validateParameter(valid_591524, JString, required = false,
                                 default = nil)
  if valid_591524 != nil:
    section.add "X-Amz-Security-Token", valid_591524
  var valid_591525 = header.getOrDefault("X-Amz-Algorithm")
  valid_591525 = validateParameter(valid_591525, JString, required = false,
                                 default = nil)
  if valid_591525 != nil:
    section.add "X-Amz-Algorithm", valid_591525
  var valid_591526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591526 = validateParameter(valid_591526, JString, required = false,
                                 default = nil)
  if valid_591526 != nil:
    section.add "X-Amz-SignedHeaders", valid_591526
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_591527 = formData.getOrDefault("CacheClusterId")
  valid_591527 = validateParameter(valid_591527, JString, required = true,
                                 default = nil)
  if valid_591527 != nil:
    section.add "CacheClusterId", valid_591527
  var valid_591528 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_591528 = validateParameter(valid_591528, JString, required = false,
                                 default = nil)
  if valid_591528 != nil:
    section.add "FinalSnapshotIdentifier", valid_591528
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591529: Call_PostDeleteCacheCluster_591515; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_591529.validator(path, query, header, formData, body)
  let scheme = call_591529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591529.url(scheme.get, call_591529.host, call_591529.base,
                         call_591529.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591529, url, valid)

proc call*(call_591530: Call_PostDeleteCacheCluster_591515; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591531 = newJObject()
  var formData_591532 = newJObject()
  add(formData_591532, "CacheClusterId", newJString(CacheClusterId))
  add(formData_591532, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_591531, "Action", newJString(Action))
  add(query_591531, "Version", newJString(Version))
  result = call_591530.call(nil, query_591531, nil, formData_591532, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_591515(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_591516, base: "/",
    url: url_PostDeleteCacheCluster_591517, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_591498 = ref object of OpenApiRestCall_590364
proc url_GetDeleteCacheCluster_591500(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheCluster_591499(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_591501 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_591501 = validateParameter(valid_591501, JString, required = false,
                                 default = nil)
  if valid_591501 != nil:
    section.add "FinalSnapshotIdentifier", valid_591501
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_591502 = query.getOrDefault("CacheClusterId")
  valid_591502 = validateParameter(valid_591502, JString, required = true,
                                 default = nil)
  if valid_591502 != nil:
    section.add "CacheClusterId", valid_591502
  var valid_591503 = query.getOrDefault("Action")
  valid_591503 = validateParameter(valid_591503, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_591503 != nil:
    section.add "Action", valid_591503
  var valid_591504 = query.getOrDefault("Version")
  valid_591504 = validateParameter(valid_591504, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591504 != nil:
    section.add "Version", valid_591504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591505 = header.getOrDefault("X-Amz-Signature")
  valid_591505 = validateParameter(valid_591505, JString, required = false,
                                 default = nil)
  if valid_591505 != nil:
    section.add "X-Amz-Signature", valid_591505
  var valid_591506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591506 = validateParameter(valid_591506, JString, required = false,
                                 default = nil)
  if valid_591506 != nil:
    section.add "X-Amz-Content-Sha256", valid_591506
  var valid_591507 = header.getOrDefault("X-Amz-Date")
  valid_591507 = validateParameter(valid_591507, JString, required = false,
                                 default = nil)
  if valid_591507 != nil:
    section.add "X-Amz-Date", valid_591507
  var valid_591508 = header.getOrDefault("X-Amz-Credential")
  valid_591508 = validateParameter(valid_591508, JString, required = false,
                                 default = nil)
  if valid_591508 != nil:
    section.add "X-Amz-Credential", valid_591508
  var valid_591509 = header.getOrDefault("X-Amz-Security-Token")
  valid_591509 = validateParameter(valid_591509, JString, required = false,
                                 default = nil)
  if valid_591509 != nil:
    section.add "X-Amz-Security-Token", valid_591509
  var valid_591510 = header.getOrDefault("X-Amz-Algorithm")
  valid_591510 = validateParameter(valid_591510, JString, required = false,
                                 default = nil)
  if valid_591510 != nil:
    section.add "X-Amz-Algorithm", valid_591510
  var valid_591511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591511 = validateParameter(valid_591511, JString, required = false,
                                 default = nil)
  if valid_591511 != nil:
    section.add "X-Amz-SignedHeaders", valid_591511
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591512: Call_GetDeleteCacheCluster_591498; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_591512.validator(path, query, header, formData, body)
  let scheme = call_591512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591512.url(scheme.get, call_591512.host, call_591512.base,
                         call_591512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591512, url, valid)

proc call*(call_591513: Call_GetDeleteCacheCluster_591498; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591514 = newJObject()
  add(query_591514, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_591514, "CacheClusterId", newJString(CacheClusterId))
  add(query_591514, "Action", newJString(Action))
  add(query_591514, "Version", newJString(Version))
  result = call_591513.call(nil, query_591514, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_591498(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_591499, base: "/",
    url: url_GetDeleteCacheCluster_591500, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_591549 = ref object of OpenApiRestCall_590364
proc url_PostDeleteCacheParameterGroup_591551(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheParameterGroup_591550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591552 = query.getOrDefault("Action")
  valid_591552 = validateParameter(valid_591552, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_591552 != nil:
    section.add "Action", valid_591552
  var valid_591553 = query.getOrDefault("Version")
  valid_591553 = validateParameter(valid_591553, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591553 != nil:
    section.add "Version", valid_591553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591554 = header.getOrDefault("X-Amz-Signature")
  valid_591554 = validateParameter(valid_591554, JString, required = false,
                                 default = nil)
  if valid_591554 != nil:
    section.add "X-Amz-Signature", valid_591554
  var valid_591555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591555 = validateParameter(valid_591555, JString, required = false,
                                 default = nil)
  if valid_591555 != nil:
    section.add "X-Amz-Content-Sha256", valid_591555
  var valid_591556 = header.getOrDefault("X-Amz-Date")
  valid_591556 = validateParameter(valid_591556, JString, required = false,
                                 default = nil)
  if valid_591556 != nil:
    section.add "X-Amz-Date", valid_591556
  var valid_591557 = header.getOrDefault("X-Amz-Credential")
  valid_591557 = validateParameter(valid_591557, JString, required = false,
                                 default = nil)
  if valid_591557 != nil:
    section.add "X-Amz-Credential", valid_591557
  var valid_591558 = header.getOrDefault("X-Amz-Security-Token")
  valid_591558 = validateParameter(valid_591558, JString, required = false,
                                 default = nil)
  if valid_591558 != nil:
    section.add "X-Amz-Security-Token", valid_591558
  var valid_591559 = header.getOrDefault("X-Amz-Algorithm")
  valid_591559 = validateParameter(valid_591559, JString, required = false,
                                 default = nil)
  if valid_591559 != nil:
    section.add "X-Amz-Algorithm", valid_591559
  var valid_591560 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591560 = validateParameter(valid_591560, JString, required = false,
                                 default = nil)
  if valid_591560 != nil:
    section.add "X-Amz-SignedHeaders", valid_591560
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_591561 = formData.getOrDefault("CacheParameterGroupName")
  valid_591561 = validateParameter(valid_591561, JString, required = true,
                                 default = nil)
  if valid_591561 != nil:
    section.add "CacheParameterGroupName", valid_591561
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591562: Call_PostDeleteCacheParameterGroup_591549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_591562.validator(path, query, header, formData, body)
  let scheme = call_591562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591562.url(scheme.get, call_591562.host, call_591562.base,
                         call_591562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591562, url, valid)

proc call*(call_591563: Call_PostDeleteCacheParameterGroup_591549;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591564 = newJObject()
  var formData_591565 = newJObject()
  add(formData_591565, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_591564, "Action", newJString(Action))
  add(query_591564, "Version", newJString(Version))
  result = call_591563.call(nil, query_591564, nil, formData_591565, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_591549(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_591550, base: "/",
    url: url_PostDeleteCacheParameterGroup_591551,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_591533 = ref object of OpenApiRestCall_590364
proc url_GetDeleteCacheParameterGroup_591535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheParameterGroup_591534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_591536 = query.getOrDefault("CacheParameterGroupName")
  valid_591536 = validateParameter(valid_591536, JString, required = true,
                                 default = nil)
  if valid_591536 != nil:
    section.add "CacheParameterGroupName", valid_591536
  var valid_591537 = query.getOrDefault("Action")
  valid_591537 = validateParameter(valid_591537, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_591537 != nil:
    section.add "Action", valid_591537
  var valid_591538 = query.getOrDefault("Version")
  valid_591538 = validateParameter(valid_591538, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591538 != nil:
    section.add "Version", valid_591538
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591539 = header.getOrDefault("X-Amz-Signature")
  valid_591539 = validateParameter(valid_591539, JString, required = false,
                                 default = nil)
  if valid_591539 != nil:
    section.add "X-Amz-Signature", valid_591539
  var valid_591540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591540 = validateParameter(valid_591540, JString, required = false,
                                 default = nil)
  if valid_591540 != nil:
    section.add "X-Amz-Content-Sha256", valid_591540
  var valid_591541 = header.getOrDefault("X-Amz-Date")
  valid_591541 = validateParameter(valid_591541, JString, required = false,
                                 default = nil)
  if valid_591541 != nil:
    section.add "X-Amz-Date", valid_591541
  var valid_591542 = header.getOrDefault("X-Amz-Credential")
  valid_591542 = validateParameter(valid_591542, JString, required = false,
                                 default = nil)
  if valid_591542 != nil:
    section.add "X-Amz-Credential", valid_591542
  var valid_591543 = header.getOrDefault("X-Amz-Security-Token")
  valid_591543 = validateParameter(valid_591543, JString, required = false,
                                 default = nil)
  if valid_591543 != nil:
    section.add "X-Amz-Security-Token", valid_591543
  var valid_591544 = header.getOrDefault("X-Amz-Algorithm")
  valid_591544 = validateParameter(valid_591544, JString, required = false,
                                 default = nil)
  if valid_591544 != nil:
    section.add "X-Amz-Algorithm", valid_591544
  var valid_591545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591545 = validateParameter(valid_591545, JString, required = false,
                                 default = nil)
  if valid_591545 != nil:
    section.add "X-Amz-SignedHeaders", valid_591545
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591546: Call_GetDeleteCacheParameterGroup_591533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_591546.validator(path, query, header, formData, body)
  let scheme = call_591546.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591546.url(scheme.get, call_591546.host, call_591546.base,
                         call_591546.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591546, url, valid)

proc call*(call_591547: Call_GetDeleteCacheParameterGroup_591533;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591548 = newJObject()
  add(query_591548, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_591548, "Action", newJString(Action))
  add(query_591548, "Version", newJString(Version))
  result = call_591547.call(nil, query_591548, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_591533(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_591534, base: "/",
    url: url_GetDeleteCacheParameterGroup_591535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_591582 = ref object of OpenApiRestCall_590364
proc url_PostDeleteCacheSecurityGroup_591584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_591583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591585 = query.getOrDefault("Action")
  valid_591585 = validateParameter(valid_591585, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_591585 != nil:
    section.add "Action", valid_591585
  var valid_591586 = query.getOrDefault("Version")
  valid_591586 = validateParameter(valid_591586, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591586 != nil:
    section.add "Version", valid_591586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591587 = header.getOrDefault("X-Amz-Signature")
  valid_591587 = validateParameter(valid_591587, JString, required = false,
                                 default = nil)
  if valid_591587 != nil:
    section.add "X-Amz-Signature", valid_591587
  var valid_591588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591588 = validateParameter(valid_591588, JString, required = false,
                                 default = nil)
  if valid_591588 != nil:
    section.add "X-Amz-Content-Sha256", valid_591588
  var valid_591589 = header.getOrDefault("X-Amz-Date")
  valid_591589 = validateParameter(valid_591589, JString, required = false,
                                 default = nil)
  if valid_591589 != nil:
    section.add "X-Amz-Date", valid_591589
  var valid_591590 = header.getOrDefault("X-Amz-Credential")
  valid_591590 = validateParameter(valid_591590, JString, required = false,
                                 default = nil)
  if valid_591590 != nil:
    section.add "X-Amz-Credential", valid_591590
  var valid_591591 = header.getOrDefault("X-Amz-Security-Token")
  valid_591591 = validateParameter(valid_591591, JString, required = false,
                                 default = nil)
  if valid_591591 != nil:
    section.add "X-Amz-Security-Token", valid_591591
  var valid_591592 = header.getOrDefault("X-Amz-Algorithm")
  valid_591592 = validateParameter(valid_591592, JString, required = false,
                                 default = nil)
  if valid_591592 != nil:
    section.add "X-Amz-Algorithm", valid_591592
  var valid_591593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591593 = validateParameter(valid_591593, JString, required = false,
                                 default = nil)
  if valid_591593 != nil:
    section.add "X-Amz-SignedHeaders", valid_591593
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_591594 = formData.getOrDefault("CacheSecurityGroupName")
  valid_591594 = validateParameter(valid_591594, JString, required = true,
                                 default = nil)
  if valid_591594 != nil:
    section.add "CacheSecurityGroupName", valid_591594
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591595: Call_PostDeleteCacheSecurityGroup_591582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_591595.validator(path, query, header, formData, body)
  let scheme = call_591595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591595.url(scheme.get, call_591595.host, call_591595.base,
                         call_591595.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591595, url, valid)

proc call*(call_591596: Call_PostDeleteCacheSecurityGroup_591582;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591597 = newJObject()
  var formData_591598 = newJObject()
  add(formData_591598, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_591597, "Action", newJString(Action))
  add(query_591597, "Version", newJString(Version))
  result = call_591596.call(nil, query_591597, nil, formData_591598, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_591582(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_591583, base: "/",
    url: url_PostDeleteCacheSecurityGroup_591584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_591566 = ref object of OpenApiRestCall_590364
proc url_GetDeleteCacheSecurityGroup_591568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_591567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591569 = query.getOrDefault("Action")
  valid_591569 = validateParameter(valid_591569, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_591569 != nil:
    section.add "Action", valid_591569
  var valid_591570 = query.getOrDefault("CacheSecurityGroupName")
  valid_591570 = validateParameter(valid_591570, JString, required = true,
                                 default = nil)
  if valid_591570 != nil:
    section.add "CacheSecurityGroupName", valid_591570
  var valid_591571 = query.getOrDefault("Version")
  valid_591571 = validateParameter(valid_591571, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591571 != nil:
    section.add "Version", valid_591571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591572 = header.getOrDefault("X-Amz-Signature")
  valid_591572 = validateParameter(valid_591572, JString, required = false,
                                 default = nil)
  if valid_591572 != nil:
    section.add "X-Amz-Signature", valid_591572
  var valid_591573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591573 = validateParameter(valid_591573, JString, required = false,
                                 default = nil)
  if valid_591573 != nil:
    section.add "X-Amz-Content-Sha256", valid_591573
  var valid_591574 = header.getOrDefault("X-Amz-Date")
  valid_591574 = validateParameter(valid_591574, JString, required = false,
                                 default = nil)
  if valid_591574 != nil:
    section.add "X-Amz-Date", valid_591574
  var valid_591575 = header.getOrDefault("X-Amz-Credential")
  valid_591575 = validateParameter(valid_591575, JString, required = false,
                                 default = nil)
  if valid_591575 != nil:
    section.add "X-Amz-Credential", valid_591575
  var valid_591576 = header.getOrDefault("X-Amz-Security-Token")
  valid_591576 = validateParameter(valid_591576, JString, required = false,
                                 default = nil)
  if valid_591576 != nil:
    section.add "X-Amz-Security-Token", valid_591576
  var valid_591577 = header.getOrDefault("X-Amz-Algorithm")
  valid_591577 = validateParameter(valid_591577, JString, required = false,
                                 default = nil)
  if valid_591577 != nil:
    section.add "X-Amz-Algorithm", valid_591577
  var valid_591578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591578 = validateParameter(valid_591578, JString, required = false,
                                 default = nil)
  if valid_591578 != nil:
    section.add "X-Amz-SignedHeaders", valid_591578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591579: Call_GetDeleteCacheSecurityGroup_591566; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_591579.validator(path, query, header, formData, body)
  let scheme = call_591579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591579.url(scheme.get, call_591579.host, call_591579.base,
                         call_591579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591579, url, valid)

proc call*(call_591580: Call_GetDeleteCacheSecurityGroup_591566;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_591581 = newJObject()
  add(query_591581, "Action", newJString(Action))
  add(query_591581, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_591581, "Version", newJString(Version))
  result = call_591580.call(nil, query_591581, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_591566(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_591567, base: "/",
    url: url_GetDeleteCacheSecurityGroup_591568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_591615 = ref object of OpenApiRestCall_590364
proc url_PostDeleteCacheSubnetGroup_591617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_591616(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591618 = query.getOrDefault("Action")
  valid_591618 = validateParameter(valid_591618, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_591618 != nil:
    section.add "Action", valid_591618
  var valid_591619 = query.getOrDefault("Version")
  valid_591619 = validateParameter(valid_591619, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591619 != nil:
    section.add "Version", valid_591619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591620 = header.getOrDefault("X-Amz-Signature")
  valid_591620 = validateParameter(valid_591620, JString, required = false,
                                 default = nil)
  if valid_591620 != nil:
    section.add "X-Amz-Signature", valid_591620
  var valid_591621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591621 = validateParameter(valid_591621, JString, required = false,
                                 default = nil)
  if valid_591621 != nil:
    section.add "X-Amz-Content-Sha256", valid_591621
  var valid_591622 = header.getOrDefault("X-Amz-Date")
  valid_591622 = validateParameter(valid_591622, JString, required = false,
                                 default = nil)
  if valid_591622 != nil:
    section.add "X-Amz-Date", valid_591622
  var valid_591623 = header.getOrDefault("X-Amz-Credential")
  valid_591623 = validateParameter(valid_591623, JString, required = false,
                                 default = nil)
  if valid_591623 != nil:
    section.add "X-Amz-Credential", valid_591623
  var valid_591624 = header.getOrDefault("X-Amz-Security-Token")
  valid_591624 = validateParameter(valid_591624, JString, required = false,
                                 default = nil)
  if valid_591624 != nil:
    section.add "X-Amz-Security-Token", valid_591624
  var valid_591625 = header.getOrDefault("X-Amz-Algorithm")
  valid_591625 = validateParameter(valid_591625, JString, required = false,
                                 default = nil)
  if valid_591625 != nil:
    section.add "X-Amz-Algorithm", valid_591625
  var valid_591626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591626 = validateParameter(valid_591626, JString, required = false,
                                 default = nil)
  if valid_591626 != nil:
    section.add "X-Amz-SignedHeaders", valid_591626
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_591627 = formData.getOrDefault("CacheSubnetGroupName")
  valid_591627 = validateParameter(valid_591627, JString, required = true,
                                 default = nil)
  if valid_591627 != nil:
    section.add "CacheSubnetGroupName", valid_591627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591628: Call_PostDeleteCacheSubnetGroup_591615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_591628.validator(path, query, header, formData, body)
  let scheme = call_591628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591628.url(scheme.get, call_591628.host, call_591628.base,
                         call_591628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591628, url, valid)

proc call*(call_591629: Call_PostDeleteCacheSubnetGroup_591615;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591630 = newJObject()
  var formData_591631 = newJObject()
  add(formData_591631, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591630, "Action", newJString(Action))
  add(query_591630, "Version", newJString(Version))
  result = call_591629.call(nil, query_591630, nil, formData_591631, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_591615(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_591616, base: "/",
    url: url_PostDeleteCacheSubnetGroup_591617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_591599 = ref object of OpenApiRestCall_590364
proc url_GetDeleteCacheSubnetGroup_591601(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_591600(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591602 = query.getOrDefault("Action")
  valid_591602 = validateParameter(valid_591602, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_591602 != nil:
    section.add "Action", valid_591602
  var valid_591603 = query.getOrDefault("CacheSubnetGroupName")
  valid_591603 = validateParameter(valid_591603, JString, required = true,
                                 default = nil)
  if valid_591603 != nil:
    section.add "CacheSubnetGroupName", valid_591603
  var valid_591604 = query.getOrDefault("Version")
  valid_591604 = validateParameter(valid_591604, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591604 != nil:
    section.add "Version", valid_591604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591605 = header.getOrDefault("X-Amz-Signature")
  valid_591605 = validateParameter(valid_591605, JString, required = false,
                                 default = nil)
  if valid_591605 != nil:
    section.add "X-Amz-Signature", valid_591605
  var valid_591606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591606 = validateParameter(valid_591606, JString, required = false,
                                 default = nil)
  if valid_591606 != nil:
    section.add "X-Amz-Content-Sha256", valid_591606
  var valid_591607 = header.getOrDefault("X-Amz-Date")
  valid_591607 = validateParameter(valid_591607, JString, required = false,
                                 default = nil)
  if valid_591607 != nil:
    section.add "X-Amz-Date", valid_591607
  var valid_591608 = header.getOrDefault("X-Amz-Credential")
  valid_591608 = validateParameter(valid_591608, JString, required = false,
                                 default = nil)
  if valid_591608 != nil:
    section.add "X-Amz-Credential", valid_591608
  var valid_591609 = header.getOrDefault("X-Amz-Security-Token")
  valid_591609 = validateParameter(valid_591609, JString, required = false,
                                 default = nil)
  if valid_591609 != nil:
    section.add "X-Amz-Security-Token", valid_591609
  var valid_591610 = header.getOrDefault("X-Amz-Algorithm")
  valid_591610 = validateParameter(valid_591610, JString, required = false,
                                 default = nil)
  if valid_591610 != nil:
    section.add "X-Amz-Algorithm", valid_591610
  var valid_591611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591611 = validateParameter(valid_591611, JString, required = false,
                                 default = nil)
  if valid_591611 != nil:
    section.add "X-Amz-SignedHeaders", valid_591611
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591612: Call_GetDeleteCacheSubnetGroup_591599; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_591612.validator(path, query, header, formData, body)
  let scheme = call_591612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591612.url(scheme.get, call_591612.host, call_591612.base,
                         call_591612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591612, url, valid)

proc call*(call_591613: Call_GetDeleteCacheSubnetGroup_591599;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_591614 = newJObject()
  add(query_591614, "Action", newJString(Action))
  add(query_591614, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591614, "Version", newJString(Version))
  result = call_591613.call(nil, query_591614, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_591599(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_591600, base: "/",
    url: url_GetDeleteCacheSubnetGroup_591601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_591650 = ref object of OpenApiRestCall_590364
proc url_PostDeleteReplicationGroup_591652(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReplicationGroup_591651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591653 = query.getOrDefault("Action")
  valid_591653 = validateParameter(valid_591653, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_591653 != nil:
    section.add "Action", valid_591653
  var valid_591654 = query.getOrDefault("Version")
  valid_591654 = validateParameter(valid_591654, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591654 != nil:
    section.add "Version", valid_591654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591655 = header.getOrDefault("X-Amz-Signature")
  valid_591655 = validateParameter(valid_591655, JString, required = false,
                                 default = nil)
  if valid_591655 != nil:
    section.add "X-Amz-Signature", valid_591655
  var valid_591656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591656 = validateParameter(valid_591656, JString, required = false,
                                 default = nil)
  if valid_591656 != nil:
    section.add "X-Amz-Content-Sha256", valid_591656
  var valid_591657 = header.getOrDefault("X-Amz-Date")
  valid_591657 = validateParameter(valid_591657, JString, required = false,
                                 default = nil)
  if valid_591657 != nil:
    section.add "X-Amz-Date", valid_591657
  var valid_591658 = header.getOrDefault("X-Amz-Credential")
  valid_591658 = validateParameter(valid_591658, JString, required = false,
                                 default = nil)
  if valid_591658 != nil:
    section.add "X-Amz-Credential", valid_591658
  var valid_591659 = header.getOrDefault("X-Amz-Security-Token")
  valid_591659 = validateParameter(valid_591659, JString, required = false,
                                 default = nil)
  if valid_591659 != nil:
    section.add "X-Amz-Security-Token", valid_591659
  var valid_591660 = header.getOrDefault("X-Amz-Algorithm")
  valid_591660 = validateParameter(valid_591660, JString, required = false,
                                 default = nil)
  if valid_591660 != nil:
    section.add "X-Amz-Algorithm", valid_591660
  var valid_591661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591661 = validateParameter(valid_591661, JString, required = false,
                                 default = nil)
  if valid_591661 != nil:
    section.add "X-Amz-SignedHeaders", valid_591661
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_591662 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_591662 = validateParameter(valid_591662, JString, required = false,
                                 default = nil)
  if valid_591662 != nil:
    section.add "FinalSnapshotIdentifier", valid_591662
  var valid_591663 = formData.getOrDefault("RetainPrimaryCluster")
  valid_591663 = validateParameter(valid_591663, JBool, required = false, default = nil)
  if valid_591663 != nil:
    section.add "RetainPrimaryCluster", valid_591663
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_591664 = formData.getOrDefault("ReplicationGroupId")
  valid_591664 = validateParameter(valid_591664, JString, required = true,
                                 default = nil)
  if valid_591664 != nil:
    section.add "ReplicationGroupId", valid_591664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591665: Call_PostDeleteReplicationGroup_591650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591665.validator(path, query, header, formData, body)
  let scheme = call_591665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591665.url(scheme.get, call_591665.host, call_591665.base,
                         call_591665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591665, url, valid)

proc call*(call_591666: Call_PostDeleteReplicationGroup_591650;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_591667 = newJObject()
  var formData_591668 = newJObject()
  add(formData_591668, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_591667, "Action", newJString(Action))
  add(formData_591668, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_591667, "Version", newJString(Version))
  add(formData_591668, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_591666.call(nil, query_591667, nil, formData_591668, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_591650(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_591651, base: "/",
    url: url_PostDeleteReplicationGroup_591652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_591632 = ref object of OpenApiRestCall_590364
proc url_GetDeleteReplicationGroup_591634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReplicationGroup_591633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_591635 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_591635 = validateParameter(valid_591635, JString, required = false,
                                 default = nil)
  if valid_591635 != nil:
    section.add "FinalSnapshotIdentifier", valid_591635
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591636 = query.getOrDefault("Action")
  valid_591636 = validateParameter(valid_591636, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_591636 != nil:
    section.add "Action", valid_591636
  var valid_591637 = query.getOrDefault("ReplicationGroupId")
  valid_591637 = validateParameter(valid_591637, JString, required = true,
                                 default = nil)
  if valid_591637 != nil:
    section.add "ReplicationGroupId", valid_591637
  var valid_591638 = query.getOrDefault("Version")
  valid_591638 = validateParameter(valid_591638, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591638 != nil:
    section.add "Version", valid_591638
  var valid_591639 = query.getOrDefault("RetainPrimaryCluster")
  valid_591639 = validateParameter(valid_591639, JBool, required = false, default = nil)
  if valid_591639 != nil:
    section.add "RetainPrimaryCluster", valid_591639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591640 = header.getOrDefault("X-Amz-Signature")
  valid_591640 = validateParameter(valid_591640, JString, required = false,
                                 default = nil)
  if valid_591640 != nil:
    section.add "X-Amz-Signature", valid_591640
  var valid_591641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591641 = validateParameter(valid_591641, JString, required = false,
                                 default = nil)
  if valid_591641 != nil:
    section.add "X-Amz-Content-Sha256", valid_591641
  var valid_591642 = header.getOrDefault("X-Amz-Date")
  valid_591642 = validateParameter(valid_591642, JString, required = false,
                                 default = nil)
  if valid_591642 != nil:
    section.add "X-Amz-Date", valid_591642
  var valid_591643 = header.getOrDefault("X-Amz-Credential")
  valid_591643 = validateParameter(valid_591643, JString, required = false,
                                 default = nil)
  if valid_591643 != nil:
    section.add "X-Amz-Credential", valid_591643
  var valid_591644 = header.getOrDefault("X-Amz-Security-Token")
  valid_591644 = validateParameter(valid_591644, JString, required = false,
                                 default = nil)
  if valid_591644 != nil:
    section.add "X-Amz-Security-Token", valid_591644
  var valid_591645 = header.getOrDefault("X-Amz-Algorithm")
  valid_591645 = validateParameter(valid_591645, JString, required = false,
                                 default = nil)
  if valid_591645 != nil:
    section.add "X-Amz-Algorithm", valid_591645
  var valid_591646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591646 = validateParameter(valid_591646, JString, required = false,
                                 default = nil)
  if valid_591646 != nil:
    section.add "X-Amz-SignedHeaders", valid_591646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591647: Call_GetDeleteReplicationGroup_591632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591647.validator(path, query, header, formData, body)
  let scheme = call_591647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591647.url(scheme.get, call_591647.host, call_591647.base,
                         call_591647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591647, url, valid)

proc call*(call_591648: Call_GetDeleteReplicationGroup_591632;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_591649 = newJObject()
  add(query_591649, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_591649, "Action", newJString(Action))
  add(query_591649, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_591649, "Version", newJString(Version))
  add(query_591649, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_591648.call(nil, query_591649, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_591632(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_591633, base: "/",
    url: url_GetDeleteReplicationGroup_591634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_591685 = ref object of OpenApiRestCall_590364
proc url_PostDeleteSnapshot_591687(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSnapshot_591686(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591688 = query.getOrDefault("Action")
  valid_591688 = validateParameter(valid_591688, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_591688 != nil:
    section.add "Action", valid_591688
  var valid_591689 = query.getOrDefault("Version")
  valid_591689 = validateParameter(valid_591689, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591689 != nil:
    section.add "Version", valid_591689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591690 = header.getOrDefault("X-Amz-Signature")
  valid_591690 = validateParameter(valid_591690, JString, required = false,
                                 default = nil)
  if valid_591690 != nil:
    section.add "X-Amz-Signature", valid_591690
  var valid_591691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591691 = validateParameter(valid_591691, JString, required = false,
                                 default = nil)
  if valid_591691 != nil:
    section.add "X-Amz-Content-Sha256", valid_591691
  var valid_591692 = header.getOrDefault("X-Amz-Date")
  valid_591692 = validateParameter(valid_591692, JString, required = false,
                                 default = nil)
  if valid_591692 != nil:
    section.add "X-Amz-Date", valid_591692
  var valid_591693 = header.getOrDefault("X-Amz-Credential")
  valid_591693 = validateParameter(valid_591693, JString, required = false,
                                 default = nil)
  if valid_591693 != nil:
    section.add "X-Amz-Credential", valid_591693
  var valid_591694 = header.getOrDefault("X-Amz-Security-Token")
  valid_591694 = validateParameter(valid_591694, JString, required = false,
                                 default = nil)
  if valid_591694 != nil:
    section.add "X-Amz-Security-Token", valid_591694
  var valid_591695 = header.getOrDefault("X-Amz-Algorithm")
  valid_591695 = validateParameter(valid_591695, JString, required = false,
                                 default = nil)
  if valid_591695 != nil:
    section.add "X-Amz-Algorithm", valid_591695
  var valid_591696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591696 = validateParameter(valid_591696, JString, required = false,
                                 default = nil)
  if valid_591696 != nil:
    section.add "X-Amz-SignedHeaders", valid_591696
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_591697 = formData.getOrDefault("SnapshotName")
  valid_591697 = validateParameter(valid_591697, JString, required = true,
                                 default = nil)
  if valid_591697 != nil:
    section.add "SnapshotName", valid_591697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591698: Call_PostDeleteSnapshot_591685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591698.validator(path, query, header, formData, body)
  let scheme = call_591698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591698.url(scheme.get, call_591698.host, call_591698.base,
                         call_591698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591698, url, valid)

proc call*(call_591699: Call_PostDeleteSnapshot_591685; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591700 = newJObject()
  var formData_591701 = newJObject()
  add(formData_591701, "SnapshotName", newJString(SnapshotName))
  add(query_591700, "Action", newJString(Action))
  add(query_591700, "Version", newJString(Version))
  result = call_591699.call(nil, query_591700, nil, formData_591701, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_591685(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_591686, base: "/",
    url: url_PostDeleteSnapshot_591687, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_591669 = ref object of OpenApiRestCall_590364
proc url_GetDeleteSnapshot_591671(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSnapshot_591670(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591672 = query.getOrDefault("Action")
  valid_591672 = validateParameter(valid_591672, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_591672 != nil:
    section.add "Action", valid_591672
  var valid_591673 = query.getOrDefault("Version")
  valid_591673 = validateParameter(valid_591673, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591673 != nil:
    section.add "Version", valid_591673
  var valid_591674 = query.getOrDefault("SnapshotName")
  valid_591674 = validateParameter(valid_591674, JString, required = true,
                                 default = nil)
  if valid_591674 != nil:
    section.add "SnapshotName", valid_591674
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591675 = header.getOrDefault("X-Amz-Signature")
  valid_591675 = validateParameter(valid_591675, JString, required = false,
                                 default = nil)
  if valid_591675 != nil:
    section.add "X-Amz-Signature", valid_591675
  var valid_591676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591676 = validateParameter(valid_591676, JString, required = false,
                                 default = nil)
  if valid_591676 != nil:
    section.add "X-Amz-Content-Sha256", valid_591676
  var valid_591677 = header.getOrDefault("X-Amz-Date")
  valid_591677 = validateParameter(valid_591677, JString, required = false,
                                 default = nil)
  if valid_591677 != nil:
    section.add "X-Amz-Date", valid_591677
  var valid_591678 = header.getOrDefault("X-Amz-Credential")
  valid_591678 = validateParameter(valid_591678, JString, required = false,
                                 default = nil)
  if valid_591678 != nil:
    section.add "X-Amz-Credential", valid_591678
  var valid_591679 = header.getOrDefault("X-Amz-Security-Token")
  valid_591679 = validateParameter(valid_591679, JString, required = false,
                                 default = nil)
  if valid_591679 != nil:
    section.add "X-Amz-Security-Token", valid_591679
  var valid_591680 = header.getOrDefault("X-Amz-Algorithm")
  valid_591680 = validateParameter(valid_591680, JString, required = false,
                                 default = nil)
  if valid_591680 != nil:
    section.add "X-Amz-Algorithm", valid_591680
  var valid_591681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591681 = validateParameter(valid_591681, JString, required = false,
                                 default = nil)
  if valid_591681 != nil:
    section.add "X-Amz-SignedHeaders", valid_591681
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591682: Call_GetDeleteSnapshot_591669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_591682.validator(path, query, header, formData, body)
  let scheme = call_591682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591682.url(scheme.get, call_591682.host, call_591682.base,
                         call_591682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591682, url, valid)

proc call*(call_591683: Call_GetDeleteSnapshot_591669; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_591684 = newJObject()
  add(query_591684, "Action", newJString(Action))
  add(query_591684, "Version", newJString(Version))
  add(query_591684, "SnapshotName", newJString(SnapshotName))
  result = call_591683.call(nil, query_591684, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_591669(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_591670,
    base: "/", url: url_GetDeleteSnapshot_591671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_591722 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheClusters_591724(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheClusters_591723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591725 = query.getOrDefault("Action")
  valid_591725 = validateParameter(valid_591725, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_591725 != nil:
    section.add "Action", valid_591725
  var valid_591726 = query.getOrDefault("Version")
  valid_591726 = validateParameter(valid_591726, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591726 != nil:
    section.add "Version", valid_591726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591727 = header.getOrDefault("X-Amz-Signature")
  valid_591727 = validateParameter(valid_591727, JString, required = false,
                                 default = nil)
  if valid_591727 != nil:
    section.add "X-Amz-Signature", valid_591727
  var valid_591728 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591728 = validateParameter(valid_591728, JString, required = false,
                                 default = nil)
  if valid_591728 != nil:
    section.add "X-Amz-Content-Sha256", valid_591728
  var valid_591729 = header.getOrDefault("X-Amz-Date")
  valid_591729 = validateParameter(valid_591729, JString, required = false,
                                 default = nil)
  if valid_591729 != nil:
    section.add "X-Amz-Date", valid_591729
  var valid_591730 = header.getOrDefault("X-Amz-Credential")
  valid_591730 = validateParameter(valid_591730, JString, required = false,
                                 default = nil)
  if valid_591730 != nil:
    section.add "X-Amz-Credential", valid_591730
  var valid_591731 = header.getOrDefault("X-Amz-Security-Token")
  valid_591731 = validateParameter(valid_591731, JString, required = false,
                                 default = nil)
  if valid_591731 != nil:
    section.add "X-Amz-Security-Token", valid_591731
  var valid_591732 = header.getOrDefault("X-Amz-Algorithm")
  valid_591732 = validateParameter(valid_591732, JString, required = false,
                                 default = nil)
  if valid_591732 != nil:
    section.add "X-Amz-Algorithm", valid_591732
  var valid_591733 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591733 = validateParameter(valid_591733, JString, required = false,
                                 default = nil)
  if valid_591733 != nil:
    section.add "X-Amz-SignedHeaders", valid_591733
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_591734 = formData.getOrDefault("CacheClusterId")
  valid_591734 = validateParameter(valid_591734, JString, required = false,
                                 default = nil)
  if valid_591734 != nil:
    section.add "CacheClusterId", valid_591734
  var valid_591735 = formData.getOrDefault("MaxRecords")
  valid_591735 = validateParameter(valid_591735, JInt, required = false, default = nil)
  if valid_591735 != nil:
    section.add "MaxRecords", valid_591735
  var valid_591736 = formData.getOrDefault("Marker")
  valid_591736 = validateParameter(valid_591736, JString, required = false,
                                 default = nil)
  if valid_591736 != nil:
    section.add "Marker", valid_591736
  var valid_591737 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_591737 = validateParameter(valid_591737, JBool, required = false, default = nil)
  if valid_591737 != nil:
    section.add "ShowCacheNodeInfo", valid_591737
  var valid_591738 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_591738 = validateParameter(valid_591738, JBool, required = false, default = nil)
  if valid_591738 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_591738
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591739: Call_PostDescribeCacheClusters_591722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_591739.validator(path, query, header, formData, body)
  let scheme = call_591739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591739.url(scheme.get, call_591739.host, call_591739.base,
                         call_591739.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591739, url, valid)

proc call*(call_591740: Call_PostDescribeCacheClusters_591722;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_591741 = newJObject()
  var formData_591742 = newJObject()
  add(formData_591742, "CacheClusterId", newJString(CacheClusterId))
  add(formData_591742, "MaxRecords", newJInt(MaxRecords))
  add(formData_591742, "Marker", newJString(Marker))
  add(formData_591742, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_591741, "Action", newJString(Action))
  add(query_591741, "Version", newJString(Version))
  add(formData_591742, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_591740.call(nil, query_591741, nil, formData_591742, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_591722(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_591723, base: "/",
    url: url_PostDescribeCacheClusters_591724,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_591702 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheClusters_591704(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheClusters_591703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591705 = query.getOrDefault("Marker")
  valid_591705 = validateParameter(valid_591705, JString, required = false,
                                 default = nil)
  if valid_591705 != nil:
    section.add "Marker", valid_591705
  var valid_591706 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_591706 = validateParameter(valid_591706, JBool, required = false, default = nil)
  if valid_591706 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_591706
  var valid_591707 = query.getOrDefault("CacheClusterId")
  valid_591707 = validateParameter(valid_591707, JString, required = false,
                                 default = nil)
  if valid_591707 != nil:
    section.add "CacheClusterId", valid_591707
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591708 = query.getOrDefault("Action")
  valid_591708 = validateParameter(valid_591708, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_591708 != nil:
    section.add "Action", valid_591708
  var valid_591709 = query.getOrDefault("ShowCacheNodeInfo")
  valid_591709 = validateParameter(valid_591709, JBool, required = false, default = nil)
  if valid_591709 != nil:
    section.add "ShowCacheNodeInfo", valid_591709
  var valid_591710 = query.getOrDefault("Version")
  valid_591710 = validateParameter(valid_591710, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591710 != nil:
    section.add "Version", valid_591710
  var valid_591711 = query.getOrDefault("MaxRecords")
  valid_591711 = validateParameter(valid_591711, JInt, required = false, default = nil)
  if valid_591711 != nil:
    section.add "MaxRecords", valid_591711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591712 = header.getOrDefault("X-Amz-Signature")
  valid_591712 = validateParameter(valid_591712, JString, required = false,
                                 default = nil)
  if valid_591712 != nil:
    section.add "X-Amz-Signature", valid_591712
  var valid_591713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591713 = validateParameter(valid_591713, JString, required = false,
                                 default = nil)
  if valid_591713 != nil:
    section.add "X-Amz-Content-Sha256", valid_591713
  var valid_591714 = header.getOrDefault("X-Amz-Date")
  valid_591714 = validateParameter(valid_591714, JString, required = false,
                                 default = nil)
  if valid_591714 != nil:
    section.add "X-Amz-Date", valid_591714
  var valid_591715 = header.getOrDefault("X-Amz-Credential")
  valid_591715 = validateParameter(valid_591715, JString, required = false,
                                 default = nil)
  if valid_591715 != nil:
    section.add "X-Amz-Credential", valid_591715
  var valid_591716 = header.getOrDefault("X-Amz-Security-Token")
  valid_591716 = validateParameter(valid_591716, JString, required = false,
                                 default = nil)
  if valid_591716 != nil:
    section.add "X-Amz-Security-Token", valid_591716
  var valid_591717 = header.getOrDefault("X-Amz-Algorithm")
  valid_591717 = validateParameter(valid_591717, JString, required = false,
                                 default = nil)
  if valid_591717 != nil:
    section.add "X-Amz-Algorithm", valid_591717
  var valid_591718 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591718 = validateParameter(valid_591718, JString, required = false,
                                 default = nil)
  if valid_591718 != nil:
    section.add "X-Amz-SignedHeaders", valid_591718
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591719: Call_GetDescribeCacheClusters_591702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_591719.validator(path, query, header, formData, body)
  let scheme = call_591719.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591719.url(scheme.get, call_591719.host, call_591719.base,
                         call_591719.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591719, url, valid)

proc call*(call_591720: Call_GetDescribeCacheClusters_591702; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591721 = newJObject()
  add(query_591721, "Marker", newJString(Marker))
  add(query_591721, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_591721, "CacheClusterId", newJString(CacheClusterId))
  add(query_591721, "Action", newJString(Action))
  add(query_591721, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_591721, "Version", newJString(Version))
  add(query_591721, "MaxRecords", newJInt(MaxRecords))
  result = call_591720.call(nil, query_591721, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_591702(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_591703, base: "/",
    url: url_GetDescribeCacheClusters_591704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_591764 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheEngineVersions_591766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheEngineVersions_591765(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591767 = query.getOrDefault("Action")
  valid_591767 = validateParameter(valid_591767, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_591767 != nil:
    section.add "Action", valid_591767
  var valid_591768 = query.getOrDefault("Version")
  valid_591768 = validateParameter(valid_591768, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591768 != nil:
    section.add "Version", valid_591768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591769 = header.getOrDefault("X-Amz-Signature")
  valid_591769 = validateParameter(valid_591769, JString, required = false,
                                 default = nil)
  if valid_591769 != nil:
    section.add "X-Amz-Signature", valid_591769
  var valid_591770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591770 = validateParameter(valid_591770, JString, required = false,
                                 default = nil)
  if valid_591770 != nil:
    section.add "X-Amz-Content-Sha256", valid_591770
  var valid_591771 = header.getOrDefault("X-Amz-Date")
  valid_591771 = validateParameter(valid_591771, JString, required = false,
                                 default = nil)
  if valid_591771 != nil:
    section.add "X-Amz-Date", valid_591771
  var valid_591772 = header.getOrDefault("X-Amz-Credential")
  valid_591772 = validateParameter(valid_591772, JString, required = false,
                                 default = nil)
  if valid_591772 != nil:
    section.add "X-Amz-Credential", valid_591772
  var valid_591773 = header.getOrDefault("X-Amz-Security-Token")
  valid_591773 = validateParameter(valid_591773, JString, required = false,
                                 default = nil)
  if valid_591773 != nil:
    section.add "X-Amz-Security-Token", valid_591773
  var valid_591774 = header.getOrDefault("X-Amz-Algorithm")
  valid_591774 = validateParameter(valid_591774, JString, required = false,
                                 default = nil)
  if valid_591774 != nil:
    section.add "X-Amz-Algorithm", valid_591774
  var valid_591775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591775 = validateParameter(valid_591775, JString, required = false,
                                 default = nil)
  if valid_591775 != nil:
    section.add "X-Amz-SignedHeaders", valid_591775
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_591776 = formData.getOrDefault("DefaultOnly")
  valid_591776 = validateParameter(valid_591776, JBool, required = false, default = nil)
  if valid_591776 != nil:
    section.add "DefaultOnly", valid_591776
  var valid_591777 = formData.getOrDefault("MaxRecords")
  valid_591777 = validateParameter(valid_591777, JInt, required = false, default = nil)
  if valid_591777 != nil:
    section.add "MaxRecords", valid_591777
  var valid_591778 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_591778 = validateParameter(valid_591778, JString, required = false,
                                 default = nil)
  if valid_591778 != nil:
    section.add "CacheParameterGroupFamily", valid_591778
  var valid_591779 = formData.getOrDefault("EngineVersion")
  valid_591779 = validateParameter(valid_591779, JString, required = false,
                                 default = nil)
  if valid_591779 != nil:
    section.add "EngineVersion", valid_591779
  var valid_591780 = formData.getOrDefault("Marker")
  valid_591780 = validateParameter(valid_591780, JString, required = false,
                                 default = nil)
  if valid_591780 != nil:
    section.add "Marker", valid_591780
  var valid_591781 = formData.getOrDefault("Engine")
  valid_591781 = validateParameter(valid_591781, JString, required = false,
                                 default = nil)
  if valid_591781 != nil:
    section.add "Engine", valid_591781
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591782: Call_PostDescribeCacheEngineVersions_591764;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_591782.validator(path, query, header, formData, body)
  let scheme = call_591782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591782.url(scheme.get, call_591782.host, call_591782.base,
                         call_591782.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591782, url, valid)

proc call*(call_591783: Call_PostDescribeCacheEngineVersions_591764;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591784 = newJObject()
  var formData_591785 = newJObject()
  add(formData_591785, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_591785, "MaxRecords", newJInt(MaxRecords))
  add(formData_591785, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_591785, "EngineVersion", newJString(EngineVersion))
  add(formData_591785, "Marker", newJString(Marker))
  add(formData_591785, "Engine", newJString(Engine))
  add(query_591784, "Action", newJString(Action))
  add(query_591784, "Version", newJString(Version))
  result = call_591783.call(nil, query_591784, nil, formData_591785, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_591764(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_591765, base: "/",
    url: url_PostDescribeCacheEngineVersions_591766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_591743 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheEngineVersions_591745(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheEngineVersions_591744(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_591746 = query.getOrDefault("Marker")
  valid_591746 = validateParameter(valid_591746, JString, required = false,
                                 default = nil)
  if valid_591746 != nil:
    section.add "Marker", valid_591746
  var valid_591747 = query.getOrDefault("Engine")
  valid_591747 = validateParameter(valid_591747, JString, required = false,
                                 default = nil)
  if valid_591747 != nil:
    section.add "Engine", valid_591747
  var valid_591748 = query.getOrDefault("CacheParameterGroupFamily")
  valid_591748 = validateParameter(valid_591748, JString, required = false,
                                 default = nil)
  if valid_591748 != nil:
    section.add "CacheParameterGroupFamily", valid_591748
  var valid_591749 = query.getOrDefault("EngineVersion")
  valid_591749 = validateParameter(valid_591749, JString, required = false,
                                 default = nil)
  if valid_591749 != nil:
    section.add "EngineVersion", valid_591749
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591750 = query.getOrDefault("Action")
  valid_591750 = validateParameter(valid_591750, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_591750 != nil:
    section.add "Action", valid_591750
  var valid_591751 = query.getOrDefault("Version")
  valid_591751 = validateParameter(valid_591751, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591751 != nil:
    section.add "Version", valid_591751
  var valid_591752 = query.getOrDefault("MaxRecords")
  valid_591752 = validateParameter(valid_591752, JInt, required = false, default = nil)
  if valid_591752 != nil:
    section.add "MaxRecords", valid_591752
  var valid_591753 = query.getOrDefault("DefaultOnly")
  valid_591753 = validateParameter(valid_591753, JBool, required = false, default = nil)
  if valid_591753 != nil:
    section.add "DefaultOnly", valid_591753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591754 = header.getOrDefault("X-Amz-Signature")
  valid_591754 = validateParameter(valid_591754, JString, required = false,
                                 default = nil)
  if valid_591754 != nil:
    section.add "X-Amz-Signature", valid_591754
  var valid_591755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591755 = validateParameter(valid_591755, JString, required = false,
                                 default = nil)
  if valid_591755 != nil:
    section.add "X-Amz-Content-Sha256", valid_591755
  var valid_591756 = header.getOrDefault("X-Amz-Date")
  valid_591756 = validateParameter(valid_591756, JString, required = false,
                                 default = nil)
  if valid_591756 != nil:
    section.add "X-Amz-Date", valid_591756
  var valid_591757 = header.getOrDefault("X-Amz-Credential")
  valid_591757 = validateParameter(valid_591757, JString, required = false,
                                 default = nil)
  if valid_591757 != nil:
    section.add "X-Amz-Credential", valid_591757
  var valid_591758 = header.getOrDefault("X-Amz-Security-Token")
  valid_591758 = validateParameter(valid_591758, JString, required = false,
                                 default = nil)
  if valid_591758 != nil:
    section.add "X-Amz-Security-Token", valid_591758
  var valid_591759 = header.getOrDefault("X-Amz-Algorithm")
  valid_591759 = validateParameter(valid_591759, JString, required = false,
                                 default = nil)
  if valid_591759 != nil:
    section.add "X-Amz-Algorithm", valid_591759
  var valid_591760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591760 = validateParameter(valid_591760, JString, required = false,
                                 default = nil)
  if valid_591760 != nil:
    section.add "X-Amz-SignedHeaders", valid_591760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591761: Call_GetDescribeCacheEngineVersions_591743; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_591761.validator(path, query, header, formData, body)
  let scheme = call_591761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591761.url(scheme.get, call_591761.host, call_591761.base,
                         call_591761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591761, url, valid)

proc call*(call_591762: Call_GetDescribeCacheEngineVersions_591743;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_591763 = newJObject()
  add(query_591763, "Marker", newJString(Marker))
  add(query_591763, "Engine", newJString(Engine))
  add(query_591763, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_591763, "EngineVersion", newJString(EngineVersion))
  add(query_591763, "Action", newJString(Action))
  add(query_591763, "Version", newJString(Version))
  add(query_591763, "MaxRecords", newJInt(MaxRecords))
  add(query_591763, "DefaultOnly", newJBool(DefaultOnly))
  result = call_591762.call(nil, query_591763, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_591743(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_591744, base: "/",
    url: url_GetDescribeCacheEngineVersions_591745,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_591804 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheParameterGroups_591806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameterGroups_591805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591807 = query.getOrDefault("Action")
  valid_591807 = validateParameter(valid_591807, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_591807 != nil:
    section.add "Action", valid_591807
  var valid_591808 = query.getOrDefault("Version")
  valid_591808 = validateParameter(valid_591808, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591808 != nil:
    section.add "Version", valid_591808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591809 = header.getOrDefault("X-Amz-Signature")
  valid_591809 = validateParameter(valid_591809, JString, required = false,
                                 default = nil)
  if valid_591809 != nil:
    section.add "X-Amz-Signature", valid_591809
  var valid_591810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591810 = validateParameter(valid_591810, JString, required = false,
                                 default = nil)
  if valid_591810 != nil:
    section.add "X-Amz-Content-Sha256", valid_591810
  var valid_591811 = header.getOrDefault("X-Amz-Date")
  valid_591811 = validateParameter(valid_591811, JString, required = false,
                                 default = nil)
  if valid_591811 != nil:
    section.add "X-Amz-Date", valid_591811
  var valid_591812 = header.getOrDefault("X-Amz-Credential")
  valid_591812 = validateParameter(valid_591812, JString, required = false,
                                 default = nil)
  if valid_591812 != nil:
    section.add "X-Amz-Credential", valid_591812
  var valid_591813 = header.getOrDefault("X-Amz-Security-Token")
  valid_591813 = validateParameter(valid_591813, JString, required = false,
                                 default = nil)
  if valid_591813 != nil:
    section.add "X-Amz-Security-Token", valid_591813
  var valid_591814 = header.getOrDefault("X-Amz-Algorithm")
  valid_591814 = validateParameter(valid_591814, JString, required = false,
                                 default = nil)
  if valid_591814 != nil:
    section.add "X-Amz-Algorithm", valid_591814
  var valid_591815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591815 = validateParameter(valid_591815, JString, required = false,
                                 default = nil)
  if valid_591815 != nil:
    section.add "X-Amz-SignedHeaders", valid_591815
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_591816 = formData.getOrDefault("MaxRecords")
  valid_591816 = validateParameter(valid_591816, JInt, required = false, default = nil)
  if valid_591816 != nil:
    section.add "MaxRecords", valid_591816
  var valid_591817 = formData.getOrDefault("Marker")
  valid_591817 = validateParameter(valid_591817, JString, required = false,
                                 default = nil)
  if valid_591817 != nil:
    section.add "Marker", valid_591817
  var valid_591818 = formData.getOrDefault("CacheParameterGroupName")
  valid_591818 = validateParameter(valid_591818, JString, required = false,
                                 default = nil)
  if valid_591818 != nil:
    section.add "CacheParameterGroupName", valid_591818
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591819: Call_PostDescribeCacheParameterGroups_591804;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_591819.validator(path, query, header, formData, body)
  let scheme = call_591819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591819.url(scheme.get, call_591819.host, call_591819.base,
                         call_591819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591819, url, valid)

proc call*(call_591820: Call_PostDescribeCacheParameterGroups_591804;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591821 = newJObject()
  var formData_591822 = newJObject()
  add(formData_591822, "MaxRecords", newJInt(MaxRecords))
  add(formData_591822, "Marker", newJString(Marker))
  add(formData_591822, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_591821, "Action", newJString(Action))
  add(query_591821, "Version", newJString(Version))
  result = call_591820.call(nil, query_591821, nil, formData_591822, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_591804(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_591805, base: "/",
    url: url_PostDescribeCacheParameterGroups_591806,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_591786 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheParameterGroups_591788(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameterGroups_591787(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591789 = query.getOrDefault("Marker")
  valid_591789 = validateParameter(valid_591789, JString, required = false,
                                 default = nil)
  if valid_591789 != nil:
    section.add "Marker", valid_591789
  var valid_591790 = query.getOrDefault("CacheParameterGroupName")
  valid_591790 = validateParameter(valid_591790, JString, required = false,
                                 default = nil)
  if valid_591790 != nil:
    section.add "CacheParameterGroupName", valid_591790
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591791 = query.getOrDefault("Action")
  valid_591791 = validateParameter(valid_591791, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_591791 != nil:
    section.add "Action", valid_591791
  var valid_591792 = query.getOrDefault("Version")
  valid_591792 = validateParameter(valid_591792, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591792 != nil:
    section.add "Version", valid_591792
  var valid_591793 = query.getOrDefault("MaxRecords")
  valid_591793 = validateParameter(valid_591793, JInt, required = false, default = nil)
  if valid_591793 != nil:
    section.add "MaxRecords", valid_591793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591794 = header.getOrDefault("X-Amz-Signature")
  valid_591794 = validateParameter(valid_591794, JString, required = false,
                                 default = nil)
  if valid_591794 != nil:
    section.add "X-Amz-Signature", valid_591794
  var valid_591795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591795 = validateParameter(valid_591795, JString, required = false,
                                 default = nil)
  if valid_591795 != nil:
    section.add "X-Amz-Content-Sha256", valid_591795
  var valid_591796 = header.getOrDefault("X-Amz-Date")
  valid_591796 = validateParameter(valid_591796, JString, required = false,
                                 default = nil)
  if valid_591796 != nil:
    section.add "X-Amz-Date", valid_591796
  var valid_591797 = header.getOrDefault("X-Amz-Credential")
  valid_591797 = validateParameter(valid_591797, JString, required = false,
                                 default = nil)
  if valid_591797 != nil:
    section.add "X-Amz-Credential", valid_591797
  var valid_591798 = header.getOrDefault("X-Amz-Security-Token")
  valid_591798 = validateParameter(valid_591798, JString, required = false,
                                 default = nil)
  if valid_591798 != nil:
    section.add "X-Amz-Security-Token", valid_591798
  var valid_591799 = header.getOrDefault("X-Amz-Algorithm")
  valid_591799 = validateParameter(valid_591799, JString, required = false,
                                 default = nil)
  if valid_591799 != nil:
    section.add "X-Amz-Algorithm", valid_591799
  var valid_591800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591800 = validateParameter(valid_591800, JString, required = false,
                                 default = nil)
  if valid_591800 != nil:
    section.add "X-Amz-SignedHeaders", valid_591800
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591801: Call_GetDescribeCacheParameterGroups_591786;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_591801.validator(path, query, header, formData, body)
  let scheme = call_591801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591801.url(scheme.get, call_591801.host, call_591801.base,
                         call_591801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591801, url, valid)

proc call*(call_591802: Call_GetDescribeCacheParameterGroups_591786;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591803 = newJObject()
  add(query_591803, "Marker", newJString(Marker))
  add(query_591803, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_591803, "Action", newJString(Action))
  add(query_591803, "Version", newJString(Version))
  add(query_591803, "MaxRecords", newJInt(MaxRecords))
  result = call_591802.call(nil, query_591803, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_591786(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_591787, base: "/",
    url: url_GetDescribeCacheParameterGroups_591788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_591842 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheParameters_591844(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameters_591843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591845 = query.getOrDefault("Action")
  valid_591845 = validateParameter(valid_591845, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_591845 != nil:
    section.add "Action", valid_591845
  var valid_591846 = query.getOrDefault("Version")
  valid_591846 = validateParameter(valid_591846, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591846 != nil:
    section.add "Version", valid_591846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591847 = header.getOrDefault("X-Amz-Signature")
  valid_591847 = validateParameter(valid_591847, JString, required = false,
                                 default = nil)
  if valid_591847 != nil:
    section.add "X-Amz-Signature", valid_591847
  var valid_591848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591848 = validateParameter(valid_591848, JString, required = false,
                                 default = nil)
  if valid_591848 != nil:
    section.add "X-Amz-Content-Sha256", valid_591848
  var valid_591849 = header.getOrDefault("X-Amz-Date")
  valid_591849 = validateParameter(valid_591849, JString, required = false,
                                 default = nil)
  if valid_591849 != nil:
    section.add "X-Amz-Date", valid_591849
  var valid_591850 = header.getOrDefault("X-Amz-Credential")
  valid_591850 = validateParameter(valid_591850, JString, required = false,
                                 default = nil)
  if valid_591850 != nil:
    section.add "X-Amz-Credential", valid_591850
  var valid_591851 = header.getOrDefault("X-Amz-Security-Token")
  valid_591851 = validateParameter(valid_591851, JString, required = false,
                                 default = nil)
  if valid_591851 != nil:
    section.add "X-Amz-Security-Token", valid_591851
  var valid_591852 = header.getOrDefault("X-Amz-Algorithm")
  valid_591852 = validateParameter(valid_591852, JString, required = false,
                                 default = nil)
  if valid_591852 != nil:
    section.add "X-Amz-Algorithm", valid_591852
  var valid_591853 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591853 = validateParameter(valid_591853, JString, required = false,
                                 default = nil)
  if valid_591853 != nil:
    section.add "X-Amz-SignedHeaders", valid_591853
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_591854 = formData.getOrDefault("Source")
  valid_591854 = validateParameter(valid_591854, JString, required = false,
                                 default = nil)
  if valid_591854 != nil:
    section.add "Source", valid_591854
  var valid_591855 = formData.getOrDefault("MaxRecords")
  valid_591855 = validateParameter(valid_591855, JInt, required = false, default = nil)
  if valid_591855 != nil:
    section.add "MaxRecords", valid_591855
  var valid_591856 = formData.getOrDefault("Marker")
  valid_591856 = validateParameter(valid_591856, JString, required = false,
                                 default = nil)
  if valid_591856 != nil:
    section.add "Marker", valid_591856
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_591857 = formData.getOrDefault("CacheParameterGroupName")
  valid_591857 = validateParameter(valid_591857, JString, required = true,
                                 default = nil)
  if valid_591857 != nil:
    section.add "CacheParameterGroupName", valid_591857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591858: Call_PostDescribeCacheParameters_591842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_591858.validator(path, query, header, formData, body)
  let scheme = call_591858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591858.url(scheme.get, call_591858.host, call_591858.base,
                         call_591858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591858, url, valid)

proc call*(call_591859: Call_PostDescribeCacheParameters_591842;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591860 = newJObject()
  var formData_591861 = newJObject()
  add(formData_591861, "Source", newJString(Source))
  add(formData_591861, "MaxRecords", newJInt(MaxRecords))
  add(formData_591861, "Marker", newJString(Marker))
  add(formData_591861, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_591860, "Action", newJString(Action))
  add(query_591860, "Version", newJString(Version))
  result = call_591859.call(nil, query_591860, nil, formData_591861, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_591842(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_591843, base: "/",
    url: url_PostDescribeCacheParameters_591844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_591823 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheParameters_591825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameters_591824(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591826 = query.getOrDefault("Marker")
  valid_591826 = validateParameter(valid_591826, JString, required = false,
                                 default = nil)
  if valid_591826 != nil:
    section.add "Marker", valid_591826
  var valid_591827 = query.getOrDefault("Source")
  valid_591827 = validateParameter(valid_591827, JString, required = false,
                                 default = nil)
  if valid_591827 != nil:
    section.add "Source", valid_591827
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_591828 = query.getOrDefault("CacheParameterGroupName")
  valid_591828 = validateParameter(valid_591828, JString, required = true,
                                 default = nil)
  if valid_591828 != nil:
    section.add "CacheParameterGroupName", valid_591828
  var valid_591829 = query.getOrDefault("Action")
  valid_591829 = validateParameter(valid_591829, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_591829 != nil:
    section.add "Action", valid_591829
  var valid_591830 = query.getOrDefault("Version")
  valid_591830 = validateParameter(valid_591830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591830 != nil:
    section.add "Version", valid_591830
  var valid_591831 = query.getOrDefault("MaxRecords")
  valid_591831 = validateParameter(valid_591831, JInt, required = false, default = nil)
  if valid_591831 != nil:
    section.add "MaxRecords", valid_591831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591832 = header.getOrDefault("X-Amz-Signature")
  valid_591832 = validateParameter(valid_591832, JString, required = false,
                                 default = nil)
  if valid_591832 != nil:
    section.add "X-Amz-Signature", valid_591832
  var valid_591833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591833 = validateParameter(valid_591833, JString, required = false,
                                 default = nil)
  if valid_591833 != nil:
    section.add "X-Amz-Content-Sha256", valid_591833
  var valid_591834 = header.getOrDefault("X-Amz-Date")
  valid_591834 = validateParameter(valid_591834, JString, required = false,
                                 default = nil)
  if valid_591834 != nil:
    section.add "X-Amz-Date", valid_591834
  var valid_591835 = header.getOrDefault("X-Amz-Credential")
  valid_591835 = validateParameter(valid_591835, JString, required = false,
                                 default = nil)
  if valid_591835 != nil:
    section.add "X-Amz-Credential", valid_591835
  var valid_591836 = header.getOrDefault("X-Amz-Security-Token")
  valid_591836 = validateParameter(valid_591836, JString, required = false,
                                 default = nil)
  if valid_591836 != nil:
    section.add "X-Amz-Security-Token", valid_591836
  var valid_591837 = header.getOrDefault("X-Amz-Algorithm")
  valid_591837 = validateParameter(valid_591837, JString, required = false,
                                 default = nil)
  if valid_591837 != nil:
    section.add "X-Amz-Algorithm", valid_591837
  var valid_591838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591838 = validateParameter(valid_591838, JString, required = false,
                                 default = nil)
  if valid_591838 != nil:
    section.add "X-Amz-SignedHeaders", valid_591838
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591839: Call_GetDescribeCacheParameters_591823; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_591839.validator(path, query, header, formData, body)
  let scheme = call_591839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591839.url(scheme.get, call_591839.host, call_591839.base,
                         call_591839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591839, url, valid)

proc call*(call_591840: Call_GetDescribeCacheParameters_591823;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591841 = newJObject()
  add(query_591841, "Marker", newJString(Marker))
  add(query_591841, "Source", newJString(Source))
  add(query_591841, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_591841, "Action", newJString(Action))
  add(query_591841, "Version", newJString(Version))
  add(query_591841, "MaxRecords", newJInt(MaxRecords))
  result = call_591840.call(nil, query_591841, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_591823(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_591824, base: "/",
    url: url_GetDescribeCacheParameters_591825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_591880 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheSecurityGroups_591882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_591881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591883 = query.getOrDefault("Action")
  valid_591883 = validateParameter(valid_591883, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_591883 != nil:
    section.add "Action", valid_591883
  var valid_591884 = query.getOrDefault("Version")
  valid_591884 = validateParameter(valid_591884, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591884 != nil:
    section.add "Version", valid_591884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591885 = header.getOrDefault("X-Amz-Signature")
  valid_591885 = validateParameter(valid_591885, JString, required = false,
                                 default = nil)
  if valid_591885 != nil:
    section.add "X-Amz-Signature", valid_591885
  var valid_591886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591886 = validateParameter(valid_591886, JString, required = false,
                                 default = nil)
  if valid_591886 != nil:
    section.add "X-Amz-Content-Sha256", valid_591886
  var valid_591887 = header.getOrDefault("X-Amz-Date")
  valid_591887 = validateParameter(valid_591887, JString, required = false,
                                 default = nil)
  if valid_591887 != nil:
    section.add "X-Amz-Date", valid_591887
  var valid_591888 = header.getOrDefault("X-Amz-Credential")
  valid_591888 = validateParameter(valid_591888, JString, required = false,
                                 default = nil)
  if valid_591888 != nil:
    section.add "X-Amz-Credential", valid_591888
  var valid_591889 = header.getOrDefault("X-Amz-Security-Token")
  valid_591889 = validateParameter(valid_591889, JString, required = false,
                                 default = nil)
  if valid_591889 != nil:
    section.add "X-Amz-Security-Token", valid_591889
  var valid_591890 = header.getOrDefault("X-Amz-Algorithm")
  valid_591890 = validateParameter(valid_591890, JString, required = false,
                                 default = nil)
  if valid_591890 != nil:
    section.add "X-Amz-Algorithm", valid_591890
  var valid_591891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591891 = validateParameter(valid_591891, JString, required = false,
                                 default = nil)
  if valid_591891 != nil:
    section.add "X-Amz-SignedHeaders", valid_591891
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_591892 = formData.getOrDefault("MaxRecords")
  valid_591892 = validateParameter(valid_591892, JInt, required = false, default = nil)
  if valid_591892 != nil:
    section.add "MaxRecords", valid_591892
  var valid_591893 = formData.getOrDefault("CacheSecurityGroupName")
  valid_591893 = validateParameter(valid_591893, JString, required = false,
                                 default = nil)
  if valid_591893 != nil:
    section.add "CacheSecurityGroupName", valid_591893
  var valid_591894 = formData.getOrDefault("Marker")
  valid_591894 = validateParameter(valid_591894, JString, required = false,
                                 default = nil)
  if valid_591894 != nil:
    section.add "Marker", valid_591894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591895: Call_PostDescribeCacheSecurityGroups_591880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_591895.validator(path, query, header, formData, body)
  let scheme = call_591895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591895.url(scheme.get, call_591895.host, call_591895.base,
                         call_591895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591895, url, valid)

proc call*(call_591896: Call_PostDescribeCacheSecurityGroups_591880;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591897 = newJObject()
  var formData_591898 = newJObject()
  add(formData_591898, "MaxRecords", newJInt(MaxRecords))
  add(formData_591898, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_591898, "Marker", newJString(Marker))
  add(query_591897, "Action", newJString(Action))
  add(query_591897, "Version", newJString(Version))
  result = call_591896.call(nil, query_591897, nil, formData_591898, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_591880(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_591881, base: "/",
    url: url_PostDescribeCacheSecurityGroups_591882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_591862 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheSecurityGroups_591864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_591863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591865 = query.getOrDefault("Marker")
  valid_591865 = validateParameter(valid_591865, JString, required = false,
                                 default = nil)
  if valid_591865 != nil:
    section.add "Marker", valid_591865
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591866 = query.getOrDefault("Action")
  valid_591866 = validateParameter(valid_591866, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_591866 != nil:
    section.add "Action", valid_591866
  var valid_591867 = query.getOrDefault("CacheSecurityGroupName")
  valid_591867 = validateParameter(valid_591867, JString, required = false,
                                 default = nil)
  if valid_591867 != nil:
    section.add "CacheSecurityGroupName", valid_591867
  var valid_591868 = query.getOrDefault("Version")
  valid_591868 = validateParameter(valid_591868, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591868 != nil:
    section.add "Version", valid_591868
  var valid_591869 = query.getOrDefault("MaxRecords")
  valid_591869 = validateParameter(valid_591869, JInt, required = false, default = nil)
  if valid_591869 != nil:
    section.add "MaxRecords", valid_591869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591870 = header.getOrDefault("X-Amz-Signature")
  valid_591870 = validateParameter(valid_591870, JString, required = false,
                                 default = nil)
  if valid_591870 != nil:
    section.add "X-Amz-Signature", valid_591870
  var valid_591871 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591871 = validateParameter(valid_591871, JString, required = false,
                                 default = nil)
  if valid_591871 != nil:
    section.add "X-Amz-Content-Sha256", valid_591871
  var valid_591872 = header.getOrDefault("X-Amz-Date")
  valid_591872 = validateParameter(valid_591872, JString, required = false,
                                 default = nil)
  if valid_591872 != nil:
    section.add "X-Amz-Date", valid_591872
  var valid_591873 = header.getOrDefault("X-Amz-Credential")
  valid_591873 = validateParameter(valid_591873, JString, required = false,
                                 default = nil)
  if valid_591873 != nil:
    section.add "X-Amz-Credential", valid_591873
  var valid_591874 = header.getOrDefault("X-Amz-Security-Token")
  valid_591874 = validateParameter(valid_591874, JString, required = false,
                                 default = nil)
  if valid_591874 != nil:
    section.add "X-Amz-Security-Token", valid_591874
  var valid_591875 = header.getOrDefault("X-Amz-Algorithm")
  valid_591875 = validateParameter(valid_591875, JString, required = false,
                                 default = nil)
  if valid_591875 != nil:
    section.add "X-Amz-Algorithm", valid_591875
  var valid_591876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591876 = validateParameter(valid_591876, JString, required = false,
                                 default = nil)
  if valid_591876 != nil:
    section.add "X-Amz-SignedHeaders", valid_591876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591877: Call_GetDescribeCacheSecurityGroups_591862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_591877.validator(path, query, header, formData, body)
  let scheme = call_591877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591877.url(scheme.get, call_591877.host, call_591877.base,
                         call_591877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591877, url, valid)

proc call*(call_591878: Call_GetDescribeCacheSecurityGroups_591862;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591879 = newJObject()
  add(query_591879, "Marker", newJString(Marker))
  add(query_591879, "Action", newJString(Action))
  add(query_591879, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_591879, "Version", newJString(Version))
  add(query_591879, "MaxRecords", newJInt(MaxRecords))
  result = call_591878.call(nil, query_591879, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_591862(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_591863, base: "/",
    url: url_GetDescribeCacheSecurityGroups_591864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_591917 = ref object of OpenApiRestCall_590364
proc url_PostDescribeCacheSubnetGroups_591919(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_591918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591920 = query.getOrDefault("Action")
  valid_591920 = validateParameter(valid_591920, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_591920 != nil:
    section.add "Action", valid_591920
  var valid_591921 = query.getOrDefault("Version")
  valid_591921 = validateParameter(valid_591921, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591921 != nil:
    section.add "Version", valid_591921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591922 = header.getOrDefault("X-Amz-Signature")
  valid_591922 = validateParameter(valid_591922, JString, required = false,
                                 default = nil)
  if valid_591922 != nil:
    section.add "X-Amz-Signature", valid_591922
  var valid_591923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591923 = validateParameter(valid_591923, JString, required = false,
                                 default = nil)
  if valid_591923 != nil:
    section.add "X-Amz-Content-Sha256", valid_591923
  var valid_591924 = header.getOrDefault("X-Amz-Date")
  valid_591924 = validateParameter(valid_591924, JString, required = false,
                                 default = nil)
  if valid_591924 != nil:
    section.add "X-Amz-Date", valid_591924
  var valid_591925 = header.getOrDefault("X-Amz-Credential")
  valid_591925 = validateParameter(valid_591925, JString, required = false,
                                 default = nil)
  if valid_591925 != nil:
    section.add "X-Amz-Credential", valid_591925
  var valid_591926 = header.getOrDefault("X-Amz-Security-Token")
  valid_591926 = validateParameter(valid_591926, JString, required = false,
                                 default = nil)
  if valid_591926 != nil:
    section.add "X-Amz-Security-Token", valid_591926
  var valid_591927 = header.getOrDefault("X-Amz-Algorithm")
  valid_591927 = validateParameter(valid_591927, JString, required = false,
                                 default = nil)
  if valid_591927 != nil:
    section.add "X-Amz-Algorithm", valid_591927
  var valid_591928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591928 = validateParameter(valid_591928, JString, required = false,
                                 default = nil)
  if valid_591928 != nil:
    section.add "X-Amz-SignedHeaders", valid_591928
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_591929 = formData.getOrDefault("MaxRecords")
  valid_591929 = validateParameter(valid_591929, JInt, required = false, default = nil)
  if valid_591929 != nil:
    section.add "MaxRecords", valid_591929
  var valid_591930 = formData.getOrDefault("Marker")
  valid_591930 = validateParameter(valid_591930, JString, required = false,
                                 default = nil)
  if valid_591930 != nil:
    section.add "Marker", valid_591930
  var valid_591931 = formData.getOrDefault("CacheSubnetGroupName")
  valid_591931 = validateParameter(valid_591931, JString, required = false,
                                 default = nil)
  if valid_591931 != nil:
    section.add "CacheSubnetGroupName", valid_591931
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591932: Call_PostDescribeCacheSubnetGroups_591917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_591932.validator(path, query, header, formData, body)
  let scheme = call_591932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591932.url(scheme.get, call_591932.host, call_591932.base,
                         call_591932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591932, url, valid)

proc call*(call_591933: Call_PostDescribeCacheSubnetGroups_591917;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591934 = newJObject()
  var formData_591935 = newJObject()
  add(formData_591935, "MaxRecords", newJInt(MaxRecords))
  add(formData_591935, "Marker", newJString(Marker))
  add(formData_591935, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591934, "Action", newJString(Action))
  add(query_591934, "Version", newJString(Version))
  result = call_591933.call(nil, query_591934, nil, formData_591935, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_591917(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_591918, base: "/",
    url: url_PostDescribeCacheSubnetGroups_591919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_591899 = ref object of OpenApiRestCall_590364
proc url_GetDescribeCacheSubnetGroups_591901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_591900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591902 = query.getOrDefault("Marker")
  valid_591902 = validateParameter(valid_591902, JString, required = false,
                                 default = nil)
  if valid_591902 != nil:
    section.add "Marker", valid_591902
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591903 = query.getOrDefault("Action")
  valid_591903 = validateParameter(valid_591903, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_591903 != nil:
    section.add "Action", valid_591903
  var valid_591904 = query.getOrDefault("CacheSubnetGroupName")
  valid_591904 = validateParameter(valid_591904, JString, required = false,
                                 default = nil)
  if valid_591904 != nil:
    section.add "CacheSubnetGroupName", valid_591904
  var valid_591905 = query.getOrDefault("Version")
  valid_591905 = validateParameter(valid_591905, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591905 != nil:
    section.add "Version", valid_591905
  var valid_591906 = query.getOrDefault("MaxRecords")
  valid_591906 = validateParameter(valid_591906, JInt, required = false, default = nil)
  if valid_591906 != nil:
    section.add "MaxRecords", valid_591906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591907 = header.getOrDefault("X-Amz-Signature")
  valid_591907 = validateParameter(valid_591907, JString, required = false,
                                 default = nil)
  if valid_591907 != nil:
    section.add "X-Amz-Signature", valid_591907
  var valid_591908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591908 = validateParameter(valid_591908, JString, required = false,
                                 default = nil)
  if valid_591908 != nil:
    section.add "X-Amz-Content-Sha256", valid_591908
  var valid_591909 = header.getOrDefault("X-Amz-Date")
  valid_591909 = validateParameter(valid_591909, JString, required = false,
                                 default = nil)
  if valid_591909 != nil:
    section.add "X-Amz-Date", valid_591909
  var valid_591910 = header.getOrDefault("X-Amz-Credential")
  valid_591910 = validateParameter(valid_591910, JString, required = false,
                                 default = nil)
  if valid_591910 != nil:
    section.add "X-Amz-Credential", valid_591910
  var valid_591911 = header.getOrDefault("X-Amz-Security-Token")
  valid_591911 = validateParameter(valid_591911, JString, required = false,
                                 default = nil)
  if valid_591911 != nil:
    section.add "X-Amz-Security-Token", valid_591911
  var valid_591912 = header.getOrDefault("X-Amz-Algorithm")
  valid_591912 = validateParameter(valid_591912, JString, required = false,
                                 default = nil)
  if valid_591912 != nil:
    section.add "X-Amz-Algorithm", valid_591912
  var valid_591913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591913 = validateParameter(valid_591913, JString, required = false,
                                 default = nil)
  if valid_591913 != nil:
    section.add "X-Amz-SignedHeaders", valid_591913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591914: Call_GetDescribeCacheSubnetGroups_591899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_591914.validator(path, query, header, formData, body)
  let scheme = call_591914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591914.url(scheme.get, call_591914.host, call_591914.base,
                         call_591914.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591914, url, valid)

proc call*(call_591915: Call_GetDescribeCacheSubnetGroups_591899;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591916 = newJObject()
  add(query_591916, "Marker", newJString(Marker))
  add(query_591916, "Action", newJString(Action))
  add(query_591916, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_591916, "Version", newJString(Version))
  add(query_591916, "MaxRecords", newJInt(MaxRecords))
  result = call_591915.call(nil, query_591916, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_591899(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_591900, base: "/",
    url: url_GetDescribeCacheSubnetGroups_591901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_591954 = ref object of OpenApiRestCall_590364
proc url_PostDescribeEngineDefaultParameters_591956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_591955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591957 = query.getOrDefault("Action")
  valid_591957 = validateParameter(valid_591957, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_591957 != nil:
    section.add "Action", valid_591957
  var valid_591958 = query.getOrDefault("Version")
  valid_591958 = validateParameter(valid_591958, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591958 != nil:
    section.add "Version", valid_591958
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591959 = header.getOrDefault("X-Amz-Signature")
  valid_591959 = validateParameter(valid_591959, JString, required = false,
                                 default = nil)
  if valid_591959 != nil:
    section.add "X-Amz-Signature", valid_591959
  var valid_591960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591960 = validateParameter(valid_591960, JString, required = false,
                                 default = nil)
  if valid_591960 != nil:
    section.add "X-Amz-Content-Sha256", valid_591960
  var valid_591961 = header.getOrDefault("X-Amz-Date")
  valid_591961 = validateParameter(valid_591961, JString, required = false,
                                 default = nil)
  if valid_591961 != nil:
    section.add "X-Amz-Date", valid_591961
  var valid_591962 = header.getOrDefault("X-Amz-Credential")
  valid_591962 = validateParameter(valid_591962, JString, required = false,
                                 default = nil)
  if valid_591962 != nil:
    section.add "X-Amz-Credential", valid_591962
  var valid_591963 = header.getOrDefault("X-Amz-Security-Token")
  valid_591963 = validateParameter(valid_591963, JString, required = false,
                                 default = nil)
  if valid_591963 != nil:
    section.add "X-Amz-Security-Token", valid_591963
  var valid_591964 = header.getOrDefault("X-Amz-Algorithm")
  valid_591964 = validateParameter(valid_591964, JString, required = false,
                                 default = nil)
  if valid_591964 != nil:
    section.add "X-Amz-Algorithm", valid_591964
  var valid_591965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591965 = validateParameter(valid_591965, JString, required = false,
                                 default = nil)
  if valid_591965 != nil:
    section.add "X-Amz-SignedHeaders", valid_591965
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_591966 = formData.getOrDefault("MaxRecords")
  valid_591966 = validateParameter(valid_591966, JInt, required = false, default = nil)
  if valid_591966 != nil:
    section.add "MaxRecords", valid_591966
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_591967 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_591967 = validateParameter(valid_591967, JString, required = true,
                                 default = nil)
  if valid_591967 != nil:
    section.add "CacheParameterGroupFamily", valid_591967
  var valid_591968 = formData.getOrDefault("Marker")
  valid_591968 = validateParameter(valid_591968, JString, required = false,
                                 default = nil)
  if valid_591968 != nil:
    section.add "Marker", valid_591968
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591969: Call_PostDescribeEngineDefaultParameters_591954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_591969.validator(path, query, header, formData, body)
  let scheme = call_591969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591969.url(scheme.get, call_591969.host, call_591969.base,
                         call_591969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591969, url, valid)

proc call*(call_591970: Call_PostDescribeEngineDefaultParameters_591954;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_591971 = newJObject()
  var formData_591972 = newJObject()
  add(formData_591972, "MaxRecords", newJInt(MaxRecords))
  add(formData_591972, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_591972, "Marker", newJString(Marker))
  add(query_591971, "Action", newJString(Action))
  add(query_591971, "Version", newJString(Version))
  result = call_591970.call(nil, query_591971, nil, formData_591972, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_591954(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_591955, base: "/",
    url: url_PostDescribeEngineDefaultParameters_591956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_591936 = ref object of OpenApiRestCall_590364
proc url_GetDescribeEngineDefaultParameters_591938(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_591937(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591939 = query.getOrDefault("Marker")
  valid_591939 = validateParameter(valid_591939, JString, required = false,
                                 default = nil)
  if valid_591939 != nil:
    section.add "Marker", valid_591939
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_591940 = query.getOrDefault("CacheParameterGroupFamily")
  valid_591940 = validateParameter(valid_591940, JString, required = true,
                                 default = nil)
  if valid_591940 != nil:
    section.add "CacheParameterGroupFamily", valid_591940
  var valid_591941 = query.getOrDefault("Action")
  valid_591941 = validateParameter(valid_591941, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_591941 != nil:
    section.add "Action", valid_591941
  var valid_591942 = query.getOrDefault("Version")
  valid_591942 = validateParameter(valid_591942, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591942 != nil:
    section.add "Version", valid_591942
  var valid_591943 = query.getOrDefault("MaxRecords")
  valid_591943 = validateParameter(valid_591943, JInt, required = false, default = nil)
  if valid_591943 != nil:
    section.add "MaxRecords", valid_591943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591944 = header.getOrDefault("X-Amz-Signature")
  valid_591944 = validateParameter(valid_591944, JString, required = false,
                                 default = nil)
  if valid_591944 != nil:
    section.add "X-Amz-Signature", valid_591944
  var valid_591945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591945 = validateParameter(valid_591945, JString, required = false,
                                 default = nil)
  if valid_591945 != nil:
    section.add "X-Amz-Content-Sha256", valid_591945
  var valid_591946 = header.getOrDefault("X-Amz-Date")
  valid_591946 = validateParameter(valid_591946, JString, required = false,
                                 default = nil)
  if valid_591946 != nil:
    section.add "X-Amz-Date", valid_591946
  var valid_591947 = header.getOrDefault("X-Amz-Credential")
  valid_591947 = validateParameter(valid_591947, JString, required = false,
                                 default = nil)
  if valid_591947 != nil:
    section.add "X-Amz-Credential", valid_591947
  var valid_591948 = header.getOrDefault("X-Amz-Security-Token")
  valid_591948 = validateParameter(valid_591948, JString, required = false,
                                 default = nil)
  if valid_591948 != nil:
    section.add "X-Amz-Security-Token", valid_591948
  var valid_591949 = header.getOrDefault("X-Amz-Algorithm")
  valid_591949 = validateParameter(valid_591949, JString, required = false,
                                 default = nil)
  if valid_591949 != nil:
    section.add "X-Amz-Algorithm", valid_591949
  var valid_591950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591950 = validateParameter(valid_591950, JString, required = false,
                                 default = nil)
  if valid_591950 != nil:
    section.add "X-Amz-SignedHeaders", valid_591950
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591951: Call_GetDescribeEngineDefaultParameters_591936;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_591951.validator(path, query, header, formData, body)
  let scheme = call_591951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591951.url(scheme.get, call_591951.host, call_591951.base,
                         call_591951.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591951, url, valid)

proc call*(call_591952: Call_GetDescribeEngineDefaultParameters_591936;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591953 = newJObject()
  add(query_591953, "Marker", newJString(Marker))
  add(query_591953, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_591953, "Action", newJString(Action))
  add(query_591953, "Version", newJString(Version))
  add(query_591953, "MaxRecords", newJInt(MaxRecords))
  result = call_591952.call(nil, query_591953, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_591936(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_591937, base: "/",
    url: url_GetDescribeEngineDefaultParameters_591938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_591995 = ref object of OpenApiRestCall_590364
proc url_PostDescribeEvents_591997(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_591996(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591998 = query.getOrDefault("Action")
  valid_591998 = validateParameter(valid_591998, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_591998 != nil:
    section.add "Action", valid_591998
  var valid_591999 = query.getOrDefault("Version")
  valid_591999 = validateParameter(valid_591999, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591999 != nil:
    section.add "Version", valid_591999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592000 = header.getOrDefault("X-Amz-Signature")
  valid_592000 = validateParameter(valid_592000, JString, required = false,
                                 default = nil)
  if valid_592000 != nil:
    section.add "X-Amz-Signature", valid_592000
  var valid_592001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592001 = validateParameter(valid_592001, JString, required = false,
                                 default = nil)
  if valid_592001 != nil:
    section.add "X-Amz-Content-Sha256", valid_592001
  var valid_592002 = header.getOrDefault("X-Amz-Date")
  valid_592002 = validateParameter(valid_592002, JString, required = false,
                                 default = nil)
  if valid_592002 != nil:
    section.add "X-Amz-Date", valid_592002
  var valid_592003 = header.getOrDefault("X-Amz-Credential")
  valid_592003 = validateParameter(valid_592003, JString, required = false,
                                 default = nil)
  if valid_592003 != nil:
    section.add "X-Amz-Credential", valid_592003
  var valid_592004 = header.getOrDefault("X-Amz-Security-Token")
  valid_592004 = validateParameter(valid_592004, JString, required = false,
                                 default = nil)
  if valid_592004 != nil:
    section.add "X-Amz-Security-Token", valid_592004
  var valid_592005 = header.getOrDefault("X-Amz-Algorithm")
  valid_592005 = validateParameter(valid_592005, JString, required = false,
                                 default = nil)
  if valid_592005 != nil:
    section.add "X-Amz-Algorithm", valid_592005
  var valid_592006 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592006 = validateParameter(valid_592006, JString, required = false,
                                 default = nil)
  if valid_592006 != nil:
    section.add "X-Amz-SignedHeaders", valid_592006
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_592007 = formData.getOrDefault("MaxRecords")
  valid_592007 = validateParameter(valid_592007, JInt, required = false, default = nil)
  if valid_592007 != nil:
    section.add "MaxRecords", valid_592007
  var valid_592008 = formData.getOrDefault("Marker")
  valid_592008 = validateParameter(valid_592008, JString, required = false,
                                 default = nil)
  if valid_592008 != nil:
    section.add "Marker", valid_592008
  var valid_592009 = formData.getOrDefault("SourceIdentifier")
  valid_592009 = validateParameter(valid_592009, JString, required = false,
                                 default = nil)
  if valid_592009 != nil:
    section.add "SourceIdentifier", valid_592009
  var valid_592010 = formData.getOrDefault("SourceType")
  valid_592010 = validateParameter(valid_592010, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_592010 != nil:
    section.add "SourceType", valid_592010
  var valid_592011 = formData.getOrDefault("Duration")
  valid_592011 = validateParameter(valid_592011, JInt, required = false, default = nil)
  if valid_592011 != nil:
    section.add "Duration", valid_592011
  var valid_592012 = formData.getOrDefault("EndTime")
  valid_592012 = validateParameter(valid_592012, JString, required = false,
                                 default = nil)
  if valid_592012 != nil:
    section.add "EndTime", valid_592012
  var valid_592013 = formData.getOrDefault("StartTime")
  valid_592013 = validateParameter(valid_592013, JString, required = false,
                                 default = nil)
  if valid_592013 != nil:
    section.add "StartTime", valid_592013
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592014: Call_PostDescribeEvents_591995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_592014.validator(path, query, header, formData, body)
  let scheme = call_592014.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592014.url(scheme.get, call_592014.host, call_592014.base,
                         call_592014.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592014, url, valid)

proc call*(call_592015: Call_PostDescribeEvents_591995; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592016 = newJObject()
  var formData_592017 = newJObject()
  add(formData_592017, "MaxRecords", newJInt(MaxRecords))
  add(formData_592017, "Marker", newJString(Marker))
  add(formData_592017, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_592017, "SourceType", newJString(SourceType))
  add(formData_592017, "Duration", newJInt(Duration))
  add(formData_592017, "EndTime", newJString(EndTime))
  add(formData_592017, "StartTime", newJString(StartTime))
  add(query_592016, "Action", newJString(Action))
  add(query_592016, "Version", newJString(Version))
  result = call_592015.call(nil, query_592016, nil, formData_592017, nil)

var postDescribeEvents* = Call_PostDescribeEvents_591995(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_591996, base: "/",
    url: url_PostDescribeEvents_591997, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_591973 = ref object of OpenApiRestCall_590364
proc url_GetDescribeEvents_591975(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_591974(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_591976 = query.getOrDefault("Marker")
  valid_591976 = validateParameter(valid_591976, JString, required = false,
                                 default = nil)
  if valid_591976 != nil:
    section.add "Marker", valid_591976
  var valid_591977 = query.getOrDefault("SourceType")
  valid_591977 = validateParameter(valid_591977, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_591977 != nil:
    section.add "SourceType", valid_591977
  var valid_591978 = query.getOrDefault("SourceIdentifier")
  valid_591978 = validateParameter(valid_591978, JString, required = false,
                                 default = nil)
  if valid_591978 != nil:
    section.add "SourceIdentifier", valid_591978
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_591979 = query.getOrDefault("Action")
  valid_591979 = validateParameter(valid_591979, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_591979 != nil:
    section.add "Action", valid_591979
  var valid_591980 = query.getOrDefault("StartTime")
  valid_591980 = validateParameter(valid_591980, JString, required = false,
                                 default = nil)
  if valid_591980 != nil:
    section.add "StartTime", valid_591980
  var valid_591981 = query.getOrDefault("Duration")
  valid_591981 = validateParameter(valid_591981, JInt, required = false, default = nil)
  if valid_591981 != nil:
    section.add "Duration", valid_591981
  var valid_591982 = query.getOrDefault("EndTime")
  valid_591982 = validateParameter(valid_591982, JString, required = false,
                                 default = nil)
  if valid_591982 != nil:
    section.add "EndTime", valid_591982
  var valid_591983 = query.getOrDefault("Version")
  valid_591983 = validateParameter(valid_591983, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_591983 != nil:
    section.add "Version", valid_591983
  var valid_591984 = query.getOrDefault("MaxRecords")
  valid_591984 = validateParameter(valid_591984, JInt, required = false, default = nil)
  if valid_591984 != nil:
    section.add "MaxRecords", valid_591984
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_591985 = header.getOrDefault("X-Amz-Signature")
  valid_591985 = validateParameter(valid_591985, JString, required = false,
                                 default = nil)
  if valid_591985 != nil:
    section.add "X-Amz-Signature", valid_591985
  var valid_591986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_591986 = validateParameter(valid_591986, JString, required = false,
                                 default = nil)
  if valid_591986 != nil:
    section.add "X-Amz-Content-Sha256", valid_591986
  var valid_591987 = header.getOrDefault("X-Amz-Date")
  valid_591987 = validateParameter(valid_591987, JString, required = false,
                                 default = nil)
  if valid_591987 != nil:
    section.add "X-Amz-Date", valid_591987
  var valid_591988 = header.getOrDefault("X-Amz-Credential")
  valid_591988 = validateParameter(valid_591988, JString, required = false,
                                 default = nil)
  if valid_591988 != nil:
    section.add "X-Amz-Credential", valid_591988
  var valid_591989 = header.getOrDefault("X-Amz-Security-Token")
  valid_591989 = validateParameter(valid_591989, JString, required = false,
                                 default = nil)
  if valid_591989 != nil:
    section.add "X-Amz-Security-Token", valid_591989
  var valid_591990 = header.getOrDefault("X-Amz-Algorithm")
  valid_591990 = validateParameter(valid_591990, JString, required = false,
                                 default = nil)
  if valid_591990 != nil:
    section.add "X-Amz-Algorithm", valid_591990
  var valid_591991 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_591991 = validateParameter(valid_591991, JString, required = false,
                                 default = nil)
  if valid_591991 != nil:
    section.add "X-Amz-SignedHeaders", valid_591991
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_591992: Call_GetDescribeEvents_591973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_591992.validator(path, query, header, formData, body)
  let scheme = call_591992.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_591992.url(scheme.get, call_591992.host, call_591992.base,
                         call_591992.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_591992, url, valid)

proc call*(call_591993: Call_GetDescribeEvents_591973; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_591994 = newJObject()
  add(query_591994, "Marker", newJString(Marker))
  add(query_591994, "SourceType", newJString(SourceType))
  add(query_591994, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_591994, "Action", newJString(Action))
  add(query_591994, "StartTime", newJString(StartTime))
  add(query_591994, "Duration", newJInt(Duration))
  add(query_591994, "EndTime", newJString(EndTime))
  add(query_591994, "Version", newJString(Version))
  add(query_591994, "MaxRecords", newJInt(MaxRecords))
  result = call_591993.call(nil, query_591994, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_591973(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_591974,
    base: "/", url: url_GetDescribeEvents_591975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_592036 = ref object of OpenApiRestCall_590364
proc url_PostDescribeReplicationGroups_592038(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReplicationGroups_592037(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592039 = query.getOrDefault("Action")
  valid_592039 = validateParameter(valid_592039, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_592039 != nil:
    section.add "Action", valid_592039
  var valid_592040 = query.getOrDefault("Version")
  valid_592040 = validateParameter(valid_592040, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592040 != nil:
    section.add "Version", valid_592040
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592041 = header.getOrDefault("X-Amz-Signature")
  valid_592041 = validateParameter(valid_592041, JString, required = false,
                                 default = nil)
  if valid_592041 != nil:
    section.add "X-Amz-Signature", valid_592041
  var valid_592042 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592042 = validateParameter(valid_592042, JString, required = false,
                                 default = nil)
  if valid_592042 != nil:
    section.add "X-Amz-Content-Sha256", valid_592042
  var valid_592043 = header.getOrDefault("X-Amz-Date")
  valid_592043 = validateParameter(valid_592043, JString, required = false,
                                 default = nil)
  if valid_592043 != nil:
    section.add "X-Amz-Date", valid_592043
  var valid_592044 = header.getOrDefault("X-Amz-Credential")
  valid_592044 = validateParameter(valid_592044, JString, required = false,
                                 default = nil)
  if valid_592044 != nil:
    section.add "X-Amz-Credential", valid_592044
  var valid_592045 = header.getOrDefault("X-Amz-Security-Token")
  valid_592045 = validateParameter(valid_592045, JString, required = false,
                                 default = nil)
  if valid_592045 != nil:
    section.add "X-Amz-Security-Token", valid_592045
  var valid_592046 = header.getOrDefault("X-Amz-Algorithm")
  valid_592046 = validateParameter(valid_592046, JString, required = false,
                                 default = nil)
  if valid_592046 != nil:
    section.add "X-Amz-Algorithm", valid_592046
  var valid_592047 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592047 = validateParameter(valid_592047, JString, required = false,
                                 default = nil)
  if valid_592047 != nil:
    section.add "X-Amz-SignedHeaders", valid_592047
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_592048 = formData.getOrDefault("MaxRecords")
  valid_592048 = validateParameter(valid_592048, JInt, required = false, default = nil)
  if valid_592048 != nil:
    section.add "MaxRecords", valid_592048
  var valid_592049 = formData.getOrDefault("Marker")
  valid_592049 = validateParameter(valid_592049, JString, required = false,
                                 default = nil)
  if valid_592049 != nil:
    section.add "Marker", valid_592049
  var valid_592050 = formData.getOrDefault("ReplicationGroupId")
  valid_592050 = validateParameter(valid_592050, JString, required = false,
                                 default = nil)
  if valid_592050 != nil:
    section.add "ReplicationGroupId", valid_592050
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592051: Call_PostDescribeReplicationGroups_592036; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592051.validator(path, query, header, formData, body)
  let scheme = call_592051.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592051.url(scheme.get, call_592051.host, call_592051.base,
                         call_592051.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592051, url, valid)

proc call*(call_592052: Call_PostDescribeReplicationGroups_592036;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_592053 = newJObject()
  var formData_592054 = newJObject()
  add(formData_592054, "MaxRecords", newJInt(MaxRecords))
  add(formData_592054, "Marker", newJString(Marker))
  add(query_592053, "Action", newJString(Action))
  add(query_592053, "Version", newJString(Version))
  add(formData_592054, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592052.call(nil, query_592053, nil, formData_592054, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_592036(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_592037, base: "/",
    url: url_PostDescribeReplicationGroups_592038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_592018 = ref object of OpenApiRestCall_590364
proc url_GetDescribeReplicationGroups_592020(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReplicationGroups_592019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_592021 = query.getOrDefault("Marker")
  valid_592021 = validateParameter(valid_592021, JString, required = false,
                                 default = nil)
  if valid_592021 != nil:
    section.add "Marker", valid_592021
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592022 = query.getOrDefault("Action")
  valid_592022 = validateParameter(valid_592022, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_592022 != nil:
    section.add "Action", valid_592022
  var valid_592023 = query.getOrDefault("ReplicationGroupId")
  valid_592023 = validateParameter(valid_592023, JString, required = false,
                                 default = nil)
  if valid_592023 != nil:
    section.add "ReplicationGroupId", valid_592023
  var valid_592024 = query.getOrDefault("Version")
  valid_592024 = validateParameter(valid_592024, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592024 != nil:
    section.add "Version", valid_592024
  var valid_592025 = query.getOrDefault("MaxRecords")
  valid_592025 = validateParameter(valid_592025, JInt, required = false, default = nil)
  if valid_592025 != nil:
    section.add "MaxRecords", valid_592025
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592026 = header.getOrDefault("X-Amz-Signature")
  valid_592026 = validateParameter(valid_592026, JString, required = false,
                                 default = nil)
  if valid_592026 != nil:
    section.add "X-Amz-Signature", valid_592026
  var valid_592027 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592027 = validateParameter(valid_592027, JString, required = false,
                                 default = nil)
  if valid_592027 != nil:
    section.add "X-Amz-Content-Sha256", valid_592027
  var valid_592028 = header.getOrDefault("X-Amz-Date")
  valid_592028 = validateParameter(valid_592028, JString, required = false,
                                 default = nil)
  if valid_592028 != nil:
    section.add "X-Amz-Date", valid_592028
  var valid_592029 = header.getOrDefault("X-Amz-Credential")
  valid_592029 = validateParameter(valid_592029, JString, required = false,
                                 default = nil)
  if valid_592029 != nil:
    section.add "X-Amz-Credential", valid_592029
  var valid_592030 = header.getOrDefault("X-Amz-Security-Token")
  valid_592030 = validateParameter(valid_592030, JString, required = false,
                                 default = nil)
  if valid_592030 != nil:
    section.add "X-Amz-Security-Token", valid_592030
  var valid_592031 = header.getOrDefault("X-Amz-Algorithm")
  valid_592031 = validateParameter(valid_592031, JString, required = false,
                                 default = nil)
  if valid_592031 != nil:
    section.add "X-Amz-Algorithm", valid_592031
  var valid_592032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592032 = validateParameter(valid_592032, JString, required = false,
                                 default = nil)
  if valid_592032 != nil:
    section.add "X-Amz-SignedHeaders", valid_592032
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592033: Call_GetDescribeReplicationGroups_592018; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592033.validator(path, query, header, formData, body)
  let scheme = call_592033.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592033.url(scheme.get, call_592033.host, call_592033.base,
                         call_592033.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592033, url, valid)

proc call*(call_592034: Call_GetDescribeReplicationGroups_592018;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_592035 = newJObject()
  add(query_592035, "Marker", newJString(Marker))
  add(query_592035, "Action", newJString(Action))
  add(query_592035, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592035, "Version", newJString(Version))
  add(query_592035, "MaxRecords", newJInt(MaxRecords))
  result = call_592034.call(nil, query_592035, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_592018(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_592019, base: "/",
    url: url_GetDescribeReplicationGroups_592020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_592078 = ref object of OpenApiRestCall_590364
proc url_PostDescribeReservedCacheNodes_592080(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodes_592079(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592081 = query.getOrDefault("Action")
  valid_592081 = validateParameter(valid_592081, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_592081 != nil:
    section.add "Action", valid_592081
  var valid_592082 = query.getOrDefault("Version")
  valid_592082 = validateParameter(valid_592082, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592082 != nil:
    section.add "Version", valid_592082
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592083 = header.getOrDefault("X-Amz-Signature")
  valid_592083 = validateParameter(valid_592083, JString, required = false,
                                 default = nil)
  if valid_592083 != nil:
    section.add "X-Amz-Signature", valid_592083
  var valid_592084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592084 = validateParameter(valid_592084, JString, required = false,
                                 default = nil)
  if valid_592084 != nil:
    section.add "X-Amz-Content-Sha256", valid_592084
  var valid_592085 = header.getOrDefault("X-Amz-Date")
  valid_592085 = validateParameter(valid_592085, JString, required = false,
                                 default = nil)
  if valid_592085 != nil:
    section.add "X-Amz-Date", valid_592085
  var valid_592086 = header.getOrDefault("X-Amz-Credential")
  valid_592086 = validateParameter(valid_592086, JString, required = false,
                                 default = nil)
  if valid_592086 != nil:
    section.add "X-Amz-Credential", valid_592086
  var valid_592087 = header.getOrDefault("X-Amz-Security-Token")
  valid_592087 = validateParameter(valid_592087, JString, required = false,
                                 default = nil)
  if valid_592087 != nil:
    section.add "X-Amz-Security-Token", valid_592087
  var valid_592088 = header.getOrDefault("X-Amz-Algorithm")
  valid_592088 = validateParameter(valid_592088, JString, required = false,
                                 default = nil)
  if valid_592088 != nil:
    section.add "X-Amz-Algorithm", valid_592088
  var valid_592089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592089 = validateParameter(valid_592089, JString, required = false,
                                 default = nil)
  if valid_592089 != nil:
    section.add "X-Amz-SignedHeaders", valid_592089
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_592090 = formData.getOrDefault("MaxRecords")
  valid_592090 = validateParameter(valid_592090, JInt, required = false, default = nil)
  if valid_592090 != nil:
    section.add "MaxRecords", valid_592090
  var valid_592091 = formData.getOrDefault("Marker")
  valid_592091 = validateParameter(valid_592091, JString, required = false,
                                 default = nil)
  if valid_592091 != nil:
    section.add "Marker", valid_592091
  var valid_592092 = formData.getOrDefault("Duration")
  valid_592092 = validateParameter(valid_592092, JString, required = false,
                                 default = nil)
  if valid_592092 != nil:
    section.add "Duration", valid_592092
  var valid_592093 = formData.getOrDefault("OfferingType")
  valid_592093 = validateParameter(valid_592093, JString, required = false,
                                 default = nil)
  if valid_592093 != nil:
    section.add "OfferingType", valid_592093
  var valid_592094 = formData.getOrDefault("ProductDescription")
  valid_592094 = validateParameter(valid_592094, JString, required = false,
                                 default = nil)
  if valid_592094 != nil:
    section.add "ProductDescription", valid_592094
  var valid_592095 = formData.getOrDefault("ReservedCacheNodeId")
  valid_592095 = validateParameter(valid_592095, JString, required = false,
                                 default = nil)
  if valid_592095 != nil:
    section.add "ReservedCacheNodeId", valid_592095
  var valid_592096 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592096 = validateParameter(valid_592096, JString, required = false,
                                 default = nil)
  if valid_592096 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592096
  var valid_592097 = formData.getOrDefault("CacheNodeType")
  valid_592097 = validateParameter(valid_592097, JString, required = false,
                                 default = nil)
  if valid_592097 != nil:
    section.add "CacheNodeType", valid_592097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592098: Call_PostDescribeReservedCacheNodes_592078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_592098.validator(path, query, header, formData, body)
  let scheme = call_592098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592098.url(scheme.get, call_592098.host, call_592098.base,
                         call_592098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592098, url, valid)

proc call*(call_592099: Call_PostDescribeReservedCacheNodes_592078;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_592100 = newJObject()
  var formData_592101 = newJObject()
  add(formData_592101, "MaxRecords", newJInt(MaxRecords))
  add(formData_592101, "Marker", newJString(Marker))
  add(formData_592101, "Duration", newJString(Duration))
  add(formData_592101, "OfferingType", newJString(OfferingType))
  add(formData_592101, "ProductDescription", newJString(ProductDescription))
  add(query_592100, "Action", newJString(Action))
  add(query_592100, "Version", newJString(Version))
  add(formData_592101, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_592101, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_592101, "CacheNodeType", newJString(CacheNodeType))
  result = call_592099.call(nil, query_592100, nil, formData_592101, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_592078(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_592079, base: "/",
    url: url_PostDescribeReservedCacheNodes_592080,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_592055 = ref object of OpenApiRestCall_590364
proc url_GetDescribeReservedCacheNodes_592057(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodes_592056(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_592058 = query.getOrDefault("Marker")
  valid_592058 = validateParameter(valid_592058, JString, required = false,
                                 default = nil)
  if valid_592058 != nil:
    section.add "Marker", valid_592058
  var valid_592059 = query.getOrDefault("ProductDescription")
  valid_592059 = validateParameter(valid_592059, JString, required = false,
                                 default = nil)
  if valid_592059 != nil:
    section.add "ProductDescription", valid_592059
  var valid_592060 = query.getOrDefault("OfferingType")
  valid_592060 = validateParameter(valid_592060, JString, required = false,
                                 default = nil)
  if valid_592060 != nil:
    section.add "OfferingType", valid_592060
  var valid_592061 = query.getOrDefault("CacheNodeType")
  valid_592061 = validateParameter(valid_592061, JString, required = false,
                                 default = nil)
  if valid_592061 != nil:
    section.add "CacheNodeType", valid_592061
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592062 = query.getOrDefault("Action")
  valid_592062 = validateParameter(valid_592062, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_592062 != nil:
    section.add "Action", valid_592062
  var valid_592063 = query.getOrDefault("Duration")
  valid_592063 = validateParameter(valid_592063, JString, required = false,
                                 default = nil)
  if valid_592063 != nil:
    section.add "Duration", valid_592063
  var valid_592064 = query.getOrDefault("ReservedCacheNodeId")
  valid_592064 = validateParameter(valid_592064, JString, required = false,
                                 default = nil)
  if valid_592064 != nil:
    section.add "ReservedCacheNodeId", valid_592064
  var valid_592065 = query.getOrDefault("Version")
  valid_592065 = validateParameter(valid_592065, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592065 != nil:
    section.add "Version", valid_592065
  var valid_592066 = query.getOrDefault("MaxRecords")
  valid_592066 = validateParameter(valid_592066, JInt, required = false, default = nil)
  if valid_592066 != nil:
    section.add "MaxRecords", valid_592066
  var valid_592067 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592067 = validateParameter(valid_592067, JString, required = false,
                                 default = nil)
  if valid_592067 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592068 = header.getOrDefault("X-Amz-Signature")
  valid_592068 = validateParameter(valid_592068, JString, required = false,
                                 default = nil)
  if valid_592068 != nil:
    section.add "X-Amz-Signature", valid_592068
  var valid_592069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592069 = validateParameter(valid_592069, JString, required = false,
                                 default = nil)
  if valid_592069 != nil:
    section.add "X-Amz-Content-Sha256", valid_592069
  var valid_592070 = header.getOrDefault("X-Amz-Date")
  valid_592070 = validateParameter(valid_592070, JString, required = false,
                                 default = nil)
  if valid_592070 != nil:
    section.add "X-Amz-Date", valid_592070
  var valid_592071 = header.getOrDefault("X-Amz-Credential")
  valid_592071 = validateParameter(valid_592071, JString, required = false,
                                 default = nil)
  if valid_592071 != nil:
    section.add "X-Amz-Credential", valid_592071
  var valid_592072 = header.getOrDefault("X-Amz-Security-Token")
  valid_592072 = validateParameter(valid_592072, JString, required = false,
                                 default = nil)
  if valid_592072 != nil:
    section.add "X-Amz-Security-Token", valid_592072
  var valid_592073 = header.getOrDefault("X-Amz-Algorithm")
  valid_592073 = validateParameter(valid_592073, JString, required = false,
                                 default = nil)
  if valid_592073 != nil:
    section.add "X-Amz-Algorithm", valid_592073
  var valid_592074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592074 = validateParameter(valid_592074, JString, required = false,
                                 default = nil)
  if valid_592074 != nil:
    section.add "X-Amz-SignedHeaders", valid_592074
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592075: Call_GetDescribeReservedCacheNodes_592055; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_592075.validator(path, query, header, formData, body)
  let scheme = call_592075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592075.url(scheme.get, call_592075.host, call_592075.base,
                         call_592075.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592075, url, valid)

proc call*(call_592076: Call_GetDescribeReservedCacheNodes_592055;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_592077 = newJObject()
  add(query_592077, "Marker", newJString(Marker))
  add(query_592077, "ProductDescription", newJString(ProductDescription))
  add(query_592077, "OfferingType", newJString(OfferingType))
  add(query_592077, "CacheNodeType", newJString(CacheNodeType))
  add(query_592077, "Action", newJString(Action))
  add(query_592077, "Duration", newJString(Duration))
  add(query_592077, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_592077, "Version", newJString(Version))
  add(query_592077, "MaxRecords", newJInt(MaxRecords))
  add(query_592077, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_592076.call(nil, query_592077, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_592055(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_592056, base: "/",
    url: url_GetDescribeReservedCacheNodes_592057,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_592124 = ref object of OpenApiRestCall_590364
proc url_PostDescribeReservedCacheNodesOfferings_592126(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_592125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592127 = query.getOrDefault("Action")
  valid_592127 = validateParameter(valid_592127, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_592127 != nil:
    section.add "Action", valid_592127
  var valid_592128 = query.getOrDefault("Version")
  valid_592128 = validateParameter(valid_592128, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592128 != nil:
    section.add "Version", valid_592128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592129 = header.getOrDefault("X-Amz-Signature")
  valid_592129 = validateParameter(valid_592129, JString, required = false,
                                 default = nil)
  if valid_592129 != nil:
    section.add "X-Amz-Signature", valid_592129
  var valid_592130 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592130 = validateParameter(valid_592130, JString, required = false,
                                 default = nil)
  if valid_592130 != nil:
    section.add "X-Amz-Content-Sha256", valid_592130
  var valid_592131 = header.getOrDefault("X-Amz-Date")
  valid_592131 = validateParameter(valid_592131, JString, required = false,
                                 default = nil)
  if valid_592131 != nil:
    section.add "X-Amz-Date", valid_592131
  var valid_592132 = header.getOrDefault("X-Amz-Credential")
  valid_592132 = validateParameter(valid_592132, JString, required = false,
                                 default = nil)
  if valid_592132 != nil:
    section.add "X-Amz-Credential", valid_592132
  var valid_592133 = header.getOrDefault("X-Amz-Security-Token")
  valid_592133 = validateParameter(valid_592133, JString, required = false,
                                 default = nil)
  if valid_592133 != nil:
    section.add "X-Amz-Security-Token", valid_592133
  var valid_592134 = header.getOrDefault("X-Amz-Algorithm")
  valid_592134 = validateParameter(valid_592134, JString, required = false,
                                 default = nil)
  if valid_592134 != nil:
    section.add "X-Amz-Algorithm", valid_592134
  var valid_592135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592135 = validateParameter(valid_592135, JString, required = false,
                                 default = nil)
  if valid_592135 != nil:
    section.add "X-Amz-SignedHeaders", valid_592135
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_592136 = formData.getOrDefault("MaxRecords")
  valid_592136 = validateParameter(valid_592136, JInt, required = false, default = nil)
  if valid_592136 != nil:
    section.add "MaxRecords", valid_592136
  var valid_592137 = formData.getOrDefault("Marker")
  valid_592137 = validateParameter(valid_592137, JString, required = false,
                                 default = nil)
  if valid_592137 != nil:
    section.add "Marker", valid_592137
  var valid_592138 = formData.getOrDefault("Duration")
  valid_592138 = validateParameter(valid_592138, JString, required = false,
                                 default = nil)
  if valid_592138 != nil:
    section.add "Duration", valid_592138
  var valid_592139 = formData.getOrDefault("OfferingType")
  valid_592139 = validateParameter(valid_592139, JString, required = false,
                                 default = nil)
  if valid_592139 != nil:
    section.add "OfferingType", valid_592139
  var valid_592140 = formData.getOrDefault("ProductDescription")
  valid_592140 = validateParameter(valid_592140, JString, required = false,
                                 default = nil)
  if valid_592140 != nil:
    section.add "ProductDescription", valid_592140
  var valid_592141 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592141 = validateParameter(valid_592141, JString, required = false,
                                 default = nil)
  if valid_592141 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592141
  var valid_592142 = formData.getOrDefault("CacheNodeType")
  valid_592142 = validateParameter(valid_592142, JString, required = false,
                                 default = nil)
  if valid_592142 != nil:
    section.add "CacheNodeType", valid_592142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592143: Call_PostDescribeReservedCacheNodesOfferings_592124;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_592143.validator(path, query, header, formData, body)
  let scheme = call_592143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592143.url(scheme.get, call_592143.host, call_592143.base,
                         call_592143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592143, url, valid)

proc call*(call_592144: Call_PostDescribeReservedCacheNodesOfferings_592124;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_592145 = newJObject()
  var formData_592146 = newJObject()
  add(formData_592146, "MaxRecords", newJInt(MaxRecords))
  add(formData_592146, "Marker", newJString(Marker))
  add(formData_592146, "Duration", newJString(Duration))
  add(formData_592146, "OfferingType", newJString(OfferingType))
  add(formData_592146, "ProductDescription", newJString(ProductDescription))
  add(query_592145, "Action", newJString(Action))
  add(query_592145, "Version", newJString(Version))
  add(formData_592146, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_592146, "CacheNodeType", newJString(CacheNodeType))
  result = call_592144.call(nil, query_592145, nil, formData_592146, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_592124(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_592125, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_592126,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_592102 = ref object of OpenApiRestCall_590364
proc url_GetDescribeReservedCacheNodesOfferings_592104(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_592103(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_592105 = query.getOrDefault("Marker")
  valid_592105 = validateParameter(valid_592105, JString, required = false,
                                 default = nil)
  if valid_592105 != nil:
    section.add "Marker", valid_592105
  var valid_592106 = query.getOrDefault("ProductDescription")
  valid_592106 = validateParameter(valid_592106, JString, required = false,
                                 default = nil)
  if valid_592106 != nil:
    section.add "ProductDescription", valid_592106
  var valid_592107 = query.getOrDefault("OfferingType")
  valid_592107 = validateParameter(valid_592107, JString, required = false,
                                 default = nil)
  if valid_592107 != nil:
    section.add "OfferingType", valid_592107
  var valid_592108 = query.getOrDefault("CacheNodeType")
  valid_592108 = validateParameter(valid_592108, JString, required = false,
                                 default = nil)
  if valid_592108 != nil:
    section.add "CacheNodeType", valid_592108
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592109 = query.getOrDefault("Action")
  valid_592109 = validateParameter(valid_592109, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_592109 != nil:
    section.add "Action", valid_592109
  var valid_592110 = query.getOrDefault("Duration")
  valid_592110 = validateParameter(valid_592110, JString, required = false,
                                 default = nil)
  if valid_592110 != nil:
    section.add "Duration", valid_592110
  var valid_592111 = query.getOrDefault("Version")
  valid_592111 = validateParameter(valid_592111, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592111 != nil:
    section.add "Version", valid_592111
  var valid_592112 = query.getOrDefault("MaxRecords")
  valid_592112 = validateParameter(valid_592112, JInt, required = false, default = nil)
  if valid_592112 != nil:
    section.add "MaxRecords", valid_592112
  var valid_592113 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592113 = validateParameter(valid_592113, JString, required = false,
                                 default = nil)
  if valid_592113 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592114 = header.getOrDefault("X-Amz-Signature")
  valid_592114 = validateParameter(valid_592114, JString, required = false,
                                 default = nil)
  if valid_592114 != nil:
    section.add "X-Amz-Signature", valid_592114
  var valid_592115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592115 = validateParameter(valid_592115, JString, required = false,
                                 default = nil)
  if valid_592115 != nil:
    section.add "X-Amz-Content-Sha256", valid_592115
  var valid_592116 = header.getOrDefault("X-Amz-Date")
  valid_592116 = validateParameter(valid_592116, JString, required = false,
                                 default = nil)
  if valid_592116 != nil:
    section.add "X-Amz-Date", valid_592116
  var valid_592117 = header.getOrDefault("X-Amz-Credential")
  valid_592117 = validateParameter(valid_592117, JString, required = false,
                                 default = nil)
  if valid_592117 != nil:
    section.add "X-Amz-Credential", valid_592117
  var valid_592118 = header.getOrDefault("X-Amz-Security-Token")
  valid_592118 = validateParameter(valid_592118, JString, required = false,
                                 default = nil)
  if valid_592118 != nil:
    section.add "X-Amz-Security-Token", valid_592118
  var valid_592119 = header.getOrDefault("X-Amz-Algorithm")
  valid_592119 = validateParameter(valid_592119, JString, required = false,
                                 default = nil)
  if valid_592119 != nil:
    section.add "X-Amz-Algorithm", valid_592119
  var valid_592120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592120 = validateParameter(valid_592120, JString, required = false,
                                 default = nil)
  if valid_592120 != nil:
    section.add "X-Amz-SignedHeaders", valid_592120
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592121: Call_GetDescribeReservedCacheNodesOfferings_592102;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_592121.validator(path, query, header, formData, body)
  let scheme = call_592121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592121.url(scheme.get, call_592121.host, call_592121.base,
                         call_592121.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592121, url, valid)

proc call*(call_592122: Call_GetDescribeReservedCacheNodesOfferings_592102;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_592123 = newJObject()
  add(query_592123, "Marker", newJString(Marker))
  add(query_592123, "ProductDescription", newJString(ProductDescription))
  add(query_592123, "OfferingType", newJString(OfferingType))
  add(query_592123, "CacheNodeType", newJString(CacheNodeType))
  add(query_592123, "Action", newJString(Action))
  add(query_592123, "Duration", newJString(Duration))
  add(query_592123, "Version", newJString(Version))
  add(query_592123, "MaxRecords", newJInt(MaxRecords))
  add(query_592123, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_592122.call(nil, query_592123, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_592102(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_592103, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_592104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_592166 = ref object of OpenApiRestCall_590364
proc url_PostDescribeServiceUpdates_592168(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeServiceUpdates_592167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592169 = query.getOrDefault("Action")
  valid_592169 = validateParameter(valid_592169, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_592169 != nil:
    section.add "Action", valid_592169
  var valid_592170 = query.getOrDefault("Version")
  valid_592170 = validateParameter(valid_592170, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592170 != nil:
    section.add "Version", valid_592170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592171 = header.getOrDefault("X-Amz-Signature")
  valid_592171 = validateParameter(valid_592171, JString, required = false,
                                 default = nil)
  if valid_592171 != nil:
    section.add "X-Amz-Signature", valid_592171
  var valid_592172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592172 = validateParameter(valid_592172, JString, required = false,
                                 default = nil)
  if valid_592172 != nil:
    section.add "X-Amz-Content-Sha256", valid_592172
  var valid_592173 = header.getOrDefault("X-Amz-Date")
  valid_592173 = validateParameter(valid_592173, JString, required = false,
                                 default = nil)
  if valid_592173 != nil:
    section.add "X-Amz-Date", valid_592173
  var valid_592174 = header.getOrDefault("X-Amz-Credential")
  valid_592174 = validateParameter(valid_592174, JString, required = false,
                                 default = nil)
  if valid_592174 != nil:
    section.add "X-Amz-Credential", valid_592174
  var valid_592175 = header.getOrDefault("X-Amz-Security-Token")
  valid_592175 = validateParameter(valid_592175, JString, required = false,
                                 default = nil)
  if valid_592175 != nil:
    section.add "X-Amz-Security-Token", valid_592175
  var valid_592176 = header.getOrDefault("X-Amz-Algorithm")
  valid_592176 = validateParameter(valid_592176, JString, required = false,
                                 default = nil)
  if valid_592176 != nil:
    section.add "X-Amz-Algorithm", valid_592176
  var valid_592177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592177 = validateParameter(valid_592177, JString, required = false,
                                 default = nil)
  if valid_592177 != nil:
    section.add "X-Amz-SignedHeaders", valid_592177
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_592178 = formData.getOrDefault("MaxRecords")
  valid_592178 = validateParameter(valid_592178, JInt, required = false, default = nil)
  if valid_592178 != nil:
    section.add "MaxRecords", valid_592178
  var valid_592179 = formData.getOrDefault("ServiceUpdateName")
  valid_592179 = validateParameter(valid_592179, JString, required = false,
                                 default = nil)
  if valid_592179 != nil:
    section.add "ServiceUpdateName", valid_592179
  var valid_592180 = formData.getOrDefault("Marker")
  valid_592180 = validateParameter(valid_592180, JString, required = false,
                                 default = nil)
  if valid_592180 != nil:
    section.add "Marker", valid_592180
  var valid_592181 = formData.getOrDefault("ServiceUpdateStatus")
  valid_592181 = validateParameter(valid_592181, JArray, required = false,
                                 default = nil)
  if valid_592181 != nil:
    section.add "ServiceUpdateStatus", valid_592181
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592182: Call_PostDescribeServiceUpdates_592166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_592182.validator(path, query, header, formData, body)
  let scheme = call_592182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592182.url(scheme.get, call_592182.host, call_592182.base,
                         call_592182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592182, url, valid)

proc call*(call_592183: Call_PostDescribeServiceUpdates_592166;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_592184 = newJObject()
  var formData_592185 = newJObject()
  add(formData_592185, "MaxRecords", newJInt(MaxRecords))
  add(formData_592185, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_592185, "Marker", newJString(Marker))
  add(query_592184, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_592185.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_592184, "Version", newJString(Version))
  result = call_592183.call(nil, query_592184, nil, formData_592185, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_592166(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_592167, base: "/",
    url: url_PostDescribeServiceUpdates_592168,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_592147 = ref object of OpenApiRestCall_590364
proc url_GetDescribeServiceUpdates_592149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeServiceUpdates_592148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_592150 = query.getOrDefault("Marker")
  valid_592150 = validateParameter(valid_592150, JString, required = false,
                                 default = nil)
  if valid_592150 != nil:
    section.add "Marker", valid_592150
  var valid_592151 = query.getOrDefault("ServiceUpdateName")
  valid_592151 = validateParameter(valid_592151, JString, required = false,
                                 default = nil)
  if valid_592151 != nil:
    section.add "ServiceUpdateName", valid_592151
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592152 = query.getOrDefault("Action")
  valid_592152 = validateParameter(valid_592152, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_592152 != nil:
    section.add "Action", valid_592152
  var valid_592153 = query.getOrDefault("ServiceUpdateStatus")
  valid_592153 = validateParameter(valid_592153, JArray, required = false,
                                 default = nil)
  if valid_592153 != nil:
    section.add "ServiceUpdateStatus", valid_592153
  var valid_592154 = query.getOrDefault("Version")
  valid_592154 = validateParameter(valid_592154, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592154 != nil:
    section.add "Version", valid_592154
  var valid_592155 = query.getOrDefault("MaxRecords")
  valid_592155 = validateParameter(valid_592155, JInt, required = false, default = nil)
  if valid_592155 != nil:
    section.add "MaxRecords", valid_592155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592156 = header.getOrDefault("X-Amz-Signature")
  valid_592156 = validateParameter(valid_592156, JString, required = false,
                                 default = nil)
  if valid_592156 != nil:
    section.add "X-Amz-Signature", valid_592156
  var valid_592157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592157 = validateParameter(valid_592157, JString, required = false,
                                 default = nil)
  if valid_592157 != nil:
    section.add "X-Amz-Content-Sha256", valid_592157
  var valid_592158 = header.getOrDefault("X-Amz-Date")
  valid_592158 = validateParameter(valid_592158, JString, required = false,
                                 default = nil)
  if valid_592158 != nil:
    section.add "X-Amz-Date", valid_592158
  var valid_592159 = header.getOrDefault("X-Amz-Credential")
  valid_592159 = validateParameter(valid_592159, JString, required = false,
                                 default = nil)
  if valid_592159 != nil:
    section.add "X-Amz-Credential", valid_592159
  var valid_592160 = header.getOrDefault("X-Amz-Security-Token")
  valid_592160 = validateParameter(valid_592160, JString, required = false,
                                 default = nil)
  if valid_592160 != nil:
    section.add "X-Amz-Security-Token", valid_592160
  var valid_592161 = header.getOrDefault("X-Amz-Algorithm")
  valid_592161 = validateParameter(valid_592161, JString, required = false,
                                 default = nil)
  if valid_592161 != nil:
    section.add "X-Amz-Algorithm", valid_592161
  var valid_592162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592162 = validateParameter(valid_592162, JString, required = false,
                                 default = nil)
  if valid_592162 != nil:
    section.add "X-Amz-SignedHeaders", valid_592162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592163: Call_GetDescribeServiceUpdates_592147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_592163.validator(path, query, header, formData, body)
  let scheme = call_592163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592163.url(scheme.get, call_592163.host, call_592163.base,
                         call_592163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592163, url, valid)

proc call*(call_592164: Call_GetDescribeServiceUpdates_592147; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_592165 = newJObject()
  add(query_592165, "Marker", newJString(Marker))
  add(query_592165, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_592165, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_592165.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_592165, "Version", newJString(Version))
  add(query_592165, "MaxRecords", newJInt(MaxRecords))
  result = call_592164.call(nil, query_592165, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_592147(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_592148, base: "/",
    url: url_GetDescribeServiceUpdates_592149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_592208 = ref object of OpenApiRestCall_590364
proc url_PostDescribeSnapshots_592210(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSnapshots_592209(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592211 = query.getOrDefault("Action")
  valid_592211 = validateParameter(valid_592211, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_592211 != nil:
    section.add "Action", valid_592211
  var valid_592212 = query.getOrDefault("Version")
  valid_592212 = validateParameter(valid_592212, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592212 != nil:
    section.add "Version", valid_592212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592213 = header.getOrDefault("X-Amz-Signature")
  valid_592213 = validateParameter(valid_592213, JString, required = false,
                                 default = nil)
  if valid_592213 != nil:
    section.add "X-Amz-Signature", valid_592213
  var valid_592214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592214 = validateParameter(valid_592214, JString, required = false,
                                 default = nil)
  if valid_592214 != nil:
    section.add "X-Amz-Content-Sha256", valid_592214
  var valid_592215 = header.getOrDefault("X-Amz-Date")
  valid_592215 = validateParameter(valid_592215, JString, required = false,
                                 default = nil)
  if valid_592215 != nil:
    section.add "X-Amz-Date", valid_592215
  var valid_592216 = header.getOrDefault("X-Amz-Credential")
  valid_592216 = validateParameter(valid_592216, JString, required = false,
                                 default = nil)
  if valid_592216 != nil:
    section.add "X-Amz-Credential", valid_592216
  var valid_592217 = header.getOrDefault("X-Amz-Security-Token")
  valid_592217 = validateParameter(valid_592217, JString, required = false,
                                 default = nil)
  if valid_592217 != nil:
    section.add "X-Amz-Security-Token", valid_592217
  var valid_592218 = header.getOrDefault("X-Amz-Algorithm")
  valid_592218 = validateParameter(valid_592218, JString, required = false,
                                 default = nil)
  if valid_592218 != nil:
    section.add "X-Amz-Algorithm", valid_592218
  var valid_592219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592219 = validateParameter(valid_592219, JString, required = false,
                                 default = nil)
  if valid_592219 != nil:
    section.add "X-Amz-SignedHeaders", valid_592219
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_592220 = formData.getOrDefault("CacheClusterId")
  valid_592220 = validateParameter(valid_592220, JString, required = false,
                                 default = nil)
  if valid_592220 != nil:
    section.add "CacheClusterId", valid_592220
  var valid_592221 = formData.getOrDefault("MaxRecords")
  valid_592221 = validateParameter(valid_592221, JInt, required = false, default = nil)
  if valid_592221 != nil:
    section.add "MaxRecords", valid_592221
  var valid_592222 = formData.getOrDefault("Marker")
  valid_592222 = validateParameter(valid_592222, JString, required = false,
                                 default = nil)
  if valid_592222 != nil:
    section.add "Marker", valid_592222
  var valid_592223 = formData.getOrDefault("SnapshotName")
  valid_592223 = validateParameter(valid_592223, JString, required = false,
                                 default = nil)
  if valid_592223 != nil:
    section.add "SnapshotName", valid_592223
  var valid_592224 = formData.getOrDefault("SnapshotSource")
  valid_592224 = validateParameter(valid_592224, JString, required = false,
                                 default = nil)
  if valid_592224 != nil:
    section.add "SnapshotSource", valid_592224
  var valid_592225 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_592225 = validateParameter(valid_592225, JBool, required = false, default = nil)
  if valid_592225 != nil:
    section.add "ShowNodeGroupConfig", valid_592225
  var valid_592226 = formData.getOrDefault("ReplicationGroupId")
  valid_592226 = validateParameter(valid_592226, JString, required = false,
                                 default = nil)
  if valid_592226 != nil:
    section.add "ReplicationGroupId", valid_592226
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592227: Call_PostDescribeSnapshots_592208; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592227.validator(path, query, header, formData, body)
  let scheme = call_592227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592227.url(scheme.get, call_592227.host, call_592227.base,
                         call_592227.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592227, url, valid)

proc call*(call_592228: Call_PostDescribeSnapshots_592208;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_592229 = newJObject()
  var formData_592230 = newJObject()
  add(formData_592230, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592230, "MaxRecords", newJInt(MaxRecords))
  add(formData_592230, "Marker", newJString(Marker))
  add(formData_592230, "SnapshotName", newJString(SnapshotName))
  add(formData_592230, "SnapshotSource", newJString(SnapshotSource))
  add(query_592229, "Action", newJString(Action))
  add(formData_592230, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_592229, "Version", newJString(Version))
  add(formData_592230, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592228.call(nil, query_592229, nil, formData_592230, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_592208(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_592209, base: "/",
    url: url_PostDescribeSnapshots_592210, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_592186 = ref object of OpenApiRestCall_590364
proc url_GetDescribeSnapshots_592188(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSnapshots_592187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_592189 = query.getOrDefault("Marker")
  valid_592189 = validateParameter(valid_592189, JString, required = false,
                                 default = nil)
  if valid_592189 != nil:
    section.add "Marker", valid_592189
  var valid_592190 = query.getOrDefault("CacheClusterId")
  valid_592190 = validateParameter(valid_592190, JString, required = false,
                                 default = nil)
  if valid_592190 != nil:
    section.add "CacheClusterId", valid_592190
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592191 = query.getOrDefault("Action")
  valid_592191 = validateParameter(valid_592191, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_592191 != nil:
    section.add "Action", valid_592191
  var valid_592192 = query.getOrDefault("ReplicationGroupId")
  valid_592192 = validateParameter(valid_592192, JString, required = false,
                                 default = nil)
  if valid_592192 != nil:
    section.add "ReplicationGroupId", valid_592192
  var valid_592193 = query.getOrDefault("Version")
  valid_592193 = validateParameter(valid_592193, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592193 != nil:
    section.add "Version", valid_592193
  var valid_592194 = query.getOrDefault("SnapshotName")
  valid_592194 = validateParameter(valid_592194, JString, required = false,
                                 default = nil)
  if valid_592194 != nil:
    section.add "SnapshotName", valid_592194
  var valid_592195 = query.getOrDefault("SnapshotSource")
  valid_592195 = validateParameter(valid_592195, JString, required = false,
                                 default = nil)
  if valid_592195 != nil:
    section.add "SnapshotSource", valid_592195
  var valid_592196 = query.getOrDefault("MaxRecords")
  valid_592196 = validateParameter(valid_592196, JInt, required = false, default = nil)
  if valid_592196 != nil:
    section.add "MaxRecords", valid_592196
  var valid_592197 = query.getOrDefault("ShowNodeGroupConfig")
  valid_592197 = validateParameter(valid_592197, JBool, required = false, default = nil)
  if valid_592197 != nil:
    section.add "ShowNodeGroupConfig", valid_592197
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592198 = header.getOrDefault("X-Amz-Signature")
  valid_592198 = validateParameter(valid_592198, JString, required = false,
                                 default = nil)
  if valid_592198 != nil:
    section.add "X-Amz-Signature", valid_592198
  var valid_592199 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592199 = validateParameter(valid_592199, JString, required = false,
                                 default = nil)
  if valid_592199 != nil:
    section.add "X-Amz-Content-Sha256", valid_592199
  var valid_592200 = header.getOrDefault("X-Amz-Date")
  valid_592200 = validateParameter(valid_592200, JString, required = false,
                                 default = nil)
  if valid_592200 != nil:
    section.add "X-Amz-Date", valid_592200
  var valid_592201 = header.getOrDefault("X-Amz-Credential")
  valid_592201 = validateParameter(valid_592201, JString, required = false,
                                 default = nil)
  if valid_592201 != nil:
    section.add "X-Amz-Credential", valid_592201
  var valid_592202 = header.getOrDefault("X-Amz-Security-Token")
  valid_592202 = validateParameter(valid_592202, JString, required = false,
                                 default = nil)
  if valid_592202 != nil:
    section.add "X-Amz-Security-Token", valid_592202
  var valid_592203 = header.getOrDefault("X-Amz-Algorithm")
  valid_592203 = validateParameter(valid_592203, JString, required = false,
                                 default = nil)
  if valid_592203 != nil:
    section.add "X-Amz-Algorithm", valid_592203
  var valid_592204 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592204 = validateParameter(valid_592204, JString, required = false,
                                 default = nil)
  if valid_592204 != nil:
    section.add "X-Amz-SignedHeaders", valid_592204
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592205: Call_GetDescribeSnapshots_592186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592205.validator(path, query, header, formData, body)
  let scheme = call_592205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592205.url(scheme.get, call_592205.host, call_592205.base,
                         call_592205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592205, url, valid)

proc call*(call_592206: Call_GetDescribeSnapshots_592186; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_592207 = newJObject()
  add(query_592207, "Marker", newJString(Marker))
  add(query_592207, "CacheClusterId", newJString(CacheClusterId))
  add(query_592207, "Action", newJString(Action))
  add(query_592207, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592207, "Version", newJString(Version))
  add(query_592207, "SnapshotName", newJString(SnapshotName))
  add(query_592207, "SnapshotSource", newJString(SnapshotSource))
  add(query_592207, "MaxRecords", newJInt(MaxRecords))
  add(query_592207, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_592206.call(nil, query_592207, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_592186(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_592187, base: "/",
    url: url_GetDescribeSnapshots_592188, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_592257 = ref object of OpenApiRestCall_590364
proc url_PostDescribeUpdateActions_592259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeUpdateActions_592258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592260 = query.getOrDefault("Action")
  valid_592260 = validateParameter(valid_592260, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_592260 != nil:
    section.add "Action", valid_592260
  var valid_592261 = query.getOrDefault("Version")
  valid_592261 = validateParameter(valid_592261, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592261 != nil:
    section.add "Version", valid_592261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592262 = header.getOrDefault("X-Amz-Signature")
  valid_592262 = validateParameter(valid_592262, JString, required = false,
                                 default = nil)
  if valid_592262 != nil:
    section.add "X-Amz-Signature", valid_592262
  var valid_592263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592263 = validateParameter(valid_592263, JString, required = false,
                                 default = nil)
  if valid_592263 != nil:
    section.add "X-Amz-Content-Sha256", valid_592263
  var valid_592264 = header.getOrDefault("X-Amz-Date")
  valid_592264 = validateParameter(valid_592264, JString, required = false,
                                 default = nil)
  if valid_592264 != nil:
    section.add "X-Amz-Date", valid_592264
  var valid_592265 = header.getOrDefault("X-Amz-Credential")
  valid_592265 = validateParameter(valid_592265, JString, required = false,
                                 default = nil)
  if valid_592265 != nil:
    section.add "X-Amz-Credential", valid_592265
  var valid_592266 = header.getOrDefault("X-Amz-Security-Token")
  valid_592266 = validateParameter(valid_592266, JString, required = false,
                                 default = nil)
  if valid_592266 != nil:
    section.add "X-Amz-Security-Token", valid_592266
  var valid_592267 = header.getOrDefault("X-Amz-Algorithm")
  valid_592267 = validateParameter(valid_592267, JString, required = false,
                                 default = nil)
  if valid_592267 != nil:
    section.add "X-Amz-Algorithm", valid_592267
  var valid_592268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592268 = validateParameter(valid_592268, JString, required = false,
                                 default = nil)
  if valid_592268 != nil:
    section.add "X-Amz-SignedHeaders", valid_592268
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_592269 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_592269 = validateParameter(valid_592269, JString, required = false,
                                 default = nil)
  if valid_592269 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_592269
  var valid_592270 = formData.getOrDefault("MaxRecords")
  valid_592270 = validateParameter(valid_592270, JInt, required = false, default = nil)
  if valid_592270 != nil:
    section.add "MaxRecords", valid_592270
  var valid_592271 = formData.getOrDefault("ServiceUpdateName")
  valid_592271 = validateParameter(valid_592271, JString, required = false,
                                 default = nil)
  if valid_592271 != nil:
    section.add "ServiceUpdateName", valid_592271
  var valid_592272 = formData.getOrDefault("ReplicationGroupIds")
  valid_592272 = validateParameter(valid_592272, JArray, required = false,
                                 default = nil)
  if valid_592272 != nil:
    section.add "ReplicationGroupIds", valid_592272
  var valid_592273 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_592273 = validateParameter(valid_592273, JString, required = false,
                                 default = nil)
  if valid_592273 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_592273
  var valid_592274 = formData.getOrDefault("Marker")
  valid_592274 = validateParameter(valid_592274, JString, required = false,
                                 default = nil)
  if valid_592274 != nil:
    section.add "Marker", valid_592274
  var valid_592275 = formData.getOrDefault("CacheClusterIds")
  valid_592275 = validateParameter(valid_592275, JArray, required = false,
                                 default = nil)
  if valid_592275 != nil:
    section.add "CacheClusterIds", valid_592275
  var valid_592276 = formData.getOrDefault("Engine")
  valid_592276 = validateParameter(valid_592276, JString, required = false,
                                 default = nil)
  if valid_592276 != nil:
    section.add "Engine", valid_592276
  var valid_592277 = formData.getOrDefault("UpdateActionStatus")
  valid_592277 = validateParameter(valid_592277, JArray, required = false,
                                 default = nil)
  if valid_592277 != nil:
    section.add "UpdateActionStatus", valid_592277
  var valid_592278 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_592278 = validateParameter(valid_592278, JBool, required = false, default = nil)
  if valid_592278 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_592278
  var valid_592279 = formData.getOrDefault("ServiceUpdateStatus")
  valid_592279 = validateParameter(valid_592279, JArray, required = false,
                                 default = nil)
  if valid_592279 != nil:
    section.add "ServiceUpdateStatus", valid_592279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592280: Call_PostDescribeUpdateActions_592257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_592280.validator(path, query, header, formData, body)
  let scheme = call_592280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592280.url(scheme.get, call_592280.host, call_592280.base,
                         call_592280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592280, url, valid)

proc call*(call_592281: Call_PostDescribeUpdateActions_592257;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          CacheClusterIds: JsonNode = nil; Engine: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_592282 = newJObject()
  var formData_592283 = newJObject()
  add(formData_592283, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_592283, "MaxRecords", newJInt(MaxRecords))
  add(formData_592283, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_592283.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_592283, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_592283, "Marker", newJString(Marker))
  if CacheClusterIds != nil:
    formData_592283.add "CacheClusterIds", CacheClusterIds
  add(formData_592283, "Engine", newJString(Engine))
  if UpdateActionStatus != nil:
    formData_592283.add "UpdateActionStatus", UpdateActionStatus
  add(formData_592283, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_592282, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_592283.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_592282, "Version", newJString(Version))
  result = call_592281.call(nil, query_592282, nil, formData_592283, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_592257(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_592258, base: "/",
    url: url_PostDescribeUpdateActions_592259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_592231 = ref object of OpenApiRestCall_590364
proc url_GetDescribeUpdateActions_592233(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeUpdateActions_592232(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_592234 = query.getOrDefault("Marker")
  valid_592234 = validateParameter(valid_592234, JString, required = false,
                                 default = nil)
  if valid_592234 != nil:
    section.add "Marker", valid_592234
  var valid_592235 = query.getOrDefault("ServiceUpdateName")
  valid_592235 = validateParameter(valid_592235, JString, required = false,
                                 default = nil)
  if valid_592235 != nil:
    section.add "ServiceUpdateName", valid_592235
  var valid_592236 = query.getOrDefault("Engine")
  valid_592236 = validateParameter(valid_592236, JString, required = false,
                                 default = nil)
  if valid_592236 != nil:
    section.add "Engine", valid_592236
  var valid_592237 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_592237 = validateParameter(valid_592237, JString, required = false,
                                 default = nil)
  if valid_592237 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_592237
  var valid_592238 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_592238 = validateParameter(valid_592238, JBool, required = false, default = nil)
  if valid_592238 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_592238
  var valid_592239 = query.getOrDefault("UpdateActionStatus")
  valid_592239 = validateParameter(valid_592239, JArray, required = false,
                                 default = nil)
  if valid_592239 != nil:
    section.add "UpdateActionStatus", valid_592239
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592240 = query.getOrDefault("Action")
  valid_592240 = validateParameter(valid_592240, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_592240 != nil:
    section.add "Action", valid_592240
  var valid_592241 = query.getOrDefault("CacheClusterIds")
  valid_592241 = validateParameter(valid_592241, JArray, required = false,
                                 default = nil)
  if valid_592241 != nil:
    section.add "CacheClusterIds", valid_592241
  var valid_592242 = query.getOrDefault("ServiceUpdateStatus")
  valid_592242 = validateParameter(valid_592242, JArray, required = false,
                                 default = nil)
  if valid_592242 != nil:
    section.add "ServiceUpdateStatus", valid_592242
  var valid_592243 = query.getOrDefault("ReplicationGroupIds")
  valid_592243 = validateParameter(valid_592243, JArray, required = false,
                                 default = nil)
  if valid_592243 != nil:
    section.add "ReplicationGroupIds", valid_592243
  var valid_592244 = query.getOrDefault("Version")
  valid_592244 = validateParameter(valid_592244, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592244 != nil:
    section.add "Version", valid_592244
  var valid_592245 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_592245 = validateParameter(valid_592245, JString, required = false,
                                 default = nil)
  if valid_592245 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_592245
  var valid_592246 = query.getOrDefault("MaxRecords")
  valid_592246 = validateParameter(valid_592246, JInt, required = false, default = nil)
  if valid_592246 != nil:
    section.add "MaxRecords", valid_592246
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592247 = header.getOrDefault("X-Amz-Signature")
  valid_592247 = validateParameter(valid_592247, JString, required = false,
                                 default = nil)
  if valid_592247 != nil:
    section.add "X-Amz-Signature", valid_592247
  var valid_592248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592248 = validateParameter(valid_592248, JString, required = false,
                                 default = nil)
  if valid_592248 != nil:
    section.add "X-Amz-Content-Sha256", valid_592248
  var valid_592249 = header.getOrDefault("X-Amz-Date")
  valid_592249 = validateParameter(valid_592249, JString, required = false,
                                 default = nil)
  if valid_592249 != nil:
    section.add "X-Amz-Date", valid_592249
  var valid_592250 = header.getOrDefault("X-Amz-Credential")
  valid_592250 = validateParameter(valid_592250, JString, required = false,
                                 default = nil)
  if valid_592250 != nil:
    section.add "X-Amz-Credential", valid_592250
  var valid_592251 = header.getOrDefault("X-Amz-Security-Token")
  valid_592251 = validateParameter(valid_592251, JString, required = false,
                                 default = nil)
  if valid_592251 != nil:
    section.add "X-Amz-Security-Token", valid_592251
  var valid_592252 = header.getOrDefault("X-Amz-Algorithm")
  valid_592252 = validateParameter(valid_592252, JString, required = false,
                                 default = nil)
  if valid_592252 != nil:
    section.add "X-Amz-Algorithm", valid_592252
  var valid_592253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592253 = validateParameter(valid_592253, JString, required = false,
                                 default = nil)
  if valid_592253 != nil:
    section.add "X-Amz-SignedHeaders", valid_592253
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592254: Call_GetDescribeUpdateActions_592231; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_592254.validator(path, query, header, formData, body)
  let scheme = call_592254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592254.url(scheme.get, call_592254.host, call_592254.base,
                         call_592254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592254, url, valid)

proc call*(call_592255: Call_GetDescribeUpdateActions_592231; Marker: string = "";
          ServiceUpdateName: string = ""; Engine: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions"; CacheClusterIds: JsonNode = nil;
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_592256 = newJObject()
  add(query_592256, "Marker", newJString(Marker))
  add(query_592256, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_592256, "Engine", newJString(Engine))
  add(query_592256, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_592256, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_592256.add "UpdateActionStatus", UpdateActionStatus
  add(query_592256, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_592256.add "CacheClusterIds", CacheClusterIds
  if ServiceUpdateStatus != nil:
    query_592256.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_592256.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_592256, "Version", newJString(Version))
  add(query_592256, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_592256, "MaxRecords", newJInt(MaxRecords))
  result = call_592255.call(nil, query_592256, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_592231(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_592232, base: "/",
    url: url_GetDescribeUpdateActions_592233, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_592303 = ref object of OpenApiRestCall_590364
proc url_PostIncreaseReplicaCount_592305(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostIncreaseReplicaCount_592304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592306 = query.getOrDefault("Action")
  valid_592306 = validateParameter(valid_592306, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_592306 != nil:
    section.add "Action", valid_592306
  var valid_592307 = query.getOrDefault("Version")
  valid_592307 = validateParameter(valid_592307, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592307 != nil:
    section.add "Version", valid_592307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592308 = header.getOrDefault("X-Amz-Signature")
  valid_592308 = validateParameter(valid_592308, JString, required = false,
                                 default = nil)
  if valid_592308 != nil:
    section.add "X-Amz-Signature", valid_592308
  var valid_592309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592309 = validateParameter(valid_592309, JString, required = false,
                                 default = nil)
  if valid_592309 != nil:
    section.add "X-Amz-Content-Sha256", valid_592309
  var valid_592310 = header.getOrDefault("X-Amz-Date")
  valid_592310 = validateParameter(valid_592310, JString, required = false,
                                 default = nil)
  if valid_592310 != nil:
    section.add "X-Amz-Date", valid_592310
  var valid_592311 = header.getOrDefault("X-Amz-Credential")
  valid_592311 = validateParameter(valid_592311, JString, required = false,
                                 default = nil)
  if valid_592311 != nil:
    section.add "X-Amz-Credential", valid_592311
  var valid_592312 = header.getOrDefault("X-Amz-Security-Token")
  valid_592312 = validateParameter(valid_592312, JString, required = false,
                                 default = nil)
  if valid_592312 != nil:
    section.add "X-Amz-Security-Token", valid_592312
  var valid_592313 = header.getOrDefault("X-Amz-Algorithm")
  valid_592313 = validateParameter(valid_592313, JString, required = false,
                                 default = nil)
  if valid_592313 != nil:
    section.add "X-Amz-Algorithm", valid_592313
  var valid_592314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592314 = validateParameter(valid_592314, JString, required = false,
                                 default = nil)
  if valid_592314 != nil:
    section.add "X-Amz-SignedHeaders", valid_592314
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_592315 = formData.getOrDefault("ReplicaConfiguration")
  valid_592315 = validateParameter(valid_592315, JArray, required = false,
                                 default = nil)
  if valid_592315 != nil:
    section.add "ReplicaConfiguration", valid_592315
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_592316 = formData.getOrDefault("ApplyImmediately")
  valid_592316 = validateParameter(valid_592316, JBool, required = true, default = nil)
  if valid_592316 != nil:
    section.add "ApplyImmediately", valid_592316
  var valid_592317 = formData.getOrDefault("NewReplicaCount")
  valid_592317 = validateParameter(valid_592317, JInt, required = false, default = nil)
  if valid_592317 != nil:
    section.add "NewReplicaCount", valid_592317
  var valid_592318 = formData.getOrDefault("ReplicationGroupId")
  valid_592318 = validateParameter(valid_592318, JString, required = true,
                                 default = nil)
  if valid_592318 != nil:
    section.add "ReplicationGroupId", valid_592318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592319: Call_PostIncreaseReplicaCount_592303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_592319.validator(path, query, header, formData, body)
  let scheme = call_592319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592319.url(scheme.get, call_592319.host, call_592319.base,
                         call_592319.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592319, url, valid)

proc call*(call_592320: Call_PostIncreaseReplicaCount_592303;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_592321 = newJObject()
  var formData_592322 = newJObject()
  if ReplicaConfiguration != nil:
    formData_592322.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_592322, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592321, "Action", newJString(Action))
  add(formData_592322, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_592321, "Version", newJString(Version))
  add(formData_592322, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592320.call(nil, query_592321, nil, formData_592322, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_592303(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_592304, base: "/",
    url: url_PostIncreaseReplicaCount_592305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_592284 = ref object of OpenApiRestCall_590364
proc url_GetIncreaseReplicaCount_592286(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetIncreaseReplicaCount_592285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_592287 = query.getOrDefault("NewReplicaCount")
  valid_592287 = validateParameter(valid_592287, JInt, required = false, default = nil)
  if valid_592287 != nil:
    section.add "NewReplicaCount", valid_592287
  var valid_592288 = query.getOrDefault("ReplicaConfiguration")
  valid_592288 = validateParameter(valid_592288, JArray, required = false,
                                 default = nil)
  if valid_592288 != nil:
    section.add "ReplicaConfiguration", valid_592288
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592289 = query.getOrDefault("Action")
  valid_592289 = validateParameter(valid_592289, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_592289 != nil:
    section.add "Action", valid_592289
  var valid_592290 = query.getOrDefault("ApplyImmediately")
  valid_592290 = validateParameter(valid_592290, JBool, required = true, default = nil)
  if valid_592290 != nil:
    section.add "ApplyImmediately", valid_592290
  var valid_592291 = query.getOrDefault("ReplicationGroupId")
  valid_592291 = validateParameter(valid_592291, JString, required = true,
                                 default = nil)
  if valid_592291 != nil:
    section.add "ReplicationGroupId", valid_592291
  var valid_592292 = query.getOrDefault("Version")
  valid_592292 = validateParameter(valid_592292, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592292 != nil:
    section.add "Version", valid_592292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592293 = header.getOrDefault("X-Amz-Signature")
  valid_592293 = validateParameter(valid_592293, JString, required = false,
                                 default = nil)
  if valid_592293 != nil:
    section.add "X-Amz-Signature", valid_592293
  var valid_592294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592294 = validateParameter(valid_592294, JString, required = false,
                                 default = nil)
  if valid_592294 != nil:
    section.add "X-Amz-Content-Sha256", valid_592294
  var valid_592295 = header.getOrDefault("X-Amz-Date")
  valid_592295 = validateParameter(valid_592295, JString, required = false,
                                 default = nil)
  if valid_592295 != nil:
    section.add "X-Amz-Date", valid_592295
  var valid_592296 = header.getOrDefault("X-Amz-Credential")
  valid_592296 = validateParameter(valid_592296, JString, required = false,
                                 default = nil)
  if valid_592296 != nil:
    section.add "X-Amz-Credential", valid_592296
  var valid_592297 = header.getOrDefault("X-Amz-Security-Token")
  valid_592297 = validateParameter(valid_592297, JString, required = false,
                                 default = nil)
  if valid_592297 != nil:
    section.add "X-Amz-Security-Token", valid_592297
  var valid_592298 = header.getOrDefault("X-Amz-Algorithm")
  valid_592298 = validateParameter(valid_592298, JString, required = false,
                                 default = nil)
  if valid_592298 != nil:
    section.add "X-Amz-Algorithm", valid_592298
  var valid_592299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592299 = validateParameter(valid_592299, JString, required = false,
                                 default = nil)
  if valid_592299 != nil:
    section.add "X-Amz-SignedHeaders", valid_592299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592300: Call_GetIncreaseReplicaCount_592284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_592300.validator(path, query, header, formData, body)
  let scheme = call_592300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592300.url(scheme.get, call_592300.host, call_592300.base,
                         call_592300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592300, url, valid)

proc call*(call_592301: Call_GetIncreaseReplicaCount_592284;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_592302 = newJObject()
  add(query_592302, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_592302.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_592302, "Action", newJString(Action))
  add(query_592302, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592302, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592302, "Version", newJString(Version))
  result = call_592301.call(nil, query_592302, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_592284(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_592285, base: "/",
    url: url_GetIncreaseReplicaCount_592286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_592340 = ref object of OpenApiRestCall_590364
proc url_PostListAllowedNodeTypeModifications_592342(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_592341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592343 = query.getOrDefault("Action")
  valid_592343 = validateParameter(valid_592343, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_592343 != nil:
    section.add "Action", valid_592343
  var valid_592344 = query.getOrDefault("Version")
  valid_592344 = validateParameter(valid_592344, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592344 != nil:
    section.add "Version", valid_592344
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592345 = header.getOrDefault("X-Amz-Signature")
  valid_592345 = validateParameter(valid_592345, JString, required = false,
                                 default = nil)
  if valid_592345 != nil:
    section.add "X-Amz-Signature", valid_592345
  var valid_592346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592346 = validateParameter(valid_592346, JString, required = false,
                                 default = nil)
  if valid_592346 != nil:
    section.add "X-Amz-Content-Sha256", valid_592346
  var valid_592347 = header.getOrDefault("X-Amz-Date")
  valid_592347 = validateParameter(valid_592347, JString, required = false,
                                 default = nil)
  if valid_592347 != nil:
    section.add "X-Amz-Date", valid_592347
  var valid_592348 = header.getOrDefault("X-Amz-Credential")
  valid_592348 = validateParameter(valid_592348, JString, required = false,
                                 default = nil)
  if valid_592348 != nil:
    section.add "X-Amz-Credential", valid_592348
  var valid_592349 = header.getOrDefault("X-Amz-Security-Token")
  valid_592349 = validateParameter(valid_592349, JString, required = false,
                                 default = nil)
  if valid_592349 != nil:
    section.add "X-Amz-Security-Token", valid_592349
  var valid_592350 = header.getOrDefault("X-Amz-Algorithm")
  valid_592350 = validateParameter(valid_592350, JString, required = false,
                                 default = nil)
  if valid_592350 != nil:
    section.add "X-Amz-Algorithm", valid_592350
  var valid_592351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592351 = validateParameter(valid_592351, JString, required = false,
                                 default = nil)
  if valid_592351 != nil:
    section.add "X-Amz-SignedHeaders", valid_592351
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_592352 = formData.getOrDefault("CacheClusterId")
  valid_592352 = validateParameter(valid_592352, JString, required = false,
                                 default = nil)
  if valid_592352 != nil:
    section.add "CacheClusterId", valid_592352
  var valid_592353 = formData.getOrDefault("ReplicationGroupId")
  valid_592353 = validateParameter(valid_592353, JString, required = false,
                                 default = nil)
  if valid_592353 != nil:
    section.add "ReplicationGroupId", valid_592353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592354: Call_PostListAllowedNodeTypeModifications_592340;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_592354.validator(path, query, header, formData, body)
  let scheme = call_592354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592354.url(scheme.get, call_592354.host, call_592354.base,
                         call_592354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592354, url, valid)

proc call*(call_592355: Call_PostListAllowedNodeTypeModifications_592340;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_592356 = newJObject()
  var formData_592357 = newJObject()
  add(formData_592357, "CacheClusterId", newJString(CacheClusterId))
  add(query_592356, "Action", newJString(Action))
  add(query_592356, "Version", newJString(Version))
  add(formData_592357, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592355.call(nil, query_592356, nil, formData_592357, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_592340(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_592341, base: "/",
    url: url_PostListAllowedNodeTypeModifications_592342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_592323 = ref object of OpenApiRestCall_590364
proc url_GetListAllowedNodeTypeModifications_592325(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_592324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_592326 = query.getOrDefault("CacheClusterId")
  valid_592326 = validateParameter(valid_592326, JString, required = false,
                                 default = nil)
  if valid_592326 != nil:
    section.add "CacheClusterId", valid_592326
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592327 = query.getOrDefault("Action")
  valid_592327 = validateParameter(valid_592327, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_592327 != nil:
    section.add "Action", valid_592327
  var valid_592328 = query.getOrDefault("ReplicationGroupId")
  valid_592328 = validateParameter(valid_592328, JString, required = false,
                                 default = nil)
  if valid_592328 != nil:
    section.add "ReplicationGroupId", valid_592328
  var valid_592329 = query.getOrDefault("Version")
  valid_592329 = validateParameter(valid_592329, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592329 != nil:
    section.add "Version", valid_592329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592330 = header.getOrDefault("X-Amz-Signature")
  valid_592330 = validateParameter(valid_592330, JString, required = false,
                                 default = nil)
  if valid_592330 != nil:
    section.add "X-Amz-Signature", valid_592330
  var valid_592331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592331 = validateParameter(valid_592331, JString, required = false,
                                 default = nil)
  if valid_592331 != nil:
    section.add "X-Amz-Content-Sha256", valid_592331
  var valid_592332 = header.getOrDefault("X-Amz-Date")
  valid_592332 = validateParameter(valid_592332, JString, required = false,
                                 default = nil)
  if valid_592332 != nil:
    section.add "X-Amz-Date", valid_592332
  var valid_592333 = header.getOrDefault("X-Amz-Credential")
  valid_592333 = validateParameter(valid_592333, JString, required = false,
                                 default = nil)
  if valid_592333 != nil:
    section.add "X-Amz-Credential", valid_592333
  var valid_592334 = header.getOrDefault("X-Amz-Security-Token")
  valid_592334 = validateParameter(valid_592334, JString, required = false,
                                 default = nil)
  if valid_592334 != nil:
    section.add "X-Amz-Security-Token", valid_592334
  var valid_592335 = header.getOrDefault("X-Amz-Algorithm")
  valid_592335 = validateParameter(valid_592335, JString, required = false,
                                 default = nil)
  if valid_592335 != nil:
    section.add "X-Amz-Algorithm", valid_592335
  var valid_592336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592336 = validateParameter(valid_592336, JString, required = false,
                                 default = nil)
  if valid_592336 != nil:
    section.add "X-Amz-SignedHeaders", valid_592336
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592337: Call_GetListAllowedNodeTypeModifications_592323;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_592337.validator(path, query, header, formData, body)
  let scheme = call_592337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592337.url(scheme.get, call_592337.host, call_592337.base,
                         call_592337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592337, url, valid)

proc call*(call_592338: Call_GetListAllowedNodeTypeModifications_592323;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_592339 = newJObject()
  add(query_592339, "CacheClusterId", newJString(CacheClusterId))
  add(query_592339, "Action", newJString(Action))
  add(query_592339, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592339, "Version", newJString(Version))
  result = call_592338.call(nil, query_592339, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_592323(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_592324, base: "/",
    url: url_GetListAllowedNodeTypeModifications_592325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_592374 = ref object of OpenApiRestCall_590364
proc url_PostListTagsForResource_592376(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_592375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592377 = query.getOrDefault("Action")
  valid_592377 = validateParameter(valid_592377, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_592377 != nil:
    section.add "Action", valid_592377
  var valid_592378 = query.getOrDefault("Version")
  valid_592378 = validateParameter(valid_592378, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592378 != nil:
    section.add "Version", valid_592378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592379 = header.getOrDefault("X-Amz-Signature")
  valid_592379 = validateParameter(valid_592379, JString, required = false,
                                 default = nil)
  if valid_592379 != nil:
    section.add "X-Amz-Signature", valid_592379
  var valid_592380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592380 = validateParameter(valid_592380, JString, required = false,
                                 default = nil)
  if valid_592380 != nil:
    section.add "X-Amz-Content-Sha256", valid_592380
  var valid_592381 = header.getOrDefault("X-Amz-Date")
  valid_592381 = validateParameter(valid_592381, JString, required = false,
                                 default = nil)
  if valid_592381 != nil:
    section.add "X-Amz-Date", valid_592381
  var valid_592382 = header.getOrDefault("X-Amz-Credential")
  valid_592382 = validateParameter(valid_592382, JString, required = false,
                                 default = nil)
  if valid_592382 != nil:
    section.add "X-Amz-Credential", valid_592382
  var valid_592383 = header.getOrDefault("X-Amz-Security-Token")
  valid_592383 = validateParameter(valid_592383, JString, required = false,
                                 default = nil)
  if valid_592383 != nil:
    section.add "X-Amz-Security-Token", valid_592383
  var valid_592384 = header.getOrDefault("X-Amz-Algorithm")
  valid_592384 = validateParameter(valid_592384, JString, required = false,
                                 default = nil)
  if valid_592384 != nil:
    section.add "X-Amz-Algorithm", valid_592384
  var valid_592385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592385 = validateParameter(valid_592385, JString, required = false,
                                 default = nil)
  if valid_592385 != nil:
    section.add "X-Amz-SignedHeaders", valid_592385
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_592386 = formData.getOrDefault("ResourceName")
  valid_592386 = validateParameter(valid_592386, JString, required = true,
                                 default = nil)
  if valid_592386 != nil:
    section.add "ResourceName", valid_592386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592387: Call_PostListTagsForResource_592374; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_592387.validator(path, query, header, formData, body)
  let scheme = call_592387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592387.url(scheme.get, call_592387.host, call_592387.base,
                         call_592387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592387, url, valid)

proc call*(call_592388: Call_PostListTagsForResource_592374; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_592389 = newJObject()
  var formData_592390 = newJObject()
  add(query_592389, "Action", newJString(Action))
  add(query_592389, "Version", newJString(Version))
  add(formData_592390, "ResourceName", newJString(ResourceName))
  result = call_592388.call(nil, query_592389, nil, formData_592390, nil)

var postListTagsForResource* = Call_PostListTagsForResource_592374(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_592375, base: "/",
    url: url_PostListTagsForResource_592376, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_592358 = ref object of OpenApiRestCall_590364
proc url_GetListTagsForResource_592360(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_592359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_592361 = query.getOrDefault("ResourceName")
  valid_592361 = validateParameter(valid_592361, JString, required = true,
                                 default = nil)
  if valid_592361 != nil:
    section.add "ResourceName", valid_592361
  var valid_592362 = query.getOrDefault("Action")
  valid_592362 = validateParameter(valid_592362, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_592362 != nil:
    section.add "Action", valid_592362
  var valid_592363 = query.getOrDefault("Version")
  valid_592363 = validateParameter(valid_592363, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592363 != nil:
    section.add "Version", valid_592363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592364 = header.getOrDefault("X-Amz-Signature")
  valid_592364 = validateParameter(valid_592364, JString, required = false,
                                 default = nil)
  if valid_592364 != nil:
    section.add "X-Amz-Signature", valid_592364
  var valid_592365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592365 = validateParameter(valid_592365, JString, required = false,
                                 default = nil)
  if valid_592365 != nil:
    section.add "X-Amz-Content-Sha256", valid_592365
  var valid_592366 = header.getOrDefault("X-Amz-Date")
  valid_592366 = validateParameter(valid_592366, JString, required = false,
                                 default = nil)
  if valid_592366 != nil:
    section.add "X-Amz-Date", valid_592366
  var valid_592367 = header.getOrDefault("X-Amz-Credential")
  valid_592367 = validateParameter(valid_592367, JString, required = false,
                                 default = nil)
  if valid_592367 != nil:
    section.add "X-Amz-Credential", valid_592367
  var valid_592368 = header.getOrDefault("X-Amz-Security-Token")
  valid_592368 = validateParameter(valid_592368, JString, required = false,
                                 default = nil)
  if valid_592368 != nil:
    section.add "X-Amz-Security-Token", valid_592368
  var valid_592369 = header.getOrDefault("X-Amz-Algorithm")
  valid_592369 = validateParameter(valid_592369, JString, required = false,
                                 default = nil)
  if valid_592369 != nil:
    section.add "X-Amz-Algorithm", valid_592369
  var valid_592370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592370 = validateParameter(valid_592370, JString, required = false,
                                 default = nil)
  if valid_592370 != nil:
    section.add "X-Amz-SignedHeaders", valid_592370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592371: Call_GetListTagsForResource_592358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_592371.validator(path, query, header, formData, body)
  let scheme = call_592371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592371.url(scheme.get, call_592371.host, call_592371.base,
                         call_592371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592371, url, valid)

proc call*(call_592372: Call_GetListTagsForResource_592358; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592373 = newJObject()
  add(query_592373, "ResourceName", newJString(ResourceName))
  add(query_592373, "Action", newJString(Action))
  add(query_592373, "Version", newJString(Version))
  result = call_592372.call(nil, query_592373, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_592358(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_592359, base: "/",
    url: url_GetListTagsForResource_592360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_592423 = ref object of OpenApiRestCall_590364
proc url_PostModifyCacheCluster_592425(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheCluster_592424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592426 = query.getOrDefault("Action")
  valid_592426 = validateParameter(valid_592426, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_592426 != nil:
    section.add "Action", valid_592426
  var valid_592427 = query.getOrDefault("Version")
  valid_592427 = validateParameter(valid_592427, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592427 != nil:
    section.add "Version", valid_592427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592428 = header.getOrDefault("X-Amz-Signature")
  valid_592428 = validateParameter(valid_592428, JString, required = false,
                                 default = nil)
  if valid_592428 != nil:
    section.add "X-Amz-Signature", valid_592428
  var valid_592429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592429 = validateParameter(valid_592429, JString, required = false,
                                 default = nil)
  if valid_592429 != nil:
    section.add "X-Amz-Content-Sha256", valid_592429
  var valid_592430 = header.getOrDefault("X-Amz-Date")
  valid_592430 = validateParameter(valid_592430, JString, required = false,
                                 default = nil)
  if valid_592430 != nil:
    section.add "X-Amz-Date", valid_592430
  var valid_592431 = header.getOrDefault("X-Amz-Credential")
  valid_592431 = validateParameter(valid_592431, JString, required = false,
                                 default = nil)
  if valid_592431 != nil:
    section.add "X-Amz-Credential", valid_592431
  var valid_592432 = header.getOrDefault("X-Amz-Security-Token")
  valid_592432 = validateParameter(valid_592432, JString, required = false,
                                 default = nil)
  if valid_592432 != nil:
    section.add "X-Amz-Security-Token", valid_592432
  var valid_592433 = header.getOrDefault("X-Amz-Algorithm")
  valid_592433 = validateParameter(valid_592433, JString, required = false,
                                 default = nil)
  if valid_592433 != nil:
    section.add "X-Amz-Algorithm", valid_592433
  var valid_592434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592434 = validateParameter(valid_592434, JString, required = false,
                                 default = nil)
  if valid_592434 != nil:
    section.add "X-Amz-SignedHeaders", valid_592434
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_592435 = formData.getOrDefault("SecurityGroupIds")
  valid_592435 = validateParameter(valid_592435, JArray, required = false,
                                 default = nil)
  if valid_592435 != nil:
    section.add "SecurityGroupIds", valid_592435
  var valid_592436 = formData.getOrDefault("NewAvailabilityZones")
  valid_592436 = validateParameter(valid_592436, JArray, required = false,
                                 default = nil)
  if valid_592436 != nil:
    section.add "NewAvailabilityZones", valid_592436
  var valid_592437 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_592437 = validateParameter(valid_592437, JString, required = false,
                                 default = nil)
  if valid_592437 != nil:
    section.add "PreferredMaintenanceWindow", valid_592437
  var valid_592438 = formData.getOrDefault("NumCacheNodes")
  valid_592438 = validateParameter(valid_592438, JInt, required = false, default = nil)
  if valid_592438 != nil:
    section.add "NumCacheNodes", valid_592438
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_592439 = formData.getOrDefault("CacheClusterId")
  valid_592439 = validateParameter(valid_592439, JString, required = true,
                                 default = nil)
  if valid_592439 != nil:
    section.add "CacheClusterId", valid_592439
  var valid_592440 = formData.getOrDefault("NotificationTopicStatus")
  valid_592440 = validateParameter(valid_592440, JString, required = false,
                                 default = nil)
  if valid_592440 != nil:
    section.add "NotificationTopicStatus", valid_592440
  var valid_592441 = formData.getOrDefault("NotificationTopicArn")
  valid_592441 = validateParameter(valid_592441, JString, required = false,
                                 default = nil)
  if valid_592441 != nil:
    section.add "NotificationTopicArn", valid_592441
  var valid_592442 = formData.getOrDefault("EngineVersion")
  valid_592442 = validateParameter(valid_592442, JString, required = false,
                                 default = nil)
  if valid_592442 != nil:
    section.add "EngineVersion", valid_592442
  var valid_592443 = formData.getOrDefault("AZMode")
  valid_592443 = validateParameter(valid_592443, JString, required = false,
                                 default = newJString("single-az"))
  if valid_592443 != nil:
    section.add "AZMode", valid_592443
  var valid_592444 = formData.getOrDefault("CacheParameterGroupName")
  valid_592444 = validateParameter(valid_592444, JString, required = false,
                                 default = nil)
  if valid_592444 != nil:
    section.add "CacheParameterGroupName", valid_592444
  var valid_592445 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_592445 = validateParameter(valid_592445, JBool, required = false, default = nil)
  if valid_592445 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592445
  var valid_592446 = formData.getOrDefault("ApplyImmediately")
  valid_592446 = validateParameter(valid_592446, JBool, required = false, default = nil)
  if valid_592446 != nil:
    section.add "ApplyImmediately", valid_592446
  var valid_592447 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_592447 = validateParameter(valid_592447, JArray, required = false,
                                 default = nil)
  if valid_592447 != nil:
    section.add "CacheNodeIdsToRemove", valid_592447
  var valid_592448 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_592448 = validateParameter(valid_592448, JArray, required = false,
                                 default = nil)
  if valid_592448 != nil:
    section.add "CacheSecurityGroupNames", valid_592448
  var valid_592449 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_592449 = validateParameter(valid_592449, JInt, required = false, default = nil)
  if valid_592449 != nil:
    section.add "SnapshotRetentionLimit", valid_592449
  var valid_592450 = formData.getOrDefault("SnapshotWindow")
  valid_592450 = validateParameter(valid_592450, JString, required = false,
                                 default = nil)
  if valid_592450 != nil:
    section.add "SnapshotWindow", valid_592450
  var valid_592451 = formData.getOrDefault("CacheNodeType")
  valid_592451 = validateParameter(valid_592451, JString, required = false,
                                 default = nil)
  if valid_592451 != nil:
    section.add "CacheNodeType", valid_592451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592452: Call_PostModifyCacheCluster_592423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_592452.validator(path, query, header, formData, body)
  let scheme = call_592452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592452.url(scheme.get, call_592452.host, call_592452.base,
                         call_592452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592452, url, valid)

proc call*(call_592453: Call_PostModifyCacheCluster_592423; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          Version: string = "2015-02-02"; SnapshotWindow: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_592454 = newJObject()
  var formData_592455 = newJObject()
  if SecurityGroupIds != nil:
    formData_592455.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_592455.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_592455, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_592455, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_592455, "CacheClusterId", newJString(CacheClusterId))
  add(formData_592455, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_592455, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_592455, "EngineVersion", newJString(EngineVersion))
  add(formData_592455, "AZMode", newJString(AZMode))
  add(formData_592455, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_592455, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_592455, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_592455.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_592454, "Action", newJString(Action))
  if CacheSecurityGroupNames != nil:
    formData_592455.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_592455, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592454, "Version", newJString(Version))
  add(formData_592455, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_592455, "CacheNodeType", newJString(CacheNodeType))
  result = call_592453.call(nil, query_592454, nil, formData_592455, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_592423(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_592424, base: "/",
    url: url_PostModifyCacheCluster_592425, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_592391 = ref object of OpenApiRestCall_590364
proc url_GetModifyCacheCluster_592393(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheCluster_592392(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_592394 = query.getOrDefault("NotificationTopicStatus")
  valid_592394 = validateParameter(valid_592394, JString, required = false,
                                 default = nil)
  if valid_592394 != nil:
    section.add "NotificationTopicStatus", valid_592394
  var valid_592395 = query.getOrDefault("CacheParameterGroupName")
  valid_592395 = validateParameter(valid_592395, JString, required = false,
                                 default = nil)
  if valid_592395 != nil:
    section.add "CacheParameterGroupName", valid_592395
  var valid_592396 = query.getOrDefault("NewAvailabilityZones")
  valid_592396 = validateParameter(valid_592396, JArray, required = false,
                                 default = nil)
  if valid_592396 != nil:
    section.add "NewAvailabilityZones", valid_592396
  var valid_592397 = query.getOrDefault("AZMode")
  valid_592397 = validateParameter(valid_592397, JString, required = false,
                                 default = newJString("single-az"))
  if valid_592397 != nil:
    section.add "AZMode", valid_592397
  var valid_592398 = query.getOrDefault("NumCacheNodes")
  valid_592398 = validateParameter(valid_592398, JInt, required = false, default = nil)
  if valid_592398 != nil:
    section.add "NumCacheNodes", valid_592398
  var valid_592399 = query.getOrDefault("SnapshotRetentionLimit")
  valid_592399 = validateParameter(valid_592399, JInt, required = false, default = nil)
  if valid_592399 != nil:
    section.add "SnapshotRetentionLimit", valid_592399
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_592400 = query.getOrDefault("CacheClusterId")
  valid_592400 = validateParameter(valid_592400, JString, required = true,
                                 default = nil)
  if valid_592400 != nil:
    section.add "CacheClusterId", valid_592400
  var valid_592401 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_592401 = validateParameter(valid_592401, JArray, required = false,
                                 default = nil)
  if valid_592401 != nil:
    section.add "CacheNodeIdsToRemove", valid_592401
  var valid_592402 = query.getOrDefault("CacheSecurityGroupNames")
  valid_592402 = validateParameter(valid_592402, JArray, required = false,
                                 default = nil)
  if valid_592402 != nil:
    section.add "CacheSecurityGroupNames", valid_592402
  var valid_592403 = query.getOrDefault("CacheNodeType")
  valid_592403 = validateParameter(valid_592403, JString, required = false,
                                 default = nil)
  if valid_592403 != nil:
    section.add "CacheNodeType", valid_592403
  var valid_592404 = query.getOrDefault("EngineVersion")
  valid_592404 = validateParameter(valid_592404, JString, required = false,
                                 default = nil)
  if valid_592404 != nil:
    section.add "EngineVersion", valid_592404
  var valid_592405 = query.getOrDefault("Action")
  valid_592405 = validateParameter(valid_592405, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_592405 != nil:
    section.add "Action", valid_592405
  var valid_592406 = query.getOrDefault("ApplyImmediately")
  valid_592406 = validateParameter(valid_592406, JBool, required = false, default = nil)
  if valid_592406 != nil:
    section.add "ApplyImmediately", valid_592406
  var valid_592407 = query.getOrDefault("NotificationTopicArn")
  valid_592407 = validateParameter(valid_592407, JString, required = false,
                                 default = nil)
  if valid_592407 != nil:
    section.add "NotificationTopicArn", valid_592407
  var valid_592408 = query.getOrDefault("Version")
  valid_592408 = validateParameter(valid_592408, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592408 != nil:
    section.add "Version", valid_592408
  var valid_592409 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_592409 = validateParameter(valid_592409, JString, required = false,
                                 default = nil)
  if valid_592409 != nil:
    section.add "PreferredMaintenanceWindow", valid_592409
  var valid_592410 = query.getOrDefault("SnapshotWindow")
  valid_592410 = validateParameter(valid_592410, JString, required = false,
                                 default = nil)
  if valid_592410 != nil:
    section.add "SnapshotWindow", valid_592410
  var valid_592411 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_592411 = validateParameter(valid_592411, JBool, required = false, default = nil)
  if valid_592411 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592411
  var valid_592412 = query.getOrDefault("SecurityGroupIds")
  valid_592412 = validateParameter(valid_592412, JArray, required = false,
                                 default = nil)
  if valid_592412 != nil:
    section.add "SecurityGroupIds", valid_592412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592413 = header.getOrDefault("X-Amz-Signature")
  valid_592413 = validateParameter(valid_592413, JString, required = false,
                                 default = nil)
  if valid_592413 != nil:
    section.add "X-Amz-Signature", valid_592413
  var valid_592414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592414 = validateParameter(valid_592414, JString, required = false,
                                 default = nil)
  if valid_592414 != nil:
    section.add "X-Amz-Content-Sha256", valid_592414
  var valid_592415 = header.getOrDefault("X-Amz-Date")
  valid_592415 = validateParameter(valid_592415, JString, required = false,
                                 default = nil)
  if valid_592415 != nil:
    section.add "X-Amz-Date", valid_592415
  var valid_592416 = header.getOrDefault("X-Amz-Credential")
  valid_592416 = validateParameter(valid_592416, JString, required = false,
                                 default = nil)
  if valid_592416 != nil:
    section.add "X-Amz-Credential", valid_592416
  var valid_592417 = header.getOrDefault("X-Amz-Security-Token")
  valid_592417 = validateParameter(valid_592417, JString, required = false,
                                 default = nil)
  if valid_592417 != nil:
    section.add "X-Amz-Security-Token", valid_592417
  var valid_592418 = header.getOrDefault("X-Amz-Algorithm")
  valid_592418 = validateParameter(valid_592418, JString, required = false,
                                 default = nil)
  if valid_592418 != nil:
    section.add "X-Amz-Algorithm", valid_592418
  var valid_592419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592419 = validateParameter(valid_592419, JString, required = false,
                                 default = nil)
  if valid_592419 != nil:
    section.add "X-Amz-SignedHeaders", valid_592419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592420: Call_GetModifyCacheCluster_592391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_592420.validator(path, query, header, formData, body)
  let scheme = call_592420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592420.url(scheme.get, call_592420.host, call_592420.base,
                         call_592420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592420, url, valid)

proc call*(call_592421: Call_GetModifyCacheCluster_592391; CacheClusterId: string;
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_592422 = newJObject()
  add(query_592422, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_592422, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_592422.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_592422, "AZMode", newJString(AZMode))
  add(query_592422, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_592422, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592422, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_592422.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_592422.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_592422, "CacheNodeType", newJString(CacheNodeType))
  add(query_592422, "EngineVersion", newJString(EngineVersion))
  add(query_592422, "Action", newJString(Action))
  add(query_592422, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592422, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_592422, "Version", newJString(Version))
  add(query_592422, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_592422, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_592422, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_592422.add "SecurityGroupIds", SecurityGroupIds
  result = call_592421.call(nil, query_592422, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_592391(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_592392, base: "/",
    url: url_GetModifyCacheCluster_592393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_592473 = ref object of OpenApiRestCall_590364
proc url_PostModifyCacheParameterGroup_592475(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheParameterGroup_592474(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592476 = query.getOrDefault("Action")
  valid_592476 = validateParameter(valid_592476, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_592476 != nil:
    section.add "Action", valid_592476
  var valid_592477 = query.getOrDefault("Version")
  valid_592477 = validateParameter(valid_592477, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592477 != nil:
    section.add "Version", valid_592477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592478 = header.getOrDefault("X-Amz-Signature")
  valid_592478 = validateParameter(valid_592478, JString, required = false,
                                 default = nil)
  if valid_592478 != nil:
    section.add "X-Amz-Signature", valid_592478
  var valid_592479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592479 = validateParameter(valid_592479, JString, required = false,
                                 default = nil)
  if valid_592479 != nil:
    section.add "X-Amz-Content-Sha256", valid_592479
  var valid_592480 = header.getOrDefault("X-Amz-Date")
  valid_592480 = validateParameter(valid_592480, JString, required = false,
                                 default = nil)
  if valid_592480 != nil:
    section.add "X-Amz-Date", valid_592480
  var valid_592481 = header.getOrDefault("X-Amz-Credential")
  valid_592481 = validateParameter(valid_592481, JString, required = false,
                                 default = nil)
  if valid_592481 != nil:
    section.add "X-Amz-Credential", valid_592481
  var valid_592482 = header.getOrDefault("X-Amz-Security-Token")
  valid_592482 = validateParameter(valid_592482, JString, required = false,
                                 default = nil)
  if valid_592482 != nil:
    section.add "X-Amz-Security-Token", valid_592482
  var valid_592483 = header.getOrDefault("X-Amz-Algorithm")
  valid_592483 = validateParameter(valid_592483, JString, required = false,
                                 default = nil)
  if valid_592483 != nil:
    section.add "X-Amz-Algorithm", valid_592483
  var valid_592484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592484 = validateParameter(valid_592484, JString, required = false,
                                 default = nil)
  if valid_592484 != nil:
    section.add "X-Amz-SignedHeaders", valid_592484
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592485 = formData.getOrDefault("CacheParameterGroupName")
  valid_592485 = validateParameter(valid_592485, JString, required = true,
                                 default = nil)
  if valid_592485 != nil:
    section.add "CacheParameterGroupName", valid_592485
  var valid_592486 = formData.getOrDefault("ParameterNameValues")
  valid_592486 = validateParameter(valid_592486, JArray, required = true, default = nil)
  if valid_592486 != nil:
    section.add "ParameterNameValues", valid_592486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592487: Call_PostModifyCacheParameterGroup_592473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_592487.validator(path, query, header, formData, body)
  let scheme = call_592487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592487.url(scheme.get, call_592487.host, call_592487.base,
                         call_592487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592487, url, valid)

proc call*(call_592488: Call_PostModifyCacheParameterGroup_592473;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_592489 = newJObject()
  var formData_592490 = newJObject()
  add(formData_592490, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592489, "Action", newJString(Action))
  add(query_592489, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_592490.add "ParameterNameValues", ParameterNameValues
  result = call_592488.call(nil, query_592489, nil, formData_592490, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_592473(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_592474, base: "/",
    url: url_PostModifyCacheParameterGroup_592475,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_592456 = ref object of OpenApiRestCall_590364
proc url_GetModifyCacheParameterGroup_592458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheParameterGroup_592457(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592459 = query.getOrDefault("CacheParameterGroupName")
  valid_592459 = validateParameter(valid_592459, JString, required = true,
                                 default = nil)
  if valid_592459 != nil:
    section.add "CacheParameterGroupName", valid_592459
  var valid_592460 = query.getOrDefault("ParameterNameValues")
  valid_592460 = validateParameter(valid_592460, JArray, required = true, default = nil)
  if valid_592460 != nil:
    section.add "ParameterNameValues", valid_592460
  var valid_592461 = query.getOrDefault("Action")
  valid_592461 = validateParameter(valid_592461, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_592461 != nil:
    section.add "Action", valid_592461
  var valid_592462 = query.getOrDefault("Version")
  valid_592462 = validateParameter(valid_592462, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592462 != nil:
    section.add "Version", valid_592462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592463 = header.getOrDefault("X-Amz-Signature")
  valid_592463 = validateParameter(valid_592463, JString, required = false,
                                 default = nil)
  if valid_592463 != nil:
    section.add "X-Amz-Signature", valid_592463
  var valid_592464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592464 = validateParameter(valid_592464, JString, required = false,
                                 default = nil)
  if valid_592464 != nil:
    section.add "X-Amz-Content-Sha256", valid_592464
  var valid_592465 = header.getOrDefault("X-Amz-Date")
  valid_592465 = validateParameter(valid_592465, JString, required = false,
                                 default = nil)
  if valid_592465 != nil:
    section.add "X-Amz-Date", valid_592465
  var valid_592466 = header.getOrDefault("X-Amz-Credential")
  valid_592466 = validateParameter(valid_592466, JString, required = false,
                                 default = nil)
  if valid_592466 != nil:
    section.add "X-Amz-Credential", valid_592466
  var valid_592467 = header.getOrDefault("X-Amz-Security-Token")
  valid_592467 = validateParameter(valid_592467, JString, required = false,
                                 default = nil)
  if valid_592467 != nil:
    section.add "X-Amz-Security-Token", valid_592467
  var valid_592468 = header.getOrDefault("X-Amz-Algorithm")
  valid_592468 = validateParameter(valid_592468, JString, required = false,
                                 default = nil)
  if valid_592468 != nil:
    section.add "X-Amz-Algorithm", valid_592468
  var valid_592469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592469 = validateParameter(valid_592469, JString, required = false,
                                 default = nil)
  if valid_592469 != nil:
    section.add "X-Amz-SignedHeaders", valid_592469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592470: Call_GetModifyCacheParameterGroup_592456; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_592470.validator(path, query, header, formData, body)
  let scheme = call_592470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592470.url(scheme.get, call_592470.host, call_592470.base,
                         call_592470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592470, url, valid)

proc call*(call_592471: Call_GetModifyCacheParameterGroup_592456;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592472 = newJObject()
  add(query_592472, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_592472.add "ParameterNameValues", ParameterNameValues
  add(query_592472, "Action", newJString(Action))
  add(query_592472, "Version", newJString(Version))
  result = call_592471.call(nil, query_592472, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_592456(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_592457, base: "/",
    url: url_GetModifyCacheParameterGroup_592458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_592509 = ref object of OpenApiRestCall_590364
proc url_PostModifyCacheSubnetGroup_592511(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheSubnetGroup_592510(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592512 = query.getOrDefault("Action")
  valid_592512 = validateParameter(valid_592512, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_592512 != nil:
    section.add "Action", valid_592512
  var valid_592513 = query.getOrDefault("Version")
  valid_592513 = validateParameter(valid_592513, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592513 != nil:
    section.add "Version", valid_592513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592514 = header.getOrDefault("X-Amz-Signature")
  valid_592514 = validateParameter(valid_592514, JString, required = false,
                                 default = nil)
  if valid_592514 != nil:
    section.add "X-Amz-Signature", valid_592514
  var valid_592515 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592515 = validateParameter(valid_592515, JString, required = false,
                                 default = nil)
  if valid_592515 != nil:
    section.add "X-Amz-Content-Sha256", valid_592515
  var valid_592516 = header.getOrDefault("X-Amz-Date")
  valid_592516 = validateParameter(valid_592516, JString, required = false,
                                 default = nil)
  if valid_592516 != nil:
    section.add "X-Amz-Date", valid_592516
  var valid_592517 = header.getOrDefault("X-Amz-Credential")
  valid_592517 = validateParameter(valid_592517, JString, required = false,
                                 default = nil)
  if valid_592517 != nil:
    section.add "X-Amz-Credential", valid_592517
  var valid_592518 = header.getOrDefault("X-Amz-Security-Token")
  valid_592518 = validateParameter(valid_592518, JString, required = false,
                                 default = nil)
  if valid_592518 != nil:
    section.add "X-Amz-Security-Token", valid_592518
  var valid_592519 = header.getOrDefault("X-Amz-Algorithm")
  valid_592519 = validateParameter(valid_592519, JString, required = false,
                                 default = nil)
  if valid_592519 != nil:
    section.add "X-Amz-Algorithm", valid_592519
  var valid_592520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592520 = validateParameter(valid_592520, JString, required = false,
                                 default = nil)
  if valid_592520 != nil:
    section.add "X-Amz-SignedHeaders", valid_592520
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_592521 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_592521 = validateParameter(valid_592521, JString, required = false,
                                 default = nil)
  if valid_592521 != nil:
    section.add "CacheSubnetGroupDescription", valid_592521
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_592522 = formData.getOrDefault("CacheSubnetGroupName")
  valid_592522 = validateParameter(valid_592522, JString, required = true,
                                 default = nil)
  if valid_592522 != nil:
    section.add "CacheSubnetGroupName", valid_592522
  var valid_592523 = formData.getOrDefault("SubnetIds")
  valid_592523 = validateParameter(valid_592523, JArray, required = false,
                                 default = nil)
  if valid_592523 != nil:
    section.add "SubnetIds", valid_592523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592524: Call_PostModifyCacheSubnetGroup_592509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_592524.validator(path, query, header, formData, body)
  let scheme = call_592524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592524.url(scheme.get, call_592524.host, call_592524.base,
                         call_592524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592524, url, valid)

proc call*(call_592525: Call_PostModifyCacheSubnetGroup_592509;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_592526 = newJObject()
  var formData_592527 = newJObject()
  add(formData_592527, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_592527, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592526, "Action", newJString(Action))
  add(query_592526, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_592527.add "SubnetIds", SubnetIds
  result = call_592525.call(nil, query_592526, nil, formData_592527, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_592509(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_592510, base: "/",
    url: url_PostModifyCacheSubnetGroup_592511,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_592491 = ref object of OpenApiRestCall_590364
proc url_GetModifyCacheSubnetGroup_592493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheSubnetGroup_592492(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_592494 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_592494 = validateParameter(valid_592494, JString, required = false,
                                 default = nil)
  if valid_592494 != nil:
    section.add "CacheSubnetGroupDescription", valid_592494
  var valid_592495 = query.getOrDefault("SubnetIds")
  valid_592495 = validateParameter(valid_592495, JArray, required = false,
                                 default = nil)
  if valid_592495 != nil:
    section.add "SubnetIds", valid_592495
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592496 = query.getOrDefault("Action")
  valid_592496 = validateParameter(valid_592496, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_592496 != nil:
    section.add "Action", valid_592496
  var valid_592497 = query.getOrDefault("CacheSubnetGroupName")
  valid_592497 = validateParameter(valid_592497, JString, required = true,
                                 default = nil)
  if valid_592497 != nil:
    section.add "CacheSubnetGroupName", valid_592497
  var valid_592498 = query.getOrDefault("Version")
  valid_592498 = validateParameter(valid_592498, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592498 != nil:
    section.add "Version", valid_592498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592499 = header.getOrDefault("X-Amz-Signature")
  valid_592499 = validateParameter(valid_592499, JString, required = false,
                                 default = nil)
  if valid_592499 != nil:
    section.add "X-Amz-Signature", valid_592499
  var valid_592500 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592500 = validateParameter(valid_592500, JString, required = false,
                                 default = nil)
  if valid_592500 != nil:
    section.add "X-Amz-Content-Sha256", valid_592500
  var valid_592501 = header.getOrDefault("X-Amz-Date")
  valid_592501 = validateParameter(valid_592501, JString, required = false,
                                 default = nil)
  if valid_592501 != nil:
    section.add "X-Amz-Date", valid_592501
  var valid_592502 = header.getOrDefault("X-Amz-Credential")
  valid_592502 = validateParameter(valid_592502, JString, required = false,
                                 default = nil)
  if valid_592502 != nil:
    section.add "X-Amz-Credential", valid_592502
  var valid_592503 = header.getOrDefault("X-Amz-Security-Token")
  valid_592503 = validateParameter(valid_592503, JString, required = false,
                                 default = nil)
  if valid_592503 != nil:
    section.add "X-Amz-Security-Token", valid_592503
  var valid_592504 = header.getOrDefault("X-Amz-Algorithm")
  valid_592504 = validateParameter(valid_592504, JString, required = false,
                                 default = nil)
  if valid_592504 != nil:
    section.add "X-Amz-Algorithm", valid_592504
  var valid_592505 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592505 = validateParameter(valid_592505, JString, required = false,
                                 default = nil)
  if valid_592505 != nil:
    section.add "X-Amz-SignedHeaders", valid_592505
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592506: Call_GetModifyCacheSubnetGroup_592491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_592506.validator(path, query, header, formData, body)
  let scheme = call_592506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592506.url(scheme.get, call_592506.host, call_592506.base,
                         call_592506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592506, url, valid)

proc call*(call_592507: Call_GetModifyCacheSubnetGroup_592491;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_592508 = newJObject()
  add(query_592508, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_592508.add "SubnetIds", SubnetIds
  add(query_592508, "Action", newJString(Action))
  add(query_592508, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_592508, "Version", newJString(Version))
  result = call_592507.call(nil, query_592508, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_592491(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_592492, base: "/",
    url: url_GetModifyCacheSubnetGroup_592493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_592561 = ref object of OpenApiRestCall_590364
proc url_PostModifyReplicationGroup_592563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroup_592562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592564 = query.getOrDefault("Action")
  valid_592564 = validateParameter(valid_592564, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_592564 != nil:
    section.add "Action", valid_592564
  var valid_592565 = query.getOrDefault("Version")
  valid_592565 = validateParameter(valid_592565, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592565 != nil:
    section.add "Version", valid_592565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592566 = header.getOrDefault("X-Amz-Signature")
  valid_592566 = validateParameter(valid_592566, JString, required = false,
                                 default = nil)
  if valid_592566 != nil:
    section.add "X-Amz-Signature", valid_592566
  var valid_592567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592567 = validateParameter(valid_592567, JString, required = false,
                                 default = nil)
  if valid_592567 != nil:
    section.add "X-Amz-Content-Sha256", valid_592567
  var valid_592568 = header.getOrDefault("X-Amz-Date")
  valid_592568 = validateParameter(valid_592568, JString, required = false,
                                 default = nil)
  if valid_592568 != nil:
    section.add "X-Amz-Date", valid_592568
  var valid_592569 = header.getOrDefault("X-Amz-Credential")
  valid_592569 = validateParameter(valid_592569, JString, required = false,
                                 default = nil)
  if valid_592569 != nil:
    section.add "X-Amz-Credential", valid_592569
  var valid_592570 = header.getOrDefault("X-Amz-Security-Token")
  valid_592570 = validateParameter(valid_592570, JString, required = false,
                                 default = nil)
  if valid_592570 != nil:
    section.add "X-Amz-Security-Token", valid_592570
  var valid_592571 = header.getOrDefault("X-Amz-Algorithm")
  valid_592571 = validateParameter(valid_592571, JString, required = false,
                                 default = nil)
  if valid_592571 != nil:
    section.add "X-Amz-Algorithm", valid_592571
  var valid_592572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592572 = validateParameter(valid_592572, JString, required = false,
                                 default = nil)
  if valid_592572 != nil:
    section.add "X-Amz-SignedHeaders", valid_592572
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_592573 = formData.getOrDefault("SecurityGroupIds")
  valid_592573 = validateParameter(valid_592573, JArray, required = false,
                                 default = nil)
  if valid_592573 != nil:
    section.add "SecurityGroupIds", valid_592573
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_592574 = formData.getOrDefault("ReplicationGroupId")
  valid_592574 = validateParameter(valid_592574, JString, required = true,
                                 default = nil)
  if valid_592574 != nil:
    section.add "ReplicationGroupId", valid_592574
  var valid_592575 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_592575 = validateParameter(valid_592575, JString, required = false,
                                 default = nil)
  if valid_592575 != nil:
    section.add "PreferredMaintenanceWindow", valid_592575
  var valid_592576 = formData.getOrDefault("NodeGroupId")
  valid_592576 = validateParameter(valid_592576, JString, required = false,
                                 default = nil)
  if valid_592576 != nil:
    section.add "NodeGroupId", valid_592576
  var valid_592577 = formData.getOrDefault("PrimaryClusterId")
  valid_592577 = validateParameter(valid_592577, JString, required = false,
                                 default = nil)
  if valid_592577 != nil:
    section.add "PrimaryClusterId", valid_592577
  var valid_592578 = formData.getOrDefault("NotificationTopicStatus")
  valid_592578 = validateParameter(valid_592578, JString, required = false,
                                 default = nil)
  if valid_592578 != nil:
    section.add "NotificationTopicStatus", valid_592578
  var valid_592579 = formData.getOrDefault("NotificationTopicArn")
  valid_592579 = validateParameter(valid_592579, JString, required = false,
                                 default = nil)
  if valid_592579 != nil:
    section.add "NotificationTopicArn", valid_592579
  var valid_592580 = formData.getOrDefault("EngineVersion")
  valid_592580 = validateParameter(valid_592580, JString, required = false,
                                 default = nil)
  if valid_592580 != nil:
    section.add "EngineVersion", valid_592580
  var valid_592581 = formData.getOrDefault("SnapshottingClusterId")
  valid_592581 = validateParameter(valid_592581, JString, required = false,
                                 default = nil)
  if valid_592581 != nil:
    section.add "SnapshottingClusterId", valid_592581
  var valid_592582 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_592582 = validateParameter(valid_592582, JBool, required = false, default = nil)
  if valid_592582 != nil:
    section.add "AutomaticFailoverEnabled", valid_592582
  var valid_592583 = formData.getOrDefault("CacheParameterGroupName")
  valid_592583 = validateParameter(valid_592583, JString, required = false,
                                 default = nil)
  if valid_592583 != nil:
    section.add "CacheParameterGroupName", valid_592583
  var valid_592584 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_592584 = validateParameter(valid_592584, JBool, required = false, default = nil)
  if valid_592584 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592584
  var valid_592585 = formData.getOrDefault("ApplyImmediately")
  valid_592585 = validateParameter(valid_592585, JBool, required = false, default = nil)
  if valid_592585 != nil:
    section.add "ApplyImmediately", valid_592585
  var valid_592586 = formData.getOrDefault("ReplicationGroupDescription")
  valid_592586 = validateParameter(valid_592586, JString, required = false,
                                 default = nil)
  if valid_592586 != nil:
    section.add "ReplicationGroupDescription", valid_592586
  var valid_592587 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_592587 = validateParameter(valid_592587, JArray, required = false,
                                 default = nil)
  if valid_592587 != nil:
    section.add "CacheSecurityGroupNames", valid_592587
  var valid_592588 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_592588 = validateParameter(valid_592588, JInt, required = false, default = nil)
  if valid_592588 != nil:
    section.add "SnapshotRetentionLimit", valid_592588
  var valid_592589 = formData.getOrDefault("SnapshotWindow")
  valid_592589 = validateParameter(valid_592589, JString, required = false,
                                 default = nil)
  if valid_592589 != nil:
    section.add "SnapshotWindow", valid_592589
  var valid_592590 = formData.getOrDefault("CacheNodeType")
  valid_592590 = validateParameter(valid_592590, JString, required = false,
                                 default = nil)
  if valid_592590 != nil:
    section.add "CacheNodeType", valid_592590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592591: Call_PostModifyReplicationGroup_592561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592591.validator(path, query, header, formData, body)
  let scheme = call_592591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592591.url(scheme.get, call_592591.host, call_592591.base,
                         call_592591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592591, url, valid)

proc call*(call_592592: Call_PostModifyReplicationGroup_592561;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NodeGroupId: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          Version: string = "2015-02-02"; SnapshotWindow: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_592593 = newJObject()
  var formData_592594 = newJObject()
  if SecurityGroupIds != nil:
    formData_592594.add "SecurityGroupIds", SecurityGroupIds
  add(formData_592594, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_592594, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_592594, "NodeGroupId", newJString(NodeGroupId))
  add(formData_592594, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_592594, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_592594, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_592594, "EngineVersion", newJString(EngineVersion))
  add(formData_592594, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_592594, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_592594, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_592594, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_592594, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592593, "Action", newJString(Action))
  add(formData_592594, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_592594.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_592594, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592593, "Version", newJString(Version))
  add(formData_592594, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_592594, "CacheNodeType", newJString(CacheNodeType))
  result = call_592592.call(nil, query_592593, nil, formData_592594, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_592561(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_592562, base: "/",
    url: url_PostModifyReplicationGroup_592563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_592528 = ref object of OpenApiRestCall_590364
proc url_GetModifyReplicationGroup_592530(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroup_592529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  section = newJObject()
  var valid_592531 = query.getOrDefault("ReplicationGroupDescription")
  valid_592531 = validateParameter(valid_592531, JString, required = false,
                                 default = nil)
  if valid_592531 != nil:
    section.add "ReplicationGroupDescription", valid_592531
  var valid_592532 = query.getOrDefault("NotificationTopicStatus")
  valid_592532 = validateParameter(valid_592532, JString, required = false,
                                 default = nil)
  if valid_592532 != nil:
    section.add "NotificationTopicStatus", valid_592532
  var valid_592533 = query.getOrDefault("CacheParameterGroupName")
  valid_592533 = validateParameter(valid_592533, JString, required = false,
                                 default = nil)
  if valid_592533 != nil:
    section.add "CacheParameterGroupName", valid_592533
  var valid_592534 = query.getOrDefault("SnapshotRetentionLimit")
  valid_592534 = validateParameter(valid_592534, JInt, required = false, default = nil)
  if valid_592534 != nil:
    section.add "SnapshotRetentionLimit", valid_592534
  var valid_592535 = query.getOrDefault("SnapshottingClusterId")
  valid_592535 = validateParameter(valid_592535, JString, required = false,
                                 default = nil)
  if valid_592535 != nil:
    section.add "SnapshottingClusterId", valid_592535
  var valid_592536 = query.getOrDefault("CacheSecurityGroupNames")
  valid_592536 = validateParameter(valid_592536, JArray, required = false,
                                 default = nil)
  if valid_592536 != nil:
    section.add "CacheSecurityGroupNames", valid_592536
  var valid_592537 = query.getOrDefault("PrimaryClusterId")
  valid_592537 = validateParameter(valid_592537, JString, required = false,
                                 default = nil)
  if valid_592537 != nil:
    section.add "PrimaryClusterId", valid_592537
  var valid_592538 = query.getOrDefault("CacheNodeType")
  valid_592538 = validateParameter(valid_592538, JString, required = false,
                                 default = nil)
  if valid_592538 != nil:
    section.add "CacheNodeType", valid_592538
  var valid_592539 = query.getOrDefault("EngineVersion")
  valid_592539 = validateParameter(valid_592539, JString, required = false,
                                 default = nil)
  if valid_592539 != nil:
    section.add "EngineVersion", valid_592539
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592540 = query.getOrDefault("Action")
  valid_592540 = validateParameter(valid_592540, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_592540 != nil:
    section.add "Action", valid_592540
  var valid_592541 = query.getOrDefault("ApplyImmediately")
  valid_592541 = validateParameter(valid_592541, JBool, required = false, default = nil)
  if valid_592541 != nil:
    section.add "ApplyImmediately", valid_592541
  var valid_592542 = query.getOrDefault("ReplicationGroupId")
  valid_592542 = validateParameter(valid_592542, JString, required = true,
                                 default = nil)
  if valid_592542 != nil:
    section.add "ReplicationGroupId", valid_592542
  var valid_592543 = query.getOrDefault("NotificationTopicArn")
  valid_592543 = validateParameter(valid_592543, JString, required = false,
                                 default = nil)
  if valid_592543 != nil:
    section.add "NotificationTopicArn", valid_592543
  var valid_592544 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_592544 = validateParameter(valid_592544, JBool, required = false, default = nil)
  if valid_592544 != nil:
    section.add "AutomaticFailoverEnabled", valid_592544
  var valid_592545 = query.getOrDefault("Version")
  valid_592545 = validateParameter(valid_592545, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592545 != nil:
    section.add "Version", valid_592545
  var valid_592546 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_592546 = validateParameter(valid_592546, JString, required = false,
                                 default = nil)
  if valid_592546 != nil:
    section.add "PreferredMaintenanceWindow", valid_592546
  var valid_592547 = query.getOrDefault("SnapshotWindow")
  valid_592547 = validateParameter(valid_592547, JString, required = false,
                                 default = nil)
  if valid_592547 != nil:
    section.add "SnapshotWindow", valid_592547
  var valid_592548 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_592548 = validateParameter(valid_592548, JBool, required = false, default = nil)
  if valid_592548 != nil:
    section.add "AutoMinorVersionUpgrade", valid_592548
  var valid_592549 = query.getOrDefault("SecurityGroupIds")
  valid_592549 = validateParameter(valid_592549, JArray, required = false,
                                 default = nil)
  if valid_592549 != nil:
    section.add "SecurityGroupIds", valid_592549
  var valid_592550 = query.getOrDefault("NodeGroupId")
  valid_592550 = validateParameter(valid_592550, JString, required = false,
                                 default = nil)
  if valid_592550 != nil:
    section.add "NodeGroupId", valid_592550
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592551 = header.getOrDefault("X-Amz-Signature")
  valid_592551 = validateParameter(valid_592551, JString, required = false,
                                 default = nil)
  if valid_592551 != nil:
    section.add "X-Amz-Signature", valid_592551
  var valid_592552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592552 = validateParameter(valid_592552, JString, required = false,
                                 default = nil)
  if valid_592552 != nil:
    section.add "X-Amz-Content-Sha256", valid_592552
  var valid_592553 = header.getOrDefault("X-Amz-Date")
  valid_592553 = validateParameter(valid_592553, JString, required = false,
                                 default = nil)
  if valid_592553 != nil:
    section.add "X-Amz-Date", valid_592553
  var valid_592554 = header.getOrDefault("X-Amz-Credential")
  valid_592554 = validateParameter(valid_592554, JString, required = false,
                                 default = nil)
  if valid_592554 != nil:
    section.add "X-Amz-Credential", valid_592554
  var valid_592555 = header.getOrDefault("X-Amz-Security-Token")
  valid_592555 = validateParameter(valid_592555, JString, required = false,
                                 default = nil)
  if valid_592555 != nil:
    section.add "X-Amz-Security-Token", valid_592555
  var valid_592556 = header.getOrDefault("X-Amz-Algorithm")
  valid_592556 = validateParameter(valid_592556, JString, required = false,
                                 default = nil)
  if valid_592556 != nil:
    section.add "X-Amz-Algorithm", valid_592556
  var valid_592557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592557 = validateParameter(valid_592557, JString, required = false,
                                 default = nil)
  if valid_592557 != nil:
    section.add "X-Amz-SignedHeaders", valid_592557
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592558: Call_GetModifyReplicationGroup_592528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_592558.validator(path, query, header, formData, body)
  let scheme = call_592558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592558.url(scheme.get, call_592558.host, call_592558.base,
                         call_592558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592558, url, valid)

proc call*(call_592559: Call_GetModifyReplicationGroup_592528;
          ReplicationGroupId: string; ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = ""): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  var query_592560 = newJObject()
  add(query_592560, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_592560, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_592560, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592560, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_592560, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_592560.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_592560, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_592560, "CacheNodeType", newJString(CacheNodeType))
  add(query_592560, "EngineVersion", newJString(EngineVersion))
  add(query_592560, "Action", newJString(Action))
  add(query_592560, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592560, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592560, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_592560, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_592560, "Version", newJString(Version))
  add(query_592560, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_592560, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_592560, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_592560.add "SecurityGroupIds", SecurityGroupIds
  add(query_592560, "NodeGroupId", newJString(NodeGroupId))
  result = call_592559.call(nil, query_592560, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_592528(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_592529, base: "/",
    url: url_GetModifyReplicationGroup_592530,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_592616 = ref object of OpenApiRestCall_590364
proc url_PostModifyReplicationGroupShardConfiguration_592618(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_592617(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592619 = query.getOrDefault("Action")
  valid_592619 = validateParameter(valid_592619, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_592619 != nil:
    section.add "Action", valid_592619
  var valid_592620 = query.getOrDefault("Version")
  valid_592620 = validateParameter(valid_592620, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592620 != nil:
    section.add "Version", valid_592620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592621 = header.getOrDefault("X-Amz-Signature")
  valid_592621 = validateParameter(valid_592621, JString, required = false,
                                 default = nil)
  if valid_592621 != nil:
    section.add "X-Amz-Signature", valid_592621
  var valid_592622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592622 = validateParameter(valid_592622, JString, required = false,
                                 default = nil)
  if valid_592622 != nil:
    section.add "X-Amz-Content-Sha256", valid_592622
  var valid_592623 = header.getOrDefault("X-Amz-Date")
  valid_592623 = validateParameter(valid_592623, JString, required = false,
                                 default = nil)
  if valid_592623 != nil:
    section.add "X-Amz-Date", valid_592623
  var valid_592624 = header.getOrDefault("X-Amz-Credential")
  valid_592624 = validateParameter(valid_592624, JString, required = false,
                                 default = nil)
  if valid_592624 != nil:
    section.add "X-Amz-Credential", valid_592624
  var valid_592625 = header.getOrDefault("X-Amz-Security-Token")
  valid_592625 = validateParameter(valid_592625, JString, required = false,
                                 default = nil)
  if valid_592625 != nil:
    section.add "X-Amz-Security-Token", valid_592625
  var valid_592626 = header.getOrDefault("X-Amz-Algorithm")
  valid_592626 = validateParameter(valid_592626, JString, required = false,
                                 default = nil)
  if valid_592626 != nil:
    section.add "X-Amz-Algorithm", valid_592626
  var valid_592627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592627 = validateParameter(valid_592627, JString, required = false,
                                 default = nil)
  if valid_592627 != nil:
    section.add "X-Amz-SignedHeaders", valid_592627
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_592628 = formData.getOrDefault("NodeGroupsToRemove")
  valid_592628 = validateParameter(valid_592628, JArray, required = false,
                                 default = nil)
  if valid_592628 != nil:
    section.add "NodeGroupsToRemove", valid_592628
  var valid_592629 = formData.getOrDefault("NodeGroupsToRetain")
  valid_592629 = validateParameter(valid_592629, JArray, required = false,
                                 default = nil)
  if valid_592629 != nil:
    section.add "NodeGroupsToRetain", valid_592629
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_592630 = formData.getOrDefault("NodeGroupCount")
  valid_592630 = validateParameter(valid_592630, JInt, required = true, default = nil)
  if valid_592630 != nil:
    section.add "NodeGroupCount", valid_592630
  var valid_592631 = formData.getOrDefault("ReshardingConfiguration")
  valid_592631 = validateParameter(valid_592631, JArray, required = false,
                                 default = nil)
  if valid_592631 != nil:
    section.add "ReshardingConfiguration", valid_592631
  var valid_592632 = formData.getOrDefault("ApplyImmediately")
  valid_592632 = validateParameter(valid_592632, JBool, required = true, default = nil)
  if valid_592632 != nil:
    section.add "ApplyImmediately", valid_592632
  var valid_592633 = formData.getOrDefault("ReplicationGroupId")
  valid_592633 = validateParameter(valid_592633, JString, required = true,
                                 default = nil)
  if valid_592633 != nil:
    section.add "ReplicationGroupId", valid_592633
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592634: Call_PostModifyReplicationGroupShardConfiguration_592616;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_592634.validator(path, query, header, formData, body)
  let scheme = call_592634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592634.url(scheme.get, call_592634.host, call_592634.base,
                         call_592634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592634, url, valid)

proc call*(call_592635: Call_PostModifyReplicationGroupShardConfiguration_592616;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_592636 = newJObject()
  var formData_592637 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_592637.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_592637.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_592637, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_592637.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_592637, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592636, "Action", newJString(Action))
  add(query_592636, "Version", newJString(Version))
  add(formData_592637, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592635.call(nil, query_592636, nil, formData_592637, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_592616(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_592617,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_592618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_592595 = ref object of OpenApiRestCall_590364
proc url_GetModifyReplicationGroupShardConfiguration_592597(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_592596(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_592598 = query.getOrDefault("ReshardingConfiguration")
  valid_592598 = validateParameter(valid_592598, JArray, required = false,
                                 default = nil)
  if valid_592598 != nil:
    section.add "ReshardingConfiguration", valid_592598
  var valid_592599 = query.getOrDefault("NodeGroupsToRemove")
  valid_592599 = validateParameter(valid_592599, JArray, required = false,
                                 default = nil)
  if valid_592599 != nil:
    section.add "NodeGroupsToRemove", valid_592599
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592600 = query.getOrDefault("Action")
  valid_592600 = validateParameter(valid_592600, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_592600 != nil:
    section.add "Action", valid_592600
  var valid_592601 = query.getOrDefault("ApplyImmediately")
  valid_592601 = validateParameter(valid_592601, JBool, required = true, default = nil)
  if valid_592601 != nil:
    section.add "ApplyImmediately", valid_592601
  var valid_592602 = query.getOrDefault("ReplicationGroupId")
  valid_592602 = validateParameter(valid_592602, JString, required = true,
                                 default = nil)
  if valid_592602 != nil:
    section.add "ReplicationGroupId", valid_592602
  var valid_592603 = query.getOrDefault("NodeGroupsToRetain")
  valid_592603 = validateParameter(valid_592603, JArray, required = false,
                                 default = nil)
  if valid_592603 != nil:
    section.add "NodeGroupsToRetain", valid_592603
  var valid_592604 = query.getOrDefault("Version")
  valid_592604 = validateParameter(valid_592604, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592604 != nil:
    section.add "Version", valid_592604
  var valid_592605 = query.getOrDefault("NodeGroupCount")
  valid_592605 = validateParameter(valid_592605, JInt, required = true, default = nil)
  if valid_592605 != nil:
    section.add "NodeGroupCount", valid_592605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592606 = header.getOrDefault("X-Amz-Signature")
  valid_592606 = validateParameter(valid_592606, JString, required = false,
                                 default = nil)
  if valid_592606 != nil:
    section.add "X-Amz-Signature", valid_592606
  var valid_592607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592607 = validateParameter(valid_592607, JString, required = false,
                                 default = nil)
  if valid_592607 != nil:
    section.add "X-Amz-Content-Sha256", valid_592607
  var valid_592608 = header.getOrDefault("X-Amz-Date")
  valid_592608 = validateParameter(valid_592608, JString, required = false,
                                 default = nil)
  if valid_592608 != nil:
    section.add "X-Amz-Date", valid_592608
  var valid_592609 = header.getOrDefault("X-Amz-Credential")
  valid_592609 = validateParameter(valid_592609, JString, required = false,
                                 default = nil)
  if valid_592609 != nil:
    section.add "X-Amz-Credential", valid_592609
  var valid_592610 = header.getOrDefault("X-Amz-Security-Token")
  valid_592610 = validateParameter(valid_592610, JString, required = false,
                                 default = nil)
  if valid_592610 != nil:
    section.add "X-Amz-Security-Token", valid_592610
  var valid_592611 = header.getOrDefault("X-Amz-Algorithm")
  valid_592611 = validateParameter(valid_592611, JString, required = false,
                                 default = nil)
  if valid_592611 != nil:
    section.add "X-Amz-Algorithm", valid_592611
  var valid_592612 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592612 = validateParameter(valid_592612, JString, required = false,
                                 default = nil)
  if valid_592612 != nil:
    section.add "X-Amz-SignedHeaders", valid_592612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592613: Call_GetModifyReplicationGroupShardConfiguration_592595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_592613.validator(path, query, header, formData, body)
  let scheme = call_592613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592613.url(scheme.get, call_592613.host, call_592613.base,
                         call_592613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592613, url, valid)

proc call*(call_592614: Call_GetModifyReplicationGroupShardConfiguration_592595;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_592615 = newJObject()
  if ReshardingConfiguration != nil:
    query_592615.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_592615.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_592615, "Action", newJString(Action))
  add(query_592615, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_592615, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_592615.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_592615, "Version", newJString(Version))
  add(query_592615, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_592614.call(nil, query_592615, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_592595(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_592596,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_592597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_592656 = ref object of OpenApiRestCall_590364
proc url_PostPurchaseReservedCacheNodesOffering_592658(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_592657(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592659 = query.getOrDefault("Action")
  valid_592659 = validateParameter(valid_592659, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_592659 != nil:
    section.add "Action", valid_592659
  var valid_592660 = query.getOrDefault("Version")
  valid_592660 = validateParameter(valid_592660, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592660 != nil:
    section.add "Version", valid_592660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592661 = header.getOrDefault("X-Amz-Signature")
  valid_592661 = validateParameter(valid_592661, JString, required = false,
                                 default = nil)
  if valid_592661 != nil:
    section.add "X-Amz-Signature", valid_592661
  var valid_592662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592662 = validateParameter(valid_592662, JString, required = false,
                                 default = nil)
  if valid_592662 != nil:
    section.add "X-Amz-Content-Sha256", valid_592662
  var valid_592663 = header.getOrDefault("X-Amz-Date")
  valid_592663 = validateParameter(valid_592663, JString, required = false,
                                 default = nil)
  if valid_592663 != nil:
    section.add "X-Amz-Date", valid_592663
  var valid_592664 = header.getOrDefault("X-Amz-Credential")
  valid_592664 = validateParameter(valid_592664, JString, required = false,
                                 default = nil)
  if valid_592664 != nil:
    section.add "X-Amz-Credential", valid_592664
  var valid_592665 = header.getOrDefault("X-Amz-Security-Token")
  valid_592665 = validateParameter(valid_592665, JString, required = false,
                                 default = nil)
  if valid_592665 != nil:
    section.add "X-Amz-Security-Token", valid_592665
  var valid_592666 = header.getOrDefault("X-Amz-Algorithm")
  valid_592666 = validateParameter(valid_592666, JString, required = false,
                                 default = nil)
  if valid_592666 != nil:
    section.add "X-Amz-Algorithm", valid_592666
  var valid_592667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592667 = validateParameter(valid_592667, JString, required = false,
                                 default = nil)
  if valid_592667 != nil:
    section.add "X-Amz-SignedHeaders", valid_592667
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_592668 = formData.getOrDefault("CacheNodeCount")
  valid_592668 = validateParameter(valid_592668, JInt, required = false, default = nil)
  if valid_592668 != nil:
    section.add "CacheNodeCount", valid_592668
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_592669 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592669 = validateParameter(valid_592669, JString, required = true,
                                 default = nil)
  if valid_592669 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592669
  var valid_592670 = formData.getOrDefault("ReservedCacheNodeId")
  valid_592670 = validateParameter(valid_592670, JString, required = false,
                                 default = nil)
  if valid_592670 != nil:
    section.add "ReservedCacheNodeId", valid_592670
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592671: Call_PostPurchaseReservedCacheNodesOffering_592656;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_592671.validator(path, query, header, formData, body)
  let scheme = call_592671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592671.url(scheme.get, call_592671.host, call_592671.base,
                         call_592671.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592671, url, valid)

proc call*(call_592672: Call_PostPurchaseReservedCacheNodesOffering_592656;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_592673 = newJObject()
  var formData_592674 = newJObject()
  add(formData_592674, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_592673, "Action", newJString(Action))
  add(query_592673, "Version", newJString(Version))
  add(formData_592674, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_592674, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_592672.call(nil, query_592673, nil, formData_592674, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_592656(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_592657, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_592658,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_592638 = ref object of OpenApiRestCall_590364
proc url_GetPurchaseReservedCacheNodesOffering_592640(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_592639(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_592641 = query.getOrDefault("CacheNodeCount")
  valid_592641 = validateParameter(valid_592641, JInt, required = false, default = nil)
  if valid_592641 != nil:
    section.add "CacheNodeCount", valid_592641
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592642 = query.getOrDefault("Action")
  valid_592642 = validateParameter(valid_592642, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_592642 != nil:
    section.add "Action", valid_592642
  var valid_592643 = query.getOrDefault("ReservedCacheNodeId")
  valid_592643 = validateParameter(valid_592643, JString, required = false,
                                 default = nil)
  if valid_592643 != nil:
    section.add "ReservedCacheNodeId", valid_592643
  var valid_592644 = query.getOrDefault("Version")
  valid_592644 = validateParameter(valid_592644, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592644 != nil:
    section.add "Version", valid_592644
  var valid_592645 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_592645 = validateParameter(valid_592645, JString, required = true,
                                 default = nil)
  if valid_592645 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_592645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592646 = header.getOrDefault("X-Amz-Signature")
  valid_592646 = validateParameter(valid_592646, JString, required = false,
                                 default = nil)
  if valid_592646 != nil:
    section.add "X-Amz-Signature", valid_592646
  var valid_592647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592647 = validateParameter(valid_592647, JString, required = false,
                                 default = nil)
  if valid_592647 != nil:
    section.add "X-Amz-Content-Sha256", valid_592647
  var valid_592648 = header.getOrDefault("X-Amz-Date")
  valid_592648 = validateParameter(valid_592648, JString, required = false,
                                 default = nil)
  if valid_592648 != nil:
    section.add "X-Amz-Date", valid_592648
  var valid_592649 = header.getOrDefault("X-Amz-Credential")
  valid_592649 = validateParameter(valid_592649, JString, required = false,
                                 default = nil)
  if valid_592649 != nil:
    section.add "X-Amz-Credential", valid_592649
  var valid_592650 = header.getOrDefault("X-Amz-Security-Token")
  valid_592650 = validateParameter(valid_592650, JString, required = false,
                                 default = nil)
  if valid_592650 != nil:
    section.add "X-Amz-Security-Token", valid_592650
  var valid_592651 = header.getOrDefault("X-Amz-Algorithm")
  valid_592651 = validateParameter(valid_592651, JString, required = false,
                                 default = nil)
  if valid_592651 != nil:
    section.add "X-Amz-Algorithm", valid_592651
  var valid_592652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592652 = validateParameter(valid_592652, JString, required = false,
                                 default = nil)
  if valid_592652 != nil:
    section.add "X-Amz-SignedHeaders", valid_592652
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592653: Call_GetPurchaseReservedCacheNodesOffering_592638;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_592653.validator(path, query, header, formData, body)
  let scheme = call_592653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592653.url(scheme.get, call_592653.host, call_592653.base,
                         call_592653.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592653, url, valid)

proc call*(call_592654: Call_GetPurchaseReservedCacheNodesOffering_592638;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_592655 = newJObject()
  add(query_592655, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_592655, "Action", newJString(Action))
  add(query_592655, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_592655, "Version", newJString(Version))
  add(query_592655, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_592654.call(nil, query_592655, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_592638(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_592639, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_592640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_592692 = ref object of OpenApiRestCall_590364
proc url_PostRebootCacheCluster_592694(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootCacheCluster_592693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592695 = query.getOrDefault("Action")
  valid_592695 = validateParameter(valid_592695, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_592695 != nil:
    section.add "Action", valid_592695
  var valid_592696 = query.getOrDefault("Version")
  valid_592696 = validateParameter(valid_592696, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592696 != nil:
    section.add "Version", valid_592696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592697 = header.getOrDefault("X-Amz-Signature")
  valid_592697 = validateParameter(valid_592697, JString, required = false,
                                 default = nil)
  if valid_592697 != nil:
    section.add "X-Amz-Signature", valid_592697
  var valid_592698 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592698 = validateParameter(valid_592698, JString, required = false,
                                 default = nil)
  if valid_592698 != nil:
    section.add "X-Amz-Content-Sha256", valid_592698
  var valid_592699 = header.getOrDefault("X-Amz-Date")
  valid_592699 = validateParameter(valid_592699, JString, required = false,
                                 default = nil)
  if valid_592699 != nil:
    section.add "X-Amz-Date", valid_592699
  var valid_592700 = header.getOrDefault("X-Amz-Credential")
  valid_592700 = validateParameter(valid_592700, JString, required = false,
                                 default = nil)
  if valid_592700 != nil:
    section.add "X-Amz-Credential", valid_592700
  var valid_592701 = header.getOrDefault("X-Amz-Security-Token")
  valid_592701 = validateParameter(valid_592701, JString, required = false,
                                 default = nil)
  if valid_592701 != nil:
    section.add "X-Amz-Security-Token", valid_592701
  var valid_592702 = header.getOrDefault("X-Amz-Algorithm")
  valid_592702 = validateParameter(valid_592702, JString, required = false,
                                 default = nil)
  if valid_592702 != nil:
    section.add "X-Amz-Algorithm", valid_592702
  var valid_592703 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592703 = validateParameter(valid_592703, JString, required = false,
                                 default = nil)
  if valid_592703 != nil:
    section.add "X-Amz-SignedHeaders", valid_592703
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_592704 = formData.getOrDefault("CacheClusterId")
  valid_592704 = validateParameter(valid_592704, JString, required = true,
                                 default = nil)
  if valid_592704 != nil:
    section.add "CacheClusterId", valid_592704
  var valid_592705 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_592705 = validateParameter(valid_592705, JArray, required = true, default = nil)
  if valid_592705 != nil:
    section.add "CacheNodeIdsToReboot", valid_592705
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592706: Call_PostRebootCacheCluster_592692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_592706.validator(path, query, header, formData, body)
  let scheme = call_592706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592706.url(scheme.get, call_592706.host, call_592706.base,
                         call_592706.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592706, url, valid)

proc call*(call_592707: Call_PostRebootCacheCluster_592692; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_592708 = newJObject()
  var formData_592709 = newJObject()
  add(formData_592709, "CacheClusterId", newJString(CacheClusterId))
  add(query_592708, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_592709.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_592708, "Version", newJString(Version))
  result = call_592707.call(nil, query_592708, nil, formData_592709, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_592692(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_592693, base: "/",
    url: url_PostRebootCacheCluster_592694, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_592675 = ref object of OpenApiRestCall_590364
proc url_GetRebootCacheCluster_592677(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootCacheCluster_592676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_592678 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_592678 = validateParameter(valid_592678, JArray, required = true, default = nil)
  if valid_592678 != nil:
    section.add "CacheNodeIdsToReboot", valid_592678
  var valid_592679 = query.getOrDefault("CacheClusterId")
  valid_592679 = validateParameter(valid_592679, JString, required = true,
                                 default = nil)
  if valid_592679 != nil:
    section.add "CacheClusterId", valid_592679
  var valid_592680 = query.getOrDefault("Action")
  valid_592680 = validateParameter(valid_592680, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_592680 != nil:
    section.add "Action", valid_592680
  var valid_592681 = query.getOrDefault("Version")
  valid_592681 = validateParameter(valid_592681, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592681 != nil:
    section.add "Version", valid_592681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592682 = header.getOrDefault("X-Amz-Signature")
  valid_592682 = validateParameter(valid_592682, JString, required = false,
                                 default = nil)
  if valid_592682 != nil:
    section.add "X-Amz-Signature", valid_592682
  var valid_592683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592683 = validateParameter(valid_592683, JString, required = false,
                                 default = nil)
  if valid_592683 != nil:
    section.add "X-Amz-Content-Sha256", valid_592683
  var valid_592684 = header.getOrDefault("X-Amz-Date")
  valid_592684 = validateParameter(valid_592684, JString, required = false,
                                 default = nil)
  if valid_592684 != nil:
    section.add "X-Amz-Date", valid_592684
  var valid_592685 = header.getOrDefault("X-Amz-Credential")
  valid_592685 = validateParameter(valid_592685, JString, required = false,
                                 default = nil)
  if valid_592685 != nil:
    section.add "X-Amz-Credential", valid_592685
  var valid_592686 = header.getOrDefault("X-Amz-Security-Token")
  valid_592686 = validateParameter(valid_592686, JString, required = false,
                                 default = nil)
  if valid_592686 != nil:
    section.add "X-Amz-Security-Token", valid_592686
  var valid_592687 = header.getOrDefault("X-Amz-Algorithm")
  valid_592687 = validateParameter(valid_592687, JString, required = false,
                                 default = nil)
  if valid_592687 != nil:
    section.add "X-Amz-Algorithm", valid_592687
  var valid_592688 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592688 = validateParameter(valid_592688, JString, required = false,
                                 default = nil)
  if valid_592688 != nil:
    section.add "X-Amz-SignedHeaders", valid_592688
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592689: Call_GetRebootCacheCluster_592675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_592689.validator(path, query, header, formData, body)
  let scheme = call_592689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592689.url(scheme.get, call_592689.host, call_592689.base,
                         call_592689.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592689, url, valid)

proc call*(call_592690: Call_GetRebootCacheCluster_592675;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592691 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_592691.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_592691, "CacheClusterId", newJString(CacheClusterId))
  add(query_592691, "Action", newJString(Action))
  add(query_592691, "Version", newJString(Version))
  result = call_592690.call(nil, query_592691, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_592675(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_592676, base: "/",
    url: url_GetRebootCacheCluster_592677, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_592727 = ref object of OpenApiRestCall_590364
proc url_PostRemoveTagsFromResource_592729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_592728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592730 = query.getOrDefault("Action")
  valid_592730 = validateParameter(valid_592730, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_592730 != nil:
    section.add "Action", valid_592730
  var valid_592731 = query.getOrDefault("Version")
  valid_592731 = validateParameter(valid_592731, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592731 != nil:
    section.add "Version", valid_592731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592732 = header.getOrDefault("X-Amz-Signature")
  valid_592732 = validateParameter(valid_592732, JString, required = false,
                                 default = nil)
  if valid_592732 != nil:
    section.add "X-Amz-Signature", valid_592732
  var valid_592733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592733 = validateParameter(valid_592733, JString, required = false,
                                 default = nil)
  if valid_592733 != nil:
    section.add "X-Amz-Content-Sha256", valid_592733
  var valid_592734 = header.getOrDefault("X-Amz-Date")
  valid_592734 = validateParameter(valid_592734, JString, required = false,
                                 default = nil)
  if valid_592734 != nil:
    section.add "X-Amz-Date", valid_592734
  var valid_592735 = header.getOrDefault("X-Amz-Credential")
  valid_592735 = validateParameter(valid_592735, JString, required = false,
                                 default = nil)
  if valid_592735 != nil:
    section.add "X-Amz-Credential", valid_592735
  var valid_592736 = header.getOrDefault("X-Amz-Security-Token")
  valid_592736 = validateParameter(valid_592736, JString, required = false,
                                 default = nil)
  if valid_592736 != nil:
    section.add "X-Amz-Security-Token", valid_592736
  var valid_592737 = header.getOrDefault("X-Amz-Algorithm")
  valid_592737 = validateParameter(valid_592737, JString, required = false,
                                 default = nil)
  if valid_592737 != nil:
    section.add "X-Amz-Algorithm", valid_592737
  var valid_592738 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592738 = validateParameter(valid_592738, JString, required = false,
                                 default = nil)
  if valid_592738 != nil:
    section.add "X-Amz-SignedHeaders", valid_592738
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_592739 = formData.getOrDefault("TagKeys")
  valid_592739 = validateParameter(valid_592739, JArray, required = true, default = nil)
  if valid_592739 != nil:
    section.add "TagKeys", valid_592739
  var valid_592740 = formData.getOrDefault("ResourceName")
  valid_592740 = validateParameter(valid_592740, JString, required = true,
                                 default = nil)
  if valid_592740 != nil:
    section.add "ResourceName", valid_592740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592741: Call_PostRemoveTagsFromResource_592727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_592741.validator(path, query, header, formData, body)
  let scheme = call_592741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592741.url(scheme.get, call_592741.host, call_592741.base,
                         call_592741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592741, url, valid)

proc call*(call_592742: Call_PostRemoveTagsFromResource_592727; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_592743 = newJObject()
  var formData_592744 = newJObject()
  if TagKeys != nil:
    formData_592744.add "TagKeys", TagKeys
  add(query_592743, "Action", newJString(Action))
  add(query_592743, "Version", newJString(Version))
  add(formData_592744, "ResourceName", newJString(ResourceName))
  result = call_592742.call(nil, query_592743, nil, formData_592744, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_592727(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_592728, base: "/",
    url: url_PostRemoveTagsFromResource_592729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_592710 = ref object of OpenApiRestCall_590364
proc url_GetRemoveTagsFromResource_592712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_592711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_592713 = query.getOrDefault("ResourceName")
  valid_592713 = validateParameter(valid_592713, JString, required = true,
                                 default = nil)
  if valid_592713 != nil:
    section.add "ResourceName", valid_592713
  var valid_592714 = query.getOrDefault("TagKeys")
  valid_592714 = validateParameter(valid_592714, JArray, required = true, default = nil)
  if valid_592714 != nil:
    section.add "TagKeys", valid_592714
  var valid_592715 = query.getOrDefault("Action")
  valid_592715 = validateParameter(valid_592715, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_592715 != nil:
    section.add "Action", valid_592715
  var valid_592716 = query.getOrDefault("Version")
  valid_592716 = validateParameter(valid_592716, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592716 != nil:
    section.add "Version", valid_592716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592717 = header.getOrDefault("X-Amz-Signature")
  valid_592717 = validateParameter(valid_592717, JString, required = false,
                                 default = nil)
  if valid_592717 != nil:
    section.add "X-Amz-Signature", valid_592717
  var valid_592718 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592718 = validateParameter(valid_592718, JString, required = false,
                                 default = nil)
  if valid_592718 != nil:
    section.add "X-Amz-Content-Sha256", valid_592718
  var valid_592719 = header.getOrDefault("X-Amz-Date")
  valid_592719 = validateParameter(valid_592719, JString, required = false,
                                 default = nil)
  if valid_592719 != nil:
    section.add "X-Amz-Date", valid_592719
  var valid_592720 = header.getOrDefault("X-Amz-Credential")
  valid_592720 = validateParameter(valid_592720, JString, required = false,
                                 default = nil)
  if valid_592720 != nil:
    section.add "X-Amz-Credential", valid_592720
  var valid_592721 = header.getOrDefault("X-Amz-Security-Token")
  valid_592721 = validateParameter(valid_592721, JString, required = false,
                                 default = nil)
  if valid_592721 != nil:
    section.add "X-Amz-Security-Token", valid_592721
  var valid_592722 = header.getOrDefault("X-Amz-Algorithm")
  valid_592722 = validateParameter(valid_592722, JString, required = false,
                                 default = nil)
  if valid_592722 != nil:
    section.add "X-Amz-Algorithm", valid_592722
  var valid_592723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592723 = validateParameter(valid_592723, JString, required = false,
                                 default = nil)
  if valid_592723 != nil:
    section.add "X-Amz-SignedHeaders", valid_592723
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592724: Call_GetRemoveTagsFromResource_592710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_592724.validator(path, query, header, formData, body)
  let scheme = call_592724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592724.url(scheme.get, call_592724.host, call_592724.base,
                         call_592724.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592724, url, valid)

proc call*(call_592725: Call_GetRemoveTagsFromResource_592710;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592726 = newJObject()
  add(query_592726, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_592726.add "TagKeys", TagKeys
  add(query_592726, "Action", newJString(Action))
  add(query_592726, "Version", newJString(Version))
  result = call_592725.call(nil, query_592726, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_592710(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_592711, base: "/",
    url: url_GetRemoveTagsFromResource_592712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_592763 = ref object of OpenApiRestCall_590364
proc url_PostResetCacheParameterGroup_592765(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetCacheParameterGroup_592764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592766 = query.getOrDefault("Action")
  valid_592766 = validateParameter(valid_592766, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_592766 != nil:
    section.add "Action", valid_592766
  var valid_592767 = query.getOrDefault("Version")
  valid_592767 = validateParameter(valid_592767, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592767 != nil:
    section.add "Version", valid_592767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592768 = header.getOrDefault("X-Amz-Signature")
  valid_592768 = validateParameter(valid_592768, JString, required = false,
                                 default = nil)
  if valid_592768 != nil:
    section.add "X-Amz-Signature", valid_592768
  var valid_592769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592769 = validateParameter(valid_592769, JString, required = false,
                                 default = nil)
  if valid_592769 != nil:
    section.add "X-Amz-Content-Sha256", valid_592769
  var valid_592770 = header.getOrDefault("X-Amz-Date")
  valid_592770 = validateParameter(valid_592770, JString, required = false,
                                 default = nil)
  if valid_592770 != nil:
    section.add "X-Amz-Date", valid_592770
  var valid_592771 = header.getOrDefault("X-Amz-Credential")
  valid_592771 = validateParameter(valid_592771, JString, required = false,
                                 default = nil)
  if valid_592771 != nil:
    section.add "X-Amz-Credential", valid_592771
  var valid_592772 = header.getOrDefault("X-Amz-Security-Token")
  valid_592772 = validateParameter(valid_592772, JString, required = false,
                                 default = nil)
  if valid_592772 != nil:
    section.add "X-Amz-Security-Token", valid_592772
  var valid_592773 = header.getOrDefault("X-Amz-Algorithm")
  valid_592773 = validateParameter(valid_592773, JString, required = false,
                                 default = nil)
  if valid_592773 != nil:
    section.add "X-Amz-Algorithm", valid_592773
  var valid_592774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592774 = validateParameter(valid_592774, JString, required = false,
                                 default = nil)
  if valid_592774 != nil:
    section.add "X-Amz-SignedHeaders", valid_592774
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_592775 = formData.getOrDefault("ResetAllParameters")
  valid_592775 = validateParameter(valid_592775, JBool, required = false, default = nil)
  if valid_592775 != nil:
    section.add "ResetAllParameters", valid_592775
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592776 = formData.getOrDefault("CacheParameterGroupName")
  valid_592776 = validateParameter(valid_592776, JString, required = true,
                                 default = nil)
  if valid_592776 != nil:
    section.add "CacheParameterGroupName", valid_592776
  var valid_592777 = formData.getOrDefault("ParameterNameValues")
  valid_592777 = validateParameter(valid_592777, JArray, required = false,
                                 default = nil)
  if valid_592777 != nil:
    section.add "ParameterNameValues", valid_592777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592778: Call_PostResetCacheParameterGroup_592763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_592778.validator(path, query, header, formData, body)
  let scheme = call_592778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592778.url(scheme.get, call_592778.host, call_592778.base,
                         call_592778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592778, url, valid)

proc call*(call_592779: Call_PostResetCacheParameterGroup_592763;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_592780 = newJObject()
  var formData_592781 = newJObject()
  add(formData_592781, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_592781, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_592780, "Action", newJString(Action))
  add(query_592780, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_592781.add "ParameterNameValues", ParameterNameValues
  result = call_592779.call(nil, query_592780, nil, formData_592781, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_592763(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_592764, base: "/",
    url: url_PostResetCacheParameterGroup_592765,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_592745 = ref object of OpenApiRestCall_590364
proc url_GetResetCacheParameterGroup_592747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetCacheParameterGroup_592746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_592748 = query.getOrDefault("CacheParameterGroupName")
  valid_592748 = validateParameter(valid_592748, JString, required = true,
                                 default = nil)
  if valid_592748 != nil:
    section.add "CacheParameterGroupName", valid_592748
  var valid_592749 = query.getOrDefault("ResetAllParameters")
  valid_592749 = validateParameter(valid_592749, JBool, required = false, default = nil)
  if valid_592749 != nil:
    section.add "ResetAllParameters", valid_592749
  var valid_592750 = query.getOrDefault("ParameterNameValues")
  valid_592750 = validateParameter(valid_592750, JArray, required = false,
                                 default = nil)
  if valid_592750 != nil:
    section.add "ParameterNameValues", valid_592750
  var valid_592751 = query.getOrDefault("Action")
  valid_592751 = validateParameter(valid_592751, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_592751 != nil:
    section.add "Action", valid_592751
  var valid_592752 = query.getOrDefault("Version")
  valid_592752 = validateParameter(valid_592752, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592752 != nil:
    section.add "Version", valid_592752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592753 = header.getOrDefault("X-Amz-Signature")
  valid_592753 = validateParameter(valid_592753, JString, required = false,
                                 default = nil)
  if valid_592753 != nil:
    section.add "X-Amz-Signature", valid_592753
  var valid_592754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592754 = validateParameter(valid_592754, JString, required = false,
                                 default = nil)
  if valid_592754 != nil:
    section.add "X-Amz-Content-Sha256", valid_592754
  var valid_592755 = header.getOrDefault("X-Amz-Date")
  valid_592755 = validateParameter(valid_592755, JString, required = false,
                                 default = nil)
  if valid_592755 != nil:
    section.add "X-Amz-Date", valid_592755
  var valid_592756 = header.getOrDefault("X-Amz-Credential")
  valid_592756 = validateParameter(valid_592756, JString, required = false,
                                 default = nil)
  if valid_592756 != nil:
    section.add "X-Amz-Credential", valid_592756
  var valid_592757 = header.getOrDefault("X-Amz-Security-Token")
  valid_592757 = validateParameter(valid_592757, JString, required = false,
                                 default = nil)
  if valid_592757 != nil:
    section.add "X-Amz-Security-Token", valid_592757
  var valid_592758 = header.getOrDefault("X-Amz-Algorithm")
  valid_592758 = validateParameter(valid_592758, JString, required = false,
                                 default = nil)
  if valid_592758 != nil:
    section.add "X-Amz-Algorithm", valid_592758
  var valid_592759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592759 = validateParameter(valid_592759, JString, required = false,
                                 default = nil)
  if valid_592759 != nil:
    section.add "X-Amz-SignedHeaders", valid_592759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592760: Call_GetResetCacheParameterGroup_592745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_592760.validator(path, query, header, formData, body)
  let scheme = call_592760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592760.url(scheme.get, call_592760.host, call_592760.base,
                         call_592760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592760, url, valid)

proc call*(call_592761: Call_GetResetCacheParameterGroup_592745;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592762 = newJObject()
  add(query_592762, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_592762, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_592762.add "ParameterNameValues", ParameterNameValues
  add(query_592762, "Action", newJString(Action))
  add(query_592762, "Version", newJString(Version))
  result = call_592761.call(nil, query_592762, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_592745(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_592746, base: "/",
    url: url_GetResetCacheParameterGroup_592747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_592800 = ref object of OpenApiRestCall_590364
proc url_PostRevokeCacheSecurityGroupIngress_592802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_592801(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592803 = query.getOrDefault("Action")
  valid_592803 = validateParameter(valid_592803, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_592803 != nil:
    section.add "Action", valid_592803
  var valid_592804 = query.getOrDefault("Version")
  valid_592804 = validateParameter(valid_592804, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592804 != nil:
    section.add "Version", valid_592804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592805 = header.getOrDefault("X-Amz-Signature")
  valid_592805 = validateParameter(valid_592805, JString, required = false,
                                 default = nil)
  if valid_592805 != nil:
    section.add "X-Amz-Signature", valid_592805
  var valid_592806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592806 = validateParameter(valid_592806, JString, required = false,
                                 default = nil)
  if valid_592806 != nil:
    section.add "X-Amz-Content-Sha256", valid_592806
  var valid_592807 = header.getOrDefault("X-Amz-Date")
  valid_592807 = validateParameter(valid_592807, JString, required = false,
                                 default = nil)
  if valid_592807 != nil:
    section.add "X-Amz-Date", valid_592807
  var valid_592808 = header.getOrDefault("X-Amz-Credential")
  valid_592808 = validateParameter(valid_592808, JString, required = false,
                                 default = nil)
  if valid_592808 != nil:
    section.add "X-Amz-Credential", valid_592808
  var valid_592809 = header.getOrDefault("X-Amz-Security-Token")
  valid_592809 = validateParameter(valid_592809, JString, required = false,
                                 default = nil)
  if valid_592809 != nil:
    section.add "X-Amz-Security-Token", valid_592809
  var valid_592810 = header.getOrDefault("X-Amz-Algorithm")
  valid_592810 = validateParameter(valid_592810, JString, required = false,
                                 default = nil)
  if valid_592810 != nil:
    section.add "X-Amz-Algorithm", valid_592810
  var valid_592811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592811 = validateParameter(valid_592811, JString, required = false,
                                 default = nil)
  if valid_592811 != nil:
    section.add "X-Amz-SignedHeaders", valid_592811
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_592812 = formData.getOrDefault("CacheSecurityGroupName")
  valid_592812 = validateParameter(valid_592812, JString, required = true,
                                 default = nil)
  if valid_592812 != nil:
    section.add "CacheSecurityGroupName", valid_592812
  var valid_592813 = formData.getOrDefault("EC2SecurityGroupName")
  valid_592813 = validateParameter(valid_592813, JString, required = true,
                                 default = nil)
  if valid_592813 != nil:
    section.add "EC2SecurityGroupName", valid_592813
  var valid_592814 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_592814 = validateParameter(valid_592814, JString, required = true,
                                 default = nil)
  if valid_592814 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_592814
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592815: Call_PostRevokeCacheSecurityGroupIngress_592800;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_592815.validator(path, query, header, formData, body)
  let scheme = call_592815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592815.url(scheme.get, call_592815.host, call_592815.base,
                         call_592815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592815, url, valid)

proc call*(call_592816: Call_PostRevokeCacheSecurityGroupIngress_592800;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592817 = newJObject()
  var formData_592818 = newJObject()
  add(formData_592818, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_592818, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_592818, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_592817, "Action", newJString(Action))
  add(query_592817, "Version", newJString(Version))
  result = call_592816.call(nil, query_592817, nil, formData_592818, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_592800(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_592801, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_592802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_592782 = ref object of OpenApiRestCall_590364
proc url_GetRevokeCacheSecurityGroupIngress_592784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_592783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_592785 = query.getOrDefault("EC2SecurityGroupName")
  valid_592785 = validateParameter(valid_592785, JString, required = true,
                                 default = nil)
  if valid_592785 != nil:
    section.add "EC2SecurityGroupName", valid_592785
  var valid_592786 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_592786 = validateParameter(valid_592786, JString, required = true,
                                 default = nil)
  if valid_592786 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_592786
  var valid_592787 = query.getOrDefault("Action")
  valid_592787 = validateParameter(valid_592787, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_592787 != nil:
    section.add "Action", valid_592787
  var valid_592788 = query.getOrDefault("CacheSecurityGroupName")
  valid_592788 = validateParameter(valid_592788, JString, required = true,
                                 default = nil)
  if valid_592788 != nil:
    section.add "CacheSecurityGroupName", valid_592788
  var valid_592789 = query.getOrDefault("Version")
  valid_592789 = validateParameter(valid_592789, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592789 != nil:
    section.add "Version", valid_592789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592790 = header.getOrDefault("X-Amz-Signature")
  valid_592790 = validateParameter(valid_592790, JString, required = false,
                                 default = nil)
  if valid_592790 != nil:
    section.add "X-Amz-Signature", valid_592790
  var valid_592791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592791 = validateParameter(valid_592791, JString, required = false,
                                 default = nil)
  if valid_592791 != nil:
    section.add "X-Amz-Content-Sha256", valid_592791
  var valid_592792 = header.getOrDefault("X-Amz-Date")
  valid_592792 = validateParameter(valid_592792, JString, required = false,
                                 default = nil)
  if valid_592792 != nil:
    section.add "X-Amz-Date", valid_592792
  var valid_592793 = header.getOrDefault("X-Amz-Credential")
  valid_592793 = validateParameter(valid_592793, JString, required = false,
                                 default = nil)
  if valid_592793 != nil:
    section.add "X-Amz-Credential", valid_592793
  var valid_592794 = header.getOrDefault("X-Amz-Security-Token")
  valid_592794 = validateParameter(valid_592794, JString, required = false,
                                 default = nil)
  if valid_592794 != nil:
    section.add "X-Amz-Security-Token", valid_592794
  var valid_592795 = header.getOrDefault("X-Amz-Algorithm")
  valid_592795 = validateParameter(valid_592795, JString, required = false,
                                 default = nil)
  if valid_592795 != nil:
    section.add "X-Amz-Algorithm", valid_592795
  var valid_592796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592796 = validateParameter(valid_592796, JString, required = false,
                                 default = nil)
  if valid_592796 != nil:
    section.add "X-Amz-SignedHeaders", valid_592796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592797: Call_GetRevokeCacheSecurityGroupIngress_592782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_592797.validator(path, query, header, formData, body)
  let scheme = call_592797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592797.url(scheme.get, call_592797.host, call_592797.base,
                         call_592797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592797, url, valid)

proc call*(call_592798: Call_GetRevokeCacheSecurityGroupIngress_592782;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_592799 = newJObject()
  add(query_592799, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_592799, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_592799, "Action", newJString(Action))
  add(query_592799, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_592799, "Version", newJString(Version))
  result = call_592798.call(nil, query_592799, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_592782(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_592783, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_592784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_592836 = ref object of OpenApiRestCall_590364
proc url_PostTestFailover_592838(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTestFailover_592837(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592839 = query.getOrDefault("Action")
  valid_592839 = validateParameter(valid_592839, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_592839 != nil:
    section.add "Action", valid_592839
  var valid_592840 = query.getOrDefault("Version")
  valid_592840 = validateParameter(valid_592840, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592840 != nil:
    section.add "Version", valid_592840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592841 = header.getOrDefault("X-Amz-Signature")
  valid_592841 = validateParameter(valid_592841, JString, required = false,
                                 default = nil)
  if valid_592841 != nil:
    section.add "X-Amz-Signature", valid_592841
  var valid_592842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592842 = validateParameter(valid_592842, JString, required = false,
                                 default = nil)
  if valid_592842 != nil:
    section.add "X-Amz-Content-Sha256", valid_592842
  var valid_592843 = header.getOrDefault("X-Amz-Date")
  valid_592843 = validateParameter(valid_592843, JString, required = false,
                                 default = nil)
  if valid_592843 != nil:
    section.add "X-Amz-Date", valid_592843
  var valid_592844 = header.getOrDefault("X-Amz-Credential")
  valid_592844 = validateParameter(valid_592844, JString, required = false,
                                 default = nil)
  if valid_592844 != nil:
    section.add "X-Amz-Credential", valid_592844
  var valid_592845 = header.getOrDefault("X-Amz-Security-Token")
  valid_592845 = validateParameter(valid_592845, JString, required = false,
                                 default = nil)
  if valid_592845 != nil:
    section.add "X-Amz-Security-Token", valid_592845
  var valid_592846 = header.getOrDefault("X-Amz-Algorithm")
  valid_592846 = validateParameter(valid_592846, JString, required = false,
                                 default = nil)
  if valid_592846 != nil:
    section.add "X-Amz-Algorithm", valid_592846
  var valid_592847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592847 = validateParameter(valid_592847, JString, required = false,
                                 default = nil)
  if valid_592847 != nil:
    section.add "X-Amz-SignedHeaders", valid_592847
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_592848 = formData.getOrDefault("NodeGroupId")
  valid_592848 = validateParameter(valid_592848, JString, required = true,
                                 default = nil)
  if valid_592848 != nil:
    section.add "NodeGroupId", valid_592848
  var valid_592849 = formData.getOrDefault("ReplicationGroupId")
  valid_592849 = validateParameter(valid_592849, JString, required = true,
                                 default = nil)
  if valid_592849 != nil:
    section.add "ReplicationGroupId", valid_592849
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592850: Call_PostTestFailover_592836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_592850.validator(path, query, header, formData, body)
  let scheme = call_592850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592850.url(scheme.get, call_592850.host, call_592850.base,
                         call_592850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592850, url, valid)

proc call*(call_592851: Call_PostTestFailover_592836; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_592852 = newJObject()
  var formData_592853 = newJObject()
  add(formData_592853, "NodeGroupId", newJString(NodeGroupId))
  add(query_592852, "Action", newJString(Action))
  add(query_592852, "Version", newJString(Version))
  add(formData_592853, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_592851.call(nil, query_592852, nil, formData_592853, nil)

var postTestFailover* = Call_PostTestFailover_592836(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_592837,
    base: "/", url: url_PostTestFailover_592838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_592819 = ref object of OpenApiRestCall_590364
proc url_GetTestFailover_592821(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTestFailover_592820(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592822 = query.getOrDefault("Action")
  valid_592822 = validateParameter(valid_592822, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_592822 != nil:
    section.add "Action", valid_592822
  var valid_592823 = query.getOrDefault("ReplicationGroupId")
  valid_592823 = validateParameter(valid_592823, JString, required = true,
                                 default = nil)
  if valid_592823 != nil:
    section.add "ReplicationGroupId", valid_592823
  var valid_592824 = query.getOrDefault("Version")
  valid_592824 = validateParameter(valid_592824, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592824 != nil:
    section.add "Version", valid_592824
  var valid_592825 = query.getOrDefault("NodeGroupId")
  valid_592825 = validateParameter(valid_592825, JString, required = true,
                                 default = nil)
  if valid_592825 != nil:
    section.add "NodeGroupId", valid_592825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592826 = header.getOrDefault("X-Amz-Signature")
  valid_592826 = validateParameter(valid_592826, JString, required = false,
                                 default = nil)
  if valid_592826 != nil:
    section.add "X-Amz-Signature", valid_592826
  var valid_592827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592827 = validateParameter(valid_592827, JString, required = false,
                                 default = nil)
  if valid_592827 != nil:
    section.add "X-Amz-Content-Sha256", valid_592827
  var valid_592828 = header.getOrDefault("X-Amz-Date")
  valid_592828 = validateParameter(valid_592828, JString, required = false,
                                 default = nil)
  if valid_592828 != nil:
    section.add "X-Amz-Date", valid_592828
  var valid_592829 = header.getOrDefault("X-Amz-Credential")
  valid_592829 = validateParameter(valid_592829, JString, required = false,
                                 default = nil)
  if valid_592829 != nil:
    section.add "X-Amz-Credential", valid_592829
  var valid_592830 = header.getOrDefault("X-Amz-Security-Token")
  valid_592830 = validateParameter(valid_592830, JString, required = false,
                                 default = nil)
  if valid_592830 != nil:
    section.add "X-Amz-Security-Token", valid_592830
  var valid_592831 = header.getOrDefault("X-Amz-Algorithm")
  valid_592831 = validateParameter(valid_592831, JString, required = false,
                                 default = nil)
  if valid_592831 != nil:
    section.add "X-Amz-Algorithm", valid_592831
  var valid_592832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592832 = validateParameter(valid_592832, JString, required = false,
                                 default = nil)
  if valid_592832 != nil:
    section.add "X-Amz-SignedHeaders", valid_592832
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592833: Call_GetTestFailover_592819; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_592833.validator(path, query, header, formData, body)
  let scheme = call_592833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592833.url(scheme.get, call_592833.host, call_592833.base,
                         call_592833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592833, url, valid)

proc call*(call_592834: Call_GetTestFailover_592819; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_592835 = newJObject()
  add(query_592835, "Action", newJString(Action))
  add(query_592835, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_592835, "Version", newJString(Version))
  add(query_592835, "NodeGroupId", newJString(NodeGroupId))
  result = call_592834.call(nil, query_592835, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_592819(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_592820,
    base: "/", url: url_GetTestFailover_592821, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
